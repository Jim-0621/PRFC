File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/constant/StrategyConstant.java
Patch:
@@ -50,5 +50,7 @@ public class StrategyConstant {
     public static final String SPRING_APPLICATION_STRATEGY_AUTO_SCAN_PACKAGES_ENABLED = "spring.application.strategy.auto.scan.packages.enabled";
     public static final String SPRING_APPLICATION_STRATEGY_AUTO_SCAN_RECURSION_ENABLED = "spring.application.strategy.auto.scan.recursion.enabled";
 
+    public static final String STRATEGY_DEBUG = "strategy.debug";
+
     public static final String STRATEGY_CONTEXT_ALARM = "strategy-context-alarm";
 }
\ No newline at end of file

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/expression/DiscoveryTypeComparator.java
Patch:
@@ -15,7 +15,7 @@
 import org.springframework.expression.spel.support.StandardTypeComparator;
 import org.springframework.lang.Nullable;
 
-public class DiscoveryTypeComparor extends StandardTypeComparator {
+public class DiscoveryTypeComparator extends StandardTypeComparator {
     @Override
     public int compare(@Nullable Object left, @Nullable Object right) throws SpelEvaluationException {
         if (left == null) {

File: discovery-commons/discovery-common/src/test/java/com/nepxion/discovery/common/DiscoveryExpressionTest.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.commons.lang3.StringUtils;
 
 import com.nepxion.discovery.common.expression.DiscoveryExpressionResolver;
-import com.nepxion.discovery.common.expression.DiscoveryTypeComparor;
+import com.nepxion.discovery.common.expression.DiscoveryTypeComparator;
 import com.nepxion.discovery.common.util.StringUtil;
 
 public class DiscoveryExpressionTest {
@@ -45,7 +45,7 @@ private static boolean test1() {
         map.put("a", "1.2333");
         map.put("b", "y");
 
-        return DiscoveryExpressionResolver.eval(expression, "H", map, new DiscoveryTypeComparor());
+        return DiscoveryExpressionResolver.eval(expression, "H", map, new DiscoveryTypeComparator());
     }
 
     private static List<String> test2() {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/StrategyResourceImpl.java
Patch:
@@ -41,7 +41,7 @@
 import com.nepxion.discovery.common.entity.VersionWeightEntity;
 import com.nepxion.discovery.common.exception.DiscoveryException;
 import com.nepxion.discovery.common.expression.DiscoveryExpressionResolver;
-import com.nepxion.discovery.common.expression.DiscoveryTypeComparor;
+import com.nepxion.discovery.common.expression.DiscoveryTypeComparator;
 import com.nepxion.discovery.common.util.JsonUtil;
 import com.nepxion.discovery.common.util.StringUtil;
 import com.nepxion.discovery.common.util.VersionSortUtil;
@@ -52,7 +52,7 @@ public class StrategyResourceImpl extends ConsoleResourceDelegateImpl implements
     public static final String CONDITION = "condition";
     public static final String ROUTE = "route";
 
-    private TypeComparator typeComparator = new DiscoveryTypeComparor();
+    private TypeComparator typeComparator = new DiscoveryTypeComparator();
 
     @Autowired
     private ServiceResource serviceResource;

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/condition/DefaultStrategyTypeComparator.java
Patch:
@@ -9,8 +9,8 @@
  * @version 1.0
  */
 
-import com.nepxion.discovery.common.expression.DiscoveryTypeComparor;
+import com.nepxion.discovery.common.expression.DiscoveryTypeComparator;
 
-public class DefaultStrategyTypeComparor extends DiscoveryTypeComparor {
+public class DefaultStrategyTypeComparator extends DiscoveryTypeComparator {
 
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/configuration/StrategyAutoConfiguration.java
Patch:
@@ -31,7 +31,7 @@
 import com.nepxion.discovery.plugin.strategy.aop.RestTemplateStrategyInterceptor;
 import com.nepxion.discovery.plugin.strategy.aop.WebClientStrategyBeanPostProcessor;
 import com.nepxion.discovery.plugin.strategy.aop.WebClientStrategyInterceptor;
-import com.nepxion.discovery.plugin.strategy.condition.DefaultStrategyTypeComparor;
+import com.nepxion.discovery.plugin.strategy.condition.DefaultStrategyTypeComparator;
 import com.nepxion.discovery.plugin.strategy.condition.ExpressionStrategyCondition;
 import com.nepxion.discovery.plugin.strategy.condition.StrategyCondition;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
@@ -177,7 +177,7 @@ public StrategyTracerContextListener strategyTracerContextListener() {
     @Bean
     @ConditionalOnMissingBean
     public TypeComparator strategyTypeComparator() {
-        return new DefaultStrategyTypeComparor();
+        return new DefaultStrategyTypeComparator();
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/filter/StrategyZoneEnabledFilter.java
Patch:
@@ -50,10 +50,10 @@ public boolean apply(List<? extends Server> servers, Server server) {
                 } else {
                     return discoveryMatcher.match(zoneFailovers, serverZone, true);
                 }
-            } else {
-                return StringUtils.equals(serverZone, zone);
             }
         }
+
+        return StringUtils.equals(serverZone, zone);
     }
 
     @Override

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/FailoverResourceImpl.java
Patch:
@@ -38,7 +38,7 @@ public String createFailover(String group, String gatewayId, FailoverType failov
 
         updateRemoteRuleEntity(group, gatewayId, ruleEntity);
 
-        return configResource.deparse(ruleEntity);
+        return configResource.fromRuleEntity(ruleEntity);
     }
 
     @Override
@@ -49,7 +49,7 @@ public String clearFailover(String group, String gatewayId, FailoverType failove
 
         updateRemoteRuleEntity(group, gatewayId, ruleEntity);
 
-        return configResource.deparse(ruleEntity);
+        return configResource.fromRuleEntity(ruleEntity);
     }
 
     private void createFailover(RuleEntity ruleEntity, FailoverType failoverType, String failoverValue) {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/StrategyResourceImpl.java
Patch:
@@ -60,7 +60,7 @@ public String parseVersionRelease(ConditionStrategy conditionStrategy) {
 
         createVersionStrategyRelease(ruleEntity, conditionStrategy);
 
-        return configResource.deparse(ruleEntity);
+        return configResource.fromRuleEntity(ruleEntity);
     }
 
     @Override
@@ -81,7 +81,7 @@ public String createVersionRelease(String group, String gatewayId, ConditionStra
 
         updateRemoteRuleEntity(group, gatewayId, ruleEntity);
 
-        return configResource.deparse(ruleEntity);
+        return configResource.fromRuleEntity(ruleEntity);
     }
 
     @Override
@@ -92,7 +92,7 @@ public String clearRelease(String group, String gatewayId) {
 
         updateRemoteRuleEntity(group, gatewayId, ruleEntity);
 
-        return configResource.deparse(ruleEntity);
+        return configResource.fromRuleEntity(ruleEntity);
     }
 
     @Override

File: discovery-plugin-admin-center/discovery-plugin-admin-center-starter/src/main/java/com/nepxion/discovery/plugin/admincenter/resource/ServiceResourceImpl.java
Patch:
@@ -203,6 +203,7 @@ public List<InstanceEntity> getInstanceList(String service) {
             Map<String, String> metadata = instance.getMetadata();
             String serviceId = instance.getServiceId().toLowerCase();
             String serviceType = metadata.get(DiscoveryMetaDataConstant.SPRING_APPLICATION_TYPE);
+            String serviceUUId = metadata.get(DiscoveryMetaDataConstant.SPRING_APPLICATION_UUID);
             String version = metadata.get(DiscoveryConstant.VERSION);
             String region = metadata.get(DiscoveryConstant.REGION);
             String environment = metadata.get(DiscoveryConstant.ENVIRONMENT);
@@ -213,6 +214,7 @@ public List<InstanceEntity> getInstanceList(String service) {
             InstanceEntity instanceEntity = new InstanceEntity();
             instanceEntity.setServiceType(serviceType);
             instanceEntity.setServiceId(serviceId);
+            instanceEntity.setServiceUUId(serviceUUId);
             instanceEntity.setVersion(version);
             instanceEntity.setRegion(region);
             instanceEntity.setEnvironment(environment);

File: discovery-springcloud-examples/discovery-springcloud-example-gateway/src/main/java/com/nepxion/discovery/plugin/example/gateway/impl/MyDiscoveryEnabledStrategy.java
Patch:
@@ -50,7 +50,7 @@ private boolean applyFromHeader(Server server) {
             // 手机号以移动138开头，路由到1.0版本的服务上
             if (mobile.startsWith("138") && StringUtils.equals(version, "1.0")) {
                 return true;
-                // 手机号以联通133开头，路由到2.0版本的服务上
+                // 手机号以联通133开头，路由到1.1版本的服务上
             } else if (mobile.startsWith("133") && StringUtils.equals(version, "1.1")) {
                 return true;
             } else {

File: discovery-springcloud-examples/discovery-springcloud-example-zuul/src/main/java/com/nepxion/discovery/plugin/example/zuul/impl/MyDiscoveryEnabledStrategy.java
Patch:
@@ -50,7 +50,7 @@ private boolean applyFromHeader(Server server) {
             // 手机号以移动138开头，路由到1.0版本的服务上
             if (mobile.startsWith("138") && StringUtils.equals(version, "1.0")) {
                 return true;
-                // 手机号以联通133开头，路由到2.0版本的服务上
+                // 手机号以联通133开头，路由到1.1版本的服务上
             } else if (mobile.startsWith("133") && StringUtils.equals(version, "1.1")) {
                 return true;
             } else {

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/wrapper/DefaultServiceStrategyCallableWrapper.java
Patch:
@@ -31,7 +31,9 @@ public class DefaultServiceStrategyCallableWrapper implements ServiceStrategyCal
     public <T> Callable<T> wrapCallable(Callable<T> callable) {
         RequestAttributes originRequestAttributes = RequestContextHolder.getRequestAttributes();
         if (requestDecoratorEnabled) {
-            originRequestAttributes = ServiceStrategyRequestDecoratorFactory.decorateRequestAttributes(originRequestAttributes);
+            if (originRequestAttributes != null) {
+                originRequestAttributes = ServiceStrategyRequestDecoratorFactory.decorateRequestAttributes(originRequestAttributes);
+            }
         }
 
         RequestAttributes requestAttributes = originRequestAttributes;

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-sentinel-monitor/src/main/java/com/nepxion/discovery/plugin/strategy/sentinel/monitor/callback/SentinelTracerProcessorSlotEntryCallback.java
Patch:
@@ -63,7 +63,7 @@ public void onBlocked(BlockException e, Context context, ResourceWrapper resourc
         outputSpan(span, SentinelStrategyMonitorConstant.ENTRY_TYPE, resourceWrapper.getEntryType().toString());
         outputSpan(span, SentinelStrategyMonitorConstant.RULE_LIMIT_APP, e.getRuleLimitApp());
         if (tracerSentinelRuleOutputEnabled) {
-            outputSpan(span, SentinelStrategyMonitorConstant.RULE, e.getRule().toString());
+            outputSpan(span, SentinelStrategyMonitorConstant.RULE, e.getRule() != null ? e.getRule().toString() : StringUtils.EMPTY);
         }
         outputSpan(span, SentinelStrategyMonitorConstant.CAUSE, e.getClass().getName());
         outputSpan(span, SentinelStrategyMonitorConstant.BLOCK_EXCEPTION, e.getMessage());

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/entity/RelationalType.java
Patch:
@@ -10,8 +10,8 @@
  */
 
 public enum RelationalType {
-    AND("&&"),
-    OR("||");
+    AND("and"),
+    OR("or");
 
     private String value;
 

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/filter/AbstractGatewayStrategyRouteFilter.java
Patch:
@@ -246,7 +246,7 @@ private void applyOuterHeader(ServerHttpRequest request, ServerHttpRequest.Build
             // 忽略区域匹配路由Header
             GatewayStrategyFilterResolver.ignoreHeader(requestBuilder, DiscoveryConstant.N_D_REGION);
 
-            // 忽略IP地址和端口匹配匹配路由Header
+            // 忽略IP地址和端口匹配路由Header
             GatewayStrategyFilterResolver.ignoreHeader(requestBuilder, DiscoveryConstant.N_D_ADDRESS);
 
             // 忽略版本权重路由Header

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/filter/AbstractZuulStrategyRouteFilter.java
Patch:
@@ -242,7 +242,7 @@ private void applyOuterHeader(RequestContext context) {
             // 忽略区域匹配路由Header
             ZuulStrategyFilterResolver.ignoreHeader(context, DiscoveryConstant.N_D_REGION);
 
-            // 忽略IP地址和端口匹配匹配路由Header
+            // 忽略IP地址和端口匹配路由Header
             ZuulStrategyFilterResolver.ignoreHeader(context, DiscoveryConstant.N_D_ADDRESS);
 
             // 忽略版本权重路由Header

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/wrapper/StrategyWrapper.java
Patch:
@@ -27,9 +27,9 @@
 import com.nepxion.discovery.common.entity.StrategyBlacklistEntity;
 import com.nepxion.discovery.common.entity.StrategyConditionBlueGreenEntity;
 import com.nepxion.discovery.common.entity.StrategyConditionGrayEntity;
-import com.nepxion.discovery.common.entity.StrategyReleaseEntity;
 import com.nepxion.discovery.common.entity.StrategyEntity;
 import com.nepxion.discovery.common.entity.StrategyHeaderEntity;
+import com.nepxion.discovery.common.entity.StrategyReleaseEntity;
 import com.nepxion.discovery.common.entity.StrategyRouteEntity;
 import com.nepxion.discovery.common.entity.StrategyRouteType;
 import com.nepxion.discovery.common.entity.VersionWeightEntity;

File: discovery-commons/discovery-common-nacos/src/main/java/com/nepxion/discovery/common/nacos/operation/NacosOperation.java
Patch:
@@ -23,7 +23,6 @@
 import com.alibaba.nacos.api.exception.NacosException;
 import com.nepxion.discovery.common.entity.FormatType;
 import com.nepxion.discovery.common.nacos.constant.NacosConstant;
-import com.nepxion.discovery.common.util.FormatUtil;
 
 public class NacosOperation implements DisposableBean {
     private static final Logger LOG = LoggerFactory.getLogger(NacosOperation.class);
@@ -48,8 +47,10 @@ public boolean removeConfig(String group, String serviceId) throws NacosExceptio
     }
 
     public boolean publishConfig(String group, String serviceId, String config) throws NacosException {
-        FormatType formatType = FormatUtil.getFormatType(config);
+        return nacosConfigService.publishConfig(serviceId, group, config);
+    }
 
+    public boolean publishConfig(String group, String serviceId, String config, FormatType formatType) throws NacosException {
         return nacosConfigService.publishConfig(serviceId, group, config, formatType.toString());
     }
 

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -151,6 +151,7 @@ public class DiscoveryConstant {
     public static final String JSON_FORMAT = "json";
     public static final String YAML_FORMAT = "yaml";
     public static final String PROPERTIES_FORMAT = "properties";
+    public static final String HTML_FORMAT = "html";
     public static final String TEXT_FORMAT = "text";
     public static final String PREFIX_CLASSPATH = "classpath:";
     public static final String PREFIX_FILE = "file:";

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/entity/FormatType.java
Patch:
@@ -16,6 +16,7 @@ public enum FormatType {
     JSON_FORMAT(DiscoveryConstant.JSON_FORMAT),
     YAML_FORMAT(DiscoveryConstant.YAML_FORMAT),
     PROPERTIES_FORMAT(DiscoveryConstant.PROPERTIES_FORMAT),
+    HTML_FORMAT(DiscoveryConstant.HTML_FORMAT),
     TEXT_FORMAT(DiscoveryConstant.TEXT_FORMAT);
 
     private String value;

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ConfigResource.java
Patch:
@@ -12,6 +12,7 @@
 import java.util.List;
 
 import com.nepxion.discovery.common.entity.ConfigType;
+import com.nepxion.discovery.common.entity.FormatType;
 import com.nepxion.discovery.common.entity.ResultEntity;
 import com.nepxion.discovery.common.entity.RuleEntity;
 
@@ -20,6 +21,8 @@ public interface ConfigResource {
 
     boolean updateRemoteConfig(String group, String serviceId, String config) throws Exception;
 
+    boolean updateRemoteConfig(String group, String serviceId, String config, FormatType formatType) throws Exception;
+
     boolean updateRemoteRuleEntity(String group, String serviceId, RuleEntity ruleEntity) throws Exception;
 
     boolean clearRemoteConfig(String group, String serviceId) throws Exception;

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -149,7 +149,9 @@ public class DiscoveryConstant {
 
     public static final String XML_FORMAT = "xml";
     public static final String JSON_FORMAT = "json";
+    public static final String YAML_FORMAT = "yaml";
     public static final String PROPERTIES_FORMAT = "properties";
+    public static final String TEXT_FORMAT = "text";
     public static final String PREFIX_CLASSPATH = "classpath:";
     public static final String PREFIX_FILE = "file:";
 

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/aop/WebClientStrategyInterceptor.java
Patch:
@@ -64,7 +64,7 @@ public Mono<ClientResponse> filter(ClientRequest request, ExchangeFunction next)
         applyInnerHeader(requestBuilder);
 
         // 处理外部Header的转发
-        applyOuterHeader(request, requestBuilder);
+        applyOuterHeader(requestBuilder);
 
         ClientRequest newRequest = requestBuilder.build();
 
@@ -108,7 +108,7 @@ private void applyInnerHeader(ClientRequest.Builder requestBuilder) {
     }
 
     // 处理外部Header的转发，即外部服务传递过来的Header，中继转发到下游服务去
-    private void applyOuterHeader(ClientRequest request, ClientRequest.Builder requestBuilder) {
+    private void applyOuterHeader(ClientRequest.Builder requestBuilder) {
         Enumeration<String> headerNames = strategyContextHolder.getHeaderNames();
         if (headerNames != null) {
             while (headerNames.hasMoreElements()) {
@@ -129,6 +129,7 @@ private void applyOuterHeader(ClientRequest request, ClientRequest.Builder reque
         }
 
         if (webClientCoreHeaderTransmissionEnabled) {
+            ClientRequest request = requestBuilder.build();
             HttpHeaders headers = request.headers();
 
             // 设置版本匹配路由的配置到Header中

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/aop/FeignStrategyInterceptor.java
Patch:
@@ -23,6 +23,7 @@
 import org.springframework.beans.factory.annotation.Value;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.InterceptorType;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
 import com.nepxion.discovery.plugin.strategy.context.StrategyContextHolder;
 import com.nepxion.discovery.plugin.strategy.util.StrategyUtil;
@@ -205,7 +206,7 @@ private void interceptOutputHeader(RequestTemplate requestTemplate) {
     }
 
     @Override
-    protected String getInterceptorName() {
-        return "Feign";
+    protected InterceptorType getInterceptorType() {
+        return InterceptorType.FEIGN;
     }
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter/src/main/java/com/nepxion/discovery/plugin/strategy/aop/RestTemplateStrategyInterceptor.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.http.client.ClientHttpResponse;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.InterceptorType;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
 import com.nepxion.discovery.plugin.strategy.context.StrategyContextHolder;
 import com.nepxion.discovery.plugin.strategy.util.StrategyUtil;
@@ -215,7 +216,7 @@ private void interceptOutputHeader(HttpRequest request) {
     }
 
     @Override
-    protected String getInterceptorName() {
-        return "RestTemplate";
+    protected InterceptorType getInterceptorType() {
+        return InterceptorType.REST_TEMPLATE;
     }
 }
\ No newline at end of file

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -194,6 +194,9 @@ public class DiscoveryConstant {
     public static final String EUREKA = "Eureka";
     public static final String RIBBON = "Ribbon";
     public static final String SPRING_CLOUD_LOADBALANCER = "Spring Cloud LoadBalancer";
+    public static final String FEIGN = "Feign";
+    public static final String REST_TEMPLATE = "RestTemplate";
+    public static final String WEB_CLIENT = "WebClient";
     public static final String HYSTRIX = "Hystrix";
     public static final String SENTINEL = "Sentinel";
     public static final String OPENTELEMETRY = "OpenTelemetry";

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -143,7 +143,9 @@ public class DiscoveryConstant {
     public static final String ERROR = "error";
     public static final String ERROR_OBJECT = "error.object";
 
-    public static final String COOKIE = "Cookie";
+    public static final String HEADER_TYPE = "Header";
+    public static final String PARAMETER_TYPE = "Parameter";
+    public static final String COOKIE_TYPE = "Cookie";
 
     public static final String XML_FORMAT = "xml";
     public static final String JSON_FORMAT = "json";

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/util/RestUtil.java
Patch:
@@ -72,7 +72,7 @@ public static HttpHeaders processCookie(HttpHeaders httpHeaders, Map<String, Str
                 cookieList.add(key + DiscoveryConstant.EQUALS + value);
             }
 
-            httpHeaders.put(DiscoveryConstant.COOKIE, cookieList);
+            httpHeaders.put(DiscoveryConstant.COOKIE_TYPE, cookieList);
         }
 
         return httpHeaders;

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/endpoint/ConsoleEndpoint.java
Patch:
@@ -31,9 +31,9 @@
 import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 import com.nepxion.discovery.common.entity.ResultEntity;
+import com.nepxion.discovery.common.entity.SentinelRuleType;
 import com.nepxion.discovery.common.entity.UserEntity;
 import com.nepxion.discovery.common.util.ResponseUtil;
-import com.nepxion.discovery.console.entity.SentinelRuleType;
 import com.nepxion.discovery.console.resource.AuthenticationResource;
 import com.nepxion.discovery.console.resource.ConfigResource;
 import com.nepxion.discovery.console.resource.RouteResource;

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/SentinelResource.java
Patch:
@@ -12,7 +12,7 @@
 import java.util.List;
 
 import com.nepxion.discovery.common.entity.ResultEntity;
-import com.nepxion.discovery.console.entity.SentinelRuleType;
+import com.nepxion.discovery.common.entity.SentinelRuleType;
 
 public interface SentinelResource {
     List<ResultEntity> updateSentinel(SentinelRuleType ruleType, String serviceId, String rule);

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/SentinelResourceImpl.java
Patch:
@@ -15,7 +15,7 @@
 import org.springframework.web.client.RestTemplate;
 
 import com.nepxion.discovery.common.entity.ResultEntity;
-import com.nepxion.discovery.console.entity.SentinelRuleType;
+import com.nepxion.discovery.common.entity.SentinelRuleType;
 import com.nepxion.discovery.console.rest.SentinelClearRestInvoker;
 import com.nepxion.discovery.console.rest.SentinelUpdateRestInvoker;
 import com.nepxion.discovery.console.rest.SentinelViewRestInvoker;

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/SentinelClearRestInvoker.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.SentinelRuleType;
+import com.nepxion.discovery.common.entity.SentinelRuleType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class SentinelClearRestInvoker extends AbstractRestInvoker {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/SentinelUpdateRestInvoker.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.SentinelRuleType;
+import com.nepxion.discovery.common.entity.SentinelRuleType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class SentinelUpdateRestInvoker extends AbstractRestInvoker {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/SentinelViewRestInvoker.java
Patch:
@@ -12,7 +12,7 @@
 import org.apache.commons.lang3.StringUtils;
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.SentinelRuleType;
+import com.nepxion.discovery.common.entity.SentinelRuleType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class SentinelViewRestInvoker extends AbstractRestInvoker {

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/constant/GatewayStrategyConstant.java
Patch:
@@ -19,6 +19,4 @@ public class GatewayStrategyConstant {
 
     public static final String GATEWAY_DYNAMIC_ROUTE = "dynamic-route";
     public static final String GATEWAY_DYNAMIC_ROUTE_DESCRIPTION = "Gateway dynamic route";
-
-    public static final String SPRING_CLOUD_GATEWAY = "spring-cloud-gateway";
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/context/GatewayStrategyEnvironmentPostProcessor.java
Patch:
@@ -17,15 +17,15 @@
 import org.springframework.core.env.StandardEnvironment;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ServiceType;
-import com.nepxion.discovery.plugin.strategy.gateway.constant.GatewayStrategyConstant;
 
 public class GatewayStrategyEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
         if (StringUtils.equals(environment.getClass().getName(), StandardEnvironment.class.getName())) {
             System.setProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, ServiceType.GATEWAY.toString());
-            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayStrategyConstant.SPRING_CLOUD_GATEWAY);
+            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayType.SPRING_CLOUD_GATEWAY.toString());
         }
     }
 

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/constant/ZuulStrategyConstant.java
Patch:
@@ -19,6 +19,4 @@ public class ZuulStrategyConstant {
 
     public static final String ZUUL_DYNAMIC_ROUTE = "dynamic-route";
     public static final String ZUUL_DYNAMIC_ROUTE_DESCRIPTION = "Zuul dynamic route";
-
-    public static final String ZUUL = "zuul";
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/context/ZuulStrategyEnvironmentPostProcessor.java
Patch:
@@ -17,15 +17,15 @@
 import org.springframework.core.env.StandardEnvironment;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ServiceType;
-import com.nepxion.discovery.plugin.strategy.zuul.constant.ZuulStrategyConstant;
 
 public class ZuulStrategyEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
         if (StringUtils.equals(environment.getClass().getName(), StandardEnvironment.class.getName())) {
             System.setProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, ServiceType.GATEWAY.toString());
-            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, ZuulStrategyConstant.ZUUL);
+            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayType.ZUUL.toString());
         }
     }
 

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/constant/ConsoleConstant.java
Patch:
@@ -10,9 +10,6 @@
  */
 
 public class ConsoleConstant {
-    public static final String SPRING_CLOUD_GATEWAY = "spring-cloud-gateway";
-    public static final String ZUUL = "zuul";
-
     public static final String SENTINEL_FLOW = "flow";
     public static final String SENTINEL_DEGRADE = "degrade";
     public static final String SENTINEL_RULE_AUTHORITY = "authority";

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/endpoint/ConsoleEndpoint.java
Patch:
@@ -28,11 +28,11 @@
 import org.springframework.web.bind.annotation.RestController;
 
 import com.nepxion.discovery.common.entity.AuthenticationEntity;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 import com.nepxion.discovery.common.entity.ResultEntity;
 import com.nepxion.discovery.common.entity.UserEntity;
 import com.nepxion.discovery.common.util.ResponseUtil;
-import com.nepxion.discovery.console.entity.GatewayType;
 import com.nepxion.discovery.console.entity.SentinelRuleType;
 import com.nepxion.discovery.console.resource.AuthenticationResource;
 import com.nepxion.discovery.console.resource.ConfigResource;

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/RouteResource.java
Patch:
@@ -11,8 +11,8 @@
 
 import java.util.List;
 
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ResultEntity;
-import com.nepxion.discovery.console.entity.GatewayType;
 
 public interface RouteResource {
     List<ResultEntity> addRoute(GatewayType gatewayType, String serviceId, String route);

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/RouteResourceImpl.java
Patch:
@@ -14,8 +14,8 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.client.RestTemplate;
 
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ResultEntity;
-import com.nepxion.discovery.console.entity.GatewayType;
 import com.nepxion.discovery.console.rest.RouteAddRestInvoker;
 import com.nepxion.discovery.console.rest.RouteDeleteRestInvoker;
 import com.nepxion.discovery.console.rest.RouteModifyRestInvoker;

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ServiceResource.java
Patch:
@@ -15,8 +15,8 @@
 import org.springframework.cloud.client.ServiceInstance;
 
 import com.nepxion.discovery.common.entity.DiscoveryType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
-import com.nepxion.discovery.console.entity.GatewayType;
 
 public interface ServiceResource {
     DiscoveryType getDiscoveryType();

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ServiceResourceImpl.java
Patch:
@@ -24,10 +24,10 @@
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.constant.DiscoveryMetaDataConstant;
 import com.nepxion.discovery.common.entity.DiscoveryType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 import com.nepxion.discovery.common.entity.InstanceEntityWrapper;
 import com.nepxion.discovery.common.entity.ServiceType;
-import com.nepxion.discovery.console.entity.GatewayType;
 
 public class ServiceResourceImpl implements ServiceResource {
     @Autowired

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/RouteAddRestInvoker.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.GatewayType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class RouteAddRestInvoker extends AbstractRestInvoker {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/RouteDeleteRestInvoker.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.GatewayType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class RouteDeleteRestInvoker extends AbstractRestInvoker {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/RouteModifyRestInvoker.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.GatewayType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class RouteModifyRestInvoker extends AbstractRestInvoker {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/RouteUpdateAllRestInvoker.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.GatewayType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class RouteUpdateAllRestInvoker extends AbstractRestInvoker {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/RouteViewAllRestInvoker.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.web.client.RestTemplate;
 
-import com.nepxion.discovery.console.entity.GatewayType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.console.resource.ServiceResource;
 
 public class RouteViewAllRestInvoker extends AbstractRestInvoker {

File: discovery-plugin-admin-center/discovery-plugin-admin-center-starter/src/main/java/com/nepxion/discovery/plugin/admincenter/resource/ServiceResource.java
Patch:
@@ -15,6 +15,7 @@
 import org.springframework.cloud.client.ServiceInstance;
 
 import com.nepxion.discovery.common.entity.DiscoveryType;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 
 public interface ServiceResource {
@@ -28,6 +29,8 @@ public interface ServiceResource {
 
     List<String> getGateways();
 
+    List<String> getGatewayList(GatewayType gatewayType);
+
     List<ServiceInstance> getInstances(String serviceId);
 
     List<InstanceEntity> getInstanceList(String serviceId);

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -190,6 +190,8 @@ public class DiscoveryConstant {
     public static final String CONSUL = "Consul";
     public static final String ETCD = "Etcd";
     public static final String EUREKA = "Eureka";
+    public static final String RIBBON = "Ribbon";
+    public static final String SPRING_CLOUD_LOADBALANCER = "Spring Cloud LoadBalancer";
     public static final String HYSTRIX = "Hystrix";
     public static final String SENTINEL = "Sentinel";
     public static final String OPENTELEMETRY = "OpenTelemetry";

File: discovery-plugin-framework/discovery-plugin-framework-starter/src/main/java/com/nepxion/discovery/plugin/framework/configuration/PluginAutoConfiguration.java
Patch:
@@ -22,6 +22,7 @@
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.LoadBalancerType;
 import com.nepxion.discovery.plugin.framework.adapter.PluginAdapter;
 import com.nepxion.discovery.plugin.framework.cache.PluginCache;
 import com.nepxion.discovery.plugin.framework.cache.RuleCache;
@@ -55,7 +56,7 @@ public class PluginAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(PluginAutoConfiguration.class, "/com/nepxion/ribbon/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
 
-        NepxionBanner.show(logoBanner, new Description("LoadBalancer:", "Ribbon", 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("LoadBalancer:", LoadBalancerType.RIBBON.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-opentelemetry/src/main/java/com/nepxion/discovery/plugin/strategy/opentelemetry/configuration/OpenTelemetryStrategyAutoConfiguration.java
Patch:
@@ -18,9 +18,9 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.TracingType;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
 import com.nepxion.discovery.plugin.strategy.monitor.StrategyTracer;
-import com.nepxion.discovery.plugin.strategy.opentelemetry.constant.OpenTelemetryStrategyConstant;
 import com.nepxion.discovery.plugin.strategy.opentelemetry.monitor.OpenTelemetryStrategyTracer;
 import com.taobao.text.Color;
 
@@ -29,7 +29,7 @@ public class OpenTelemetryStrategyAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(OpenTelemetryStrategyAutoConfiguration.class, "/com/nepxion/opentelemetry/resource/logo.txt", "Welcome to Nepxion", 8, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red, Color.green }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Tracing:", OpenTelemetryStrategyConstant.OPENTELEMETRY_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Tracing:", TracingType.OPENTELEMETRY.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-opentelemetry/src/main/java/com/nepxion/discovery/plugin/strategy/opentelemetry/constant/OpenTelemetryStrategyConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class OpenTelemetryStrategyConstant {
-    public static final String OPENTELEMETRY_TYPE = "OpenTelemetry";
+
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-opentracing/src/main/java/com/nepxion/discovery/plugin/strategy/opentracing/configuration/OpenTracingStrategyAutoConfiguration.java
Patch:
@@ -18,9 +18,9 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.TracingType;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
 import com.nepxion.discovery.plugin.strategy.monitor.StrategyTracer;
-import com.nepxion.discovery.plugin.strategy.opentracing.constant.OpenTracingStrategyConstant;
 import com.nepxion.discovery.plugin.strategy.opentracing.monitor.OpenTracingStrategyTracer;
 import com.taobao.text.Color;
 
@@ -29,7 +29,7 @@ public class OpenTracingStrategyAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(OpenTracingStrategyAutoConfiguration.class, "/com/nepxion/opentracing/resource/logo.txt", "Welcome to Nepxion", 8, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red, Color.green }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Tracing:", OpenTracingStrategyConstant.OPENTRACING_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Tracing:", TracingType.OPENTRACING.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-opentracing/src/main/java/com/nepxion/discovery/plugin/strategy/opentracing/constant/OpenTracingStrategyConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class OpenTracingStrategyConstant {
-    public static final String OPENTRACING_TYPE = "OpenTracing";
+
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-skywalking/src/main/java/com/nepxion/discovery/plugin/strategy/skywalking/configuration/SkyWalkingStrategyAutoConfiguration.java
Patch:
@@ -18,9 +18,9 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.TracingType;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
 import com.nepxion.discovery.plugin.strategy.monitor.StrategyTracer;
-import com.nepxion.discovery.plugin.strategy.skywalking.constant.SkyWalkingStrategyConstant;
 import com.nepxion.discovery.plugin.strategy.skywalking.monitor.SkyWalkingStrategyTracer;
 import com.taobao.text.Color;
 
@@ -29,7 +29,7 @@ public class SkyWalkingStrategyAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(SkyWalkingStrategyAutoConfiguration.class, "/com/nepxion/skywalking/resource/logo.txt", "Welcome to Nepxion", 7, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Tracing:", SkyWalkingStrategyConstant.SKYWALKING_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Tracing:", TracingType.SKYWALKING.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-skywalking/src/main/java/com/nepxion/discovery/plugin/strategy/skywalking/constant/SkyWalkingStrategyConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class SkyWalkingStrategyConstant {
-    public static final String SKYWALKING_TYPE = "SkyWalking";
+
 }
\ No newline at end of file

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-consul/src/main/java/com/nepxion/discovery/plugin/registercenter/consul/configuration/ConsulAutoConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.PluginAdapter;
 import com.nepxion.discovery.plugin.framework.configuration.PluginLoadBalanceConfiguration;
 import com.nepxion.discovery.plugin.registercenter.consul.adapter.ConsulAdapter;
-import com.nepxion.discovery.plugin.registercenter.consul.constant.ConsulConstant;
 import com.taobao.text.Color;
 
 @Configuration
@@ -42,7 +42,7 @@ public class ConsulAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(ConsulAutoConfiguration.class, "/com/nepxion/consul/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Discovery:", ConsulConstant.CONSUL_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Discovery:", DiscoveryType.CONSUL.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-consul/src/main/java/com/nepxion/discovery/plugin/registercenter/consul/constant/ConsulConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class ConsulConstant {
-    public static final String CONSUL_TYPE = "Consul";
+
 }
\ No newline at end of file

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-consul/src/main/java/com/nepxion/discovery/plugin/registercenter/consul/context/ConsulApplicationContextInitializer.java
Patch:
@@ -21,11 +21,11 @@
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.constant.DiscoveryMetaDataConstant;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.ApplicationInfoAdapter;
 import com.nepxion.discovery.plugin.framework.context.PluginApplicationContextInitializer;
 import com.nepxion.discovery.plugin.framework.context.PluginContextAware;
 import com.nepxion.discovery.plugin.framework.util.MetadataUtil;
-import com.nepxion.discovery.plugin.registercenter.consul.constant.ConsulConstant;
 import com.nepxion.discovery.plugin.registercenter.consul.decorator.ConsulServiceRegistryDecorator;
 
 public class ConsulApplicationContextInitializer extends PluginApplicationContextInitializer {
@@ -71,7 +71,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             }
             metadata.add(DiscoveryMetaDataConstant.SPRING_APPLICATION_PROTOCOL + "=" + PluginContextAware.getApplicationProtocol(environment));
             metadata.add(DiscoveryMetaDataConstant.SPRING_APPLICATION_UUID + "=" + PluginContextAware.getApplicationUUId(environment));
-            metadata.add(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN + "=" + ConsulConstant.CONSUL_TYPE);
+            metadata.add(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN + "=" + DiscoveryType.CONSUL);
             metadata.add(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_VERSION + "=" + DiscoveryConstant.DISCOVERY_VERSION);
             String agentVersion = System.getProperty(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION);
             metadata.add(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION + "=" + (StringUtils.isEmpty(agentVersion) ? DiscoveryConstant.UNKNOWN : agentVersion));

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-eureka/src/main/java/com/nepxion/discovery/plugin/registercenter/eureka/configuration/EurekaAutoConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.PluginAdapter;
 import com.nepxion.discovery.plugin.framework.configuration.PluginLoadBalanceConfiguration;
 import com.nepxion.discovery.plugin.registercenter.eureka.adapter.EurekaAdapter;
-import com.nepxion.discovery.plugin.registercenter.eureka.constant.EurekaConstant;
 import com.taobao.text.Color;
 
 @Configuration
@@ -42,7 +42,7 @@ public class EurekaAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(EurekaAutoConfiguration.class, "/com/nepxion/eureka/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Discovery:", EurekaConstant.EUREKA_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Discovery:", DiscoveryType.EUREKA.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-eureka/src/main/java/com/nepxion/discovery/plugin/registercenter/eureka/constant/EurekaConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class EurekaConstant {
-    public static final String EUREKA_TYPE = "Eureka";
+
 }
\ No newline at end of file

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-eureka/src/main/java/com/nepxion/discovery/plugin/registercenter/eureka/context/EurekaApplicationContextInitializer.java
Patch:
@@ -21,11 +21,11 @@
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.constant.DiscoveryMetaDataConstant;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.ApplicationInfoAdapter;
 import com.nepxion.discovery.plugin.framework.context.PluginApplicationContextInitializer;
 import com.nepxion.discovery.plugin.framework.context.PluginContextAware;
 import com.nepxion.discovery.plugin.framework.util.MetadataUtil;
-import com.nepxion.discovery.plugin.registercenter.eureka.constant.EurekaConstant;
 import com.nepxion.discovery.plugin.registercenter.eureka.decorator.EurekaServiceRegistryDecorator;
 
 public class EurekaApplicationContextInitializer extends PluginApplicationContextInitializer {
@@ -71,7 +71,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             }
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_PROTOCOL, PluginContextAware.getApplicationProtocol(environment));
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_UUID, PluginContextAware.getApplicationUUId(environment));
-            metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, EurekaConstant.EUREKA_TYPE);
+            metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, DiscoveryType.EUREKA.toString());
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_VERSION, DiscoveryConstant.DISCOVERY_VERSION);
             String agentVersion = System.getProperty(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION);
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION, StringUtils.isEmpty(agentVersion) ? DiscoveryConstant.UNKNOWN : agentVersion);

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-nacos/src/main/java/com/nepxion/discovery/plugin/registercenter/nacos/configuration/NacosAutoConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.PluginAdapter;
 import com.nepxion.discovery.plugin.framework.configuration.PluginLoadBalanceConfiguration;
 import com.nepxion.discovery.plugin.registercenter.nacos.adapter.NacosAdapter;
-import com.nepxion.discovery.plugin.registercenter.nacos.constant.NacosConstant;
 import com.taobao.text.Color;
 
 @Configuration
@@ -42,7 +42,7 @@ public class NacosAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(NacosAutoConfiguration.class, "/com/nepxion/nacos/resource/logo.txt", "Welcome to Nepxion", 5, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Discovery:", NacosConstant.NACOS_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Discovery:", DiscoveryType.NACOS.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-nacos/src/main/java/com/nepxion/discovery/plugin/registercenter/nacos/constant/NacosConstant.java
Patch:
@@ -10,6 +10,5 @@
  */
 
 public class NacosConstant {
-    public static final String NACOS_TYPE = "Nacos";
     public static final String SPRING_APPLICATION_NACOS_SERVICE_ID_FILTER_ENABLED = "spring.application.nacos.service.id.filter.enabled";
 }
\ No newline at end of file

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-nacos/src/main/java/com/nepxion/discovery/plugin/registercenter/nacos/context/NacosApplicationContextInitializer.java
Patch:
@@ -21,11 +21,11 @@
 import com.alibaba.cloud.nacos.registry.NacosServiceRegistry;
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.constant.DiscoveryMetaDataConstant;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.ApplicationInfoAdapter;
 import com.nepxion.discovery.plugin.framework.context.PluginApplicationContextInitializer;
 import com.nepxion.discovery.plugin.framework.context.PluginContextAware;
 import com.nepxion.discovery.plugin.framework.util.MetadataUtil;
-import com.nepxion.discovery.plugin.registercenter.nacos.constant.NacosConstant;
 import com.nepxion.discovery.plugin.registercenter.nacos.decorator.NacosServiceRegistryDecorator;
 
 public class NacosApplicationContextInitializer extends PluginApplicationContextInitializer {
@@ -72,7 +72,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             }
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_PROTOCOL, PluginContextAware.getApplicationProtocol(environment));
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_UUID, PluginContextAware.getApplicationUUId(environment));
-            metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, NacosConstant.NACOS_TYPE);
+            metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, DiscoveryType.NACOS.toString());
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_VERSION, DiscoveryConstant.DISCOVERY_VERSION);
             String agentVersion = System.getProperty(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION);
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION, StringUtils.isEmpty(agentVersion) ? DiscoveryConstant.UNKNOWN : agentVersion);

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-zookeeper/src/main/java/com/nepxion/discovery/plugin/registercenter/zookeeper/configuration/ZookeeperAutoConfiguration.java
Patch:
@@ -17,10 +17,10 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.PluginAdapter;
 import com.nepxion.discovery.plugin.framework.configuration.PluginLoadBalanceConfiguration;
 import com.nepxion.discovery.plugin.registercenter.zookeeper.adapter.ZookeeperAdapter;
-import com.nepxion.discovery.plugin.registercenter.zookeeper.constant.ZookeeperConstant;
 import com.taobao.text.Color;
 
 @Configuration
@@ -44,7 +44,7 @@ public class ZookeeperAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(ZookeeperAutoConfiguration.class, "/com/nepxion/zookeeper/resource/logo.txt", "Welcome to Nepxion", 9, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red, Color.green, Color.cyan }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Discovery:", ZookeeperConstant.ZOOKEEPER_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Discovery:", DiscoveryType.ZOOKEEPER.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-zookeeper/src/main/java/com/nepxion/discovery/plugin/registercenter/zookeeper/constant/ZookeeperConstant.java
Patch:
@@ -10,6 +10,5 @@
  */
 
 public class ZookeeperConstant {
-    public static final String ZOOKEEPER_TYPE = "Zookeeper";
     public static final String ZOOKEEPER_METADATA = "spring.cloud.zookeeper.discovery.metadata";
 }
\ No newline at end of file

File: discovery-plugin-register-center/discovery-plugin-register-center-starter-zookeeper/src/main/java/com/nepxion/discovery/plugin/registercenter/zookeeper/context/ZookeeperApplicationContextInitializer.java
Patch:
@@ -21,11 +21,11 @@
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.constant.DiscoveryMetaDataConstant;
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.plugin.framework.adapter.ApplicationInfoAdapter;
 import com.nepxion.discovery.plugin.framework.context.PluginApplicationContextInitializer;
 import com.nepxion.discovery.plugin.framework.context.PluginContextAware;
 import com.nepxion.discovery.plugin.framework.util.MetadataUtil;
-import com.nepxion.discovery.plugin.registercenter.zookeeper.constant.ZookeeperConstant;
 import com.nepxion.discovery.plugin.registercenter.zookeeper.decorator.ZookeeperServiceRegistryDecorator;
 
 public class ZookeeperApplicationContextInitializer extends PluginApplicationContextInitializer {
@@ -71,7 +71,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             }
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_PROTOCOL, PluginContextAware.getApplicationProtocol(environment));
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_UUID, PluginContextAware.getApplicationUUId(environment));
-            metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, ZookeeperConstant.ZOOKEEPER_TYPE);
+            metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, DiscoveryType.ZOOKEEPER.toString());
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_VERSION, DiscoveryConstant.DISCOVERY_VERSION);
             String agentVersion = System.getProperty(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION);
             metadata.put(DiscoveryMetaDataConstant.SPRING_APPLICATION_DISCOVERY_AGENT_VERSION, StringUtils.isEmpty(agentVersion) ? DiscoveryConstant.UNKNOWN : agentVersion);

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-sentinel-datasource/src/main/java/com/nepxion/discovery/plugin/strategy/sentinel/datasource/configuration/SentinelStrategyDatasourceAutoConfiguration.java
Patch:
@@ -21,6 +21,7 @@
 import com.nepxion.banner.NepxionBanner;
 import com.nepxion.discovery.common.apollo.proccessor.ApolloProcessor;
 import com.nepxion.discovery.common.consul.proccessor.ConsulProcessor;
+import com.nepxion.discovery.common.entity.ProtectorType;
 import com.nepxion.discovery.common.etcd.proccessor.EtcdProcessor;
 import com.nepxion.discovery.common.nacos.proccessor.NacosProcessor;
 import com.nepxion.discovery.common.redis.proccessor.RedisProcessor;
@@ -47,7 +48,7 @@ public class SentinelStrategyDatasourceAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(SentinelStrategyDatasourceAutoConfiguration.class, "/com/nepxion/sentinel/resource/logo.txt", "Welcome to Nepxion", 8, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red, Color.green }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Protect:", SentinelStrategyDatasourceConstant.SENTINEL_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Protector:", ProtectorType.SENTINEL.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-sentinel-datasource/src/main/java/com/nepxion/discovery/plugin/strategy/sentinel/datasource/constant/SentinelStrategyDatasourceConstant.java
Patch:
@@ -11,8 +11,6 @@
  */
 
 public class SentinelStrategyDatasourceConstant {
-    public static final String SENTINEL_TYPE = "Sentinel";
-
     public static final String SPRING_APPLICATION_STRATEGY_SENTINEL_DATASOURCE_ENABLED = "spring.application.strategy.sentinel.datasource.enabled";
     public static final String SPRING_APPLICATION_STRATEGY_SENTINEL_FLOW_PATH = "spring.application.strategy.sentinel.flow.path";
     public static final String SPRING_APPLICATION_STRATEGY_SENTINEL_DEGRADE_PATH = "spring.application.strategy.sentinel.degrade.path";

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-hystrix/src/main/java/com/nepxion/discovery/plugin/strategy/hystrix/configuration/HystrixStrategyAutoConfiguration.java
Patch:
@@ -19,8 +19,8 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.ProtectorType;
 import com.nepxion.discovery.plugin.strategy.constant.StrategyConstant;
-import com.nepxion.discovery.plugin.strategy.hystrix.constant.HystrixStrategyConstant;
 import com.nepxion.discovery.plugin.strategy.hystrix.context.HystrixContextConcurrencyStrategy;
 import com.netflix.hystrix.Hystrix;
 import com.taobao.text.Color;
@@ -32,7 +32,7 @@ public class HystrixStrategyAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(HystrixStrategyAutoConfiguration.class, "/com/nepxion/hystrix/resource/logo.txt", "Welcome to Nepxion", 7, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Protect:", HystrixStrategyConstant.HYSTRIX_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Protector:", ProtectorType.HYSTRIX.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-hystrix/src/main/java/com/nepxion/discovery/plugin/strategy/hystrix/constant/HystrixStrategyConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class HystrixStrategyConstant {
-    public static final String HYSTRIX_TYPE = "Hystrix";
+
 }
\ No newline at end of file

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-apollo/src/main/java/com/nepxion/discovery/plugin/configcenter/apollo/configuration/ApolloConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.apollo.constant.ApolloConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.plugin.configcenter.adapter.ConfigAdapter;
 import com.nepxion.discovery.plugin.configcenter.apollo.adapter.ApolloApplicationInfoAdapter;
 import com.nepxion.discovery.plugin.configcenter.apollo.adapter.ApolloConfigAdapter;
@@ -43,7 +43,7 @@ public class ApolloConfigAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(ApolloConfigAutoConfiguration.class, "/com/nepxion/apollo/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Config:", ApolloConstant.APOLLO_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.APOLLO.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-consul/src/main/java/com/nepxion/discovery/plugin/configcenter/consul/configuration/ConsulConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.consul.constant.ConsulConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.plugin.configcenter.adapter.ConfigAdapter;
 import com.nepxion.discovery.plugin.configcenter.consul.adapter.ConsulConfigAdapter;
 import com.taobao.text.Color;
@@ -25,7 +25,7 @@
 public class ConsulConfigAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(ConsulConfigAutoConfiguration.class, "/com/nepxion/consul/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
-        NepxionBanner.show(logoBanner, new Description("Config:", ConsulConstant.CONSUL_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.CONSUL.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-etcd/src/main/java/com/nepxion/discovery/plugin/configcenter/etcd/configuration/EtcdConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.etcd.constant.EtcdConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.plugin.configcenter.adapter.ConfigAdapter;
 import com.nepxion.discovery.plugin.configcenter.etcd.adapter.EtcdConfigAdapter;
 import com.taobao.text.Color;
@@ -25,7 +25,7 @@
 public class EtcdConfigAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(EtcdConfigAutoConfiguration.class, "/com/nepxion/etcd/resource/logo.txt", "Welcome to Nepxion", 4, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue }, true);
-        NepxionBanner.show(logoBanner, new Description("Config:", EtcdConstant.ETCD_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.ETCD.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-nacos/src/main/java/com/nepxion/discovery/plugin/configcenter/nacos/configuration/NacosConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.nacos.constant.NacosConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.plugin.configcenter.adapter.ConfigAdapter;
 import com.nepxion.discovery.plugin.configcenter.nacos.adapter.NacosConfigAdapter;
 import com.taobao.text.Color;
@@ -39,7 +39,7 @@ public class NacosConfigAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(NacosConfigAutoConfiguration.class, "/com/nepxion/nacos/resource/logo.txt", "Welcome to Nepxion", 5, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Config:", NacosConstant.NACOS_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.NACOS.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-redis/src/main/java/com/nepxion/discovery/plugin/configcenter/redis/configuration/RedisConfigAutoConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.redis.constant.RedisConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.plugin.configcenter.adapter.ConfigAdapter;
 import com.nepxion.discovery.plugin.configcenter.redis.adapter.RedisConfigAdapter;
 import com.taobao.text.Color;
@@ -40,7 +40,7 @@ public class RedisConfigAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(RedisConfigAutoConfiguration.class, "/com/nepxion/redis/resource/logo.txt", "Welcome to Nepxion", 5, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Config:", RedisConstant.REDIS_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.REDIS.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-zookeeper/src/main/java/com/nepxion/discovery/plugin/configcenter/zookeeper/configuration/ZookeeperConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.zookeeper.constant.ZookeeperConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.plugin.configcenter.adapter.ConfigAdapter;
 import com.nepxion.discovery.plugin.configcenter.zookeeper.adapter.ZookeeperConfigAdapter;
 import com.taobao.text.Color;
@@ -40,7 +40,7 @@ public class ZookeeperConfigAutoConfiguration {
         }*/
 
         LogoBanner logoBanner = new LogoBanner(ZookeeperConfigAutoConfiguration.class, "/com/nepxion/zookeeper/resource/logo.txt", "Welcome to Nepxion", 9, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red, Color.green, Color.cyan }, true);
-        NepxionBanner.show(logoBanner, new Description("Config:", ZookeeperConstant.ZOOKEEPER_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.ZOOKEEPER.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-plugin-admin-center/discovery-plugin-admin-center-starter/src/main/java/com/nepxion/discovery/plugin/admincenter/constant/AdminConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class AdminConstant {
-    public static final String[] DISCOVERY_TYPES = { "Eureka", "Consul", "Zookeeper", "Nacos" };
+
 }
\ No newline at end of file

File: discovery-plugin-admin-center/discovery-plugin-admin-center-starter/src/main/java/com/nepxion/discovery/plugin/admincenter/endpoint/ServiceEndpoint.java
Patch:
@@ -95,7 +95,7 @@ public ResponseEntity<?> instanceMap(@RequestBody @ApiParam(value = "服务组
 
     private ResponseEntity<?> doDiscoveryType() {
         try {
-            String discoveryType = serviceResource.getDiscoveryType();
+            String discoveryType = serviceResource.getDiscoveryType().toString();
 
             return ResponseUtil.getSuccessResponse(discoveryType);
         } catch (Exception e) {

File: discovery-plugin-admin-center/discovery-plugin-admin-center-starter/src/main/java/com/nepxion/discovery/plugin/admincenter/resource/ServiceResource.java
Patch:
@@ -14,10 +14,11 @@
 
 import org.springframework.cloud.client.ServiceInstance;
 
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 
 public interface ServiceResource {
-    String getDiscoveryType();
+    DiscoveryType getDiscoveryType();
 
     List<String> getGroups();
 

File: discovery-console/discovery-console-starter-apollo/src/main/java/com/nepxion/discovery/console/apollo/adapter/ApolloConfigAdapter.java
Patch:
@@ -19,6 +19,7 @@
 import com.ctrip.framework.apollo.openapi.client.ApolloOpenApiClient;
 import com.ctrip.framework.apollo.openapi.dto.NamespaceReleaseDTO;
 import com.ctrip.framework.apollo.openapi.dto.OpenItemDTO;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.exception.DiscoveryException;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.apollo.constant.ApolloConstant;
@@ -128,7 +129,7 @@ public String getConfig(String group, String serviceId) throws Exception {
     }
 
     @Override
-    public String getConfigType() {
-        return ApolloConstant.APOLLO_TYPE;
+    public ConfigType getConfigType() {
+        return ConfigType.APOLLO;
     }
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter-apollo/src/main/java/com/nepxion/discovery/console/apollo/configuration/ApolloConfigAutoConfiguration.java
Patch:
@@ -20,6 +20,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.exception.DiscoveryException;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.apollo.adapter.ApolloConfigAdapter;
@@ -46,7 +47,7 @@ public class ApolloConfigAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(ApolloConfigAutoConfiguration.class, "/com/nepxion/apollo/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Config:", ApolloConstant.APOLLO_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.APOLLO.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Autowired

File: discovery-console/discovery-console-starter-apollo/src/main/java/com/nepxion/discovery/console/apollo/constant/ApolloConstant.java
Patch:
@@ -12,7 +12,6 @@
 import com.ctrip.framework.apollo.openapi.client.constant.ApolloOpenApiConstants;
 
 public class ApolloConstant implements ApolloOpenApiConstants {
-    public static final String APOLLO_TYPE = "Apollo";
     public static final String APOLLO_PORTAL_URL = "apollo.portal-url";
     public static final String APOLLO_TOKEN = "apollo.token";
     public static final String APOLLO_OPERATOR = "apollo.operator";

File: discovery-console/discovery-console-starter-consul/src/main/java/com/nepxion/discovery/console/consul/adapter/ConsulConfigAdapter.java
Patch:
@@ -11,8 +11,8 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.nepxion.discovery.common.consul.constant.ConsulConstant;
 import com.nepxion.discovery.common.consul.operation.ConsulOperation;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 
 public class ConsulConfigAdapter implements ConfigAdapter {
@@ -35,7 +35,7 @@ public String getConfig(String group, String serviceId) throws Exception {
     }
 
     @Override
-    public String getConfigType() {
-        return ConsulConstant.CONSUL_TYPE;
+    public ConfigType getConfigType() {
+        return ConfigType.CONSUL;
     }
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter-consul/src/main/java/com/nepxion/discovery/console/consul/configuration/ConsulConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.consul.constant.ConsulConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.consul.adapter.ConsulConfigAdapter;
 import com.taobao.text.Color;
@@ -25,7 +25,7 @@
 public class ConsulConfigAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(ConsulConfigAutoConfiguration.class, "/com/nepxion/consul/resource/logo.txt", "Welcome to Nepxion", 6, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta }, true);
-        NepxionBanner.show(logoBanner, new Description("Config:", ConsulConstant.CONSUL_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.CONSUL.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-console/discovery-console-starter-etcd/src/main/java/com/nepxion/discovery/console/etcd/adapter/EtcdConfigAdapter.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.nepxion.discovery.common.etcd.constant.EtcdConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.etcd.operation.EtcdOperation;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 
@@ -35,7 +35,7 @@ public String getConfig(String group, String serviceId) throws Exception {
     }
 
     @Override
-    public String getConfigType() {
-        return EtcdConstant.ETCD_TYPE;
+    public ConfigType getConfigType() {
+        return ConfigType.ETCD;
     }
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter-etcd/src/main/java/com/nepxion/discovery/console/etcd/configuration/EtcdConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.etcd.constant.EtcdConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.etcd.adapter.EtcdConfigAdapter;
 import com.taobao.text.Color;
@@ -25,7 +25,7 @@
 public class EtcdConfigAutoConfiguration {
     static {
         LogoBanner logoBanner = new LogoBanner(EtcdConfigAutoConfiguration.class, "/com/nepxion/etcd/resource/logo.txt", "Welcome to Nepxion", 4, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue }, true);
-        NepxionBanner.show(logoBanner, new Description("Config:", EtcdConstant.ETCD_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.ETCD.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-console/discovery-console-starter-nacos/src/main/java/com/nepxion/discovery/console/nacos/adapter/NacosConfigAdapter.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.nepxion.discovery.common.nacos.constant.NacosConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.nacos.operation.NacosOperation;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 
@@ -35,7 +35,7 @@ public String getConfig(String group, String serviceId) throws Exception {
     }
 
     @Override
-    public String getConfigType() {
-        return NacosConstant.NACOS_TYPE;
+    public ConfigType getConfigType() {
+        return ConfigType.NACOS;
     }
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter-nacos/src/main/java/com/nepxion/discovery/console/nacos/configuration/NacosConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.nacos.constant.NacosConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.nacos.adapter.NacosConfigAdapter;
 import com.taobao.text.Color;
@@ -39,7 +39,7 @@ public class NacosConfigAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(NacosConfigAutoConfiguration.class, "/com/nepxion/nacos/resource/logo.txt", "Welcome to Nepxion", 5, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Config:", NacosConstant.NACOS_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.NACOS.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-console/discovery-console-starter-redis/src/main/java/com/nepxion/discovery/console/redis/adapter/RedisConfigAdapter.java
Patch:
@@ -12,7 +12,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.nepxion.discovery.common.redis.constant.RedisConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.redis.operation.RedisOperation;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 
@@ -36,7 +36,7 @@ public String getConfig(String group, String serviceId) throws Exception {
     }
 
     @Override
-    public String getConfigType() {
-        return RedisConstant.REDIS_TYPE;
+    public ConfigType getConfigType() {
+        return ConfigType.REDIS;
     }
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter-redis/src/main/java/com/nepxion/discovery/console/redis/configuration/RedisConfigAutoConfiguration.java
Patch:
@@ -17,7 +17,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.redis.constant.RedisConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.redis.adapter.RedisConfigAdapter;
 import com.taobao.text.Color;
@@ -40,7 +40,7 @@ public class RedisConfigAutoConfiguration {
 
         LogoBanner logoBanner = new LogoBanner(RedisConfigAutoConfiguration.class, "/com/nepxion/redis/resource/logo.txt", "Welcome to Nepxion", 5, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow }, true);
 
-        NepxionBanner.show(logoBanner, new Description("Config:", RedisConstant.REDIS_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.REDIS.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-console/discovery-console-starter-zookeeper/src/main/java/com/nepxion/discovery/console/zookeeper/adapter/ZookeeperConfigAdapter.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 
-import com.nepxion.discovery.common.zookeeper.constant.ZookeeperConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.zookeeper.operation.ZookeeperOperation;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 
@@ -35,7 +35,7 @@ public String getConfig(String group, String serviceId) throws Exception {
     }
 
     @Override
-    public String getConfigType() {
-        return ZookeeperConstant.ZOOKEEPER_TYPE;
+    public ConfigType getConfigType() {
+        return ConfigType.ZOOKEEPER;
     }
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter-zookeeper/src/main/java/com/nepxion/discovery/console/zookeeper/configuration/ZookeeperConfigAutoConfiguration.java
Patch:
@@ -16,7 +16,7 @@
 import com.nepxion.banner.Description;
 import com.nepxion.banner.LogoBanner;
 import com.nepxion.banner.NepxionBanner;
-import com.nepxion.discovery.common.zookeeper.constant.ZookeeperConstant;
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
 import com.nepxion.discovery.console.zookeeper.adapter.ZookeeperConfigAdapter;
 import com.taobao.text.Color;
@@ -40,7 +40,7 @@ public class ZookeeperConfigAutoConfiguration {
         }*/
 
         LogoBanner logoBanner = new LogoBanner(ZookeeperConfigAutoConfiguration.class, "/com/nepxion/zookeeper/resource/logo.txt", "Welcome to Nepxion", 9, 5, new Color[] { Color.red, Color.green, Color.cyan, Color.blue, Color.yellow, Color.magenta, Color.red, Color.green, Color.cyan }, true);
-        NepxionBanner.show(logoBanner, new Description("Config:", ZookeeperConstant.ZOOKEEPER_TYPE, 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
+        NepxionBanner.show(logoBanner, new Description("Config:", ConfigType.ZOOKEEPER.toString(), 0, 1), new Description(BannerConstant.GITHUB + ":", BannerConstant.NEPXION_GITHUB + "/Discovery", 0, 1));
     }
 
     @Bean

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/adapter/ConfigAdapter.java
Patch:
@@ -9,12 +9,14 @@
  * @version 1.0
  */
 
+import com.nepxion.discovery.common.entity.ConfigType;
+
 public interface ConfigAdapter {
     boolean updateConfig(String group, String serviceId, String config) throws Exception;
 
     boolean clearConfig(String group, String serviceId) throws Exception;
 
     String getConfig(String group, String serviceId) throws Exception;
 
-    String getConfigType();
+    ConfigType getConfigType();
 }
\ No newline at end of file

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/constant/ConsoleConstant.java
Patch:
@@ -10,8 +10,6 @@
  */
 
 public class ConsoleConstant {
-    public static final String[] DISCOVERY_TYPES = { "Eureka", "Consul", "Zookeeper", "Nacos" };
-    
     public static final String SPRING_CLOUD_GATEWAY = "spring-cloud-gateway";
     public static final String ZUUL = "zuul";
 

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/endpoint/ConsoleEndpoint.java
Patch:
@@ -310,7 +310,7 @@ private ResponseEntity<?> doAuthenticate(UserEntity userEntity) {
 
     private ResponseEntity<?> doDiscoveryType() {
         try {
-            String discoveryType = serviceResource.getDiscoveryType();
+            String discoveryType = serviceResource.getDiscoveryType().toString();
 
             return ResponseUtil.getSuccessResponse(discoveryType);
         } catch (Exception e) {
@@ -320,7 +320,7 @@ private ResponseEntity<?> doDiscoveryType() {
 
     private ResponseEntity<?> doConfigType() {
         try {
-            String configType = configResource.getConfigType();
+            String configType = configResource.getConfigType().toString();
 
             return ResponseUtil.getSuccessResponse(configType);
         } catch (Exception e) {

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ConfigResource.java
Patch:
@@ -11,10 +11,11 @@
 
 import java.util.List;
 
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.entity.ResultEntity;
 
 public interface ConfigResource {
-    String getConfigType();
+    ConfigType getConfigType();
 
     boolean updateRemoteConfig(String group, String serviceId, String config) throws Exception;
 

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ConfigResourceImpl.java
Patch:
@@ -16,6 +16,7 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.client.RestTemplate;
 
+import com.nepxion.discovery.common.entity.ConfigType;
 import com.nepxion.discovery.common.entity.ResultEntity;
 import com.nepxion.discovery.common.exception.DiscoveryException;
 import com.nepxion.discovery.console.adapter.ConfigAdapter;
@@ -36,7 +37,7 @@ public class ConfigResourceImpl implements ConfigResource {
     private RestTemplate consoleRestTemplate;
 
     @Override
-    public String getConfigType() {
+    public ConfigType getConfigType() {
         if (configAdapter == null) {
             LOG.error("Remote config adapter isn't provided");
 

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ServiceResource.java
Patch:
@@ -14,11 +14,12 @@
 
 import org.springframework.cloud.client.ServiceInstance;
 
+import com.nepxion.discovery.common.entity.DiscoveryType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 import com.nepxion.discovery.console.entity.GatewayType;
 
 public interface ServiceResource {
-    String getDiscoveryType();
+    DiscoveryType getDiscoveryType();
 
     List<String> getGroups();
 

File: discovery-commons/discovery-common-apollo/src/main/java/com/nepxion/discovery/common/apollo/constant/ApolloConstant.java
Patch:
@@ -12,7 +12,6 @@
 import com.ctrip.framework.apollo.core.ConfigConsts;
 
 public class ApolloConstant implements ConfigConsts {
-    public static final String APOLLO_TYPE = "Apollo";
     public static final String APOLLO_BOOTSTRAP_NAMESPACES = "apollo.bootstrap.namespaces";
     public static final String APOLLO_PLUGIN_NAMESPACE = "apollo.plugin.namespace";
     public static final String SEPARATE = ",";

File: discovery-commons/discovery-common-consul/src/main/java/com/nepxion/discovery/common/consul/constant/ConsulConstant.java
Patch:
@@ -10,7 +10,6 @@
  */
 
 public class ConsulConstant {
-    public static final String CONSUL_TYPE = "Consul";
     public static final String CONSUL_HOST = "consul.host";
     public static final String CONSUL_PORT = "consul.port";
     public static final String CONSUL_TIMEOUT = "consul.timeout";

File: discovery-commons/discovery-common-etcd/src/main/java/com/nepxion/discovery/common/etcd/constant/EtcdConstant.java
Patch:
@@ -10,7 +10,6 @@
  */
 
 public class EtcdConstant {
-    public static final String ETCD_TYPE = "Etcd";
     public static final String ETCD_SERVER_ADDR = "etcd.server.addr";
     public static final String ETCD_USERNAME = "etcd.username";
     public static final String ETCD_PASSWORD = "etcd.password";

File: discovery-commons/discovery-common-nacos/src/main/java/com/nepxion/discovery/common/nacos/constant/NacosConstant.java
Patch:
@@ -12,7 +12,6 @@
 import com.alibaba.nacos.api.PropertyKeyConst;
 
 public class NacosConstant extends PropertyKeyConst {
-    public static final String NACOS_TYPE = "Nacos";
     public static final String NACOS_PLUGIN_PREFIX = "nacos.plugin";
     public static final String NACOS_SERVER_ADDR = "nacos.server-addr";
     public static final String NACOS_ACCESS_KEY = "nacos.access-key";

File: discovery-commons/discovery-common-redis/src/main/java/com/nepxion/discovery/common/redis/constant/RedisConstant.java
Patch:
@@ -11,5 +11,5 @@
  */
 
 public class RedisConstant {
-    public static final String REDIS_TYPE = "Redis";
+
 }
\ No newline at end of file

File: discovery-commons/discovery-common-zookeeper/src/main/java/com/nepxion/discovery/common/zookeeper/constant/ZookeeperConstant.java
Patch:
@@ -10,7 +10,6 @@
  */
 
 public class ZookeeperConstant {
-    public static final String ZOOKEEPER_TYPE = "Zookeeper";
     public static final String ZOOKEEPER_CONNECT_STRING = "zookeeper.connect-string";
     public static final String ZOOKEEPER_RETRY_COUNT = "zookeeper.retry-count";
     public static final String ZOOKEEPER_SLEEP_TIME = "zookeeper.sleep-time";

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/AbstractRestInvoker.java
Patch:
@@ -75,9 +75,9 @@ public List<ResultEntity> invoke() {
                 checkPermission(instance);
 
                 result = doRest(url);
-                String cause = RestUtil.getCause(restTemplate);
-                if (StringUtils.isNotEmpty(cause)) {
-                    result = cause;
+                String error = RestUtil.getError(restTemplate);
+                if (StringUtils.isNotEmpty(error)) {
+                    result = error;
                 }
             } catch (Exception e) {
                 result = ResponseUtil.getFailureMessage(e);

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/AbstractRestInvoker.java
Patch:
@@ -75,9 +75,9 @@ public List<ResultEntity> invoke() {
                 checkPermission(instance);
 
                 result = doRest(url);
-                Exception error = RestUtil.getError(restTemplate);
-                if (error != null) {
-                    result = ResponseUtil.getFailureMessage(error);
+                String cause = RestUtil.getCause(restTemplate);
+                if (StringUtils.isNotEmpty(cause)) {
+                    result = cause;
                 }
             } catch (Exception e) {
                 result = ResponseUtil.getFailureMessage(e);

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/AbstractRestInvoker.java
Patch:
@@ -75,9 +75,9 @@ public List<ResultEntity> invoke() {
                 checkPermission(instance);
 
                 result = doRest(url);
-                String cause = RestUtil.getCause(restTemplate);
-                if (StringUtils.isNotEmpty(cause)) {
-                    result = cause;
+                Exception error = RestUtil.getError(restTemplate);
+                if (error != null) {
+                    result = ResponseUtil.getFailureMessage(error);
                 }
             } catch (Exception e) {
                 result = ResponseUtil.getFailureMessage(e);

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/route/AbstractGatewayStrategyRoute.java
Patch:
@@ -286,7 +286,7 @@ public RouteDefinition convertRoute(GatewayStrategyRouteEntity gatewayStrategyRo
         routeDefinition.setPredicates(predicateDefinitionList);
 
         List<String> filterList = gatewayStrategyRouteEntity.getFilters();
-        List<FilterDefinition> filterDefinitionList = new ArrayList<FilterDefinition>(gatewayStrategyRouteEntity.getFilters().size());
+        List<FilterDefinition> filterDefinitionList = new ArrayList<FilterDefinition>(filterList.size());
         for (String filter : filterList) {
             filterDefinitionList.add(new FilterDefinition(filter));
         }

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/rest/AbstractRestInvoker.java
Patch:
@@ -84,6 +84,9 @@ public List<ResultEntity> invoke() {
             }
 
             ResultEntity resultEntity = new ResultEntity();
+            resultEntity.setServiceId(serviceId);
+            resultEntity.setHost(host);
+            resultEntity.setPort(port);
             resultEntity.setUrl(url);
             resultEntity.setResult(result);
 

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ServiceResource.java
Patch:
@@ -14,8 +14,8 @@
 
 import org.springframework.cloud.client.ServiceInstance;
 
-import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
+import com.nepxion.discovery.console.entity.GatewayType;
 
 public interface ServiceResource {
     String getDiscoveryType();

File: discovery-console/discovery-console-starter/src/main/java/com/nepxion/discovery/console/resource/ServiceResourceImpl.java
Patch:
@@ -23,11 +23,11 @@
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 import com.nepxion.discovery.common.constant.DiscoveryMetaDataConstant;
-import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.InstanceEntity;
 import com.nepxion.discovery.common.entity.InstanceEntityWrapper;
 import com.nepxion.discovery.common.entity.ServiceType;
 import com.nepxion.discovery.console.constant.ConsoleConstant;
+import com.nepxion.discovery.console.entity.GatewayType;
 
 public class ServiceResourceImpl implements ServiceResource {
     @Autowired

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/constant/GatewayStrategyConstant.java
Patch:
@@ -19,4 +19,6 @@ public class GatewayStrategyConstant {
 
     public static final String GATEWAY_DYNAMIC_ROUTE = "dynamic-route";
     public static final String GATEWAY_DYNAMIC_ROUTE_DESCRIPTION = "Gateway dynamic route";
+
+    public static final String SPRING_CLOUD_GATEWAY = "spring-cloud-gateway";
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/context/GatewayStrategyEnvironmentPostProcessor.java
Patch:
@@ -17,15 +17,15 @@
 import org.springframework.core.env.StandardEnvironment;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
-import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ServiceType;
+import com.nepxion.discovery.plugin.strategy.gateway.constant.GatewayStrategyConstant;
 
 public class GatewayStrategyEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
         if (StringUtils.equals(environment.getClass().getName(), StandardEnvironment.class.getName())) {
             System.setProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, ServiceType.GATEWAY.toString());
-            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayType.SPRING_CLOUD_GATEWAY.toString());
+            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayStrategyConstant.SPRING_CLOUD_GATEWAY);
         }
     }
 

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/constant/ZuulStrategyConstant.java
Patch:
@@ -19,4 +19,6 @@ public class ZuulStrategyConstant {
 
     public static final String ZUUL_DYNAMIC_ROUTE = "dynamic-route";
     public static final String ZUUL_DYNAMIC_ROUTE_DESCRIPTION = "Zuul dynamic route";
+
+    public static final String ZUUL = "zuul";
 }
\ No newline at end of file

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/context/ZuulStrategyEnvironmentPostProcessor.java
Patch:
@@ -17,15 +17,15 @@
 import org.springframework.core.env.StandardEnvironment;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
-import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ServiceType;
+import com.nepxion.discovery.plugin.strategy.zuul.constant.ZuulStrategyConstant;
 
 public class ZuulStrategyEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
         if (StringUtils.equals(environment.getClass().getName(), StandardEnvironment.class.getName())) {
             System.setProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, ServiceType.GATEWAY.toString());
-            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayType.ZUUL.toString());
+            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, ZuulStrategyConstant.ZUUL);
         }
     }
 

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -70,9 +70,6 @@ public class DiscoveryConstant {
     public static final String CONSOLE = "console";
     public static final String TEST = "test";
 
-    public static final String SPRING_CLOUD_GATEWAY = "spring-cloud-gateway";
-    public static final String ZUUL = "zuul";
-
     public static final String DYNAMIC_VERSION = "dynamic-version";
     public static final String RULE = "rule";
     public static final String DYNAMIC_RULE = "dynamic-rule";

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/entity/ServiceType.java
Patch:
@@ -12,9 +12,9 @@
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
 
 public enum ServiceType {
-    SERVICE(DiscoveryConstant.SERVICE), 
-    GATEWAY(DiscoveryConstant.GATEWAY), 
-    CONSOLE(DiscoveryConstant.CONSOLE), 
+    SERVICE(DiscoveryConstant.SERVICE),
+    GATEWAY(DiscoveryConstant.GATEWAY),
+    CONSOLE(DiscoveryConstant.CONSOLE),
     TEST(DiscoveryConstant.TEST);
 
     private String value;

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/context/GatewayStrategyEnvironmentPostProcessor.java
Patch:
@@ -17,13 +17,15 @@
 import org.springframework.core.env.StandardEnvironment;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ServiceType;
 
 public class GatewayStrategyEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
         if (StringUtils.equals(environment.getClass().getName(), StandardEnvironment.class.getName())) {
             System.setProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, ServiceType.GATEWAY.toString());
+            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayType.SPRING_CLOUD_GATEWAY.toString());
         }
     }
 

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/context/ZuulStrategyEnvironmentPostProcessor.java
Patch:
@@ -17,13 +17,15 @@
 import org.springframework.core.env.StandardEnvironment;
 
 import com.nepxion.discovery.common.constant.DiscoveryConstant;
+import com.nepxion.discovery.common.entity.GatewayType;
 import com.nepxion.discovery.common.entity.ServiceType;
 
 public class ZuulStrategyEnvironmentPostProcessor implements EnvironmentPostProcessor, Ordered {
     @Override
     public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application) {
         if (StringUtils.equals(environment.getClass().getName(), StandardEnvironment.class.getName())) {
             System.setProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, ServiceType.GATEWAY.toString());
+            System.setProperty(DiscoveryConstant.SPRING_APPLICATION_GATEWAY_TYPE, GatewayType.ZUUL.toString());
         }
     }
 

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryMetaDataConstant.java
Patch:
@@ -25,6 +25,7 @@ public class DiscoveryMetaDataConstant {
     public static final String SPRING_APPLICATION_UUID = "spring_application_uuid";
     public static final String SPRING_APPLICATION_NAME = "spring_application_name";
     public static final String SPRING_APPLICATION_TYPE = "spring_application_type";
+    public static final String SPRING_APPLICATION_GATEWAY_TYPE = "spring_application_gateway_type";
     public static final String SPRING_APPLICATION_PROTOCOL = "spring_application_protocol";
 
     public static final String SEPARATE = "_";

File: discovery-plugin-framework/discovery-plugin-framework-starter/src/main/java/com/nepxion/discovery/plugin/framework/configuration/PluginAutoConfiguration.java
Patch:
@@ -9,6 +9,7 @@
  * @version 1.0
  */
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.cloud.client.loadbalancer.LoadBalanced;
@@ -105,7 +106,7 @@ public RuleMapWeightRandomLoadBalance ruleMapWeightRandomLoadBalance(PluginAdapt
     }
 
     @Bean
-    public StrategyMapWeightRandomLoadBalance strategyMapWeightRandomLoadBalance(PluginAdapter pluginAdapter, PluginContextHolder pluginContextHolder) {
+    public StrategyMapWeightRandomLoadBalance strategyMapWeightRandomLoadBalance(PluginAdapter pluginAdapter, @Autowired(required = false) PluginContextHolder pluginContextHolder) {
         return new StrategyMapWeightRandomLoadBalance(pluginAdapter, pluginContextHolder);
     }
 

File: discovery-plugin-config-center/discovery-plugin-config-center-starter-consul/src/main/java/com/nepxion/discovery/plugin/configcenter/consul/adapter/ConsulConfigAdapter.java
Patch:
@@ -54,7 +54,7 @@ private ConsulListener subscribeConfig(boolean globalConfig) {
         configLogger.logSubscribeStarted(globalConfig);
 
         try {
-            consulOperation.subscribeConfig(group, dataId, executorService, new ConsulSubscribeCallback() {
+            return consulOperation.subscribeConfig(group, dataId, executorService, new ConsulSubscribeCallback() {
                 @Override
                 public void callback(String config) {
                     callbackConfig(config, globalConfig);

File: discovery-plugin-strategy/discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/wrapper/DefaultServiceStrategyCallableWrapper.java
Patch:
@@ -44,13 +44,15 @@ public <T> Callable<T> wrapCallable(Callable<T> callable) {
             @Override
             public T call() throws Exception {
                 try {
+                    RequestContextHolder.setRequestAttributes(requestAttributes);
                     RestStrategyContext.getCurrentContext().setRequestAttributes(requestAttributes);
                     RpcStrategyContext.getCurrentContext().setAttributes(attributes);
 
                     StrategyTracerContext.getCurrentContext().setSpan(span);
 
                     return callable.call();
                 } finally {
+                    RequestContextHolder.resetRequestAttributes();
                     RestStrategyContext.clearCurrentContext();
                     RpcStrategyContext.clearCurrentContext();
 

File: discovery-plugin-framework/discovery-plugin-framework-starter/src/main/java/com/nepxion/discovery/plugin/framework/adapter/AbstractPluginAdapter.java
Patch:
@@ -452,6 +452,7 @@ public String getInstanceContextPath(ServiceInstance instance) {
     public String getPluginInfo(String previousPluginInfo) {
         String plugin = getPlugin();
         String serviceId = getServiceId();
+        String serviceType = getServiceType();
         String host = getHost();
         int port = getPort();
         String version = getVersion();
@@ -466,6 +467,7 @@ public String getPluginInfo(String previousPluginInfo) {
         }
 
         stringBuilder.append("[ID=" + serviceId + "]");
+        stringBuilder.append("[T=" + serviceType + "]");
         stringBuilder.append("[P=" + plugin + "]");
         stringBuilder.append("[H=" + host + ":" + port + "]");
         if (StringUtils.isNotEmpty(version)) {

File: discovery-plugin-admin-center/discovery-plugin-admin-center-starter/src/main/java/com/nepxion/discovery/plugin/admincenter/endpoint/InspectorEndpoint.java
Patch:
@@ -57,7 +57,6 @@ public class InspectorEndpoint {
     public InspectorEntity inspect(@RequestBody @ApiParam(value = "侦测对象", required = true) InspectorEntity inspectorEntity) {
         List<String> serviceIdList = inspectorEntity.getServiceIdList();
         String result = inspectorEntity.getResult();
-        // 第一个节点信息来自于网关
         if (StringUtils.isEmpty(result) && pluginContextHolder != null) {
             result = pluginContextHolder.getContext(DiscoveryConstant.INSPECTOR_ENDPOINT_HEADER);
         }

File: discovery-commons/discovery-common/src/main/java/com/nepxion/discovery/common/util/StringUtil.java
Patch:
@@ -31,7 +31,7 @@ public static List<String> splitToList(String value, String separate) {
             return null;
         }
 
-        String[] valueArray = StringUtils.split(value, separate);
+        String[] valueArray = StringUtils.splitByWholeSeparator(value, separate);
 
         return Arrays.asList(valueArray);
     }
@@ -67,9 +67,9 @@ public static Map<String, String> splitToMap(String value, String equals, String
         }
 
         Map<String, String> map = new HashMap<String, String>();
-        String[] separateArray = StringUtils.split(value, separate);
+        String[] separateArray = StringUtils.splitByWholeSeparator(value, separate);
         for (String separateValue : separateArray) {
-            String[] equalsArray = StringUtils.split(separateValue, equals);
+            String[] equalsArray = StringUtils.splitByWholeSeparator(separateValue, equals);
             map.put(equalsArray[0].trim(), equalsArray[1].trim());
         }
 

File: discovery-plugin-strategy-opentracing/src/main/java/com/nepxion/discovery/plugin/opentracing/operation/StrategyOpentracingOperation.java
Patch:
@@ -91,7 +91,7 @@ public void opentracingHeader(Map<String, String> customizationMap) {
         span.setTag(DiscoveryConstant.SPAN_ID, span.context().toSpanId());
         span.setTag(DiscoveryConstant.N_D_SERVICE_GROUP, strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_GROUP));
         span.setTag(DiscoveryConstant.N_D_SERVICE_TYPE, strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_TYPE));
-        String serviceAppId = pluginAdapter.getServiceAppId();
+        String serviceAppId = strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_APP_ID);
         if (StringUtils.isNotEmpty(serviceAppId)) {
             span.setTag(DiscoveryConstant.N_D_SERVICE_APP_ID, serviceAppId);
         }

File: discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/tracer/StrategyTracer.java
Patch:
@@ -64,7 +64,7 @@ public void mdcHeader() {
         MDC.put(DiscoveryConstant.SPAN_ID, (traceLoggerMdcKeyShown ? DiscoveryConstant.SPAN_ID + "=" : StringUtils.EMPTY) + (StringUtils.isNotEmpty(spanId) ? spanId : StringUtils.EMPTY));
         MDC.put(DiscoveryConstant.N_D_SERVICE_GROUP, (traceLoggerMdcKeyShown ? DiscoveryConstant.N_D_SERVICE_GROUP + "=" : StringUtils.EMPTY) + strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_GROUP));
         MDC.put(DiscoveryConstant.N_D_SERVICE_TYPE, (traceLoggerMdcKeyShown ? DiscoveryConstant.N_D_SERVICE_TYPE + "=" : StringUtils.EMPTY) + strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_TYPE));
-        String serviceAppId = pluginAdapter.getServiceAppId();
+        String serviceAppId = strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_APP_ID);
         if (StringUtils.isNotEmpty(serviceAppId)) {
             MDC.put(DiscoveryConstant.N_D_SERVICE_APP_ID, (traceLoggerMdcKeyShown ? DiscoveryConstant.N_D_SERVICE_APP_ID + "=" : StringUtils.EMPTY) + serviceAppId);
         }
@@ -130,7 +130,7 @@ public void debugHeader() {
         System.out.println(DiscoveryConstant.SPAN_ID + "=" + (StringUtils.isNotEmpty(spanId) ? spanId : StringUtils.EMPTY));
         System.out.println(DiscoveryConstant.N_D_SERVICE_GROUP + "=" + strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_GROUP));
         System.out.println(DiscoveryConstant.N_D_SERVICE_TYPE + "=" + strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_TYPE));
-        String serviceAppId = pluginAdapter.getServiceAppId();
+        String serviceAppId = strategyContextHolder.getHeader(DiscoveryConstant.N_D_SERVICE_APP_ID);
         if (StringUtils.isNotEmpty(serviceAppId)) {
             System.out.println(DiscoveryConstant.N_D_SERVICE_APP_ID + "=" + serviceAppId);
         }

File: discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -34,8 +34,6 @@ public class DiscoveryConstant {
     public static final String SPRING_APPLICATION_ENVIRONMENT_ROUTE = "spring.application.environment.route";
     public static final String SPRING_APPLICATION_ENVIRONMENT_ROUTE_VALUE = "common";
 
-    public static final String APP_ID = "app.id";
-
     public static final String CONTEXT_PATH = "server.servlet.context-path";
 
     public static final String ANNOTATION_CONFIG_SERVLET_WEB_SERVER_APPLICATION_CONTEXT = "AnnotationConfigServletWebServerApplicationContext";
@@ -55,6 +53,7 @@ public class DiscoveryConstant {
     public static final String GIT_BUILD_VERSION = "git.build.version";
     public static final String GIT_TOTAL_COMMIT_COUNT = "git.total.commit.count";
 
+    public static final String APP_ID = "app.id";
     public static final String SPRING_APPLICATION_NAME = "spring.application.name";
     public static final String SPRING_APPLICATION_TYPE = "spring.application.type";
     public static final String GROUP = "group";
@@ -84,6 +83,7 @@ public class DiscoveryConstant {
 
     public static final String N_D_SERVICE_GROUP = "n-d-service-group";
     public static final String N_D_SERVICE_TYPE = "n-d-service-type";
+    public static final String N_D_SERVICE_APP_ID = "n-d-service-app-id";
     public static final String N_D_SERVICE_ID = "n-d-service-id";
     public static final String N_D_SERVICE_ADDRESS = "n-d-service-address";
     public static final String N_D_SERVICE_VERSION = "n-d-service-version";

File: discovery-plugin-config-center-starter-apollo/src/main/java/com/nepxion/discovery/plugin/configcenter/apollo/adapter/ApolloApplicationInfoAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package com.nepxion.discovery.plugin.configcenter.apollo.extension;
+package com.nepxion.discovery.plugin.configcenter.apollo.adapter;
 
 /**
  * <p>Title: Nepxion Discovery</p>
@@ -10,9 +10,9 @@
  */
 
 import com.ctrip.framework.foundation.Foundation;
-import com.nepxion.discovery.plugin.framework.extension.ApplicationInfoProvider;
+import com.nepxion.discovery.plugin.framework.adapter.ApplicationInfoAdapter;
 
-public class ApolloApplicationInfoProvider implements ApplicationInfoProvider {
+public class ApolloApplicationInfoAdapter implements ApplicationInfoAdapter {
     @Override
     public String getAppId() {
         return Foundation.app().getAppId();

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/adapter/ApplicationInfoAdapter.java
Patch:
@@ -1,4 +1,4 @@
-package com.nepxion.discovery.plugin.framework.extension;
+package com.nepxion.discovery.plugin.framework.adapter;
 
 /**
  * <p>Title: Nepxion Discovery</p>
@@ -9,6 +9,6 @@
  * @version 1.0
  */
 
-public interface ApplicationInfoProvider {
+public interface ApplicationInfoAdapter {
     String getAppId();
 }
\ No newline at end of file

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/adapter/PluginAdapter.java
Patch:
@@ -23,6 +23,8 @@ public interface PluginAdapter {
 
     String getServiceType();
 
+    String getServiceAppId();
+
     String getServiceId();
 
     String getHost();

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/configuration/PluginAutoConfiguration.java
Patch:
@@ -9,7 +9,6 @@
  * @version 1.0
  */
 
-import com.nepxion.discovery.plugin.framework.generator.GroupGenerator;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
@@ -25,6 +24,7 @@
 import com.nepxion.discovery.plugin.framework.event.PluginPublisher;
 import com.nepxion.discovery.plugin.framework.event.PluginSubscriber;
 import com.nepxion.discovery.plugin.framework.generator.GitGenerator;
+import com.nepxion.discovery.plugin.framework.generator.GroupGenerator;
 import com.nepxion.discovery.plugin.framework.listener.discovery.DiscoveryListenerExecutor;
 import com.nepxion.discovery.plugin.framework.listener.discovery.EnvironmentFilterDiscoveryListener;
 import com.nepxion.discovery.plugin.framework.listener.discovery.HostFilterDiscoveryListener;

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/context/PluginContextAware.java
Patch:
@@ -129,8 +129,8 @@ public Integer getGroupGeneratorLength() {
         return getGroupGeneratorLength(environment);
     }
 
-    public String getGroupGeneratorSymbolCharacter() {
-        return getGroupGeneratorSymbolCharacter(environment);
+    public String getGroupGeneratorCharacter() {
+        return getGroupGeneratorCharacter(environment);
     }
 
     public Boolean isGitGeneratorEnabled() {
@@ -193,7 +193,7 @@ public static Integer getGroupGeneratorLength(Environment environment) {
         return environment.getProperty(DiscoveryConstant.SPRING_APPLICATION_GROUP_GENERATOR_LENGTH, Integer.class, -1);
     }
 
-    public static String getGroupGeneratorSymbolCharacter(Environment environment) {
+    public static String getGroupGeneratorCharacter(Environment environment) {
         return environment.getProperty(DiscoveryConstant.SPRING_APPLICATION_GROUP_GENERATOR_CHARACTER, String.class, "");
     }
 

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/generator/GroupGeneratorSymbol.java
Patch:
@@ -32,7 +32,7 @@ public void initialize() {
         if (StringUtils.isNotEmpty(group)) {
             LOG.info("Use application name prefix={} as metadata group", group);
         } else {
-            LOG.error("Not substring application name prefix for generator length={}, use default metadata group setting", generatorSymbolCharacter);
+            LOG.error("Not substring application name prefix for generator character={}, use default metadata group setting", generatorSymbolCharacter);
         }
         LOG.info("--------------------------------------------------");
     }

File: discovery-plugin-strategy/src/test/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyTest.java
Patch:
@@ -34,7 +34,7 @@ private static boolean test1() {
         // String expression = "#H['a'] >= '123' && #H['b'] <= '456'";
         // String expression = "#H['a'] >= '123' || #H['b'] <= '456'";
         // String expression = "#H['a'] != '123' || #H['b'] != '456'";
-        //String expression = "#H['a'] < '2' && #H['b'] == '3'";
+        // String expression = "#H['a'] < '2' && #H['b'] == '3'";
         String expression = "#H['a'] matches '[a-z]{3}2'";
         Map<String, String> headerMap = new HashMap<String, String>();
         // headerMap.put("a", "123");

File: discovery-plugin-strategy/src/test/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyTest.java
Patch:
@@ -34,8 +34,8 @@ private static boolean test1() {
         // String expression = "#H['a'] >= '123' && #H['b'] <= '456'";
         // String expression = "#H['a'] >= '123' || #H['b'] <= '456'";
         // String expression = "#H['a'] != '123' || #H['b'] != '456'";
-        String expression = "#H['a'] < '2' && #H['b'] == 'y'";
-
+        //String expression = "#H['a'] < '2' && #H['b'] == '3'";
+        String expression = "#H['a'] matches '[a-z]{3}2'";
         Map<String, String> headerMap = new HashMap<String, String>();
         // headerMap.put("a", "123");
         // headerMap.put("b", "456");

File: discovery-common/src/main/java/com/nepxion/discovery/common/entity/WeightEntityWrapper.java
Patch:
@@ -54,7 +54,7 @@ public static void parseWeightEntity(MapWeightEntity weightEntity, String weight
                 if (weight < 0) {
                     weight = 0;
                 }
-            } catch (NumberFormatException e) {
+            } catch (Exception e) {
 
             }
 

File: discovery-common/src/main/java/com/nepxion/discovery/common/util/MathsUtil.java
Patch:
@@ -25,7 +25,7 @@ public static Long calculate(String value) {
             for (String data : array) {
                 result *= Long.parseLong(data.trim());
             }
-        } catch (NumberFormatException e) {
+        } catch (Exception e) {
             return null;
         }
 

File: discovery-console-desktop/src/main/java/com/nepxion/discovery/console/desktop/workspace/ServiceTopology.java
Patch:
@@ -1492,7 +1492,7 @@ public boolean setFromUI() {
                 nodeStartY = Integer.parseInt(nodeStartYTextField.getText());
                 nodeHorizontalGap = Integer.parseInt(nodeHorizontalGapTextField.getText());
                 nodeVerticalGap = Integer.parseInt(nodeVerticalGapTextField.getText());
-            } catch (NumberFormatException e) {
+            } catch (Exception e) {
                 return false;
             }
 

File: discovery-plugin-config-center/src/main/java/com/nepxion/discovery/plugin/configcenter/parser/xml/XmlConfigParser.java
Patch:
@@ -370,7 +370,7 @@ private void parseCountFilter(Element element, RegisterEntity registerEntity) {
                 Integer globalValue = null;
                 try {
                     globalValue = Integer.valueOf(globalFilterValue);
-                } catch (NumberFormatException e) {
+                } catch (Exception e) {
                     throw new DiscoveryException("Attribute[" + ConfigConstant.FILTER_VALUE_ATTRIBUTE_NAME + "] value in element[" + element.getName() + "] is invalid, must be int type", e);
                 }
                 countFilterEntity.setFilterValue(globalValue);
@@ -397,7 +397,7 @@ private void parseCountFilter(Element element, RegisterEntity registerEntity) {
                         if (StringUtils.isNotEmpty(filterValue)) {
                             try {
                                 value = Integer.valueOf(filterValue);
-                            } catch (NumberFormatException e) {
+                            } catch (Exception e) {
                                 throw new DiscoveryException("Attribute[" + ConfigConstant.FILTER_VALUE_ATTRIBUTE_NAME + "] value in element[" + childElement.getName() + "] is invalid, must be int type", e);
                             }
                         }

File: discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyResolver.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.expression.spel.standard.SpelExpressionParser;
 import org.springframework.expression.spel.support.StandardEvaluationContext;
 
-public class ExpressionStrategyUtil {
+public class ExpressionStrategyResolver {
     private static final ExpressionParser EXPRESSION_PARSER = new SpelExpressionParser();
 
     public static boolean eval(String expression, String key, Map<String, String> map, TypeComparator typeComparator) {

File: discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/condition/HeaderExpressionStrategyCondition.java
Patch:
@@ -27,7 +27,7 @@ public boolean isTriggered(StrategyConditionEntity strategyConditionEntity) {
         String conditionHeader = strategyConditionEntity.getConditionHeader();
         Map<String, String> headerMap = createHeaderMap(conditionHeader);
 
-        return ExpressionStrategyUtil.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap, strategyTypeComparator);
+        return ExpressionStrategyResolver.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap, strategyTypeComparator);
     }
 
     private Map<String, String> createHeaderMap(String conditionHeader) {
@@ -47,6 +47,6 @@ private Map<String, String> createHeaderMap(String conditionHeader) {
     }
 
     public boolean eval(String conditionHeader, Map<String, String> headerMap) {
-        return ExpressionStrategyUtil.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap, strategyTypeComparator);
+        return ExpressionStrategyResolver.eval(conditionHeader, DiscoveryConstant.EXPRESSION_PREFIX, headerMap, strategyTypeComparator);
     }
 }
\ No newline at end of file

File: discovery-plugin-strategy/src/test/java/com/nepxion/discovery/plugin/strategy/condition/ExpressionStrategyTest.java
Patch:
@@ -42,7 +42,7 @@ private static boolean test1() {
         headerMap.put("a", "1.2333");
         headerMap.put("b", "y");
 
-        return ExpressionStrategyUtil.eval(expression, "H", headerMap, new DefaultStrategyTypeComparor());
+        return ExpressionStrategyResolver.eval(expression, "H", headerMap, new DefaultStrategyTypeComparor());
     }
 
     private static List<String> test2() {

File: discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -88,6 +88,7 @@ public class DiscoveryConstant {
 
     public static final String N_D_VERSION = "n-d-version";
     public static final String N_D_REGION = "n-d-region";
+    public static final String N_D_ENVIRONMENT = "n-d-env";
     public static final String N_D_ADDRESS = "n-d-address";
     public static final String N_D_VERSION_WEIGHT = "n-d-version-weight";
     public static final String N_D_REGION_WEIGHT = "n-d-region-weight";

File: discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/adapter/DefaultEnvironmentDiscoveryEnabledStrategy.java
Patch:
@@ -23,7 +23,7 @@ public boolean apply(Server server) {
             return true;
         }
 
-        String headerEnvironment = strategyContextHolder.getHeader(DiscoveryConstant.ENVIRONMENT);
+        String headerEnvironment = strategyContextHolder.getHeader(DiscoveryConstant.N_D_ENVIRONMENT);
         // 传入headerEnvironment为空，返回true
         if (StringUtils.isEmpty(headerEnvironment)) {
             return true;

File: discovery-plugin-strategy-opentracing/src/main/java/com/nepxion/discovery/plugin/opentracing/operation/StrategyOpentracingOperation.java
Patch:
@@ -229,7 +229,7 @@ public String getTraceId() {
             return null;
         }
 
-        Span span = getCurrentSpan();
+        Span span = tracer.activeSpan();
         if (span != null) {
             return span.context().toTraceId();
         }
@@ -242,7 +242,7 @@ public String getSpanId() {
             return null;
         }
 
-        Span span = getCurrentSpan();
+        Span span = tracer.activeSpan();
         if (span != null) {
             return span.context().toSpanId();
         }

File: discovery-plugin-framework-consul/src/main/java/com/nepxion/discovery/plugin/framework/context/ConsulApplicationContextInitializer.java
Patch:
@@ -37,8 +37,8 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             consulDiscoveryProperties.setPreferIpAddress(true);
 
             List<String> metadata = consulDiscoveryProperties.getTags();
-            if (!MetadataUtil.containsKey(metadata, DiscoveryConstant.GROUP)) {
-                metadata.add(DiscoveryConstant.GROUP + "=" + DiscoveryConstant.DEFAULT);
+            if (!MetadataUtil.containsKey(metadata, PluginContextAware.getGroupKey(environment))) {
+                metadata.add(PluginContextAware.getGroupKey(environment) + "=" + DiscoveryConstant.DEFAULT);
             }
             if (!MetadataUtil.containsKey(metadata, DiscoveryConstant.VERSION)) {
                 metadata.add(DiscoveryConstant.VERSION + "=" + DiscoveryConstant.DEFAULT);
@@ -58,7 +58,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             String prefixGroup = getPrefixGroup(applicationContext);
             if (StringUtils.isNotEmpty(prefixGroup)) {
-                metadata.set(MetadataUtil.getIndex(metadata, DiscoveryConstant.GROUP), DiscoveryConstant.GROUP + "=" + prefixGroup);
+                metadata.set(MetadataUtil.getIndex(metadata, PluginContextAware.getGroupKey(environment)), PluginContextAware.getGroupKey(environment) + "=" + prefixGroup);
             }
 
             String gitVersion = getGitVersion(applicationContext);

File: discovery-plugin-framework-eureka/src/main/java/com/nepxion/discovery/plugin/framework/context/EurekaApplicationContextInitializer.java
Patch:
@@ -37,8 +37,8 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             eurekaInstanceConfig.setPreferIpAddress(true);
 
             Map<String, String> metadata = eurekaInstanceConfig.getMetadataMap();
-            if (!metadata.containsKey(DiscoveryConstant.GROUP)) {
-                metadata.put(DiscoveryConstant.GROUP, DiscoveryConstant.DEFAULT);
+            if (!metadata.containsKey(PluginContextAware.getGroupKey(environment))) {
+                metadata.put(PluginContextAware.getGroupKey(environment), DiscoveryConstant.DEFAULT);
             }
             if (!metadata.containsKey(DiscoveryConstant.VERSION)) {
                 metadata.put(DiscoveryConstant.VERSION, DiscoveryConstant.DEFAULT);
@@ -58,7 +58,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             String prefixGroup = getPrefixGroup(applicationContext);
             if (StringUtils.isNotEmpty(prefixGroup)) {
-                metadata.put(DiscoveryConstant.GROUP, prefixGroup);
+                metadata.put(PluginContextAware.getGroupKey(environment), prefixGroup);
             }
 
             String gitVersion = getGitVersion(applicationContext);

File: discovery-plugin-framework-nacos/src/main/java/com/nepxion/discovery/plugin/framework/context/NacosApplicationContextInitializer.java
Patch:
@@ -38,8 +38,8 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             NacosDiscoveryProperties nacosDiscoveryProperties = (NacosDiscoveryProperties) bean;
 
             Map<String, String> metadata = nacosDiscoveryProperties.getMetadata();
-            if (!metadata.containsKey(DiscoveryConstant.GROUP)) {
-                metadata.put(DiscoveryConstant.GROUP, DiscoveryConstant.DEFAULT);
+            if (!metadata.containsKey(PluginContextAware.getGroupKey(environment))) {
+                metadata.put(PluginContextAware.getGroupKey(environment), DiscoveryConstant.DEFAULT);
             }
             if (!metadata.containsKey(DiscoveryConstant.VERSION)) {
                 metadata.put(DiscoveryConstant.VERSION, DiscoveryConstant.DEFAULT);
@@ -59,7 +59,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             String prefixGroup = getPrefixGroup(applicationContext);
             if (StringUtils.isNotEmpty(prefixGroup)) {
-                metadata.put(DiscoveryConstant.GROUP, prefixGroup);
+                metadata.put(PluginContextAware.getGroupKey(environment), prefixGroup);
             }
 
             String gitVersion = getGitVersion(applicationContext);

File: discovery-plugin-framework-zookeeper/src/main/java/com/nepxion/discovery/plugin/framework/context/ZookeeperApplicationContextInitializer.java
Patch:
@@ -37,8 +37,8 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
             zookeeperDiscoveryProperties.setPreferIpAddress(true);
 
             Map<String, String> metadata = zookeeperDiscoveryProperties.getMetadata();
-            if (!metadata.containsKey(DiscoveryConstant.GROUP)) {
-                metadata.put(DiscoveryConstant.GROUP, DiscoveryConstant.DEFAULT);
+            if (!metadata.containsKey(PluginContextAware.getGroupKey(environment))) {
+                metadata.put(PluginContextAware.getGroupKey(environment), DiscoveryConstant.DEFAULT);
             }
             if (!metadata.containsKey(DiscoveryConstant.VERSION)) {
                 metadata.put(DiscoveryConstant.VERSION, DiscoveryConstant.DEFAULT);
@@ -58,7 +58,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             String prefixGroup = getPrefixGroup(applicationContext);
             if (StringUtils.isNotEmpty(prefixGroup)) {
-                metadata.put(DiscoveryConstant.GROUP, prefixGroup);
+                metadata.put(PluginContextAware.getGroupKey(environment), prefixGroup);
             }
 
             String gitVersion = getGitVersion(applicationContext);

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/decorator/PredicateBasedRuleDecorator.java
Patch:
@@ -64,6 +64,7 @@ private void initialize() {
         ruleMapWeightRandomLoadBalance = new RuleMapWeightRandomLoadBalance(pluginAdapter);
     }
 
+    // 必须执行getEligibleServers，否则叠加执行权重规则和版本区域策略会失效
     private List<Server> getServerList(Object key) {
         return getPredicate().getEligibleServers(getLoadBalancer().getAllServers(), key);
     }

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/decorator/ZoneAvoidanceRuleDecorator.java
Patch:
@@ -64,6 +64,7 @@ private void initialize() {
         ruleMapWeightRandomLoadBalance = new RuleMapWeightRandomLoadBalance(pluginAdapter);
     }
 
+    // 必须执行getEligibleServers，否则叠加执行权重规则和版本区域策略会失效
     private List<Server> getServerList(Object key) {
         return getPredicate().getEligibleServers(getLoadBalancer().getAllServers(), key);
     }

File: discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/filter/GatewayStrategyFilterResolver.java
Patch:
@@ -13,7 +13,6 @@
 import org.springframework.http.server.reactive.ServerHttpRequest;
 
 public class GatewayStrategyFilterResolver {
-    @SuppressWarnings("deprecation")
     public static void setHeader(ServerHttpRequest.Builder requestBuilder, String headerName, String headerValue, Boolean gatewayHeaderPriority) {
         if (StringUtils.isEmpty(headerValue)) {
             return;
@@ -27,7 +26,8 @@ public static void setHeader(ServerHttpRequest.Builder requestBuilder, String he
         // 不管外界是否传递了Header，网关侧都加入Header
         // 当外界没传递了Header，由网关侧Header来替代
         // 当外界传递了Header，虽然网关侧也添加了Header，但传递到调用链的还是第一个Header。参考exchange.getRequest().getHeaders().getFirst(name)
-        requestBuilder.header(headerName, headerValue);
+        // 在spring-web-5.1.9.RELEASE版本中，requestBuilder.header(headerName, headerValue)已经标识为@Deprecated，为兼容5.1.8版本，改为如下代码
+        requestBuilder.headers(headers -> headers.add(headerName, headerValue));
     }
 
     public static void ignoreHeader(ServerHttpRequest.Builder requestBuilder, String headerName, Boolean gatewayHeaderPriority, Boolean gatewayOriginalHeaderIgnored) {

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/context/PluginContextAware.java
Patch:
@@ -150,7 +150,7 @@ public static String getApplicationName(Environment environment) {
     }
 
     public static String getApplicationType(Environment environment) {
-        return environment.getProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE);
+        return environment.getProperty(DiscoveryConstant.SPRING_APPLICATION_TYPE, String.class, DiscoveryConstant.UNKNOWN);
     }
 
     public static String getGroupKey(Environment environment) {

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/adapter/AbstractPluginAdapter.java
Patch:
@@ -37,7 +37,7 @@ public abstract class AbstractPluginAdapter implements PluginAdapter {
     @Value("${" + DiscoveryConstant.SPRING_APPLICATION_GROUP_KEY + ":" + DiscoveryConstant.GROUP + "}")
     private String groupKey;
 
-    @Value("${" + DiscoveryConstant.SPRING_APPLICATION_TYPE + "}")
+    @Value("${" + DiscoveryConstant.SPRING_APPLICATION_TYPE + ":" + DiscoveryConstant.UNKNOWN + "}")
     private String applicationType;
 
     @Override

File: discovery-plugin-admin-center/src/main/java/com/nepxion/discovery/plugin/admincenter/endpoint/RouterEndpoint.java
Patch:
@@ -124,7 +124,7 @@ public RouterEntity getRouterEntity() {
         String region = pluginAdapter.getRegion();
         String host = pluginAdapter.getHost();
         int port = pluginAdapter.getPort();
-        int weight = getWeight(serviceId, version, region);
+        int weight = -1;
         String contextPath = pluginAdapter.getContextPath();
 
         RouterEntity routerEntity = new RouterEntity();

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/loadbalance/WeightRandomLoadBalance.java
Patch:
@@ -18,5 +18,7 @@ public interface WeightRandomLoadBalance<T> {
 
     int getWeight(Server server, T t);
 
+    boolean checkWeight(List<Server> serverList, T t);
+
     Server choose(List<Server> serverList, T t);
 }
\ No newline at end of file

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/listener/register/RegisterListenerExecutor.java
Patch:
@@ -28,7 +28,6 @@ public void onRegister(Registration registration) {
     public void onDeregister(Registration registration) {
         for (RegisterListener registerListener : registerListenerList) {
             registerListener.onDeregister(registration);
-
         }
     }
 

File: discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/wrapper/DefaultCallableWrapper.java
Patch:
@@ -10,6 +10,7 @@
  * @version 1.0
  */
 
+import java.util.Map;
 import java.util.concurrent.Callable;
 
 import javax.servlet.http.HttpServletRequest;
@@ -22,12 +23,14 @@ public class DefaultCallableWrapper implements CallableWrapper {
     @Override
     public <T> Callable<T> wrapCallable(Callable<T> delegate) {
         HttpServletRequest request = RequestContext.getCurrentContext().getRequest();
+        Map<String, String> headers = RequestContext.getCurrentContext().getZuulRequestHeaders();
 
         return new Callable<T>() {
             @Override
             public T call() throws Exception {
                 try {
                     ZuulStrategyContext.getCurrentContext().setRequest(request);
+                    ZuulStrategyContext.getCurrentContext().setHeaders(headers);
 
                     return delegate.call();
                 } finally {

File: discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -52,6 +52,7 @@ public class DiscoveryConstant {
     public static final String VERSION_WEIGHT = "version-weight";
     public static final String REGION_WEIGHT = "region-weight";
 
+    public static final String N_D_SERVICE_TYPE = "n-d-service-type";
     public static final String N_D_SERVICE_ID = "n-d-service-id";
     public static final String N_D_GROUP = "n-d-group";
     public static final String N_D_VERSION = "n-d-version";

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/aop/FeignStrategyInterceptor.java
Patch:
@@ -66,7 +66,7 @@ public FeignStrategyInterceptor(String requestHeaders) {
         if (!requestHeaderList.contains(DiscoveryConstant.N_D_REGION_WEIGHT)) {
             requestHeaderList.add(DiscoveryConstant.N_D_REGION_WEIGHT);
         }
-        LOG.info("Feign intercepted headers are {}", StringUtils.isNotEmpty(requestHeaders) ? requestHeaders : "empty");
+        LOG.info("Feign desires to intercept headers are {}", requestHeaders);
         LOG.info("-------------------------------------------------");
     }
 
@@ -77,6 +77,7 @@ public void apply(RequestTemplate requestTemplate) {
     }
 
     private void applyInnerHeader(RequestTemplate requestTemplate) {
+        requestTemplate.header(DiscoveryConstant.N_D_SERVICE_TYPE, pluginAdapter.getServiceType());
         requestTemplate.header(DiscoveryConstant.N_D_SERVICE_ID, pluginAdapter.getServiceId());
         requestTemplate.header(DiscoveryConstant.N_D_GROUP, pluginAdapter.getGroup());
     }

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/aop/RestTemplateStrategyInterceptor.java
Patch:
@@ -69,7 +69,7 @@ public RestTemplateStrategyInterceptor(String requestHeaders) {
         if (!requestHeaderList.contains(DiscoveryConstant.N_D_REGION_WEIGHT)) {
             requestHeaderList.add(DiscoveryConstant.N_D_REGION_WEIGHT);
         }
-        LOG.info("RestTemplate intercepted headers are {}", StringUtils.isNotEmpty(requestHeaders) ? requestHeaders : "empty");
+        LOG.info("RestTemplate desires to intercept headers are {}", requestHeaders);
         LOG.info("-------------------------------------------------");
     }
 
@@ -83,6 +83,7 @@ public ClientHttpResponse intercept(HttpRequest request, byte[] body, ClientHttp
 
     private void applyInnerHeader(HttpRequest request) {
         HttpHeaders headers = request.getHeaders();
+        headers.add(DiscoveryConstant.N_D_SERVICE_TYPE, pluginAdapter.getServiceType());
         headers.add(DiscoveryConstant.N_D_SERVICE_ID, pluginAdapter.getServiceId());
         headers.add(DiscoveryConstant.N_D_GROUP, pluginAdapter.getGroup());
     }

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/context/PluginContextAware.java
Patch:
@@ -110,7 +110,7 @@ public String getApplicationName() {
     }
 
     public String getApplicationType() {
-        return getApplicationType();
+        return getApplicationType(environment);
     }
 
     public String getGroupKey() {

File: discovery-plugin-framework-consul/src/main/java/com/nepxion/discovery/plugin/framework/context/ConsulApplicationContextInitializer.java
Patch:
@@ -37,6 +37,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             List<String> tags = consulDiscoveryProperties.getTags();
             tags.add(DiscoveryConstant.SPRING_APPLICATION_NAME + "=" + PluginContextAware.getApplicationName(environment));
+            tags.add(DiscoveryConstant.SPRING_APPLICATION_TYPE + "=" + PluginContextAware.getApplicationType(environment));
             tags.add(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN + "=" + ConsulConstant.DISCOVERY_PLUGIN);
             tags.add(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_VERSION + "=" + DiscoveryConstant.DISCOVERY_VERSION);
             tags.add(DiscoveryConstant.SPRING_APPLICATION_REGISTER_CONTROL_ENABLED + "=" + PluginContextAware.isRegisterControlEnabled(environment));

File: discovery-plugin-framework-eureka/src/main/java/com/nepxion/discovery/plugin/framework/context/EurekaApplicationContextInitializer.java
Patch:
@@ -37,6 +37,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             Map<String, String> metadataMap = eurekaInstanceConfig.getMetadataMap();
             metadataMap.put(DiscoveryConstant.SPRING_APPLICATION_NAME, PluginContextAware.getApplicationName(environment));
+            metadataMap.put(DiscoveryConstant.SPRING_APPLICATION_TYPE, PluginContextAware.getApplicationType(environment));
             metadataMap.put(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, EurekaConstant.DISCOVERY_PLUGIN);
             metadataMap.put(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_VERSION, DiscoveryConstant.DISCOVERY_VERSION);
             metadataMap.put(DiscoveryConstant.SPRING_APPLICATION_REGISTER_CONTROL_ENABLED, PluginContextAware.isRegisterControlEnabled(environment).toString());

File: discovery-plugin-framework-nacos/src/main/java/com/nepxion/discovery/plugin/framework/context/NacosApplicationContextInitializer.java
Patch:
@@ -38,6 +38,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             Map<String, String> metadata = nacosDiscoveryProperties.getMetadata();
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_NAME, PluginContextAware.getApplicationName(environment));
+            metadata.put(DiscoveryConstant.SPRING_APPLICATION_TYPE, PluginContextAware.getApplicationType(environment));
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, NacosConstant.DISCOVERY_PLUGIN);
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_VERSION, DiscoveryConstant.DISCOVERY_VERSION);
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_REGISTER_CONTROL_ENABLED, PluginContextAware.isRegisterControlEnabled(environment).toString());

File: discovery-plugin-framework-zookeeper/src/main/java/com/nepxion/discovery/plugin/framework/context/ZookeeperApplicationContextInitializer.java
Patch:
@@ -37,6 +37,7 @@ protected Object afterInitialization(ConfigurableApplicationContext applicationC
 
             Map<String, String> metadata = zookeeperDiscoveryProperties.getMetadata();
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_NAME, PluginContextAware.getApplicationName(environment));
+            metadata.put(DiscoveryConstant.SPRING_APPLICATION_TYPE, PluginContextAware.getApplicationType(environment));
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_PLUGIN, ZookeeperConstant.DISCOVERY_PLUGIN);
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_DISCOVERY_VERSION, DiscoveryConstant.DISCOVERY_VERSION);
             metadata.put(DiscoveryConstant.SPRING_APPLICATION_REGISTER_CONTROL_ENABLED, PluginContextAware.isRegisterControlEnabled(environment).toString());

File: discovery-common/src/main/java/com/nepxion/discovery/common/constant/DiscoveryConstant.java
Patch:
@@ -50,11 +50,11 @@ public class DiscoveryConstant {
 
     public static final String N_D_SERVICE_ID = "n-d-service-id";
     public static final String N_D_GROUP = "n-d-group";
-    public static final String N_D_REGION = "n-d-region";
     public static final String N_D_VERSION = "n-d-version";
+    public static final String N_D_REGION = "n-d-region";
     public static final String N_D_ADDRESS = "n-d-address";
-    public static final String N_D_REGION_WEIGHT = "n-d-region-weight";
     public static final String N_D_VERSION_WEIGHT = "n-d-version-weight";
+    public static final String N_D_REGION_WEIGHT = "n-d-region-weight";
 
     public static final String XML_FORMAT = "xml";
     public static final String JSON_FORMAT = "json";

File: discovery-springcloud-example-gateway/src/main/java/com/nepxion/discovery/plugin/example/gateway/impl/MyGatewayFilter.java
Patch:
@@ -20,14 +20,15 @@
 public class MyGatewayFilter implements GlobalFilter, Ordered {
     @Override
     public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
-        ServerHttpRequest newRequest = exchange.getRequest().mutate().header("version", "{\"discovery-springcloud-example-a\":\"1.0\", \"discovery-springcloud-example-b\":\"1.0\", \"discovery-springcloud-example-c\":\"1.0;1.2\"}").build();
+        ServerHttpRequest newRequest = exchange.getRequest().mutate().header("n-d-version", "{\"discovery-springcloud-example-a\":\"1.0\", \"discovery-springcloud-example-b\":\"1.0\", \"discovery-springcloud-example-c\":\"1.0;1.2\"}").build();
         ServerWebExchange newExchange = exchange.mutate().request(newRequest).build();
 
         return chain.filter(newExchange);
     }
 
     @Override
     public int getOrder() {
-        return -200;
+        // Order必须小于-400
+        return -500;
     }
 }
\ No newline at end of file

File: discovery-springcloud-example-zuul/src/main/java/com/nepxion/discovery/plugin/example/zuul/impl/MyZuulFilter.java
Patch:
@@ -31,7 +31,7 @@ public boolean shouldFilter() {
     @Override
     public Object run() {
         RequestContext context = RequestContext.getCurrentContext();
-        context.addZuulRequestHeader("version", "{\"discovery-springcloud-example-a\":\"1.0\", \"discovery-springcloud-example-b\":\"1.0\", \"discovery-springcloud-example-c\":\"1.0;1.2\"}");
+        context.addZuulRequestHeader("n-d-version", "{\"discovery-springcloud-example-a\":\"1.0\", \"discovery-springcloud-example-b\":\"1.0\", \"discovery-springcloud-example-c\":\"1.0;1.2\"}");
 
         return null;
     }

File: discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/context/GatewayStrategyContext.java
Patch:
@@ -23,6 +23,8 @@ protected GatewayStrategyContext initialValue() {
         }
     };
 
+    private ServerWebExchange exchange;
+
     public static GatewayStrategyContext getCurrentContext() {
         return THREAD_LOCAL.get();
     }
@@ -31,8 +33,6 @@ public static void clearCurrentContext() {
         THREAD_LOCAL.remove();
     }
 
-    private ServerWebExchange exchange;
-
     public ServerWebExchange getExchange() {
         return exchange;
     }

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/context/RestStrategyContext.java
Patch:
@@ -23,6 +23,8 @@ protected RestStrategyContext initialValue() {
         }
     };
 
+    private RequestAttributes requestAttributes;
+
     public static RestStrategyContext getCurrentContext() {
         return THREAD_LOCAL.get();
     }
@@ -31,8 +33,6 @@ public static void clearCurrentContext() {
         THREAD_LOCAL.remove();
     }
 
-    private RequestAttributes requestAttributes;
-
     public RequestAttributes getRequestAttributes() {
         return requestAttributes;
     }

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/context/RpcStrategyContext.java
Patch:
@@ -26,6 +26,8 @@ protected RpcStrategyContext initialValue() {
         }
     };
 
+    private final Map<String, Object> attributes = new LinkedHashMap<String, Object>();
+
     public static RpcStrategyContext getCurrentContext() {
         return THREAD_LOCAL.get();
     }
@@ -34,8 +36,6 @@ public static void clearCurrentContext() {
         THREAD_LOCAL.remove();
     }
 
-    private final Map<String, Object> attributes = new LinkedHashMap<String, Object>();
-
     public RpcStrategyContext add(String key, Object value) {
         attributes.put(key, value);
 

File: discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/context/ZuulStrategyContext.java
Patch:
@@ -25,6 +25,8 @@ protected ZuulStrategyContext initialValue() {
         }
     };
 
+    private HttpServletRequest request;
+
     public static ZuulStrategyContext getCurrentContext() {
         return THREAD_LOCAL.get();
     }
@@ -33,8 +35,6 @@ public static void clearCurrentContext() {
         THREAD_LOCAL.remove();
     }
 
-    private HttpServletRequest request;
-
     public HttpServletRequest getRequest() {
         return request;
     }

File: discovery-common/src/main/java/com/nepxion/discovery/common/util/UrlUtil.java
Patch:
@@ -26,7 +26,7 @@ public static String formatUrl(String url) {
 
     public static String formatContextPath(String contextPath) {
         if (StringUtils.isEmpty(contextPath)) {
-            contextPath = "/";
+            return "/";
         } else {
             if (!contextPath.startsWith("/")) {
                 contextPath = "/" + contextPath;

File: discovery-plugin-strategy-starter-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/gateway/context/GatewayStrategyContext.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.web.server.ServerWebExchange;
 
 public class GatewayStrategyContext {
-    private static final ThreadLocal<GatewayStrategyContext> THREAD_LOCAL = new InheritableThreadLocal<GatewayStrategyContext>() {
+    private static final ThreadLocal<GatewayStrategyContext> THREAD_LOCAL = new ThreadLocal<GatewayStrategyContext>() {
         @Override
         protected GatewayStrategyContext initialValue() {
             return new GatewayStrategyContext();

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/context/RestStrategyContext.java
Patch:
@@ -16,7 +16,7 @@
 import org.springframework.web.context.request.RequestAttributes;
 
 public class RestStrategyContext {
-    private static final ThreadLocal<RestStrategyContext> THREAD_LOCAL = new InheritableThreadLocal<RestStrategyContext>() {
+    private static final ThreadLocal<RestStrategyContext> THREAD_LOCAL = new ThreadLocal<RestStrategyContext>() {
         @Override
         protected RestStrategyContext initialValue() {
             return new RestStrategyContext();

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/context/RpcStrategyContext.java
Patch:
@@ -19,7 +19,7 @@
 import org.apache.commons.lang3.builder.ToStringStyle;
 
 public class RpcStrategyContext {
-    private static final ThreadLocal<RpcStrategyContext> THREAD_LOCAL = new InheritableThreadLocal<RpcStrategyContext>() {
+    private static final ThreadLocal<RpcStrategyContext> THREAD_LOCAL = new ThreadLocal<RpcStrategyContext>() {
         @Override
         protected RpcStrategyContext initialValue() {
             return new RpcStrategyContext();

File: discovery-plugin-strategy-starter-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/zuul/context/ZuulStrategyContext.java
Patch:
@@ -18,7 +18,7 @@
 import org.apache.commons.lang3.builder.ToStringStyle;
 
 public class ZuulStrategyContext {
-    private static final ThreadLocal<ZuulStrategyContext> THREAD_LOCAL = new InheritableThreadLocal<ZuulStrategyContext>() {
+    private static final ThreadLocal<ZuulStrategyContext> THREAD_LOCAL = new ThreadLocal<ZuulStrategyContext>() {
         @Override
         protected ZuulStrategyContext initialValue() {
             return new ZuulStrategyContext();

File: discovery-springcloud-example-service/src/main/java/com/nepxion/discovery/plugin/example/service/DiscoveryApplicationA1.java
Patch:
@@ -30,6 +30,7 @@
 @SpringBootApplication
 @EnableDiscoveryClient
 @EnableFeignClients
+// Hystrix测试
 // @EnableCircuitBreaker
 public class DiscoveryApplicationA1 {
     public static void main(String[] args) {

File: discovery-plugin-strategy/src/main/java/com/nepxion/discovery/plugin/strategy/constant/StrategyConstant.java
Patch:
@@ -12,5 +12,5 @@
 public class StrategyConstant {
     public static final String SPRING_APPLICATION_STRATEGY_CONTROL_ENABLED = "spring.application.strategy.control.enabled";
     public static final String SPRING_APPLICATION_STRATEGY_ZONE_AVOIDANCE_RULE_ENABLED = "spring.application.strategy.zone.avoidance.rule.enabled";
-    public static final String SPRING_APPLICATION_STRATEGY_HYSTRIX_THREADLOCAL_SUPPORTED = "spring.application.strategy.hystrix.threadlocal.supported";    
+    public static final String SPRING_APPLICATION_STRATEGY_HYSTRIX_THREADLOCAL_SUPPORTED = "spring.application.strategy.hystrix.threadlocal.supported";
 }
\ No newline at end of file

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/context/ServiceStrategyContextHolder.java
Patch:
@@ -25,9 +25,9 @@ public class ServiceStrategyContextHolder {
     public ServletRequestAttributes getRestAttributes() {
         Boolean hystrixThreadlocalSupported = environment.getProperty(StrategyConstant.SPRING_APPLICATION_STRATEGY_HYSTRIX_THREADLOCAL_SUPPORTED, Boolean.class, Boolean.FALSE);
         if (hystrixThreadlocalSupported) {
-            return RestStrategyContext.getCurrentContext().getRequestAttributes();
+            return (ServletRequestAttributes) RestStrategyContext.getCurrentContext().getRequestAttributes();
         } else {
-            return (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
+            return (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
         }
     }
 

File: discovery-plugin-strategy-starter-service/src/main/java/com/nepxion/discovery/plugin/strategy/service/wrapper/DefaultCallableWrapper.java
Patch:
@@ -12,16 +12,16 @@
 
 import java.util.concurrent.Callable;
 
+import org.springframework.web.context.request.RequestAttributes;
 import org.springframework.web.context.request.RequestContextHolder;
-import org.springframework.web.context.request.ServletRequestAttributes;
 
 import com.nepxion.discovery.plugin.strategy.service.context.RestStrategyContext;
 import com.nepxion.discovery.plugin.strategy.wrapper.CallableWrapper;
 
 public class DefaultCallableWrapper implements CallableWrapper {
     @Override
     public <T> Callable<T> wrapCallable(Callable<T> delegate) {
-        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
+        RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();
 
         return new Callable<T>() {
             @Override

File: discovery-springcloud-example-service/src/main/java/com/nepxion/discovery/plugin/example/service/DiscoveryApplicationA1.java
Patch:
@@ -11,6 +11,7 @@
 
 import java.util.Collections;
 
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.builder.SpringApplicationBuilder;
 import org.springframework.cloud.alibaba.sentinel.annotation.SentinelProtect;
@@ -46,7 +47,7 @@ public static void main(String[] args) {
     @Bean
     @LoadBalanced
     @SentinelProtect(blockHandler = "handleException", blockHandlerClass = MySentinelExceptionHandler.class)
-    public RestTemplate restTemplate(RestTemplateStrategyInterceptor restTemplateStrategyInterceptor) {
+    public RestTemplate restTemplate(@Autowired(required = false) RestTemplateStrategyInterceptor restTemplateStrategyInterceptor) {
         RestTemplate restTemplate = new RestTemplate();
         restTemplate.setInterceptors(Collections.singletonList(restTemplateStrategyInterceptor));
 

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/adapter/AbstractPluginAdapter.java
Patch:
@@ -54,7 +54,7 @@ protected String getGroup(String groupKey) {
 
     @Override
     public String getServiceId() {
-        return registration.getServiceId();
+        return registration.getServiceId().toLowerCase();
     }
 
     @Override

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/listener/register/CountFilterRegisterListener.java
Patch:
@@ -28,7 +28,7 @@ public class CountFilterRegisterListener extends AbstractRegisterListener {
 
     @Override
     public void onRegister(Registration registration) {
-        String serviceId = registration.getServiceId();
+        String serviceId = registration.getServiceId().toLowerCase();
         String host = registration.getHost();
         int port = registration.getPort();
 

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/listener/register/HostFilterRegisterListener.java
Patch:
@@ -26,7 +26,7 @@
 public class HostFilterRegisterListener extends AbstractRegisterListener {
     @Override
     public void onRegister(Registration registration) {
-        String serviceId = registration.getServiceId();
+        String serviceId = registration.getServiceId().toLowerCase();
         String host = registration.getHost();
         int port = registration.getPort();
 

File: discovery-springcloud-example-service/src/main/java/com/nepxion/discovery/plugin/example/service/impl/MyRegisterListener.java
Patch:
@@ -16,17 +16,17 @@
 public class MyRegisterListener extends AbstractRegisterListener {
     @Override
     public void onRegister(Registration registration) {
-        // System.out.println("========== Register Listener :: register()被触发, serviceId=" + registration.getServiceId());
+        // System.out.println("========== Register Listener :: register()被触发, serviceId=" + registration.getServiceId().toLowerCase());
     }
 
     @Override
     public void onDeregister(Registration registration) {
-        // System.out.println("========== Register Listener :: deregister()被触发, serviceId=" + registration.getServiceId());
+        // System.out.println("========== Register Listener :: deregister()被触发, serviceId=" + registration.getServiceId().toLowerCase());
     }
 
     @Override
     public void onSetStatus(Registration registration, String status) {
-        // System.out.println("========== Register Listener :: setStatus()被触发, serviceId=" + registration.getServiceId() + ", status=" + status);
+        // System.out.println("========== Register Listener :: setStatus()被触发, serviceId=" + registration.getServiceId().toLowerCase() + ", status=" + status);
     }
 
     @Override

File: discovery-plugin-strategy-extension-gateway/src/main/java/com/nepxion/discovery/plugin/strategy/extension/gateway/impl/VersionDiscoveryEnabledAdapter.java
Patch:
@@ -51,7 +51,7 @@ private boolean applyVersion(Server server, Map<String, String> metadata) {
 
         Map<String, String> versionMap = JsonUtil.fromJson(versionJson, Map.class);
         String versions = versionMap.get(serviceId);
-        if (StringUtils.isEmpty(versions)) {
+        if (versions == null) {
             return true;
         }
 

File: discovery-plugin-strategy-extension-service/src/main/java/com/nepxion/discovery/plugin/strategy/extension/service/impl/VersionDiscoveryEnabledAdapter.java
Patch:
@@ -56,7 +56,7 @@ private boolean applyVersion(Server server, Map<String, String> metadata) {
 
         Map<String, String> versionMap = JsonUtil.fromJson(versionJson, Map.class);
         String versions = versionMap.get(serviceId);
-        if (StringUtils.isEmpty(versions)) {
+        if (versions == null) {
             return true;
         }
 

File: discovery-plugin-strategy-extension-zuul/src/main/java/com/nepxion/discovery/plugin/strategy/extension/zuul/impl/VersionDiscoveryEnabledAdapter.java
Patch:
@@ -51,7 +51,7 @@ private boolean applyVersion(Server server, Map<String, String> metadata) {
 
         Map<String, String> versionMap = JsonUtil.fromJson(versionJson, Map.class);
         String versions = versionMap.get(serviceId);
-        if (StringUtils.isEmpty(versions)) {
+        if (versions == null) {
             return true;
         }
 

File: discovery-springcloud-example-service/src/main/java/com/nepxion/discovery/plugin/example/service/extension/MyDiscoveryEnabledExtension.java
Patch:
@@ -56,7 +56,7 @@ private boolean applyFromHeader(Server server, Map<String, String> metadata) {
         String filterServiceId = "discovery-springcloud-example-c";
         String filterToken = "123";
         if (StringUtils.equals(serviceId, filterServiceId) && StringUtils.isNotEmpty(token) && token.contains(filterToken)) {
-            LOG.info("过滤条件：当serviceId={} && Token含有'{}'的时候，不能被Ribbon负载均衡到", filterToken);
+            LOG.info("过滤条件：当serviceId={} && Token含有'{}'的时候，不能被Ribbon负载均衡到", filterServiceId, filterToken);
 
             return false;
         }

File: discovery-plugin-strategy-extension-service/src/main/java/com/nepxion/discovery/plugin/strategy/extension/service/aop/FeignStrategyInterceptor.java
Patch:
@@ -27,7 +27,7 @@ public class FeignStrategyInterceptor implements RequestInterceptor {
     private String feignHeaders;
 
     public FeignStrategyInterceptor(String feignHeaders) {
-        this.feignHeaders = feignHeaders;
+        this.feignHeaders = feignHeaders.toLowerCase();
 
         LOG.info("------------- Feign Proxy Information -----------");
         LOG.info("Feign interceptor headers are '{}'", feignHeaders);
@@ -52,7 +52,7 @@ public void apply(RequestTemplate requestTemplate) {
             String headerName = headerNames.nextElement();
             String header = request.getHeader(headerName);
 
-            if (feignHeaders.contains(headerName)) {
+            if (feignHeaders.contains(headerName.toLowerCase())) {
                 requestTemplate.header(headerName, header);
             }
         }

File: discovery-console/src/main/java/com/nepxion/discovery/console/configuration/SwaggerConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class SwaggerConfiguration implements WebMvcConfigurer {
     @Value("${swagger.service.version}")
     private String version;
 
-    @Value("${swagger.service.license}")
+    @Value("${swagger.service.license.name}")
     private String license;
 
     @Value("${swagger.service.license.url}")

File: discovery-plugin-admin-center/src/main/java/com/nepxion/discovery/plugin/admincenter/configuration/SwaggerConfiguration.java
Patch:
@@ -41,7 +41,7 @@ public class SwaggerConfiguration implements WebMvcConfigurer {
     @Value("${swagger.service.version}")
     private String version;
 
-    @Value("${swagger.service.license}")
+    @Value("${swagger.service.license.name}")
     private String license;
 
     @Value("${swagger.service.license.url}")

File: discovery-plugin-config-center-extension-nacos/src/main/java/com/nepxion/discovery/plugin/configcenter/extension/nacos/adapter/NacosConfigAdapter.java
Patch:
@@ -11,8 +11,6 @@
 
 import java.util.concurrent.Executor;
 
-import javax.annotation.PostConstruct;
-
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -53,7 +51,7 @@ public String getConfig() throws Exception {
         return configService.getConfig(serviceId, group, timeout);
     }
 
-    @PostConstruct
+    @Override
     public void subscribeConfig() throws Exception {
         String groupKey = pluginContextAware.getGroupKey();
         String group = pluginAdapter.getGroup();

File: discovery-plugin-framework-zookeeper/src/main/java/com/nepxion/discovery/plugin/framework/constant/ZookeeperConstant.java
Patch:
@@ -11,4 +11,6 @@
 
 public class ZookeeperConstant {
     public static final String DISCOVERY_PLUGIN = "Zookeeper Plugin";
+
+    public static final String META_DATA = "spring.cloud.zookeeper.discovery.metadata";
 }
\ No newline at end of file

File: discovery-console/src/main/java/com/nepxion/discovery/console/endpoint/ConsoleEndpoint.java
Patch:
@@ -114,7 +114,7 @@ public ResponseEntity<?> configUpdateSync(@PathVariable(value = "serviceId") @Ap
     @ApiOperation(value = "批量清除服务的动态版本", notes = "根据指定的localVersion清除服务的dynamicVersion。如果输入的localVersion不匹配服务的localVersion，则忽略；如果如果输入的localVersion为空，则直接清除服务的dynamicVersion", response = ResponseEntity.class, httpMethod = "POST")
     @ResponseBody
     @ManagedOperation
-    public ResponseEntity<?> versionClear(@PathVariable(value = "serviceId") @ApiParam(value = "服务名", required = true) String serviceId, @RequestBody @ApiParam(value = "版本号，指localVersion，可以为空") String version) {
+    public ResponseEntity<?> versionClear(@PathVariable(value = "serviceId") @ApiParam(value = "服务名", required = true) String serviceId, @RequestBody(required = false) @ApiParam(value = "版本号，指localVersion，可以为空") String version) {
         return executeVersionClear(serviceId, version);
     }
 

File: discovery-plugin-admin-center/src/main/java/com/nepxion/discovery/plugin/admincenter/endpoint/VersionEndpoint.java
Patch:
@@ -85,7 +85,7 @@ public class VersionEndpoint implements MvcEndpoint {
     @ApiOperation(value = "清除服务的动态版本", notes = "根据指定的localVersion清除服务的dynamicVersion。如果输入的localVersion不匹配服务的localVersion，则忽略；如果如果输入的localVersion为空，则直接清除服务的dynamicVersion", response = ResponseEntity.class, httpMethod = "POST")
     @ResponseBody
     @ManagedOperation
-    public ResponseEntity<?> clear(@RequestBody @ApiParam(value = "版本号，指localVersion，可以为空") String version) {
+    public ResponseEntity<?> clear(@RequestBody(required = false) @ApiParam(value = "版本号，指localVersion，可以为空") String version) {
         Boolean discoveryControlEnabled = pluginContextAware.isDiscoveryControlEnabled();
         if (!discoveryControlEnabled) {
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Discovery control is disabled");

File: discovery-console/src/main/java/com/nepxion/discovery/console/endpoint/ConsoleEndpoint.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.collections.CollectionUtils;
+import org.apache.commons.collections4.CollectionUtils;
 import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: discovery-plugin-framework-consul/src/main/java/com/nepxion/discovery/plugin/framework/configuration/ConsulLoadBalanceConfiguration.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.cloud.consul.discovery.ConsulDiscoveryProperties;
 import org.springframework.cloud.consul.discovery.ConsulRibbonClientConfiguration;
 import org.springframework.context.annotation.Bean;
@@ -37,7 +36,6 @@ public class ConsulLoadBalanceConfiguration {
     private ConsulClient client;
 
     @Bean
-    @ConditionalOnMissingBean
     public ServerList<?> ribbonServerList(IClientConfig config, ConsulDiscoveryProperties properties) {
         ConsulServerListDecorator serverList = new ConsulServerListDecorator(client, properties);
         serverList.initWithNiwsConfig(config);

File: discovery-plugin-framework-eureka/src/main/java/com/nepxion/discovery/plugin/framework/configuration/EurekaLoadBalanceConfiguration.java
Patch:
@@ -14,7 +14,6 @@
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.cloud.netflix.ribbon.PropertiesFactory;
 import org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList;
 import org.springframework.cloud.netflix.ribbon.eureka.EurekaRibbonClientConfiguration;
@@ -47,7 +46,6 @@ public class EurekaLoadBalanceConfiguration {
     private LoadBalanceListenerExecutor loadBalanceListenerExecutor;
 
     @Bean
-    @ConditionalOnMissingBean
     public ServerList<?> ribbonServerList(IClientConfig config, Provider<EurekaClient> eurekaClientProvider) {
         if (this.propertiesFactory.isSet(ServerList.class, serviceId)) {
             return this.propertiesFactory.get(ServerList.class, config, serviceId);

File: discovery-plugin-framework-zookeeper/src/main/java/com/nepxion/discovery/plugin/framework/configuration/ZookeeperLoadBalanceConfiguration.java
Patch:
@@ -11,7 +11,6 @@
 
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.autoconfigure.AutoConfigureAfter;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.cloud.zookeeper.discovery.ZookeeperRibbonClientConfiguration;
 import org.springframework.cloud.zookeeper.serviceregistry.ZookeeperServiceRegistry;
 import org.springframework.context.annotation.Bean;
@@ -36,7 +35,6 @@ public class ZookeeperLoadBalanceConfiguration {
     private ZookeeperServiceRegistry registry;
 
     @Bean
-    @ConditionalOnMissingBean
     public ServerList<?> ribbonServerList(IClientConfig config) {
         @SuppressWarnings("deprecation")
         ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(this.registry.getServiceDiscoveryRef().get());

File: discovery-plugin-framework-consul/src/main/java/com/nepxion/discovery/plugin/framework/constant/ConsulConstant.java
Patch:
@@ -10,5 +10,5 @@
  */
 
 public class ConsulConstant {
-    public static final String METADATA_VERSION = "spring.cloud.consul.discovery.tags.version";
+    public static final String METADATA_VERSION = "spring.cloud.consul.discovery.tags";
 }
\ No newline at end of file

File: discovery-plugin-framework-eureka/src/main/java/com/nepxion/discovery/plugin/framework/adapter/EurekaAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 public class EurekaAdapter implements PluginAdapter {
     @Autowired
-    protected ConfigurableEnvironment environment;
+    private ConfigurableEnvironment environment;
 
     @Override
     public String getIpAddress(Registration registration) {

File: discovery-plugin-framework-zookeeper/src/main/java/com/nepxion/discovery/plugin/framework/adapter/ZookeeperAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 public class ZookeeperAdapter implements PluginAdapter {
     @Autowired
-    protected ConfigurableEnvironment environment;
+    private ConfigurableEnvironment environment;
 
     @Override
     public String getIpAddress(Registration registration) {

File: discovery-plugin-router-center/src/main/java/com/nepxion/discovery/plugin/routercenter/controller/RouterController.java
Patch:
@@ -44,7 +44,7 @@ public class RouterController {
     private PluginAdapter pluginAdapter;
 
     @Autowired
-    protected ConfigurableEnvironment environment;
+    private ConfigurableEnvironment environment;
 
     @Autowired
     private RestTemplate routerRestTemplate;

File: discovery-plugin-framework/src/main/java/com/nepxion/discovery/plugin/framework/controller/PluginRouterController.java
Patch:
@@ -149,7 +149,7 @@ public List<RouteEntity> getRouteEntityList(String routeServiceId, String routeH
             String serviceId = instance.get(PluginConstant.SERVICE_ID).toString().toLowerCase();
             String version = ((Map<String, String>) instance.get(PluginConstant.METADATA)).get(PluginConstant.VERSION);
             String host = instance.get(PluginConstant.HOST).toString();
-            int port = (int) instance.get(PluginConstant.PORT);
+            Integer port = (Integer) instance.get(PluginConstant.PORT);
 
             RouteEntity routeEntity = new RouteEntity();
             routeEntity.setServiceId(serviceId);

