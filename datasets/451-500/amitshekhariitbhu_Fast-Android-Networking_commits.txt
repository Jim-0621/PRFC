File: app/src/main/java/com/networking/ApiTestActivity.java
Patch:
@@ -433,9 +433,11 @@ public void onError(ANError error) {
     }
 
     public void uploadImage(final View view) {
+        final String key = "image";
+        final File file = new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png");
         AndroidNetworking.upload(ApiEndPoint.BASE_URL + ApiEndPoint.UPLOAD_IMAGE)
                 .setPriority(Priority.MEDIUM)
-                .addMultipartFile("image", new File(Environment.getExternalStorageDirectory().getAbsolutePath(), "test.png"))
+                .addMultipartFile(key, file)
                 .setTag(this)
                 .build()
                 .setAnalyticsListener(new AnalyticsListener() {

File: android-networking/src/main/java/com/androidnetworking/widget/ANImageView.java
Patch:
@@ -18,6 +18,7 @@
 package com.androidnetworking.widget;
 
 import android.content.Context;
+import android.support.v7.widget.AppCompatImageView;
 import android.text.TextUtils;
 import android.util.AttributeSet;
 import android.view.ViewGroup;
@@ -29,7 +30,7 @@
 /**
  * Created by amitshekhar on 23/03/16.
  */
-public class ANImageView extends ImageView {
+public class ANImageView extends AppCompatImageView {
 
     private String mUrl;
 
@@ -67,7 +68,7 @@ public void setErrorImageResId(int errorImage) {
     void loadImageIfNecessary(final boolean isInLayoutPass) {
         int width = getWidth();
         int height = getHeight();
-        ScaleType scaleType = getScaleType();
+        ImageView.ScaleType scaleType = getScaleType();
 
         boolean wrapWidth = false, wrapHeight = false;
         if (getLayoutParams() != null) {

File: android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
Patch:
@@ -574,7 +574,7 @@ public void setFuture(Future future) {
 
     public void destroy() {
         mJSONArrayRequestListener = null;
-        mJSONArrayRequestListener = null;
+        mJSONObjectRequestListener = null;
         mStringRequestListener = null;
         mBitmapRequestListener = null;
         mParsedRequestListener = null;

File: android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
Patch:
@@ -574,7 +574,7 @@ public void setFuture(Future future) {
 
     public void destroy() {
         mJSONArrayRequestListener = null;
-        mJSONArrayRequestListener = null;
+        mJSONObjectRequestListener = null;
         mStringRequestListener = null;
         mBitmapRequestListener = null;
         mParsedRequestListener = null;

File: android-networking/src/androidTest/java/com/androidnetworking/GetJSONApiTest.java
Patch:
@@ -424,7 +424,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderGet() throws InterruptedException {
+    public void testHeaderGetRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/GetObjectApiTest.java
Patch:
@@ -408,7 +408,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderGet() throws InterruptedException {
+    public void testHeaderGetRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/GetStringApiTest.java
Patch:
@@ -311,7 +311,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderGet() throws InterruptedException {
+    public void testHeaderGetRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("data"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/MultipartJSONApiTest.java
Patch:
@@ -440,7 +440,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderMultipart() throws InterruptedException {
+    public void testHeaderMultipartRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/MultipartObjectApiTest.java
Patch:
@@ -424,7 +424,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderMultipart() throws InterruptedException {
+    public void testHeaderMultipartRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/MultipartStringApiTest.java
Patch:
@@ -332,7 +332,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderMultipart() throws InterruptedException {
+    public void testHeaderMultipartRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("data"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/PostJSONApiTest.java
Patch:
@@ -452,7 +452,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderPost() throws InterruptedException {
+    public void testHeaderPostRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/PostObjectApiTest.java
Patch:
@@ -436,7 +436,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderPost() throws InterruptedException {
+    public void testHeaderPostRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("{\"firstName\":\"Amit\", \"lastName\":\"Shekhar\"}"));
 

File: android-networking/src/androidTest/java/com/androidnetworking/PostStringApiTest.java
Patch:
@@ -341,7 +341,7 @@ public void onError(ANError anError) {
         assertEquals(404, errorCodeRef.get().intValue());
     }
 
-    public void testHeaderPost() throws InterruptedException {
+    public void testHeaderPostRequest() throws InterruptedException {
 
         server.enqueue(new MockResponse().setBody("data"));
 

File: app/src/main/java/com/networking/ApiTestActivity.java
Patch:
@@ -37,7 +37,6 @@
 import com.androidnetworking.interfaces.OkHttpResponseListener;
 import com.androidnetworking.interfaces.ParsedRequestListener;
 import com.androidnetworking.interfaces.UploadProgressListener;
-import com.google.gson.reflect.TypeToken;
 import com.networking.model.User;
 import com.networking.utils.Utils;
 
@@ -1013,8 +1012,7 @@ public void onReceived(long timeTakenInMillis, long bytesSent, long bytesReceive
                                 Log.d(TAG, " isFromCache : " + isFromCache);
                             }
                         });
-                ANResponse<List<User>> responseTwo = requestTwo.executeForParsed(new TypeToken<List<User>>() {
-                });
+                ANResponse<List<User>> responseTwo = requestTwo.executeForObjectList(User.class);
 
                 if (responseTwo.isSuccess()) {
                     Log.d(TAG, "checkSynchronousCall : response success");

File: android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java
Patch:
@@ -66,6 +66,4 @@ public interface RequestBuilder {
 
     RequestBuilder setUserAgent(String userAgent);
 
-    RequestBuilder setErrorBodyObjectClass(Class errorBodyObjectClass);
-
 }

File: android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java
Patch:
@@ -66,4 +66,6 @@ public interface RequestBuilder {
 
     RequestBuilder setUserAgent(String userAgent);
 
+    RequestBuilder setErrorBodyObjectClass(Class errorBodyObjectClass);
+
 }

File: android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
Patch:
@@ -820,9 +820,6 @@ public RequestBody getMultiPartRequestBody() {
                 builder.addPart(Headers.of("Content-Disposition",
                         "form-data; name=\"" + entry.getKey() + "\"; filename=\"" + fileName + "\""),
                         fileBody);
-                if (customMediaType != null) {
-                    builder.setType(customMediaType);
-                }
             }
         } catch (Exception e) {
             e.printStackTrace();

File: android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
Patch:
@@ -698,7 +698,9 @@ private void deliverErrorResponse(ANError anError) {
             mBitmapRequestListener.onError(anError);
         } else if (mParsedRequestListener != null) {
             mParsedRequestListener.onError(anError);
-        } else if (mOkHttpResponseAndJSONObjectRequestListener != null) {
+        } else if (mOkHttpResponseListener != null) {
+            mOkHttpResponseListener.onError(anError);
+        }else if (mOkHttpResponseAndJSONObjectRequestListener != null) {
             mOkHttpResponseAndJSONObjectRequestListener.onError(anError);
         } else if (mOkHttpResponseAndJSONArrayRequestListener != null) {
             mOkHttpResponseAndJSONArrayRequestListener.onError(anError);

File: android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
Patch:
@@ -708,6 +708,8 @@ private void deliverErrorResponse(ANError anError) {
             mOkHttpResponseAndBitmapRequestListener.onError(anError);
         } else if (mOkHttpResponseAndParsedRequestListener != null) {
             mOkHttpResponseAndParsedRequestListener.onError(anError);
+        }else if (mDownloadListener != null) {
+            mDownloadListener.onError(anError);
         }
     }
 

File: android-networking/src/main/java/com/androidnetworking/common/RESPONSE.java
Patch:
@@ -24,6 +24,7 @@ public enum RESPONSE {
     STRING,
     JSON_OBJECT,
     JSON_ARRAY,
+    OK_HTTP_RESPONSE,
     BITMAP,
     PREFETCH,
     PARSED

File: android-networking/src/main/java/com/androidnetworking/common/RESPONSE.java
Patch:
@@ -25,5 +25,6 @@ public enum RESPONSE {
     JSON_OBJECT,
     JSON_ARRAY,
     BITMAP,
-    PREFETCH
+    PREFETCH,
+    PARSED
 }

File: android-networking/src/main/java/com/androidnetworking/utils/Utils.java
Patch:
@@ -65,7 +65,7 @@ public static String getMimeType(String path) {
     public static ANResponse<Bitmap> decodeBitmap(ANData response, int maxWidth, int maxHeight, Bitmap.Config decodeConfig, ImageView.ScaleType scaleType) {
         byte[] data = new byte[0];
         try {
-            data = Okio.buffer(response.source).readByteArray();
+            data = Okio.buffer(response.body.source()).readByteArray();
         } catch (IOException e) {
             e.printStackTrace();
         }

File: android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
Patch:
@@ -258,7 +258,7 @@ public static void evictAllBitmap() {
      * @param userAgent The userAgent
      */
     public static void setUserAgent(String userAgent) {
-        ANRequestQueue.getInstance().setUserAgent(userAgent);
+        InternalNetworking.setUserAgent(userAgent);
     }
 
     /**

File: android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
Patch:
@@ -31,4 +31,5 @@ public final class ANConstants {
     public static final String NETWORK_ON_MAIN_THREAD_ERROR = "networkOnMainThreadError";
     public static final String PREFETCH = "prefetch";
     public static final String ANDROID_NETWORKING = "AndroidNetworking";
+    public static final String USER_AGENT = "User-Agent";
 }

File: android-networking/src/main/java/com/androidnetworking/common/ANRequest.java
Patch:
@@ -647,7 +647,7 @@ public GetRequestBuilder(String url) {
             this.mMethod = Method.GET;
         }
 
-        private GetRequestBuilder(String url, int method) {
+        public GetRequestBuilder(String url, int method) {
             this.mUrl = url;
             this.mMethod = method;
         }

File: android-networking/src/main/java/com/androidnetworking/common/ConnectionClassManager.java
Patch:
@@ -43,7 +43,9 @@ public class ConnectionClassManager {
     public static ConnectionClassManager getInstance() {
         if (sInstance == null) {
             synchronized (ConnectionClassManager.class) {
-                sInstance = new ConnectionClassManager();
+                if (sInstance == null) {
+                    sInstance = new ConnectionClassManager();
+                }
             }
         }
         return sInstance;

File: android-networking/src/main/java/com/androidnetworking/internal/ANImageLoader.java
Patch:
@@ -67,7 +67,9 @@ public static void initialize() {
     public static ANImageLoader getInstance() {
         if (sInstance == null) {
             synchronized (ANImageLoader.class) {
-                sInstance = new ANImageLoader(new LruBitmapCache(cacheSize));
+                if (sInstance == null) {
+                    sInstance = new ANImageLoader(new LruBitmapCache(cacheSize));
+                }
             }
         }
         return sInstance;

File: android-networking/src/main/java/com/androidnetworking/common/ANConstants.java
Patch:
@@ -28,6 +28,7 @@ public final class ANConstants {
     public static final String RESPONSE_FROM_SERVER_ERROR = "responseFromServerError";
     public static final String REQUEST_CANCELLED_ERROR = "requestCancelledError";
     public static final String PARSE_ERROR = "parseError";
+    public static final String NETWORK_ON_MAIN_THREAD_ERROR = "networkOnMainThreadError";
     public static final String PREFETCH = "prefetch";
     public static final String ANDROID_NETWORKING = "AndroidNetworking";
 }

File: android-networking/src/main/java/com/androidnetworking/common/AndroidNetworkingRequest.java
Patch:
@@ -413,7 +413,7 @@ public AndroidNetworkingResponse parseResponse(AndroidNetworkingData data) {
     public AndroidNetworkingError parseNetworkError(AndroidNetworkingError error) {
         try {
             if (error.getData() != null && error.getData().source != null) {
-                error.setContent(Okio.buffer(error.getData().source).readUtf8());
+                error.setErrorBody(Okio.buffer(error.getData().source).readUtf8());
             }
         } catch (Exception e) {
             e.printStackTrace();

File: android-networking/src/main/java/com/androidnetworking/common/AndroidNetworkingResponse.java
Patch:
@@ -28,7 +28,7 @@ private AndroidNetworkingResponse(AndroidNetworkingError error) {
         this.mResult = null;
         this.mError = error;
         this.mError.setErrorCode(0);
-        this.mError.setError(Constants.PARSE_ERROR);
+        this.mError.setErrorDetail(Constants.PARSE_ERROR);
     }
 
     public T getResult() {

File: android-networking/src/main/java/com/androidnetworking/common/Constants.java
Patch:
@@ -7,7 +7,7 @@ public final class Constants {
     public static final int MAX_CACHE_SIZE = 10 * 1024 * 1024;
     public static final String CACHE_DIR_NAME = "cache_an";
     public static final String CONNECTION_ERROR = "connectionError";
-    public static final String ERROR_RESPONSE_FROM_SERVER = "errorResponseFromServer";
-    public static final String ERROR_REQUEST_CANCELLED = "errorRequestCancelled";
+    public static final String RESPONSE_FROM_SERVER_ERROR = "responseFromServerError";
+    public static final String REQUEST_CANCELLED_ERROR = "requestCancelledError";
     public static final String PARSE_ERROR = "parseError";
 }

File: android-networking/src/main/java/com/androidnetworking/common/AndroidNetworkingRequest.java
Patch:
@@ -425,6 +425,7 @@ public synchronized void deliverError(AndroidNetworkingError error) {
         if (!isDelivered) {
             if (isCancelled) {
                 error.setCancellationMessageInError();
+                error.setErrorCode(0);
             }
             if (mJSONObjectRequestListener != null) {
                 mJSONObjectRequestListener.onError(error);
@@ -480,6 +481,7 @@ public void run() {
         } else {
             AndroidNetworkingError error = new AndroidNetworkingError();
             error.setCancellationMessageInError();
+            error.setErrorCode(0);
             if (mJSONObjectRequestListener != null) {
                 mJSONObjectRequestListener.onError(error);
             } else if (mJSONArrayRequestListener != null) {

File: android-networking/src/main/java/com/androidnetworking/common/AndroidNetworkingResponse.java
Patch:
@@ -27,6 +27,7 @@ private AndroidNetworkingResponse(T result) {
     private AndroidNetworkingResponse(AndroidNetworkingError error) {
         this.mResult = null;
         this.mError = error;
+        this.mError.setErrorCode(0);
         this.mError.setError(Constants.PARSE_ERROR);
     }
 

File: app/src/main/java/com/networking/MainActivity.java
Patch:
@@ -58,7 +58,7 @@ public void onResponse(JSONArray response) {
 
                         @Override
                         public void onError(AndroidNetworkingError error) {
-                            if (error.hasErrorFromServer()) {
+                            if (error.getErrorCode() != 0) {
                                 Log.d(TAG, "onError hasErrorFromServer : " + error.getContent());
                             } else {
                                 Log.d(TAG, "onError : " + error.getError());
@@ -79,7 +79,7 @@ public void onResponse(JSONObject response) {
 
                         @Override
                         public void onError(AndroidNetworkingError error) {
-                            if (error.hasErrorFromServer()) {
+                            if (error.getErrorCode() != 0) {
                                 Log.d(TAG, "onError hasErrorFromServer : " + error.getContent());
                             } else {
                                 Log.d(TAG, "onError : " + error.getError());
@@ -112,7 +112,7 @@ public void onResponse(Bitmap response) {
 
                     @Override
                     public void onError(AndroidNetworkingError error) {
-                        if (error.hasErrorFromServer()) {
+                        if (error.getErrorCode() != 0) {
                             Log.d(TAG, "onError hasErrorFromServer : " + error.getContent());
                         } else {
                             Log.d(TAG, "onError : " + error.getError());

File: android-networking/src/main/java/com/androidnetworking/runnables/DataHunter.java
Patch:
@@ -62,6 +62,7 @@ private void goForSimpleRequest() {
                 AndroidNetworkingError error = new AndroidNetworkingError(data);
                 error = request.parseNetworkError(error);
                 error.setHasErrorFromServer();
+                error.setErrorCode(data.code);
                 deliverError(request, error);
                 return;
             }
@@ -100,6 +101,7 @@ private void goForDownloadRequest() {
                 AndroidNetworkingError error = new AndroidNetworkingError();
                 error = request.parseNetworkError(error);
                 error.setHasErrorFromServer();
+                error.setErrorCode(data.code);
                 deliverError(request, error);
             }
         } catch (AndroidNetworkingError se) {
@@ -124,6 +126,7 @@ private void goForUploadRequest() {
                 AndroidNetworkingError error = new AndroidNetworkingError(data);
                 error = request.parseNetworkError(error);
                 error.setHasErrorFromServer();
+                error.setErrorCode(data.code);
                 deliverError(request, error);
                 return;
             }

File: android-networking/src/main/java/com/androidnetworking/common/AndroidNetworkingRequest.java
Patch:
@@ -9,8 +9,6 @@
 import com.androidnetworking.interfaces.BitmapRequestListener;
 import com.androidnetworking.interfaces.DownloadListener;
 import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
 import com.androidnetworking.interfaces.StringRequestListener;
 import com.androidnetworking.interfaces.UploadProgressListener;
 import com.androidnetworking.internal.AndroidNetworkingRequestQueue;

File: app/src/main/java/com/networking/ApiTestActivity.java
Patch:
@@ -12,8 +12,6 @@
 import com.androidnetworking.error.AndroidNetworkingError;
 import com.androidnetworking.interfaces.DownloadListener;
 import com.androidnetworking.interfaces.DownloadProgressListener;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
 import com.androidnetworking.interfaces.UploadProgressListener;
 import com.networking.utils.Utils;
 

File: app/src/main/java/com/networking/MainActivity.java
Patch:
@@ -12,8 +12,6 @@
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.error.AndroidNetworkingError;
 import com.androidnetworking.interfaces.BitmapRequestListener;
-import com.androidnetworking.interfaces.JSONArrayRequestListener;
-import com.androidnetworking.interfaces.JSONObjectRequestListener;
 import com.androidnetworking.internal.AndroidNetworkingImageLoader;
 import com.androidnetworking.widget.GreatImageView;
 import com.networking.provider.Images;

File: android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java
Patch:
@@ -1,6 +1,7 @@
 package com.androidnetworking.common;
 
 import java.util.HashMap;
+import java.util.concurrent.Executor;
 import java.util.concurrent.TimeUnit;
 
 /**
@@ -32,4 +33,6 @@ public interface RequestBuilder {
 
     RequestBuilder setMaxStaleCacheControl(int maxStale, TimeUnit timeUnit);
 
+    RequestBuilder setExecutor(Executor executor);
+
 }

File: android-networking/src/main/java/com/androidnetworking/common/RequestBuilder.java
Patch:
@@ -7,8 +7,6 @@ public interface RequestBuilder {
 
     RequestBuilder setPriority(Priority priority);
 
-    RequestBuilder setUrl(String url);
-
     RequestBuilder setTag(Object tag);
 
     RequestBuilder addHeaders(String key, String value);

File: android-networking/src/main/java/com/androidnetworking/common/AndroidNetworkingResponse.java
Patch:
@@ -27,6 +27,7 @@ private AndroidNetworkingResponse(T result) {
     private AndroidNetworkingResponse(AndroidNetworkingError error) {
         this.mResult = null;
         this.mError = error;
+        this.mError.setError(Constants.PARSE_ERROR);
     }
 
     public T getResult() {

File: app/src/main/java/com/networking/MainActivity.java
Patch:
@@ -40,6 +40,8 @@ protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.activity_main);
         imageView = (ImageView) findViewById(R.id.imageView);
         greatImageView = (GreatImageView) findViewById(R.id.greatImageView);
+        greatImageView.setDefaultImageResId(R.drawable.ic_toys_black_24dp);
+        greatImageView.setErrorImageResId(R.drawable.ic_error_outline_black_24dp);
         greatImageView.setImageUrl(Images.imageThumbUrls[0]);
     }
 
@@ -140,7 +142,7 @@ public void onError(AndroidNetworkingError error) {
 
     public void loadImageFromImageLoader(View view) {
         AndroidNetworkingImageLoader.getInstance().get(URL_IMAGE_LOADER, AndroidNetworkingImageLoader.getImageListener(imageView,
-                R.mipmap.ic_launcher, R.mipmap.ic_launcher));
+                R.drawable.ic_toys_black_24dp, R.drawable.ic_error_outline_black_24dp));
     }
 
     public void startGridActivity(View view) {

File: app/src/main/java/com/networking/fragments/ImageGridFragment.java
Patch:
@@ -183,7 +183,8 @@ public View getView(int position, View convertView, ViewGroup container) {
             if (imageView.getLayoutParams().height != mItemHeight) {
                 imageView.setLayoutParams(mImageViewLayoutParams);
             }
-            imageView.setDefaultImageResId(R.mipmap.ic_launcher);
+            imageView.setDefaultImageResId(R.drawable.ic_toys_black_24dp);
+            imageView.setErrorImageResId(R.drawable.ic_error_outline_black_24dp);
             imageView.setImageUrl(Images.imageThumbUrls[position - mNumColumns]);
 
             return imageView;

File: app/src/main/java/com/networking/MainActivity.java
Patch:
@@ -147,4 +147,7 @@ public void startGridActivity(View view) {
         startActivity(new Intent(MainActivity.this, ImageGridActivity.class));
     }
 
+    public void startApiTestActivity(View view) {
+        startActivity(new Intent(MainActivity.this, ApiTestActivity.class));
+    }
 }

File: app/src/main/java/com/networking/MyApplication.java
Patch:
@@ -12,9 +12,6 @@ public class MyApplication extends Application {
     private static MyApplication appInstance = null;
 
     public static MyApplication getInstance() {
-        if (appInstance == null) {
-            appInstance = new MyApplication();
-        }
         return appInstance;
     }
 
@@ -23,5 +20,8 @@ public void onCreate() {
         super.onCreate();
         appInstance = this;
         AndroidNetworking.initialize(getApplicationContext());
+        //For testing purpose only: network interceptor : enable it only for non-images request checking
+//        Stetho.initializeWithDefaults(getApplicationContext());
+//        AndroidNetworkingOkHttp.addNetworkInterceptor(new StethoInterceptor());
     }
 }

File: android-networking/src/main/java/com/androidnetworking/AndroidNetworking.java
Patch:
@@ -3,6 +3,7 @@
 import android.content.Context;
 
 import com.androidnetworking.internal.AndroidNetworkingImageLoader;
+import com.androidnetworking.internal.AndroidNetworkingOkHttp;
 import com.androidnetworking.internal.AndroidNetworkingRequestQueue;
 
 /**

File: android-networking/src/main/java/com/androidnetworking/requests/AndroidNetworkingArrayRequest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.androidnetworking.common.AndroidNetworkingData;
 import com.androidnetworking.common.AndroidNetworkingResponse;
+import com.androidnetworking.common.MethodRes;
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.error.AndroidNetworkingError;
 
@@ -17,7 +18,6 @@
  */
 public class AndroidNetworkingArrayRequest extends AndroidNetworkingRequest<JSONArray> {
 
-
     public AndroidNetworkingArrayRequest(@MethodRes int method, String url, Priority priority, Object tag, AndroidNetworkingResponse.SuccessListener<JSONArray> successListener, AndroidNetworkingResponse.ErrorListener errorListener) {
         super(method, url, priority, tag, successListener, errorListener);
     }

File: android-networking/src/main/java/com/androidnetworking/requests/AndroidNetworkingImageRequest.java
Patch:
@@ -6,6 +6,7 @@
 
 import com.androidnetworking.common.AndroidNetworkingData;
 import com.androidnetworking.common.AndroidNetworkingResponse;
+import com.androidnetworking.common.Method;
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.error.AndroidNetworkingError;
 

File: android-networking/src/main/java/com/androidnetworking/requests/AndroidNetworkingObjectRequest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.androidnetworking.common.AndroidNetworkingData;
 import com.androidnetworking.common.AndroidNetworkingResponse;
+import com.androidnetworking.common.MethodRes;
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.error.AndroidNetworkingError;
 

File: android-networking/src/main/java/com/androidnetworking/requests/AndroidNetworkingRawBytesRequest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.androidnetworking.common.AndroidNetworkingData;
 import com.androidnetworking.common.AndroidNetworkingResponse;
+import com.androidnetworking.common.MethodRes;
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.error.AndroidNetworkingError;
 

File: android-networking/src/main/java/com/androidnetworking/requests/AndroidNetworkingStringRequest.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.androidnetworking.common.AndroidNetworkingData;
 import com.androidnetworking.common.AndroidNetworkingResponse;
+import com.androidnetworking.common.MethodRes;
 import com.androidnetworking.common.Priority;
 import com.androidnetworking.error.AndroidNetworkingError;
 

