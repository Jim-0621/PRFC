File: disconf-core/src/main/java/com/baidu/disconf/core/common/utils/ClassLoaderUtil.java
Patch:
@@ -39,7 +39,8 @@ private ClassLoaderUtil() {
 
             java.net.URL url = loader.getResource("");
             // get class path
-            classPath = url.getPath();
+            File f=new File(url.toURI());
+            classPath = f.getAbsolutePath();
             classPath = URLDecoder.decode(classPath, "utf-8");
 
             // 如果是jar包内的，则返回当前路径

File: disconf-client/src/main/java/com/baidu/disconf/client/addons/properties/ReloadingPropertyPlaceholderConfigurer.java
Patch:
@@ -84,7 +84,7 @@ protected String parseStringValue(String strVal, Properties props, Set visitedPl
                     }
                     addDependency(dynamic, placeholder);
                 } else {
-                    logger.warn("dynamic property outside bean property value - ignored: " + strVal);
+                    logger.debug("dynamic property outside bean property value - ignored: " + strVal);
                 }
                 startIndex = endIndex - this.placeholderPrefix.length() + this.placeholderPrefix.length() +
                         this.placeholderSuffix.length();

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerFileMgrImpl.java
Patch:
@@ -105,7 +105,8 @@ private static DisconfCenterFile transformScanFile(Class<?> disconfFileClass, Se
         //
         // disConfCommonModel
         DisConfCommonModel disConfCommonModel =
-                makeDisConfCommonModel(disconfFileAnnotation.env(), disconfFileAnnotation.version());
+                makeDisConfCommonModel(disconfFileAnnotation.app(), disconfFileAnnotation.env(), disconfFileAnnotation
+                        .version());
         disconfCenterFile.setDisConfCommonModel(disConfCommonModel);
 
         // Remote URL

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerItemMgrImpl.java
Patch:
@@ -122,7 +122,8 @@ private static DisconfCenterItem transformScanItem(Method method) {
 
         //
         // disConfCommonModel
-        DisConfCommonModel disConfCommonModel = makeDisConfCommonModel(disconfItem.env(), disconfItem.version());
+        DisConfCommonModel disConfCommonModel = makeDisConfCommonModel(disconfItem.app(), disconfItem.env(),
+                disconfItem.version());
         disconfCenterItem.setDisConfCommonModel(disConfCommonModel);
 
         // Disconf-web url

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerNonAnnotationFileMgrImpl.java
Patch:
@@ -89,7 +89,7 @@ public static DisconfCenterBaseModel getDisconfCenterFile(String fileName) {
 
         //
         // disConfCommonModel
-        DisConfCommonModel disConfCommonModel = makeDisConfCommonModel("", "");
+        DisConfCommonModel disConfCommonModel = makeDisConfCommonModel("", "", "");
         disconfCenterFile.setDisConfCommonModel(disConfCommonModel);
 
         // Remote URL

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigNewController.java
Patch:
@@ -17,7 +17,6 @@
 import com.baidu.disconf.web.service.config.form.ConfNewForm;
 import com.baidu.disconf.web.service.config.form.ConfNewItemForm;
 import com.baidu.disconf.web.service.config.service.ConfigMgr;
-import com.baidu.disconf.web.utils.MyStringUtils;
 import com.baidu.disconf.web.web.config.validator.ConfigValidator;
 import com.baidu.disconf.web.web.config.validator.FileUploadValidator;
 import com.baidu.dsp.common.constant.WebConstants;
@@ -93,7 +92,7 @@ public JsonObjectBase updateFile(@Valid ConfNewForm confNewForm, @RequestParam("
         String fileContent = "";
         try {
 
-            fileContent = MyStringUtils.multipartFileToString(file);
+            fileContent = new String(file.getBytes(), "UTF-8");
             LOG.info("receive file: " + fileContent);
 
         } catch (Exception e) {

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigUpdateController.java
Patch:
@@ -2,7 +2,6 @@
 
 import javax.validation.constraints.NotNull;
 
-import com.baidu.disconf.web.utils.MyStringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -102,7 +101,7 @@ public JsonObjectBase updateFile(@PathVariable long configId, @RequestParam("myf
         String emailNotification = "";
         try {
 
-            String str = MyStringUtils.multipartFileToString(file);
+            String str = new String(file.getBytes(), "UTF-8");
             LOG.info("receive file: " + str);
 
             emailNotification = configMgr.updateItemValue(configId, str);

File: disconf-client/src/main/java/com/baidu/disconf/client/common/model/DisconfCenterFile.java
Patch:
@@ -41,6 +41,7 @@ public class DisconfCenterFile extends DisconfCenterBaseModel {
     // 文件名
     private String fileName;
 
+    // 复制到指定的路径下
     private String copy2TargetDirPath;
 
     // 文件类型

File: disconf-core/src/main/java/com/baidu/disconf/core/common/path/DisconfWebPathMgr.java
Patch:
@@ -1,6 +1,7 @@
 package com.baidu.disconf.core.common.path;
 
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 import com.baidu.disconf.core.common.constants.Constants;
@@ -64,7 +65,7 @@ public static String getRemoteUrlParameter(String urlPrefix, String app, String
      */
     private static Map<String, String> getConfServerBasePathMap(String app, String version, String env, String key) {
 
-        Map<String, String> parameterMap = new HashMap<String, String>();
+        Map<String, String> parameterMap = new LinkedHashMap<String, String>();
 
         parameterMap.put(Constants.VERSION, version);
         parameterMap.put(Constants.APP, app);

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigNewController.java
Patch:
@@ -145,4 +145,4 @@ public JsonObjectBase updateFileWithText(@Valid ConfNewForm confNewForm, @NotNul
 
         return buildSuccess("创建成功");
     }
-}
\ No newline at end of file
+}

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigNewController.java
Patch:
@@ -93,7 +93,7 @@ public JsonObjectBase updateFile(@Valid ConfNewForm confNewForm, @RequestParam("
         String fileContent = "";
         try {
 
-            String str = MyStringUtils.multipartFileToString(file);
+            fileContent = MyStringUtils.multipartFileToString(file);
             LOG.info("receive file: " + fileContent);
 
         } catch (Exception e) {
@@ -145,4 +145,4 @@ public JsonObjectBase updateFileWithText(@Valid ConfNewForm confNewForm, @NotNul
 
         return buildSuccess("创建成功");
     }
-}
\ No newline at end of file
+}

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/service/impl/ConfigMgrImpl.java
Patch:
@@ -113,7 +113,7 @@ public List<String> getVersionListByAppEnv(Long appId, Long envId) {
     public List<File> getDisconfFileList(ConfListForm confListForm) {
 
         List<Config> configList =
-                configDao.getConfigList(confListForm.getAppId(), confListForm.getEnvId(), confListForm.getVersion());
+                configDao.getConfigList(confListForm.getAppId(), confListForm.getEnvId(), confListForm.getVersion(),true);
 
         // 时间作为当前文件夹
         String curTime = DateUtils.format(new Date(), DataFormatConstants.COMMON_TIME_FORMAT);

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigNewController.java
Patch:
@@ -3,6 +3,7 @@
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 
+import com.baidu.disconf.web.utils.MyStringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -92,7 +93,7 @@ public JsonObjectBase updateFile(@Valid ConfNewForm confNewForm, @RequestParam("
         String fileContent = "";
         try {
 
-            fileContent = new String(file.getBytes(), "UTF-8");
+            String str = MyStringUtils.multipartFileToString(file);
             LOG.info("receive file: " + fileContent);
 
         } catch (Exception e) {

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigUpdateController.java
Patch:
@@ -2,6 +2,7 @@
 
 import javax.validation.constraints.NotNull;
 
+import com.baidu.disconf.web.utils.MyStringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -101,7 +102,7 @@ public JsonObjectBase updateFile(@PathVariable long configId, @RequestParam("myf
         String emailNotification = "";
         try {
 
-            String str = new String(file.getBytes(), "UTF-8");
+            String str = MyStringUtils.multipartFileToString(file);
             LOG.info("receive file: " + str);
 
             emailNotification = configMgr.updateItemValue(configId, str);

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigNewController.java
Patch:
@@ -3,6 +3,7 @@
 import javax.validation.Valid;
 import javax.validation.constraints.NotNull;
 
+import com.baidu.disconf.web.utils.MyStringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -92,7 +93,7 @@ public JsonObjectBase updateFile(@Valid ConfNewForm confNewForm, @RequestParam("
         String fileContent = "";
         try {
 
-            fileContent = new String(file.getBytes(), "UTF-8");
+            String str = MyStringUtils.multipartFileToString(file);
             LOG.info("receive file: " + fileContent);
 
         } catch (Exception e) {

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigUpdateController.java
Patch:
@@ -2,6 +2,7 @@
 
 import javax.validation.constraints.NotNull;
 
+import com.baidu.disconf.web.utils.MyStringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -101,7 +102,7 @@ public JsonObjectBase updateFile(@PathVariable long configId, @RequestParam("myf
         String emailNotification = "";
         try {
 
-            String str = new String(file.getBytes(), "UTF-8");
+            String str = MyStringUtils.multipartFileToString(file);
             LOG.info("receive file: " + str);
 
             emailNotification = configMgr.updateItemValue(configId, str);

File: disconf-client/src/main/java/com/baidu/disconf/client/support/utils/MethodUtils.java
Patch:
@@ -70,8 +70,7 @@ public static Method getSetterMethodFromField(Class<?> curClass, Field field) {
 
         Set<Method> methods = ClassUtils.getAllMethod(curClass);
         for (Method method : methods) {
-            if (method.getName().toLowerCase().equals("set" + fieldName) || method.getName().toLowerCase().equals("is" +
-                    fieldName)) {
+            if (method.getName().toLowerCase().equals("set" + fieldName)) {
                 return method;
             }
         }

File: disconf-client/src/main/java/com/baidu/disconf/client/common/constants/SupportFileTypeEnum.java
Patch:
@@ -1,7 +1,7 @@
 package com.baidu.disconf.client.common.constants;
 
 import org.apache.commons.io.FilenameUtils;
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 /**
  * 支持的文件后缀类型

File: disconf-client/src/main/java/com/baidu/disconf/client/config/inner/DisInnerConfigHelper.java
Patch:
@@ -4,7 +4,7 @@
 import java.util.List;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: disconf-client/src/main/java/com/baidu/disconf/client/store/inner/DisconfCenterStore.java
Patch:
@@ -70,8 +70,8 @@ public void storeOneFile(DisconfCenterBaseModel disconfCenterBaseModel) {
 
         if (confFileMap.containsKey(fileName)) {
 
-            LOGGER.error("There are two same fileName!!!! " + "first: " + confFileMap.get(fileName).toString() +
-                    ", Second: " + disconfCenterFile.toString());
+            LOGGER.error("There are two same fileName key!!!! " + "first: " + confFileMap.get(fileName).toString() +
+                    "\n, Second: " + disconfCenterFile.toString());
         } else {
             confFileMap.put(fileName, disconfCenterFile);
         }
@@ -88,7 +88,7 @@ public void storeOneItem(DisconfCenterBaseModel disconfCenterBaseModel) {
 
         if (confItemMap.containsKey(key)) {
 
-            LOGGER.error("There are two same fileName!!!! " + "first: " + confItemMap.get(key).getClass().toString() +
+            LOGGER.error("There are two same item key!!!! " + "first: " + confItemMap.get(key).getClass().toString() +
                     ", Second: " + disconfCenterItem.getClass().toString());
         } else {
             confItemMap.put(key, disconfCenterItem);

File: disconf-client/src/main/java/com/baidu/disconf/client/support/utils/MethodUtils.java
Patch:
@@ -4,7 +4,7 @@
 import java.lang.reflect.Method;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/inner/PrintZookeeperTree.java
Patch:
@@ -3,7 +3,7 @@
 import java.nio.charset.Charset;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.data.Stat;
 import org.slf4j.Logger;

File: disconf-web/src/main/java/com/baidu/disconf/web/innerapi/zookeeper/impl/ZookeeperDriverImpl.java
Patch:
@@ -8,7 +8,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.ZooKeeper;
 import org.apache.zookeeper.data.Stat;

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/service/impl/ConfigMgrImpl.java
Patch:
@@ -11,7 +11,7 @@
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.io.IOUtils;
-import org.apache.commons.lang.StringEscapeUtils;
+import org.apache.commons.lang3.StringEscapeUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -461,10 +461,10 @@ private String getConfigUrlHtml(Config config) {
      */
     private String getNewValue(String newValue, String identify, String htmlClick) {
 
-        String contentString = StringEscapeUtils.escapeHtml(identify) + "<br/>" + htmlClick + "<br/><br/> ";
+        String contentString = StringEscapeUtils.escapeHtml4(identify) + "<br/>" + htmlClick + "<br/><br/> ";
 
         String data = "<br/><br/><br/><span style='color:#FF0000'>New value:</span><br/>";
-        contentString = contentString + data + StringEscapeUtils.escapeHtml(newValue);
+        contentString = contentString + data + StringEscapeUtils.escapeHtml4(newValue);
 
         return contentString;
     }

File: disconf-web/src/main/java/com/baidu/disconf/web/service/zookeeper/service/impl/ZkDeployMgrImpl.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/validator/ConfigValidator.java
Patch:
@@ -1,6 +1,6 @@
 package com.baidu.disconf.web.web.config.validator;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 
@@ -183,7 +183,7 @@ public void validateNew(ConfNewItemForm confNewForm, DisConfigTypeEnum disConfig
         // key
         //
         Config config = configFetchMgr.getConfByParameter(app.getId(), env.getId(), confNewForm.getVersion(),
-                                                             confNewForm.getKey(), disConfigTypeEnum);
+                confNewForm.getKey(), disConfigTypeEnum);
         if (config != null) {
             throw new FieldException(ConfNewItemForm.KEY, "key.exist", null);
         }

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/validator/ConfigValidator4Fetch.java
Patch:
@@ -1,8 +1,8 @@
 package com.baidu.disconf.web.web.config.validator;
 
-import org.apache.commons.lang.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
 
 import com.baidu.disconf.web.service.app.bo.App;
 import com.baidu.disconf.web.service.app.service.AppMgr;

File: disconf-web/src/main/java/com/baidu/disconf/web/web/zookeeper/validator/ZkDeployValidator.java
Patch:
@@ -1,6 +1,6 @@
 package com.baidu.disconf.web.web.zookeeper.validator;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Service;
 

File: disconf-web/src/main/java/com/baidu/dsp/common/utils/DaoUtils.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.baidu.dsp.common.form.RequestListBase.Page;
 import com.baidu.ub.common.db.DaoPage;

File: disconf-web/src/main/java/com/baidu/dsp/common/utils/ListUtil.java
Patch:
@@ -4,8 +4,8 @@
 import java.util.List;
 import java.util.Map;
 
-import org.apache.commons.lang.ArrayUtils;
-import org.apache.commons.lang.ObjectUtils;
+import org.apache.commons.lang3.ArrayUtils;
+import org.apache.commons.lang3.ObjectUtils;
 
 import com.baidu.dsp.common.form.RequestListBase.Page;
 

File: disconf-web/src/main/java/com/baidu/dsp/common/utils/email/LogMailBean.java
Patch:
@@ -5,7 +5,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Autowired;

File: disconf-web/src/main/java/com/baidu/dsp/common/utils/email/MailBean.java
Patch:
@@ -5,7 +5,7 @@
 import javax.mail.internet.InternetAddress;
 import javax.mail.internet.MimeMessage;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.InitializingBean;

File: disconf-web/src/main/java/com/baidu/unbiz/common/genericdao/mapper/ORMapping.java
Patch:
@@ -13,7 +13,7 @@
 import java.util.Map;
 import java.util.Set;
 
-import org.apache.commons.lang.StringUtils;
+import org.apache.commons.lang3.StringUtils;
 
 import com.baidu.unbiz.common.genericdao.annotation.Table;
 import com.github.knightliao.apollo.db.bo.BaseObject;

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerNonAnnotationFileMgrImpl.java
Patch:
@@ -81,6 +81,9 @@ public static DisconfCenterBaseModel getDisconfCenterFile(String fileName) {
         // file name
         disconfCenterFile.setFileName(fileName);
 
+        // 非注解式
+        disconfCenterFile.setIsTaggedWithNonAnnotationFile(true);
+
         // file type
         disconfCenterFile.setSupportFileTypeEnum(SupportFileTypeEnum.getByFileName(fileName));
 

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigUpdateController.java
Patch:
@@ -29,7 +29,7 @@
  */
 @Controller
 @RequestMapping(WebConstants.API_PREFIX + "/web/config")
-public class  ConfigUpdateController extends BaseController {
+public class ConfigUpdateController extends BaseController {
 
     protected static final Logger LOG = LoggerFactory.getLogger(ConfigUpdateController.class);
 
@@ -147,8 +147,7 @@ public JsonObjectBase updateFileWithText(@PathVariable long configId, @NotNull S
 
         } catch (Exception e) {
 
-            LOG.error(e.toString());
-            throw new FileUploadException("upload file error", e);
+            throw new FileUploadException("upload.file.error", e);
         }
 
         //

File: disconf-client/src/main/java/com/baidu/disconf/client/common/update/IDisconfSysUpdate.java
Patch:
@@ -18,6 +18,6 @@ public interface IDisconfSysUpdate {
      *
      * @throws Exception
      */
-    public void reload(DisconfCoreProcessor disconfCoreMgr, DisConfigTypeEnum disConfigTypeEnum, String keyName)
-        throws Exception;
+    void reload(DisconfCoreProcessor disconfCoreMgr, DisConfigTypeEnum disConfigTypeEnum, String keyName)
+            throws Exception;
 }

File: disconf-client/src/main/java/com/baidu/disconf/client/common/update/IDisconfUpdate.java
Patch:
@@ -8,5 +8,5 @@
  */
 public interface IDisconfUpdate {
 
-    public void reload() throws Exception;
+    void reload() throws Exception;
 }

File: disconf-client/src/main/java/com/baidu/disconf/client/core/processor/impl/DisconfCoreProcessUtils.java
Patch:
@@ -19,7 +19,8 @@ public class DisconfCoreProcessUtils {
     /**
      * 调用此配置影响的回调函数
      */
-    public static void callOneConf(DisconfStoreProcessor disconfStoreProcessor, String key) throws Exception {
+    public static void callOneConf(DisconfStoreProcessor disconfStoreProcessor,
+                                   String key) throws Exception {
 
         List<IDisconfUpdate> iDisconfUpdates = disconfStoreProcessor.getUpdateCallbackList(key);
 
@@ -34,6 +35,7 @@ public static void callOneConf(DisconfStoreProcessor disconfStoreProcessor, Stri
 
                 LOGGER.info("start to call " + iDisconfUpdate.getClass());
 
+                // set defined
                 try {
 
                     iDisconfUpdate.reload();

File: disconf-client/src/main/java/com/baidu/disconf/client/store/DisconfStoreProcessor.java
Patch:
@@ -70,7 +70,7 @@ public interface DisconfStoreProcessor {
     /**
      * 添加配置
      */
-    public void transformScanData(DisconfCenterBaseModel disconfCenterBaseModel);
+    void transformScanData(DisconfCenterBaseModel disconfCenterBaseModel);
 
     /**
      * 获取配置仓库的表示

File: disconf-client/src/main/java/com/baidu/disconf/client/store/processor/impl/DisconfStoreFileProcessorImpl.java
Patch:
@@ -87,7 +87,6 @@ public boolean hasThisConf(String keyName) {
             return false;
         }
         return true;
-
     }
 
     /**

File: disconf-client/src/main/java/com/baidu/disconf/client/support/registry/impl/SimpleRegistry.java
Patch:
@@ -47,6 +47,6 @@ public <T> T getFirstByType(Class<T> type) {
 
     @Override
     public <T> T getFirstByType(Class<T> type, boolean withProxy) {
-        return getFirstByType(type, withProxy);
+        return getFirstByType(type);
     }
 }

File: disconf-client/src/main/java/com/baidu/disconf/client/core/processor/impl/DisconfFileCoreProcessorImpl.java
Patch:
@@ -200,7 +200,7 @@ private void inject2OneConf(String fileName, DisconfCenterFile disconfCenterFile
 
                 object = disconfCenterFile.getObject();
                 if (object == null) {
-                    object = registry.getFirstByType(disconfCenterFile.getCls());
+                    object = registry.getFirstByType(disconfCenterFile.getCls(), true);
                 }
 
             } catch (Exception e) {

File: disconf-client/src/main/java/com/baidu/disconf/client/core/processor/impl/DisconfItemCoreProcessorImpl.java
Patch:
@@ -174,7 +174,7 @@ private void inject2OneConf(String key, DisconfCenterItem disconfCenterItem) {
             //
             if (!Modifier.isStatic(field.getModifiers())) {
 
-                object = registry.getFirstByType(field.getDeclaringClass());
+                object = registry.getFirstByType(field.getDeclaringClass(), true);
             }
 
             disconfStoreProcessor.inject2Instance(object, key);

File: disconf-client/src/main/java/com/baidu/disconf/client/addons/properties/ReloadablePropertiesBase.java
Patch:
@@ -15,7 +15,7 @@ public void setListeners(List listeners) {
         this.listeners = listeners;
     }
 
-    protected Properties getDelegate() {
+    protected Properties getDelegate()  {
         synchronized(this) {
             return internalProperties;
         }

File: disconf-client/src/main/java/com/baidu/disconf/client/DisconfMgrBean.java
Patch:
@@ -62,7 +62,7 @@ public void setScanPackage(String scanPackage) {
 
     @Override
     public int getOrder() {
-        return Ordered.HIGHEST_PRECEDENCE;
+        return Ordered.HIGHEST_PRECEDENCE + 1;
     }
 
     /**

File: disconf-client/src/main/java/com/baidu/disconf/client/DisconfMgrBean.java
Patch:
@@ -62,7 +62,7 @@ public void setScanPackage(String scanPackage) {
 
     @Override
     public int getOrder() {
-        return Ordered.HIGHEST_PRECEDENCE - 1;
+        return Ordered.HIGHEST_PRECEDENCE;
     }
 
     /**

File: disconf-client/src/main/java/com/baidu/disconf/client/common/constants/SupportFileTypeEnum.java
Patch:
@@ -30,7 +30,7 @@ public static SupportFileTypeEnum getByFileName(String fileName) {
 
         String extension = FilenameUtils.getExtension(fileName);
         if (StringUtils.isEmpty(extension)) {
-            return null;
+            return SupportFileTypeEnum.ANY;
         }
 
         for (SupportFileTypeEnum supportFileTypeEnum : SupportFileTypeEnum.values()) {

File: disconf-client/src/main/java/com/baidu/disconf/client/addons/properties/ReloadablePropertiesFactoryBean.java
Patch:
@@ -41,7 +41,6 @@ public void setLocation(final String fileNames) {
     }
 
     /**
-     * @param fileNames
      */
     public void setLocations(List<String> fileNames) {
 
@@ -122,8 +121,6 @@ public void setListeners(final List listeners) {
     private ReloadablePropertiesBase reloadableProperties;
 
     /**
-     * @return
-     *
      * @throws IOException
      */
     protected Object createInstance() throws IOException {

File: disconf-client/src/main/java/com/baidu/disconf/client/addons/properties/ReloadingPropertyPlaceholderConfigurer.java
Patch:
@@ -131,7 +131,7 @@ protected String parseStringValue(String strVal, Properties props, Set visitedPl
 
     private DynamicProperty getDynamic(String currentBeanName, String currentPropertyName, String orgStrVal) {
         DynamicProperty dynamic = new DynamicProperty(currentBeanName, currentPropertyName, orgStrVal);
-        DynamicProperty found = (DynamicProperty) dynamicProperties.get(dynamic);
+        DynamicProperty found = dynamicProperties.get(dynamic);
         if (found != null) {
             return found;
         }

File: disconf-client/src/main/java/com/baidu/disconf/client/common/model/DisconfCenterFile.java
Patch:
@@ -71,8 +71,6 @@ public String infoString() {
 
     /**
      * 获取可以表示的KeyMap对
-     *
-     * @return
      */
     public Map<String, Object> getKV() {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/config/ConfigMgr.java
Patch:
@@ -48,14 +48,12 @@ public synchronized static void init() throws Exception {
     }
 
     /**
-     * @return
      */
     public synchronized static boolean isInit() {
         return isInit;
     }
 
     /**
-     * @param args
      */
     public static void main(String[] args) {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/config/DisClientConfig.java
Patch:
@@ -42,13 +42,11 @@ public synchronized boolean isLoaded() {
     /**
      * load config normal
      *
-     * @param filePath
-     *
      * @throws Exception
      */
     public synchronized void loadConfig(String filePath) throws Exception {
 
-        if (isLoaded == true) {
+        if (isLoaded) {
             return;
         }
 

File: disconf-client/src/main/java/com/baidu/disconf/client/config/inner/DisClientComConfig.java
Patch:
@@ -50,13 +50,15 @@ private void initInstanceFingerprint() {
                 addr = InetAddress.getLocalHost();
                 host = addr.getHostName();
             } catch (UnknownHostException e) {
+                LOGGER.info("");
             }
 
         } else {
             // get host
             try {
                 port = Integer.parseInt(properties.getProperty("VCAP_APP_HOST"));
             } catch (Exception e) {
+                LOGGER.info("");
             }
         }
 
@@ -67,8 +69,6 @@ private void initInstanceFingerprint() {
 
     /**
      * 获取指纹
-     *
-     * @return
      */
     public String getInstanceFingerprint() {
         return instanceFingerprint.getHost() + "_" + String.valueOf(instanceFingerprint.getPort()) + "_" +

File: disconf-client/src/main/java/com/baidu/disconf/client/core/filetype/DisconfFileTypeProcessor.java
Patch:
@@ -11,8 +11,6 @@ public interface DisconfFileTypeProcessor {
 
     /**
      * 输入文件名，返回其相应的k-v数据
-     *
-     * @return
      */
     Map<String, Object> getKvMap(String fileName) throws Exception;
 }

File: disconf-client/src/main/java/com/baidu/disconf/client/core/filetype/impl/DisconfPropertiesProcessorImpl.java
Patch:
@@ -8,7 +8,7 @@
 import com.github.knightliao.apollo.utils.config.ConfigLoaderUtils;
 
 /**
- * Properites处理器
+ * Properties 处理器
  *
  * @author knightliao
  */
@@ -17,7 +17,7 @@ public class DisconfPropertiesProcessorImpl implements DisconfFileTypeProcessor
     @Override
     public Map<String, Object> getKvMap(String fileName) throws Exception {
 
-        Properties properties = null;
+        Properties properties;
 
         // 读取配置
         properties = ConfigLoaderUtils.loadConfig(fileName);

File: disconf-client/src/main/java/com/baidu/disconf/client/core/impl/DisconfCoreMgrImpl.java
Patch:
@@ -67,8 +67,6 @@ public void process() {
 
     /**
      * 只处理某一个
-     *
-     * @param fileName
      */
     @Override
     public void processFile(String fileName) {

File: disconf-client/src/main/java/com/baidu/disconf/client/core/processor/impl/DisconfCoreProcessUtils.java
Patch:
@@ -50,8 +50,6 @@ public static void callOneConf(DisconfStoreProcessor disconfStoreProcessor, Stri
 
     /**
      * 获取Spring Bean
-     *
-     * @return
      */
     public static Object getSpringBean(Class<?> cls) throws Exception {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/fetcher/FetcherFactory.java
Patch:
@@ -17,8 +17,6 @@ public class FetcherFactory {
 
     /**
      * 获取抓取器实例，记得释放资源, 它依赖Conf模块
-     *
-     * @return
      */
     public static FetcherMgr getFetcherMgr() throws Exception {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/mybeans/config/DisconfPropertyPlaceholderConfigurer.java
Patch:
@@ -17,8 +17,6 @@ public class DisconfPropertyPlaceholderConfigurer extends PropertyPlaceholderCon
     /**
      * Load properties into the given instance.
      *
-     * @param props
-     *
      * @throws IOException
      */
     @Override

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/ScanFactory.java
Patch:
@@ -11,7 +11,6 @@
 public class ScanFactory {
 
     /**
-     * @return
      *
      * @throws Exception
      */

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/ScanMgr.java
Patch:
@@ -7,7 +7,6 @@
 public interface ScanMgr {
 
     /**
-     * @param packageName
      *
      * @throws Exception
      */

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerFileMgrImpl.java
Patch:
@@ -57,8 +57,6 @@ public void exclude(Set<String> keySet) {
 
     /**
      * 获取配置文件数据
-     *
-     * @return
      */
     private static List<DisconfCenterBaseModel> getDisconfFiles(ScanStaticModel scanModel) {
 
@@ -83,7 +81,6 @@ private static List<DisconfCenterBaseModel> getDisconfFiles(ScanStaticModel scan
     /**
      * 转换配置文件
      *
-     * @return
      */
     private static DisconfCenterFile transformScanFile(Class<?> disconfFileClass, Set<Method> methods) {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerMgrImplBase.java
Patch:
@@ -20,8 +20,7 @@ public class StaticScannerMgrImplBase {
 
     /**
      * env/version 默认是应用整合设置的，但用户可以在配置中更改它
-     *
-     * @return
+
      */
     protected static DisConfCommonModel makeDisConfCommonModel(String env, String version) {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/strategy/impl/SpringScanStatic.java
Patch:
@@ -20,7 +20,6 @@ public class SpringScanStatic implements ScanStaticStrategy {
     /**
      * 构造函数
      *
-     * @param context
      */
     public SpringScanStatic(ApplicationContext context) {
         this.context = context;

File: disconf-client/src/main/java/com/baidu/disconf/client/utils/EmailConstants.java
Patch:
@@ -13,7 +13,7 @@ private EmailConstants() {
     /**
      * 发送邮件中附件的最大大小，2M
      */
-    public static final long MAX_MAILFILE_SIZE = 2000000;
+    public static final long MAX_MAIL_FILE_SIZE = 2000000;
 
     /**
      * 发送报警邮件中标题的最大长度，255

File: disconf-client/src/main/java/com/baidu/disconf/client/utils/MethodUtils.java
Patch:
@@ -22,12 +22,11 @@ public class MethodUtils {
 
     /**
      * 对于一个 get/is 方法，返回其相对应的Field
-     *
-     * @return
+
      */
     public static Field getFieldFromMethod(Method method, Field[] expectedFields, DisConfigTypeEnum disConfigTypeEnum) {
 
-        String fieldName = null;
+        String fieldName;
 
         if (disConfigTypeEnum.equals(DisConfigTypeEnum.FILE)) {
 

File: disconf-client/src/main/java/com/baidu/disconf/client/utils/ScanPrinterUtils.java
Patch:
@@ -27,10 +27,8 @@ public class ScanPrinterUtils {
 
     /**
      * 打印出StoreMap的数据
-     *
-     * @param reflections
      */
-    public static void printSotreMap(Reflections reflections) {
+    public static void printStoreMap(Reflections reflections) {
 
         LOGGER.info("Now we will print store map......");
 

File: disconf-client/src/test/java/com/baidu/disconf/client/test/scan/inner/ScanPackTestCase.java
Patch:
@@ -37,7 +37,7 @@ public void scan() {
             ScanStaticModel scanModel = scanStaticStrategy.scan(SCAN_PACK_NAME);
 
             // PRINT SCAN STORE
-            ScanPrinterUtils.printSotreMap(scanModel.getReflections());
+            ScanPrinterUtils.printStoreMap(scanModel.getReflections());
 
             // disconf file item
             LOGGER.info("=============DISCONF FILE ITEM===================");

File: disconf-demos/disconf-standalone-demo/src/main/java/com/example/disconf/demo/utils/JedisUtil.java
Patch:
@@ -21,11 +21,11 @@ public static Jedis createJedis(String host, int port) {
         return jedis;
     }
 
-    public static Jedis createJedis(String host, int port, String passwrod) {
+    public static Jedis createJedis(String host, int port, String password) {
         Jedis jedis = new Jedis(host, port);
 
-        if (!StringUtils.isNotBlank(passwrod)) {
-            jedis.auth(passwrod);
+        if (!StringUtils.isNotBlank(password)) {
+            jedis.auth(password);
         }
 
         return jedis;

File: disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/inner/ConfigUpdater.java
Patch:
@@ -7,7 +7,6 @@
 import org.apache.zookeeper.KeeperException;
 
 /**
- * 
  * @author liaoqiqi
  * @version 2014-6-16
  */
@@ -19,7 +18,7 @@ public class ConfigUpdater {
     private Random random = new Random();
 
     public ConfigUpdater(String hosts) throws IOException, InterruptedException {
-        store = new ResilientActiveKeyValueStore();
+        store = new ResilientActiveKeyValueStore(true);
         store.connect(hosts);
     }
 

File: disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/inner/ConfigWatcher.java
Patch:
@@ -8,7 +8,6 @@
 import org.apache.zookeeper.Watcher.Event.EventType;
 
 /**
- * 
  * @author liaoqiqi
  * @version 2014-6-16
  */
@@ -17,7 +16,7 @@ public class ConfigWatcher implements Watcher {
     private ResilientActiveKeyValueStore store;
 
     public ConfigWatcher(String hosts) throws IOException, InterruptedException {
-        store = new ResilientActiveKeyValueStore();
+        store = new ResilientActiveKeyValueStore(true);
         store.connect(hosts);
     }
 

File: disconf-core/src/test/java/com/baidu/disconf/core/test/zookeeper/UpdateNode.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  * 更新 结点
- * 
+ *
  * @author liaoqiqi
  * @version 2014-6-16
  */
@@ -24,7 +24,7 @@ public class UpdateNode {
     private Random random = new Random();
 
     public UpdateNode(String hosts) throws IOException, InterruptedException {
-        store = new ResilientActiveKeyValueStore();
+        store = new ResilientActiveKeyValueStore(true);
         store.connect(hosts);
     }
 

File: disconf-web/src/main/java/com/baidu/disconf/web/innerapi/zookeeper/impl/ZookeeperDriverImpl.java
Patch:
@@ -330,7 +330,7 @@ public synchronized void afterPropertiesSet() throws Exception {
 
         if (!isInit) {
 
-            ZookeeperMgr.getInstance().init(zooConfig.getZooHosts(), zooConfig.getZookeeperUrlPrefix());
+            ZookeeperMgr.getInstance().init(zooConfig.getZooHosts(), zooConfig.getZookeeperUrlPrefix(), false);
             isInit = true;
         }
     }

File: disconf-web/src/main/java/com/baidu/disconf/web/innerapi/zookeeper/impl/ZookeeperDriverImpl.java
Patch:
@@ -244,7 +244,7 @@ private ZkDisconfData getDisconfData(String path, String keyName, ZooKeeper zooK
     /**
      * 返回groupName结点向下的所有zookeeper信息
      *
-     * @param root
+     * @param
      */
     @Override
     public List<String> getConf(String groupName) {

File: disconf-web/src/main/java/com/baidu/disconf/web/utils/CodeUtils.java
Patch:
@@ -99,10 +99,10 @@ public static String unicodeToUtf8(String theString) {
                                 value = (value << 4) + 10 + aChar - 'A';
                                 break;
                             default:
-                                //                                LOG.warn("Malformed   \\uxxxx   encoding. " + aChar
-                                // + " original char is: " +
-                                //                                             theString);
+                                //throw new IllegalArgumentException("Malformed   \\uxxxx   encoding." + value);
+                                // filter this bad case
                                 value = 0;
+                                break;
                         }
                     }
                     outBuffer.append((char) value);

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigUpdateController.java
Patch:
@@ -130,7 +130,7 @@ public JsonObjectBase updateFile(@PathVariable long configId, @RequestParam("myf
      * @return
      */
     @ResponseBody
-    @RequestMapping(value = "/filetext/{configId}", method = RequestMethod.POST)
+    @RequestMapping(value = "/filetext/{configId}", method = RequestMethod.PUT)
     public JsonObjectBase updateFileWithText(@PathVariable long configId, @NotNull String fileContent) {
 
         //

File: disconf-web/src/main/java/com/baidu/disconf/web/web/auth/UserController.java
Patch:
@@ -51,7 +51,7 @@ public class UserController extends BaseController {
     /**
      * GET 获取
      * 
-     * @param demoUserId
+     * @param
      * @return
      */
     @RequestMapping(value = "/session", method = RequestMethod.GET)

File: disconf-web/src/main/java/com/baidu/ub/common/commons/ThreadContext.java
Patch:
@@ -52,8 +52,7 @@ public final static <T extends Object> T getContext(String key) {
 
     /**
      * 获取线程上下文
-     * 
-     * @param key
+     *
      */
     public final static Map<String, Object> getContext() {
         Map<String, Object> ctx = CTX_HOLDER.get();
@@ -136,7 +135,7 @@ public final static <U extends BaseObject<?>> U getSessionVisitor() {
     /**
      * 设置做分表分库的切分的key
      * 
-     * @param shardKey
+     * @param sessionVisitor
      *            下午8:37:51 created by Darwin(Tianxin)
      */
     public final static <K extends Serializable, U extends BaseObject<K>> void putSessionVisitor(

File: disconf-core/src/test/java/com/baidu/disconf/core/test/TestSuite.java
Patch:
@@ -7,6 +7,7 @@
 import com.baidu.disconf.core.test.path.DisconfWebPathMgrTestCase;
 import com.baidu.disconf.core.test.path.ZooPathMgrTestCase;
 import com.baidu.disconf.core.test.restful.RestfulMgrTestCase;
+import com.baidu.disconf.core.test.utiils.MyStringUtilsTestCase;
 import com.baidu.disconf.core.test.zookeeper.ZookeeperMgrTest;
 
 /**
@@ -15,8 +16,8 @@
  * @version 2014-7-30
  */
 @RunWith(Suite.class)
-@SuiteClasses({ DisconfWebPathMgrTestCase.class, ZooPathMgrTestCase.class,
-        RestfulMgrTestCase.class, ZookeeperMgrTest.class })
+@SuiteClasses({ DisconfWebPathMgrTestCase.class, ZooPathMgrTestCase.class, RestfulMgrTestCase.class,
+        ZookeeperMgrTest.class, MyStringUtilsTestCase.class })
 public class TestSuite {
 
 }
\ No newline at end of file

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/service/impl/ConfigMgrImpl.java
Patch:
@@ -265,7 +265,7 @@ private ConfListVo convert(Config config, String appNameString, String envName,
         confListVo.setModifyTime(config.getUpdateTime().substring(0, 12));
         confListVo.setKey(config.getName());
         // StringEscapeUtils.escapeHtml escape
-        confListVo.setValue(StringEscapeUtils.escapeHtml(config.getValue()));
+        confListVo.setValue(config.getValue());
         confListVo.setVersion(config.getVersion());
         confListVo.setType(DisConfigTypeEnum.getByType(config.getType()).getModelName());
         confListVo.setTypeId(config.getType());

File: disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/inner/ConnectionWatcher.java
Patch:
@@ -68,7 +68,7 @@ public void process(WatchedEvent event) {
         } else if (event.getState().equals(KeeperState.Disconnected)) {
 
             // 这时收到断开连接的消息，这里其它无能为力，因为这时已经和ZK断开连接了，只能等ZK再次开启了
-            LOGGER.error("zk Disconnected");
+            LOGGER.warn("zk Disconnected");
 
         } else if (event.getState().equals(KeeperState.Expired)) {
 

File: disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/inner/ConfigWatcher.java
Patch:
@@ -40,6 +40,7 @@ public void process(WatchedEvent event) {
                 System.err.printf("KeeperException: %s. Exiting.\n", e);
             }
         }
+
     }
 
     public static void main(String[] args) throws Exception {

File: disconf-demos/disconf-standalone-demo/src/main/java/com/example/disconf/demo/task/DisconfDemoTask.java
Patch:
@@ -49,6 +49,7 @@ public int run() {
                 // LOGGER.info("redis( " + jedisConfig.getHost() + ","
                 // + jedisConfig.getPort() + ")  get key: " + REDIS_KEY
                 // + " , " + simpleRedisService.getKey(REDIS_KEY));
+
                 LOGGER.info("redis( " + jedisConfig.getHost() + "," + jedisConfig.getPort() + ")");
 
                 LOGGER.info("static file data:" + SimpleStaticService.getStaticFileData());

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/dao/ConfigDao.java
Patch:
@@ -23,7 +23,7 @@ public Config getByParameter(Long appId, Long envId, String env,
      * @param appName
      * @return
      */
-    public List<Config> getConfByAppId(Long appId);
+    public List<Config> getConfByAppEnv(Long appId, Long envId);
 
     /**
      * 

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/service/ConfigMgr.java
Patch:
@@ -46,7 +46,7 @@ public Config getConfByParameter(Long appId, Long envId, String env,
      * @param appName
      * @return
      */
-    public List<String> getVersionListByAppId(Long appId);
+    public List<String> getVersionListByAppEnv(Long appId, Long envId);
 
     /**
      * 
@@ -97,8 +97,7 @@ void newConfig(ConfNewItemForm confNewForm,
             DisConfigTypeEnum disConfigTypeEnum);
 
     void delete(Long configId);
-    
-    
+
     /**
      * 返回disconf中所有配置正在使用的服务器及服务器中配置的信息
      */

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/service/impl/ConfigMgrImpl.java
Patch:
@@ -99,11 +99,11 @@ public Config getConfByParameter(Long appId, Long envId, String env,
      * 根据APPid获取其版本列表
      */
     @Override
-    public List<String> getVersionListByAppId(Long appId) {
+    public List<String> getVersionListByAppEnv(Long appId, Long envId) {
 
         List<String> versionList = new ArrayList<String>();
 
-        List<Config> configs = configDao.getConfByAppId(appId);
+        List<Config> configs = configDao.getConfByAppEnv(appId, envId);
 
         for (Config config : configs) {
 

File: disconf-web/src/main/java/com/baidu/disconf/web/web/config/controller/ConfigReadController.java
Patch:
@@ -52,8 +52,8 @@ public class ConfigReadController extends BaseController {
     @ResponseBody
     public JsonObjectBase getVersionList(@Valid VersionListForm versionListForm) {
 
-        List<String> versionList = configMgr
-                .getVersionListByAppId(versionListForm.getAppId());
+        List<String> versionList = configMgr.getVersionListByAppEnv(
+                versionListForm.getAppId(), versionListForm.getEnvId());
 
         return buildListSuccess(versionList, versionList.size());
     }

File: disconf-web/src/main/java/com/baidu/disconf/web/service/config/service/impl/ConfigMgrImpl.java
Patch:
@@ -181,7 +181,7 @@ private ConfListVo convert(Config config, String appNameString,
         confListVo.setEnvName(envName);
         confListVo.setEnvId(config.getEnvId());
         confListVo.setCreateTime(config.getCreateTime());
-        confListVo.setModifyTime(config.getUpdateTime());
+        confListVo.setModifyTime(config.getUpdateTime().substring(0, 12));
         confListVo.setKey(config.getName());
         confListVo.setValue(config.getValue());
         confListVo.setVersion(config.getVersion());

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerNonAnnotationFileMgrImpl.java
Patch:
@@ -44,6 +44,8 @@ private List<DisconfCenterBaseModel> getDisconfCenterFiles(
 
         for (String fileName : scanModel.getNonAnnotationFileSet()) {
 
+            fileName = fileName.trim();
+
             DisconfCenterFile disconfCenterFile = new DisconfCenterFile();
 
             //

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/statically/impl/StaticScannerNonAnnotationFileMgrImpl.java
Patch:
@@ -40,12 +40,12 @@ public void scanData2Store(ScanStaticModel scanModel) {
     private List<DisconfCenterBaseModel> getDisconfCenterFiles(
             ScanStaticModel scanModel) {
 
-        DisconfCenterFile disconfCenterFile = new DisconfCenterFile();
-
         List<DisconfCenterBaseModel> disconfCenterFiles = new ArrayList<DisconfCenterBaseModel>();
 
         for (String fileName : scanModel.getNonAnnotationFileSet()) {
 
+            DisconfCenterFile disconfCenterFile = new DisconfCenterFile();
+
             //
             // file name
             disconfCenterFile.setFileName(fileName);

File: disconf-client/src/test/java/com/baidu/disconf/client/test/DisconfMgrTestCase.java
Patch:
@@ -88,6 +88,7 @@ public DisconfCoreMgr getDisconfCoreMgr() throws Exception {
             //
             Set<String> fileSet = new HashSet<String>();
             fileSet.add("atomserverl.properties");
+            fileSet.add("atomserverm_slave.properties");
             DisconfMgr.start(ScanPackTestCase.SCAN_PACK_NAME, fileSet);
 
             //

File: disconf-client/src/main/java/com/baidu/disconf/client/store/inner/DisconfCenterStore.java
Patch:
@@ -69,8 +69,8 @@ public void storeOneFile(DisconfCenterBaseModel disconfCenterBaseModel) {
         if (confFileMap.containsKey(fileName)) {
 
             LOGGER.error("There are two same fileName!!!! " + "first: "
-                    + confFileMap.get(fileName).getCls().toString()
-                    + ", Second: " + disconfCenterFile.toString());
+                    + confFileMap.get(fileName).toString() + ", Second: "
+                    + disconfCenterFile.toString());
         } else {
             confFileMap.put(fileName, disconfCenterFile);
         }

File: disconf-core/src/main/java/com/baidu/disconf/core/common/constants/Constants.java
Patch:
@@ -33,6 +33,7 @@ public class Constants {
     public final static String STORE_FILE_URL_KEY = "file";
     public final static String STORE_ITEM_URL_KEY = "item";
     public final static String ZOO_HOSTS_URL_KEY = "hosts";
+    public final static String ZOO_HOSTS_URL_PREFIX_KEY = "prefix";
 
     // 通知Zookeeper更新配置的消息
     public final static String ZOO_UPDATE_STRING = "UPDATE-NOTIFYING";

File: disconf-core/src/main/java/com/baidu/disconf/core/common/zookeeper/ZookeeperMgr.java
Patch:
@@ -87,6 +87,8 @@ private void initInternal(String hosts, String defaultPrefixString)
         store = new ResilientActiveKeyValueStore();
         store.connect(hosts);
 
+        LOGGER.info("zoo prefix: " + defaultPrefixString);
+
         // 新建父目录
         makeDir(defaultPrefixString, ZooUtils.getIp());
     }

File: disconf-core/src/test/java/com/baidu/disconf/core/test/restful/RemoteMockServer.java
Patch:
@@ -52,4 +52,6 @@ public class RemoteMockServer {
     //
     public static final String ZOO_URL = "/api/zoo/hosts";
     public static final String ZOO_HOSTS = "127.0.0.1:8581,127.0.0.1:8582,127.0.0.1:8583";
+    public static final String ZOO_PREFIX_URL = "/api/zoo/prefix";
+    public static final String ZOO_PREFIX_VALUE = "/disconf";
 }

File: disconf-client/src/main/java/com/baidu/disconf/client/store/processor/impl/DisconfStoreItemProcessorImpl.java
Patch:
@@ -162,7 +162,7 @@ public void inject2Instance(Object object, String key) {
             }
 
         } catch (Exception e) {
-            LOGGER.error(e.toString(), e);
+            LOGGER.error("inject2Instance key: " + key + " " + e.toString(), e);
             return;
         }
     }
@@ -225,7 +225,7 @@ public void inject2Store(String key, DisconfValue disconfValue) {
             }
 
         } catch (Exception e) {
-            LOGGER.error(e.toString(), e);
+            LOGGER.error("key: " + key + " " + e.toString(), e);
             return;
         }
 

File: disconf-client/src/main/java/com/baidu/disconf/client/fetcher/impl/FetcherMgrImpl.java
Patch:
@@ -23,7 +23,7 @@
 public class FetcherMgrImpl implements FetcherMgr {
 
     protected static final Logger LOGGER = LoggerFactory
-            .getLogger(FetcherMgr.class);
+            .getLogger(FetcherMgrImpl.class);
 
     // 获取远程配置 重试次数
     private int retryTime = 3;
@@ -74,7 +74,7 @@ public String getValueFromServer(String url) throws Exception {
 
         ValueVo confItemVo = restfulMgr.getJsonData(ValueVo.class, remoteUrl,
                 retryTime, retrySleepSeconds);
-        LOGGER.info("remote server return: " + confItemVo.toString());
+        LOGGER.debug("remote server return: " + confItemVo.toString());
 
         if (confItemVo.getStatus().equals(Constants.NOTOK)) {
             throw new Exception("status is not ok.");

File: disconf-client/src/main/java/com/baidu/disconf/client/watch/inner/NodeWatcher.java
Patch:
@@ -62,7 +62,7 @@ public void monitorMaster() {
             LOGGER.error("cannot monitor " + monitorPath, e);
         }
 
-        LOGGER.info("monitor path: (" + monitorPath + "," + keyName + ","
+        LOGGER.debug("monitor path: (" + monitorPath + "," + keyName + ","
                 + disConfigTypeEnum.getModelName() + ") has been added!");
     }
 

File: disconf-core/src/main/java/com/baidu/disconf/core/common/restful/impl/RestfulMgrImpl.java
Patch:
@@ -83,7 +83,8 @@ public <T> T getJsonData(Class<T> clazz, RemoteUrl remoteUrl,
 
             WebTarget webtarget = client.target(url.toURI());
 
-            LOGGER.info("start to query url : " + webtarget.getUri().toString());
+            LOGGER.debug("start to query url : "
+                    + webtarget.getUri().toString());
 
             Invocation.Builder builder = webtarget
                     .request(MediaType.APPLICATION_JSON_TYPE);

File: disconf-client/src/main/java/com/baidu/disconf/client/DisconfMgr.java
Patch:
@@ -155,7 +155,9 @@ public synchronized static void close() {
 
             // disconfCoreMgr
             LOGGER.info("=============== disconfCoreMgr close =================");
-            disconfCoreMgr.release();
+            if (disconfCoreMgr != null) {
+                disconfCoreMgr.release();
+            }
 
             // close, 必须将其设置为False,以便重新更新
             isFirstInit = false;

File: disconf-client/src/test/java/com/baidu/disconf/client/test/scan/inner/ScanPackTestCase.java
Patch:
@@ -42,13 +42,13 @@ public void scan() {
             Set<Method> methods = scanModel.getDisconfFileItemMethodSet();
             ScanPrinterUtils.printFileItemMethod(methods);
             Assert.assertEquals(4, methods.size());
-            Assert.assertEquals(2, scanModel.getDisconfFileClassSet().size());
+            Assert.assertEquals(3, scanModel.getDisconfFileClassSet().size());
 
             // disconf file item
             LOGGER.info("=============DISCONF FILE===================");
             Map<Class<?>, Set<Method>> fileMap = scanModel
                     .getDisconfFileItemMap();
-            Assert.assertEquals(2, fileMap.size());
+            Assert.assertEquals(3, fileMap.size());
 
             // disconf item
             LOGGER.info("=============DISCONF ITEM===================");

File: disconf-core/src/main/java/com/baidu/disconf/core/common/restful/impl/RestfulMgrImpl.java
Patch:
@@ -185,7 +185,7 @@ public String downloadFromServer(RemoteUrl remoteUrl, String fileName,
                 }
             }
 
-            LOGGER.info("Move to: " + localFile.getAbsolutePath());
+            LOGGER.debug("Move to: " + localFile.getAbsolutePath());
 
         } catch (Exception e) {
             LOGGER.warn("download file failed, using previous download file.",

File: disconf-core/src/main/java/com/baidu/disconf/core/common/restful/type/FetchConfFile.java
Patch:
@@ -51,7 +51,7 @@ public Object call() throws Exception {
         }
 
         // start tp download
-        LOGGER.info("start to download. From: " + remoteUrl + " , TO: "
+        LOGGER.debug("start to download. From: " + remoteUrl + " , TO: "
                 + localTmpFile.getAbsolutePath());
 
         // 下载
@@ -65,7 +65,7 @@ public Object call() throws Exception {
         }
 
         // download success
-        LOGGER.info("download success!  " + localTmpFile.getAbsolutePath());
+        LOGGER.debug("download success!  " + localTmpFile.getAbsolutePath());
 
         return null;
     }

File: disconf-core/src/main/java/com/baidu/disconf/ub/common/utils/ClassUtils.java
Patch:
@@ -103,7 +103,7 @@ public static Object getValeByType(Class<?> type, String value)
         String typeName = type.getName();
         typeName = typeName.toLowerCase();
 
-        if (typeName.equals("int") || typeName.equals("java.lang.int")) {
+        if (typeName.equals("int") || typeName.equals("java.lang.integer")) {
 
             if (value.equals("")) {
                 value = "0";

File: disconf-client/src/main/java/com/baidu/disconf/client/store/aspect/DisconfAspectJ.java
Patch:
@@ -73,8 +73,9 @@ public Object decideAccess(ProceedingJoinPoint pjp,
             Object ret = disconfStoreProcessor.getConfig(
                     disconfFile.filename(), disconfFileItem.name());
             if (ret != null) {
-                LOGGER.info("using disconf store value: (" + field.getName()
-                        + " , " + ret + ")");
+                LOGGER.info("using disconf store value: "
+                        + disconfFile.filename() + " ("
+                        + disconfFileItem.name() + " , " + ret + ")");
                 return ret;
             }
         }

File: disconf-client/src/main/java/com/baidu/disconf/client/store/processor/impl/DisconfStoreFileProcessorImpl.java
Patch:
@@ -199,6 +199,9 @@ public void inject2Store(String fileName, DisconfValue disconfValue) {
 
             Object object = disconfValue.getProperties().get(fileItem);
             if (object == null) {
+                LOGGER.error(
+                        "cannot find {} to be injectd. file content is: {}",
+                        fileItem, disconfValue.getProperties().toString());
                 continue;
             }
 

File: disconf-client/src/main/java/com/baidu/disconf/client/config/DisClientConfig.java
Patch:
@@ -6,8 +6,8 @@
 import org.slf4j.LoggerFactory;
 
 import com.baidu.disconf.client.config.inner.DisInnerConfigAnnotation;
+import com.baidu.disconf.client.utils.DisconfAutowareConfig;
 import com.baidu.disconf.core.common.constants.Constants;
-import com.baidu.utils.DisconfAutowareConfig;
 
 /**
  * Disconf Client的用户配置文件

File: disconf-client/src/main/java/com/baidu/disconf/client/config/DisClientSysConfig.java
Patch:
@@ -4,7 +4,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.baidu.disconf.client.config.inner.DisInnerConfigAnnotation;
-import com.baidu.utils.DisconfAutowareConfig;
+import com.baidu.disconf.client.utils.DisconfAutowareConfig;
 
 /**
  * Disconf 系统自带的配置

File: disconf-client/src/main/java/com/baidu/disconf/client/config/inner/DisInnerConfigHelper.java
Patch:
@@ -5,9 +5,9 @@
 
 import com.baidu.disconf.client.config.DisClientConfig;
 import com.baidu.disconf.client.config.DisClientSysConfig;
-import com.baidu.utils.ConfigLoaderUtils;
-import com.baidu.utils.OsUtil;
-import com.baidu.utils.StringUtils;
+import com.baidu.disconf.core.utils.ConfigLoaderUtils;
+import com.baidu.disconf.core.utils.OsUtil;
+import com.baidu.disconf.core.utils.StringUtils;
 
 /**
  * 用户配置、系统配置 的校验

File: disconf-client/src/main/java/com/baidu/disconf/client/core/watch/impl/WatchMgrImpl.java
Patch:
@@ -12,8 +12,8 @@
 import com.baidu.disconf.client.core.watch.inner.NodeWatcher;
 import com.baidu.disconf.core.common.constants.DisConfigTypeEnum;
 import com.baidu.disconf.core.common.path.ZooPathMgr;
-import com.baidu.disconf.core.common.utils.ZooUtils;
 import com.baidu.disconf.core.common.zookeeper.ZookeeperMgr;
+import com.baidu.disconf.core.utils.ZooUtils;
 
 /**
  * Watch 模块的一个实现

File: disconf-client/src/main/java/com/baidu/disconf/client/fetcher/impl/FetcherMgrImpl.java
Patch:
@@ -12,7 +12,7 @@
 import com.baidu.disconf.core.common.json.ValueVo;
 import com.baidu.disconf.core.common.restful.RestfulMgr;
 import com.baidu.disconf.core.common.restful.core.RemoteUrl;
-import com.baidu.utils.OsUtil;
+import com.baidu.disconf.core.utils.OsUtil;
 
 /**
  * 抓取器, 独立模块，不依赖外部模块, 由Factory来管理此实例

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/ScanDynamicStoreAdapter.java
Patch:
@@ -15,7 +15,7 @@
 import com.baidu.disconf.client.scan.inner.model.ScanDynamicModel;
 import com.baidu.disconf.client.scan.inner.model.ScanStaticModel;
 import com.baidu.disconf.client.store.DisconfStoreMgr;
-import com.baidu.disconf.utils.SpringContextUtil;
+import com.baidu.disconf.client.utils.SpringContextUtil;
 
 /**
  * 动态扫描 与 Store模块的转换器

File: disconf-client/src/main/java/com/baidu/disconf/client/scan/inner/ScanVerify.java
Patch:
@@ -12,7 +12,7 @@
 import com.baidu.disconf.client.common.annotations.DisconfItem;
 import com.baidu.disconf.client.common.inter.IDisconfUpdate;
 import com.baidu.disconf.core.common.constants.DisConfigTypeEnum;
-import com.baidu.utils.ClassUtils;
+import com.baidu.disconf.core.utils.ClassUtils;
 
 /**
  * 扫描校验模块

File: disconf-client/src/main/java/com/baidu/disconf/client/store/DisconfStoreMgr.java
Patch:
@@ -13,7 +13,7 @@
 import com.baidu.disconf.client.common.model.DisconfCenterFile.FileItemValue;
 import com.baidu.disconf.client.common.model.DisconfCenterItem;
 import com.baidu.disconf.client.store.inner.DisconfCenterStore;
-import com.baidu.utils.ClassUtils;
+import com.baidu.disconf.core.utils.ClassUtils;
 
 /**
  * 仓库模块

File: disconf-client/src/main/java/com/baidu/disconf/client/store/aspect/DisconfAspectJ.java
Patch:
@@ -18,7 +18,7 @@
 import com.baidu.disconf.client.scan.inner.ScanVerify;
 import com.baidu.disconf.client.store.DisconfStoreMgr;
 import com.baidu.disconf.core.common.constants.DisConfigTypeEnum;
-import com.baidu.utils.ClassUtils;
+import com.baidu.disconf.core.utils.ClassUtils;
 
 /**
  * 配置拦截

File: disconf-client/src/main/java/com/baidu/disconf/client/utils/MyBeanUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.baidu.disconf.utils;
+package com.baidu.disconf.client.utils;
 
 import org.springframework.aop.framework.Advised;
 

File: disconf-client/src/main/java/com/baidu/disconf/client/utils/ScanPrinterUtils.java
Patch:
@@ -1,4 +1,4 @@
-package com.baidu.disconf.utils;
+package com.baidu.disconf.client.utils;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;

File: disconf-client/src/main/java/com/baidu/disconf/client/utils/SpringContextUtil.java
Patch:
@@ -1,4 +1,4 @@
-package com.baidu.disconf.utils;
+package com.baidu.disconf.client.utils;
 
 import org.springframework.beans.BeansException;
 import org.springframework.context.ApplicationContext;

File: disconf-client/src/test/java/com/baidu/disconf/client/test/common/BaseSpringTestCase.java
Patch:
@@ -14,7 +14,7 @@
 import com.baidu.disconf.client.config.DisClientConfig;
 import com.baidu.disconf.client.config.DisClientSysConfig;
 import com.baidu.disconf.core.common.path.DisconfWebPathMgr;
-import com.baidu.utils.NetUtils;
+import com.baidu.disconf.core.utils.NetUtils;
 
 /**
  * 

File: disconf-client/src/test/java/com/baidu/disconf/client/test/scan/inner/ScanPackTestCase.java
Patch:
@@ -12,7 +12,7 @@
 import com.baidu.disconf.client.scan.inner.ScanStatic;
 import com.baidu.disconf.client.scan.inner.model.ScanStaticModel;
 import com.baidu.disconf.client.test.common.BaseSpringTestCase;
-import com.baidu.disconf.utils.ScanPrinterUtils;
+import com.baidu.disconf.client.utils.ScanPrinterUtils;
 
 /**
  * 扫描测试

File: demo/disconf-demo/src/main/java/com/baidu/disconf2/demo/config/RemoteServerConfig.java
Patch:
@@ -8,7 +8,7 @@
  * @author liaoqiqi
  * @version 2014-6-17
  */
-@DisconfFile(filename = JedisConfig.filename)
+@DisconfFile(filename = RemoteServerConfig.filename)
 public class RemoteServerConfig {
 
     public static final String filename = "remote.properties";

File: disconf/disconf-web/src/main/java/com/baidu/disconf2/web/config/controller/ConfigController.java
Patch:
@@ -86,11 +86,11 @@ public HttpEntity<byte[]> getFile(ConfForm confForm) {
         try {
             configModel = configValidator.verifyConfForm(confForm);
         } catch (Exception e) {
-            LOG.error(e.toString(), e);
+            LOG.error(e.toString());
             hasError = true;
         }
 
-        if (hasError != false) {
+        if (hasError == false) {
             try {
                 //
                 Config config = configMgr.getConfByParameter(
@@ -104,7 +104,7 @@ public HttpEntity<byte[]> getFile(ConfForm confForm) {
                 return downloadDspBill(configModel.getKey(), config.getValue());
 
             } catch (Exception e) {
-                LOG.error(e.toString(), e);
+                LOG.error(e.toString());
             }
         }
 

File: demo/disconf-demo/src/main/java/com/baidu/disconf2/demo/model/BaoBaoService.java
Patch:
@@ -21,7 +21,7 @@ public class BaoBaoService {
 
     public static final String key = "moneyInvest";
 
-    private Double moneyInvest;
+    private Double moneyInvest = 1000d;
 
     @Autowired
     private Coefficients coefficients;

File: demo/disconf-demo/src/main/java/com/baidu/disconf2/demo/model/SimpleRedisService.java
Patch:
@@ -5,6 +5,7 @@
 import org.springframework.beans.factory.DisposableBean;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
 
 import redis.clients.jedis.Jedis;
 
@@ -16,6 +17,7 @@
  * @author liaoqiqi
  * @version 2014-6-17
  */
+@Service
 public class SimpleRedisService implements InitializingBean, DisposableBean {
 
     protected static final Logger LOGGER = LoggerFactory

File: disconf/disconf-client/src/main/java/com/baidu/disconf2/client/fetcher/inner/restful/RestfulMgr.java
Patch:
@@ -176,6 +176,9 @@ public String downloadFromServer(RemoteUrl remoteUrl, String fileName,
         // 相应的File对象
         File localTmpFile = new File(localTmpFilePath);
         File localFile = new File(localFilePath);
+        if (localFile.exists()) {
+            localFile.delete();
+        }
 
         try {
 

File: disconf/disconf-web/src/main/java/com/baidu/disconf2/service/config/dao/impl/ConfigDaoImpl.java
Patch:
@@ -27,7 +27,8 @@ public Config getByParameter(Long appId, Long envId, String version,
 
         return findOne(new Match(Columns.APP_ID, appId), new Match(
                 Columns.ENV_ID, envId), new Match(Columns.VERSION, version),
-                new Match(Columns.TYPE, disConfigTypeEnum.getType()));
+                new Match(Columns.TYPE, disConfigTypeEnum.getType()),
+                new Match(Columns.NAME, key));
     }
 
 }

File: disconf/disconf-client/src/main/java/com/baidu/disconf2/client/DisconfMgr.java
Patch:
@@ -70,7 +70,7 @@ public static void start(String scanPackage) {
 
         } catch (Exception e) {
 
-            LOGGER.error(e.toString());
+            LOGGER.error(e.toString(), e);
         }
 
         LOGGER.info("******************************* DISCONF END *******************************");

