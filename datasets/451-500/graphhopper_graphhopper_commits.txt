File: web-bundle/src/main/java/com/graphhopper/http/MultiExceptionGPXMessageBodyWriter.java
Patch:
@@ -23,7 +23,6 @@
 import org.w3c.dom.Element;
 
 import javax.ws.rs.Produces;
-import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.MultivaluedMap;
 import javax.ws.rs.ext.MessageBodyWriter;
@@ -36,7 +35,6 @@
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
-import java.io.IOException;
 import java.io.OutputStream;
 import java.lang.annotation.Annotation;
 import java.lang.reflect.Type;
@@ -56,7 +54,7 @@ public long getSize(MultiException e, Class<?> type, Type genericType, Annotatio
     }
 
     @Override
-    public void writeTo(MultiException e, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) throws IOException, WebApplicationException {
+    public void writeTo(MultiException e, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> httpHeaders, OutputStream entityStream) {
         if (e.getErrors().isEmpty())
             throw new RuntimeException("errorsToXML should not be called with an empty list");
 

File: core/src/main/java/com/graphhopper/util/details/IntersectionValues.java
Patch:
@@ -36,8 +36,8 @@ public static List<IntersectionValues> createList(Map<String, Object> intersecti
         List<IntersectionValues> list = new ArrayList<>();
 
         List<Integer> bearings = (List<Integer>) intersectionMap.get("bearings");
-        Integer in = (Integer) intersectionMap.get("in");
-        Integer out = (Integer) intersectionMap.get("out");
+        Integer in = (Integer) intersectionMap.getOrDefault("in", -1);
+        Integer out = (Integer) intersectionMap.getOrDefault("out", -1);
         List<Boolean> entry = (List<Boolean>) intersectionMap.get("entries");
 
         if (bearings.size() != entry.size()) {

File: client-hc/src/test/java/com/graphhopper/api/GHMatrixBatchTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.fasterxml.jackson.databind.JsonNode;
 
-import java.io.IOException;
 import java.util.HashMap;
 
 /**

File: core/src/main/java/com/graphhopper/GraphHopperConfig.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
-import com.graphhopper.jackson.ResponsePathSerializer;
 import com.graphhopper.util.PMap;
 
 import java.util.ArrayList;

File: core/src/main/java/com/graphhopper/coll/GHSortedCollection.java
Patch:
@@ -17,9 +17,7 @@
  */
 package com.graphhopper.coll;
 
-import com.carrotsearch.hppc.LongArrayList;
 import com.carrotsearch.hppc.cursors.IntCursor;
-import com.carrotsearch.hppc.predicates.IntPredicate;
 
 import java.util.Iterator;
 import java.util.Map.Entry;

File: core/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java
Patch:
@@ -27,7 +27,6 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.GHUtility;
-import org.jetbrains.annotations.NotNull;
 
 import java.util.ArrayList;
 import java.util.Collection;

File: core/src/main/java/com/graphhopper/reader/osm/PillarInfo.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.storage.DataAccess;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.PointAccess;
 
 /**
  * This class helps to store lat,lon,ele for every node parsed in OSMReader

File: core/src/main/java/com/graphhopper/reader/osm/WayToEdgeConverter.java
Patch:
@@ -23,7 +23,6 @@
 import com.carrotsearch.hppc.cursors.IntCursor;
 import com.carrotsearch.hppc.cursors.LongCursor;
 import com.graphhopper.storage.BaseGraph;
-import com.graphhopper.util.ArrayUtil;
 import com.graphhopper.util.EdgeIteratorState;
 
 import java.util.ArrayList;

File: core/src/main/java/com/graphhopper/routing/HeadingResolver.java
Patch:
@@ -19,10 +19,8 @@
 package com.graphhopper.routing;
 
 import com.carrotsearch.hppc.IntArrayList;
-import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;
-import com.graphhopper.util.shapes.GHPoint;
 
 public class HeadingResolver {
     private final EdgeExplorer edgeExplorer;

File: core/src/main/java/com/graphhopper/routing/ev/BikeRoadAccess.java
Patch:
@@ -19,9 +19,6 @@
 
 import com.graphhopper.util.Helper;
 
-import java.util.Arrays;
-import java.util.List;
-
 public enum BikeRoadAccess {
     MISSING, YES, DESTINATION, DESIGNATED, USE_SIDEPATH, DISMOUNT, PRIVATE, NO;
 

File: core/src/main/java/com/graphhopper/routing/ev/State.java
Patch:
@@ -1,7 +1,5 @@
 package com.graphhopper.routing.ev;
 
-import static com.graphhopper.routing.ev.Country.*;
-
 /**
  * The country subdivision is stored in this EncodedValue. E.g. US-CA is the enum US_CA.
  */

File: core/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java
Patch:
@@ -40,7 +40,6 @@
 import java.io.Reader;
 import java.net.URL;
 import java.util.*;
-import java.util.concurrent.Callable;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 

File: core/src/main/java/com/graphhopper/routing/util/AreaIndex.java
Patch:
@@ -21,7 +21,6 @@
 import org.locationtech.jts.geom.*;
 import org.locationtech.jts.geom.prep.PreparedGeometry;
 import org.locationtech.jts.geom.prep.PreparedGeometryFactory;
-import org.locationtech.jts.geom.prep.PreparedPolygon;
 import org.locationtech.jts.index.strtree.STRtree;
 
 import java.util.List;

File: core/src/main/java/com/graphhopper/routing/util/RoadDensityCalculator.java
Patch:
@@ -29,7 +29,6 @@
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.shapes.GHPoint;
 
-import java.util.concurrent.Callable;
 import java.util.function.BiConsumer;
 import java.util.function.ToDoubleFunction;
 import java.util.stream.IntStream;

File: core/src/main/java/com/graphhopper/routing/util/countryrules/europe/GermanyCountryRule.java
Patch:
@@ -19,7 +19,6 @@
 package com.graphhopper.routing.util.countryrules.europe;
 
 import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.routing.ev.MaxSpeed;
 import com.graphhopper.routing.ev.RoadAccess;
 import com.graphhopper.routing.ev.RoadClass;
 import com.graphhopper.routing.ev.Toll;

File: core/src/main/java/com/graphhopper/routing/util/parsers/AbstractAccessParser.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.ev.BooleanEncodedValue;
 import com.graphhopper.routing.ev.EdgeIntAccess;
-import com.graphhopper.routing.util.TransportationMode;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.*;

File: core/src/main/java/com/graphhopper/routing/util/parsers/AbstractAverageSpeedParser.java
Patch:
@@ -3,7 +3,6 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.EdgeIntAccess;
-import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.storage.IntsRef;
 
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/ModeAccessParser.java
Patch:
@@ -4,7 +4,6 @@
 import com.graphhopper.routing.ev.BooleanEncodedValue;
 import com.graphhopper.routing.ev.EdgeIntAccess;
 import com.graphhopper.routing.util.FerrySpeedCalculator;
-import com.graphhopper.routing.util.TransportationMode;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMSmoothnessParser.java
Patch:
@@ -42,4 +42,4 @@ public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay rea
 
         smoothnessEnc.setEnum(false, edgeId, edgeIntAccess, smoothness);
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMSurfaceParser.java
Patch:
@@ -23,7 +23,7 @@
 import com.graphhopper.routing.ev.Surface;
 import com.graphhopper.storage.IntsRef;
 
-import static com.graphhopper.routing.ev.Surface.*;
+import static com.graphhopper.routing.ev.Surface.MISSING;
 
 public class OSMSurfaceParser implements TagParser {
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMTemporalAccessParser.java
Patch:
@@ -24,8 +24,6 @@
 import com.graphhopper.routing.ev.EdgeIntAccess;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.text.ParseException;
 import java.util.*;

File: core/src/main/java/com/graphhopper/routing/weighting/custom/FindMinMax.java
Patch:
@@ -22,7 +22,7 @@
 import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.util.CustomModel;
 
-import java.util.*;
+import java.util.List;
 
 import static com.graphhopper.json.Statement.Keyword.ELSE;
 import static com.graphhopper.json.Statement.Keyword.IF;

File: core/src/main/java/com/graphhopper/util/BitUtil.java
Patch:
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.storage.IntsRef;
-
 /**
  * LITTLE endianness is default for GraphHopper and most microprocessors.
  *

File: core/src/main/java/com/graphhopper/util/details/PathDetailsFromEdges.java
Patch:
@@ -25,7 +25,6 @@
 import com.graphhopper.util.FetchMode;
 
 import java.util.*;
-import java.util.stream.Collectors;
 
 /**
  * This class calculates a PathDetail list in a similar fashion to the instruction calculation,

File: core/src/main/java/com/graphhopper/util/shapes/Polygon.java
Patch:
@@ -25,8 +25,6 @@
 import org.locationtech.jts.geom.prep.PreparedGeometry;
 import org.locationtech.jts.geom.prep.PreparedPolygon;
 
-import java.util.Arrays;
-
 /**
  * This class represents a polygon that is defined by a set of points.
  * Every point i is connected to point i-1 and i+1.

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
-import com.graphhopper.util.TurnCostsConfig;
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.reader.dem.SRTMProvider;
 import com.graphhopper.reader.dem.SkadiProvider;

File: core/src/test/java/com/graphhopper/routing/DirectionResolverTest.java
Patch:
@@ -35,7 +35,6 @@
 import org.junit.jupiter.api.Test;
 
 import static com.graphhopper.routing.DirectionResolverResult.*;
-import static com.graphhopper.util.Helper.createPointList;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 /**

File: core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
Patch:
@@ -30,7 +30,6 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.TurnCostStorage;
 import com.graphhopper.util.GHUtility;
-import com.graphhopper.util.Helper;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;

File: core/src/test/java/com/graphhopper/routing/RandomCHRoutingTest.java
Patch:
@@ -19,7 +19,6 @@
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.GHUtility;
-import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 import org.junit.jupiter.api.extension.ExtensionContext;
 import org.junit.jupiter.params.ParameterizedTest;

File: core/src/test/java/com/graphhopper/routing/ch/CHTurnCostTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.routing.RoutingAlgorithm;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
-import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.routing.ev.TurnCost;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.querygraph.QueryRoutingCHGraph;

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -27,7 +27,6 @@
 import com.graphhopper.routing.util.*;
 import com.graphhopper.routing.weighting.SpeedWeighting;
 import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.*;

File: core/src/test/java/com/graphhopper/routing/lm/LMIssueTest.java
Patch:
@@ -23,12 +23,10 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.SpeedWeighting;
 import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.RAMDirectory;
-import com.graphhopper.util.GHUtility;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.EnumSource;

File: core/src/test/java/com/graphhopper/routing/lm/PrepareLandmarksTest.java
Patch:
@@ -28,13 +28,11 @@
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.SpeedWeighting;
 import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.Snap;
-import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;

File: core/src/test/java/com/graphhopper/routing/util/NameSimilarityEdgeFilterTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
 import com.graphhopper.routing.ev.SimpleBooleanEncodedValue;
-import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.EdgeIteratorState;

File: core/src/test/java/com/graphhopper/routing/util/countryrules/CountryRuleTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.routing.util.countryrules.europe.AustriaCountryRule;
 import com.graphhopper.routing.util.countryrules.europe.GermanyCountryRule;
 import com.graphhopper.routing.util.countryrules.europe.HungaryCountryRule;
-
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -71,4 +70,4 @@ private ReaderWay createReaderWay(String highway) {
         return readerWay;
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/com/graphhopper/routing/util/parsers/HikeCustomModelTest.java
Patch:
@@ -5,7 +5,6 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.OSMParsers;
 import com.graphhopper.routing.util.PriorityCode;
-import com.graphhopper.routing.util.TransportationMode;
 import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.routing.weighting.custom.CustomWeighting;
 import com.graphhopper.storage.BaseGraph;

File: core/src/test/java/com/graphhopper/routing/util/parsers/MountainBikeTagParserTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.reader.ReaderNode;
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.PriorityCode;

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMValueExtractorTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.graphhopper.routing.util.parsers;
 
-import com.graphhopper.routing.ev.MaxSpeed;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/com/graphhopper/routing/util/parsers/RacingBikeTagParserTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.PriorityCode;
@@ -33,7 +32,6 @@
 import static com.graphhopper.routing.util.parsers.BikeCommonAverageSpeedParser.MIN_SPEED;
 import static com.graphhopper.routing.util.parsers.BikeCommonAverageSpeedParser.PUSHING_SECTION_SPEED;
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 /**
  * @author ratrun

File: core/src/test/java/com/graphhopper/storage/index/SnapTest.java
Patch:
@@ -25,7 +25,7 @@
 import org.junit.jupiter.api.Test;
 
 import static com.graphhopper.util.DistancePlaneProjection.DIST_PLANE;
-import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 class SnapTest {
 

File: example/src/main/java/com/graphhopper/example/LocationIndexExample.java
Patch:
@@ -3,7 +3,6 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.config.Profile;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.search.KVStorage;
 import com.graphhopper.search.KVStorage.KValue;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.index.LocationIndex;

File: map-matching/src/main/java/com/graphhopper/matching/EdgeMatch.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.matching;
 
 import com.graphhopper.util.EdgeIteratorState;
+
 import java.util.List;
 
 /**

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/ReferentialIntegrityError.java
Patch:
@@ -27,7 +27,6 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
-import java.util.Locale;
 
 /** Indicates that an entity referenced another entity that does not exist. */
 public class ReferentialIntegrityError extends GTFSError implements Serializable {

File: tools/src/main/java/com/graphhopper/tools/CHMeasurement.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.GraphHopperConfig;
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
-import com.graphhopper.util.TurnCostsConfig;
 import com.graphhopper.routing.TestProfiles;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -25,7 +25,6 @@
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
-import com.graphhopper.util.TurnCostsConfig;
 import com.graphhopper.jackson.Jackson;
 import com.graphhopper.routing.TestProfiles;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -18,8 +18,6 @@
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.graphhopper.GHResponse;
-import com.graphhopper.ResponsePath;
 import com.graphhopper.json.Statement;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.details.PathDetail;

File: web-api/src/main/java/com/graphhopper/jackson/JtsEnvelopeDeserializer.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.core.JsonParser;
-import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import org.locationtech.jts.geom.Envelope;

File: web-api/src/test/java/com/graphhopper/util/HelperTest.java
Patch:
@@ -19,12 +19,11 @@
 
 import org.junit.jupiter.api.Test;
 
-import java.util.Arrays;
 import java.util.Locale;
 
 import static com.graphhopper.util.Helper.UTF_CS;
-import static org.junit.jupiter.api.Assertions.*;
-import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 /**
  * @author Peter Karich

File: web-bundle/src/main/java/com/graphhopper/http/FeedConfiguration.java
Patch:
@@ -19,9 +19,7 @@
 package com.graphhopper.http;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
-import com.google.transit.realtime.GtfsRealtime;
 
-import java.io.IOException;
 import java.net.URL;
 
 public class FeedConfiguration {

File: web-bundle/src/main/java/com/graphhopper/http/JsonErrorEntity.java
Patch:
@@ -22,7 +22,6 @@
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
-import com.graphhopper.util.exceptions.GHException;
 
 import java.util.List;
 

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -10,7 +10,6 @@
 import com.graphhopper.isochrone.algorithm.ContourBuilder;
 import com.graphhopper.isochrone.algorithm.ShortestPathTree;
 import com.graphhopper.isochrone.algorithm.Triangulator;
-import com.graphhopper.jackson.ResponsePathSerializer;
 import com.graphhopper.routing.ev.BooleanEncodedValue;
 import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.querygraph.QueryGraph;

File: web-bundle/src/main/java/com/graphhopper/resources/PtMVTResource.java
Patch:
@@ -23,7 +23,6 @@
 import javax.ws.rs.core.Response;
 import javax.ws.rs.core.UriInfo;
 import java.io.IOException;
-import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -42,7 +42,6 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.Map;
-import java.util.stream.Collectors;
 
 import static com.graphhopper.util.Parameters.Details.PATH_DETAILS;
 import static com.graphhopper.util.Parameters.Routing.*;

File: core/src/main/java/com/graphhopper/isochrone/algorithm/ContourBuilder.java
Patch:
@@ -13,7 +13,7 @@ the License, or (at your option) any later version.
 
 package com.graphhopper.isochrone.algorithm;
 
-import org.locationtech.jts.algorithm.CGAlgorithms;
+import org.locationtech.jts.algorithm.Area;
 import org.locationtech.jts.geom.*;
 import org.locationtech.jts.geom.prep.PreparedPolygon;
 import org.locationtech.jts.triangulate.quadedge.Vertex;
@@ -125,7 +125,7 @@ private List<Polygon> punchHoles(List<LinearRing> rings) {
         List<LinearRing> holes = new ArrayList<>(rings.size() / 2);
         // 1. Split the polygon list in two: shells and holes (CCW and CW)
         for (LinearRing ring : rings) {
-            if (CGAlgorithms.signedArea(ring.getCoordinateSequence()) > 0.0)
+            if (Area.ofRingSigned(ring.getCoordinateSequence()) > 0.0)
                 holes.add(ring);
             else
                 shells.add(new PreparedPolygon(geometryFactory.createPolygon(ring)));
@@ -157,4 +157,4 @@ private List<Polygon> punchHoles(List<LinearRing> rings) {
         }
         return punched;
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/graphhopper/routing/ev/EncodedValueSerializer.java
Patch:
@@ -23,15 +23,15 @@
 import com.fasterxml.jackson.core.JsonProcessingException;
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.PropertyNamingStrategy;
+import com.fasterxml.jackson.databind.PropertyNamingStrategies;
 
 public class EncodedValueSerializer {
     private final static ObjectMapper MAPPER = new ObjectMapper();
 
     static {
         MAPPER.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE);
         MAPPER.setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY);
-        MAPPER.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
+        MAPPER.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);
     }
 
     public static String serializeEncodedValue(EncodedValue encodedValue) {

File: web-api/src/main/java/com/graphhopper/jackson/Jackson.java
Patch:
@@ -20,7 +20,7 @@
 import com.bedatadriven.jackson.datatype.jts.JtsModule;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.databind.PropertyNamingStrategy;
+import com.fasterxml.jackson.databind.PropertyNamingStrategies;
 
 public class Jackson {
 
@@ -31,7 +31,7 @@ public static ObjectMapper newObjectMapper() {
     public static ObjectMapper initObjectMapper(ObjectMapper objectMapper) {
         objectMapper.registerModule(new GraphHopperModule());
         objectMapper.registerModule(new JtsModule());
-        objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
+        objectMapper.setPropertyNamingStrategy(PropertyNamingStrategies.SNAKE_CASE);
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         return objectMapper;
     }

File: core/src/main/java/com/graphhopper/reader/osm/OSMRestrictionConverter.java
Patch:
@@ -92,6 +92,9 @@ public static Triple<ReaderRelation, RestrictionTopology, RestrictionMembers> bu
                 throw new OSMRestrictionException("contains duplicate from-/via-/to-members");
             WayToEdgeConverter.EdgeResult res = wayToEdgeConverter
                     .convertForViaWays(restrictionMembers.getFromWays(), restrictionMembers.getViaWays(), restrictionMembers.getToWays());
+            // temporary fix for #3086
+            if (res.getFromEdges().size() > 1 && res.getToEdges().size() > 1)
+                throw new OSMRestrictionException("fromEdges and toEdges cannot be size > 1 at the same time for relation " + relation.getId());
             return new Triple<>(relation, RestrictionTopology.way(res.getFromEdges(), res.getViaEdges(), res.getToEdges(), res.getNodes()), restrictionMembers);
         } else {
             int viaNode = relation.getTag("graphhopper:via_node", -1);

File: core/src/main/java/com/graphhopper/routing/weighting/custom/FindMinMax.java
Patch:
@@ -91,7 +91,7 @@ private static void findMinMaxForGroup(final MinMax minMax, List<Statement> grou
                 MinMax tmp;
                 if(s.isBlock()) {
                     tmp = new MinMax(minMax.min, minMax.max);
-                    for (List<Statement> subGroup : CustomModelParser.splitIntoGroup(first.doBlock())) findMinMaxForGroup(tmp, subGroup, lookup);
+                    for (List<Statement> subGroup : CustomModelParser.splitIntoGroup(s.doBlock())) findMinMaxForGroup(tmp, subGroup, lookup);
                 } else {
                     tmp = s.operation().apply(minMax, ValueExpressionVisitor.findMinMax(s.value(), lookup));
                     if (tmp.max < 0)

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParser.java
Patch:
@@ -44,7 +44,7 @@ public OSMMaxWeightParser(DecimalEncodedValue weightEncoder) {
     public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way, IntsRef relationFlags) {
         OSMValueExtractor.extractTons(edgeId, edgeIntAccess, way, weightEncoder, MAX_WEIGHT_TAGS);
 
-        // vehicle:conditional no @ (weight > 7.5)
+        // vehicle:conditional = no @ (weight > 7.5)
         for (String restriction : HGV_RESTRICTIONS) {
             String value = way.getTag(restriction, "");
             if (value.startsWith("no") && value.indexOf("@") < 6) { // no,none[ ]@

File: core/src/main/java/com/graphhopper/routing/util/parsers/helpers/OSMValueExtractor.java
Patch:
@@ -52,7 +52,7 @@ public static double conditionalWeightToTons(String value) {
             }
             if (index > 0) {
                 int lastIndex = value.indexOf(')', index); // (value) or value
-                if (lastIndex < 0) lastIndex = value.length() - 1;
+                if (lastIndex < 0) lastIndex = value.length();
                 if (lastIndex > index)
                     return OSMValueExtractor.stringToTons(value.substring(index, lastIndex));
             }

File: core/src/test/java/com/graphhopper/routing/util/parsers/MaxWeightExceptParserTest.java
Patch:
@@ -44,15 +44,15 @@ public void testConditionalTags() {
         readerWay.setTag("highway", "primary");
         readerWay.setTag("hgv:conditional", "no @ (weight > 7.5)");
         parser.handleWayTags(edgeId, edgeIntAccess, readerWay, relFlags);
-        assertEquals(MaxWeightExcept.NONE, mwEnc.getEnum(false, edgeId, edgeIntAccess));
+        assertEquals(MaxWeightExcept.MISSING, mwEnc.getEnum(false, edgeId, edgeIntAccess));
 
         // weight=5 is missing
         edgeIntAccess = new ArrayEdgeIntAccess(1);
         readerWay.clearTags();
         readerWay.setTag("highway", "primary");
         readerWay.setTag("vehicle:conditional", "delivery @ (weight > 5)");
         parser.handleWayTags(edgeId, edgeIntAccess, readerWay, relFlags);
-        assertEquals(MaxWeightExcept.NONE, mwEnc.getEnum(false, edgeId, edgeIntAccess));
+        assertEquals(MaxWeightExcept.MISSING, mwEnc.getEnum(false, edgeId, edgeIntAccess));
 
         edgeIntAccess = new ArrayEdgeIntAccess(1);
         readerWay.clearTags();
@@ -70,4 +70,4 @@ public void testConditionalTags() {
         parser.handleWayTags(edgeId, edgeIntAccess, readerWay, relFlags);
         assertEquals(MaxWeightExcept.DESTINATION, mwEnc.getEnum(false, edgeId, edgeIntAccess));
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -859,6 +859,7 @@ protected void prepareImport() {
         encodedValuesWithProps.putIfAbsent(RoadEnvironment.KEY, new PMap());
         // used by instructions...
         encodedValuesWithProps.putIfAbsent(Roundabout.KEY, new PMap());
+        encodedValuesWithProps.putIfAbsent(VehicleAccess.key("car"), new PMap());
         encodedValuesWithProps.putIfAbsent(RoadClassLink.KEY, new PMap());
         encodedValuesWithProps.putIfAbsent(MaxSpeed.KEY, new PMap());
 

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -95,7 +95,9 @@ public InstructionsFromEdges(Graph graph, Weighting weighting, EncodedValueLooku
         prevNode = -1;
         prevInRoundabout = false;
         prevName = null;
-        outEdgeExplorer = graph.createEdgeExplorer(edge -> Double.isFinite(weighting.calcEdgeWeight(edge, false)));
+
+        BooleanEncodedValue carAccessEnc = evLookup.getBooleanEncodedValue(VehicleAccess.key("car"));
+        outEdgeExplorer = graph.createEdgeExplorer(edge -> edge.get(carAccessEnc));
         allExplorer = graph.createEdgeExplorer();
     }
 

File: core/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -468,7 +468,7 @@ public void testNothingHappensWhenProfilesAreChangedForLoad() {
                 setGraphHopperLocation(ghLoc);
         instance.load();
         assertEquals(5, instance.getBaseGraph().getNodes());
-        assertEquals("road_class,road_environment,roundabout,road_class_link,max_speed,foot_subnetwork,car_subnetwork",
+        assertEquals("road_class,road_environment,roundabout,car_access,road_class_link,max_speed,foot_subnetwork,car_subnetwork",
                 instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")));
     }
 
@@ -500,7 +500,7 @@ public void testFailsForWrongEVConfig() {
                 setOSMFile(testOsm3);
         instance.load();
         assertEquals(5, instance.getBaseGraph().getNodes());
-        assertEquals("road_class,road_environment,roundabout,road_class_link,max_speed,car_subnetwork", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")));
+        assertEquals("road_class,road_environment,roundabout,car_access,road_class_link,max_speed,car_subnetwork", instance.getEncodingManager().getEncodedValues().stream().map(EncodedValue::getName).collect(Collectors.joining(",")));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -53,8 +53,9 @@ public class PathSimplificationTest {
     @Test
     public void testScenario() {
         DecimalEncodedValue speedEnc = new DecimalEncodedValueImpl("speed", 5, 5, false);
-        EncodingManager carManager = EncodingManager.start().add(speedEnc)
-                .add(Roundabout.create()).add(RoadClass.create()).add(RoadClassLink.create()).add(MaxSpeed.create()).build();
+        EncodingManager carManager = EncodingManager.start().add(speedEnc).
+                add(VehicleAccess.create("car")).add(Roundabout.create()).add(RoadClass.create()).
+                add(RoadClassLink.create()).add(MaxSpeed.create()).build();
         BaseGraph g = new BaseGraph.Builder(carManager).create();
         // 0-1-2
         // | | |

File: web-api/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
Patch:
@@ -61,9 +61,8 @@ public boolean isExited() {
     }
 
     public int getExitNumber() {
-        if (exited && exitNumber == 0) {
-            throw new IllegalStateException("RoundaboutInstruction must contain exitNumber>0");
-        }
+        if (exited && exitNumber == 0)
+            return 1; // special case: we leave at a way without car_access
         return exitNumber;
     }
 

File: web-bundle/src/test/java/com/graphhopper/gpx/GpxConversionsTest.java
Patch:
@@ -58,7 +58,8 @@ public class GpxConversionsTest {
     @BeforeEach
     public void setUp() {
         speedEnc = new DecimalEncodedValueImpl("speed", 5, 5, false);
-        carManager = EncodingManager.start().add(speedEnc).add(Roundabout.create()).add(RoadClass.create()).add(RoadClassLink.create()).add(MaxSpeed.create()).build();
+        carManager = EncodingManager.start().add(speedEnc).add(VehicleAccess.create("car")).
+                add(Roundabout.create()).add(RoadClass.create()).add(RoadClassLink.create()).add(MaxSpeed.create()).build();
         trMap = new TranslationMap().doImport();
     }
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonAccessParser.java
Patch:
@@ -87,7 +87,7 @@ public WayAccess getAccess(ReaderWay way) {
         }
 
         // accept only if explicitly tagged for bike usage
-        if ("motorway".equals(highwayValue) || "motorway_link".equals(highwayValue) || "bridleway".equals(highwayValue))
+        if ("motorway".equals(highwayValue) || "motorway_link".equals(highwayValue))
             return WayAccess.CAN_SKIP;
 
         if (way.hasTag("motorroad", "yes"))

File: core/src/main/java/com/graphhopper/routing/util/parsers/FootAccessParser.java
Patch:
@@ -72,8 +72,7 @@ protected FootAccessParser(BooleanEncodedValue accessEnc) {
         allowedHighwayTags.add("cycleway");
         allowedHighwayTags.add("unclassified");
         allowedHighwayTags.add("road");
-        // disallowed in some countries
-        //allowedHighwayTags.add("bridleway");
+        allowedHighwayTags.add("bridleway");
 
         routeMap.put(INTERNATIONAL, UNCHANGED.getValue());
         routeMap.put(NATIONAL, UNCHANGED.getValue());

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeCustomModelTest.java
Patch:
@@ -37,6 +37,8 @@ public void setup() {
                 add(VehicleSpeed.create("racingbike", 4, 2, false)).
                 add(VehiclePriority.create("racingbike", 4, PriorityCode.getFactor(1), false)).
                 add(FerrySpeed.create()).
+                add(Country.create()).
+                add(RoadClass.create()).
                 add(RouteNetwork.create(BikeNetwork.KEY)).
                 add(Roundabout.create()).
                 add(Smoothness.create()).

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeTagParserTest.java
Patch:
@@ -471,8 +471,9 @@ public void testWayAcceptance() {
         assertTrue(accessParser.getAccess(way).isWay());
 
         way.clearTags();
+        // exclude bridleway for a single country via custom model
         way.setTag("highway", "bridleway");
-        assertTrue(accessParser.getAccess(way).canSkip());
+        assertTrue(accessParser.getAccess(way).isWay());
         way.setTag("bicycle", "yes");
         assertTrue(accessParser.getAccess(way).isWay());
 

File: core/src/main/java/com/graphhopper/routing/util/countryrules/europe/HungaryCountryRule.java
Patch:
@@ -38,8 +38,7 @@ public RoadAccess getAccess(ReaderWay readerWay, TransportationMode transportati
             return currentRoadAccess;
         }
 
-        // Override only bogus "yes" and missing/other
-        if (currentRoadAccess != RoadAccess.YES && currentRoadAccess != RoadAccess.OTHER) {
+        if (currentRoadAccess != RoadAccess.YES) {
             return currentRoadAccess;
         }
 
@@ -48,7 +47,7 @@ public RoadAccess getAccess(ReaderWay readerWay, TransportationMode transportati
             return RoadAccess.DESTINATION;
         }
 
-        return currentRoadAccess;
+        return RoadAccess.YES;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/parsers/CarAccessParser.java
Patch:
@@ -46,7 +46,7 @@ public CarAccessParser(EncodedValueLookup lookup, PMap properties) {
     public CarAccessParser(BooleanEncodedValue accessEnc,
                            BooleanEncodedValue roundaboutEnc, PMap properties,
                            TransportationMode transportationMode) {
-        super(accessEnc, transportationMode);
+        super(accessEnc, OSMRoadAccessParser.toOSMRestrictions(transportationMode));
         this.roundaboutEnc = roundaboutEnc;
         restrictedValues.add("agricultural");
         restrictedValues.add("forestry");

File: core/src/main/java/com/graphhopper/routing/util/parsers/FootAccessParser.java
Patch:
@@ -43,7 +43,7 @@ public FootAccessParser(EncodedValueLookup lookup, PMap properties) {
     }
 
     protected FootAccessParser(BooleanEncodedValue accessEnc) {
-        super(accessEnc, TransportationMode.FOOT);
+        super(accessEnc, OSMRoadAccessParser.toOSMRestrictions(TransportationMode.FOOT));
 
         sidewalkValues.add("yes");
         sidewalkValues.add("both");

File: core/src/main/java/com/graphhopper/routing/util/parsers/ModeAccessParser.java
Patch:
@@ -30,12 +30,12 @@ public class ModeAccessParser implements TagParser {
     private final boolean skipEmergency;
     private final Set<String> barriers;
 
-    public ModeAccessParser(TransportationMode mode, BooleanEncodedValue accessEnc,
+    public ModeAccessParser(List<String> restrictionKeys, BooleanEncodedValue accessEnc,
                             boolean skipEmergency, BooleanEncodedValue roundaboutEnc,
                             Set<String> restrictions, Set<String> barriers) {
         this.accessEnc = accessEnc;
         this.roundaboutEnc = roundaboutEnc;
-        restrictionKeys = OSMRoadAccessParser.toOSMRestrictions(mode);
+        this.restrictionKeys = restrictionKeys;
         vehicleForward = restrictionKeys.stream().map(r -> r + ":forward").toList();
         vehicleBackward = restrictionKeys.stream().map(r -> r + ":backward").toList();
         ignoreOnewayKeys = restrictionKeys.stream().map(r -> "oneway:" + r).toList();

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -667,7 +667,7 @@ public static CustomModel loadCustomModelFromJar(String name) {
             ObjectMapper objectMapper = Jackson.newObjectMapper();
             return objectMapper.readValue(json, CustomModel.class);
         } catch (IOException e) {
-            throw new IllegalArgumentException("Could not load built-in custom model '" + name + "'");
+            throw new IllegalArgumentException("Could not load built-in custom model '" + name + "'", e);
         }
     }
 }

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.GraphHopperTest;
-import com.graphhopper.util.TurnCostsConfig;
 import com.graphhopper.reader.ReaderElement;
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
@@ -936,7 +935,8 @@ public void testCountries() throws IOException {
         EnumEncodedValue<RoadAccess> roadAccessEnc = RoadAccess.create();
         EncodingManager em = new EncodingManager.Builder().add(roadAccessEnc).build();
         OSMParsers osmParsers = new OSMParsers();
-        osmParsers.addWayTagParser(new OSMRoadAccessParser(roadAccessEnc, OSMRoadAccessParser.toOSMRestrictions(CAR)));
+        osmParsers.addWayTagParser(new OSMRoadAccessParser<>(roadAccessEnc,
+                OSMRoadAccessParser.toOSMRestrictions(CAR), RoadAccess::countryHook, RoadAccess::find));
         BaseGraph graph = new BaseGraph.Builder(em).create();
         OSMReader reader = new OSMReader(graph, osmParsers, new OSMReaderConfig());
         reader.setCountryRuleFactory(new CountryRuleFactory());

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -710,7 +710,8 @@ private GraphHopper createHopper(String osmFile, Profile... profiles) {
                         "foot_access, foot_priority, foot_average_speed, " +
                         "bike_access, bike_priority, bike_average_speed, foot_network, roundabout, " +
                         "mtb_access, mtb_priority, mtb_average_speed, mtb_rating, " +
-                        "racingbike_access, racingbike_priority, racingbike_average_speed").
+                        "racingbike_access, racingbike_priority, racingbike_average_speed, " +
+                        "foot_road_access, bike_road_access").
                 setGraphHopperLocation(GH_LOCATION);
         hopper.getRouterConfig().setSimplifyResponse(false);
         hopper.setMinNetworkSize(0);

File: core/src/test/java/com/graphhopper/routing/util/parsers/HikeCustomModelTest.java
Patch:
@@ -5,6 +5,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.OSMParsers;
 import com.graphhopper.routing.util.PriorityCode;
+import com.graphhopper.routing.util.TransportationMode;
 import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.routing.weighting.custom.CustomWeighting;
 import com.graphhopper.storage.BaseGraph;
@@ -31,7 +32,7 @@ public void setup() {
                 add(VehiclePriority.create("foot", 4, PriorityCode.getFactor(1), false)).
                 add(FerrySpeed.create()).
                 add(RouteNetwork.create(FootNetwork.KEY)).
-                add(RoadAccess.create()).
+                add(FootRoadAccess.create()).
                 add(hikeRating).build();
 
         parsers = new OSMParsers().

File: example/src/main/java/com/graphhopper/example/LocationIndexExample.java
Patch:
@@ -23,7 +23,7 @@ public static void main(String[] args) {
 
     public static void graphhopperLocationIndex(String relDir) {
         GraphHopper hopper = new GraphHopper();
-        hopper.setEncodedValuesString("car_access, car_average_speed");
+        hopper.setEncodedValuesString("car_access, car_average_speed, road_access");
         hopper.setProfiles(new Profile("car").setCustomModel(GHUtility.loadCustomModelFromJar("car.json")));
         hopper.setOSMFile(relDir + "core/files/andorra.osm.pbf");
         hopper.setGraphHopperLocation("./target/locationindex-graph-cache");

File: example/src/main/java/com/graphhopper/example/RoutingExample.java
Patch:
@@ -36,7 +36,7 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         hopper.setGraphHopperLocation("target/routing-graph-cache");
 
         // add all encoded values that are used in the custom model, these are also available as path details or for client-side custom models
-        hopper.setEncodedValuesString("car_access, car_average_speed");
+        hopper.setEncodedValuesString("car_access, car_average_speed, road_access");
         // see docs/core/profiles.md to learn more about profiles
         hopper.setProfiles(new Profile("car").setCustomModel(GHUtility.loadCustomModelFromJar("car.json")));
 
@@ -109,7 +109,7 @@ public static void customizableRouting(String ghLoc) {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/routing-custom-graph-cache");
-        hopper.setEncodedValuesString("car_access, car_average_speed");
+        hopper.setEncodedValuesString("car_access, car_average_speed, road_access");
         hopper.setProfiles(new Profile("car_custom").setCustomModel(GHUtility.loadCustomModelFromJar("car.json")));
 
         // The hybrid mode uses the "landmark algorithm" and is up to 15x faster than the flexible mode (Dijkstra).

File: example/src/main/java/com/graphhopper/example/RoutingExampleTC.java
Patch:
@@ -72,7 +72,7 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/routing-tc-graph-cache");
         // add all encoded values that are used in the custom model, these are also available as path details or for client-side custom models
-        hopper.setEncodedValuesString("car_access, car_average_speed");
+        hopper.setEncodedValuesString("car_access, car_average_speed, road_access");
         Profile profile = new Profile("car").setCustomModel(GHUtility.loadCustomModelFromJar("car.json"))
                 // enabling turn costs means OSM turn restriction constraints like 'no_left_turn' will be taken into account for the specified access restrictions
                 // we can also set u_turn_costs (in seconds). i.e. we will consider u-turns at all junctions with a 40s time penalty

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -187,7 +187,7 @@ public Response doGet(
     @Produces(MediaType.APPLICATION_JSON)
     public Response doPost(@NotNull GHRequest request, @Context HttpServletRequest httpReq) {
         if (!request.hasSnapPreventions())
-            request.setSnapPreventions(List.of("tunnel", "bridge", "ferry"));
+            request.setSnapPreventions(snapPreventionsDefault);
 
         StopWatch sw = new StopWatch().start();
         request = ghRequestTransformer.transformRequest(request);

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
-import com.graphhopper.util.TurnCostsConfig;
 import com.graphhopper.reader.dem.SRTMProvider;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -36,9 +36,9 @@
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.TranslationMap;
 import com.graphhopper.util.details.PathDetailsBuilderFactory;
-import io.dropwizard.ConfiguredBundle;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.ConfiguredBundle;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 import org.glassfish.hk2.api.Factory;
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
 

File: web/src/main/java/com/graphhopper/application/GraphHopperApplication.java
Patch:
@@ -24,10 +24,10 @@
 import com.graphhopper.http.GraphHopperBundle;
 import com.graphhopper.http.RealtimeBundle;
 import com.graphhopper.navigation.NavigateResource;
-import io.dropwizard.Application;
 import io.dropwizard.assets.AssetsBundle;
-import io.dropwizard.setup.Bootstrap;
-import io.dropwizard.setup.Environment;
+import io.dropwizard.core.Application;
+import io.dropwizard.core.setup.Bootstrap;
+import io.dropwizard.core.setup.Environment;
 
 import javax.servlet.DispatcherType;
 import java.util.EnumSet;

File: web/src/main/java/com/graphhopper/application/GraphHopperServerConfiguration.java
Patch:
@@ -22,7 +22,7 @@
 import com.graphhopper.http.GraphHopperBundleConfiguration;
 import com.graphhopper.http.RealtimeBundleConfiguration;
 import com.graphhopper.http.RealtimeConfiguration;
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 
 import javax.validation.constraints.NotNull;
 

File: web/src/main/java/com/graphhopper/application/cli/ImportCommand.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.graphhopper.application.GraphHopperServerConfiguration;
 import com.graphhopper.http.GraphHopperManaged;
-import io.dropwizard.cli.ConfiguredCommand;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import net.sourceforge.argparse4j.inf.Namespace;
 
 public class ImportCommand extends ConfiguredCommand<GraphHopperServerConfiguration> {

File: web/src/main/java/com/graphhopper/application/cli/MatchCommand.java
Patch:
@@ -29,8 +29,8 @@
 import com.graphhopper.matching.MatchResult;
 import com.graphhopper.matching.Observation;
 import com.graphhopper.util.*;
-import io.dropwizard.cli.ConfiguredCommand;
-import io.dropwizard.setup.Bootstrap;
+import io.dropwizard.core.cli.ConfiguredCommand;
+import io.dropwizard.core.setup.Bootstrap;
 import net.sourceforge.argparse4j.inf.Argument;
 import net.sourceforge.argparse4j.inf.Namespace;
 import net.sourceforge.argparse4j.inf.Subparser;

File: web/src/test/java/com/graphhopper/application/util/GraphHopperServerTestConfiguration.java
Patch:
@@ -18,8 +18,8 @@
 package com.graphhopper.application.util;
 
 import com.graphhopper.application.GraphHopperServerConfiguration;
+import io.dropwizard.core.server.DefaultServerFactory;
 import io.dropwizard.jetty.HttpConnectorFactory;
-import io.dropwizard.server.DefaultServerFactory;
 
 /**
  * @author thomas aulinger

File: web/src/test/java/com/graphhopper/application/util/TestUtils.java
Patch:
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.application.util;
 
-import io.dropwizard.Configuration;
+import io.dropwizard.core.Configuration;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 
 import javax.ws.rs.client.WebTarget;

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java
Patch:
@@ -112,8 +112,8 @@ public void customModel() throws JsonProcessingException {
                 "\"type\":\"FeatureCollection\",\"features\":[" +
                 "{\"id\":\"area_1\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[48.019324184801185,11.28021240234375],[48.019324184801185,11.53564453125],[48.11843396091691,11.53564453125],[48.11843396091691,11.28021240234375],[48.019324184801185,11.28021240234375]]]},\"properties\":{}}," +
                 "{\"id\":\"area_2\",\"type\":\"Feature\",\"geometry\":{\"type\":\"Polygon\",\"coordinates\":[[[48.15509285476017,11.53289794921875],[48.15509285476017,11.8212890625],[48.281365151571755,11.8212890625],[48.281365151571755,11.53289794921875],[48.15509285476017,11.53289794921875]]]},\"properties\":{}}]}," +
-                "\"speed\":[{\"if\":\"road_class == MOTORWAY\",\"limit_to\":\"80\"}]," +
-                "\"priority\":[{\"if\":\"surface == DIRT\",\"multiply_by\":\"0.7\"},{\"if\":\"surface == SAND\",\"multiply_by\":\"0.6\"}]}");
+                "\"priority\":[{\"if\":\"surface == DIRT\",\"multiply_by\":\"0.7\"},{\"if\":\"surface == SAND\",\"multiply_by\":\"0.6\"}]," +
+                "\"speed\":[{\"if\":\"road_class == MOTORWAY\",\"limit_to\":\"80\"}]}");
         assertEquals(expected, objectMapper.valueToTree(customModelJson));
 
         CustomModel cm = objectMapper.readValue("{\"distance_influence\":null}", CustomModel.class);

File: core/src/main/java/com/graphhopper/util/AngleCalc.java
Patch:
@@ -59,10 +59,9 @@ public double calcOrientation(double lat1, double lon1, double lat2, double lon2
 
     /**
      * Return orientation of line relative to east.
-     * <p>
      *
      * @param exact If false the atan gets calculated faster, but it might contain small errors
-     * @return Orientation in interval -pi to +pi where 0 is east
+     * @return Orientation in interval -pi to +pi where 0 is east and the "bottom" arc is negative
      */
     public double calcOrientation(double lat1, double lon1, double lat2, double lon2, boolean exact) {
         double shrinkFactor = cos(toRadians((lat1 + lat2) / 2));

File: web-api/src/main/java/com/graphhopper/util/CustomModel.java
Patch:
@@ -159,7 +159,8 @@ public String toString() {
     private String createContentString() {
         // used to check against stored custom models, see #2026
         return "distanceInfluence=" + distanceInfluence + "|headingPenalty=" + headingPenalty
-                + "|speedStatements=" + speedStatements + "|priorityStatements=" + priorityStatements + "|areas=" + areas;
+                + "|speedStatements=" + speedStatements + "|priorityStatements=" + priorityStatements
+                + "|areas=" + areas;
     }
 
     /**
@@ -178,8 +179,8 @@ public static CustomModel merge(CustomModel baseModel, CustomModel queryModel) {
             mergedCM.headingPenalty = queryModel.headingPenalty;
         mergedCM.speedStatements.addAll(queryModel.getSpeed());
         mergedCM.priorityStatements.addAll(queryModel.getPriority());
-        mergedCM.addAreas(queryModel.getAreas());
 
+        mergedCM.addAreas(queryModel.getAreas());
         return mergedCM;
     }
 }

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTurnCostsTest.java
Patch:
@@ -23,9 +23,9 @@
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.jackson.ResponsePathDeserializerHelper;
-import com.graphhopper.util.TurnCostsConfig;
 import com.graphhopper.routing.TestProfiles;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.TurnCostsConfig;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.junit.jupiter.api.AfterAll;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMTemporalAccessParser.java
Patch:
@@ -37,7 +37,6 @@
  */
 public class OSMTemporalAccessParser implements TagParser {
 
-    private static final Logger logger = LoggerFactory.getLogger(OSMTemporalAccessParser.class);
     private final Collection<String> conditionals;
     private final Setter restrictionSetter;
     private final DateRangeParser parser;

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonAverageSpeedParser.java
Patch:
@@ -149,8 +149,9 @@ public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way
             speed = PUSHING_SECTION_SPEED;
         } else if (pushingSectionsHighways.contains(highwayValue)) {
             if (way.hasTag("bicycle", "designated") || way.hasTag("bicycle", "official") || way.hasTag("segregated", "yes")
-                    || CYCLEWAY_KEYS.stream().anyMatch(k -> way.getTag(k, "").equals("track")))
-                speed = highwaySpeeds.get("cycleway");
+                    || CYCLEWAY_KEYS.stream().anyMatch(k -> way.getTag(k, "").equals("track"))) {
+speed = trackTypeSpeeds.getOrDefault(trackTypeValue, highwaySpeeds.get("cycleway"));
+            }
             else if (way.hasTag("bicycle", "yes"))
                 speed = 12;
         }

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomWeightingTest.java
Patch:
@@ -409,7 +409,8 @@ public void calcWeightAndTime_withTurnCosts() {
         EdgeIteratorState edge = graph.edge(1, 2).set(avSpeedEnc, 60, 60).setDistance(100);
         setTurnRestriction(graph, 0, 1, 2);
         assertTrue(Double.isInfinite(GHUtility.calcWeightWithTurnWeight(weighting, edge, false, 0)));
-        assertEquals(Long.MAX_VALUE, GHUtility.calcMillisWithTurnMillis(weighting, edge, false, 0));
+        // the time only reflects the time for the edge, the turn time is 0
+        assertEquals(6000, GHUtility.calcMillisWithTurnMillis(weighting, edge, false, 0));
     }
 
     @Test
@@ -419,7 +420,7 @@ public void calcWeightAndTime_uTurnCosts() {
         Weighting weighting = CustomModelParser.createWeighting(encodingManager, new DefaultTurnCostProvider(turnRestrictionEnc, graph.getTurnCostStorage(), 40), customModel);
         EdgeIteratorState edge = graph.edge(0, 1).set(avSpeedEnc, 60, 60).setDistance(100);
         assertEquals(6 + 40, GHUtility.calcWeightWithTurnWeight(weighting, edge, false, 0), 1.e-6);
-        assertEquals((6 + 40) * 1000, GHUtility.calcMillisWithTurnMillis(weighting, edge, false, 0), 1.e-6);
+        assertEquals(6 * 1000, GHUtility.calcMillisWithTurnMillis(weighting, edge, false, 0), 1.e-6);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/parsers/AbstractAccessParser.java
Patch:
@@ -17,8 +17,7 @@ public abstract class AbstractAccessParser implements TagParser {
     protected final List<String> restrictionKeys = new ArrayList<>(5);
     protected final Set<String> restrictedValues = new HashSet<>(5);
 
-    protected final Set<String> intendedValues = new HashSet<>(INTENDED);
-    protected final Set<String> oneways = new HashSet<>(ONEWAYS);
+    protected final Set<String> intendedValues = new HashSet<>(INTENDED); // possible to add "private" later
     // http://wiki.openstreetmap.org/wiki/Mapfeatures#Barrier
     protected final Set<String> barriers = new HashSet<>(5);
     protected final BooleanEncodedValue accessEnc;

File: core/src/main/java/com/graphhopper/routing/util/parsers/FootPriorityParser.java
Patch:
@@ -15,7 +15,6 @@
 import static com.graphhopper.routing.util.parsers.AbstractAverageSpeedParser.isValidSpeed;
 
 public class FootPriorityParser implements TagParser {
-    final Set<String> intendedValues = new HashSet<>(INTENDED);
     final Set<String> safeHighwayTags = new HashSet<>();
     final Map<String, PriorityCode> avoidHighwayTags = new HashMap<>();
     protected HashSet<String> sidewalkValues = new HashSet<>(5);
@@ -108,7 +107,7 @@ void collect(ReaderWay way, TreeMap<Double, PriorityCode> weightToPrioMap) {
         double maxSpeed = Math.max(getMaxSpeed(way, false), getMaxSpeed(way, true));
         if (safeHighwayTags.contains(highway) || (isValidSpeed(maxSpeed) && maxSpeed <= 20)) {
             weightToPrioMap.put(40d, PREFER);
-            if (way.hasTag("tunnel", intendedValues)) {
+            if (way.hasTag("tunnel", INTENDED)) {
                 if (way.hasTag("sidewalk", sidewalksNoValues))
                     weightToPrioMap.put(40d, AVOID);
                 else

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -464,7 +464,7 @@ public void testAlternativeRoutesBike() {
 
         assertEquals(3, rsp.getAll().size());
         // via ramsenthal
-        assertEquals(2697, rsp.getAll().get(0).getTime() / 1000);
+        assertEquals(2636, rsp.getAll().get(0).getTime() / 1000);
         // via unterwaiz
         assertEquals(2985, rsp.getAll().get(1).getTime() / 1000);
         // via eselslohe -> theta; BTW: here smaller time as 2nd alternative due to priority influences time order

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelTest.java
Patch:
@@ -257,7 +257,7 @@ public void testBikeWithPriority() {
                 "}";
         JsonNode path = getPath(jsonQuery);
         double expectedDistance = path.get("distance").asDouble();
-        assertEquals(4781, expectedDistance, 10);
+        assertEquals(4819, expectedDistance, 10);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/countryrules/europe/SwitzerlandCountryRule.java
Patch:
@@ -36,9 +36,6 @@ public Toll getToll(ReaderWay readerWay, Toll currentToll) {
         }
 
         RoadClass roadClass = RoadClass.find(readerWay.getTag("highway", ""));
-        if (currentToll != null)
-            return currentToll;
-
         switch (roadClass) {
             case MOTORWAY:
             case TRUNK:

File: core/src/main/java/com/graphhopper/routing/TestProfiles.java
Patch:
@@ -35,7 +35,7 @@ public static Profile constantSpeed(String name) {
     public static Profile constantSpeed(String name, double speed) {
         Profile profile = new Profile(name);
         CustomModel customModel = new CustomModel();
-        customModel.addToSpeed(Statement.If("true", Statement.Op.LIMIT, String.valueOf(speed)));
+        customModel.addToSpeed(If("true", Statement.Op.LIMIT, String.valueOf(speed)));
         profile.setCustomModel(customModel);
         return profile;
     }

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeightingHelper.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.json.MinMax;
 import com.graphhopper.json.Statement;
-import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.BBox;
@@ -79,8 +78,8 @@ public final double calcMaxSpeed() {
     public final double calcMaxPriority() {
         MinMax minMaxPriority = new MinMax(0, GLOBAL_PRIORITY);
         List<Statement> statements = customModel.getPriority();
-        if (!statements.isEmpty() && "true".equals(statements.get(0).getCondition())) {
-            String value = statements.get(0).getValue();
+        if (!statements.isEmpty() && "true".equals(statements.get(0).condition())) {
+            String value = statements.get(0).value();
             if (lookup.hasEncodedValue(value))
                 minMaxPriority.max = lookup.getDecimalEncodedValue(value).getMaxOrMaxStorableDecimal();
         }

File: core/src/test/java/com/graphhopper/routing/CustomizableConditionalRestrictionsTest.java
Patch:
@@ -17,6 +17,7 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static com.graphhopper.json.Statement.If;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
 
@@ -58,7 +59,7 @@ public void testConditionalAccess() {
 
         rsp = hopper.route(new GHRequest(50.909136, 14.213924, 50.90918, 14.213549).
                 setProfile("foot").
-                setCustomModel(new CustomModel().addToPriority(Statement.If("foot_temporal_access == NO", Statement.Op.MULTIPLY, "0"))).
+                setCustomModel(new CustomModel().addToPriority(If("foot_temporal_access == NO", Statement.Op.MULTIPLY, "0"))).
                 setPathDetails(Arrays.asList(PD_KEY)));
         assertFalse(rsp.hasErrors(), rsp.getErrors().toString());
         assertEquals(16, rsp.getBest().getDistance(), 1);

File: core/src/test/java/com/graphhopper/routing/TrafficChangeWithNodeOrderingReusingTest.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.Random;
 import java.util.stream.Stream;
 
+import static com.graphhopper.json.Statement.If;
 import static java.lang.System.nanoTime;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -67,8 +68,8 @@ public Fixture(int maxDeviationPercentage) {
                     .addWayTagParser(carParser);
             baseCHConfig = CHConfig.nodeBased("base", CustomModelParser.createWeighting(em, TurnCostProvider.NO_TURN_COST_PROVIDER,
                     new CustomModel()
-                            .addToPriority(Statement.If("!car_access", Statement.Op.MULTIPLY, "0"))
-                            .addToSpeed(Statement.If("true", Statement.Op.LIMIT, "car_average_speed")
+                            .addToPriority(If("!car_access", Statement.Op.MULTIPLY, "0"))
+                            .addToSpeed(If("true", Statement.Op.LIMIT, "car_average_speed")
                     )
             ));
             trafficCHConfig = CHConfig.nodeBased("traffic", new RandomDeviationWeighting(baseCHConfig.getWeighting(), accessEnc, speedEnc, maxDeviationPercentage));

File: example/src/main/java/com/graphhopper/example/LowLevelAPIExample.java
Patch:
@@ -1,7 +1,7 @@
 package com.graphhopper.example;
 
-import com.graphhopper.routing.EdgeToEdgeRoutingAlgorithm;
 import com.graphhopper.routing.Dijkstra;
+import com.graphhopper.routing.EdgeToEdgeRoutingAlgorithm;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.ch.CHRoutingAlgorithmFactory;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;

File: web-api/src/main/java/com/graphhopper/jackson/StatementSerializer.java
Patch:
@@ -28,8 +28,8 @@ class StatementSerializer extends JsonSerializer<Statement> {
     @Override
     public void serialize(Statement statement, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
         jsonGenerator.writeStartObject();
-        jsonGenerator.writeStringField(statement.getKeyword().getName(), statement.getCondition());
-        jsonGenerator.writeStringField(statement.getOperation().getName(), statement.getValue());
+        jsonGenerator.writeStringField(statement.keyword().getName(), statement.condition());
+        jsonGenerator.writeStringField(statement.operation().getName(), statement.value());
         jsonGenerator.writeEndObject();
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonAccessParser.java
Patch:
@@ -76,8 +76,8 @@ public WayAccess getAccess(ReaderWay way) {
                 return WayAccess.CAN_SKIP;
         }
 
-        // use the way if it is tagged for bikes
-        if (way.hasTag("bicycle", "dismount") || way.hasTag("highway", "cycleway"))
+        // use the way for pushing
+        if (way.hasTag("bicycle", "dismount"))
             return WayAccess.WAY;
 
         int firstIndex = way.getFirstIndex(restrictionKeys);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java
Patch:
@@ -85,7 +85,7 @@ public static List<String> toOSMRestrictions(TransportationMode mode) {
             case VEHICLE:
                 return Arrays.asList("vehicle", "access");
             case BIKE:
-                return Arrays.asList("bicycle", "vehicle", "access");
+                return Arrays.asList("bicycle", "access");
             case CAR:
                 return Arrays.asList("motorcar", "motor_vehicle", "vehicle", "access");
             case MOTORCYCLE:

File: core/src/test/java/com/graphhopper/routing/util/parsers/AbstractBikeTagParserTester.java
Patch:
@@ -399,6 +399,8 @@ public void testLockedGate() {
         node.setTag("barrier", "gate");
         node.setTag("locked", "yes");
         assertTrue(accessParser.isBarrier(node));
+        node.setTag("bicycle", "yes");
+        assertFalse(accessParser.isBarrier(node));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -176,7 +176,7 @@ public void readGraph() throws IOException {
                 .setWorkerThreads(config.getWorkerThreads())
                 .build();
         waySegmentParser.readOSM(osmFile);
-        osmDataDate = waySegmentParser.getTimeStamp();
+        osmDataDate = waySegmentParser.getTimestamp();
         if (baseGraph.getNodes() == 0)
             throw new RuntimeException("Graph after reading OSM must not be empty");
         releaseEverythingExceptRestrictionData();

File: core/src/main/java/com/graphhopper/reader/osm/WaySegmentParser.java
Patch:
@@ -115,7 +115,7 @@ public void readOSM(File osmFile) {
     /**
      * @return the timestamp read from the OSM file, or null if nothing was read yet
      */
-    public Date getTimeStamp() {
+    public Date getTimestamp() {
         return timestamp;
     }
 

File: web-api/src/main/java/com/graphhopper/jackson/ResponsePathSerializer.java
Patch:
@@ -81,7 +81,7 @@ private static void encodeNumber(StringBuilder sb, int num) {
         sb.append((char) (num));
     }
 
-    public record Info(List<String> copyrights, long took, String roadDataTimeStamp) {
+    public record Info(List<String> copyrights, long took, String roadDataTimestamp) {
     }
 
     public static ObjectNode jsonObject(GHResponse ghRsp, Info info, boolean enableInstructions,

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -169,4 +169,4 @@ String getFileName(double lat, double lon) {
     String getDownloadURL(double lat, double lon) {
         return getFileName(lat, lon) + ".hgt.zip";
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -2831,13 +2831,13 @@ void legDistanceWithDuplicateEndpoint(boolean simplifyResponse) {
         request.setPathDetails(List.of("leg_distance"));
         GHResponse routeRsp = hopper.route(request);
         assertEquals(4, routeRsp.getBest().getPoints().size());
-        assertEquals(40.075, routeRsp.getBest().getDistance(), 1.e-3);
+        assertEquals(40.080, routeRsp.getBest().getDistance(), 1.e-3);
         List<PathDetail> p = routeRsp.getBest().getPathDetails().get("leg_distance");
         // there should be two consecutive leg_distance intervals, even though the second is empty: [0,3] and [3,3], see #2915
         assertEquals(2, p.size());
         assertEquals(0, p.get(0).getFirst());
         assertEquals(3, p.get(0).getLast());
-        assertEquals(40.075, (double) p.get(0).getValue(), 1.e-3);
+        assertEquals(40.080, (double) p.get(0).getValue(), 1.e-3);
         assertEquals(3, p.get(1).getFirst());
         assertEquals(3, p.get(1).getLast());
         assertEquals(0.0, (double) p.get(1).getValue(), 1.e-3);

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -282,7 +282,7 @@ public void test_edgeDistanceWhenFirstNodeIsMissing_issue2221() {
         while (iter.next()) {
             assertEquals(DistanceCalcEarth.DIST_EARTH.calcDistance(iter.fetchWayGeometry(FetchMode.ALL)), iter.getDistance(), 1.e-3);
         }
-        assertEquals(35.609, graph.getEdgeIteratorState(0, Integer.MIN_VALUE).getDistance(), 1.e-3);
+        assertEquals(35.612, graph.getEdgeIteratorState(0, Integer.MIN_VALUE).getDistance(), 1.e-3);
         assertEquals(75.256, graph.getEdgeIteratorState(1, Integer.MIN_VALUE).getDistance(), 1.e-3);
         assertEquals(143.332, graph.getEdgeIteratorState(2, Integer.MIN_VALUE).getDistance(), 1.e-3);
     }

File: web-api/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -257,7 +257,7 @@ public static int degreeToInt(double deg) {
             return Integer.MAX_VALUE;
         if (deg <= -Double.MAX_VALUE)
             return -Integer.MAX_VALUE;
-        return (int) (deg * DEGREE_FACTOR);
+        return (int) Math.round(deg * DEGREE_FACTOR);
     }
 
     /**
@@ -279,7 +279,7 @@ public static double intToDegree(int storedInt) {
     public static int eleToUInt(double ele) {
         if (ele < -1000) return -1000;
         if (ele >= Integer.MAX_VALUE / ELE_FACTOR - 1000) return Integer.MAX_VALUE;
-        return (int) ((ele + 1000) * ELE_FACTOR); // enough for smallest value is -414m
+        return (int) Math.round((ele + 1000) * ELE_FACTOR); // enough for smallest value is -414m
     }
 
     /**

File: core/src/main/java/com/graphhopper/util/details/AbstractPathDetailsBuilder.java
Patch:
@@ -77,7 +77,7 @@ public void endInterval(int lastIndex) {
     }
 
     public Map.Entry<String, List<PathDetail>> build() {
-        return new MapEntry(getName(), pathDetails);
+        return new MapEntry<>(getName(), pathDetails);
     }
 
     @Override
@@ -89,4 +89,4 @@ public String getName() {
     public String toString() {
         return getName();
     }
-}
\ No newline at end of file
+}

File: web-api/src/main/java/com/graphhopper/ResponsePath.java
Patch:
@@ -267,8 +267,9 @@ public void addPathDetails(Map<String, List<PathDetail>> details) {
         }
         for (Map.Entry<String, List<PathDetail>> detailEntry : details.entrySet()) {
             String key = detailEntry.getKey();
-            if (this.pathDetails.containsKey(key)) {
-                this.pathDetails.get(key).addAll(detailEntry.getValue());
+            List<PathDetail> pathDetails = this.pathDetails.get(key);
+            if (pathDetails != null) {
+                pathDetails.addAll(detailEntry.getValue());
             } else {
                 this.pathDetails.put(key, detailEntry.getValue());
             }

File: core/src/main/java/com/graphhopper/routing/querygraph/QueryGraph.java
Patch:
@@ -280,7 +280,7 @@ public TurnCostStorage getTurnCostStorage() {
 
     @Override
     public Weighting wrapWeighting(Weighting weighting) {
-        return new QueryGraphWeighting(weighting, baseGraph.getNodes(), baseGraph.getEdges(), queryOverlay.getClosestEdges());
+        return new QueryGraphWeighting(baseGraph, weighting, queryOverlay.getClosestEdges());
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/parsers/RestrictionSetter.java
Patch:
@@ -31,9 +31,8 @@
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.FetchMode;
 
-import java.util.List;
+import java.util.*;
 
 import static com.graphhopper.reader.osm.RestrictionType.NO;
 import static com.graphhopper.reader.osm.RestrictionType.ONLY;

File: core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
Patch:
@@ -60,7 +60,7 @@ static int calculateSign(double prevLatitude, double prevLongitude, double latit
             return Instruction.TURN_SHARP_RIGHT;
     }
 
-    static boolean isNameSimilar(String name1, String name2) {
+    static boolean isSameName(String name1, String name2) {
         // We don't want two empty names to be similar (they usually don't have names if they are random tracks)
         if (name1 == null || name2 == null || name1.isEmpty() || name2.isEmpty())
             return false;

File: core/src/main/java/com/graphhopper/storage/BaseGraphNodesAndEdges.java
Patch:
@@ -84,7 +84,7 @@ public BaseGraphNodesAndEdges(Directory dir, boolean withElevation, boolean with
         E_DIST = 16;
         E_KV = 20;
         E_FLAGS = 24;
-        E_GEO = E_FLAGS + bytesForFlags + 4;
+        E_GEO = E_FLAGS + bytesForFlags;
         edgeEntryBytes = E_GEO + 5;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/MaxSpeedCalculator.java
Patch:
@@ -120,8 +120,8 @@ public void createDataAccessForParser(Directory directory) {
         EncodedValue.InitializerConfig config = new EncodedValue.InitializerConfig();
         ruralMaxSpeedEnc.init(config);
         urbanMaxSpeedEnc.init(config);
-        if (config.getRequiredBits() > 16)
-            throw new IllegalStateException("bits are not sufficient " + config.getRequiredBits());
+        if (config.getRequiredBytes() > 2)
+            throw new IllegalStateException("bytes are not sufficient " + config.getRequiredBytes());
 
         parser.init(ruralMaxSpeedEnc, urbanMaxSpeedEnc, internalMaxSpeedStorage);
     }

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -59,9 +59,9 @@ public class Constants {
     private static final int JVM_MINOR_VERSION;
 
     public static final int VERSION_NODE = 9;
-    public static final int VERSION_EDGE = 22;
+    public static final int VERSION_EDGE = 23;
     // this should be increased whenever the format of the serialized EncodingManager is changed
-    public static final int VERSION_EM = 3;
+    public static final int VERSION_EM = 4;
     public static final int VERSION_SHORTCUT = 9;
     public static final int VERSION_NODE_CH = 0;
     public static final int VERSION_GEOMETRY = 6;

File: core/src/test/java/com/graphhopper/routing/subnetwork/EdgeBasedTarjanSCCTest.java
Patch:
@@ -48,7 +48,7 @@ public EdgeBasedTarjanSCCTest() {
         speedEnc = new DecimalEncodedValueImpl("speed", 5, 5, true);
         EncodedValue.InitializerConfig evConf = new EncodedValue.InitializerConfig();
         speedEnc.init(evConf);
-        g = new BaseGraph.Builder(evConf.getRequiredInts()).create();
+        g = new BaseGraph.Builder(evConf.getRequiredBytes()).create();
         fwdAccessFilter = (prev, edge) -> edge.get(speedEnc) > 0;
     }
 

File: core/src/test/java/com/graphhopper/routing/subnetwork/TarjanSCCTest.java
Patch:
@@ -43,7 +43,7 @@ public TarjanSCCTest() {
         speedEnc = new DecimalEncodedValueImpl("speed", 5, 5, true);
         EncodedValue.InitializerConfig evConf = new EncodedValue.InitializerConfig();
         speedEnc.init(evConf);
-        graph = new BaseGraph.Builder(evConf.getRequiredInts()).create();
+        graph = new BaseGraph.Builder(evConf.getRequiredBytes()).create();
         edgeFilter = edge -> edge.get(speedEnc) > 0;
     }
 

File: core/src/test/java/com/graphhopper/routing/util/CurvatureCalculatorTest.java
Patch:
@@ -15,12 +15,12 @@ class CurvatureCalculatorTest {
     @Test
     public void testCurvature() {
         CurvatureCalculator calculator = new CurvatureCalculator(em.getDecimalEncodedValue(Curvature.KEY));
-        ArrayEdgeIntAccess intAccess = new ArrayEdgeIntAccess(em.getIntsForFlags());
+        ArrayEdgeIntAccess intAccess = ArrayEdgeIntAccess.createFromBytes(em.getBytesForFlags());
         int edgeId = 0;
         calculator.handleWayTags(edgeId, intAccess, getStraightWay(), null);
         double valueStraight = em.getDecimalEncodedValue(Curvature.KEY).getDecimal(false, edgeId, intAccess);
 
-        intAccess = new ArrayEdgeIntAccess(em.getIntsForFlags());
+        intAccess = ArrayEdgeIntAccess.createFromBytes(em.getBytesForFlags());
         calculator.handleWayTags(edgeId, intAccess, getCurvyWay(), null);
         double valueCurvy = em.getDecimalEncodedValue(Curvature.KEY).getDecimal(false, edgeId, intAccess);
 
@@ -50,4 +50,4 @@ private ReaderWay getCurvyWay() {
         return way;
     }
 
-}
\ No newline at end of file
+}

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeTagParserTest.java
Patch:
@@ -495,7 +495,7 @@ public void testCalcPriority() {
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "icn");
         IntsRef relFlags = osmParsers.handleRelationTags(osmRel, osmParsers.createRelationFlags());
-        EdgeIntAccess edgeIntAccess = new ArrayEdgeIntAccess(encodingManager.getIntsForFlags());
+        EdgeIntAccess edgeIntAccess = ArrayEdgeIntAccess.createFromBytes(encodingManager.getBytesForFlags());
         int edgeId = 0;
         osmParsers.handleWayTags(edgeId, edgeIntAccess, osmWay, relFlags);
         assertEquals(RouteNetwork.INTERNATIONAL, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, edgeId, edgeIntAccess));
@@ -505,15 +505,15 @@ public void testCalcPriority() {
         osmRel = new ReaderRelation(1);
         osmWay = new ReaderWay(1);
         osmWay.setTag("highway", "track");
-        edgeIntAccess = new ArrayEdgeIntAccess(encodingManager.getIntsForFlags());
+        edgeIntAccess = ArrayEdgeIntAccess.createFromBytes(encodingManager.getBytesForFlags());
         osmParsers.handleWayTags(edgeId, edgeIntAccess, osmWay, osmParsers.createRelationFlags());
         assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, edgeId, edgeIntAccess));
         assertEquals(PriorityCode.getValue(UNCHANGED.getValue()), priorityEnc.getDecimal(false, edgeId, edgeIntAccess), .1);
 
         // unknown highway tags will be excluded but priority will be unchanged
         osmWay = new ReaderWay(1);
         osmWay.setTag("highway", "whatever");
-        edgeIntAccess = new ArrayEdgeIntAccess(encodingManager.getIntsForFlags());
+        edgeIntAccess = ArrayEdgeIntAccess.createFromBytes(encodingManager.getBytesForFlags());
         osmParsers.handleWayTags(edgeId, edgeIntAccess, osmWay, osmParsers.createRelationFlags());
         assertFalse(accessParser.getAccessEnc().getBool(false, edgeId, edgeIntAccess));
         assertEquals(RouteNetwork.MISSING, encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class).getEnum(false, edgeId, edgeIntAccess));

File: core/src/test/java/com/graphhopper/routing/util/parsers/RacingBikeTagParserTest.java
Patch:
@@ -117,7 +117,7 @@ public void testSacScale() {
 
     @Test
     public void testGetSpeed() {
-        EdgeIntAccess edgeIntAccess = new ArrayEdgeIntAccess(encodingManager.getIntsForFlags());
+        EdgeIntAccess edgeIntAccess = ArrayEdgeIntAccess.createFromBytes(encodingManager.getBytesForFlags());
         int edgeId = 0;
         avgSpeedEnc.setDecimal(false, edgeId, edgeIntAccess, 10);
         ReaderWay way = new ReaderWay(1);
@@ -293,7 +293,7 @@ public void testPriority_avoidanceOfHighMaxSpeed() {
 
     private void assertPriorityAndSpeed(EncodingManager encodingManager, DecimalEncodedValue priorityEnc, DecimalEncodedValue speedEnc,
                                         List<TagParser> parsers, PriorityCode expectedPrio, double expectedSpeed, ReaderWay way) {
-        EdgeIntAccess edgeIntAccess = new ArrayEdgeIntAccess(encodingManager.getIntsForFlags());
+        EdgeIntAccess edgeIntAccess = ArrayEdgeIntAccess.createFromBytes(encodingManager.getBytesForFlags());
         int edgeId = 0;
         for (TagParser p : parsers) p.handleWayTags(edgeId, edgeIntAccess, way, null);
         assertEquals(PriorityCode.getValue(expectedPrio.getValue()), priorityEnc.getDecimal(false, edgeId, edgeIntAccess), 0.01);

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -665,8 +665,7 @@ public void test8AndMoreBytesForEdgeFlags() {
         IntsRef intsRef = manager.createEdgeFlags();
         intsRef.ints[0] = Integer.MAX_VALUE / 3;
         edge.setFlags(intsRef);
-        // System.out.println(BitUtil.LITTLE.toBitString(Long.MAX_VALUE / 3) + "\n" + BitUtil.LITTLE.toBitString(edge.getFlags()));
-        assertEquals(Integer.MAX_VALUE / 3, edge.getFlags().ints[0]);
+        assertEquals(Integer.MAX_VALUE / 3, intsRef.ints[0]);
         graph.close();
 
         graph = new BaseGraph.Builder(manager).create();

File: core/src/test/java/com/graphhopper/storage/BaseGraphTest.java
Patch:
@@ -273,7 +273,7 @@ public void outOfBounds() {
     public void setGetFlagsRaw() {
         BaseGraph graph = new BaseGraph.Builder(1).create();
         EdgeIteratorState edge = graph.edge(0, 1);
-        IntsRef flags = new IntsRef(graph.getIntsForFlags());
+        IntsRef flags = encodingManager.createEdgeFlags();
         flags.ints[0] = 10;
         edge.setFlags(flags);
         assertEquals(10, edge.getFlags().ints[0]);

File: core/src/test/java/com/graphhopper/util/DepthFirstSearchTest.java
Patch:
@@ -67,7 +67,7 @@ public boolean goFurther(int v) {
         BooleanEncodedValue accessEnc = new SimpleBooleanEncodedValue("access", true);
         EncodedValue.InitializerConfig evConf = new EncodedValue.InitializerConfig();
         accessEnc.init(evConf);
-        BaseGraph g = new BaseGraph.Builder(evConf.getRequiredInts()).create();
+        BaseGraph g = new BaseGraph.Builder(evConf.getRequiredBytes()).create();
         g.edge(1, 2).setDistance(1).set(accessEnc, true, false);
         g.edge(1, 5).setDistance(1).set(accessEnc, true, false);
         g.edge(1, 4).setDistance(1).set(accessEnc, true, false);
@@ -103,7 +103,7 @@ public boolean goFurther(int v) {
         BooleanEncodedValue accessEnc = new SimpleBooleanEncodedValue("access", true);
         EncodedValue.InitializerConfig evConf = new EncodedValue.InitializerConfig();
         accessEnc.init(evConf);
-        BaseGraph g = new BaseGraph.Builder(evConf.getRequiredInts()).create();
+        BaseGraph g = new BaseGraph.Builder(evConf.getRequiredBytes()).create();
         g.edge(1, 2).setDistance(1).set(accessEnc, true, false);
         g.edge(1, 4).setDistance(1).set(accessEnc, true, true);
         g.edge(1, 3).setDistance(1).set(accessEnc, true, false);

File: example/src/main/java/com/graphhopper/example/LocationIndexExample.java
Patch:
@@ -39,8 +39,7 @@ public static void graphhopperLocationIndex(String relDir) {
 
     public static void lowLevelLocationIndex() {
         // If you don't use the GraphHopper class you have to use the low level API:
-        BaseGraph graph = new BaseGraph.Builder(1).create();
-
+        BaseGraph graph = new BaseGraph.Builder(4).create();
         graph.edge(0, 1).setKeyValues(Map.of("name", new KValue( "test edge")));
         graph.getNodeAccess().setNode(0, 12, 42);
         graph.getNodeAccess().setNode(1, 12.01, 42.01);

File: tools/src/main/java/com/graphhopper/tools/GraphSpeedMeasurement.java
Patch:
@@ -90,7 +90,7 @@ public static void main(String[] strs) {
                         }
                         return (int) sum;
                     });
-            result.add(String.format("bits: %d, ints: %d, took: %.2fms, checksum: %d", speedBits, em.getIntsForFlags(), t.getSum(), t.getDummySum()));
+            result.add(String.format("bits: %d, bytes: %d, took: %.2fms, checksum: %d", speedBits, em.getBytesForFlags(), t.getSum(), t.getDummySum()));
             System.out.println(result.get(result.size() - 1));
         }
         System.out.println();

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -42,10 +42,10 @@ public GraphHopperManaged(GraphHopperConfig configuration) {
     @Override
     public void start() {
         graphHopper.importOrLoad();
-        logger.info("loaded graph at:{}, data_reader_file:{}, encoded values:{}, {} ints for edge flags, {}",
+        logger.info("loaded graph at:{}, data_reader_file:{}, encoded values:{}, {} bytes for edge flags, {}",
                 graphHopper.getGraphHopperLocation(), graphHopper.getOSMFile(),
                 graphHopper.getEncodingManager().toEncodedValuesAsString(),
-                graphHopper.getEncodingManager().getIntsForFlags(),
+                graphHopper.getEncodingManager().getBytesForFlags(),
                 graphHopper.getBaseGraph().toDetailsString());
     }
 

File: core/src/main/java/com/graphhopper/reader/osm/OSMNodeData.java
Patch:
@@ -252,9 +252,9 @@ public void addCoordinatesToPointList(long id, PointList pointList) {
     public void setTags(ReaderNode node) {
         int tagIndex = Math.toIntExact(nodeTagIndicesByOsmNodeIds.get(node.getId()));
         if (tagIndex == -1) {
-            long pointer = nodeKVStorage.add(node.getTags().entrySet().stream().map(m -> new KVStorage.KeyValue(m.getKey(),
-                            m.getValue() instanceof String ? KVStorage.cutString((String) m.getValue()) : m.getValue())).
-                    collect(Collectors.toList()));
+            long pointer = nodeKVStorage.add(node.getTags().entrySet().stream().collect(
+                    Collectors.toMap(Map.Entry::getKey, // same key
+                            e -> new KVStorage.KValue(e.getValue() instanceof String ? KVStorage.cutString((String) e.getValue()) : e.getValue()))));
             if (pointer > Integer.MAX_VALUE)
                 throw new IllegalStateException("Too many key value pairs are stored in node tags, was " + pointer);
             nodeTagIndicesByOsmNodeIds.put(node.getId(), (int) pointer);

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -24,7 +24,8 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
 
-import static com.graphhopper.search.KVStorage.KeyValue.*;
+import static com.graphhopper.search.KVStorage.KValue.*;
+import static com.graphhopper.util.Parameters.Details.*;
 
 /**
  * This class calculates instructions from the edges in a Path.

File: core/src/main/java/com/graphhopper/routing/querygraph/VirtualEdgeIterator.java
Patch:
@@ -27,6 +27,7 @@
 import com.graphhopper.util.PointList;
 
 import java.util.List;
+import java.util.Map;
 
 /**
  * @author Peter Karich
@@ -262,12 +263,12 @@ public String getName() {
     }
 
     @Override
-    public List<KVStorage.KeyValue> getKeyValues() {
+    public Map<String, KVStorage.KValue> getKeyValues() {
         return getCurrentEdge().getKeyValues();
     }
 
     @Override
-    public EdgeIteratorState setKeyValues(List<KVStorage.KeyValue> list) {
+    public EdgeIteratorState setKeyValues(Map<String, KVStorage.KValue> list) {
         return getCurrentEdge().setKeyValues(list);
     }
 

File: core/src/test/java/com/graphhopper/routing/querygraph/QueryGraphTest.java
Patch:
@@ -1037,9 +1037,9 @@ public void directedKeyValues() {
         NodeAccess na = g.getNodeAccess();
         na.setNode(0, 1, 0);
         na.setNode(1, 1, 2.5);
-        ArrayList<KVStorage.KeyValue> kvs = new ArrayList<>();
-        kvs.add(new KVStorage.KeyValue("a", "hello", true, false));
-        kvs.add(new KVStorage.KeyValue("b", "world", false, true));
+        Map<String, KVStorage.KValue> kvs = new HashMap<>();
+        kvs.put("a", new KVStorage.KValue("hello", null));
+        kvs.put("b", new KVStorage.KValue(null, "world"));
         EdgeIteratorState origEdge = g.edge(0, 1).setDistance(10).set(speedEnc, 60, 60).setKeyValues(kvs);
 
         // keyValues List stays the same

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/analysis/PtGraphAsAdjacencyList.java
Patch:
@@ -11,7 +11,7 @@
 import com.graphhopper.util.shapes.BBox;
 
 import java.util.Iterator;
-import java.util.List;
+import java.util.Map;
 
 class PtGraphAsAdjacencyList implements Graph {
     private final PtGraph ptGraph;
@@ -304,12 +304,12 @@ public String getName() {
             }
 
             @Override
-            public EdgeIteratorState setKeyValues(List<KVStorage.KeyValue> list) {
+            public EdgeIteratorState setKeyValues(Map<String, KVStorage.KValue> map) {
                 throw new RuntimeException();
             }
 
             @Override
-            public List<KVStorage.KeyValue> getKeyValues() {
+            public Map<String, KVStorage.KValue> getKeyValues() {
                 throw new RuntimeException();
             }
 

File: web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java
Patch:
@@ -36,7 +36,9 @@
 
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
 
+import static com.graphhopper.util.Parameters.Details.STREET_NAME;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class ExtendedJsonResponseTest {
@@ -88,7 +90,7 @@ private EdgeIteratorState getEdgeIterator() {
         pointList.add(-3.4445, -38.9990);
         pointList.add(-3.5550, -38.7990);
         return new VirtualEdgeIteratorState(0, 0, 0, 1, 10, new IntsRef(1),
-                KVStorage.KeyValue.createKV(KVStorage.KeyValue.STREET_NAME, "test of iterator"), pointList, false);
+                Map.of(STREET_NAME, new KVStorage.KValue("test of iterator")), pointList, false);
     }
 
 }

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -59,7 +59,7 @@ public class Constants {
     private static final int JVM_MINOR_VERSION;
 
     public static final int VERSION_NODE = 9;
-    public static final int VERSION_EDGE = 21;
+    public static final int VERSION_EDGE = 22;
     // this should be increased whenever the format of the serialized EncodingManager is changed
     public static final int VERSION_EM = 3;
     public static final int VERSION_SHORTCUT = 9;

File: core/src/main/java/com/graphhopper/routing/OSMReaderConfig.java
Patch:
@@ -25,7 +25,7 @@ public class OSMReaderConfig {
     private List<String> ignoredHighways = new ArrayList<>();
     private boolean parseWayNames = true;
     private String preferredLanguage = "";
-    private double maxWayPointDistance = 1;
+    private double maxWayPointDistance = 0.5;
     private double elevationMaxWayPointDistance = Double.MAX_VALUE;
     private String smoothElevation = "";
 

File: core/src/main/java/com/graphhopper/routing/Router.java
Patch:
@@ -296,7 +296,7 @@ protected GHResponse routeVia(GHRequest request, Solver solver) {
     private PathMerger createPathMerger(GHRequest request, Weighting weighting, Graph graph) {
         boolean enableInstructions = request.getHints().getBool(Parameters.Routing.INSTRUCTIONS, routerConfig.isInstructionsEnabled());
         boolean calcPoints = request.getHints().getBool(Parameters.Routing.CALC_POINTS, routerConfig.isCalcPoints());
-        double wayPointMaxDistance = request.getHints().getDouble(Parameters.Routing.WAY_POINT_MAX_DISTANCE, 1d);
+        double wayPointMaxDistance = request.getHints().getDouble(Parameters.Routing.WAY_POINT_MAX_DISTANCE, 0.5);
         double elevationWayPointMaxDistance = request.getHints().getDouble(ELEVATION_WAY_POINT_MAX_DISTANCE, routerConfig.getElevationWayPointMaxDistance());
 
         RamerDouglasPeucker peucker = new RamerDouglasPeucker().

File: reader-gtfs/src/test/java/com/graphhopper/FreeWalkIT.java
Patch:
@@ -125,7 +125,7 @@ public void testFastWalking() {
         assertThat(walkSolution.getLegs().get(0).getDepartureTime().toInstant().atZone(zoneId).toLocalTime())
                 .isEqualTo(LocalTime.parse("06:40"));
         assertThat(walkSolution.getLegs().get(0).getArrivalTime().toInstant().atZone(zoneId).toLocalTime())
-                .isEqualTo(LocalTime.parse("06:41:07.025"));
+                .isEqualTo(LocalTime.parse("06:41:07.031"));
         assertThat(walkSolution.getLegs().size()).isEqualTo(1);
         assertThat(walkSolution.getNumChanges()).isEqualTo(-1);
     }

File: web-bundle/src/main/java/com/graphhopper/resources/MapMatchingResource.java
Patch:
@@ -90,7 +90,7 @@ public MapMatchingResource(GraphHopperConfig config, GraphHopper graphHopper, Pr
     public Response match(
             @NotNull Gpx gpx,
             @Context UriInfo uriInfo,
-            @QueryParam(WAY_POINT_MAX_DISTANCE) @DefaultValue("1") double minPathPrecision,
+            @QueryParam(WAY_POINT_MAX_DISTANCE) @DefaultValue("0.5") double minPathPrecision,
             @QueryParam("type") @DefaultValue("json") String outType,
             @QueryParam(INSTRUCTIONS) @DefaultValue("true") boolean instructions,
             @QueryParam(CALC_POINTS) @DefaultValue("true") boolean calcPoints,

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -82,7 +82,7 @@ public RouteResource(GraphHopperConfig config, GraphHopper graphHopper, ProfileR
     public Response doGet(
             @Context HttpServletRequest httpReq,
             @Context UriInfo uriInfo,
-            @QueryParam(WAY_POINT_MAX_DISTANCE) @DefaultValue("1") double minPathPrecision,
+            @QueryParam(WAY_POINT_MAX_DISTANCE) @DefaultValue("0.5") double minPathPrecision,
             @QueryParam(ELEVATION_WAY_POINT_MAX_DISTANCE) Double minPathElevationPrecision,
             @QueryParam("point") @NotNull List<GHPointParam> pointParams,
             @QueryParam("type") @DefaultValue("json") String type,

File: web/src/test/java/com/graphhopper/application/MapMatchingTest.java
Patch:
@@ -169,7 +169,7 @@ public void testLongTrackWithTwoPoints(PMap hints) {
                 new Observation(new GHPoint(51.23, 12.18)),
                 new Observation(new GHPoint(51.45, 12.59)));
         MatchResult mr = mapMatching.match(inputGPXEntries);
-        assertEquals(57649.2, mr.getMatchLength(), 1.0);
+        assertEquals(57651, mr.getMatchLength(), 1.0);
     }
 
     @ParameterizedTest

File: web/src/test/java/com/graphhopper/application/resources/IsochroneResourceTest.java
Patch:
@@ -369,6 +369,6 @@ public void requestTenBucketsIssue2094() {
 
         Polygon beforeLastPolygon = (Polygon) collection.getFeatures().get(collection.getFeatures().size() - 2).getGeometry();
         assertTrue(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.564136, 42.524938))));
-        assertFalse(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.571474, 42.529176))));
+        assertFalse(beforeLastPolygon.contains(geometryFactory.createPoint(new Coordinate(1.575551, 42.532528))));
     }
 }

File: web/src/test/java/com/graphhopper/application/resources/MVTResourceTest.java
Patch:
@@ -81,7 +81,7 @@ public void testBasicMvtQuery() throws IOException {
         VectorTileDecoder.Feature feature = features.iterator().next();
         Map<String, Object> attributes = feature.getAttributes();
         Geometry geometry = feature.getGeometry();
-        assertEquals(48, geometry.getCoordinates().length);
+        assertEquals(51, geometry.getCoordinates().length);
         assertEquals("Camì de les Pardines", attributes.get(STREET_NAME));
     }
 

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelTest.java
Patch:
@@ -310,7 +310,7 @@ public void testHgv() {
                 "   \"priority\": [{\"if\": \"car_access == false || hgv == NO || max_width < 3 || max_height < 4\", \"multiply_by\": \"0\"}]}}";
         JsonNode path = getPath(body);
         assertEquals(7314, path.get("distance").asDouble(), 10);
-        assertEquals(943 * 1000, path.get("time").asLong(), 1_000);
+        assertEquals(944 * 1000, path.get("time").asLong(), 1_000);
     }
 
     private void assertMessageStartsWith(JsonNode jsonNode, String message) {

File: core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
Patch:
@@ -262,7 +262,8 @@ public boolean apply(final int traversalId, final SPTEntry fromSPTEntry) {
                     return true;
 
                 // (1) skip too long paths
-                final double weight = fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath();
+                final double weight = fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath()
+                        + weighting.calcTurnWeight(fromSPTEntry.edge, fromSPTEntry.adjNode, toSPTEntry.edge);
                 if (weight > maxWeight)
                     return true;
 
@@ -341,7 +342,7 @@ public boolean apply(final int traversalId, final SPTEntry fromSPTEntry) {
 
                         Collections.sort(alternatives, ALT_COMPARATOR);
                         if (alternatives.get(0) != bestAlt)
-                            throw new IllegalStateException("best path should be always first entry");
+                            throw new IllegalStateException("best path should be always first entry " + bestAlt.path.getWeight() + " vs " + alternatives.get(0).path.getWeight());
 
                         if (alternatives.size() > maxPaths)
                             alternatives.subList(maxPaths, alternatives.size()).clear();

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -295,7 +295,7 @@ protected void importOSM() {
     private GraphHopperConfig createConfigFromArgs(PMap args) {
         GraphHopperConfig ghConfig = new GraphHopperConfig(args);
         vehicle = args.getString("measurement.vehicle", "car");
-        ghConfig.putObject("graph.encoded_values", VehicleAccess.key(vehicle) + "," + VehicleSpeed.key(vehicle));
+        ghConfig.putObject("graph.encoded_values", ghConfig.getString("graph.encoded_values", "") + ", " + VehicleAccess.key(vehicle) + "," + VehicleSpeed.key(vehicle));
         boolean turnCosts = args.getBool("measurement.turn_costs", false);
         int uTurnCosts = args.getInt("measurement.u_turn_costs", 40);
         String weighting = args.getString("measurement.weighting", "custom");

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeTagParserTest.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.reader.ReaderNode;
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.PriorityCode;
@@ -335,6 +334,8 @@ public void testCycleway() {
         way.setTag("highway", "primary");
         way.setTag("cycleway:right", "lane");
         assertPriority(SLIGHT_PREFER, way);
+        way.setTag("cycleway:left", "no");
+        assertPriority(SLIGHT_PREFER, way);
 
         way.clearTags();
         way.setTag("highway", "primary");

File: core/src/main/java/com/graphhopper/routing/ev/MaxSlope.java
Patch:
@@ -7,6 +7,6 @@ public class MaxSlope {
     public static final String KEY = "max_slope";
 
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 5, 1, false);
+        return new DecimalEncodedValueImpl(KEY, 5, 0, 1, true, false, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/weighting/custom/ConditionalExpressionVisitor.java
Patch:
@@ -108,7 +108,7 @@ public Boolean visitRvalue(Java.Rvalue rv) throws Exception {
                     }
                 }
             }
-            invalidMessage = mi.methodName + " is an illegal method in a conditional expression";
+            invalidMessage = mi.methodName + " is an illegal method in a conditional expression " + allowedMethods.toString();
             return false;
         } else if (rv instanceof Java.ParenthesizedExpression) {
             return ((Java.ParenthesizedExpression) rv).value.accept(this);

File: core/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -370,6 +370,7 @@ public void testFootAndCar() {
 
         // now all ways are imported
         instance = new GraphHopper().
+                setEncodedValuesString("car_access, car_average_speed, foot_access, foot_average_speed").
                 setProfiles(
                         TestProfiles.accessAndSpeed(profile1, "car"),
                         TestProfiles.accessAndSpeed(profile2, "foot")
@@ -575,6 +576,7 @@ public void testFootOnly() {
         final String profile = "foot_profile";
         instance = new GraphHopper().
                 setStoreOnFlush(false).
+                setEncodedValuesString("foot_access, foot_priority, foot_average_speed").
                 setProfiles(TestProfiles.accessSpeedAndPriority(profile, "foot")).
                 setGraphHopperLocation(ghLoc).
                 setOSMFile(testOsm3);
@@ -604,6 +606,7 @@ public void testVia() {
                 init(new GraphHopperConfig().
                         putObject("datareader.file", testOsm3).
                         putObject("prepare.min_network_size", 0).
+                        putObject("graph.encoded_values", "car_access, car_average_speed").
                         putObject("import.osm.ignored_highways", "").
                         setProfiles(List.of(TestProfiles.accessAndSpeed(profile, "car"))).
                         setCHProfiles(Collections.singletonList(new CHProfile(profile)))

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -1001,7 +1001,7 @@ public GraphHopperFacade(String osmFile, String prefLang) {
             setStoreOnFlush(false);
             setOSMFile(osmFile);
             setGraphHopperLocation(dir);
-            String str = "max_width,max_height,max_weight";
+            String str = "max_width,max_height,max_weight,foot_access, foot_priority, foot_average_speed, car_access, car_average_speed, bike_access, bike_priority, bike_average_speed";
             setEncodedValuesString(str);
             setProfiles(
                     TestProfiles.accessSpeedAndPriority("foot"),

File: core/src/test/java/com/graphhopper/routing/CustomizableConditionalRestrictionsTest.java
Patch:
@@ -39,6 +39,7 @@ public void testConditionalAccess() {
         hopper.init(new GraphHopperConfig().
                 setProfiles(List.of(TestProfiles.accessAndSpeed("foot", "foot"))).
                 putObject("graph.location", GH_LOCATION).
+                putObject("graph.encoded_values", "foot_temporal_access, foot_access, foot_average_speed").
                 putObject("datareader.file", "../core/files/conditional-restrictions.osm.xml").
                 putObject("prepare.min_network_size", "0").
                 putObject("import.osm.ignored_highways", "").

File: example/src/main/java/com/graphhopper/example/HeadingExample.java
Patch:
@@ -34,6 +34,7 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/heading-graph-cache");
+        hopper.setEncodedValuesString("car_access, road_access, car_average_speed");
         hopper.setProfiles(new Profile("car").
                 setCustomModel(new CustomModel().
                         addToSpeed(If("true", LIMIT, "car_average_speed")).

File: example/src/main/java/com/graphhopper/example/LocationIndexExample.java
Patch:
@@ -20,6 +20,7 @@ public static void main(String[] args) {
 
     public static void graphhopperLocationIndex(String relDir) {
         GraphHopper hopper = new GraphHopper();
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         hopper.setProfiles(new Profile("car").setCustomModel(GHUtility.loadCustomModelFromJar("car.json")));
         hopper.setOSMFile(relDir + "core/files/andorra.osm.pbf");
         hopper.setGraphHopperLocation("./target/locationindex-graph-cache");

File: example/src/main/java/com/graphhopper/example/RoutingExample.java
Patch:
@@ -35,6 +35,8 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         // specify where to store graphhopper files
         hopper.setGraphHopperLocation("target/routing-graph-cache");
 
+        // add all encoded values that are used in the custom model, these are also available as path details or for client-side custom models
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         // see docs/core/profiles.md to learn more about profiles
         hopper.setProfiles(new Profile("car").setCustomModel(GHUtility.loadCustomModelFromJar("car.json")));
 
@@ -107,6 +109,7 @@ public static void customizableRouting(String ghLoc) {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/routing-custom-graph-cache");
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         hopper.setProfiles(new Profile("car_custom").setCustomModel(GHUtility.loadCustomModelFromJar("car.json")));
 
         // The hybrid mode uses the "landmark algorithm" and is up to 15x faster than the flexible mode (Dijkstra).

File: example/src/main/java/com/graphhopper/example/RoutingExampleTC.java
Patch:
@@ -70,6 +70,8 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/routing-tc-graph-cache");
+        // add all encoded values that are used in the custom model, these are also available as path details or for client-side custom models
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         Profile profile = new Profile("car").setCustomModel(GHUtility.loadCustomModelFromJar("car.json"))
                 // enabling turn costs means OSM turn restriction constraints like 'no_left_turn' will be taken into account for the specified access restrictions
                 // we can also set u_turn_costs (in seconds). i.e. we will consider u-turns at all junctions with a 40s time penalty

File: navigation/src/test/java/com/graphhopper/navigation/NavigateResponseConverterTest.java
Patch:
@@ -42,6 +42,7 @@ public static void beforeClass() {
                 setOSMFile(osmFile).
                 setStoreOnFlush(true).
                 setGraphHopperLocation(graphFolder).
+                setEncodedValuesString("car_access, car_average_speed").
                 setProfiles(TestProfiles.accessAndSpeed(profile, "car")).
                 importOrLoad();
     }

File: reader-gtfs/src/test/java/com/graphhopper/AnotherAgencyIT.java
Patch:
@@ -57,6 +57,7 @@ public static void init() {
         ghConfig.putObject("import.osm.ignored_highways", "");
         ghConfig.putObject("datareader.file", "files/beatty.osm");
         ghConfig.putObject("gtfs.file", "files/sample-feed,files/another-sample-feed");
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         ghConfig.setProfiles(List.of(
                 TestProfiles.accessSpeedAndPriority("foot"),
                 TestProfiles.accessAndSpeed("car")));

File: reader-gtfs/src/test/java/com/graphhopper/ExtendedRouteTypeIT.java
Patch:
@@ -51,6 +51,7 @@ public static void init() {
         ghConfig.putObject("graph.location", GRAPH_LOC);
         ghConfig.putObject("gtfs.file", "files/another-sample-feed-extended-route-type.zip");
         ghConfig.putObject("import.osm.ignored_highways", "");
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         ghConfig.setProfiles(List.of(
                 TestProfiles.accessSpeedAndPriority("foot"),
                 TestProfiles.accessAndSpeed("car")));

File: reader-gtfs/src/test/java/com/graphhopper/FreeWalkIT.java
Patch:
@@ -61,6 +61,7 @@ public static void init() {
         // TODO: here it is instantiated directly. Refactor by having only one Router but two Solvers, similar
         // TODO: to the street router.
         ghConfig.putObject("gtfs.free_walk", true);
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         ghConfig.setProfiles(List.of(
                 TestProfiles.accessSpeedAndPriority("foot"),
                 TestProfiles.accessAndSpeed("car")));

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperGtfsIT.java
Patch:
@@ -58,6 +58,7 @@ public static void init() {
         ghConfig.putObject("graph.location", GRAPH_LOC);
         ghConfig.putObject("import.osm.ignored_highways", "");
         ghConfig.putObject("gtfs.file", "files/sample-feed");
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         ghConfig.setProfiles(List.of(
                 TestProfiles.accessSpeedAndPriority("foot"),
                 TestProfiles.accessAndSpeed("car")));

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperMultimodalIT.java
Patch:
@@ -61,6 +61,7 @@ public static void init() {
         ghConfig.putObject("import.osm.ignored_highways", "");
         ghConfig.putObject("gtfs.file", "files/sample-feed");
         ghConfig.putObject("graph.location", GRAPH_LOC);
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         Profile carLocal = TestProfiles.accessAndSpeed("car_custom", "car");
         ghConfig.setProfiles(Arrays.asList(
                 TestProfiles.accessSpeedAndPriority("foot"),

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -54,6 +54,7 @@ public static void init() {
         ghConfig.putObject("gtfs.file", "files/sample-feed");
         ghConfig.putObject("graph.location", GRAPH_LOC);
         ghConfig.putObject("import.osm.ignored_highways", "");
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         ghConfig.setProfiles(List.of(
                 TestProfiles.accessSpeedAndPriority("foot"),
                 TestProfiles.accessAndSpeed("car")));

File: reader-gtfs/src/test/java/com/graphhopper/gtfs/analysis/AnalysisTest.java
Patch:
@@ -45,6 +45,7 @@ public static void init() {
         ghConfig.putObject("datareader.file", "files/beatty.osm");
         ghConfig.putObject("gtfs.file", "files/sample-feed,files/another-sample-feed");
         ghConfig.putObject("import.osm.ignored_highways", "");
+        ghConfig.putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed, car_access, car_average_speed");
         ghConfig.setProfiles(List.of(
                 TestProfiles.accessSpeedAndPriority("foot"),
                 TestProfiles.accessAndSpeed("car")));

File: web/src/test/java/com/graphhopper/application/GraphHopperLandmarksTest.java
Patch:
@@ -52,6 +52,7 @@ private static GraphHopperServerConfiguration createConfig() {
         GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();
         config.getGraphHopperConfiguration().
                 putObject("datareader.file", "../core/files/belarus-east.osm.gz").
+                putObject("graph.encoded_values", "car_access, car_average_speed").
                 putObject("prepare.min_network_size", 0).
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR)

File: web/src/test/java/com/graphhopper/application/MapMatching2Test.java
Patch:
@@ -59,6 +59,7 @@ public void testIssue13() throws IOException {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile("../map-matching/files/map-issue13.osm.gz");
         hopper.setGraphHopperLocation(GH_LOCATION);
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         hopper.setProfiles(TestProfiles.accessAndSpeed("my_profile", "car"));
         hopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         hopper.importOrLoad();
@@ -84,6 +85,7 @@ public void testIssue70() throws IOException {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile("../map-matching/files/issue-70.osm.gz");
         hopper.setGraphHopperLocation(GH_LOCATION);
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         hopper.setProfiles(TestProfiles.accessAndSpeed("my_profile", "car"));
         hopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         hopper.importOrLoad();
@@ -104,6 +106,7 @@ public void testIssue127() throws IOException {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile("../map-matching/files/map-issue13.osm.gz");
         hopper.setGraphHopperLocation(GH_LOCATION);
+        hopper.setEncodedValuesString("car_access, car_average_speed");
         hopper.setProfiles(TestProfiles.accessAndSpeed("my_profile", "car"));
         hopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         hopper.importOrLoad();

File: web/src/test/java/com/graphhopper/application/MapMatchingTest.java
Patch:
@@ -69,6 +69,7 @@ public static void setup() {
         graphHopper = new GraphHopper();
         graphHopper.setOSMFile("../map-matching/files/leipzig_germany.osm.pbf");
         graphHopper.setGraphHopperLocation(GH_LOCATION);
+        graphHopper.setEncodedValuesString("car_access, car_average_speed");
         graphHopper.setProfiles(TestProfiles.accessAndSpeed("my_profile", "car"));
         graphHopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         graphHopper.importOrLoad();

File: web/src/test/java/com/graphhopper/application/RoutingAdditivityTest.java
Patch:
@@ -48,6 +48,7 @@ public static void setup() {
         graphHopper = new GraphHopper();
         graphHopper.setOSMFile("../map-matching/files/leipzig_germany.osm.pbf");
         graphHopper.setGraphHopperLocation(GH_LOCATION);
+        graphHopper.setEncodedValuesString("car_access, car_average_speed");
         graphHopper.setProfiles(TestProfiles.accessAndSpeed("my_profile", "car"));
         graphHopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         graphHopper.importOrLoad();

File: web/src/test/java/com/graphhopper/application/resources/IsochroneResourceTest.java
Patch:
@@ -57,6 +57,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/andorra.osm.pbf").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
+                putObject("graph.encoded_values", "car_access, car_average_speed").
                 setProfiles(Arrays.asList(
                         TestProfiles.accessAndSpeed("fast_car", "car").setTurnCostsConfig(TurnCostsConfig.car()),
                         TestProfiles.constantSpeed("short_car", 35).setTurnCostsConfig(TurnCostsConfig.car()),

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTest.java
Patch:
@@ -57,6 +57,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../map-matching/files/leipzig_germany.osm.pbf").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
+                putObject("graph.encoded_values", "car_access, car_average_speed, bike_access, bike_priority, bike_average_speed").
                 setProfiles(Arrays.asList(
                         TestProfiles.accessAndSpeed("fast_car", "car"),
                         TestProfiles.accessSpeedAndPriority("fast_bike", "bike")));

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTurnCostsTest.java
Patch:
@@ -61,6 +61,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../map-matching/files/leipzig_germany.osm.pbf").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
+                putObject("graph.encoded_values", "car_access, car_average_speed, bike_access, bike_priority, bike_average_speed").
                 setProfiles(Arrays.asList(
                         TestProfiles.accessAndSpeed("car").setTurnCostsConfig(TurnCostsConfig.car()),
                         TestProfiles.accessAndSpeed("car_no_tc", "car"),

File: web/src/test/java/com/graphhopper/application/resources/PtRouteResourceTest.java
Patch:
@@ -55,6 +55,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("gtfs.file", "../reader-gtfs/files/sample-feed").
                 putObject("graph.location", DIR).
                 putObject("import.osm.ignored_highways", "").
+                putObject("graph.encoded_values", "foot_access, foot_priority, foot_average_speed").
                 setProfiles(List.of(TestProfiles.accessSpeedAndPriority("foot")));
         return config;
     }

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelLMTest.java
Patch:
@@ -54,7 +54,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/andorra.osm.pbf").
                 putObject("graph.location", DIR).
                 putObject("import.osm.ignored_highways", "").
-                putObject("graph.encoded_values", "surface").
+                putObject("graph.encoded_values", "surface, car_access, car_average_speed, foot_access, foot_priority, foot_average_speed").
                 setProfiles(Arrays.asList(
                         TestProfiles.accessAndSpeed("car_custom", "car"),
                         TestProfiles.accessSpeedAndPriority("foot_profile", "foot"),

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelTest.java
Patch:
@@ -65,6 +65,8 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,track_type,hgv,average_slope,max_slope,bus_access").
                 putObject("custom_areas.directory", "./src/test/resources/com/graphhopper/application/resources/areas").
                 putObject("import.osm.ignored_highways", "").
+                putObject("graph.encoded_values", "max_height, max_weight, max_width, hazmat, toll, surface, track_type, hgv, average_slope, max_slope, bus_access, " +
+                        "car_access, car_average_speed, bike_access, bike_priority, bike_average_speed, road_class, road_access, get_off_bike, roundabout, foot_access, foot_priority, foot_average_speed").
                 setProfiles(List.of(
                         TestProfiles.constantSpeed("roads", 120),
                         new Profile("car").setCustomModel(TestProfiles.accessAndSpeed("unused", "car").getCustomModel().setDistanceInfluence(70d)),

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceIssue2020Test.java
Patch:
@@ -50,7 +50,7 @@ private static GraphHopperServerConfiguration createConfig() {
         config.getGraphHopperConfiguration().
                 putObject("prepare.lm.split_area_location", "../core/files/split.geo.json").
                 putObject("datareader.file", "../core/files/north-bayreuth.osm.gz").
-                putObject("graph.encoded_values", "road_class,surface,road_environment,max_speed").
+                putObject("graph.encoded_values", "road_class,surface,road_environment,max_speed,car_access,car_average_speed").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
                 setProfiles(Collections.singletonList(TestProfiles.accessAndSpeed("my_car", "car"))).

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceWithEleTest.java
Patch:
@@ -54,6 +54,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/monaco.osm.gz").
                 putObject("graph.location", dir).
                 putObject("import.osm.ignored_highways", "").
+                putObject("graph.encoded_values", "car_access, car_average_speed").
                 setProfiles(List.of(TestProfiles.accessAndSpeed("profile", "car")));
         return config;
     }

File: web/src/test/java/com/graphhopper/application/resources/SPTResourceTest.java
Patch:
@@ -52,6 +52,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/andorra.osm.pbf").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
+                putObject("graph.encoded_values", "car_access, car_average_speed").
                 setProfiles(List.of(
                         TestProfiles.accessAndSpeed("car_without_turncosts", "car"),
                         TestProfiles.accessAndSpeed("car_with_turncosts", "car").setTurnCostsConfig(TurnCostsConfig.car())

File: client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.api;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.graphhopper.jackson.ResponsePathDeserializer;
+import com.graphhopper.jackson.ResponsePathDeserializerHelper;
 import com.graphhopper.util.Helper;
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
@@ -94,7 +94,7 @@ public MatrixResponse route(GHMRequest ghRequest) {
             JsonNode responseJson = fromStringToJSON(postUrl, jsonResult.body());
             if (responseJson.has("message")) {
                 matrixResponse.setStatusCode(jsonResult.statusCode());
-                matrixResponse.addErrors(ResponsePathDeserializer.readErrors(objectMapper, responseJson));
+                matrixResponse.addErrors(ResponsePathDeserializerHelper.readErrors(objectMapper, responseJson));
                 return matrixResponse;
             }
             if (!responseJson.has("job_id")) {
@@ -123,7 +123,7 @@ public MatrixResponse route(GHMRequest ghRequest) {
                 if (debug) {
                     logger.info(i + " GET URL:" + getUrl + ", response: " + rsp);
                 }
-                matrixResponse.addErrors(ResponsePathDeserializer.readErrors(objectMapper, getResponseJson));
+                matrixResponse.addErrors(ResponsePathDeserializerHelper.readErrors(objectMapper, getResponseJson));
                 matrixResponse.setStatusCode(rsp.statusCode());
                 if (matrixResponse.hasErrors()) {
                     break;

File: client-hc/src/main/java/com/graphhopper/api/GHMatrixSyncRequester.java
Patch:
@@ -1,7 +1,7 @@
 package com.graphhopper.api;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.graphhopper.jackson.ResponsePathDeserializer;
+import com.graphhopper.jackson.ResponsePathDeserializerHelper;
 import okhttp3.OkHttpClient;
 
 import java.io.IOException;
@@ -44,11 +44,11 @@ public MatrixResponse route(GHMRequest ghRequest) {
             JsonNode responseJson = fromStringToJSON(postUrl, jsonResult.body());
             matrixResponse.setStatusCode(jsonResult.statusCode());
             if (responseJson.has("message")) {
-                matrixResponse.addErrors(ResponsePathDeserializer.readErrors(objectMapper, responseJson));
+                matrixResponse.addErrors(ResponsePathDeserializerHelper.readErrors(objectMapper, responseJson));
                 return matrixResponse;
             }
 
-            matrixResponse.addErrors(ResponsePathDeserializer.readErrors(objectMapper, responseJson));
+            matrixResponse.addErrors(ResponsePathDeserializerHelper.readErrors(objectMapper, responseJson));
             if (!matrixResponse.hasErrors())
                 matrixResponse.addErrors(readUsableEntityError(ghRequest.getOutArrays(), responseJson));
 

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -31,8 +31,6 @@ public class GraphHopperModule extends SimpleModule {
     public GraphHopperModule() {
         addDeserializer(Statement.class, new StatementDeserializer());
         addSerializer(Statement.class, new StatementSerializer());
-        addDeserializer(GHResponse.class, new GHResponseDeserializer());
-        addDeserializer(ResponsePath.class, new ResponsePathDeserializer());
         addDeserializer(Envelope.class, new JtsEnvelopeDeserializer());
         addSerializer(Envelope.class, new JtsEnvelopeSerializer());
         addDeserializer(GHPoint.class, new GHPointDeserializer());

File: web-api/src/test/java/com/graphhopper/jackson/RouteResourceRepresentationTest.java
Patch:
@@ -34,7 +34,7 @@ public void testUnknownInstructionSign() throws IOException {
         // Modified the sign though
         ObjectMapper objectMapper = Jackson.newObjectMapper();
         JsonNode json = objectMapper.readTree("{\"instructions\":[{\"distance\":1.073,\"sign\":741,\"interval\":[0,1],\"text\":\"Continue onto A 81\",\"time\":32,\"street_name\":\"A 81\"},{\"distance\":0,\"sign\":4,\"interval\":[1,1],\"text\":\"Finish!\",\"time\":0,\"street_name\":\"\"}],\"descend\":0,\"ascend\":0,\"distance\":1.073,\"bbox\":[8.676286,48.354446,8.676297,48.354453],\"weight\":0.032179,\"time\":32,\"points_encoded\":true,\"points\":\"gfcfHwq}s@}c~AAA?\",\"snapped_waypoints\":\"gfcfHwq}s@}c~AAA?\"}");
-        ResponsePath responsePath = ResponsePathDeserializer.createResponsePath(objectMapper, json, true, true);
+        ResponsePath responsePath = ResponsePathDeserializerHelper.createResponsePath(objectMapper, json, true, true);
 
         assertEquals(741, responsePath.getInstructions().get(0).getSign());
         assertEquals("Continue onto A 81", responsePath.getInstructions().get(0).getName());

File: web-bundle/src/main/java/com/graphhopper/resources/PtRouteResource.java
Patch:
@@ -90,7 +90,7 @@ public ObjectNode route(@QueryParam("point") @Size(min=2,max=2) List<GHLocationP
         Optional.ofNullable(betaEgressTime).ifPresent(request::setBetaEgressTime);
 
         GHResponse route = ptRouter.route(request);
-        return ResponsePathSerializer.jsonObject(route, new ResponsePathSerializer.Info(config.getCopyrights(), Math.round(stopWatch.stop().getMillis()), null), true, true, false, false);
+        return ResponsePathSerializer.jsonObject(route, new ResponsePathSerializer.Info(config.getCopyrights(), Math.round(stopWatch.stop().getMillis()), null), true, true, false, false, -1);
     }
 
 }

File: web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java
Patch:
@@ -43,7 +43,7 @@ public class ExtendedJsonResponseTest {
 
     @Test
     public void shouldCreateBasicStructure() {
-        JsonNode jsonObject = MapMatchingResource.convertToTree(new MatchResult(getEdgeMatch()), false, false);
+        JsonNode jsonObject = MapMatchingResource.convertToTree(new MatchResult(getEdgeMatch()), false, false, -1);
         JsonNode route = jsonObject.get("diary").get("entries").get(0);
         JsonNode link = route.get("links").get(0);
         JsonNode geometry = link.get("geometry");

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTest.java
Patch:
@@ -20,7 +20,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.graphhopper.application.GraphHopperApplication;
 import com.graphhopper.application.GraphHopperServerConfiguration;
-import com.graphhopper.jackson.ResponsePathDeserializer;
+import com.graphhopper.jackson.ResponsePathDeserializerHelper;
 import com.graphhopper.routing.TestProfiles;
 import com.graphhopper.util.Helper;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
@@ -79,7 +79,7 @@ public void testGPX() {
         JsonNode path = json.get("paths").get(0);
 
         LineString expectedGeometry = readWktLineString("LINESTRING (12.3607 51.34365, 12.36418 51.34443, 12.36379 51.34538, 12.36082 51.34471, 12.36188 51.34278)");
-        LineString actualGeometry = ResponsePathDeserializer.decodePolyline(path.get("points").asText(), 10, false).toLineString(false);
+        LineString actualGeometry = ResponsePathDeserializerHelper.decodePolyline(path.get("points").asText(), 10, false, 1e5).toLineString(false);
         assertEquals(DiscreteHausdorffDistance.distance(expectedGeometry, actualGeometry), 0.0, 1E-4);
         assertEquals(101, path.get("time").asLong() / 1000f, 1);
         assertEquals(101, json.get("map_matching").get("time").asLong() / 1000f, 1);
@@ -99,7 +99,7 @@ public void testBike() throws ParseException {
         JsonNode path = json.get("paths").get(0);
 
         LineString expectedGeometry = (LineString) wktReader.read("LINESTRING (12.3607 51.34365, 12.36418 51.34443, 12.36379 51.34538, 12.36082 51.34471, 12.36188 51.34278)");
-        LineString actualGeometry = ResponsePathDeserializer.decodePolyline(path.get("points").asText(), 10, false).toLineString(false);
+        LineString actualGeometry = ResponsePathDeserializerHelper.decodePolyline(path.get("points").asText(), 10, false, 1e5).toLineString(false);
         assertEquals(DiscreteHausdorffDistance.distance(expectedGeometry, actualGeometry), 0.0, 1E-4);
 
         // ensure that is actually also is bike! (slower than car)

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTurnCostsTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.graphhopper.application.GraphHopperServerConfiguration;
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
+import com.graphhopper.jackson.ResponsePathDeserializerHelper;
 import com.graphhopper.config.TurnCostsConfig;
-import com.graphhopper.jackson.ResponsePathDeserializer;
 import com.graphhopper.routing.TestProfiles;
 import com.graphhopper.util.Helper;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
@@ -121,7 +121,7 @@ private void runCar(String urlParams) {
         JsonNode path = json.get("paths").get(0);
 
         LineString expectedGeometry = readWktLineString("LINESTRING (12.3607 51.34365, 12.36418 51.34443, 12.36379 51.34538, 12.36082 51.34471, 12.36188 51.34278)");
-        LineString actualGeometry = ResponsePathDeserializer.decodePolyline(path.get("points").asText(), 10, false).toLineString(false);
+        LineString actualGeometry = ResponsePathDeserializerHelper.decodePolyline(path.get("points").asText(), 10, false, 1e5).toLineString(false);
         assertEquals(DiscreteHausdorffDistance.distance(expectedGeometry, actualGeometry), 0.0, 1E-4);
         assertEquals(101, path.get("time").asLong() / 1000f, 1);
         assertEquals(101, json.get("map_matching").get("time").asLong() / 1000f, 1);
@@ -140,7 +140,7 @@ private void runBike(String urlParams) {
         JsonNode path = json.get("paths").get(0);
 
         LineString expectedGeometry = readWktLineString("LINESTRING (12.3607 51.34365, 12.36418 51.34443, 12.36379 51.34538, 12.36082 51.34471, 12.36188 51.34278)");
-        LineString actualGeometry = ResponsePathDeserializer.decodePolyline(path.get("points").asText(), 10, false).toLineString(false);
+        LineString actualGeometry = ResponsePathDeserializerHelper.decodePolyline(path.get("points").asText(), 10, false, 1e5).toLineString(false);
         assertEquals(DiscreteHausdorffDistance.distance(expectedGeometry, actualGeometry), 0.0, 1E-4);
         assertEquals(162.31, path.get("time").asLong() / 1000f, 0.1);
         assertEquals(162.31, json.get("map_matching").get("time").asLong() / 1000f, 0.1);

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceClientHCTest.java
Patch:
@@ -421,9 +421,9 @@ public void testWaypointIndicesAndLegDetails(TestParam p) {
             List<PathDetail> pathDetails = path.getPathDetails().get(detail);
 
             // explicitly check one of the waypoints
-            assertEquals(42.5054, path.getWaypoints().get(3).lat);
-            assertEquals(42.5054, path.getPoints().get(pathDetails.get(2).getLast()).getLat());
-            assertEquals(42.5054, path.getPoints().get(pathDetails.get(3).getFirst()).getLat());
+            assertEquals(42.505398, path.getWaypoints().get(3).lat);
+            assertEquals(42.505398, path.getPoints().get(pathDetails.get(2).getLast()).getLat());
+            assertEquals(42.505398, path.getPoints().get(pathDetails.get(3).getFirst()).getLat());
             // check all the waypoints
             assertEquals(path.getWaypoints().get(0), path.getPoints().get(pathDetails.get(0).getFirst()));
             for (int i = 1; i < path.getWaypoints().size(); ++i)

File: core/src/main/java/com/graphhopper/reader/dem/AbstractSRTMElevationProvider.java
Patch:
@@ -156,10 +156,10 @@ private void updateHeightsFromFile(double lat, double lon, DataAccess heights) t
             heights.flush();
 
         } catch (FileNotFoundException ex) {
-            logger.warn("File not found for the coordinates for " + lat + "," + lon);
+            logger.warn("File not found " + heights + " for the coordinates " + lat + "," + lon);
             throw ex;
         } catch (Exception ex) {
-            throw new RuntimeException("There was an issue looking up the coordinates for " + lat + "," + lon, ex);
+            throw new RuntimeException("There was an issue with " + heights + " looking up the coordinates " + lat + "," + lon, ex);
         }
     }
 

File: navigation/src/main/java/com/graphhopper/navigation/NavigateResponseConverter.java
Patch:
@@ -180,7 +180,7 @@ private static ObjectNode putInstruction(PointList points, InstructionList instr
         //Make pointList mutable
         PointList pointList = instruction.getPoints().clone(false);
 
-        if (instructionIndex + 2 < instructions.size()) {
+        if (instructionIndex + 1 < instructions.size()) {
             // Add the first point of the next instruction
             PointList nextPoints = instructions.get(instructionIndex + 1).getPoints();
             pointList.add(nextPoints.getLat(0), nextPoints.getLon(0), nextPoints.getEle(0));

File: core/src/main/java/com/graphhopper/config/TurnCostsConfig.java
Patch:
@@ -45,8 +45,8 @@ public void setVehicleTypes(List<String> vehicleTypes) {
     }
 
     List<String> check(List<String> restrictions) {
-        if (restrictions.isEmpty())
-            throw new IllegalArgumentException("turn restrictions cannot be empty");
+        if (restrictions == null || restrictions.isEmpty())
+            throw new IllegalArgumentException("turn_costs cannot have empty vehicle_types");
         for (String r : restrictions) {
             if (!ALL_SUPPORTED.contains(r))
                 throw new IllegalArgumentException("Currently we do not support the restriction: " + r);
@@ -56,6 +56,7 @@ List<String> check(List<String> restrictions) {
 
     @JsonProperty("vehicle_types")
     public List<String> getVehicleTypes() {
+        check(vehicleTypes);
         return vehicleTypes;
     }
 

File: core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
Patch:
@@ -80,4 +80,4 @@ static GHPoint getPointForOrientationCalculation(EdgeIteratorState edgeIteratorS
         }
         return new GHPoint(tmpLat, tmpLon);
     }
-}
\ No newline at end of file
+}

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -69,7 +69,7 @@ public class MapMatching {
     private final BaseGraph graph;
     private final Router router;
     private final LocationIndexTree locationIndex;
-    private double measurementErrorSigma = 50.0;
+    private double measurementErrorSigma = 10.0;
     private double transitionProbabilityBeta = 2.0;
     private final DistanceCalc distanceCalc = new DistancePlaneProjection();
     private QueryGraph queryGraph;

File: web-bundle/src/main/java/com/graphhopper/resources/MapMatchingResource.java
Patch:
@@ -96,7 +96,7 @@ public Response match(
             @QueryParam("gpx.route") @DefaultValue("true") boolean withRoute,
             @QueryParam("gpx.track") @DefaultValue("true") boolean withTrack,
             @QueryParam("traversal_keys") @DefaultValue("false") boolean enableTraversalKeys,
-            @QueryParam("gps_accuracy") @DefaultValue("40") double gpsAccuracy) {
+            @QueryParam("gps_accuracy") @DefaultValue("10") double gpsAccuracy) {
 
         boolean writeGPX = "gpx".equalsIgnoreCase(outType);
         if (gpx.trk.isEmpty()) {

File: web/src/test/java/com/graphhopper/application/MapMatchingTest.java
Patch:
@@ -173,7 +173,7 @@ public void testLongTrackWithTwoPoints(PMap hints) {
                 new Observation(new GHPoint(51.23, 12.18)),
                 new Observation(new GHPoint(51.45, 12.59)));
         MatchResult mr = mapMatching.match(inputGPXEntries);
-        assertEquals(57553.0, mr.getMatchLength(), 1.0);
+        assertEquals(57649.2, mr.getMatchLength(), 1.0);
     }
 
     @ParameterizedTest

File: core/src/main/java/com/graphhopper/storage/DAType.java
Patch:
@@ -80,10 +80,10 @@ else if (dataAccess.contains("MMAP"))
             type = DAType.MMAP;
         else if (dataAccess.contains("UNSAFE"))
             throw new IllegalArgumentException("UNSAFE option is no longer supported, see #1620");
-        else if (dataAccess.contains("RAM_STORE"))
-            type = DAType.RAM_STORE;
-        else
+        else if (dataAccess.equals("RAM"))
             type = DAType.RAM;
+        else
+            type = DAType.RAM_STORE;
         return type;
     }
 

File: core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
Patch:
@@ -106,7 +106,7 @@ static ParsedCalendar parseDateString(String dateString) throws ParseException {
 
     DateRange getRange(String dateRangeString) throws ParseException {
         if (dateRangeString == null || dateRangeString.isEmpty())
-            throw new IllegalArgumentException("Passing empty Strings is not allowed");
+            return null;
 
         String[] dateArr = dateRangeString.split("-");
         if (dateArr.length > 2 || dateArr.length < 1)

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeTagParserTest.java
Patch:
@@ -55,7 +55,7 @@ protected EncodingManager createEncodingManager() {
 
     @Override
     protected BikeCommonAccessParser createAccessParser(EncodedValueLookup lookup, PMap pMap) {
-        return (BikeCommonAccessParser) new BikeAccessParser(lookup, pMap).init(new DateRangeParser());
+        return new BikeAccessParser(lookup, pMap);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/util/parsers/HikeCustomModelTest.java
Patch:
@@ -42,7 +42,7 @@ public void setup() {
         parsers = new OSMParsers().
                 addWayTagParser(new OSMHikeRatingParser(hikeRating));
 
-        parsers.addWayTagParser(new FootAccessParser(em, new PMap()).init(new DateRangeParser()));
+        parsers.addWayTagParser(new FootAccessParser(em, new PMap()));
         parsers.addWayTagParser(new FootAverageSpeedParser(em));
         parsers.addWayTagParser(new FootPriorityParser(em));
 

File: core/src/test/java/com/graphhopper/routing/util/parsers/MountainBikeTagParserTest.java
Patch:
@@ -49,7 +49,7 @@ protected EncodingManager createEncodingManager() {
 
     @Override
     protected BikeCommonAccessParser createAccessParser(EncodedValueLookup lookup, PMap pMap) {
-        return (BikeCommonAccessParser) new MountainBikeAccessParser(lookup, pMap).init(new DateRangeParser());
+        return new MountainBikeAccessParser(lookup, pMap);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMGetOffBikeParserTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.graphhopper.routing.util.parsers;
 
 import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
@@ -19,7 +18,6 @@ public class OSMGetOffBikeParserTest {
     public OSMGetOffBikeParserTest() {
         EncodingManager em = new EncodingManager.Builder().add(offBikeEnc).add(VehicleAccess.create("bike")).add(Roundabout.create()).build();
         accessParser = new BikeAccessParser(em, new PMap());
-        accessParser.init(new DateRangeParser());
         getOffParser = new OSMGetOffBikeParser(offBikeEnc, accessParser.getAccessEnc());
     }
 

File: core/src/test/java/com/graphhopper/routing/util/parsers/RacingBikeTagParserTest.java
Patch:
@@ -55,7 +55,7 @@ protected EncodingManager createEncodingManager() {
 
     @Override
     protected BikeCommonAccessParser createAccessParser(EncodedValueLookup lookup, PMap pMap) {
-        return (BikeCommonAccessParser) new RacingBikeAccessParser(lookup, pMap).init(new DateRangeParser());
+        return (BikeCommonAccessParser) new RacingBikeAccessParser(lookup, pMap);
     }
 
     @Override

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -566,7 +566,8 @@ private void measureRouting(final GraphHopper hopper, final QuerySettings queryS
                 req.setAlgorithm(ALT_ROUTE);
 
             if (querySettings.pathDetails)
-                req.setPathDetails(Arrays.asList(Parameters.Details.AVERAGE_SPEED, Parameters.Details.EDGE_ID, Parameters.Details.STREET_NAME));
+                req.setPathDetails(Arrays.asList(Parameters.Details.AVERAGE_SPEED, Parameters.Details.EDGE_ID,
+                        Parameters.Details.STREET_NAME, "access_conditional", "vehicle_conditional", "motor_vehicle_conditional"));
 
             if (!querySettings.simplify)
                 req.getHints().putObject(Parameters.Routing.WAY_POINT_MAX_DISTANCE, 0);

File: core/src/main/java/com/graphhopper/routing/querygraph/VirtualEdgeIteratorState.java
Patch:
@@ -332,7 +332,8 @@ public List<KVStorage.KeyValue> getKeyValues() {
     @Override
     public Object getValue(String key) {
         for (KVStorage.KeyValue keyValue : keyValues) {
-            if (keyValue.key.equals(key)) return keyValue.value;
+            if (keyValue.key.equals(key) && (!reverse && keyValue.fwd || reverse && keyValue.bwd))
+                return keyValue.value;
         }
         return null;
     }

File: core/src/main/java/com/graphhopper/util/details/ConstantDetailsBuilder.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.coll.MapEntry;
 import com.graphhopper.util.EdgeIteratorState;
 
+import java.util.ArrayList;
 import java.util.List;
 import java.util.Map;
 
@@ -54,7 +55,7 @@ public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
     public Map.Entry<String, List<PathDetail>> build() {
         if (firstEdge)
             // #2915 if there was no edge at all we need to add a single entry manually here
-            return new MapEntry<>(getName(), List.of(new PathDetail(value)));
+            return new MapEntry<>(getName(), new ArrayList<>(List.of(new PathDetail(value))));
         return super.build();
     }
 }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -609,7 +609,7 @@ protected EncodingManager buildEncodingManager(Map<String, PMap> encodedValuesWi
                 .toList());
         profilesByName.values().forEach(profile -> encodedValues.add(Subnetwork.create(profile.getName())));
 
-        List<String> sortedEVs = getEVSortIndex();
+        List<String> sortedEVs = getEVSortIndex(vehiclePropsByVehicle, profilesByName);
         encodedValues.sort(Comparator.comparingInt(ev -> sortedEVs.indexOf(ev.getName())));
 
         EncodingManager.Builder emBuilder = new EncodingManager.Builder();
@@ -620,7 +620,7 @@ protected EncodingManager buildEncodingManager(Map<String, PMap> encodedValuesWi
         return emBuilder.build();
     }
 
-    protected List<String> getEVSortIndex() {
+    protected List<String> getEVSortIndex(Map<String, PMap> vehiclePropsByVehicle, Map<String, Profile> profilesByName) {
         return Collections.emptyList();
     }
 

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -97,6 +97,8 @@ public EncodedValue create(String name, PMap properties) {
             return Crossing.create();
         } else if (FerrySpeed.KEY.equals(name)) {
             return FerrySpeed.create();
+        } else if (BusAccess.KEY.equals(name)) {
+            return BusAccess.create();
         } else {
             throw new IllegalArgumentException("DefaultEncodedValueFactory cannot find EncodedValue " + name);
         }

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultTagParserFactory.java
Patch:
@@ -86,6 +86,8 @@ else if (name.equals(Crossing.KEY))
             return new OSMCrossingParser(lookup.getEnumEncodedValue(Crossing.KEY, Crossing.class));
         else if (name.equals(FerrySpeed.KEY))
             return new FerrySpeedCalculator(lookup.getDecimalEncodedValue(FerrySpeed.KEY));
+        else if (name.equals(BusAccess.KEY))
+            return new ModeAccessParser(TransportationMode.BUS, lookup.getBooleanEncodedValue(BusAccess.KEY), lookup.getBooleanEncodedValue(Roundabout.KEY));
         return null;
     }
 }

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelTest.java
Patch:
@@ -62,7 +62,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("prepare.min_network_size", 200).
                 putObject("datareader.file", "../core/files/north-bayreuth.osm.gz").
                 putObject("graph.location", DIR).
-                putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,track_type,hgv,average_slope,max_slope").
+                putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,track_type,hgv,average_slope,max_slope,bus_access").
                 putObject("custom_areas.directory", "./src/test/resources/com/graphhopper/application/resources/areas").
                 putObject("import.osm.ignored_highways", "").
                 setProfiles(Arrays.asList(
@@ -118,8 +118,8 @@ public void testBus() {
         // the bus profile is a custom profile and we can use its CH preparation as long as we do not add a custom model
         String body = "{\"points\": [[11.58199, 50.0141], [11.5865, 50.0095]], \"profile\": \"bus\"}";
         JsonNode path = getPath(body);
-        assertEquals(1500, path.get("distance").asDouble(), 10);
-        assertEquals(162_000, path.get("time").asLong(), 1_000);
+        assertEquals(610, path.get("distance").asDouble(), 10);
+        assertEquals(27_000, path.get("time").asLong(), 1_000);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultMaxSpeedParser.java
Patch:
@@ -84,6 +84,7 @@ private Map<String, String> filter(Map<String, Object> tags) {
             String key = entry.getKey();
             if (speeds.isRelevantTagKey(key)
                     || key.equals("country")
+                    || key.equals("country_state")
                     // the :conditional tags are not yet necessary for us and expensive in the speeds library
                     // see https://github.com/westnordost/osm-legal-default-speeds/issues/7
                     || key.startsWith("maxspeed:") && !key.endsWith(":conditional"))

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractAdjustedWeighting.java
Patch:
@@ -34,8 +34,8 @@ public AbstractAdjustedWeighting(Weighting superWeighting) {
     }
 
     @Override
-    public double getMinWeight(double distance) {
-        return superWeighting.getMinWeight(distance);
+    public double calcMinWeightPerDistance() {
+        return superWeighting.calcMinWeightPerDistance();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/BeelineWeightApproximator.java
Patch:
@@ -30,13 +30,15 @@
 public class BeelineWeightApproximator implements WeightApproximator {
     private final NodeAccess nodeAccess;
     private final Weighting weighting;
+    private final double minWeightPerDistance;
     private DistanceCalc distanceCalc = DistanceCalcEarth.DIST_EARTH;
     private double toLat, toLon;
     private double epsilon = 1;
 
     public BeelineWeightApproximator(NodeAccess nodeAccess, Weighting weighting) {
         this.nodeAccess = nodeAccess;
         this.weighting = weighting;
+        this.minWeightPerDistance = weighting.calcMinWeightPerDistance();
     }
 
     @Override
@@ -65,7 +67,7 @@ public double approximate(int fromNode) {
         double fromLat = nodeAccess.getLat(fromNode);
         double fromLon = nodeAccess.getLon(fromNode);
         double dist2goal = distanceCalc.calcDist(toLat, toLon, fromLat, fromLon);
-        double weight2goal = weighting.getMinWeight(dist2goal);
+        double weight2goal = minWeightPerDistance * dist2goal;
         return weight2goal * epsilon;
     }
 

File: core/src/main/java/com/graphhopper/routing/weighting/FastestWeighting.java
Patch:
@@ -75,8 +75,8 @@ public FastestWeighting(BooleanEncodedValue accessEnc, DecimalEncodedValue speed
     }
 
     @Override
-    public double getMinWeight(double distance) {
-        return distance / maxSpeed;
+    public double calcMinWeightPerDistance() {
+        return 1 / maxSpeed;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/QueryGraphWeighting.java
Patch:
@@ -42,8 +42,8 @@ public QueryGraphWeighting(Weighting weighting, int firstVirtualNodeId, int firs
     }
 
     @Override
-    public double getMinWeight(double distance) {
-        return weighting.getMinWeight(distance);
+    public double calcMinWeightPerDistance() {
+        return weighting.calcMinWeightPerDistance();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/ShortestWeighting.java
Patch:
@@ -44,8 +44,8 @@ public ShortestWeighting(BooleanEncodedValue accessEnc, DecimalEncodedValue spee
     }
 
     @Override
-    public double getMinWeight(double distance) {
-        return distance;
+    public double calcMinWeightPerDistance() {
+        return 1;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/SpeedWeighting.java
Patch:
@@ -60,8 +60,8 @@ public SpeedWeighting(DecimalEncodedValue speedEnc, TurnCostProvider turnCostPro
     }
 
     @Override
-    public double getMinWeight(double distance) {
-        return distance / speedEnc.getMaxStorableDecimal();
+    public double calcMinWeightPerDistance() {
+        return 1 / speedEnc.getMaxStorableDecimal();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/Weighting.java
Patch:
@@ -30,10 +30,10 @@ public interface Weighting {
     /**
      * Used only for the heuristic estimation in A*
      *
-     * @return minimal weight for the specified distance in meter. E.g. if you calculate the fastest
-     * way the return value is 'distance/max_velocity'
+     * @return minimal weight per meter. E.g. if you calculate the fastest way the return value
+     * is '1/max_velocity' or a shortest weighting would return 1.
      */
-    double getMinWeight(double distance);
+    double calcMinWeightPerDistance();
 
     /**
      * This method calculates the weight of a given {@link EdgeIteratorState}. E.g. a high value indicates that the edge

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -161,7 +161,7 @@ public void testMonacoWithInstructions() {
                 setAlgorithm(ASTAR).setProfile(profile));
 
         // identify the number of counts to compare with CH foot route
-        assertEquals(1094, rsp.getHints().getLong("visited_nodes.sum", 0));
+        assertEquals(1022, rsp.getHints().getLong("visited_nodes.sum", 0));
 
         ResponsePath res = rsp.getBest();
         assertEquals(3535, res.getDistance(), 1);

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmTest.java
Patch:
@@ -906,8 +906,8 @@ public void testTwoWeightsPerEdge2(Fixture f) {
             private final Weighting tmpW = new SpeedWeighting(f.carSpeedEnc);
 
             @Override
-            public double getMinWeight(double distance) {
-                return 0.8 * distance;
+            public double calcMinWeightPerDistance() {
+                return 0.8;
             }
 
             @Override

File: core/src/test/java/com/graphhopper/routing/TrafficChangeWithNodeOrderingReusingTest.java
Patch:
@@ -206,9 +206,9 @@ public RandomDeviationWeighting(Weighting baseWeighting, BooleanEncodedValue acc
         }
 
         @Override
-        public double getMinWeight(double distance) {
+        public double calcMinWeightPerDistance() {
             // left as is, ok for now, but do not use with astar, at least as long as deviations can be negative!!
-            return this.baseWeighting.getMinWeight(distance);
+            return this.baseWeighting.calcMinWeightPerDistance();
         }
 
         @Override

File: core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
Patch:
@@ -48,7 +48,7 @@ public void testMinWeightHasSameUnitAs_getWeight() {
         EdgeIteratorState edge = graph.edge(0, 1).setDistance(10);
         GHUtility.setSpeed(140, 0, accessEnc, speedEnc, edge);
         Weighting instance = new FastestWeighting(accessEnc, speedEnc);
-        assertEquals(instance.getMinWeight(10), instance.calcEdgeWeight(edge, false), 1e-8);
+        assertEquals(instance.calcMinWeightPerDistance() * 10, instance.calcEdgeWeight(edge, false), 1e-8);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/GraphHopperConfig.java
Patch:
@@ -48,8 +48,8 @@ public GraphHopperConfig() {
     public GraphHopperConfig(GraphHopperConfig otherConfig) {
         map = new PMap(otherConfig.map);
         otherConfig.profiles.forEach(p -> profiles.add(new Profile(p)));
-        otherConfig.chProfiles.forEach(p -> chProfiles.add(new CHProfile(p.getProfile())));
-        otherConfig.lmProfiles.forEach(p -> lmProfiles.add(new LMProfile(p.getProfile())));
+        otherConfig.chProfiles.forEach(p -> chProfiles.add(new CHProfile(p)));
+        otherConfig.lmProfiles.forEach(p -> lmProfiles.add(new LMProfile(p)));
     }
 
     public GraphHopperConfig(PMap pMap) {

File: core/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java
Patch:
@@ -180,7 +180,7 @@ public List<PrepareLandmarks> prepare(List<LMConfig> lmConfigs, BaseGraph baseGr
             final int count = i + 1;
             final String name = prepare.getLMConfig().getName();
             prepareRunnables.add(() -> {
-                LOGGER.info(count + "/" + lmConfigs.size() + " calling LM prepare.doWork for " + prepare.getLMConfig().getWeighting() + " ... (" + getMemInfo() + ")");
+                LOGGER.info(count + "/" + lmConfigs.size() + " calling LM prepare.doWork for " + prepare.getLMConfig().getName() + " ... (" + getMemInfo() + ")");
                 Thread.currentThread().setName(name);
                 prepare.doWork();
                 if (closeEarly)

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -110,7 +110,7 @@ private List<Query> createMonacoCarQueries() {
     public void testMonacoMotorcycleCurvature() {
         List<Query> queries = new ArrayList<>();
         queries.add(new Query(43.730729, 7.42135, 43.727697, 7.419199, 2675, 117));
-        queries.add(new Query(43.727687, 7.418737, 43.74958, 7.436566, 3730, 173));
+        queries.add(new Query(43.727687, 7.418737, 43.74958, 7.436566, 3727, 170));
         queries.add(new Query(43.728677, 7.41016, 43.739213, 7.4277, 2769, 167));
         queries.add(new Query(43.733802, 7.413433, 43.739662, 7.424355, 2373, 137));
         queries.add(new Query(43.730949, 7.412338, 43.739643, 7.424542, 2203, 116));

File: core/src/main/java/com/graphhopper/config/CHProfile.java
Patch:
@@ -43,10 +43,9 @@ public String getProfile() {
         return profile;
     }
 
-    CHProfile setProfile(String profile) {
+    void setProfile(String profile) {
         validateProfileName(profile);
         this.profile = profile;
-        return this;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/FastestWeighting.java
Patch:
@@ -81,7 +81,7 @@ public double getMinWeight(double distance) {
 
     @Override
     public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
-        if (edgeHasNoAccess(edgeState, reverse))
+        if (reverse ? !edgeState.getReverse(accessEnc) : !edgeState.get(accessEnc))
             return Double.POSITIVE_INFINITY;
         double speed = reverse ? edgeState.getReverse(speedEnc) : edgeState.get(speedEnc);
         if (speed == 0)

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java
Patch:
@@ -119,7 +119,7 @@ public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
     }
 
     double calcSeconds(double distance, EdgeIteratorState edgeState, boolean reverse) {
-        if (edgeHasNoAccess(edgeState, reverse))
+        if (reverse ? !edgeState.getReverse(accessEnc) : !edgeState.get(accessEnc))
             return Double.POSITIVE_INFINITY;
 
         double speed = edgeToSpeedMapping.get(edgeState, reverse);
@@ -135,7 +135,6 @@ public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
 
     @Override
     public long calcEdgeMillis(EdgeIteratorState edgeState, boolean reverse) {
-        // we truncate to long here instead of rounding to make it consistent with FastestWeighting, maybe change to rounding later
         return Math.round(calcSeconds(edgeState.getDistance(), edgeState, reverse) * 1000);
     }
 

File: core/src/main/java/com/graphhopper/storage/CHConfig.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.util.Helper;
 
 import static com.graphhopper.config.Profile.validateProfileName;
 

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java
Patch:
@@ -24,7 +24,7 @@
 import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
 import com.graphhopper.routing.ev.SimpleBooleanEncodedValue;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.weighting.FastestWeighting;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.CHConfig;
 import com.graphhopper.storage.RoutingCHGraph;
@@ -84,7 +84,7 @@ private RoutingCHGraph prepareCH(BaseGraph graph) {
         // meet on all four possible paths from 5 to 10
         // 5 ---> 11 will be reachable via shortcuts, as 11 is on shortest path 5 --> 12
         final int[] nodeOrdering = new int[]{0, 10, 12, 4, 3, 2, 5, 1, 6, 7, 8, 9, 11};
-        CHConfig chConfig = CHConfig.nodeBased("p", new FastestWeighting(accessEnc, speedEnc));
+        CHConfig chConfig = CHConfig.nodeBased("p", CustomModelParser.createFastestWeighting(accessEnc, speedEnc, em));
         PrepareContractionHierarchies contractionHierarchies = PrepareContractionHierarchies.fromGraph(graph, chConfig);
         contractionHierarchies.useFixedNodeOrdering(NodeOrderingProvider.fromArray(nodeOrdering));
         PrepareContractionHierarchies.Result res = contractionHierarchies.doWork();

File: core/src/test/java/com/graphhopper/routing/HeadingRoutingTest.java
Patch:
@@ -305,7 +305,7 @@ private Router createRouter(BaseGraph graph, EncodingManager encodingManager) {
         LocationIndexTree locationIndex = new LocationIndexTree(graph, new RAMDirectory());
         locationIndex.prepareIndex();
         Map<String, Profile> profilesByName = new HashMap<>();
-        profilesByName.put("profile", new Profile("profile").setVehicle("car").setWeighting("fastest"));
+        profilesByName.put("profile", new Profile("profile").setVehicle("car"));
         return new Router(graph.getBaseGraph(), encodingManager, locationIndex, profilesByName, new PathDetailsBuilderFactory(), new TranslationMap().doImport(), new RouterConfig(),
                 new DefaultWeightingFactory(graph.getBaseGraph(), encodingManager), Collections.emptyMap(), Collections.emptyMap());
     }
@@ -390,4 +390,4 @@ private int[] calcNodes(Graph graph, ResponsePath responsePath) {
         }
         return result;
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/com/graphhopper/routing/QueryRoutingCHGraphTest.java
Patch:
@@ -19,7 +19,9 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.ch.PrepareEncoder;
-import com.graphhopper.routing.ev.*;
+import com.graphhopper.routing.ev.DecimalEncodedValue;
+import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
+import com.graphhopper.routing.ev.TurnCost;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.querygraph.QueryRoutingCHGraph;
 import com.graphhopper.routing.util.EncodingManager;
@@ -28,7 +30,6 @@
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.DistancePlaneProjection;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.GHUtility;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 

File: core/src/test/java/com/graphhopper/routing/TrafficChangeWithNodeOrderingReusingTest.java
Patch:
@@ -12,9 +12,9 @@
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.parsers.CarAverageSpeedParser;
 import com.graphhopper.routing.weighting.AbstractWeighting;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.TurnCostProvider;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.MiniPerfTest;
@@ -63,7 +63,7 @@ public Fixture(int maxDeviationPercentage) {
             CarAverageSpeedParser carParser = new CarAverageSpeedParser(em, new PMap());
             osmParsers = new OSMParsers()
                     .addWayTagParser(carParser);
-            baseCHConfig = CHConfig.nodeBased("base", new FastestWeighting(accessEnc, speedEnc));
+            baseCHConfig = CHConfig.nodeBased("base", CustomModelParser.createFastestWeighting(accessEnc, speedEnc, em));
             trafficCHConfig = CHConfig.nodeBased("traffic", new RandomDeviationWeighting(baseCHConfig.getWeighting(), accessEnc, speedEnc, maxDeviationPercentage));
             graph = new BaseGraph.Builder(em).create();
         }

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -27,9 +27,9 @@
 import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.TraversalMode;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.ShortestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
@@ -285,7 +285,7 @@ public void testNodeContraction_shortcutWeightRounding() {
         GHUtility.setSpeed(60, true, false, accessEnc, speedEnc, graph.edge(2, 3).setDistance(distances[3]));
         GHUtility.setSpeed(60, true, false, accessEnc, speedEnc, graph.edge(3, 4).setDistance(distances[4]));
         graph.freeze();
-        Weighting weighting = new FastestWeighting(accessEnc, speedEnc);
+        Weighting weighting = CustomModelParser.createFastestWeighting(accessEnc, speedEnc, encodingManager);
         CHConfig chConfig = CHConfig.nodeBased("p1", weighting);
         CHStorage chStore = CHStorage.fromGraph(graph, chConfig);
         setMaxLevelOnAllNodes(chStore);

File: core/src/test/java/com/graphhopper/routing/lm/LMApproximatorTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.*;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.RAMDirectory;
@@ -55,7 +56,7 @@ private void run(long seed) {
         Random rnd = new Random(seed);
         GHUtility.buildRandomGraph(graph, rnd, 100, 2.2, true, accessEnc, speedEnc, null, 0.8, 0.8);
 
-        Weighting weighting = new FastestWeighting(accessEnc, speedEnc);
+        Weighting weighting = CustomModelParser.createFastestWeighting(accessEnc, speedEnc, encodingManager);
 
         PrepareLandmarks lm = new PrepareLandmarks(dir, graph, encodingManager, new LMConfig("car", weighting), 16);
         lm.setMaximumWeight(10000);

File: core/src/test/java/com/graphhopper/routing/lm/LMIssueTest.java
Patch:
@@ -21,8 +21,8 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.NodeAccess;
@@ -66,7 +66,7 @@ public void init() {
                 .withTurnCosts(true)
                 .setDir(dir)
                 .create();
-        weighting = new FastestWeighting(accessEnc, speedEnc);
+        weighting = CustomModelParser.createFastestWeighting(accessEnc, speedEnc, encodingManager);
     }
 
     private void preProcessGraph() {

File: core/src/test/java/com/graphhopper/routing/lm/PrepareLandmarksTest.java
Patch:
@@ -26,8 +26,8 @@
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.TraversalMode;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.RAMDirectory;
@@ -100,7 +100,7 @@ public void testLandmarkStorageAndRouting() {
         index.prepareIndex();
 
         int lm = 5, activeLM = 2;
-        Weighting weighting = new FastestWeighting(accessEnc, speedEnc);
+        Weighting weighting = CustomModelParser.createFastestWeighting(accessEnc, speedEnc, encodingManager);
         LMConfig lmConfig = new LMConfig("car", weighting);
         LandmarkStorage store = new LandmarkStorage(graph, encodingManager, dir, lmConfig, lm);
         store.setMinimumNodes(2);
@@ -190,7 +190,7 @@ public void testStoreAndLoad() {
         Helper.removeDir(new File(fileStr));
 
         Directory dir = new RAMDirectory(fileStr, true).create();
-        Weighting weighting = new FastestWeighting(accessEnc, speedEnc);
+        Weighting weighting = CustomModelParser.createFastestWeighting(accessEnc, speedEnc, encodingManager);
         LMConfig lmConfig = new LMConfig("car", weighting);
         PrepareLandmarks plm = new PrepareLandmarks(dir, graph, encodingManager, lmConfig, 2);
         plm.setMinimumNodes(2);

File: core/src/test/java/com/graphhopper/routing/querygraph/QueryGraphTest.java
Patch:
@@ -487,7 +487,6 @@ public void testTurnCostsProperlyPropagated_Issue282() {
 
         EdgeIteratorState edge0 = graphWithTurnCosts.edge(0, 1).setDistance(10).set(speedEnc, 60, 60);
         EdgeIteratorState edge1 = graphWithTurnCosts.edge(2, 1).setDistance(10).set(speedEnc, 60, 60);
-
         Weighting weighting = new SpeedWeighting(speedEnc, turnCostEnc, graphWithTurnCosts.getTurnCostStorage(), Double.POSITIVE_INFINITY);
 
         // no turn costs initially

File: core/src/test/java/com/graphhopper/routing/subnetwork/EdgeBasedTarjanSCCTest.java
Patch:
@@ -20,7 +20,9 @@
 
 import com.carrotsearch.hppc.IntArrayList;
 import com.carrotsearch.hppc.cursors.IntCursor;
-import com.graphhopper.routing.ev.*;
+import com.graphhopper.routing.ev.DecimalEncodedValue;
+import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
+import com.graphhopper.routing.ev.EncodedValue;
 import com.graphhopper.routing.subnetwork.EdgeBasedTarjanSCC.ConnectedComponents;
 import com.graphhopper.routing.subnetwork.TarjanSCCTest.IntWithArray;
 import com.graphhopper.routing.util.AllEdgesIterator;

File: core/src/test/java/com/graphhopper/routing/subnetwork/SubnetworkStorageTest.java
Patch:
@@ -9,12 +9,12 @@ public class SubnetworkStorageTest {
 
     @Test
     public void testSimple() {
-        SubnetworkStorage storage = new SubnetworkStorage(new RAMDirectory().create("fastest"));
+        SubnetworkStorage storage = new SubnetworkStorage(new RAMDirectory().create("test"));
         storage.create(2000);
         storage.setSubnetwork(1, 88);
         assertEquals(88, storage.getSubnetwork(1));
         assertEquals(0, storage.getSubnetwork(0));
 
         storage.close();
     }
-}
\ No newline at end of file
+}

File: example/src/main/java/com/graphhopper/example/HeadingExample.java
Patch:
@@ -4,9 +4,8 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.config.CHProfile;
+
 import com.graphhopper.config.Profile;
-import com.graphhopper.json.Statement;
-import com.graphhopper.routing.weighting.custom.CustomProfile;
 import com.graphhopper.util.CustomModel;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.shapes.GHPoint;
@@ -35,7 +34,7 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/heading-graph-cache");
-        hopper.setProfiles(new CustomProfile("car").setCustomModel(new CustomModel().
+        hopper.setProfiles(new Profile("car").setCustomModel(new CustomModel().
                 addToPriority(If("road_access == DESTINATION", MULTIPLY, "0.1"))).
                 setVehicle("car").setTurnCosts(false));
         hopper.getCHPreparationHandler().setCHProfiles(new CHProfile("car"));

File: example/src/main/java/com/graphhopper/example/LocationIndexExample.java
Patch:
@@ -19,7 +19,7 @@ public static void main(String[] args) {
 
     public static void graphhopperLocationIndex(String relDir) {
         GraphHopper hopper = new GraphHopper();
-        hopper.setProfiles(new Profile("car").setVehicle("car").setWeighting("fastest"));
+        hopper.setProfiles(new Profile("car").setVehicle("car"));
         hopper.setOSMFile(relDir + "core/files/andorra.osm.pbf");
         hopper.setGraphHopperLocation("./target/locationindex-graph-cache");
         hopper.importOrLoad();

File: example/src/main/java/com/graphhopper/example/RoutingExampleTC.java
Patch:
@@ -67,7 +67,7 @@ static GraphHopper createGraphHopperInstance(String ghLoc) {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile(ghLoc);
         hopper.setGraphHopperLocation("target/routing-tc-graph-cache");
-        Profile profile = new Profile("car").setVehicle("car").setWeighting("fastest")
+        Profile profile = new Profile("car").setVehicle("car")
                 // enabling turn costs means OSM turn restriction constraints like 'no_left_turn' will be taken into account
                 .setTurnCosts(true)
                 // we can also set u_turn_costs (in seconds). by default no u-turns are allowed, but with this setting

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -131,7 +131,7 @@ public EdgeFilter getSnapFilter() {
 
             @Override
             public List<Path> calcPaths(QueryGraph queryGraph, int fromNode, int fromOutEdge, int[] toNodes, int[] toInEdges) {
-                assert(toNodes.length == toInEdges.length);
+                assert (toNodes.length == toInEdges.length);
                 List<Path> result = new ArrayList<>();
                 for (int i = 0; i < toNodes.length; i++) {
                     result.add(calcOnePath(queryGraph, fromNode, toNodes[i], fromOutEdge, toInEdges[i]));
@@ -572,4 +572,4 @@ default long getVisitedNodes() {
         }
     }
 
-}
\ No newline at end of file
+}

File: navigation/src/test/java/com/graphhopper/navigation/NavigateResponseConverterTest.java
Patch:
@@ -41,7 +41,7 @@ public static void beforeClass() {
                 setOSMFile(osmFile).
                 setStoreOnFlush(true).
                 setGraphHopperLocation(graphFolder).
-                setProfiles(new Profile(profile).setVehicle(vehicle).setWeighting("fastest").setTurnCosts(false)).
+                setProfiles(new Profile(profile).setVehicle(vehicle).setTurnCosts(false)).
                 importOrLoad();
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GraphHopperGtfs.java
Patch:
@@ -21,8 +21,7 @@
 import com.conveyal.gtfs.model.Transfer;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.GraphHopperConfig;
-import com.graphhopper.config.Profile;
-import com.graphhopper.routing.ev.*;
+import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.util.DefaultSnapFilter;
 import com.graphhopper.routing.weighting.Weighting;
@@ -173,7 +172,7 @@ private void insertInterpolatedTransfer(Label label, GtfsStorage.PlatformDescrip
     private boolean isValidPath(int[] edgeKeys) {
         List<EdgeIteratorState> edges = Arrays.stream(edgeKeys).mapToObj(i -> getBaseGraph().getEdgeIteratorStateForKey(i)).collect(Collectors.toList());
         for (int i = 1; i < edges.size(); i++) {
-            if (edges.get(i).getBaseNode() != edges.get(i-1).getAdjNode())
+            if (edges.get(i).getBaseNode() != edges.get(i - 1).getAdjNode())
                 return false;
         }
         TripFromLabel tripFromLabel = new TripFromLabel(getBaseGraph(), getEncodingManager(), gtfsStorage, RealtimeFeed.empty(), getPathDetailsBuilderFactory(), 6.0);

File: reader-gtfs/src/test/java/com/graphhopper/AnotherAgencyIT.java
Patch:
@@ -58,8 +58,8 @@ public static void init() {
         ghConfig.putObject("datareader.file", "files/beatty.osm");
         ghConfig.putObject("gtfs.file", "files/sample-feed,files/another-sample-feed");
         ghConfig.setProfiles(Arrays.asList(
-                new Profile("foot").setVehicle("foot").setWeighting("fastest"),
-                new Profile("car").setVehicle("car").setWeighting("fastest")));
+                new Profile("foot").setVehicle("foot"),
+                new Profile("car").setVehicle("car")));
         Helper.removeDir(new File(GRAPH_LOC));
         graphHopperGtfs = new GraphHopperGtfs(ghConfig);
         graphHopperGtfs.init(ghConfig);

File: reader-gtfs/src/test/java/com/graphhopper/ExtendedRouteTypeIT.java
Patch:
@@ -52,8 +52,8 @@ public static void init() {
         ghConfig.putObject("gtfs.file", "files/another-sample-feed-extended-route-type.zip");
         ghConfig.putObject("import.osm.ignored_highways", "");
         ghConfig.setProfiles(Arrays.asList(
-                new Profile("foot").setVehicle("foot").setWeighting("fastest"),
-                new Profile("car").setVehicle("car").setWeighting("fastest")));
+                new Profile("foot").setVehicle("foot"),
+                new Profile("car").setVehicle("car")));
         Helper.removeDir(new File(GRAPH_LOC));
         graphHopperGtfs = new GraphHopperGtfs(ghConfig);
         graphHopperGtfs.init(ghConfig);

File: reader-gtfs/src/test/java/com/graphhopper/FreeWalkIT.java
Patch:
@@ -61,8 +61,8 @@ public static void init() {
         // TODO: to the street router.
         ghConfig.putObject("gtfs.free_walk", true);
         ghConfig.setProfiles(Arrays.asList(
-                new Profile("foot").setVehicle("foot").setWeighting("fastest"),
-                new Profile("car").setVehicle("car").setWeighting("fastest")));
+                new Profile("foot").setVehicle("foot"),
+                new Profile("car").setVehicle("car")));
         Helper.removeDir(new File(GRAPH_LOC));
         graphHopperGtfs = new GraphHopperGtfs(ghConfig);
         graphHopperGtfs.init(ghConfig);

File: reader-gtfs/src/test/java/com/graphhopper/gtfs/analysis/AnalysisTest.java
Patch:
@@ -47,8 +47,8 @@ public static void init() {
         ghConfig.putObject("gtfs.file", "files/sample-feed,files/another-sample-feed");
         ghConfig.putObject("import.osm.ignored_highways", "");
         ghConfig.setProfiles(Arrays.asList(
-                new Profile("foot").setVehicle("foot").setWeighting("fastest"),
-                new Profile("car").setVehicle("car").setWeighting("fastest")));
+                new Profile("foot").setVehicle("foot"),
+                new Profile("car").setVehicle("car")));
         Helper.removeDir(new File(GRAPH_LOC));
         graphHopperGtfs = new GraphHopperGtfs(ghConfig);
         graphHopperGtfs.init(ghConfig);

File: tools/src/main/java/com/graphhopper/tools/CHMeasurement.java
Patch:
@@ -23,6 +23,7 @@
 import com.graphhopper.GraphHopperConfig;
 import com.graphhopper.config.CHProfile;
 import com.graphhopper.config.LMProfile;
+
 import com.graphhopper.config.Profile;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
@@ -89,7 +90,7 @@ private static void testPerformanceAutomaticNodeOrdering(String[] args) {
         if (withTurnCosts) {
             ghConfig.putObject("graph.vehicles", "car|turn_costs=true");
             ghConfig.setProfiles(Collections.singletonList(
-                    new Profile(profile).setVehicle("car").setWeighting("fastest").setTurnCosts(true).putHint(Parameters.Routing.U_TURN_COSTS, uTurnCosts)
+                    new Profile(profile).setVehicle("car").setTurnCosts(true).putHint(Parameters.Routing.U_TURN_COSTS, uTurnCosts)
             ));
             ghConfig.setCHProfiles(Collections.singletonList(
                     new CHProfile(profile)
@@ -103,7 +104,7 @@ private static void testPerformanceAutomaticNodeOrdering(String[] args) {
         } else {
             ghConfig.putObject("graph.vehicles", "car");
             ghConfig.setProfiles(Collections.singletonList(
-                    new Profile(profile).setVehicle("car").setWeighting("fastest").setTurnCosts(false)
+                    new Profile(profile).setVehicle("car").setTurnCosts(false)
             ));
         }
 

File: web-api/src/main/java/com/graphhopper/util/CustomModel.java
Patch:
@@ -24,9 +24,6 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
-/**
- * This class is used in combination with CustomProfile.
- */
 public class CustomModel {
 
     public static final String KEY = "custom_model";

File: web-bundle/src/main/java/com/graphhopper/resources/PtIsochroneResource.java
Patch:
@@ -28,8 +28,8 @@
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.DefaultSnapFilter;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndex;
@@ -95,7 +95,7 @@ public Response doGet(
         GeometryFactory geometryFactory = new GeometryFactory();
         BooleanEncodedValue accessEnc = encodingManager.getBooleanEncodedValue(VehicleAccess.key("foot"));
         DecimalEncodedValue speedEnc = encodingManager.getDecimalEncodedValue(VehicleSpeed.key("foot"));
-        final Weighting weighting = new FastestWeighting(accessEnc, speedEnc);
+        final Weighting weighting = CustomModelParser.createFastestWeighting(accessEnc, speedEnc, encodingManager);
         DefaultSnapFilter snapFilter = new DefaultSnapFilter(weighting, encodingManager.getBooleanEncodedValue(Subnetwork.key("foot")));
 
         PtLocationSnapper.Result snapResult = new PtLocationSnapper(baseGraph, locationIndex, gtfsStorage).snapAll(Arrays.asList(location), Arrays.asList(snapFilter));

File: web/src/test/java/com/graphhopper/application/GraphHopperLandmarksTest.java
Patch:
@@ -59,7 +59,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 // force landmark creation even for tiny networks
                 .putObject("prepare.lm.min_network_size", 2)
                 .setProfiles(Collections.singletonList(
-                        new Profile("car_profile").setVehicle("car").setWeighting("fastest")
+                        new Profile("car_profile").setVehicle("car")
                 ))
                 .setCHProfiles(Collections.singletonList(
                         new CHProfile("car_profile")
@@ -111,4 +111,4 @@ public void testLandmarkDisconnect() {
         double distance = json.get("paths").get(0).get("distance").asDouble();
         assertEquals(5790, distance, 100, "distance wasn't correct:" + distance);
     }
-}
\ No newline at end of file
+}

File: web/src/test/java/com/graphhopper/application/MapMatching2Test.java
Patch:
@@ -59,7 +59,7 @@ public void testIssue13() throws IOException {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile("../map-matching/files/map-issue13.osm.gz");
         hopper.setGraphHopperLocation(GH_LOCATION);
-        hopper.setProfiles(new Profile("my_profile").setVehicle("car").setWeighting("fastest"));
+        hopper.setProfiles(new Profile("my_profile").setVehicle("car"));
         hopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         hopper.importOrLoad();
 
@@ -84,7 +84,7 @@ public void testIssue70() throws IOException {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile("../map-matching/files/issue-70.osm.gz");
         hopper.setGraphHopperLocation(GH_LOCATION);
-        hopper.setProfiles(new Profile("my_profile").setVehicle("car").setWeighting("fastest"));
+        hopper.setProfiles(new Profile("my_profile").setVehicle("car"));
         hopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         hopper.importOrLoad();
 
@@ -104,7 +104,7 @@ public void testIssue127() throws IOException {
         GraphHopper hopper = new GraphHopper();
         hopper.setOSMFile("../map-matching/files/map-issue13.osm.gz");
         hopper.setGraphHopperLocation(GH_LOCATION);
-        hopper.setProfiles(new Profile("my_profile").setVehicle("car").setWeighting("fastest"));
+        hopper.setProfiles(new Profile("my_profile").setVehicle("car"));
         hopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         hopper.importOrLoad();
 

File: web/src/test/java/com/graphhopper/application/RoutingAdditivityTest.java
Patch:
@@ -48,7 +48,7 @@ public static void setup() {
         graphHopper = new GraphHopper();
         graphHopper.setOSMFile("../map-matching/files/leipzig_germany.osm.pbf");
         graphHopper.setGraphHopperLocation(GH_LOCATION);
-        graphHopper.setProfiles(new Profile("my_profile").setVehicle("car").setWeighting("fastest"));
+        graphHopper.setProfiles(new Profile("my_profile").setVehicle("car"));
         graphHopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
         graphHopper.importOrLoad();
     }

File: web/src/test/java/com/graphhopper/application/resources/GpxTravelTimeConsistencyTest.java
Patch:
@@ -46,7 +46,7 @@ public static void beforeClass() {
         Helper.removeDir(new File(graphFileFoot));
         hopper = new GraphHopper().
                 setOSMFile(osmFile).
-                setProfiles(new Profile("profile").setVehicle("foot").setWeighting("fastest")).
+                setProfiles(new Profile("profile").setVehicle("foot")).
                 setStoreOnFlush(true).
                 setGraphHopperLocation(graphFileFoot).
                 importOrLoad();

File: web/src/test/java/com/graphhopper/application/resources/I18nResourceTest.java
Patch:
@@ -50,7 +50,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/andorra.osm.pbf").
                 putObject("graph.location", DIR).
                 putObject("import.osm.ignored_highways", "").
-                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car").setWeighting("fastest")));
+                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car")));
         return config;
     }
 

File: web/src/test/java/com/graphhopper/application/resources/MVTResourceTest.java
Patch:
@@ -59,7 +59,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/andorra.osm.pbf").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
-                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car").setWeighting("fastest")));
+                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car")));
         return config;
     }
 

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTest.java
Patch:
@@ -59,8 +59,8 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
                 setProfiles(Arrays.asList(
-                        new Profile("fast_car").setVehicle("car").setWeighting("fastest"),
-                        new Profile("fast_bike").setVehicle("bike").setWeighting("fastest")));
+                        new Profile("fast_car").setVehicle("car"),
+                        new Profile("fast_bike").setVehicle("bike")));
         return config;
     }
 

File: web/src/test/java/com/graphhopper/application/resources/MapMatchingResourceTurnCostsTest.java
Patch:
@@ -62,9 +62,9 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
                 setProfiles(Arrays.asList(
-                        new Profile("car").setVehicle("car").setWeighting("fastest").setTurnCosts(true),
-                        new Profile("car_no_tc").setVehicle("car").setWeighting("fastest"),
-                        new Profile("bike").setVehicle("bike").setWeighting("fastest"))
+                        new Profile("car").setVehicle("car").setTurnCosts(true),
+                        new Profile("car_no_tc").setVehicle("car"),
+                        new Profile("bike").setVehicle("bike"))
                 ).
                 setLMProfiles(Arrays.asList(
                         new LMProfile("car"),

File: web/src/test/java/com/graphhopper/application/resources/NearestResourceTest.java
Patch:
@@ -53,7 +53,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/andorra.osm.pbf").
                 putObject("graph.location", dir).
                 putObject("import.osm.ignored_highways", "").
-                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car").setWeighting("fastest")));
+                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car")));
         return config;
     }
 

File: web/src/test/java/com/graphhopper/application/resources/NearestResourceWithEleTest.java
Patch:
@@ -55,7 +55,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/monaco.osm.gz").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", dir).
-                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car").setWeighting("fastest")));
+                setProfiles(Collections.singletonList(new Profile("car").setVehicle("car")));
         return config;
     }
 

File: web/src/test/java/com/graphhopper/application/resources/PtIsochroneTest.java
Patch:
@@ -60,7 +60,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 .putObject("graph.location", GRAPH_LOC)
                 .putObject("gtfs.file", "../reader-gtfs/files/sample-feed")
                 .putObject("import.osm.ignored_highways", "").
-                setProfiles(Collections.singletonList(new Profile("foot").setVehicle("foot").setWeighting("fastest")));
+                setProfiles(Collections.singletonList(new Profile("foot").setVehicle("foot")));
         Helper.removeDir(new File(GRAPH_LOC));
         return config;
     }

File: web/src/test/java/com/graphhopper/application/resources/PtRouteResourceTest.java
Patch:
@@ -55,7 +55,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("gtfs.file", "../reader-gtfs/files/sample-feed").
                 putObject("graph.location", DIR).
                 putObject("import.osm.ignored_highways", "").
-                setProfiles(Collections.singletonList(new Profile("foot").setVehicle("foot").setWeighting("fastest")));
+                setProfiles(Collections.singletonList(new Profile("foot").setVehicle("foot")));
         return config;
     }
 

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceIssue2020Test.java
Patch:
@@ -54,7 +54,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("graph.encoded_values", "road_class,surface,road_environment,max_speed").
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
-                setProfiles(Collections.singletonList(new Profile("my_car").setVehicle("car").setWeighting("fastest"))).
+                setProfiles(Collections.singletonList(new Profile("my_car").setVehicle("car"))).
                 setLMProfiles(Collections.singletonList(new LMProfile("my_car")));
         return config;
     }

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceTest.java
Patch:
@@ -91,7 +91,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("graph.location", DIR)
                 // adding this so the corresponding check is not just skipped...
                 .putObject(MAX_NON_CH_POINT_DISTANCE, 10e6)
-                .setProfiles(Collections.singletonList(new Profile("my_car").setVehicle("car").setWeighting("fastest")))
+                .setProfiles(Collections.singletonList(new Profile("my_car").setVehicle("car")))
                 .setCHProfiles(Collections.singletonList(new CHProfile("my_car")));
         return config;
     }

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceTruckTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.graphhopper.application.GraphHopperServerConfiguration;
 import com.graphhopper.application.util.GraphHopperServerTestConfiguration;
 import com.graphhopper.config.CHProfile;
-import com.graphhopper.routing.weighting.custom.CustomProfile;
+import com.graphhopper.config.Profile;
 import com.graphhopper.util.Helper;
 import io.dropwizard.testing.junit5.DropwizardAppExtension;
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
@@ -37,7 +37,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,hgv").
                 putObject("import.osm.ignored_highways", "").
                 putObject("custom_models.directory", "./src/test/resources/com/graphhopper/application/resources").
-                setProfiles(Arrays.asList(new CustomProfile("truck").setCustomModel(null).
+                setProfiles(Arrays.asList(new Profile("truck").setCustomModel(null).
                         setVehicle("roads").putHint("custom_model_files", Arrays.asList("test_truck.json")))).
                 setCHProfiles(Arrays.asList(new CHProfile("truck")));
         return config;

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceWithEleTest.java
Patch:
@@ -56,7 +56,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("graph.location", dir).
                 putObject("import.osm.ignored_highways", "").
                 setProfiles(Collections.singletonList(
-                        new Profile("profile").setVehicle("car").setWeighting("fastest")
+                        new Profile("profile").setVehicle("car")
                 ));
         return config;
     }

File: web/src/test/java/com/graphhopper/application/resources/SPTResourceTest.java
Patch:
@@ -53,8 +53,8 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.location", DIR).
                 setProfiles(Arrays.asList(
-                        new Profile("car_without_turncosts").setVehicle("car").setWeighting("fastest"),
-                        new Profile("car_with_turncosts").setVehicle("car").setWeighting("fastest").setTurnCosts(true)
+                        new Profile("car_without_turncosts").setVehicle("car"),
+                        new Profile("car_with_turncosts").setVehicle("car").setTurnCosts(true)
                 ));
         return config;
     }

File: web-api/src/main/java/com/graphhopper/jackson/MultiException.java
Patch:
@@ -26,6 +26,7 @@ public class MultiException extends RuntimeException {
     private final List<Throwable> errors;
 
     public MultiException(List<Throwable> errors) {
+        super(errors.toString());
         this.errors = errors;
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -248,8 +248,8 @@ public GraphHopper setStoreOnFlush(boolean storeOnFlush) {
      * <pre>
      * {@code
      *   hopper.setProfiles(
-     *     new Profile("my_car").setVehicle("car").setWeighting("shortest"),
-     *     new Profile("your_bike").setVehicle("bike").setWeighting("fastest")
+     *     new CustomProfile("my_car").setVehicle("car"),
+     *     new CustomProfile("your_bike").setVehicle("bike")
      *   );
      *   hopper.getCHPreparationHandler().setCHProfiles(
      *     new CHProfile("my_car"),

File: core/src/main/java/com/graphhopper/routing/DefaultWeightingFactory.java
Patch:
@@ -95,7 +95,7 @@ public Weighting createWeighting(Profile profile, PMap requestHints, boolean dis
             weighting = CustomModelParser.createWeighting(accessEnc, speedEnc,
                     priorityEnc, encodingManager, turnCostProvider, mergedCustomModel);
         } else if ("shortest".equalsIgnoreCase(weightingStr)) {
-            weighting = new ShortestWeighting(accessEnc, speedEnc, turnCostProvider);
+            throw new IllegalArgumentException("Instead of weighting=shortest use weighting=custom with a high distance_influence");
         } else if ("fastest".equalsIgnoreCase(weightingStr)) {
             if (!encodingManager.hasEncodedValue(RoadAccess.KEY))
                 throw new IllegalArgumentException("The fastest weighting requires road_access");

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
Patch:
@@ -91,7 +91,7 @@ static boolean isValidName(String name) {
 
     @Override
     public String toString() {
-        return getName() + "|" + speedEnc.getName().split("$")[0];
+        return getName() + "|" + speedEnc.getName();
     }
 
 }

File: core/src/main/java/com/graphhopper/routing/weighting/Weighting.java
Patch:
@@ -20,8 +20,7 @@
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
- * Specifies how the best route is calculated. E.g. the fastest or shortest route.
- * <p>
+ * Specifies how the best route is calculated.
  *
  * @author Peter Karich
  */

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -118,4 +118,4 @@ public double getSlack() {
             return 0;
         }
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionCHTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.ShortestWeighting;
+import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.PMap;
@@ -73,7 +74,7 @@ public void testBaseGraph() {
         RoutingAlgorithmTest.initDirectedAndDiffSpeed(graph, carAccessEnc, carSpeedEnc);
 
         // do CH preparation for car
-        ShortestWeighting weighting = new ShortestWeighting(carAccessEnc, carSpeedEnc);
+        Weighting weighting = new ShortestWeighting(carAccessEnc, carSpeedEnc);
         prepareCH(graph, CHConfig.nodeBased(weighting.getName(), weighting));
 
         // use base graph for solving normal Dijkstra
@@ -145,7 +146,7 @@ public void testStallingNodesReducesNumberOfVisitedNodes() {
         GHUtility.setSpeed(60, true, false, carAccessEnc, carSpeedEnc, graph.edge(3, 9).setDistance(200));
         graph.freeze();
 
-        ShortestWeighting weighting = new ShortestWeighting(carAccessEnc, carSpeedEnc);
+        Weighting weighting = new ShortestWeighting(carAccessEnc, carSpeedEnc);
         CHConfig chConfig = CHConfig.nodeBased(weighting.getName(), weighting);
         CHStorage store = CHStorage.fromGraph(graph, chConfig);
 

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -217,6 +217,7 @@ public void testContractNode_directed_withWitness() {
     @Test
     public void testNodeContraction_shortcutDistanceRounding() {
         assertTrue(weighting instanceof ShortestWeighting, "this test was constructed assuming we are using the ShortestWeighting");
+
         // 0 ------------> 4
         //  \             /
         //   1 --> 2 --> 3

File: core/src/test/java/com/graphhopper/routing/lm/LMPreparationHandlerTest.java
Patch:
@@ -64,4 +64,4 @@ public void testPrepareWeightingNo() {
         handler.init(ghConfig);
         assertFalse(handler.isEnabled());
     }
-}
\ No newline at end of file
+}

File: core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
Patch:
@@ -129,7 +129,8 @@ public void calcWeightAndTime_uTurnCosts() {
     @Test
     public void calcWeightAndTime_withTurnCosts_shortest() {
         BaseGraph graph = new BaseGraph.Builder(encodingManager).withTurnCosts(true).create();
-        Weighting weighting = new ShortestWeighting(accessEnc, speedEnc, new DefaultTurnCostProvider(turnCostEnc, graph.getTurnCostStorage()));
+        Weighting weighting = new ShortestWeighting(accessEnc, speedEnc,
+                new DefaultTurnCostProvider(turnCostEnc, graph.getTurnCostStorage()));
         GHUtility.setSpeed(60, true, true, accessEnc, speedEnc, graph.edge(0, 1).setDistance(100));
         EdgeIteratorState edge = GHUtility.setSpeed(60, true, true, accessEnc, speedEnc, graph.edge(1, 2).setDistance(100));
         // turn costs are given in seconds

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.ShortestWeighting;
+import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.details.PathDetail;
@@ -108,7 +109,7 @@ public void testScenario() {
         tmpEdge.setWayGeometry(list);
 
         // Path is: [0 0-1, 3 1-4, 6 4-7, 9 7-8, 11 8-9, 10 9-10]
-        ShortestWeighting weighting = new ShortestWeighting(accessEnc, speedEnc);
+        Weighting weighting = new ShortestWeighting(accessEnc, speedEnc);
         Path p = new Dijkstra(g, weighting, tMode).calcPath(0, 10);
         InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, carManager, usTR);
         Map<String, List<PathDetail>> details = PathDetailsFromEdges.calcDetails(p, carManager, weighting,

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -104,7 +104,7 @@ public Response doGet(
         ToDoubleFunction<ShortestPathTree.IsoLabel> fz;
         if (weightLimit.orElseThrow(() -> new IllegalArgumentException("query param weight_limit is not a number.")) > 0) {
             limit = weightLimit.getAsLong();
-            shortestPathTree.setWeightLimit(limit + Math.max(limit * 0.14, 2_000));
+            shortestPathTree.setWeightLimit(limit + Math.max(limit * 0.14, 200));
             fz = l -> l.weight;
         } else if (distanceLimitInMeter.orElseThrow(() -> new IllegalArgumentException("query param distance_limit is not a number.")) > 0) {
             limit = distanceLimitInMeter.getAsLong();
@@ -195,4 +195,4 @@ static double degreesFromMeters(double distanceInMeters) {
         return distanceInMeters / DistanceCalcEarth.METERS_PER_DEGREE;
     }
 
-}
\ No newline at end of file
+}

File: web-bundle/src/test/java/com/graphhopper/gpx/GpxConversionsTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.ShortestWeighting;
+import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.*;
@@ -89,7 +90,7 @@ public void testInstructionsWithTimeAndPlace() {
         GHUtility.setSpeed(9, true, true, accessEnc, speedEnc, g.edge(3, 7).setDistance(10000).setKeyValues(createKV(STREET_NAME, "3-7")));
         GHUtility.setSpeed(90, true, true, accessEnc, speedEnc, g.edge(4, 5).setDistance(10000).setKeyValues(createKV(STREET_NAME, "4-5")));
 
-        ShortestWeighting weighting = new ShortestWeighting(accessEnc, speedEnc);
+        Weighting weighting = new ShortestWeighting(accessEnc, speedEnc);
         Path p = new Dijkstra(g, weighting, TraversalMode.NODE_BASED).calcPath(1, 5);
         InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, carManager, trMap.getWithFallBack(Locale.US));
         PointList points = p.calcPoints();

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceProfileSelectionTest.java
Patch:
@@ -63,7 +63,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 .setProfiles(Arrays.asList(
                         new Profile("my_car").setVehicle("car").setWeighting("fastest"),
                         new CustomProfile("my_bike").setCustomModel(new CustomModel().setDistanceInfluence(200d)).setVehicle("bike"),
-                        new Profile("my_feet").setVehicle("foot").setWeighting("shortest")
+                        new CustomProfile("my_feet").setVehicle("foot")
                 ))
                 .setCHProfiles(Arrays.asList(
                         new CHProfile("my_car"),
@@ -89,7 +89,7 @@ public static void cleanUp() {
     public void selectUsingProfile(String mode) {
         assertDistance("my_car", mode, 3563);
         assertDistance("my_bike", mode, 3296);
-        assertDistance("my_feet", mode, 2935);
+        assertDistance("my_feet", mode, 3158);
         assertError("my_pink_car", mode, "The requested profile 'my_pink_car' does not exist");
     }
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmTest.java
Patch:
@@ -1012,8 +1012,7 @@ public void testRandomGraph(Fixture f) {
         final long seed = System.nanoTime();
         LOGGER.info("testRandomGraph - using seed: " + seed);
         Random rnd = new Random(seed);
-        GHUtility.buildRandomGraph(graph, rnd, 10, 2.0, true,
-                f.carAccessEnc, f.carSpeedEnc, null, 0.7, 0.7);
+        GHUtility.buildRandomGraph(graph, rnd, 10, 2.0, true, f.carAccessEnc, f.carSpeedEnc, null, 0.7, 0.7);
         final PathCalculator refCalculator = new DijkstraCalculator();
         int numRuns = 100;
         for (int i = 0; i < numRuns; i++) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/CarAverageSpeedParser.java
Patch:
@@ -145,7 +145,7 @@ public void handleWayTags(int edgeId, EdgeIntAccess edgeIntAccess, ReaderWay way
      */
     protected double applyMaxSpeed(ReaderWay way, double speed, boolean bwd) {
         double maxSpeed = getMaxSpeed(way, bwd);
-        return Math.min(140, isValidSpeed(maxSpeed) ? maxSpeed * 0.9 : speed);
+        return Math.min(140, isValidSpeed(maxSpeed) ? Math.max(1, maxSpeed * 0.9) : speed);
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/util/parsers/RoadsAverageSpeedParser.java
Patch:
@@ -9,7 +9,6 @@
 import com.graphhopper.util.PMap;
 
 public class RoadsAverageSpeedParser implements TagParser {
-    public static final double ROADS_MAX_SPEED = 254;
     private final DecimalEncodedValue avgSpeedEnc;
     private final double maxPossibleSpeed;
 
@@ -19,7 +18,7 @@ public RoadsAverageSpeedParser(EncodedValueLookup lookup, PMap properties) {
 
     public RoadsAverageSpeedParser(DecimalEncodedValue avgSpeedEnc) {
         this.avgSpeedEnc = avgSpeedEnc;
-        this.maxPossibleSpeed = this.avgSpeedEnc.getNextStorableValue(ROADS_MAX_SPEED);
+        this.maxPossibleSpeed = this.avgSpeedEnc.getMaxStorableDecimal();
     }
 
     @Override

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -2799,7 +2799,7 @@ public void testLoadGraph_implicitEncodedValues_issue1862() {
     void testLoadingWithAnotherSpeedFactorWorks() {
         {
             GraphHopper hopper = new GraphHopper()
-                    .setVehiclesString("car|speed_factor=7")
+                    .setVehiclesString("car|speed_factor=3")
                     .setProfiles(new Profile("car").setVehicle("car").setWeighting("fastest"))
                     .setGraphHopperLocation(GH_LOCATION)
                     .setOSMFile(BAYREUTH);

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -221,7 +221,7 @@ public void cleanUp() {
         assertEquals(6, iter.get(carSpeedEnc), 1e-1);
 
         // duration 01:10 is given => more precise speed calculation!
-        // ~111km (from 54.0,10.1 to 55.0,10.2) in duration=70 minutes => 95km/h => / 1.4 => 71km/h
+        // ~111km (from 54.0,10.1 to 55.0,10.2) in duration=70 minutes => 95km/h => / 1.4 => 68km/h
         iter = carOutExplorer.setBaseNode(n40);
         iter.next();
         assertEquals(68, iter.get(carSpeedEnc), 1e-1);
@@ -698,7 +698,7 @@ public void testTurnFlagCombination() {
                 return new VehicleTagParsers(
                         new CarAccessParser(lookup.getBooleanEncodedValue(VehicleAccess.key("truck")), lookup.getBooleanEncodedValue(Roundabout.KEY), config, TransportationMode.HGV)
                                 .init(config.getObject("date_range_parser", new DateRangeParser())),
-                        new CarAverageSpeedParser(lookup.getDecimalEncodedValue(VehicleSpeed.key("truck")), 120),
+                        new CarAverageSpeedParser(lookup.getDecimalEncodedValue(VehicleSpeed.key("truck"))),
                         null
                 );
             }

File: core/src/main/java/com/graphhopper/routing/ev/State.java
Patch:
@@ -45,7 +45,9 @@ public enum State {
     FM_YAP("FM-YAP", FSM),
 
     // United Kingdom
-    GB_SCT("GB-SCT", GBR),
+    // TODO currently it isn't supported when the states list does not cover the entire country
+    //  furthermore the speed limits for Scotland are not different for car
+    // GB_SCT("GB-SCT", GBR),
 
     // Netherlands
     NL_BQ1("NL-BQ1", NLD),

File: core/src/main/java/com/graphhopper/routing/util/MaxSpeedCalculator.java
Patch:
@@ -77,7 +77,7 @@ private static void convertMaxspeed(Set<Map.Entry<String, List<RoadTypeImpl>>> e
                         double tmp = OSMValueExtractor.stringToKmh(tags.getValue());
                         if (Double.isNaN(tmp))
                             throw new IllegalStateException("illegal maxspeed " + tags.getValue());
-                        newTags.put("maxspeed", "" + Math.round(tmp));
+                        newTags.put(tags.getKey(), "" + Math.round(tmp));
                     }
                 }
                 roadType.setTags(newTags);

File: core/src/test/java/com/graphhopper/routing/util/AreaIndexTest.java
Patch:
@@ -139,6 +139,7 @@ public void testCountries() {
         assertEquals("FR", countryIndex.query(48.86471, 2.349014).get(0).getProperties().get(State.ISO_3166_2));
         assertEquals("US-NM", countryIndex.query(35.67514, -105.94665).get(0).getProperties().get(State.ISO_3166_2));
         assertEquals("AT", countryIndex.query(48.20448, 16.10788).get(0).getProperties().get(State.ISO_3166_2));
+        assertEquals("GB", countryIndex.query(51.6730876, 0.0041691).get(0).getProperties().get(State.ISO_3166_2));
     }
 
     private AreaIndex<CustomArea> createCountryIndex() {

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonPriorityParser.java
Patch:
@@ -178,7 +178,7 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, PriorityCode> w
                 || isValidSpeed(maxSpeed) && maxSpeed >= avoidSpeedLimit && !"track".equals(highway)) {
             PriorityCode priorityCode = avoidHighwayTags.get(highway);
             weightToPrioMap.put(50d, priorityCode == null ? AVOID : priorityCode);
-            if (way.hasTag("tunnel", intendedValues) || way.hasTag("hazmat", intendedValues)) {
+            if (way.hasTag("tunnel", intendedValues)) {
                 PriorityCode worse = priorityCode == null ? BAD : priorityCode.worse().worse();
                 weightToPrioMap.put(50d,  worse == EXCLUDE ? REACH_DESTINATION : worse);
             }

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -37,6 +37,8 @@ public EncodedValue create(String name, PMap properties) {
             return RoadAccess.create();
         } else if (MaxSpeed.KEY.equals(name)) {
             return MaxSpeed.create();
+        } else if (MaxSpeedEstimated.KEY.equals(name)) {
+            return MaxSpeedEstimated.create();
         } else if (MaxWeight.KEY.equals(name)) {
             return MaxWeight.create();
         } else if (MaxWeightExcept.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -60,7 +60,7 @@ public GHDirectory(String _location, DAType defaultType) {
      * the specified percentage (only applied for load, not for import).
      * As keys can be patterns the order is important and the LinkedHashMap is forced as type.
      */
-    public void configure(LinkedHashMap<String, String> config) {
+    public Directory configure(LinkedHashMap<String, String> config) {
         for (Map.Entry<String, String> kv : config.entrySet()) {
             String value = kv.getValue().trim();
             if (kv.getKey().startsWith("preload."))
@@ -75,6 +75,7 @@ public void configure(LinkedHashMap<String, String> config) {
                 defaultTypes.put(pattern, DAType.fromString(value));
             }
         }
+        return this;
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/ch/CHPreparationGraph.java
Patch:
@@ -131,7 +131,7 @@ public static TurnCostFunction buildTurnCostFunctionFromTurnCostStorage(Graph gr
             int viaNode = tcIter.getViaNode();
             if (viaNode < lastNode)
                 throw new IllegalStateException();
-            long edgePair = BitUtil.LITTLE.combineIntsToLong(tcIter.getFromEdge(), tcIter.getToEdge());
+            long edgePair = BitUtil.LITTLE.toLong(tcIter.getFromEdge(), tcIter.getToEdge());
             // note that as long as we only use OSM turn restrictions all the turn costs are infinite anyway
             double turnCost = tcIter.getCost(turnCostEnc);
             int index = turnCostEdgePairs.size();

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -213,7 +213,7 @@ private void findAndHandlePrepareShortcuts(int node, PrepareShortcutHandler shor
                         root = root.getParent();
                     // we make sure to add each shortcut only once. when we are actually adding shortcuts we check for existing
                     // shortcuts anyway, but at least this is important when we *count* shortcuts.
-                    long addedShortcutKey = BitUtil.LITTLE.combineIntsToLong(root.firstEdgeKey, bridgePath.value.chEntry.incEdgeKey);
+                    long addedShortcutKey = BitUtil.LITTLE.toLong(root.firstEdgeKey, bridgePath.value.chEntry.incEdgeKey);
                     if (!addedShortcuts.add(addedShortcutKey))
                         continue;
                     double initialTurnCost = prepareGraph.getTurnWeight(origInKey, sourceNode, root.firstEdgeKey);

File: core/src/main/java/com/graphhopper/routing/ev/TurnCost.java
Patch:
@@ -1,7 +1,7 @@
 package com.graphhopper.routing.ev;
 
 import com.graphhopper.storage.IntsRef;
-import com.graphhopper.util.Helper;
+import com.graphhopper.util.BitUtil;
 
 import static com.graphhopper.routing.util.EncodingManager.getKey;
 
@@ -15,7 +15,7 @@ public static String key(String prefix) {
      * This creates an EncodedValue specifically for the turn costs
      */
     public static DecimalEncodedValue create(String name, int maxTurnCosts) {
-        int turnBits = Helper.countBitValue(maxTurnCosts);
+        int turnBits = BitUtil.countBitValue(maxTurnCosts);
         return new DecimalEncodedValueImpl(key(name), turnBits, 0, 1, false, false, true);
     }
 

File: core/src/main/java/com/graphhopper/search/KVStorage.java
Patch:
@@ -110,7 +110,7 @@ public KVStorage create(long initBytes) {
     public boolean loadExisting() {
         if (vals.loadExisting()) {
             if (!keys.loadExisting()) throw new IllegalStateException("Loaded values but cannot load keys");
-            bytePointer = bitUtil.combineIntsToLong(vals.getHeader(0), vals.getHeader(4));
+            bytePointer = bitUtil.toLong(vals.getHeader(0), vals.getHeader(4));
             GHUtility.checkDAVersion(vals.getName(), Constants.VERSION_KV_STORAGE, vals.getHeader(8));
             GHUtility.checkDAVersion(keys.getName(), Constants.VERSION_KV_STORAGE, keys.getHeader(0));
 

File: core/src/test/java/com/graphhopper/search/KVStorageTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.carrotsearch.hppc.LongArrayList;
 import com.graphhopper.search.KVStorage.KeyValue;
 import com.graphhopper.storage.RAMDirectory;
+import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.Helper;
 import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
@@ -399,6 +400,6 @@ public void testMax() {
         long pointer = Integer.MAX_VALUE;
         int storedPointer = (int) (pointer + 100);
         assertTrue(storedPointer < 0);
-        assertEquals(pointer + 100, Helper.toUnsignedLong(storedPointer));
+        assertEquals(pointer + 100, BitUtil.toUnsignedLong(storedPointer));
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -916,9 +916,7 @@ protected void importOSM() {
             logger.info("Creating custom area index, reading custom areas from: '" + customAreasDirectory + "'");
             customAreas.addAll(readCustomAreas());
         }
-        CustomArea area = GHUtility.getFirstDuplicateArea(customAreas, Country.ISO_ALPHA3);
-        if (area != null)
-            throw new IllegalArgumentException("area used duplicate '" + Country.ISO_ALPHA3 + "' see properties: " + area.getProperties());
+
         AreaIndex<CustomArea> areaIndex = new AreaIndex<>(customAreas);
         if (countryRuleFactory == null || countryRuleFactory.getCountryToRuleMap().isEmpty()) {
             logger.info("No country rules available");

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -81,6 +81,8 @@ public EncodedValue create(String name, PMap properties) {
             return HorseRating.create();
         } else if (Country.KEY.equals(name)) {
             return Country.create();
+        } else if (State.KEY.equals(name)) {
+            return State.create();
         } else if (name.endsWith(Subnetwork.key(""))) {
             return Subnetwork.create(name);
         } else if (MaxSlope.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/routing/util/countryrules/CountryRuleFactory.java
Patch:
@@ -19,13 +19,13 @@
 package com.graphhopper.routing.util.countryrules;
 
 
-import static com.graphhopper.routing.ev.Country.*;
+import com.graphhopper.routing.ev.Country;
+import com.graphhopper.routing.util.countryrules.europe.*;
 
 import java.util.EnumMap;
 import java.util.Map;
 
-import com.graphhopper.routing.ev.Country;
-import com.graphhopper.routing.util.countryrules.europe.*;
+import static com.graphhopper.routing.ev.Country.*;
 
 public class CountryRuleFactory {
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultTagParserFactory.java
Patch:
@@ -79,6 +79,8 @@ else if (name.equals(Footway.KEY))
             return new OSMFootwayParser(lookup.getEnumEncodedValue(Footway.KEY, Footway.class));
         else if (name.equals(Country.KEY))
             return new CountryParser(lookup.getEnumEncodedValue(Country.KEY, Country.class));
+        else if (name.equals(State.KEY))
+            return new StateParser(lookup.getEnumEncodedValue(State.KEY, State.class));
         else if (name.equals(Crossing.KEY))
             return new OSMCrossingParser(lookup.getEnumEncodedValue(Crossing.KEY, Crossing.class));
         return null;

File: core/src/test/java/com/graphhopper/routing/weighting/custom/ConditionalExpressionVisitorTest.java
Patch:
@@ -74,7 +74,8 @@ public void testConvertExpression() {
 
     @Test
     public void isValidAndSimpleCondition() {
-        NameValidator validVariable = s -> Helper.toUpperCase(s).equals(s) || s.equals("road_class") || s.equals("toll") || s.equals("my_speed") || s.equals("backward_my_speed");
+        NameValidator validVariable = s -> Helper.toUpperCase(s).equals(s)
+                || s.equals("road_class") || s.equals("toll") || s.equals("my_speed") || s.equals("backward_my_speed");
 
         ParseResult result = parse("in_something", validVariable);
         assertTrue(result.ok);
@@ -132,4 +133,4 @@ public void testNegativeConstant() {
         assertTrue(result.ok);
         assertTrue(result.guessedVariables.isEmpty());
     }
-}
\ No newline at end of file
+}

File: core/src/main/java/com/graphhopper/routing/querygraph/QueryGraph.java
Patch:
@@ -157,7 +157,7 @@ public int getNodes() {
 
     @Override
     public int getEdges() {
-        return queryOverlay.getNumVirtualEdges() + baseEdges;
+        return queryOverlay.getNumVirtualEdges() / 2 + baseEdges;
     }
 
     @Override
@@ -308,4 +308,4 @@ private UnsupportedOperationException exc() {
         return new UnsupportedOperationException("QueryGraph cannot be modified.");
     }
 
-}
\ No newline at end of file
+}

File: core/src/main/java/com/graphhopper/routing/util/VehicleTagParsers.java
Patch:
@@ -106,7 +106,7 @@ public TagParser getPriorityParser() {
     }
 
     public List<TagParser> getTagParsers() {
-        return Arrays.asList(accessParser, speedParser, priorityParser);
+        return priorityParser == null ? Arrays.asList(accessParser, speedParser) : Arrays.asList(accessParser, speedParser, priorityParser);
     }
 
 }

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonAverageSpeedParser.java
Patch:
@@ -73,8 +73,7 @@ protected BikeCommonAverageSpeedParser(DecimalEncodedValue speedEnc, EnumEncoded
         setHighwaySpeed("living_street", PUSHING_SECTION_SPEED);
         setHighwaySpeed("steps", MIN_SPEED);
 
-        final int CYCLEWAY_SPEED = 18;  // Make sure cycleway and path use same speed value, see #634
-        setHighwaySpeed("cycleway", CYCLEWAY_SPEED);
+        setHighwaySpeed("cycleway", 18);
         setHighwaySpeed("path", 10);
         setHighwaySpeed("footway", 6);
         setHighwaySpeed("platform", PUSHING_SECTION_SPEED);
@@ -171,7 +170,7 @@ int getSpeed(ReaderWay way) {
             // Under certain conditions we need to increase the speed of pushing sections to the speed of a "highway=cycleway"
         else if (way.hasTag("highway", pushingSectionsHighways)
                 && ((way.hasTag("foot", "yes") && way.hasTag("segregated", "yes"))
-                || (way.hasTag("bicycle", intendedValues))))
+                || (way.hasTag("bicycle", intendedValues)) && !way.hasTag("highway", "steps")))
             highwaySpeed = getHighwaySpeed("cycleway");
 
         String s = way.getTag("surface");

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeTagParserTest.java
Patch:
@@ -200,7 +200,7 @@ public void testSpeedAndPriority() {
 
         way.clearTags();
         way.setTag("highway", "steps");
-        assertPriorityAndSpeed(SLIGHT_AVOID, 2, way);
+        assertPriorityAndSpeed(BAD, 2, way);
 
         way.clearTags();
         way.setTag("highway", "residential");
@@ -210,9 +210,9 @@ public void testSpeedAndPriority() {
         way.clearTags();
         way.setTag("highway", "steps");
         way.setTag("surface", "wood");
-        assertPriorityAndSpeed(SLIGHT_AVOID, MIN_SPEED, way);
+        assertPriorityAndSpeed(BAD, MIN_SPEED, way);
         way.setTag("maxspeed", "20");
-        assertPriorityAndSpeed(SLIGHT_AVOID, MIN_SPEED, way);
+        assertPriorityAndSpeed(BAD, MIN_SPEED, way);
 
         way.clearTags();
         way.setTag("highway", "track");

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceProfileSelectionTest.java
Patch:
@@ -88,7 +88,7 @@ public static void cleanUp() {
     @ValueSource(strings = {"CH", "LM", "flex"})
     public void selectUsingProfile(String mode) {
         assertDistance("my_car", mode, 3563);
-        assertDistance("my_bike", mode, 3085);
+        assertDistance("my_bike", mode, 3296);
         assertDistance("my_feet", mode, 2935);
         assertError("my_pink_car", mode, "The requested profile 'my_pink_car' does not exist");
     }

File: core/src/main/java/com/graphhopper/reader/osm/SegmentNode.java
Patch:
@@ -22,10 +22,10 @@
 
 class SegmentNode {
     long osmNodeId;
-    int id;
+    long id;
     Map<String, Object> tags;
 
-    public SegmentNode(long osmNodeId, int id, Map<String, Object> tags) {
+    public SegmentNode(long osmNodeId, long id, Map<String, Object> tags) {
         this.osmNodeId = osmNodeId;
         this.id = id;
         this.tags = tags;

File: core/src/main/java/com/graphhopper/reader/osm/OSMNodeData.java
Patch:
@@ -269,10 +269,9 @@ public Map<String, Object> getTags(long osmNodeId) {
     public void release() {
         idsByOsmNodeIds.clear();
         pillarNodes.clear();
-        nodeKVStorage.clear();
         nodeTagIndicesByOsmNodeIds.clear();
-        nodesToBeSplit.clear();
         nodeKVStorage.clear();
+        nodesToBeSplit.clear();
     }
 
     public int towerNodeToId(int towerId) {

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -139,7 +139,7 @@ public Response doGet(
 
         if (ghResponse.hasErrors()) {
             MultiException ex = new MultiException(ghResponse.getErrors());
-            logger.error(logStr, ex);
+            logger.info(logStr, ex);
             throw ex;
         } else {
             logger.info(logStr + ", alternatives: " + ghResponse.getAll().size()

File: core/src/main/java/com/graphhopper/routing/ev/Country.java
Patch:
@@ -269,4 +269,6 @@ public String getAlpha2() {
     public static EnumEncodedValue<Country> create() {
         return new EnumEncodedValue<>(Country.KEY, Country.class);
     }
+
+    // for backward compatibility: no custom toString()
 }

File: core/src/main/java/com/graphhopper/routing/ev/Crossing.java
Patch:
@@ -15,7 +15,7 @@ public enum Crossing {
 
     @Override
     public String toString() {
-        return Helper.toLowerCase(name());
+        return Helper.toLowerCase(super.toString());
     }
 
     public static Crossing find(String name) {

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -917,7 +917,7 @@ protected File _getOSMFile() {
         assertFalse(response.hasErrors(), response.getErrors().toString());
         List<PathDetail> list = response.getBest().getPathDetails().get(RoadClass.KEY);
         assertEquals(3, list.size());
-        assertEquals(RoadClass.MOTORWAY.toString(), list.get(0).getValue());
+        assertEquals("motorway", list.get(0).getValue());
 
         response = gh.route(new GHRequest(51.2492152, 9.4317166, 52.133, 9.1)
                 .setProfile("profile")

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceTest.java
Patch:
@@ -267,13 +267,13 @@ public void testPathDetailsRoadClass() {
         GHResponse rsp = client.route(request);
         assertFalse(rsp.hasErrors(), rsp.getErrors().toString());
         assertEquals(4, rsp.getBest().getPathDetails().get(RoadClass.KEY).size());
-        assertEquals(RoadClass.PRIMARY.toString(), rsp.getBest().getPathDetails().get(RoadClass.KEY).get(3).getValue());
+        assertEquals("primary", rsp.getBest().getPathDetails().get(RoadClass.KEY).get(3).getValue());
         assertFalse((Boolean) rsp.getBest().getPathDetails().get(RoadClassLink.KEY).get(0).getValue());
 
         List<PathDetail> roadEnvList = rsp.getBest().getPathDetails().get(RoadEnvironment.KEY);
         assertEquals(10, roadEnvList.size());
-        assertEquals(RoadEnvironment.ROAD.toString(), roadEnvList.get(0).getValue());
-        assertEquals(RoadEnvironment.TUNNEL.toString(), roadEnvList.get(6).getValue());
+        assertEquals("road", roadEnvList.get(0).getValue());
+        assertEquals("tunnel", roadEnvList.get(6).getValue());
     }
 
     @Test

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -44,6 +44,7 @@
 import java.nio.file.Path;
 import java.nio.file.Paths;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 public class GraphHopperManaged implements Managed {
@@ -96,6 +97,8 @@ public static List<Profile> resolveCustomModelFiles(String customModelFolder, Li
             Object cm = profile.getHints().getObject("custom_model", null);
             CustomModel customModel;
             if (cm != null) {
+                if (!profile.getHints().getObject("custom_model_files", Collections.emptyList()).isEmpty())
+                    throw new IllegalArgumentException("Do not use custom_model_files and custom_model together");
                 try {
                     // custom_model can be an object tree (read from config) or an object (e.g. from tests)
                     customModel = jsonOM.readValue(jsonOM.writeValueAsBytes(cm), CustomModel.class);

File: core/src/main/java/com/graphhopper/routing/util/DefaultVehicleTagParserFactory.java
Patch:
@@ -37,8 +37,6 @@ public VehicleTagParsers createParsers(EncodedValueLookup lookup, String name, P
             return VehicleTagParsers.mtb(lookup, configuration);
         if (name.equals(FOOT))
             return VehicleTagParsers.foot(lookup, configuration);
-        if (name.equals(MOTORCYCLE))
-            return VehicleTagParsers.motorcycle(lookup, configuration);
         if (name.equals(WHEELCHAIR))
             return VehicleTagParsers.wheelchair(lookup, configuration);
 

File: core/src/main/java/com/graphhopper/routing/util/VehicleEncodedValuesFactory.java
Patch:
@@ -29,8 +29,6 @@ public interface VehicleEncodedValuesFactory {
     String RACINGBIKE = "racingbike";
     String MOUNTAINBIKE = "mtb";
     String FOOT = "foot";
-    String HIKE = "hike";
-    String MOTORCYCLE = "motorcycle";
     String WHEELCHAIR = "wheelchair";
 
     VehicleEncodedValues createVehicleEncodedValues(String name, PMap configuration);

File: core/src/main/java/com/graphhopper/routing/util/parsers/CarAccessParser.java
Patch:
@@ -96,7 +96,7 @@ public WayAccess getAccess(ReaderWay way) {
         if (way.hasTag("impassable", "yes") || way.hasTag("status", "impassable"))
             return WayAccess.CAN_SKIP;
 
-        // multiple restrictions needs special handling, see also motorcycle
+        // multiple restrictions needs special handling
         boolean permittedWayConditionallyRestricted = getConditionalTagInspector().isPermittedWayConditionallyRestricted(way);
         boolean restrictedWayConditionallyPermitted = getConditionalTagInspector().isRestrictedWayConditionallyPermitted(way);
         if (!firstValue.isEmpty()) {

File: core/src/main/java/com/graphhopper/routing/util/DefaultVehicleEncodedValuesFactory.java
Patch:
@@ -40,7 +40,7 @@ public VehicleEncodedValues createVehicleEncodedValues(String name, PMap configu
             return VehicleEncodedValues.bike(configuration);
 
         if (name.equals("bike2"))
-            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike.json and #1234");
+            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike.json and #2668");
 
         if (name.equals(RACINGBIKE))
             return VehicleEncodedValues.racingbike(configuration);

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeAccessParser.java
Patch:
@@ -11,8 +11,7 @@ public class BikeAccessParser extends BikeCommonAccessParser {
     public BikeAccessParser(EncodedValueLookup lookup, PMap properties) {
         this(lookup.getBooleanEncodedValue(VehicleAccess.key(properties.getString("name", "bike"))),
                 lookup.getBooleanEncodedValue(Roundabout.KEY));
-        blockPrivate(properties.getBool("block_private", true));
-        blockFords(properties.getBool("block_fords", false));
+        check(properties);
     }
 
     public BikeAccessParser(BooleanEncodedValue accessEnc, BooleanEncodedValue roundaboutEnc) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/MountainBikeAccessParser.java
Patch:
@@ -11,8 +11,7 @@ public class MountainBikeAccessParser extends BikeCommonAccessParser {
     public MountainBikeAccessParser(EncodedValueLookup lookup, PMap properties) {
         this(lookup.getBooleanEncodedValue(VehicleAccess.key(properties.getString("name", "mtb"))),
                 lookup.getBooleanEncodedValue(Roundabout.KEY));
-        blockPrivate(properties.getBool("block_private", true));
-        blockFords(properties.getBool("block_fords", false));
+        check(properties);
     }
 
     protected MountainBikeAccessParser(BooleanEncodedValue accessEnc, BooleanEncodedValue roundaboutEnc) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/RacingBikeAccessParser.java
Patch:
@@ -11,8 +11,7 @@ public class RacingBikeAccessParser extends BikeCommonAccessParser {
     public RacingBikeAccessParser(EncodedValueLookup lookup, PMap properties) {
         this(lookup.getBooleanEncodedValue(VehicleAccess.key(properties.getString("name", "racingbike"))),
                 lookup.getBooleanEncodedValue(Roundabout.KEY));
-        blockPrivate(properties.getBool("block_private", true));
-        blockFords(properties.getBool("block_fords", false));
+        check(properties);
     }
 
     protected RacingBikeAccessParser(BooleanEncodedValue accessEnc, BooleanEncodedValue roundaboutEnc) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/WheelchairAccessParser.java
Patch:
@@ -18,8 +18,7 @@ public class WheelchairAccessParser extends FootAccessParser {
 
     public WheelchairAccessParser(EncodedValueLookup lookup, PMap properties) {
         this(lookup.getBooleanEncodedValue(properties.getString("name", VehicleAccess.key("wheelchair"))));
-        blockPrivate(properties.getBool("block_private", true));
-        blockFords(properties.getBool("block_fords", false));
+        check(properties);
     }
 
     protected WheelchairAccessParser(BooleanEncodedValue accessEnc) {

File: core/src/test/java/com/graphhopper/routing/util/parsers/BikeTagParserTest.java
Patch:
@@ -46,8 +46,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected VehicleTagParsers createBikeTagParsers(EncodedValueLookup lookup, PMap pMap) {
-        return VehicleTagParsers.bike(lookup, pMap);
+    protected VehicleTagParsers createBikeTagParsers(EncodedValueLookup lookup) {
+        return VehicleTagParsers.bike(lookup, new PMap());
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/parsers/MountainBikeTagParserTest.java
Patch:
@@ -40,8 +40,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected VehicleTagParsers createBikeTagParsers(EncodedValueLookup lookup, PMap pMap) {
-        return VehicleTagParsers.mtb(lookup, pMap);
+    protected VehicleTagParsers createBikeTagParsers(EncodedValueLookup lookup) {
+        return VehicleTagParsers.mtb(lookup, new PMap());
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/parsers/RacingBikeTagParserTest.java
Patch:
@@ -46,8 +46,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected VehicleTagParsers createBikeTagParsers(EncodedValueLookup lookup, PMap pMap) {
-        return VehicleTagParsers.racingbike(lookup, pMap);
+    protected VehicleTagParsers createBikeTagParsers(EncodedValueLookup lookup) {
+        return VehicleTagParsers.racingbike(lookup, new PMap());
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -39,6 +39,8 @@ public EncodedValue create(String name, PMap properties) {
             return MaxSpeed.create();
         } else if (MaxWeight.KEY.equals(name)) {
             return MaxWeight.create();
+        } else if (MaxWeightExcept.KEY.equals(name)) {
+            return MaxWeightExcept.create();
         } else if (MaxHeight.KEY.equals(name)) {
             return MaxHeight.create();
         } else if (MaxWidth.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultTagParserFactory.java
Patch:
@@ -39,6 +39,8 @@ else if (name.equals(MaxSpeed.KEY))
             return new OSMMaxSpeedParser(lookup.getDecimalEncodedValue(MaxSpeed.KEY));
         else if (name.equals(MaxWeight.KEY))
             return new OSMMaxWeightParser(lookup.getDecimalEncodedValue(MaxWeight.KEY));
+        else if (name.equals(MaxWeightExcept.KEY))
+            return new MaxWeightExceptParser(lookup.getEnumEncodedValue(MaxWeightExcept.KEY, MaxWeightExcept.class));
         else if (name.equals(MaxHeight.KEY))
             return new OSMMaxHeightParser(lookup.getDecimalEncodedValue(MaxHeight.KEY));
         else if (name.equals(MaxWidth.KEY))

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfile.java
Patch:
@@ -20,6 +20,8 @@
 import com.graphhopper.config.Profile;
 import com.graphhopper.util.CustomModel;
 
+import java.util.Collections;
+
 public class CustomProfile extends Profile {
 
     public CustomProfile(Profile profile) {
@@ -37,7 +39,7 @@ public CustomProfile(String name) {
     public CustomProfile setCustomModel(CustomModel customModel) {
         customModel.internal();
         getHints().putObject(CustomModel.KEY, customModel);
-        getHints().putObject("custom_model_file", "empty");
+        getHints().putObject("custom_model_files", Collections.emptyList());
         return this;
     }
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -367,7 +367,7 @@ public void testMonacoBike3D() {
         // atm the custom model is intended to be used with 'roads' vehicle when allowing reverse direction for oneways
         // but tests here still assert that reverse oneways are excluded
         GraphHopper hopper = createHopper(MONACO,
-                new CustomProfile("bike").setCustomModel(getCustomModel("bike.json").
+                new CustomProfile("bike").setCustomModel(CustomModel.merge(getCustomModel("bike.json"), getCustomModel("bike_elevation.json")).
                         addToPriority(If("!bike_access", MULTIPLY, "0"))).setVehicle("roads"));
         hopper.setVehiclesString("roads,bike");
         hopper.setElevationProvider(new SRTMProvider(DIR));

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelTest.java
Patch:
@@ -79,11 +79,11 @@ private static GraphHopperServerConfiguration createConfig() {
                         new CustomProfile("car_with_area").setCustomModel(new CustomModel().addToPriority(If("in_external_area52", MULTIPLY, "0.05"))),
                         new CustomProfile("bike").setCustomModel(new CustomModel().setDistanceInfluence(0d)).setVehicle("bike"),
                         new Profile("bike_fastest").setWeighting("fastest").setVehicle("bike"),
-                        new CustomProfile("bus").setVehicle("roads").putHint("custom_model_file", "bus.json"),
+                        new CustomProfile("bus").setVehicle("roads").putHint("custom_model_files", Arrays.asList("bus.json")),
                         new CustomProfile("cargo_bike").setVehicle("bike").
-                                putHint("custom_model_file", "cargo_bike.json"),
+                                putHint("custom_model_files", Arrays.asList("cargo_bike.json")),
                         new CustomProfile("json_bike").setVehicle("roads").
-                                putHint("custom_model_file", "bike.json"),
+                                putHint("custom_model_files", Arrays.asList("bike.json", "bike_elevation.json")),
                         new Profile("foot_profile").setVehicle("foot").setWeighting("fastest"),
                         new CustomProfile("car_no_unclassified").setCustomModel(
                                         new CustomModel(new CustomModel().

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceTruckTest.java
Patch:
@@ -37,7 +37,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,hgv").
                 putObject("import.osm.ignored_highways", "").
                 putObject("custom_models.directory", "./src/test/resources/com/graphhopper/application/resources").
-                setProfiles(Arrays.asList(new CustomProfile("truck").setVehicle("roads").putHint("custom_model_file", "truck.json"))).
+                setProfiles(Arrays.asList(new CustomProfile("truck").setVehicle("roads").putHint("custom_model_files", Arrays.asList("truck.json")))).
                 setCHProfiles(Arrays.asList(new CHProfile("truck")));
         return config;
     }
@@ -65,8 +65,8 @@ public void testDisableCHAndUseCustomModel() {
         // ... but when we disable CH it works
         body = "{\"points\": [[11.58199, 50.0141], [11.5865, 50.0095]], \"profile\": \"truck\", \"custom_model\": {}, \"ch.disable\": true}";
         JsonNode path = query(body, 200).readEntity(JsonNode.class).get("paths").get(0);
-        assertEquals(path.get("distance").asDouble(), 1008, 10);
-        assertEquals(path.get("time").asLong(), 49_000, 1_000);
+        assertEquals(1008, path.get("distance").asDouble(), 10);
+        assertEquals(49_000, path.get("time").asLong(), 1_000);
     }
 
     private void assertMessageStartsWith(JsonNode jsonNode, String message) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonPriorityParser.java
Patch:
@@ -175,9 +175,9 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
                 weightToPrioMap.put(50d, BAD.getValue());
         }
 
-        String cycleway = way.getFirstPriorityTag(Arrays.asList("cycleway", "cycleway:left", "cycleway:right"));
-        if (Arrays.asList("lane", "shared_lane", "share_busway", "shoulder").contains(cycleway)) {
-            weightToPrioMap.put(100d, UNCHANGED.getValue());
+        String cycleway = way.getFirstPriorityTag(Arrays.asList("cycleway", "cycleway:left", "cycleway:right", "cycleway:both"));
+        if (Arrays.asList("lane", "shared_lane", "share_busway", "shoulder").contains(cycleway) || "opposite_track".equals(cycleway)) {
+            weightToPrioMap.put(100d, SLIGHT_PREFER.getValue());
         } else if ("track".equals(cycleway)) {
             weightToPrioMap.put(100d, PREFER.getValue());
         }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -669,8 +669,6 @@ protected OSMParsers buildOSMParsers(Map<String, String> vehiclesByName, List<St
                 if (tagParser instanceof BikeCommonAccessParser) {
                     if (encodingManager.hasEncodedValue(BikeNetwork.KEY) && added.add(BikeNetwork.KEY))
                         osmParsers.addRelationTagParser(relConfig -> new OSMBikeNetworkTagParser(encodingManager.getEnumEncodedValue(BikeNetwork.KEY, RouteNetwork.class), relConfig));
-                    if (encodingManager.hasEncodedValue(GetOffBike.KEY) && added.add(GetOffBike.KEY))
-                        osmParsers.addWayTagParser(new OSMGetOffBikeParser(encodingManager.getBooleanEncodedValue(GetOffBike.KEY)));
                     if (encodingManager.hasEncodedValue(Smoothness.KEY) && added.add(Smoothness.KEY))
                         osmParsers.addWayTagParser(new OSMSmoothnessParser(encodingManager.getEnumEncodedValue(Smoothness.KEY, Smoothness.class)));
                 } else if (tagParser instanceof FootAccessParser) {
@@ -690,6 +688,9 @@ protected OSMParsers buildOSMParsers(Map<String, String> vehiclesByName, List<St
             vehicleTagParsers.getTagParsers().forEach(tagParser -> {
                 if (tagParser == null) return;
                 osmParsers.addWayTagParser(tagParser);
+
+                if (tagParser instanceof BikeCommonAccessParser && encodingManager.hasEncodedValue(GetOffBike.KEY) && added.add(GetOffBike.KEY))
+                    osmParsers.addWayTagParser(new OSMGetOffBikeParser(encodingManager.getBooleanEncodedValue(GetOffBike.KEY), ((BikeCommonAccessParser) tagParser).getAccessEnc()));
             });
         });
         return osmParsers;

File: core/src/main/java/com/graphhopper/routing/ev/GetOffBike.java
Patch:
@@ -4,6 +4,6 @@ public class GetOffBike {
     public static final String KEY = "get_off_bike";
 
     public static BooleanEncodedValue create() {
-        return new SimpleBooleanEncodedValue(KEY, false);
+        return new SimpleBooleanEncodedValue(KEY, true);
     }
 }

File: core/src/test/java/com/graphhopper/routing/ev/EncodedValueSerializerTest.java
Patch:
@@ -87,8 +87,8 @@ void explicitString() {
                 "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":3,\"bwd_shift\":-1,\"fwd_mask\":1016,\"bwd_mask\":0," +
                 "\"factor\":0.1,\"use_maximum_as_infinity\":true}", serialized.get(1));
         assertEquals("{\"className\":\"com.graphhopper.routing.ev.SimpleBooleanEncodedValue\",\"name\":\"get_off_bike\",\"bits\":1," +
-                "\"min_storable_value\":0,\"max_storable_value\":1,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false,\"fwd_data_index\":0," +
-                "\"bwd_data_index\":0,\"fwd_shift\":10,\"bwd_shift\":-1,\"fwd_mask\":1024,\"bwd_mask\":0}", serialized.get(2));
+                "\"min_storable_value\":0,\"max_storable_value\":1,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":true,\"fwd_data_index\":0," +
+                "\"bwd_data_index\":0,\"fwd_shift\":10,\"bwd_shift\":11,\"fwd_mask\":1024,\"bwd_mask\":2048}", serialized.get(2));
 
         EncodedValue ev0 = EncodedValueSerializer.deserializeEncodedValue(serialized.get(0));
         assertEquals("lanes", ev0.getName());

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -796,7 +796,7 @@ private String getVersionsString() {
                 ",edges:" + Constants.VERSION_EDGE +
                 ",geometry:" + Constants.VERSION_GEOMETRY +
                 ",location_index:" + Constants.VERSION_LOCATION_IDX +
-                ",string_index:" + Constants.VERSION_EDGEKV_STORAGE +
+                ",string_index:" + Constants.VERSION_KV_STORAGE +
                 ",nodesCH:" + Constants.VERSION_NODE_CH +
                 ",shortcuts:" + Constants.VERSION_SHORTCUT;
     }
@@ -1176,7 +1176,7 @@ protected void postProcessing(boolean closeEarly) {
         if (closeEarly) {
             boolean includesCustomProfiles = profilesByName.values().stream().anyMatch(p -> p instanceof CustomProfile);
             if (!includesCustomProfiles)
-                // when there are custom profiles we must not close way geometry or EdgeKVStorage, because
+                // when there are custom profiles we must not close way geometry or KVStorage, because
                 // they might be needed to evaluate the custom weightings for the following preparations
                 baseGraph.flushAndCloseGeometryAndNameStorage();
         }

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -24,7 +24,7 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.*;
+import static com.graphhopper.search.KVStorage.KeyValue.*;
 
 /**
  * This class calculates instructions from the edges in a Path.

File: core/src/main/java/com/graphhopper/routing/querygraph/QueryOverlayBuilder.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.carrotsearch.hppc.predicates.IntObjectPredicate;
 import com.graphhopper.coll.GHIntObjectHashMap;
-import com.graphhopper.search.EdgeKVStorage;
+import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.storage.index.Snap;
@@ -233,7 +233,7 @@ private void createEdges(int origEdgeKey, int origRevEdgeKey,
 
         boolean reverse = closestEdge.get(EdgeIteratorState.REVERSE_STATE);
         // edges between base and snapped point
-        List<EdgeKVStorage.KeyValue> keyValues = closestEdge.getKeyValues();
+        List<KVStorage.KeyValue> keyValues = closestEdge.getKeyValues();
         VirtualEdgeIteratorState baseEdge = new VirtualEdgeIteratorState(origEdgeKey, GHUtility.createEdgeKey(virtEdgeId, prevNodeId == nodeId, false),
                 prevNodeId, nodeId, baseDistance, closestEdge.getFlags(), keyValues, basePoints, reverse);
         VirtualEdgeIteratorState baseReverseEdge = new VirtualEdgeIteratorState(origRevEdgeKey, GHUtility.createEdgeKey(virtEdgeId, prevNodeId == nodeId, true),

File: core/src/main/java/com/graphhopper/routing/querygraph/VirtualEdgeIterator.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.search.EdgeKVStorage;
+import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
@@ -262,12 +262,12 @@ public String getName() {
     }
 
     @Override
-    public List<EdgeKVStorage.KeyValue> getKeyValues() {
+    public List<KVStorage.KeyValue> getKeyValues() {
         return getCurrentEdge().getKeyValues();
     }
 
     @Override
-    public EdgeIteratorState setKeyValues(List<EdgeKVStorage.KeyValue> list) {
+    public EdgeIteratorState setKeyValues(List<KVStorage.KeyValue> list) {
         return getCurrentEdge().setKeyValues(list);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultTagParserFactory.java
Patch:
@@ -77,6 +77,8 @@ else if (name.equals(Footway.KEY))
             return new OSMFootwayParser(lookup.getEnumEncodedValue(Footway.KEY, Footway.class));
         else if (name.equals(Country.KEY))
             return new CountryParser(lookup.getEnumEncodedValue(Country.KEY, Country.class));
+        else if (name.equals(Crossing.KEY))
+            return new OSMCrossingParser(lookup.getEnumEncodedValue(Crossing.KEY, Crossing.class));
         return null;
     }
 }

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -74,7 +74,7 @@ public class Constants {
     public static final int VERSION_NODE_CH = 0;
     public static final int VERSION_GEOMETRY = 6;
     public static final int VERSION_LOCATION_IDX = 5;
-    public static final int VERSION_EDGEKV_STORAGE = 2;
+    public static final int VERSION_KV_STORAGE = 2;
     /**
      * The version without the snapshot string
      */
@@ -147,7 +147,7 @@ public class Constants {
 
     public static String getVersions() {
         return VERSION_NODE + "," + VERSION_EDGE + "," + VERSION_GEOMETRY + "," + VERSION_LOCATION_IDX
-                + "," + VERSION_EDGEKV_STORAGE + "," + VERSION_SHORTCUT;
+                + "," + VERSION_KV_STORAGE + "," + VERSION_SHORTCUT;
     }
 
     public static String getMajorVersion() {

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.util;
 
 import com.graphhopper.routing.ev.*;
-import com.graphhopper.search.EdgeKVStorage;
+import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.IntsRef;
 
@@ -208,14 +208,14 @@ public boolean isStoreTwoDirections() {
      * But it might be slow and more inefficient on retrieval. Call this setKeyValues method only once per
      * EdgeIteratorState as it allocates new space everytime this method is called.
      */
-    EdgeIteratorState setKeyValues(List<EdgeKVStorage.KeyValue> map);
+    EdgeIteratorState setKeyValues(List<KVStorage.KeyValue> map);
 
     /**
      * This method returns KeyValue pairs for both directions in contrast to {@link #getValue(String)}.
      *
      * @see #setKeyValues(List)
      */
-    List<EdgeKVStorage.KeyValue> getKeyValues();
+    List<KVStorage.KeyValue> getKeyValues();
 
     /**
      * This method returns the *first* value for the specified key and only if stored for the direction of this

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -949,7 +949,7 @@ public void testCountries() throws IOException {
         ReaderWay way = new ReaderWay(0L);
         PointList list = new PointList();
         list.add(49.214906, -2.156067);
-        reader.setArtificialWayTags(list, way, 10, new HashMap<>());
+        reader.setArtificialWayTags(list, way, 10, Collections.singletonList(new HashMap<>()));
         assertEquals("JEY", way.getTag("country", null).toString());
     }
 

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.ShortestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.search.EdgeKVStorage;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
@@ -35,8 +34,8 @@
 
 import java.util.*;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.createKV;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.createKV;
 import static com.graphhopper.storage.AbstractGraphStorageTester.assertPList;
 import static com.graphhopper.util.Parameters.Details.*;
 import static org.junit.jupiter.api.Assertions.*;

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -32,8 +32,8 @@
 
 import java.io.File;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.createKV;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.createKV;
 import static org.junit.jupiter.api.Assertions.*;
 
 /**
@@ -652,7 +652,7 @@ public void testGetAllEdges() {
     }
 
     @Test
-    public void testEdgeKVStorage() {
+    public void testKVStorage() {
         graph = createGHStorage();
         EdgeIteratorState iter1 = graph.edge(0, 1).setDistance(10).set(carAccessEnc, true, true);
         iter1.setKeyValues(createKV(STREET_NAME, "named street1"));

File: core/src/test/java/com/graphhopper/storage/BaseGraphTest.java
Patch:
@@ -19,15 +19,15 @@
 
 import com.graphhopper.routing.ev.EnumEncodedValue;
 import com.graphhopper.routing.ev.RoadClass;
-import com.graphhopper.search.EdgeKVStorage.KeyValue;
+import com.graphhopper.search.KVStorage.KeyValue;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.BBox;
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
 import static com.graphhopper.util.EdgeIteratorState.REVERSE_STATE;
 import static com.graphhopper.util.FetchMode.*;
 import static org.junit.jupiter.api.Assertions.*;

File: core/src/test/java/com/graphhopper/storage/BaseGraphWithTurnCostsTest.java
Patch:
@@ -20,14 +20,14 @@
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.TurnCost;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.search.EdgeKVStorage.KeyValue;
+import com.graphhopper.search.KVStorage.KeyValue;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
 import org.junit.jupiter.api.Test;
 
 import java.util.Random;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -42,8 +42,8 @@
 import java.util.List;
 import java.util.Locale;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.createKV;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.createKV;
 import static org.junit.jupiter.api.Assertions.*;
 
 /**

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -37,8 +37,8 @@
 
 import java.util.*;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.createKV;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.createKV;
 import static com.graphhopper.util.Parameters.Details.AVERAGE_SPEED;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;

File: example/src/main/java/com/graphhopper/example/LocationIndexExample.java
Patch:
@@ -3,7 +3,7 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.config.Profile;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.search.EdgeKVStorage;
+import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.LocationIndexTree;
@@ -35,7 +35,7 @@ public static void graphhopperLocationIndex(String relDir) {
     public static void lowLevelLocationIndex() {
         // If you don't use the GraphHopper class you have to use the low level API:
         BaseGraph graph = new BaseGraph.Builder(1).create();
-        graph.edge(0, 1).setKeyValues(EdgeKVStorage.KeyValue.createKV("name", "test edge"));
+        graph.edge(0, 1).setKeyValues(KVStorage.KeyValue.createKV("name", "test edge"));
         graph.getNodeAccess().setNode(0, 12, 42);
         graph.getNodeAccess().setNode(1, 12.01, 42.01);
 

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/analysis/PtGraphAsAdjacencyList.java
Patch:
@@ -5,7 +5,7 @@
 import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.search.EdgeKVStorage;
+import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.BBox;
@@ -304,12 +304,12 @@ public String getName() {
             }
 
             @Override
-            public EdgeIteratorState setKeyValues(List<EdgeKVStorage.KeyValue> list) {
+            public EdgeIteratorState setKeyValues(List<KVStorage.KeyValue> list) {
                 throw new RuntimeException();
             }
 
             @Override
-            public List<EdgeKVStorage.KeyValue> getKeyValues() {
+            public List<KVStorage.KeyValue> getKeyValues() {
                 throw new RuntimeException();
             }
 

File: web-api/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -192,7 +192,7 @@ public static final class Details {
 
         public static final String PATH_DETAILS = "details";
 
-        // these details are directly accessing the EdgeKVStorage and the names have to be identical
+        // these details are directly accessing the KVStorage for edges and the names have to be identical
         public static final String STREET_NAME = "street_name";
         public static final String STREET_REF = "street_ref";
         public static final String STREET_DESTINATION = "street_destination";

File: web-bundle/src/test/java/com/graphhopper/gpx/GpxConversionsTest.java
Patch:
@@ -46,8 +46,8 @@
 import java.util.List;
 import java.util.Locale;
 
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
-import static com.graphhopper.search.EdgeKVStorage.KeyValue.createKV;
+import static com.graphhopper.search.KVStorage.KeyValue.STREET_NAME;
+import static com.graphhopper.search.KVStorage.KeyValue.createKV;
 import static org.junit.jupiter.api.Assertions.*;
 
 public class GpxConversionsTest {

File: web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.graphhopper.matching.State;
 import com.graphhopper.resources.MapMatchingResource;
 import com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;
-import com.graphhopper.search.EdgeKVStorage;
+import com.graphhopper.search.KVStorage;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.EdgeIteratorState;
@@ -35,7 +35,6 @@
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -89,7 +88,7 @@ private EdgeIteratorState getEdgeIterator() {
         pointList.add(-3.4445, -38.9990);
         pointList.add(-3.5550, -38.7990);
         return new VirtualEdgeIteratorState(0, 0, 0, 1, 10, new IntsRef(1),
-                EdgeKVStorage.KeyValue.createKV(EdgeKVStorage.KeyValue.STREET_NAME, "test of iterator"), pointList, false);
+                KVStorage.KeyValue.createKV(KVStorage.KeyValue.STREET_NAME, "test of iterator"), pointList, false);
     }
 
 }

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -302,8 +302,8 @@ public Snap findClosest(final double queryLat, final double queryLon, final Edge
         }
 
         if (closestMatch.isValid()) {
-            closestMatch.setQueryDistance(DIST_PLANE.calcDenormalizedDist(closestMatch.getQueryDistance()));
             closestMatch.calcSnappedPoint(DIST_PLANE);
+            closestMatch.setQueryDistance(DIST_PLANE.calcDist(closestMatch.getSnappedPoint().lat, closestMatch.getSnappedPoint().lon, queryLat, queryLon));
         }
         return closestMatch;
     }

File: core/src/main/java/com/graphhopper/routing/util/DefaultVehicleEncodedValuesFactory.java
Patch:
@@ -40,7 +40,7 @@ public VehicleEncodedValues createVehicleEncodedValues(String name, PMap configu
             return VehicleEncodedValues.bike(configuration);
 
         if (name.equals("bike2"))
-            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike2.json and #1234");
+            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike.json and #1234");
 
         if (name.equals(RACINGBIKE))
             return VehicleEncodedValues.racingbike(configuration);

File: core/src/main/java/com/graphhopper/routing/util/parsers/WheelchairAverageSpeedParser.java
Patch:
@@ -67,7 +67,7 @@ public void applyWayTags(ReaderWay way, IntsRef edgeFlags) {
         if (Double.isInfinite(fullDist2D))
             throw new IllegalStateException("Infinite distance should not happen due to #435. way ID=" + way.getId());
 
-        // skip elevation data adjustment for too short segments, TODO improve the elevation data handling and/or use the same mechanism as we used to do in bike2
+        // skip elevation data adjustment for too short segments, TODO use custom model for elevation handling
         if (fullDist2D < 20 || !pl.is3D())
             return;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonAccessParser.java
Patch:
@@ -106,7 +106,6 @@ public WayAccess getAccess(ReaderWay way) {
         if (way.hasTag("motorroad", "yes"))
             return WayAccess.CAN_SKIP;
 
-        // do not drive street cars into fords
         if (isBlockFords() && ("ford".equals(highwayValue) || way.hasTag("ford")))
             return WayAccess.CAN_SKIP;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/CarAccessParser.java
Patch:
@@ -126,7 +126,6 @@ public WayAccess getAccess(ReaderWay way) {
             }
         }
 
-        // do not drive street cars into fords
         if (isBlockFords() && ("ford".equals(highwayValue) || way.hasTag("ford")))
             return WayAccess.CAN_SKIP;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/FootAccessParser.java
Patch:
@@ -158,7 +158,6 @@ public WayAccess getAccess(ReaderWay way) {
         if (way.hasTag("motorroad", "yes"))
             return WayAccess.CAN_SKIP;
 
-        // do not get our feet wet, "yes" is already included above
         if (isBlockFords() && ("ford".equals(highwayValue) || way.hasTag("ford")))
             return WayAccess.CAN_SKIP;
 

File: core/src/test/java/com/graphhopper/routing/util/parsers/AbstractBikeTagParserTester.java
Patch:
@@ -218,6 +218,9 @@ public void testAccess() {
         way.setTag("bicycle:conditional", "no @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertTrue(accessParser.getAccess(way).canSkip());
 
+        way.setTag("bicycle", "yes"); // the conditional tag even overrules "yes"
+        assertTrue(accessParser.getAccess(way).canSkip());
+
         way.clearTags();
         way.setTag("highway", "road");
         way.setTag("access", "no");

File: core/src/test/java/com/graphhopper/routing/util/parsers/FootTagParserTest.java
Patch:
@@ -228,6 +228,9 @@ public void testAccess() {
         way.setTag("access:conditional", "no @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertTrue(accessParser.getAccess(way).canSkip());
 
+        way.setTag("foot", "yes"); // the conditional tag even overrules "yes"
+        assertTrue(accessParser.getAccess(way).canSkip());
+
         way.clearTags();
         way.setTag("highway", "footway");
         way.setTag("access", "no");

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -161,9 +161,8 @@ public ResponsePath doWork(PointList waypoints, List<Path> paths, EncodedValueLo
             for (int i = 0; i < wayPointIntervals.size(); i++) {
                 int start = wayPointIntervals.get(i).start;
                 int end = wayPointIntervals.get(i).end;
-                final double tolerance = 1.e-6; // todo: why does this fail sometimes when we set the tolerance to zero?
-                if (Math.abs(waypoints.getLat(i) - fullPoints.getLat(start)) > tolerance || Math.abs(waypoints.getLon(i) - fullPoints.getLon(start)) > tolerance
-                        || Math.abs(waypoints.getLat(i + 1) - fullPoints.getLat(end)) > tolerance || Math.abs(waypoints.getLon(i + 1) - fullPoints.getLon(end)) > tolerance)
+                if (waypoints.getLat(i) != fullPoints.getLat(start) || waypoints.getLon(i) != fullPoints.getLon(start)
+                        || waypoints.getLat(i + 1) != fullPoints.getLat(end) || waypoints.getLon(i + 1) != fullPoints.getLon(end))
                     throw new IllegalStateException("waypoints are not included in points, or waypoint intervals are wrong");
             }
         }

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -369,7 +369,7 @@ public void testStallOnDemandViaVirtuaNode_issue1574() {
         assertEquals(2, routingCHGraph.getEdges() - g.getEdges(), "there should be exactly two (bidirectional) shortcuts (2-3) and (3-4)");
 
         // insert virtual node and edges
-        Snap snap = new Snap(0.0001, 0.0015);
+        Snap snap = new Snap(0.001, 0.00015); // between 3 and 1
         snap.setClosestEdge(edge31);
         snap.setSnappedPosition(Snap.Position.EDGE);
         snap.setClosestNode(8);

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceLeipzigTest.java
Patch:
@@ -29,6 +29,7 @@
 import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.RepeatedTest;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.extension.ExtendWith;
 
@@ -72,9 +73,9 @@ void testNoErrors() {
         double minLon = 12.335525;
         double maxLon = 12.434745;
         final long seed = System.nanoTime();
-//        final long seed = 1342503266951775l; // todo: with this one the strict waypoint check failed
+
         Random rnd = new Random(seed);
-        for (int i = 0; i < 1000; i++) {
+        for (int i = 0; i < 100; i++) {
             double latFrom = minLat + rnd.nextDouble() * (maxLat - minLat);
             double lonFrom = minLon + rnd.nextDouble() * (maxLon - minLon);
             double latTo = minLat + rnd.nextDouble() * (maxLat - minLat);

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -41,7 +41,6 @@
 public class CustomModelParser {
     private static final AtomicLong longVal = new AtomicLong(1);
     static final String IN_AREA_PREFIX = "in_";
-    private static final Set<String> allowedNamesInCondition = new HashSet<>(Arrays.asList("edge", "Math"));
     private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);
     private static final String SCRIPT_FILE_DIR = System.getProperty(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_DIR, "./src/main/java/com/graphhopper/routing/weighting/custom");
 
@@ -213,7 +212,7 @@ private static List<Java.BlockStatement> createGetPriorityStatements(Set<String>
     }
 
     static boolean isValidVariableName(String name) {
-        return name.startsWith(IN_AREA_PREFIX) || allowedNamesInCondition.contains(name);
+        return name.startsWith(IN_AREA_PREFIX);
     }
 
     /**

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1035,14 +1035,14 @@ public boolean load() {
                     .setSegmentSize(defaultSegmentSize)
                     .build();
             baseGraph.loadExisting();
-            checkProfilesConsistency();
             String storedProfiles = properties.get("profiles");
             String configuredProfiles = getProfilesString();
             if (!storedProfiles.equals(configuredProfiles))
                 throw new IllegalStateException("Profiles do not match:"
                         + "\nGraphhopper config: " + configuredProfiles
                         + "\nGraph: " + storedProfiles
                         + "\nChange configuration to match the graph or delete " + baseGraph.getDirectory().getLocation());
+            checkProfilesConsistency();
 
             postProcessing(false);
             directory.loadMMap();

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -170,7 +170,7 @@ private void addDefaultEncodedValues() {
                     MaxSpeed.KEY,
                     RoadAccess.KEY
             ));
-            if (em.getVehicles().stream().anyMatch(vehicle -> vehicle.contains("bike") || vehicle.contains("mtb"))) {
+            if (em.getVehicles().stream().anyMatch(vehicle -> vehicle.contains("bike") || vehicle.contains("mtb") || vehicle.contains("racingbike"))) {
                 keys.add(BikeNetwork.KEY);
                 keys.add(GetOffBike.KEY);
                 keys.add(Smoothness.KEY);

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -161,8 +161,9 @@ public ResponsePath doWork(PointList waypoints, List<Path> paths, EncodedValueLo
             for (int i = 0; i < wayPointIntervals.size(); i++) {
                 int start = wayPointIntervals.get(i).start;
                 int end = wayPointIntervals.get(i).end;
-                if (waypoints.getLat(i) != fullPoints.getLat(start) || waypoints.getLon(i) != fullPoints.getLon(start)
-                        || waypoints.getLat(i + 1) != fullPoints.getLat(end) || waypoints.getLon(i + 1) != fullPoints.getLon(end))
+                final double tolerance = 1.e-6; // todo: why does this fail sometimes when we set the tolerance to zero?
+                if (Math.abs(waypoints.getLat(i) - fullPoints.getLat(start)) > tolerance || Math.abs(waypoints.getLon(i) - fullPoints.getLon(start)) > tolerance
+                        || Math.abs(waypoints.getLat(i + 1) - fullPoints.getLat(end)) > tolerance || Math.abs(waypoints.getLon(i + 1) - fullPoints.getLon(end)) > tolerance)
                     throw new IllegalStateException("waypoints are not included in points, or waypoint intervals are wrong");
             }
         }

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonAverageSpeedParser.java
Patch:
@@ -79,7 +79,7 @@ protected BikeCommonAverageSpeedParser(DecimalEncodedValue speedEnc, EnumEncoded
         setHighwaySpeed("platform", PUSHING_SECTION_SPEED);
         setHighwaySpeed("pedestrian", PUSHING_SECTION_SPEED);
         setHighwaySpeed("track", 12);
-        setHighwaySpeed("service", 14);
+        setHighwaySpeed("service", 12);
         setHighwaySpeed("residential", 18);
         // no other highway applies:
         setHighwaySpeed("unclassified", 16);

File: core/src/main/java/com/graphhopper/routing/util/parsers/BikeCommonPriorityParser.java
Patch:
@@ -145,7 +145,6 @@ private PriorityCode convertClassValueToPriority(String tagvalue) {
      *                        subclasses to 'insert' more important priorities as well as overwrite determined priorities.
      */
     void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap) {
-        String service = way.getTag("service");
         String highway = way.getTag("highway");
         if (way.hasTag("bicycle", "designated") || way.hasTag("bicycle", "official")) {
             if ("path".equals(highway))
@@ -186,7 +185,7 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
             weightToPrioMap.put(100d, REACH_DESTINATION.getValue());
         }
 
-        if (pushingSectionsHighways.contains(highway) || "parking_aisle".equals(service)) {
+        if (pushingSectionsHighways.contains(highway) || "parking_aisle".equals(way.getTag("service"))) {
             PriorityCode pushingSectionPrio = SLIGHT_AVOID;
             if (way.hasTag("bicycle", "yes") || way.hasTag("bicycle", "permissive"))
                 pushingSectionPrio = PREFER;

File: core/src/main/java/com/graphhopper/routing/util/parsers/RacingBikePriorityParser.java
Patch:
@@ -45,8 +45,8 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
         super.collect(way, wayTypeSpeed, weightToPrioMap);
 
         String highway = way.getTag("highway");
-        if ("service".equals(highway)) {
-            weightToPrioMap.put(40d, UNCHANGED.getValue());
+        if ("service".equals(highway) || "residential".equals(highway)) {
+            weightToPrioMap.put(40d, SLIGHT_AVOID.getValue());
         } else if ("track".equals(highway)) {
             String trackType = way.getTag("tracktype");
             if ("grade1".equals(trackType))

File: core/src/test/java/com/graphhopper/routing/util/parsers/AbstractBikeTagParserTester.java
Patch:
@@ -345,7 +345,7 @@ public void testTram() {
     public void testService() {
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "service");
-        assertPriorityAndSpeed(PREFER.getValue(), 14, way);
+        assertPriorityAndSpeed(PREFER.getValue(), 12, way);
 
         way.setTag("service", "parking_aisle");
         assertPriorityAndSpeed(SLIGHT_AVOID.getValue(), 4, way);

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.json.MinMax;
 import com.graphhopper.json.Statement;
 import com.graphhopper.routing.ev.*;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.TurnCostProvider;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.BBox;
@@ -113,7 +112,7 @@ static CustomWeighting.Parameters createWeightingParameters(CustomModel customMo
         try {
             // The class does not need to be thread-safe as we create an instance per request
             CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();
-            prio.init(lookup, avgSpeedEnc, priorityEnc, customModel.getAreas());
+            prio.init(lookup, avgSpeedEnc, priorityEnc, CustomModel.getAreasAsMap(customModel.getAreas()));
             return new CustomWeighting.Parameters(prio::getSpeed, prio::getPriority, prio.getMaxSpeed(), prio.getMaxPriority(),
                     customModel.getDistanceInfluence() == null ? 0 : customModel.getDistanceInfluence(), customModel.getHeadingPenalty());
         } catch (ReflectiveOperationException ex) {
@@ -164,7 +163,7 @@ private static Class<?> createClazz(CustomModel customModel, EncodedValueLookup
             //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137
             long counter = longVal.incrementAndGet();
             String classTemplate = createClassTemplate(counter, priorityVariables, minMaxPriority.max, speedVariables, minMaxSpeed.max,
-                    lookup, customModel.getAreas());
+                    lookup, CustomModel.getAreasAsMap(customModel.getAreas()));
             Java.CompilationUnit cu = (Java.CompilationUnit) new Parser(new Scanner("source", new StringReader(classTemplate))).
                     parseAbstractCompilationUnit();
             cu = injectStatements(priorityStatements, speedStatements, cu);

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -679,14 +679,15 @@ public static BBox createBBox(EdgeIteratorState edgeState) {
                 towerNodes.getLat(secondIndex), towerNodes.getLon(secondIndex));
     }
 
-    public static JsonFeature createCircle(double centerLat, double centerLon, double radius) {
+    public static JsonFeature createCircle(String id, double centerLat, double centerLon, double radius) {
         final int n = 36;
         final double delta = 360.0 / n;
         Coordinate[] coordinates = IntStream.range(0, n + 1)
                 .mapToObj(i -> DIST_EARTH.projectCoordinate(centerLat, centerLon, radius, (i * delta) % 360))
                 .map(p -> new Coordinate(p.lon, p.lat)).toArray(Coordinate[]::new);
         Polygon polygon = new GeometryFactory().createPolygon(coordinates);
         JsonFeature result = new JsonFeature();
+        result.setId(id);
         result.setGeometry(polygon);
         return result;
     }
@@ -701,6 +702,7 @@ public static JsonFeature createRectangle(double minLat, double minLon, double m
         };
         Polygon polygon = new GeometryFactory().createPolygon(coordinates);
         JsonFeature result = new JsonFeature();
+        result.setId("blocked_area");
         result.setGeometry(polygon);
         return result;
     }

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomWeightingTest.java
Patch:
@@ -237,7 +237,8 @@ public void testArea() throws Exception {
         ObjectMapper om = new ObjectMapper().registerModule(new JtsModule());
         JsonFeature json = om.readValue("{ \"geometry\":{ \"type\": \"Polygon\", \"coordinates\": " +
                 "[[[11.5818,50.0126], [11.5818,50.0119], [11.5861,50.0119], [11.5861,50.0126], [11.5818,50.0126]]] }}", JsonFeature.class);
-        vehicleModel.getAreas().put("custom1", json);
+        json.setId("custom1");
+        vehicleModel.getAreas().getFeatures().add(json);
 
         // edge1 is located within the area custom1, edge2 is not
         assertEquals(1.6, createWeighting(vehicleModel).calcEdgeWeight(edge1, false), 0.01);

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.databind.module.SimpleModule;
-import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.ResponsePath;
 import com.graphhopper.json.Statement;

File: web-api/src/test/java/com/graphhopper/util/HelperTest.java
Patch:
@@ -19,11 +19,12 @@
 
 import org.junit.jupiter.api.Test;
 
+import java.util.Arrays;
 import java.util.Locale;
 
 import static com.graphhopper.util.Helper.UTF_CS;
-import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertFalse;
 
 /**
  * @author Peter Karich

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -46,6 +46,7 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -899,9 +900,9 @@ protected File _getOSMFile() {
 
         response = gh.route(new GHRequest(51.2492152, 9.4317166, 52.133, 9.1)
                 .setProfile("profile")
-                .setPathDetails(Collections.singletonList(Toll.KEY)));
+                .setPathDetails(Arrays.asList(Toll.KEY, Country.KEY)));
         Throwable ex = response.getErrors().get(0);
-        assertTrue(ex.getMessage().contains("You requested the details [toll]"), ex.getMessage());
+        assertEquals("Cannot find the path details: [toll, country]", ex.getMessage());
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -292,7 +292,7 @@ private static String createClassTemplate(long counter,
                     includedAreaImports = true;
                 }
 
-                if (!GHUtility.isValidAreaId(arg))
+                if (!JsonFeature.isValidId(arg))
                     throw new IllegalArgumentException("Area has invalid name: " + arg);
                 String id = arg.substring(IN_AREA_PREFIX.length());
                 JsonFeature feature = areas.get(id);

File: web-api/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.util;
 
+import javax.lang.model.SourceVersion;
 import java.io.*;
 import java.nio.ByteBuffer;
 import java.nio.MappedByteBuffer;
@@ -28,6 +29,8 @@
 import java.util.*;
 import java.util.Map.Entry;
 
+import static java.lang.Character.*;
+
 /**
  * @author Peter Karich
  */

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -128,7 +128,7 @@ public static List<Profile> resolveCustomModelFiles(String customModelFolder, Li
 
             // we can fill in all areas here as in the created template we include only the areas that are used in statements (see CustomModelParser)
             for (JsonFeature feature : globalAreas.getFeatures()) {
-                if (!GHUtility.isValidAreaId("in_" + feature.getId()))
+                if (!JsonFeature.isValidId("in_" + feature.getId()))
                     throw new IllegalArgumentException("The area '" + feature.getId() + "' has an invalid id. Only letters, numbers and underscore are allowed.");
                 if (customModel.getAreas().containsKey(feature.getId()))
                     throw new IllegalArgumentException("The area '" + feature.getId() + "' exists twice");

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -35,7 +35,7 @@ public class TranslationMap {
     private static final List<String> LOCALES = Arrays.asList("ar", "ast", "bg", "bn_BN", "ca",
             "cs_CZ", "da_DK", "de_DE", "el", "eo", "es", "en_US", "fa", "fil", "fi",
             "fr_FR", "fr_CH", "gl", "he", "hr_HR", "hsb", "hu_HU", "in_ID", "it", "ja", "ko", "lt_LT", "ne",
-            "nl", "pl_PL", "pt_BR", "pt_PT", "ro", "ru", "sk", "sl_SI", "sr_RS", "sv_SE", "tr", "uk",
+            "nl", "nb_NO", "pl_PL", "pt_BR", "pt_PT", "ro", "ru", "sk", "sl_SI", "sr_RS", "sv_SE", "tr", "uk",
             "vi_VN", "zh_CN", "zh_HK", "zh_TW");
     private final Map<String, Translation> translations = new HashMap<>();
 

File: core/src/main/java/com/graphhopper/routing/ViaRouting.java
Patch:
@@ -73,7 +73,7 @@ public static List<Snap> lookup(EncodedValueLookup lookup, List<GHPoint> points,
                 snap = locationIndex.findClosest(point.lat, point.lon, new HeadingEdgeFilter(directedSnapFilter, headings.get(placeIndex), point));
             } else if (!pointHints.isEmpty()) {
                 snap = locationIndex.findClosest(point.lat, point.lon, new NameSimilarityEdgeFilter(strictEdgeFilter,
-                        pointHints.get(placeIndex), point, 100));
+                        pointHints.get(placeIndex), point, 170));
             } else if (!snapPreventions.isEmpty()) {
                 snap = locationIndex.findClosest(point.lat, point.lon, strictEdgeFilter);
             }

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -176,7 +176,7 @@ public EncodingManager build() {
             if (em.encodedValueMap.isEmpty())
                 throw new IllegalStateException("No EncodedValues were added to the EncodingManager");
             em.intsForFlags = edgeConfig.getRequiredInts();
-            em.intsForTurnCostFlags = edgeConfig.getRequiredInts();
+            em.intsForTurnCostFlags = turnCostConfig.getRequiredInts();
             EncodingManager result = em;
             em = null;
             return result;

File: core/src/main/java/com/graphhopper/routing/util/FootTagParser.java
Patch:
@@ -247,7 +247,7 @@ void collect(ReaderWay way, TreeMap<Double, Integer> weightToPrioMap) {
         if (way.hasTag("foot", "designated"))
             weightToPrioMap.put(100d, PREFER.getValue());
 
-        double maxSpeed = getMaxSpeed(way);
+        double maxSpeed = Math.max(getMaxSpeed(way, false), getMaxSpeed(way, true));
         if (safeHighwayTags.contains(highway) || (isValidSpeed(maxSpeed) && maxSpeed <= 20)) {
             weightToPrioMap.put(40d, PREFER.getValue());
             if (way.hasTag("tunnel", intendedValues)) {

File: core/src/main/java/com/graphhopper/routing/util/HikeTagParser.java
Patch:
@@ -68,7 +68,7 @@ void collect(ReaderWay way, TreeMap<Double, Integer> weightToPrioMap) {
         if (way.hasTag("foot", "designated"))
             weightToPrioMap.put(100d, PREFER.getValue());
 
-        double maxSpeed = getMaxSpeed(way);
+        double maxSpeed = Math.max(getMaxSpeed(way, false), getMaxSpeed(way, true));
         if (safeHighwayTags.contains(highway) || (isValidSpeed(maxSpeed) && maxSpeed <= 20)) {
             weightToPrioMap.put(40d, PREFER.getValue());
             if (way.hasTag("tunnel", intendedValues)) {

File: core/src/main/java/com/graphhopper/routing/util/VehicleEncodedValues.java
Patch:
@@ -86,10 +86,9 @@ public static VehicleEncodedValues car(PMap properties) {
         String name = properties.getString("name", "car");
         int speedBits = properties.getInt("speed_bits", 5);
         double speedFactor = properties.getDouble("speed_factor", 5);
-        boolean speedTwoDirections = properties.getBool("speed_two_directions", false);
         int maxTurnCosts = properties.getInt("max_turn_costs", properties.getBool("turn_costs", false) ? 1 : 0);
         BooleanEncodedValue accessEnc = VehicleAccess.create(name);
-        DecimalEncodedValue speedEnc = VehicleSpeed.create(name, speedBits, speedFactor, speedTwoDirections);
+        DecimalEncodedValue speedEnc = VehicleSpeed.create(name, speedBits, speedFactor, true);
         DecimalEncodedValue turnCostEnc = maxTurnCosts > 0 ? TurnCost.create(name, maxTurnCosts) : null;
         return new VehicleEncodedValues(name, accessEnc, speedEnc, null, turnCostEnc);
     }

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeTagParserTester.java
Patch:
@@ -350,7 +350,7 @@ public void testSacScale() {
     public void testReduceToMaxSpeed() {
         ReaderWay way = new ReaderWay(12);
         way.setTag("maxspeed", "90");
-        assertEquals(12, parser.applyMaxSpeed(way, 12), 1e-2);
+        assertEquals(12, parser.applyMaxSpeed(way, 12, true), 1e-2);
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/BikeTagParserTest.java
Patch:
@@ -642,13 +642,13 @@ public void testMaxSpeed() {
         way = new ReaderWay(1);
         way.setTag("highway", "secondary");
         way.setTag("maxspeed", "10");
-        assertPriorityAndSpeed(PREFER.getValue(), 10, way);
+        assertPriorityAndSpeed(VERY_NICE.getValue(), 10, way);
 
         way = new ReaderWay(1);
         way.setTag("highway", "residential");
         way.setTag("maxspeed", "15");
         // todo: speed is larger than maxspeed tag due to rounding and storable max speed is 30
-        assertPriorityAndSpeed(PREFER.getValue(), 16, way);
+        assertPriorityAndSpeed(VERY_NICE.getValue(), 16, way);
     }
 
     // Issue 407 : Always block kissing_gate except for mountainbikes
@@ -709,6 +709,6 @@ public void testClassBicycle() {
         assertPriority(VERY_NICE.getValue(), way);
 
         way.setTag("maxspeed", "15");
-        assertPriority(VERY_NICE.getValue(), way);
+        assertPriority(BEST.getValue(), way);
     }
 }

File: core/src/test/java/com/graphhopper/routing/util/TagParsingTest.java
Patch:
@@ -137,7 +137,7 @@ public void testSharedEncodedValues() {
         BooleanEncodedValue mtbAccessEnc = VehicleAccess.create("mtb");
         List<BooleanEncodedValue> accessEncs = Arrays.asList(carAccessEnc, footAccessEnc, bikeAccessEnc, motorcycleAccessEnc, mtbAccessEnc);
         EncodingManager manager = EncodingManager.start()
-                .add(carAccessEnc).add(VehicleSpeed.create("car", 5, 5, false))
+                .add(carAccessEnc).add(VehicleSpeed.create("car", 5, 5, true))
                 .add(footAccessEnc).add(VehicleSpeed.create("foot", 4, 1, true)).add(VehiclePriority.create("foot", 4, PriorityCode.getFactor(1), false))
                 .add(bikeAccessEnc).add(VehicleSpeed.create("bike", 4, 2, false)).add(VehiclePriority.create("bike", 4, PriorityCode.getFactor(1), false))
                 .add(motorcycleAccessEnc).add(VehicleSpeed.create("motorcycle", 5, 5, true)).add(VehiclePriority.create("motorcycle", 4, PriorityCode.getFactor(1), false)).add(new DecimalEncodedValueImpl("motorcycle_curvature", 5, 5, true))

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -89,6 +89,8 @@ public Path calcPath(int from, int to, int fromOutEdge, int toInEdge) {
         double weightToGoal = weightApprox.approximate(from);
         AStarEntry startEntry = new AStarEntry(EdgeIterator.NO_EDGE, from, 0 + weightToGoal, 0);
         fromHeap.add(startEntry);
+        if (fromOutEdge == NO_EDGE || toInEdge == NO_EDGE)
+            return extractPath();
         if (!traversalMode.isEdgeBased())
             fromMap.put(from, currEdge);
         runAlgo();

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelLMTest.java
Patch:
@@ -59,8 +59,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("import.osm.ignored_highways", "").
                 putObject("graph.encoded_values", "surface").
                 setProfiles(Arrays.asList(
-                        // give strange profile names to ensure that we do not mix vehicle and profile:
-                        new CustomProfile("car_custom").setCustomModel(new CustomModel()).setVehicle("car"),
+                        new CustomProfile("car_custom").setCustomModel(new CustomModel().setDistanceInfluence(15d)).setVehicle("car"),
                         new Profile("foot_profile").setVehicle("foot").setWeighting("fastest"),
                         new CustomProfile("foot_custom").setCustomModel(new CustomModel()).setVehicle("foot"))).
                 setLMProfiles(Arrays.asList(new LMProfile("car_custom"), new LMProfile("foot_custom")));

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GtfsStorage.java
Patch:
@@ -301,7 +301,7 @@ private void serialize(String filename, IntObjectHashMap<int[]> data) {
 		try (ObjectOutputStream oos = new ObjectOutputStream(new BufferedOutputStream(Files.newOutputStream(Paths.get(dir.getLocation() + filename))))) {
 			oos.writeInt(data.size());
 			for (IntObjectCursor<int[]> e : data) {
-				oos.write(e.key);
+				oos.writeInt(e.key);
 				oos.writeObject(e.value);
 			}
 		} catch (IOException e) {
@@ -313,8 +313,8 @@ private void serialize(String filename, IntIntHashMap data) {
 		try (ObjectOutputStream oos = new ObjectOutputStream(new BufferedOutputStream(Files.newOutputStream(Paths.get(dir.getLocation() + filename))))) {
 			oos.writeInt(data.size());
 			for (IntIntCursor e : data) {
-				oos.write(e.key);
-				oos.write(e.value);
+				oos.writeInt(e.key);
+				oos.writeInt(e.value);
 			}
 		} catch (IOException e) {
 			throw new RuntimeException(e);

File: core/src/main/java/com/graphhopper/reader/dem/CGIARProvider.java
Patch:
@@ -94,7 +94,7 @@ public static void main(String[] args) {
     }
 
     @Override
-    Raster generateRasterFromFile(File file, String tifName) {
+    Raster readFile(File file, String tifName) {
         SeekableStream ss = null;
         try {
             InputStream is = new FileInputStream(file);

File: core/src/main/java/com/graphhopper/reader/dem/GMTEDProvider.java
Patch:
@@ -139,7 +139,7 @@ public static void main(String[] args) {
     }
 
     @Override
-    Raster generateRasterFromFile(File file, String tifName) {
+    Raster readFile(File file, String tifName) {
         SeekableStream ss = null;
         try {
             InputStream is = new FileInputStream(file);

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java
Patch:
@@ -95,7 +95,7 @@ public void customModel() throws JsonProcessingException {
                 .addToSpeed(Statement.If("road_class == MOTORWAY", Statement.Op.LIMIT, "80"))
                 .addToPriority(Statement.If("surface == DIRT", Statement.Op.MULTIPLY, "0.7"))
                 .addToPriority(Statement.If("surface == SAND", Statement.Op.MULTIPLY, "0.6"))
-                .setDistanceInfluence(69)
+                .setDistanceInfluence(69d)
                 .setHeadingPenalty(22)
                 .setAreas(areas);
         GHRequest req = new GHRequest(new GHPoint(42.509225, 1.534728), new GHPoint(42.512602, 1.551558))

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -115,7 +115,7 @@ static CustomWeighting.Parameters createWeightingParameters(CustomModel customMo
             CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();
             prio.init(lookup, avgSpeedEnc, priorityEnc, customModel.getAreas());
             return new CustomWeighting.Parameters(prio::getSpeed, prio::getPriority, prio.getMaxSpeed(), prio.getMaxPriority(),
-                    customModel.getDistanceInfluence(), customModel.getHeadingPenalty());
+                    customModel.hasDistanceInfluence() ? customModel.getDistanceInfluence() : 0, customModel.getHeadingPenalty());
         } catch (ReflectiveOperationException ex) {
             throw new IllegalArgumentException("Cannot compile expression " + ex.getMessage(), ex);
         }

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -130,7 +130,7 @@ public void testMonacoMotorcycleCurvature() {
         queries.add(new Query(43.733802, 7.413433, 43.739662, 7.424355, 2423, 141));
         queries.add(new Query(43.730949, 7.412338, 43.739643, 7.424542, 2253, 120));
         queries.add(new Query(43.727592, 7.419333, 43.727712, 7.419333, 0, 1));
-        CustomModel model = new CustomModel().addToPriority(Statement.If("true", MULTIPLY, "curvature"));
+        CustomModel model = new CustomModel().setDistanceInfluence(70d).addToPriority(Statement.If("true", MULTIPLY, "curvature"));
 
         GraphHopper hopper = createHopper(MONACO, new CustomProfile("motorcycle").setCustomModel(model).
                 setVehicle("motorcycle").setWeighting("custom"));

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -414,7 +414,7 @@ public void testInstructionIfSlightTurnForCustomProfile() {
 
         Weighting weighting = CustomModelParser.createWeighting(accessEnc, speedEnc,
                 priorityEnc, tmpEM, DefaultTurnCostProvider.NO_TURN_COST_PROVIDER,
-                new CustomModel().setDistanceInfluence(0));
+                new CustomModel().setDistanceInfluence(0d));
         Path p = new Dijkstra(g, weighting, tMode).calcPath(4, 3);
         assertTrue(p.isFound());
         InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, tmpEM, usTR);

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceClientHCTest.java
Patch:
@@ -364,7 +364,7 @@ public void testCustomModel() {
         GHRequest req = new GHRequest().
                 addPoint(new GHPoint(42.5179, 1.555574)).
                 addPoint(new GHPoint(42.532022, 1.519504)).
-                setCustomModel(new CustomModel()
+                setCustomModel(new CustomModel().setDistanceInfluence(70d)
                         // we reduce the speed in the long tunnel
                         .addToSpeed(Statement.If("road_environment == TUNNEL", Statement.Op.MULTIPLY, "0.1"))).
                 setProfile("my_custom_car").

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceCustomModelTest.java
Patch:
@@ -68,8 +68,8 @@ private static GraphHopperServerConfiguration createConfig() {
                 setProfiles(Arrays.asList(
                         new Profile("wheelchair"),
                         new CustomProfile("roads").setCustomModel(new CustomModel()).setVehicle("roads"),
-                        new CustomProfile("car").setCustomModel(new CustomModel()).setVehicle("car"),
-                        new CustomProfile("bike").setCustomModel(new CustomModel().setDistanceInfluence(0)).setVehicle("bike"),
+                        new CustomProfile("car").setCustomModel(new CustomModel().setDistanceInfluence(70d)).setVehicle("car"),
+                        new CustomProfile("bike").setCustomModel(new CustomModel().setDistanceInfluence(0d)).setVehicle("bike"),
                         new Profile("bike_fastest").setWeighting("fastest").setVehicle("bike"),
                         new CustomProfile("bus").setVehicle("roads").putHint("custom_model_file", "bus.json"),
                         new CustomProfile("cargo_bike").setVehicle("bike").
@@ -87,7 +87,7 @@ private static GraphHopperServerConfiguration createConfig() {
                                         addToPriority(If("max_width < 1.2", MULTIPLY, "0"))).
                                 setVehicle("bike"),
                         new CustomProfile("custom_bike2").setCustomModel(
-                                        new CustomModel(new CustomModel().
+                                        new CustomModel(new CustomModel().setDistanceInfluence(70d).
                                                 addToPriority(If("road_class == TERTIARY || road_class == TRACK", MULTIPLY, "0")))).
                                 setVehicle("bike"),
                         new CustomProfile("custom_bike3").setCustomModel(

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceTruckTest.java
Patch:
@@ -35,6 +35,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/north-bayreuth.osm.gz").
                 putObject("graph.location", DIR).
                 putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,hgv").
+                putObject("import.osm.ignored_highways", "").
                 putObject("custom_model_folder", "./src/test/resources/com/graphhopper/application/resources").
                 setProfiles(Arrays.asList(new CustomProfile("truck").setVehicle("roads").putHint("custom_model_file", "truck.json"))).
                 setCHProfiles(Arrays.asList(new CHProfile("truck")));

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -190,7 +190,7 @@ public void testSinglePartition() {
     public void testMultiplePartitions() {
         // points are chosen such that DP will remove those marked with an x
         // got this data from running a request like this:
-        // http://localhost:8989/maps/?point=48.891273%2C9.325418&point=48.891005%2C9.322865&point=48.889877%2C9.32102&point=48.88975%2C9.31999&vehicle=car&weighting=fastest&elevation=true&debug=true&details=max_speed&details=street_name&
+        // http://localhost:8989/maps/?point=48.891273%2C9.325418&point=48.891005%2C9.322865&point=48.889877%2C9.32102&point=48.88975%2C9.31999&profile=car&weighting=fastest&elevation=true&debug=true&details=max_speed&details=street_name&
         PointList points = new PointList(20, true);
         points.add(48.89089, 9.32538, 270.0); // 0    -> 0
         points.add(48.89090, 9.32527, 269.0); // 1 x

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/RealtimeFeed.java
Patch:
@@ -381,9 +381,9 @@ public static GtfsReader.TripWithStopTimes toTripWithStopTimes(GTFSFeed feed, Gt
                 stopTimes.add(stopTime);
                 logger.trace("Number of stop times: {}", stopTimes.size());
             } else {
-                // http://localhost:3000/route?point=45.51043713898763%2C-122.68381118774415&point=45.522104713562825%2C-122.6455307006836&weighting=fastest&pt.earliest_departure_time=2018-08-24T16%3A56%3A17Z&arrive_by=false&pt.max_walk_distance_per_leg=1000&pt.limit_solutions=5&locale=en-US&vehicle=pt&elevation=false&use_miles=false&points_encoded=false&pt.profile=true
+                // http://localhost:3000/route?point=45.51043713898763%2C-122.68381118774415&point=45.522104713562825%2C-122.6455307006836&weighting=fastest&pt.earliest_departure_time=2018-08-24T16%3A56%3A17Z&arrive_by=false&pt.max_walk_distance_per_leg=1000&pt.limit_solutions=5&locale=en-US&profile=pt&elevation=false&use_miles=false&points_encoded=false&pt.profile=true
                 // long query:
-                // http://localhost:3000/route?point=45.518526513612244%2C-122.68612861633302&point=45.52908004573869%2C-122.6862144470215&weighting=fastest&pt.earliest_departure_time=2018-08-24T16%3A51%3A20Z&arrive_by=false&pt.max_walk_distance_per_leg=10000&pt.limit_solutions=4&locale=en-US&vehicle=pt&elevation=false&use_miles=false&points_encoded=false&pt.profile=true
+                // http://localhost:3000/route?point=45.518526513612244%2C-122.68612861633302&point=45.52908004573869%2C-122.6862144470215&weighting=fastest&pt.earliest_departure_time=2018-08-24T16%3A51%3A20Z&arrive_by=false&pt.max_walk_distance_per_leg=10000&pt.limit_solutions=4&locale=en-US&profile=pt&elevation=false&use_miles=false&points_encoded=false&pt.profile=true
                 throw new RuntimeException();
             }
         }

File: web/src/test/java/com/graphhopper/application/resources/SPTResourceTest.java
Patch:
@@ -128,8 +128,8 @@ public void missingPoint() {
 
     @Test
     public void profileWithLegacyParametersNotAllowed() {
-        assertNotAllowed("&profile=fast_car&weighting=fastest", "Since you are using the 'profile' parameter, do not use the 'weighting' parameter. You used 'weighting=fastest'");
-        assertNotAllowed("&profile=fast_car&vehicle=car", "Since you are using the 'profile' parameter, do not use the 'vehicle' parameter. You used 'vehicle=car'");
+        assertNotAllowed("&profile=car&weighting=fastest", "The 'weighting' parameter is no longer supported. You used 'weighting=fastest'");
+        assertNotAllowed("&vehicle=car", "profile parameter required");
     }
 
     private void assertNotAllowed(String hint, String error) {

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -427,6 +427,9 @@ private List<SequenceState<State, Observation, Path>> computeViterbiSequence(Lis
                 }
             }
         }
+        if (qe == null) {
+            throw new IllegalArgumentException("Sequence is broken for submitted track at initial time step.");
+        }
         if (qe.timeStep != timeSteps.size() - 1) {
             throw new IllegalArgumentException("Sequence is broken for submitted track at time step "
                     + qe.timeStep + ". observation:" + qe.state.getEntry());

File: client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java
Patch:
@@ -82,6 +82,8 @@ public OkHttpClient getDownloader() {
     protected JsonNode createPostRequest(GHMRequest ghRequest) {
         if (ghRequest.getHints().getObject("profile", null) != null)
             throw new IllegalArgumentException("use setProfile instead of hint 'profile'");
+        if (ghRequest.getProfile() == null)
+            throw new IllegalArgumentException("profile cannot be empty");
         if (ghRequest.getHints().getObject("fail_fast", null) != null)
             throw new IllegalArgumentException("use setFailFast instead of hint 'fail_fast'");
 
@@ -114,6 +116,7 @@ protected JsonNode createPostRequest(GHMRequest ghRequest) {
         putStrings(requestJson, "snap_preventions", ghRequest.getSnapPreventions());
         putStrings(requestJson, "out_arrays", ghRequest.getOutArrays());
         requestJson.put("fail_fast", ghRequest.getFailFast());
+        requestJson.put("profile", ghRequest.getProfile());
 
         Map<String, Object> hintsMap = ghRequest.getHints().toMap();
         for (String hintKey : hintsMap.keySet()) {

File: core/src/main/java/com/graphhopper/routing/util/DefaultVehicleEncodedValuesFactory.java
Patch:
@@ -34,13 +34,13 @@ public VehicleEncodedValues createVehicleEncodedValues(String name, PMap configu
             return VehicleEncodedValues.car(configuration);
 
         if (name.equals("car4wd"))
-            throw new IllegalArgumentException("Instead of car4wd use the roads vehicle and a custom_model, see web/src/test/resources/com/graphhopper/application/resources/car4wd.yml");
+            throw new IllegalArgumentException("Instead of car4wd use the roads vehicle and a custom_model, see custom_models/car4wd.json");
 
         if (name.equals(BIKE))
             return VehicleEncodedValues.bike(configuration);
 
         if (name.equals("bike2"))
-            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike2.yml and #1234");
+            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike2.json and #1234");
 
         if (name.equals(RACINGBIKE))
             return VehicleEncodedValues.racingbike(configuration);

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.carrotsearch.hppc.IntArrayList;
 import com.fasterxml.jackson.databind.ObjectMapper;
-import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
 import com.graphhopper.*;
 import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHBitSetImpl;
@@ -735,9 +734,9 @@ private void storeJson(String jsonLocation, boolean useMeasurementTimeAsRefTime)
     }
 
     private CustomModel loadCustomModel(String customModelLocation) {
-        ObjectMapper yamlOM = Jackson.initObjectMapper(new ObjectMapper(new YAMLFactory()));
+        ObjectMapper om = Jackson.initObjectMapper(new ObjectMapper());
         try {
-            return yamlOM.readValue(new File(customModelLocation), CustomModel.class);
+            return om.readValue(Helper.readJSONFileWithoutComments(customModelLocation), CustomModel.class);
         } catch (Exception e) {
             throw new RuntimeException("Cannot load custom_model from " + customModelLocation, e);
         }

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -135,7 +135,7 @@ public ResponsePath doWork(PointList waypoints, List<Path> paths, EncodedValueLo
                 }
 
                 fullPoints.add(tmpPoints);
-                responsePath.addPathDetails(PathDetailsFromEdges.calcDetails(path, evLookup, weighting, requestedPathDetails, pathBuilderFactory, origPoints));
+                responsePath.addPathDetails(PathDetailsFromEdges.calcDetails(path, evLookup, weighting, requestedPathDetails, pathBuilderFactory, origPoints, graph));
                 origPoints = fullPoints.size();
             }
 

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -112,7 +112,7 @@ public void testScenario() {
         Path p = new Dijkstra(g, weighting, tMode).calcPath(0, 10);
         InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, carManager, usTR);
         Map<String, List<PathDetail>> details = PathDetailsFromEdges.calcDetails(p, carManager, weighting,
-                Arrays.asList(AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
+                Arrays.asList(AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0, g);
 
         ResponsePath responsePath = new ResponsePath();
         responsePath.setInstructions(wayList);

File: navigation/src/main/java/com/graphhopper/navigation/NavigateResource.java
Patch:
@@ -39,6 +39,7 @@
 import javax.ws.rs.core.UriInfo;
 import java.util.*;
 
+import static com.graphhopper.util.Parameters.Details.INTERSECTION;
 import static com.graphhopper.util.Parameters.Routing.*;
 
 /**
@@ -169,6 +170,8 @@ private GHResponse calcRoute(List<Double> headings, List<GHPoint> requestPoints,
 
         request.setProfile(profileStr).
                 setLocale(localeStr).
+                // We force the intersection details here as we cannot easily add this to the URL
+                setPathDetails(Arrays.asList(INTERSECTION)).
                 putHint(CALC_POINTS, true).
                 putHint(INSTRUCTIONS, enableInstructions).
                 putHint(WAY_POINT_MAX_DISTANCE, minPathPrecision).

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/TripFromLabel.java
Patch:
@@ -401,7 +401,7 @@ private List<Trip.Leg> parsePartitionToLegs(List<Label.Transition> path, Graph g
             pathh.setFromNode(path.get(0).label.node.streetNode);
             pathh.setEndNode(path.get(path.size() - 1).label.node.streetNode);
             pathh.setFound(true);
-            Map<String, List<PathDetail>> pathDetails = PathDetailsFromEdges.calcDetails(pathh, encodedValueLookup, weighting, requestedPathDetails, pathDetailsBuilderFactory, 0);
+            Map<String, List<PathDetail>> pathDetails = PathDetailsFromEdges.calcDetails(pathh, encodedValueLookup, weighting, requestedPathDetails, pathDetailsBuilderFactory, 0, graph);
 
             final Instant departureTime = Instant.ofEpochMilli(path.get(0).label.currentTime);
             final Instant arrivalTime = Instant.ofEpochMilli(path.get(path.size() - 1).label.currentTime);

File: web-api/src/main/java/com/graphhopper/jackson/PathDetailSerializer.java
Patch:
@@ -24,6 +24,7 @@
 import com.graphhopper.util.details.PathDetail;
 
 import java.io.IOException;
+import java.util.Map;
 
 public class PathDetailSerializer extends JsonSerializer<PathDetail> {
 
@@ -44,6 +45,8 @@ else if (value.getValue() instanceof Boolean)
             gen.writeBoolean((Boolean) value.getValue());
         else if (value.getValue() instanceof String)
             gen.writeString((String) value.getValue());
+        else if (value.getValue() instanceof Map)
+            gen.writeObject(value.getValue());
         else if (value.getValue() == null)
             gen.writeNull();
         else

File: web-api/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -209,6 +209,7 @@ public static final class Details {
         public static final String TIME = "time";
         public static final String WEIGHT = "weight";
         public static final String DISTANCE = "distance";
+        public static final String INTERSECTION = "intersection";
     }
 
 }

File: core/src/main/java/com/graphhopper/routing/util/DefaultVehicleEncodedValuesFactory.java
Patch:
@@ -39,8 +39,8 @@ public VehicleEncodedValues createVehicleEncodedValues(String name, PMap configu
         if (name.equals(BIKE))
             return VehicleEncodedValues.bike(configuration);
 
-        if (name.equals(BIKE2))
-            return VehicleEncodedValues.bike2(configuration);
+        if (name.equals("bike2"))
+            throw new IllegalArgumentException("Instead of bike2 use the bike vehicle and a custom model, see custom_models/bike2.yml and #1234");
 
         if (name.equals(RACINGBIKE))
             return VehicleEncodedValues.racingbike(configuration);

File: core/src/main/java/com/graphhopper/routing/util/DefaultVehicleTagParserFactory.java
Patch:
@@ -31,8 +31,6 @@ public VehicleTagParser createParser(EncodedValueLookup lookup, String name, PMa
             return new CarTagParser(lookup, configuration);
         if (name.equals(BIKE))
             return new BikeTagParser(lookup, configuration);
-        if (name.equals(BIKE2))
-            return new Bike2WeightTagParser(lookup, configuration);
         if (name.equals(RACINGBIKE))
             return new RacingBikeTagParser(lookup, configuration);
         if (name.equals(MOUNTAINBIKE))

File: core/src/main/java/com/graphhopper/routing/util/VehicleEncodedValues.java
Patch:
@@ -27,7 +27,7 @@
 import static com.graphhopper.routing.util.VehicleEncodedValuesFactory.*;
 
 public class VehicleEncodedValues {
-    public static final List<String> OUTDOOR_VEHICLES = Arrays.asList(BIKE, BIKE2, RACINGBIKE, MOUNTAINBIKE, FOOT, HIKE, WHEELCHAIR);
+    public static final List<String> OUTDOOR_VEHICLES = Arrays.asList(BIKE, RACINGBIKE, MOUNTAINBIKE, FOOT, HIKE, WHEELCHAIR);
 
     private final String name;
     private final BooleanEncodedValue accessEnc;

File: core/src/main/java/com/graphhopper/routing/util/VehicleEncodedValuesFactory.java
Patch:
@@ -26,7 +26,6 @@ public interface VehicleEncodedValuesFactory {
     String ROADS = "roads";
     String CAR = "car";
     String BIKE = "bike";
-    String BIKE2 = "bike2";
     String RACINGBIKE = "racingbike";
     String MOUNTAINBIKE = "mtb";
     String FOOT = "foot";

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -43,7 +43,6 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
-import org.locationtech.jts.geom.Polygon;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -357,7 +356,6 @@ else if (config.getElevationSmoothing().equals("moving_average"))
             checkCoordinates(toIndex, pointList.get(pointList.size() - 1));
             edge.setWayGeometry(pointList.shallowCopy(1, pointList.size() - 1, false));
         }
-        osmParsers.applyWayTags(way, edge);
 
         checkDistance(edge);
         if (osmWayIdSet.contains(way.getId())) {

File: client-hc/src/main/java/com/graphhopper/api/GHMatrixSyncRequester.java
Patch:
@@ -39,7 +39,7 @@ public MatrixResponse route(GHMRequest ghRequest) {
                 withTimes, withDistances, withWeights);
 
         try {
-            String postUrl = buildURLNoHints("/", ghRequest);
+            String postUrl = buildURLNoHints("", ghRequest);
             JsonNode responseJson = fromStringToJSON(postUrl, postJson(postUrl, requestJson));
             if (responseJson.has("message")) {
                 matrixResponse.addErrors(ResponsePathDeserializer.readErrors(objectMapper, responseJson));

File: core/src/main/java/com/graphhopper/routing/ev/IntEncodedValueImpl.java
Patch:
@@ -193,7 +193,7 @@ public final int getInt(boolean reverse, IntsRef ref) {
         // if we do not store both directions ignore reverse == true for convenient reading
         if (storeTwoDirections && reverse) {
             flags = ref.ints[bwdDataIndex + ref.offset];
-            return minStorableValue + (flags & bwdMask) >>> bwdShift;
+            return minStorableValue + ((flags & bwdMask) >>> bwdShift);
         } else {
             flags = ref.ints[fwdDataIndex + ref.offset];
             if (negateReverseDirection && reverse)

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -648,6 +648,8 @@ private void buildEncodingManagerAndOSMParsers(String flagEncodersStr, String en
             osmParsers.addWayTagParser(new OSMRoadAccessParser(encodingManager.getEnumEncodedValue(RoadAccess.KEY, RoadAccess.class), OSMRoadAccessParser.toOSMRestrictions(TransportationMode.CAR)));
         if (encodingManager.hasEncodedValue(AverageSlope.KEY) || encodingManager.hasEncodedValue(MaxSlope.KEY))
             osmParsers.addWayTagParser(new SlopeCalculator(encodingManager.getDecimalEncodedValue(MaxSlope.KEY), encodingManager.getDecimalEncodedValue(AverageSlope.KEY)));
+        if (encodingManager.hasEncodedValue(Curvature.KEY))
+            osmParsers.addWayTagParser(new CurvatureCalculator(encodingManager.getDecimalEncodedValue(Curvature.KEY)));
 
         DateRangeParser dateRangeParser = DateRangeParser.createInstance(dateRangeParserString);
         flagEncodersMap.forEach((name, encoderStr) -> {

File: core/src/main/java/com/graphhopper/routing/ev/DecimalEncodedValueImpl.java
Patch:
@@ -51,7 +51,8 @@ public DecimalEncodedValueImpl(String name, int bits, double minStorableValue, d
                                    boolean negateReverseDirection, boolean storeTwoDirections, boolean useMaximumAsInfinity) {
         super(name, bits, (int) Math.round(minStorableValue / factor), negateReverseDirection, storeTwoDirections);
         if (!negateReverseDirection && super.minStorableValue * factor != minStorableValue)
-            throw new IllegalArgumentException("minStorableValue " + minStorableValue + " is not a multiple of the specified factor " + factor);
+            throw new IllegalArgumentException("minStorableValue " + minStorableValue + " is not a multiple of the specified factor "
+                    + factor + " (" + super.minStorableValue * factor + ")");
         this.factor = factor;
         this.useMaximumAsInfinity = useMaximumAsInfinity;
     }

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -88,6 +88,8 @@ public EncodedValue create(String string) {
             enc = MaxSlope.create();
         } else if (AverageSlope.KEY.equals(name)) {
             enc = AverageSlope.create();
+        } else if (Curvature.KEY.equals(name)) {
+            enc = Curvature.create();
         } else {
             throw new IllegalArgumentException("DefaultEncodedValueFactory cannot find EncodedValue " + name);
         }

File: core/src/main/java/com/graphhopper/routing/util/SlopeCalculator.java
Patch:
@@ -1,7 +1,8 @@
-package com.graphhopper.routing.util.parsers;
+package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
+import com.graphhopper.routing.util.parsers.TagParser;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.DistanceCalcEarth;
 import com.graphhopper.util.PointList;

File: core/src/test/java/com/graphhopper/routing/util/SlopeCalculatorTest.java
Patch:
@@ -1,10 +1,9 @@
-package com.graphhopper.routing.util.parsers;
+package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.ev.AverageSlope;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.MaxSlope;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.PointList;
 import org.junit.jupiter.api.Test;

File: core/src/main/java/com/graphhopper/routing/querygraph/VirtualEdgeIteratorState.java
Patch:
@@ -310,7 +310,7 @@ public EdgeIteratorState set(StringEncodedValue property, String fwd, String bwd
 
     @Override
     public String getName() {
-        String name = (String) getValue("name");
+        String name = (String) getValue(EdgeKVStorage.KeyValue.STREET_NAME);
         // preserve backward compatibility (returns empty string if name tag missing)
         return name == null ? "" : name;
     }

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -974,7 +974,7 @@ public Object getValue(String key) {
 
         @Override
         public String getName() {
-            String name = (String) getValue("name");
+            String name = (String) getValue(EdgeKVStorage.KeyValue.STREET_NAME);
             // preserve backward compatibility (returns empty string if name tag missing)
             return name == null ? "" : name;
         }

File: core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
Patch:
@@ -36,11 +36,11 @@ public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requested
         List<PathDetailsBuilder> builders = new ArrayList<>();
 
         if (requestedPathDetails.contains(STREET_NAME))
-            builders.add(new KVStringDetails(STREET_NAME, "name"));
+            builders.add(new KVStringDetails(STREET_NAME));
         if (requestedPathDetails.contains(STREET_REF))
-            builders.add(new KVStringDetails(STREET_REF, "ref"));
+            builders.add(new KVStringDetails(STREET_REF));
         if (requestedPathDetails.contains(STREET_DESTINATION))
-            builders.add(new KVStringDetails(STREET_DESTINATION, "destination"));
+            builders.add(new KVStringDetails(STREET_DESTINATION));
 
         if (requestedPathDetails.contains(AVERAGE_SPEED))
             builders.add(new AverageSpeedDetails(weighting));

File: core/src/test/java/com/graphhopper/storage/BaseGraphTest.java
Patch:
@@ -27,6 +27,7 @@
 import java.util.ArrayList;
 import java.util.List;
 
+import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
 import static com.graphhopper.util.EdgeIteratorState.REVERSE_STATE;
 import static com.graphhopper.util.FetchMode.*;
 import static org.junit.jupiter.api.Assertions.*;
@@ -69,8 +70,8 @@ public void testSave_and_fileFormat() {
         graph.edge(9, 11).setDistance(200).set(carAccessEnc, true, true);
         graph.edge(1, 2).setDistance(120).set(carAccessEnc, true, false);
 
-        iter1.setKeyValues(KeyValue.createKV("name", "named street1"));
-        iter2.setKeyValues(KeyValue.createKV("name", "named street2"));
+        iter1.setKeyValues(KeyValue.createKV(STREET_NAME, "named street1"));
+        iter2.setKeyValues(KeyValue.createKV(STREET_NAME, "named street2"));
 
         List<KeyValue> list = new ArrayList<>();
         list.add(new KeyValue("keyA", "FORWARD", true, false));

File: core/src/test/java/com/graphhopper/storage/BaseGraphWithTurnCostsTest.java
Patch:
@@ -27,6 +27,7 @@
 
 import java.util.Random;
 
+import static com.graphhopper.search.EdgeKVStorage.KeyValue.STREET_NAME;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
@@ -78,8 +79,8 @@ public void testSave_and_fileFormat() {
         setTurnCost(iter2.getEdge(), 0, iter1.getEdge(), 666);
         setTurnCost(iter1.getEdge(), 1, iter2.getEdge(), 815);
 
-        iter1.setKeyValues(KeyValue.createKV("name", "named street1"));
-        iter2.setKeyValues(KeyValue.createKV("name", "named street2"));
+        iter1.setKeyValues(KeyValue.createKV(STREET_NAME, "named street1"));
+        iter2.setKeyValues(KeyValue.createKV(STREET_NAME, "named street2"));
 
         checkGraph(graph);
         graph.flush();

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -38,6 +38,7 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.routing.weighting.custom.CustomProfile;
 import com.graphhopper.routing.weighting.custom.CustomWeighting;
+import com.graphhopper.search.EdgeKVStorage;
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.util.*;

File: web-api/src/main/java/com/graphhopper/jackson/InstructionListSerializer.java
Patch:
@@ -31,6 +31,8 @@
 import com.graphhopper.util.Instruction;
 import com.graphhopper.util.InstructionList;
 
+import static com.graphhopper.util.Parameters.Details.STREET_NAME;
+
 public class InstructionListSerializer extends JsonSerializer<InstructionList> {
     @Override
     public void serialize(InstructionList instructions, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
@@ -42,7 +44,7 @@ public void serialize(InstructionList instructions, JsonGenerator jsonGenerator,
 
             instrJson.put("text", Helper.firstBig(instruction.getTurnDescription(instructions.getTr())));
 
-            instrJson.put("street_name", instruction.getName());
+            instrJson.put(STREET_NAME, instruction.getName());
             instrJson.put("time", instruction.getTime());
             instrJson.put("distance", Helper.round(instruction.getDistance(), 3));
             instrJson.put("sign", instruction.getSign());

File: web-api/src/main/java/com/graphhopper/jackson/ResponsePathDeserializer.java
Patch:
@@ -83,7 +83,7 @@ public static ResponsePath createResponsePath(ObjectMapper objectMapper, JsonNod
                 int viaCount = 1;
                 for (JsonNode jsonObj : instrArr) {
                     double instDist = jsonObj.get("distance").asDouble();
-                    String text = turnDescription ? jsonObj.get("text").asText() : jsonObj.get("street_name").asText();
+                    String text = turnDescription ? jsonObj.get("text").asText() : jsonObj.get(Parameters.Details.STREET_NAME).asText();
                     long instTime = jsonObj.get("time").asLong();
                     int sign = jsonObj.get("sign").asInt();
                     JsonNode iv = jsonObj.get("interval");

File: web-api/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
Patch:
@@ -114,7 +114,7 @@ public String getTurnDescription(Translation tr) {
             return getName();
 
         String str;
-        String streetName = getStreetName();
+        String streetName = _getName();
         int indi = getSign();
         if (indi == Instruction.USE_ROUNDABOUT) {
             if (!exited) {

File: web-bundle/src/main/java/com/graphhopper/resources/MVTResource.java
Patch:
@@ -3,6 +3,7 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.search.EdgeKVStorage;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.util.EdgeIteratorState;
@@ -124,8 +125,8 @@ public Response doGetXyz(
 
             edgeCounter.incrementAndGet();
             Map<String, Object> map = new LinkedHashMap<>();
-            Stream.of("name", "ref", "destination", "destination_ref").forEach(
-                    key -> map.put(key, Optional.ofNullable(edge.getValue(key)).orElse(""))
+            edge.getKeyValues().forEach(
+                    entry -> map.put(entry.key, entry.value)
             );
             map.put("edge_id", edge.getEdge());
             map.put("edge_key", edge.getEdgeKey());

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -13,6 +13,7 @@
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.BlockAreaWeighting;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.search.EdgeKVStorage;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.GraphEdgeIdFinder;
 import com.graphhopper.storage.NodeAccess;
@@ -39,6 +40,7 @@
 import static com.graphhopper.resources.RouteResource.removeLegacyParameters;
 import static com.graphhopper.routing.util.TraversalMode.EDGE_BASED;
 import static com.graphhopper.routing.util.TraversalMode.NODE_BASED;
+import static com.graphhopper.util.Parameters.Details.STREET_NAME;
 
 /**
  * This resource provides the entire shortest path tree as response. In a simple CSV format discussed at #1577.
@@ -197,7 +199,7 @@ public Response doGet(
                         if (edge == null)
                             continue;
 
-                        if (col.equals(Parameters.Details.STREET_NAME)) {
+                        if (col.equals(STREET_NAME)) {
                             sb.append(edge.getName().replaceAll(",", ""));
                             continue;
                         }

File: web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java
Patch:
@@ -89,7 +89,7 @@ private EdgeIteratorState getEdgeIterator() {
         pointList.add(-3.4445, -38.9990);
         pointList.add(-3.5550, -38.7990);
         return new VirtualEdgeIteratorState(0, 0, 0, 1, 10, new IntsRef(1),
-                EdgeKVStorage.KeyValue.createKV("name", "test of iterator"), pointList, false);
+                EdgeKVStorage.KeyValue.createKV(EdgeKVStorage.KeyValue.STREET_NAME, "test of iterator"), pointList, false);
     }
 
 }

File: web/src/test/java/com/graphhopper/application/resources/MvtResourceTest.java
Patch:
@@ -102,7 +102,7 @@ public void testDetailsInResponse() throws IOException {
                 filter(g -> getUserData(g).get("name").equals("Avinguda de Tarragona"))
                 .findFirst().get();
         assertEquals("road", getUserData(geometry).get("road_environment"));
-        assertEquals(50.0, getUserData(geometry).get("max_speed"));
+        assertEquals("50.0 | 50.0", getUserData(geometry).get("max_speed"));
         assertEquals("primary", getUserData(geometry).get("road_class"));
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -846,8 +846,10 @@ protected void importOSM() {
             logger.info("Creating custom area index, reading custom areas from: '" + customAreasDirectory + "'");
             customAreas.addAll(readCustomAreas());
         }
+        CustomArea area = GHUtility.getFirstDuplicateArea(customAreas, Country.ISO_ALPHA3);
+        if (area != null)
+            throw new IllegalArgumentException("area used duplicate '" + Country.ISO_ALPHA3 + "' see properties: " + area.getProperties());
         AreaIndex<CustomArea> areaIndex = new AreaIndex<>(customAreas);
-
         if (countryRuleFactory == null || countryRuleFactory.getCountryToRuleMap().isEmpty()) {
             logger.info("No country rules available");
         } else {

File: core/src/main/java/com/graphhopper/routing/util/AreaIndex.java
Patch:
@@ -21,6 +21,7 @@
 import org.locationtech.jts.geom.*;
 import org.locationtech.jts.geom.prep.PreparedGeometry;
 import org.locationtech.jts.geom.prep.PreparedGeometryFactory;
+import org.locationtech.jts.geom.prep.PreparedPolygon;
 import org.locationtech.jts.index.strtree.STRtree;
 
 import java.util.List;

File: core/src/main/java/com/graphhopper/util/shapes/Polygon.java
Patch:
@@ -35,7 +35,7 @@
  */
 public class Polygon implements Shape {
 
-    private final GeometryFactory factory = new GeometryFactory();
+    private static final GeometryFactory factory = new GeometryFactory();
     public final PreparedGeometry prepPolygon;
     public final boolean rectangle;
     public final Envelope envelope;
@@ -102,7 +102,7 @@ public double getMaxLat() {
     public double getMaxLon() {
         return envelope.getMaxX();
     }
-    
+
     public boolean isRectangle() {
         return rectangle;
     }

File: core/src/test/java/com/graphhopper/routing/util/MotorcycleTagParserTest.java
Patch:
@@ -114,6 +114,8 @@ public void testAccess() {
         way.setTag("access", "yes");
         way.setTag("motor_vehicle", "no");
         assertTrue(parser.getAccess(way).canSkip());
+        way.setTag("motor_vehicle", "agricultural;forestry");
+        assertTrue(parser.getAccess(way).canSkip());
 
         way.clearTags();
         way.setTag("highway", "service");

File: reader-gtfs/src/test/java/com/graphhopper/AnotherAgencyIT.java
Patch:
@@ -171,7 +171,7 @@ public void testWalkTransferBetweenFeeds() {
         assertEquals("10:00", LocalDateTime.ofInstant(walkDepartureTime, zoneId).toLocalTime().toString());
         assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry);
         Instant walkArrivalTime = Instant.ofEpochMilli(transitSolution.getLegs().get(1).getArrivalTime().getTime());
-        assertEquals("10:08:06.660", LocalDateTime.ofInstant(walkArrivalTime, zoneId).toLocalTime().toString());
+        assertEquals("10:08:06.670", LocalDateTime.ofInstant(walkArrivalTime, zoneId).toLocalTime().toString());
         assertEquals("EMSI,DADAN", ((Trip.PtLeg) transitSolution.getLegs().get(2)).stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")));
     }
 
@@ -189,7 +189,7 @@ public void testMuseumToEmsi() {
         GHResponse route = ptRouter.route(ghRequest);
         ResponsePath walkRoute = route.getBest();
         assertEquals(1, walkRoute.getLegs().size());
-        assertEquals(486660, walkRoute.getTime()); // < 10 min, so the transfer in test above works ^^
+        assertEquals(486670, walkRoute.getTime()); // < 10 min, so the transfer in test above works ^^
         assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), walkRoute.getLegs().get(0).geometry);
         assertFalse(route.hasErrors());
     }

File: reader-gtfs/src/test/java/com/graphhopper/FreeWalkIT.java
Patch:
@@ -97,7 +97,7 @@ public void testWalkTransferBetweenFeeds() {
         assertEquals("JUSTICE_COURT,MUSEUM", firstLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")));
         assertEquals("EMSI,DADAN", secondLeg.stops.stream().map(s -> s.stop_id).collect(Collectors.joining(",")));
         assertEquals(LocalDateTime.parse("2007-01-01T10:00:00").atZone(zoneId).toInstant(), transferLeg.getDepartureTime().toInstant());
-        assertEquals(LocalDateTime.parse("2007-01-01T10:08:06.660").atZone(zoneId).toInstant(), transferLeg.getArrivalTime().toInstant());
+        assertEquals(LocalDateTime.parse("2007-01-01T10:08:06.670").atZone(zoneId).toInstant(), transferLeg.getArrivalTime().toInstant());
 
         assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), transitSolution.getLegs().get(1).geometry);
 

File: core/src/main/java/com/graphhopper/routing/ev/AverageSlope.java
Patch:
@@ -7,7 +7,7 @@ public class AverageSlope {
     public static final String KEY = "average_slope";
 
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 5, 0, 1, false,
+        return new DecimalEncodedValueImpl(KEY, 5, 0, 1,
                 true, false, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxAxleLoad.java
Patch:
@@ -29,6 +29,6 @@ public class MaxAxleLoad {
      * it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.
      */
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 7, 0.5, true, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0, 0.5, false, false, true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxHeight.java
Patch:
@@ -32,6 +32,6 @@ public class MaxHeight {
      * it is assumed to use the maximum value.
      */
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 7, 0.1, true, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0, 0.1, false, false, true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxLength.java
Patch:
@@ -32,6 +32,6 @@ public class MaxLength {
      * between the maximum and infinity it is assumed to use the maximum value.
      */
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 7, 0.1, true, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0, 0.1, false, false, true);
     }
 }
\ No newline at end of file

File: core/src/main/java/com/graphhopper/routing/ev/MaxSlope.java
Patch:
@@ -7,6 +7,6 @@ public class MaxSlope {
     public static final String KEY = "max_slope";
 
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 5, 1, false, false);
+        return new DecimalEncodedValueImpl(KEY, 5, 1, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxSpeed.java
Patch:
@@ -35,6 +35,6 @@ public class MaxSpeed {
     public static final double UNSET_SPEED = Double.POSITIVE_INFINITY;
 
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 5, 5, true, true);
+        return new DecimalEncodedValueImpl(KEY, 5, 0, 5, false, true, true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxWeight.java
Patch:
@@ -33,6 +33,6 @@ public class MaxWeight {
      * it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.
      */
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 8, 0.1, true, false);
+        return new DecimalEncodedValueImpl(KEY, 8, 0, 0.1, false, false, true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxWidth.java
Patch:
@@ -32,6 +32,6 @@ public class MaxWidth {
      * it is assumed to use the maximum value.
      */
     public static DecimalEncodedValue create() {
-        return new DecimalEncodedValueImpl(KEY, 7, 0.1, true, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0, 0.1, false, false, true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/TurnCost.java
Patch:
@@ -16,7 +16,7 @@ public static String key(String prefix) {
      */
     public static DecimalEncodedValue create(String name, int maxTurnCosts) {
         int turnBits = Helper.countBitValue(maxTurnCosts);
-        return new DecimalEncodedValueImpl(key(name), turnBits, 0, 1, false, false, false, true);
+        return new DecimalEncodedValueImpl(key(name), turnBits, 0, 1, false, false, true);
     }
 
     public static IntsRef createFlags() {

File: core/src/test/java/com/graphhopper/routing/ev/EncodedValueSerializerTest.java
Patch:
@@ -78,7 +78,7 @@ void explicitString() {
         assertEquals("{\"className\":\"com.graphhopper.routing.ev.DecimalEncodedValueImpl\",\"name\":\"max_width\",\"bits\":7," +
                 "\"min_storable_value\":0,\"max_storable_value\":127,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false," +
                 "\"fwd_data_index\":0,\"bwd_data_index\":0,\"fwd_shift\":3,\"bwd_shift\":-1,\"fwd_mask\":1016,\"bwd_mask\":0," +
-                "\"factor\":0.1,\"default_is_infinity\":true,\"use_maximum_as_infinity\":false}", serialized.get(1));
+                "\"factor\":0.1,\"use_maximum_as_infinity\":true}", serialized.get(1));
         assertEquals("{\"className\":\"com.graphhopper.routing.ev.SimpleBooleanEncodedValue\",\"name\":\"get_off_bike\",\"bits\":1," +
                 "\"min_storable_value\":0,\"max_storable_value\":1,\"max_value\":-2147483648,\"negate_reverse_direction\":false,\"store_two_directions\":false,\"fwd_data_index\":0," +
                 "\"bwd_data_index\":0,\"fwd_shift\":10,\"bwd_shift\":-1,\"fwd_mask\":1024,\"bwd_mask\":0}", serialized.get(2));

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMMaxAxleLoadParserTest.java
Patch:
@@ -35,7 +35,7 @@ public void testSimpleTags() {
         intsRef = new IntsRef(1);
         readerWay.setTag("maxaxleload", "80");
         parser.handleWayTags(intsRef, readerWay, relFlags);
-        assertEquals(malEnc.getMaxStorableDecimal(), malEnc.getDecimal(false, intsRef), .01);
+        assertEquals(63.0, malEnc.getDecimal(false, intsRef), .01);
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParserTest.java
Patch:
@@ -36,6 +36,6 @@ public void testSimpleTags() {
         intsRef = new IntsRef(1);
         readerWay.setTag("maxweight", "50");
         parser.handleWayTags(intsRef, readerWay, relFlags);
-        assertEquals(mwEnc.getMaxStorableDecimal(), mwEnc.getDecimal(false, intsRef), .01);
+        assertEquals(25.4, mwEnc.getDecimal(false, intsRef), .01);
     }
 }
\ No newline at end of file

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -73,7 +73,8 @@ public static List<Profile> resolveCustomModelFiles(String customModelFolder, Li
                     newProfiles.add(new CustomProfile(profile).setCustomModel(customModel));
                     continue;
                 } catch (Exception ex) {
-                    throw new RuntimeException("Cannot load custom_model from " + cm + " for profile " + profile.getName(), ex);
+                      throw new RuntimeException("Cannot load custom_model from " + cm + " for profile " + profile.getName()
+                          + ". If you are trying to load from a file, use 'custom_model_file' instead.", ex);
                 }
             }
             String customModelFileName = profile.getHints().getString("custom_model_file", "");

File: web-api/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -357,7 +357,7 @@ public static DateFormat createFormatter(String str) {
      * and returns the positive converted long.
      */
     public static long toUnsignedLong(int x) {
-        return ((long) x) & 0xFFFFffffL;
+        return ((long) x) & 0xFFFF_FFFFL;
     }
 
     /**

File: core/src/main/java/com/graphhopper/util/details/AbstractPathDetailsBuilder.java
Patch:
@@ -33,7 +33,7 @@ public abstract class AbstractPathDetailsBuilder implements PathDetailsBuilder {
     private final String name;
     private boolean isOpen = false;
     private PathDetail currentDetail;
-    private List<PathDetail> pathDetails = new ArrayList<>();
+    private final List<PathDetail> pathDetails = new ArrayList<>();
 
     public AbstractPathDetailsBuilder(String name) {
         this.name = name;

File: core/src/main/java/com/graphhopper/util/details/DecimalDetails.java
Patch:
@@ -23,7 +23,7 @@
 public class DecimalDetails extends AbstractPathDetailsBuilder {
 
     private final DecimalEncodedValue ev;
-    private double decimalValue = -1;
+    private Double decimalValue;
     private final String infinityJsonValue;
     private final double precision;
 
@@ -55,7 +55,7 @@ protected Object getCurrentValue() {
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         double tmpVal = edge.get(ev);
-        if (Math.abs(tmpVal - decimalValue) >= precision) {
+        if (decimalValue == null || Math.abs(tmpVal - decimalValue) >= precision) {
             this.decimalValue = Double.isInfinite(tmpVal) ? tmpVal : Math.round(tmpVal / precision) * precision;
             return true;
         }

File: core/src/main/java/com/graphhopper/util/details/EdgeIdDetails.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.util.details;
 
 import com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;
+import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
 
@@ -30,7 +31,7 @@
  */
 public class EdgeIdDetails extends AbstractPathDetailsBuilder {
 
-    private int edgeId = -1;
+    private int edgeId = EdgeIterator.NO_EDGE;
 
     public EdgeIdDetails() {
         super(EDGE_ID);

File: core/src/main/java/com/graphhopper/util/details/EdgeKeyDetails.java
Patch:
@@ -24,11 +24,10 @@
 
 public class EdgeKeyDetails extends AbstractPathDetailsBuilder {
 
-    private int edgeKey;
+    private int edgeKey = -1;
 
     public EdgeKeyDetails() {
         super(EDGE_KEY);
-        edgeKey = -1;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/util/details/EnumDetails.java
Patch:
@@ -23,7 +23,7 @@
 public class EnumDetails<E extends Enum> extends AbstractPathDetailsBuilder {
 
     private final EnumEncodedValue<E> ev;
-    private Enum objVal = null;
+    private E objVal;
 
     public EnumDetails(String name, EnumEncodedValue<E> ev) {
         super(name);

File: core/src/main/java/com/graphhopper/util/details/IntDetails.java
Patch:
@@ -23,7 +23,7 @@
 public class IntDetails extends AbstractPathDetailsBuilder {
 
     private final IntEncodedValue ev;
-    private int intVal = -1;
+    private Integer intVal;
 
     public IntDetails(String name, IntEncodedValue ev) {
         super(name);
@@ -38,7 +38,7 @@ protected Object getCurrentValue() {
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         int val = edge.get(ev);
-        if (val != intVal) {
+        if (intVal == null || val != intVal) {
             this.intVal = val;
             return true;
         }

File: core/src/main/java/com/graphhopper/util/details/KVStringDetails.java
Patch:
@@ -26,8 +26,8 @@
  */
 public class KVStringDetails extends AbstractPathDetailsBuilder {
 
-    private String curString = null;
-    private String key;
+    private final String key;
+    private String curString;
 
     public KVStringDetails(String name, String key) {
         super(name);
@@ -37,7 +37,6 @@ public KVStringDetails(String name, String key) {
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         if (curString == null) {
-            // TODO it might be more efficient if we fetch the Map only once per edge when more than one KVStringDetails are requested
             curString = (String) edge.getValue(key);
             return true;
         }

File: core/src/main/java/com/graphhopper/util/details/StringDetails.java
Patch:
@@ -23,7 +23,7 @@
 public class StringDetails extends AbstractPathDetailsBuilder {
 
     private final StringEncodedValue ev;
-    private String currentVal = null;
+    private String currentVal;
 
     public StringDetails(String name, StringEncodedValue ev) {
         super(name);
@@ -39,7 +39,7 @@ protected Object getCurrentValue() {
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         String val = edge.get(ev);
         // we can use the reference equality here
-        if (val != currentVal) {
+        if (!val.equals(currentVal)) {
             this.currentVal = val;
             return true;
         }

File: core/src/main/java/com/graphhopper/util/details/TimeDetails.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.util.details;
 
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
 
@@ -31,7 +32,7 @@
 public class TimeDetails extends AbstractPathDetailsBuilder {
 
     private final Weighting weighting;
-    private int prevEdgeId = -1;
+    private int prevEdgeId = EdgeIterator.NO_EDGE;
     // will include the turn time penalty
     private long time = 0;
 

File: core/src/main/java/com/graphhopper/util/details/WeightDetails.java
Patch:
@@ -33,7 +33,7 @@ public class WeightDetails extends AbstractPathDetailsBuilder {
 
     private final Weighting weighting;
     private int edgeId = EdgeIterator.NO_EDGE;
-    private double weight = Double.NaN;
+    private Double weight;
 
     public WeightDetails(Weighting weighting) {
         super(WEIGHT);

File: client-hc/src/test/java/com/graphhopper/api/Examples.java
Patch:
@@ -38,7 +38,7 @@ public void routing() {
                 addPoint(new GHPoint(49.6550, 11.4180));
         // Set profile like car, bike, foot, ...
         req.setProfile("bike");
-        // Optionally enable/disable elevation in output PointList, currently bike and foot support elevation, default is false
+        // Optionally enable/disable elevation in output PointList, default is false
         req.putHint("elevation", false);
         // Optionally enable/disable turn instruction information, defaults is true
         req.putHint("instructions", true);

File: core/src/main/java/com/graphhopper/routing/ev/IntEncodedValueImpl.java
Patch:
@@ -197,8 +197,8 @@ public final int getInt(boolean reverse, IntsRef ref) {
         } else {
             flags = ref.ints[fwdDataIndex + ref.offset];
             if (negateReverseDirection && reverse)
-                return -(minStorableValue + (flags & fwdMask) >>> fwdShift);
-            return minStorableValue + (flags & fwdMask) >>> fwdShift;
+                return -(minStorableValue + ((flags & fwdMask) >>> fwdShift));
+            return minStorableValue + ((flags & fwdMask) >>> fwdShift);
         }
     }
 

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -1005,7 +1005,7 @@ private Graph generatePathDetailsGraph() {
         GHUtility.setSpeed(45, true, true, carAccessEnc, carAvSpeedEnc, graph.edge(4, 5).setDistance(5)).setKeyValues(createKV("name", "4-5"));
         GHUtility.setSpeed(90, true, true, carAccessEnc, carAvSpeedEnc, graph.edge(2, 3).setDistance(5)).setKeyValues(createKV("name", "2-3"));
         GHUtility.setSpeed(9, true, true, carAccessEnc, carAvSpeedEnc, graph.edge(3, 4).setDistance(10)).setKeyValues(createKV("name", "3-4"));
-        GHUtility.setSpeed(9, true, true, carAccessEnc, carAvSpeedEnc, graph.edge(5, 6).setDistance(0.01)).setKeyValues(createKV("name", "3-4"));
+        GHUtility.setSpeed(9, true, true, carAccessEnc, carAvSpeedEnc, graph.edge(5, 6).setDistance(0.001)).setKeyValues(createKV("name", "3-4"));
         return graph;
     }
 

File: core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
Patch:
@@ -36,9 +36,9 @@ protected Object getCurrentValue() {
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         // for very short edges we might not be able to calculate a proper value for speed. dividing by calcMillis can
-        // even lead to speed=Infinity -> just ignore these cases here, see #1848
+        // even lead to speed=Infinity -> just ignore these cases here, see #1848 and #2620
         final double distance = edge.getDistance();
-        if (distance < 0.1) {
+        if (distance < 0.01) {
             if (decimalValue != null)
                 return false;
 

File: core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
Patch:
@@ -61,9 +61,8 @@ static int calculateSign(double prevLatitude, double prevLongitude, double latit
     }
 
     static boolean isNameSimilar(String name1, String name2) {
-        // We don't want two empty names to be similar
-        // The idea is, if there are only a random tracks, they usually don't have names
-        if (name1.isEmpty() && name2.isEmpty())
+        // We don't want two empty names to be similar (they usually don't have names if they are random tracks)
+        if (name1 == null || name2 == null || name1.isEmpty() || name2.isEmpty())
             return false;
         return name1.equals(name2);
     }

File: core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
Patch:
@@ -30,6 +30,8 @@
 import com.graphhopper.util.Parameters.Routing;
 import org.junit.jupiter.api.Test;
 
+import java.util.Collections;
+
 import static com.graphhopper.util.GHUtility.createMockedEdgeIteratorState;
 import static com.graphhopper.util.GHUtility.getEdge;
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -55,7 +57,7 @@ public void testWeightWrongHeading() {
         Weighting instance = new FastestWeighting(encoder, new PMap().putObject(Parameters.Routing.HEADING_PENALTY, 100));
 
         VirtualEdgeIteratorState virtEdge = new VirtualEdgeIteratorState(0, GHUtility.createEdgeKey(1, false, false), 1, 2, 10,
-                GHUtility.setSpeed(10, 0, encoder.getAccessEnc(), encoder.getAverageSpeedEnc(), encodingManager.createEdgeFlags()), "test", Helper.createPointList(51, 0, 51, 1), false);
+                GHUtility.setSpeed(10, 0, encoder.getAccessEnc(), encoder.getAverageSpeedEnc(), encodingManager.createEdgeFlags()), Collections.singletonMap("name", "test"), Helper.createPointList(51, 0, 51, 1), false);
         double time = instance.calcEdgeWeight(virtEdge, false);
 
         virtEdge.setUnfavored(true);

File: core/src/test/java/com/graphhopper/storage/BaseGraphWithTurnCostsTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.graphhopper.util.PMap;
 import org.junit.jupiter.api.Test;
 
+import java.util.Collections;
 import java.util.Random;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -72,8 +73,8 @@ public void testSave_and_fileFormat() {
         setTurnCost(iter2.getEdge(), 0, iter1.getEdge(), 666);
         setTurnCost(iter1.getEdge(), 1, iter2.getEdge(), 815);
 
-        iter1.setName("named street1");
-        iter2.setName("named street2");
+        iter1.setKeyValues(Collections.singletonMap("name", "named street1"));
+        iter2.setKeyValues(Collections.singletonMap("name", "named street2"));
 
         checkGraph(graph);
         graph.flush();

File: navigation/src/main/java/com/graphhopper/navigation/NavigateResponseConverter.java
Patch:
@@ -278,7 +278,7 @@ private static void putBannerInstructions(InstructionList instructions, double d
 
     private static void putSingleBannerInstruction(Instruction instruction, Locale locale, TranslationMap translationMap, ObjectNode singleBannerInstruction) {
         String bannerInstructionName = instruction.getName();
-        if (bannerInstructionName == null || bannerInstructionName.isEmpty()) {
+        if (bannerInstructionName.isEmpty()) {
             // Fix for final instruction and for instructions without name
             bannerInstructionName = instruction.getTurnDescription(translationMap.getWithFallBack(locale));
 

File: navigation/src/test/java/com/graphhopper/navigation/NavigateResponseConverterTest.java
Patch:
@@ -227,7 +227,6 @@ public void voiceInstructionTranslationTest() {
         steps = json.get("routes").get(0).get("legs").get(0).get("steps");
         voiceInstruction = steps.get(14).get("voiceInstructions").get(0);
         assertEquals("In 2 Kilometern rechts halten", voiceInstruction.get("announcement").asText());
-
     }
 
     @Test
@@ -245,6 +244,7 @@ public void roundaboutDegreesTest() {
         JsonNode primary = bannerInstructions.get(0).get("primary");
 
         assertEquals("roundabout", primary.get("type").asText());
+        assertEquals("At roundabout, take exit 2 onto CG-3", primary.get("text").asText());
         assertEquals("right", primary.get("modifier").asText());
         assertEquals(222, primary.get("degrees").asDouble(), 1);
 

File: web-api/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -199,6 +199,7 @@ public static final class Details {
 
         public static final String AVERAGE_SPEED = "average_speed";
         public static final String STREET_NAME = "street_name";
+        public static final String STREET_REF = "street_ref";
         public static final String EDGE_ID = "edge_id";
         public static final String EDGE_KEY = "edge_key";
         public static final String TIME = "time";

File: web-api/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
Patch:
@@ -114,7 +114,7 @@ public String getTurnDescription(Translation tr) {
             return getName();
 
         String str;
-        String streetName = getName();
+        String streetName = getStreetName();
         int indi = getSign();
         if (indi == Instruction.USE_ROUNDABOUT) {
             if (!exited) {

File: web-api/src/main/java/com/graphhopper/util/ViaInstruction.java
Patch:
@@ -55,6 +55,6 @@ public String getTurnDescription(Translation tr) {
         if (rawName)
             return getName();
 
-        return tr.tr("stopover", viaPosition);
+        return tr.tr("stopover", getViaCount());
     }
 }

File: web/src/test/java/com/graphhopper/application/MapMatchingTest.java
Patch:
@@ -266,8 +266,8 @@ public void testLoop2(PMap hints) throws IOException {
         mapMatching.setMeasurementErrorSigma(50);
         Gpx gpx = xmlMapper.readValue(getClass().getResourceAsStream("/tour-with-loop.gpx"), Gpx.class);
         MatchResult mr = mapMatching.match(GpxConversions.getEntries(gpx.trk.get(0)));
-        assertEquals(Arrays.asList("Jahnallee, B 87, B 181", "Funkenburgstraße",
-                "Gustav-Adolf-Straße", "Tschaikowskistraße", "Jahnallee, B 87, B 181",
+        assertEquals(Arrays.asList("Jahnallee", "Funkenburgstraße",
+                "Gustav-Adolf-Straße", "Tschaikowskistraße", "Jahnallee",
                 "Lessingstraße"), fetchStreets(mr.getEdgeMatches()));
     }
 

File: web/src/test/java/com/graphhopper/application/resources/ExtendedJsonResponseTest.java
Patch:
@@ -34,6 +34,7 @@
 import org.junit.jupiter.api.Test;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -86,7 +87,8 @@ private EdgeIteratorState getEdgeIterator() {
         PointList pointList = new PointList();
         pointList.add(-3.4445, -38.9990);
         pointList.add(-3.5550, -38.7990);
-        return new VirtualEdgeIteratorState(0, 0, 0, 1, 10, new IntsRef(1), "test of iterator", pointList, false);
+        return new VirtualEdgeIteratorState(0, 0, 0, 1, 10, new IntsRef(1),
+                Collections.singletonMap("name", "test of iterator"), pointList, false);
     }
 
 }

File: web/src/test/java/com/graphhopper/application/resources/MvtResourceTest.java
Patch:
@@ -100,7 +100,7 @@ public void testWithDetailsInResponse() throws IOException {
         assertEquals(21, layer.getGeometries().size());
 
         Geometry geometry = layer.getGeometries().stream().
-                filter(g -> attributes(g).get("name").equals("Avinguda de Tarragona, CG-1"))
+                filter(g -> attributes(g).get("name").equals("Avinguda de Tarragona"))
                 .findFirst().get();
         assertEquals("road", attributes(geometry).get("road_environment"));
         assertEquals(50.0, attributes(geometry).get("max_speed"));

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceClientHCTest.java
Patch:
@@ -293,9 +293,9 @@ public void doNotReadFinishInstruction(TestParam p) {
         assertEquals("", finishInstructionName);
     }
 
-    void isBetween(double from, double to, double expected) {
-        assertTrue(expected >= from, "expected value " + expected + " was smaller than limit " + from);
-        assertTrue(expected <= to, "expected value " + expected + " was bigger than limit " + to);
+    void isBetween(double from, double to, double value) {
+        assertTrue(value >= from, "value " + value + " was smaller than expected limit " + from);
+        assertTrue(value <= to, "value " + value + " was bigger than expected limit " + to);
     }
 
     @ParameterizedTest

File: web/src/test/java/com/graphhopper/application/resources/SPTResourceTest.java
Patch:
@@ -113,7 +113,7 @@ public void requestDetails() {
         assertEquals(20, Double.parseDouble(row[2]), .1);
 
         row = lines[249].split(",");
-        assertEquals("Carretera d'Engolasters CS-200", row[0]);
+        assertEquals("Carretera d'Engolasters", row[0]);
         assertEquals("secondary", row[1]);
         assertTrue(Double.isInfinite(Double.parseDouble(row[2])));
     }

File: core/src/main/java/com/graphhopper/routing/DefaultWeightingFactory.java
Patch:
@@ -25,6 +25,7 @@
 import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.routing.weighting.custom.CustomProfile;
 import com.graphhopper.routing.weighting.custom.CustomWeighting;
+import com.graphhopper.routing.weighting.custom.FindMinMax;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.util.CustomModel;
 import com.graphhopper.util.PMap;
@@ -75,6 +76,7 @@ public Weighting createWeighting(Profile profile, PMap requestHints, boolean dis
                 throw new IllegalArgumentException("custom weighting requires a CustomProfile but was profile=" + profile.getName());
             CustomModel queryCustomModel = requestHints.getObject(CustomModel.KEY, null);
             CustomProfile customProfile = (CustomProfile) profile;
+
             queryCustomModel = CustomModel.merge(customProfile.getCustomModel(), queryCustomModel);
             weighting = CustomModelParser.createWeighting(encoder, encodingManager, turnCostProvider, queryCustomModel);
         } else if ("shortest".equalsIgnoreCase(weightingStr)) {

File: core/src/main/java/com/graphhopper/routing/Router.java
Patch:
@@ -34,6 +34,7 @@
 import com.graphhopper.routing.weighting.BlockAreaWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.routing.weighting.custom.CustomProfile;
+import com.graphhopper.routing.weighting.custom.FindMinMax;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphEdgeIdFinder;
@@ -561,7 +562,7 @@ protected FlexiblePathCalculator createPathCalculator(QueryGraph queryGraph) {
                         "\navailable LM profiles: " + landmarks.keySet());
             if (profile instanceof CustomProfile && request.getCustomModel() != null
                     && !request.getHints().getBool("lm.disable", false))
-                request.getCustomModel().checkLMConstraints(((CustomProfile) profile).getCustomModel());
+                FindMinMax.checkLMConstraints(((CustomProfile) profile).getCustomModel(), request.getCustomModel(), lookup);
             RoutingAlgorithmFactory routingAlgorithmFactory = new LMRoutingAlgorithmFactory(landmarkStorage).setDefaultActiveLandmarks(routerConfig.getActiveLandmarkCount());
             return new FlexiblePathCalculator(queryGraph, routingAlgorithmFactory, weighting, getAlgoOpts());
         }

File: core/src/test/java/com/graphhopper/routing/PriorityRoutingTest.java
Patch:
@@ -92,7 +92,7 @@ void testMaxPriority() {
         {
             CustomModel customModel = new CustomModel();
             // now we even increase the priority in the custom model, which also needs to be accounted for in weighting.getMinWeight
-            customModel.addToPriority(Statement.If("road_class == MOTORWAY", Statement.Op.MULTIPLY, 3));
+            customModel.addToPriority(Statement.If("road_class == MOTORWAY", Statement.Op.MULTIPLY, "3"));
             CustomWeighting weighting = CustomModelParser.createWeighting(encoder, em, TurnCostProvider.NO_TURN_COST_PROVIDER, customModel);
             Path pathDijkstra = new Dijkstra(graph, weighting, TraversalMode.NODE_BASED).calcPath(0, 3);
             Path pathAStar = new AStar(graph, weighting, TraversalMode.NODE_BASED).calcPath(0, 3);

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -457,7 +457,7 @@ public void testInstructionWithHighlyCustomProfileWithRoadsBase() {
         GHUtility.setSpeed(10, true, true, roadsAccessEnc, roadsSpeedEnc, g.edge(2, 5).setDistance(10).set(rcEV, RoadClass.PEDESTRIAN));
 
         CustomModel customModel = new CustomModel();
-        customModel.addToPriority(Statement.If("road_class == PEDESTRIAN", Statement.Op.MULTIPLY, 0));
+        customModel.addToPriority(Statement.If("road_class == PEDESTRIAN", Statement.Op.MULTIPLY, "0"));
         Weighting weighting = CustomModelParser.createWeighting(roads, tmpEM, TurnCostProvider.NO_TURN_COST_PROVIDER, customModel);
         Path p = new Dijkstra(g, weighting, tMode).calcPath(3, 4);
         InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, tmpEM, usTR);

File: example/src/main/java/com/graphhopper/example/RoutingExample.java
Patch:
@@ -140,10 +140,10 @@ public static void customizableRouting(String ghLoc) {
         // 2. now avoid primary roads and reduce maximum speed, see docs/core/custom-models.md for an in-depth explanation
         // and also the blog posts https://www.graphhopper.com/?s=customizable+routing
         CustomModel model = new CustomModel();
-        model.addToPriority(If("road_class == PRIMARY", MULTIPLY, 0.5));
+        model.addToPriority(If("road_class == PRIMARY", MULTIPLY, "0.5"));
 
         // unconditional limit to 100km/h
-        model.addToPriority(If("true", LIMIT, 100));
+        model.addToPriority(If("true", LIMIT, "100"));
 
         req.setCustomModel(model);
         res = hopper.route(req);

File: web-api/src/main/java/com/graphhopper/jackson/StatementSerializer.java
Patch:
@@ -29,7 +29,7 @@ class StatementSerializer extends JsonSerializer<Statement> {
     public void serialize(Statement statement, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
         jsonGenerator.writeStartObject();
         jsonGenerator.writeStringField(statement.getKeyword().getName(), statement.getCondition());
-        jsonGenerator.writeNumberField(statement.getOperation().getName(), statement.getValue());
+        jsonGenerator.writeStringField(statement.getOperation().getName(), statement.getValue());
         jsonGenerator.writeEndObject();
     }
 }

File: web/src/test/java/com/graphhopper/application/resources/RouteResourceClientHCTest.java
Patch:
@@ -365,7 +365,7 @@ public void testCustomModel() {
                 addPoint(new GHPoint(42.532022, 1.519504)).
                 setCustomModel(new CustomModel()
                         // we reduce the speed in the long tunnel
-                        .addToSpeed(Statement.If("road_environment == TUNNEL", Statement.Op.MULTIPLY, 0.1))).
+                        .addToSpeed(Statement.If("road_environment == TUNNEL", Statement.Op.MULTIPLY, "0.1"))).
                 setProfile("my_custom_car").
                 putHint("ch.disable", true);
         GHResponse rsp = gh.route(req);

File: core/src/main/java/com/graphhopper/routing/ch/CHPreparationGraph.java
Patch:
@@ -906,7 +906,7 @@ OrigGraph build() {
             private int getKeyWithFlags(int key, boolean fwd, boolean bwd) {
                 // we use only 30 bits for the key and store two access flags along with the same int
                 if (key >= Integer.MAX_VALUE >> 1)
-                    throw new IllegalArgumentException("Maximum edge ID exceeded: " + Integer.MAX_VALUE);
+                    throw new IllegalArgumentException("Maximum edge key exceeded: " + key);
                 key <<= 1;
                 if (fwd)
                     key++;

File: core/src/main/java/com/graphhopper/routing/ch/CHPreparationGraph.java
Patch:
@@ -905,7 +905,7 @@ OrigGraph build() {
 
             private int getKeyWithFlags(int key, boolean fwd, boolean bwd) {
                 // we use only 30 bits for the key and store two access flags along with the same int
-                if (key >= Integer.MAX_VALUE >> 2)
+                if (key >= Integer.MAX_VALUE >> 1)
                     throw new IllegalArgumentException("Maximum edge ID exceeded: " + Integer.MAX_VALUE);
                 key <<= 1;
                 if (fwd)
@@ -983,7 +983,7 @@ public int getAdjNode() {
 
         @Override
         public int getOrigEdgeKeyFirst() {
-            return graph.keysAndFlags.get(index) >> 2;
+            return graph.keysAndFlags.get(index) >>> 2;
         }
 
         @Override

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -332,8 +332,8 @@ protected void addEdge(int fromIndex, int toIndex, PointList pointList, ReaderWa
         if (edgeFlags.isEmpty())
             return;
 
-        // the storage does not accept too long strings
-        String name = Helper.cutString(way.getTag("way_name", ""), 255);
+        // the storage does not allow too long Strings
+        String name = Helper.cutStringForKV(way.getTag("way_name", ""));
         EdgeIteratorState edge = baseGraph.edge(fromIndex, toIndex).setDistance(distance).setFlags(edgeFlags).setName(name);
 
         // If the entire way is just the first and last point, do not waste space storing an empty way geometry

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -463,6 +463,7 @@ public void testAlternativeRoutesCar() {
         GHRequest req = new GHRequest(50.023513, 11.548862, 49.969441, 11.537876).
                 setAlgorithm(ALT_ROUTE).setProfile(profile);
         req.putHint("alternative_route.max_paths", 3);
+        req.putHint("alternative_route.max_exploration_factor", 1.2);
         GHResponse rsp = hopper.route(req);
         assertFalse(rsp.hasErrors(), rsp.getErrors().toString());
 

File: tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
Patch:
@@ -45,7 +45,7 @@ public void setGraphics2D(Graphics2D g2) {
     @Override
     public void updateBestPath(double edgeWeight, SPTEntry entry, int origEdgeId, int traversalId, boolean reverse) {
         if (g2 != null) {
-            mg.plotNode(g2, traversalId, Color.YELLOW);
+            mg.plotNode(g2, entry.adjNode, Color.YELLOW);
         }
         super.updateBestPath(edgeWeight, entry, origEdgeId, traversalId, reverse);
     }

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
Patch:
@@ -67,7 +67,7 @@ public RoutingAlgorithm createAlgo(Graph g, Weighting w, AlgorithmOptions opts)
             altRouteAlgo.setMaxWeightFactor(opts.getHints().getDouble(MAX_WEIGHT, 1.4));
             altRouteAlgo.setMaxShareFactor(opts.getHints().getDouble(MAX_SHARE, 0.6));
             altRouteAlgo.setMinPlateauFactor(opts.getHints().getDouble("alternative_route.min_plateau_factor", 0.2));
-            altRouteAlgo.setMaxExplorationFactor(opts.getHints().getDouble("alternative_route.max_exploration_factor", 1));
+            altRouteAlgo.setMaxExplorationFactor(opts.getHints().getDouble("alternative_route.max_exploration_factor", 1.6));
             ra = altRouteAlgo;
 
         } else {

File: core/src/main/java/com/graphhopper/routing/lm/LMRoutingAlgorithmFactory.java
Patch:
@@ -69,9 +69,9 @@ public RoutingAlgorithm createAlgo(Graph g, Weighting w, AlgorithmOptions opts)
             algo.setMaxShareFactor(opts.getHints().getDouble(MAX_SHARE, 0.6));
             algo.setMinPlateauFactor(opts.getHints().getDouble("alternative_route.min_plateau_factor", 0.2));
             algo.setApproximation(getApproximator(g, activeLM, epsilon));
-            // landmark algorithm follows good compromise between fast response and exploring 'interesting' paths so we
-            // can decrease this exploration factor further (1->dijkstra, 0.8->bidir. A*)
-            algo.setMaxExplorationFactor(0.6);
+            // landmark algorithm follows good compromise between fast response and exploring 'interesting' paths, so we
+            // can decrease this exploration factor
+            algo.setMaxExplorationFactor(opts.getHints().getDouble("alternative_route.max_exploration_factor", 1.2));
             algo.setMaxVisitedNodes(opts.getMaxVisitedNodes());
             return algo;
         } else {

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java
Patch:
@@ -149,8 +149,7 @@ public void testCalcAlternatives2(Fixture f) {
         altDijkstra.setMaxShareFactor(0.7);
         altDijkstra.setMinPlateauFactor(0.15);
         altDijkstra.setMaxWeightFactor(2);
-        // edge based traversal requires a bit more exploration than the default of 1
-        altDijkstra.setMaxExplorationFactor(1.2);
+        altDijkstra.setMaxExplorationFactor(1.8);
 
         List<AlternativeRoute.AlternativeInfo> pathInfos = altDijkstra.calcAlternatives(5, 4);
         checkAlternatives(pathInfos);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -994,7 +994,7 @@ protected void postProcessing(boolean closeEarly) {
         if (closeEarly) {
             boolean includesCustomProfiles = profilesByName.values().stream().anyMatch(p -> p instanceof CustomProfile);
             if (!includesCustomProfiles)
-                // when there are custom profiles we must not close way geometry or StringIndex, because
+                // when there are custom profiles we must not close way geometry or EdgeKVStorage, because
                 // they might be needed to evaluate the custom weightings for the following preparations
                 ghStorage.flushAndCloseGeometryAndNameStorage();
         }

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -332,7 +332,8 @@ protected void addEdge(int fromIndex, int toIndex, PointList pointList, ReaderWa
         if (edgeFlags.isEmpty())
             return;
 
-        String name = way.getTag("way_name", "");
+        // the storage does not accept too long strings
+        String name = Helper.cutString(way.getTag("way_name", ""), 255);
         EdgeIteratorState edge = baseGraph.edge(fromIndex, toIndex).setDistance(distance).setFlags(edgeFlags).setName(name);
 
         // If the entire way is just the first and last point, do not waste space storing an empty way geometry

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -169,7 +169,7 @@ private String getVersionsString() {
                 ",edges:" + Constants.VERSION_EDGE +
                 ",geometry:" + Constants.VERSION_GEOMETRY +
                 ",location_index:" + Constants.VERSION_LOCATION_IDX +
-                ",string_index:" + Constants.VERSION_STRING_IDX +
+                ",string_index:" + Constants.VERSION_EDGEKV_STORAGE +
                 ",nodesCH:" + Constants.VERSION_NODE_CH +
                 ",shortcuts:" + Constants.VERSION_SHORTCUT;
     }
@@ -249,7 +249,7 @@ public boolean isAdjacentToNode(int edge, int node) {
     }
 
     /**
-     * Flush and free base graph resources like way geometries and StringIndex
+     * Flush and free base graph resources like way geometries and EdgeKVStorage
      */
     public void flushAndCloseGeometryAndNameStorage() {
         baseGraph.flushAndCloseGeometryAndNameStorage();

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -72,7 +72,7 @@ public class Constants {
     public static final int VERSION_NODE_CH = 0;
     public static final int VERSION_GEOMETRY = 6;
     public static final int VERSION_LOCATION_IDX = 5;
-    public static final int VERSION_STRING_IDX = 6;
+    public static final int VERSION_EDGEKV_STORAGE = 1;
     /**
      * The version without the snapshot string
      */
@@ -145,7 +145,7 @@ public class Constants {
 
     public static String getVersions() {
         return VERSION_NODE + "," + VERSION_EDGE + "," + VERSION_GEOMETRY + "," + VERSION_LOCATION_IDX
-                + "," + VERSION_STRING_IDX + "," + VERSION_SHORTCUT;
+                + "," + VERSION_EDGEKV_STORAGE + "," + VERSION_SHORTCUT;
     }
 
     public static String getMajorVersion() {

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -645,7 +645,7 @@ public void testGetAllEdges() {
     }
 
     @Test
-    public void testStringIndex() {
+    public void testEdgeKVStorage() {
         graph = createGHStorage();
         EdgeIteratorState iter1 = graph.edge(0, 1).setDistance(10).set(carAccessEnc, true, true);
         iter1.setName("named street1");

File: core/src/main/java/com/graphhopper/routing/SPTEntry.java
Patch:
@@ -30,6 +30,7 @@ public class SPTEntry implements Comparable<SPTEntry> {
     public int adjNode;
     public double weight;
     public SPTEntry parent;
+    public boolean deleted;
 
     public SPTEntry(int node, double weight) {
         this(EdgeIterator.NO_EDGE, node, weight, null);
@@ -43,11 +44,11 @@ public SPTEntry(int edgeId, int adjNode, double weight, SPTEntry parent) {
     }
 
     public void setDeleted() {
-        adjNode = Integer.MIN_VALUE;
+        deleted = true;
     }
 
     public boolean isDeleted() {
-        return adjNode == Integer.MIN_VALUE;
+        return deleted;
     }
 
     /**

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -400,8 +400,6 @@ protected void initCollections(int size) {
             };
             int activeLM = Math.min(8, landmarks.getLandmarkCount());
             LMApproximator lmApproximator = LMApproximator.forLandmarks(queryGraph, landmarks, activeLM);
-            // todo: we use 0.9, because of some LM bug we do not understand yet
-            lmApproximator.setEpsilon(0.9);
             algo.setApproximation(lmApproximator);
             algo.setMaxVisitedNodes(maxVisitedNodes);
             router = algo;

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeTagParser.java
Patch:
@@ -45,6 +45,8 @@ public RacingBikeTagParser(EncodedValueLookup lookup, PMap properties) {
                 lookup.getBooleanEncodedValue(Roundabout.KEY),
                 lookup.hasEncodedValue(TurnCost.key("racingbike")) ? lookup.getDecimalEncodedValue(TurnCost.key("racingbike")) : null
         );
+        blockPrivate(properties.getBool("block_private", true));
+        blockFords(properties.getBool("block_fords", false));
     }
 
     protected RacingBikeTagParser(BooleanEncodedValue accessEnc, DecimalEncodedValue speedEnc, DecimalEncodedValue priorityEnc,

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightTagParserTest.java
Patch:
@@ -42,8 +42,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup) {
-        Bike2WeightTagParser parser = new Bike2WeightTagParser(lookup, new PMap("block_fords=true"));
+    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup, PMap pMap) {
+        Bike2WeightTagParser parser = new Bike2WeightTagParser(lookup, pMap);
         parser.init(new DateRangeParser());
         return parser;
     }

File: core/src/test/java/com/graphhopper/routing/util/BikeTagParserTest.java
Patch:
@@ -47,8 +47,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup) {
-        BikeTagParser parser = new BikeTagParser(lookup, new PMap("block_fords=true"));
+    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup, PMap pMap) {
+        BikeTagParser parser = new BikeTagParser(lookup, pMap);
         parser.init(new DateRangeParser());
         return parser;
     }

File: core/src/test/java/com/graphhopper/routing/util/MountainBikeTagParserTest.java
Patch:
@@ -41,8 +41,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup) {
-        MountainBikeTagParser parser = new MountainBikeTagParser(lookup, new PMap("block_fords=true"));
+    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup, PMap pMap) {
+        MountainBikeTagParser parser = new MountainBikeTagParser(lookup, pMap);
         parser.init(new DateRangeParser());
         return parser;
     }

File: core/src/test/java/com/graphhopper/routing/util/RacingBikeTagParserTest.java
Patch:
@@ -44,8 +44,8 @@ protected EncodingManager createEncodingManager() {
     }
 
     @Override
-    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup) {
-        RacingBikeTagParser parser = new RacingBikeTagParser(lookup, new PMap("block_fords=true"));
+    protected BikeCommonTagParser createBikeTagParser(EncodedValueLookup lookup, PMap pMap) {
+        RacingBikeTagParser parser = new RacingBikeTagParser(lookup, pMap);
         parser.init(new DateRangeParser());
         return parser;
     }

File: client-hc/src/main/java/com/graphhopper/api/GraphHopperMatrixWeb.java
Patch:
@@ -38,9 +38,6 @@ public GraphHopperMatrixWeb setKey(String key) {
     public MatrixResponse route(GHMRequest request) {
         if (!Helper.isEmpty(key))
             request.getHints().putObject(KEY, key);
-        if (!request.getPathDetails().isEmpty())
-            throw new IllegalArgumentException("Path details are not supported for the Matrix API");
-        request.compactPointHints();
         return requester.route(request);
     }
 }

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomModelParserTest.java
Patch:
@@ -114,7 +114,7 @@ public void testBrackets() {
                 set(roadClassEnc, SECONDARY).set(avgSpeedEnc, 40);
 
         CustomModel customModel = new CustomModel();
-        customModel.addToPriority(If("(road_class == PRIMARY || car$access == true) && car$average_speed > 50", MULTIPLY, 0.9));
+        customModel.addToPriority(If("(road_class == PRIMARY || car_access == true) && car_average_speed > 50", MULTIPLY, 0.9));
         CustomWeighting.Parameters parameters = CustomModelParser.createWeightingParameters(customModel, encodingManager,
                 avgSpeedEnc, encoder.getMaxSpeed(), null);
         assertEquals(0.9, parameters.getEdgeToPriorityMapping().get(primary, false), 0.01);

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomWeightingTest.java
Patch:
@@ -202,7 +202,7 @@ public void testCarAccess() {
         EdgeIteratorState edge50 = graph.edge(1, 2).setDistance(10).set(avSpeedEnc, 50).set(accessEnc, true, true);
 
         CustomModel vehicleModel = new CustomModel();
-        vehicleModel.addToPriority(If("car$average_speed > 40", MULTIPLY, 0.5));
+        vehicleModel.addToPriority(If("car_average_speed > 40", MULTIPLY, 0.5));
 
         assertEquals(1.60, createWeighting(vehicleModel).calcEdgeWeight(edge40, false), 0.01);
         assertEquals(2.14, createWeighting(vehicleModel).calcEdgeWeight(edge50, false), 0.01);

File: web/src/test/java/com/graphhopper/application/resources/IsochroneResourceTest.java
Patch:
@@ -274,6 +274,7 @@ public void requestNotANumber() {
         Response response = clientTarget(app, "/isochrone?profile=fast_car&point=42.531073,1.573792&time_limit=wurst")
                 .request().buildGet().invoke();
 
+        assertEquals(400, response.getStatus());
         JsonNode json = response.readEntity(JsonNode.class);
         String message = json.path("message").asText();
 

File: core/src/main/java/com/graphhopper/routing/AbstractBidirCHAlgo.java
Patch:
@@ -200,7 +200,7 @@ private void fillEdges(SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,
                 entry = createEntry(iter.getEdge(), iter.getAdjNode(), origEdgeId, weight, currEdge, reverse);
                 bestWeightMap.put(traversalId, entry);
                 prioQueue.add(entry);
-                // if this is the best entry we need to update the best reference as well. somehow this is only needed for CH?
+                // if this is the best entry we need to update the best reference as well
                 if (isBestEntry)
                     if (reverse)
                         bestBwdEntry = entry;

File: core/src/main/java/com/graphhopper/reader/dem/SRTMGL1Provider.java
Patch:
@@ -31,7 +31,7 @@
  * <p>
  * When using this data we have to acknowledge:
  * This material is based on data services provided by the OpenTopography Facility with support from the
- * National Science Foundation under NSF Award Numbers 1226353 & 1225810
+ * National Science Foundation under NSF Award Numbers 1226353 &amp; 1225810
  * National Geospatial-Intelligence Agency (NGA) and the National Aeronautics and Space Administration (NASA), 2013,
  * SRTMGL1: NASA Shuttle Radar Topography Mission Global 1 arc second V003. [Version]. NASA EOSDIS Land Processes DAAC,
  * USGS Earth Resources Observation and Science (EROS) Center, Sioux Falls, South Dakota (https://lpdaac.usgs.gov),

File: core/src/main/java/com/graphhopper/routing/ch/CHEntry.java
Patch:
@@ -26,7 +26,7 @@ public class CHEntry extends SPTEntry {
      * The id of the incoming original edge at this shortest path tree entry. For original edges this is the same
      * as the edge id, but for shortcuts this is the id of the last original edge of the shortcut.
      *
-     * @see EdgeIteratorState#getOrigEdgeLast()
+     * @see com.graphhopper.storage.RoutingCHEdgeIteratorState#getOrigEdgeLast()
      */
     public int incEdge;
 

File: core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
Patch:
@@ -224,7 +224,7 @@ boolean isInitialized() {
     }
 
     /**
-     * This method calculates the landmarks and initial weightings to & from them.
+     * This method calculates the landmarks and initial weightings to &amp; from them.
      */
     public void createLandmarks() {
         if (isInitialized())

File: core/src/main/java/com/graphhopper/routing/querygraph/QueryGraph.java
Patch:
@@ -41,7 +41,7 @@
  * introducing virtual nodes and edges. It is lightweight in order to be created every time a new
  * query comes in, which makes the behaviour thread safe.
  * <p>
- * Calling any <tt>create</tt> method creates virtual edges between the tower nodes of the existing
+ * Calling any <code>create</code> method creates virtual edges between the tower nodes of the existing
  * graph and new virtual tower nodes. Every virtual node has two adjacent nodes and is connected
  * to each adjacent nodes via 2 virtual edges with opposite base node / adjacent node encoding.
  * However, the edge explorer returned by {@link #createEdgeExplorer()} only returns two

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMtbRatingParser.java
Patch:
@@ -26,7 +26,7 @@
  * A mapping mtb:scale=0 corresponds to 1 and mtb:scale=1 to 2 until 7.
  *
  * @see <a href="https://wiki.openstreetmap.org/wiki/Key:mtb:scale">Key:mtb:scale</a> for details on OSM mountain biking difficulties.
- * @see <a href=""http://www.singletrail-skala.de/>Single Trail Scale</a>
+ * @see <a href="http://www.singletrail-skala.de/">Single Trail Scale</a>
  */
 public class OSMMtbRatingParser implements TagParser {
     private final IntEncodedValue mtbRatingEnc;

File: core/src/main/java/com/graphhopper/routing/weighting/BalancedWeightApproximator.java
Patch:
@@ -33,7 +33,7 @@
  * Mitoh, K. (1994). A fast algorithm for finding better routes by ai search techniques. In VNIS,
  * pages 291–296.
  *
- * [2] Pijls, W.H.L.M, & Post, H. (2008). A new bidirectional algorithm for shortest paths (No. EI 2008-25).
+ * [2] Pijls, W.H.L.M, &amp; Post, H. (2008). A new bidirectional algorithm for shortest paths (No. EI 2008-25).
  * Report / Econometric Institute, Erasmus University Rotterdam
  *
  * @author jansoe

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -39,7 +39,7 @@
  * Note: A RAM DataAccess Object is thread-safe in itself but if used in this Graph implementation
  * it is not write thread safe.
  * <p>
- * Life cycle: (1) object creation, (2) configuration via setters & getters, (3) create or
+ * Life cycle: (1) object creation, (2) configuration via setters &amp; getters, (3) create or
  * loadExisting, (4) usage, (5) flush, (6) close
  */
 public class BaseGraph implements Graph, Closeable {

File: core/src/main/java/com/graphhopper/storage/CHStorageBuilder.java
Patch:
@@ -63,8 +63,8 @@ public int addShortcutNodeBased(int a, int b, int accessFlags, double weight, in
 
     /**
      * @param origFirst The first original edge that is skipped by this shortcut. For example for the following shortcut
-     *                  edge from x to y, which itself skips the shortcuts x->v and v->y the first original edge would
-     *                  be x->u: x->u->v->w->y
+     *                  edge from x to y, which itself skips the shortcuts x->v and v->y the
+     *                  first original edge would be x->u: x->u->v->w->y
      * @param origLast  like origFirst, but the last orig edge, i.e w->y in above example
      */
     public int addShortcutEdgeBased(int a, int b, int accessFlags, double weight, int skippedEdge1, int skippedEdge2,

File: core/src/main/java/com/graphhopper/storage/RoutingCHGraph.java
Patch:
@@ -35,7 +35,7 @@ public interface RoutingCHGraph {
     RoutingCHEdgeExplorer createInEdgeExplorer();
 
     /**
-     * @see #createInEdgeExplorer(), but here the shortcuts/edges are going out of the given node.
+     * @see #createInEdgeExplorer() but here the shortcuts/edges are going out of the given node.
      */
     RoutingCHEdgeExplorer createOutEdgeExplorer();
 

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -30,12 +30,12 @@
  */
 public class Constants {
     /**
-     * The value of <tt>System.getProperty("java.version")</tt>. *
+     * The value of <code>System.getProperty("java.version")</code>. *
      */
     public static final String JAVA_VERSION = System.getProperty("java.version");
 
     /**
-     * The value of <tt>System.getProperty("os.name")</tt>. *
+     * The value of <code>System.getProperty("os.name")</code>. *
      */
     public static final String OS_NAME = System.getProperty("os.name");
     /**

File: core/src/main/java/com/graphhopper/util/DouglasPeucker.java
Patch:
@@ -88,7 +88,7 @@ public int simplify(PointList points, int fromIndex, int lastIndex) {
      * @param points    The PointList to simplify
      * @param fromIndex Start index to simplify, should be <= <code>lastIndex</code>
      * @param lastIndex Simplify up to this index
-     * @param compress  Whether or not the <code>points</code> shall be compressed or not, if set to false no points
+     * @param compress  Whether the <code>points</code> shall be compressed or not, if set to false no points
      *                  are actually removed, but instead their lat/lon/ele is only set to NaN
      * @return The number of removed points
      */

File: core/src/main/java/com/graphhopper/routing/DefaultWeightingFactory.java
Patch:
@@ -75,9 +75,6 @@ public Weighting createWeighting(Profile profile, PMap requestHints, boolean dis
                 throw new IllegalArgumentException("custom weighting requires a CustomProfile but was profile=" + profile.getName());
             CustomModel queryCustomModel = requestHints.getObject(CustomModel.KEY, null);
             CustomProfile customProfile = (CustomProfile) profile;
-            if (queryCustomModel != null)
-                queryCustomModel.checkLMConstraints(customProfile.getCustomModel());
-
             queryCustomModel = CustomModel.merge(customProfile.getCustomModel(), queryCustomModel);
             weighting = CustomModelParser.createWeighting(encoder, encodingManager, turnCostProvider, queryCustomModel);
         } else if ("shortest".equalsIgnoreCase(weightingStr)) {

File: core/src/main/java/com/graphhopper/routing/Router.java
Patch:
@@ -561,6 +561,9 @@ protected FlexiblePathCalculator createPathCalculator(QueryGraph queryGraph) {
                 throw new IllegalArgumentException("Cannot find LM preparation for the requested profile: '" + profile.getName() + "'" +
                         "\nYou can try disabling LM using " + Parameters.Landmark.DISABLE + "=true" +
                         "\navailable LM profiles: " + landmarks.keySet());
+            if (profile instanceof CustomProfile && request.getCustomModel() != null
+                    && !request.getHints().getBool("lm.disable", false))
+                request.getCustomModel().checkLMConstraints(((CustomProfile) profile).getCustomModel());
             RoutingAlgorithmFactory routingAlgorithmFactory = new LMRoutingAlgorithmFactory(landmarkStorage).setDefaultActiveLandmarks(routerConfig.getActiveLandmarkCount());
             return new FlexiblePathCalculator(queryGraph, routingAlgorithmFactory, weighting, getAlgoOpts());
         }

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GtfsReader.java
Patch:
@@ -210,6 +210,7 @@ private void insertInboundTransfers(GtfsStorage.PlatformDescriptor toPlatformDes
                     }
                 }
             } else {
+                Stop stop = gtfsStorage.getGtfsFeeds().get(stopId.feedId).stops.get(stopId.stopId);
                 LOGGER.warn("Stop {} has no station node", stopId);
             }
         });

File: reader-gtfs/src/main/java/com/conveyal/gtfs/GTFSFeed.java
Patch:
@@ -155,7 +155,7 @@ else if (feedId == null || feedId.isEmpty()) {
         new Transfer.Loader(this).loadTable(zip);
         new Trip.Loader(this).loadTable(zip);
         new Frequency.Loader(this).loadTable(zip);
-        new StopTime.Loader(this).loadTable(zip); // comment out this line for quick testing using NL feed
+        new StopTime.Loader(this).loadTable(zip);
         loaded = true;
     }
 

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/ReferentialIntegrityError.java
Patch:
@@ -50,7 +50,7 @@ public int compareTo (GTFSError o) {
     }
 
     @Override public String getMessage() {
-        return String.format(Locale.getDefault(), badReference);
+        return String.format("Invalid reference %s", badReference);
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/model/Entity.java
Patch:
@@ -230,6 +230,9 @@ protected <K, V> V getRefField(String column, boolean required, Map<K, V> target
             V val = null;
             if (str != null) {
                 val = target.get(str);
+                if (val == null) {
+                    feed.errors.add(new ReferentialIntegrityError(tableName, row, column, str));
+                }
             }
             return val;
         }

File: core/src/test/java/com/graphhopper/routing/util/BikeTagParserTest.java
Patch:
@@ -571,7 +571,7 @@ public void testMaxSpeed() {
         assertPriorityAndSpeed(PREFER.getValue(), 16, way);
     }
 
-    // Issue 407 : Always block kissing_gate execpt for mountainbikes
+    // Issue 407 : Always block kissing_gate except for mountainbikes
     @Test
     @Override
     public void testBarrierAccess() {

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -48,7 +48,7 @@ public abstract class AbstractGraphStorageTester {
     protected EncodingManager encodingManager = new EncodingManager.Builder().add(carEncoder).add(FlagEncoders.createFoot()).build();
     protected BooleanEncodedValue carAccessEnc = carEncoder.getAccessEnc();
     protected DecimalEncodedValue carAvSpeedEnc = carEncoder.getAverageSpeedEnc();
-    protected FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
+    protected FlagEncoder footEncoder = encodingManager.getEncoder("foot");
     protected BooleanEncodedValue footAccessEnc = footEncoder.getAccessEnc();
     protected BaseGraph graph;
     EdgeFilter carOutFilter = AccessFilter.outEdges(carEncoder.getAccessEnc());

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -608,7 +608,7 @@ public void testDifferentVehicles() {
         }
 
         idx = (LocationIndexTree) createIndexNoPrepare(g, 500000).prepareIndex();
-        FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
+        FlagEncoder footEncoder = encodingManager.getEncoder("foot");
         assertEquals(2, idx.findClosest(1, -1, AccessFilter.allEdges(footEncoder.getAccessEnc())).getClosestNode());
         g.close();
     }

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -2477,7 +2477,7 @@ void averageSpeedPathDetailBug() {
 
     @Test
     public void testLoadGraph_implicitEncodedValues_issue1862() {
-        CarFlagEncoder carEncoder = FlagEncoders.createCar();
+        FlagEncoder carEncoder = FlagEncoders.createCar();
         EncodingManager encodingManager = new EncodingManager.Builder().add(carEncoder).add(FlagEncoders.createBike()).build();
         GraphHopperStorage graph = new GraphBuilder(encodingManager).setDir(new RAMDirectory(GH_LOCATION, true)).create();
         NodeAccess na = graph.getNodeAccess();

File: core/src/test/java/com/graphhopper/reader/dem/EdgeElevationInterpolatorTest.java
Patch:
@@ -21,8 +21,8 @@
 import com.graphhopper.coll.GHIntHashSet;
 import com.graphhopper.routing.ev.EnumEncodedValue;
 import com.graphhopper.routing.ev.RoadEnvironment;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.IntsRef;
@@ -41,7 +41,7 @@ public abstract class EdgeElevationInterpolatorTest {
 
     protected BaseGraph graph;
     protected EnumEncodedValue<RoadEnvironment> roadEnvEnc;
-    protected CarFlagEncoder encoder;
+    protected FlagEncoder encoder;
     protected EncodingManager encodingManager;
     protected EdgeElevationInterpolator edgeElevationInterpolator;
 

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java
Patch:
@@ -19,8 +19,8 @@
 
 import com.graphhopper.routing.ch.NodeOrderingProvider;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.storage.BaseGraph;
@@ -36,7 +36,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class AlternativeRouteCHTest {
-    private final CarFlagEncoder carFE = FlagEncoders.createCar();
+    private final FlagEncoder carFE = FlagEncoders.createCar();
     private final EncodingManager em = EncodingManager.create(carFE);
 
     public BaseGraph createTestGraph(EncodingManager tmpEM) {

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteEdgeCHTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.TurnCost;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
@@ -41,7 +40,7 @@
 import static org.junit.jupiter.api.Assertions.assertTrue;
 
 public class AlternativeRouteEdgeCHTest {
-    private final CarFlagEncoder carFE = FlagEncoders.createCar(new PMap().putObject("turn_costs", true));
+    private final FlagEncoder carFE = FlagEncoders.createCar(new PMap().putObject("turn_costs", true));
     private final EncodingManager em = EncodingManager.create(carFE);
 
     public BaseGraph createTestGraph(EncodingManager tmpEM) {

File: core/src/test/java/com/graphhopper/routing/CHQueryWithTurnCostsTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.graphhopper.routing.ch.PrepareEncoder;
 import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.routing.ev.TurnCost;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
 import com.graphhopper.routing.weighting.ShortestWeighting;
@@ -53,7 +53,7 @@ public class CHQueryWithTurnCostsTest {
 
     private static class Fixture {
         private final int maxCost = 10;
-        private final CarFlagEncoder encoder = FlagEncoders.createCar(5, 5, maxCost, true);
+        private final FlagEncoder encoder = FlagEncoders.createCar(5, 5, maxCost, true);
         private final EncodingManager encodingManager = EncodingManager.create(encoder);
         private final BaseGraph graph;
         private final CHConfig chConfig;

File: core/src/test/java/com/graphhopper/routing/DefaultBidirPathExtractorTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.carrotsearch.hppc.IntArrayList;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.TurnCost;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
 import com.graphhopper.routing.weighting.FastestWeighting;
@@ -39,7 +39,7 @@
  * @author easbar
  */
 public class DefaultBidirPathExtractorTest {
-    private final CarFlagEncoder carEncoder = FlagEncoders.createCar(5, 5, 10);
+    private final FlagEncoder carEncoder = FlagEncoders.createCar(5, 5, 10);
     private final EncodingManager encodingManager = EncodingManager.create(carEncoder);
 
     BaseGraph createGraph() {

File: core/src/test/java/com/graphhopper/routing/DirectedBidirectionalDijkstraTest.java
Patch:
@@ -40,7 +40,7 @@ public class DirectedBidirectionalDijkstraTest {
     private TurnCostStorage turnCostStorage;
     private int maxTurnCosts;
     private BaseGraph graph;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private EncodingManager encodingManager;
     private Weighting weighting;
     private DecimalEncodedValue turnCostEnc;

File: core/src/test/java/com/graphhopper/routing/DirectedRoutingTest.java
Patch:
@@ -79,7 +79,7 @@ private static class Fixture {
         private final BaseGraph graph;
         private final CHConfig chConfig;
         private final LMConfig lmConfig;
-        private final CarFlagEncoder encoder;
+        private final FlagEncoder encoder;
         private final TurnCostStorage turnCostStorage;
         private final int maxTurnCosts;
         private final Weighting weighting;

File: core/src/test/java/com/graphhopper/routing/DirectionResolverOnQueryGraphTest.java
Patch:
@@ -48,7 +48,7 @@
 public class DirectionResolverOnQueryGraphTest {
     private QueryGraph queryGraph;
     private NodeAccess na;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private BaseGraph graph;
     private LocationIndexTree locationIndex;
 

File: core/src/test/java/com/graphhopper/routing/DirectionResolverTest.java
Patch:
@@ -20,8 +20,8 @@
 import com.graphhopper.routing.ev.BooleanEncodedValue;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.util.AccessFilter;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.NodeAccess;
@@ -43,7 +43,7 @@
  * @see DirectionResolverOnQueryGraphTest for tests that include direction resolving for virtual nodes and edges
  */
 public class DirectionResolverTest {
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private BaseGraph graph;
     private NodeAccess na;
 

File: core/src/test/java/com/graphhopper/routing/PriorityRoutingTest.java
Patch:
@@ -43,7 +43,7 @@ public class PriorityRoutingTest {
 
     @Test
     void testMaxPriority() {
-        BikeFlagEncoder encoder = FlagEncoders.createBike();
+        FlagEncoder encoder = FlagEncoders.createBike();
         EncodingManager em = EncodingManager.create(encoder);
         BaseGraph graph = new BaseGraph.Builder(em).create();
         NodeAccess na = graph.getNodeAccess();

File: core/src/test/java/com/graphhopper/routing/QueryRoutingCHGraphTest.java
Patch:
@@ -23,8 +23,8 @@
 import com.graphhopper.routing.ev.TurnCost;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.querygraph.QueryRoutingCHGraph;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
 import com.graphhopper.routing.weighting.FastestWeighting;
@@ -43,7 +43,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 class QueryRoutingCHGraphTest {
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private EncodingManager encodingManager;
     private FastestWeighting weighting;
     private BaseGraph graph;

File: core/src/test/java/com/graphhopper/routing/RandomCHRoutingTest.java
Patch:
@@ -44,7 +44,7 @@ private static final class Fixture {
         private final int maxTurnCosts;
         private final int uTurnCosts;
         private final Directory dir;
-        private final CarFlagEncoder encoder;
+        private final FlagEncoder encoder;
         private final EncodingManager encodingManager;
         private Weighting weighting;
         private BaseGraph graph;

File: core/src/test/java/com/graphhopper/routing/RandomizedRoutingTest.java
Patch:
@@ -99,7 +99,7 @@ private static class Fixture {
         private final BaseGraph graph;
         private final List<CHConfig> chConfigs;
         private final LMConfig lmConfig;
-        private final CarFlagEncoder encoder;
+        private final FlagEncoder encoder;
         private final TurnCostStorage turnCostStorage;
         private final int maxTurnCosts;
         private final Weighting weighting;

File: core/src/test/java/com/graphhopper/routing/RoundTripRoutingTest.java
Patch:
@@ -46,7 +46,7 @@
  * @author Peter Karich
  */
 public class RoundTripRoutingTest {
-    private final CarFlagEncoder carFE = FlagEncoders.createCar();
+    private final FlagEncoder carFE = FlagEncoders.createCar();
     private final EncodingManager em = EncodingManager.create(carFE);
     private final Weighting fastestWeighting = new FastestWeighting(carFE);
     // TODO private final TraversalMode tMode = TraversalMode.EDGE_BASED;

File: core/src/test/java/com/graphhopper/routing/ch/CHTurnCostTest.java
Patch:
@@ -68,7 +68,7 @@
 public class CHTurnCostTest {
     private static final Logger LOGGER = LoggerFactory.getLogger(CHTurnCostTest.class);
     private int maxCost;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private EncodingManager encodingManager;
     private BaseGraph graph;
     private TurnCostStorage turnCostStorage;

File: core/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.routing.ev.TurnCost;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
 import com.graphhopper.routing.weighting.ShortestWeighting;
@@ -48,7 +48,7 @@
  */
 public class EdgeBasedNodeContractorTest {
     private final int maxCost = 10;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private BaseGraph graph;
     private Weighting weighting;
     private CHStorage chStore;

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -40,7 +40,7 @@
 import static org.junit.jupiter.api.Assertions.*;
 
 public class NodeBasedNodeContractorTest {
-    private final CarFlagEncoder encoder = FlagEncoders.createCar();
+    private final FlagEncoder encoder = FlagEncoders.createCar();
     private final EncodingManager encodingManager = EncodingManager.create(encoder);
     private final Weighting weighting = new ShortestWeighting(encoder);
     private final BaseGraph graph = new BaseGraph.Builder(encodingManager).create();
@@ -262,7 +262,7 @@ public void testNodeContraction_shortcutDistanceRounding() {
      */
     @Test
     public void testNodeContraction_shortcutWeightRounding() {
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         EncodingManager encodingManager = EncodingManager.create(encoder);
         BaseGraph graph = new BaseGraph.Builder(encodingManager).create();
         // 0 ------------> 4
@@ -301,7 +301,7 @@ public void testNodeContraction_shortcutWeightRounding() {
     public void testNodeContraction_preventUnnecessaryShortcutWithLoop() {
         // there should not be shortcuts where one of the skipped edges is a loop at the node to be contracted,
         // see also #1583
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         EncodingManager encodingManager = EncodingManager.create(encoder);
         BaseGraph graph = new BaseGraph.Builder(encodingManager).create();
         // 0 - 1 - 2 - 3

File: core/src/test/java/com/graphhopper/routing/ev/DecimalEncodedValueTest.java
Patch:
@@ -3,7 +3,6 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.storage.IntsRef;
 import org.junit.jupiter.api.Test;
 
@@ -23,7 +22,7 @@ public void testInit() {
 
     @Test
     public void testMaxValue() {
-        CarFlagEncoder carEncoder = FlagEncoders.createCar(10, 0.5, 0);
+        CarFlagEncoder carEncoder = new CarFlagEncoder(10, 0.5, 0);
         EncodingManager em = EncodingManager.create(carEncoder);
         DecimalEncodedValue carAverageSpeedEnc = em.getDecimalEncodedValue(EncodingManager.getKey(carEncoder, "average_speed"));
 

File: core/src/test/java/com/graphhopper/routing/lm/LMApproximatorTest.java
Patch:
@@ -44,7 +44,7 @@ public void randomGraph() {
 
     private void run(long seed) {
         Directory dir = new RAMDirectory();
-        CarFlagEncoder encoder = FlagEncoders.createCar(5, 5, 1);
+        FlagEncoder encoder = FlagEncoders.createCar(5, 5, 1);
         EncodingManager encodingManager = new EncodingManager.Builder().add(encoder).add(Subnetwork.create("car")).build();
         BaseGraph graph = new BaseGraph.Builder(encodingManager).setDir(dir).withTurnCosts(true).create();
 

File: core/src/test/java/com/graphhopper/routing/lm/LMIssueTest.java
Patch:
@@ -21,8 +21,8 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.Subnetwork;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
@@ -43,7 +43,7 @@
 public class LMIssueTest {
     private Directory dir;
     private BaseGraph graph;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private Weighting weighting;
     private LandmarkStorage lm;
     private EncodingManager encodingManager;

File: core/src/test/java/com/graphhopper/routing/lm/LMPreparationHandlerTest.java
Patch:
@@ -3,8 +3,8 @@
 import com.graphhopper.GraphHopperConfig;
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.ShortestWeighting;
@@ -35,7 +35,7 @@ public void maximumLMWeight() {
                 new LMProfile("conf1").setMaximumLMWeight(65_000),
                 new LMProfile("conf2").setMaximumLMWeight(20_000)
         );
-        CarFlagEncoder car = FlagEncoders.createCar();
+        FlagEncoder car = FlagEncoders.createCar();
         EncodingManager em = EncodingManager.create(car);
         List<LMConfig> lmConfigs = Arrays.asList(
                 new LMConfig("conf1", new FastestWeighting(car)),

File: core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java
Patch:
@@ -22,8 +22,8 @@
 import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.subnetwork.PrepareRoutingSubnetworks;
 import com.graphhopper.routing.util.AreaIndex;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
@@ -48,7 +48,7 @@
  */
 public class LandmarkStorageTest {
     private BaseGraph graph;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private BooleanEncodedValue subnetworkEnc;
     private EncodingManager encodingManager;
 

File: core/src/test/java/com/graphhopper/routing/lm/PrepareLandmarksTest.java
Patch:
@@ -57,7 +57,7 @@
  */
 public class PrepareLandmarksTest {
     private BaseGraph graph;
-    private CarFlagEncoder encoder;
+    private FlagEncoder encoder;
     private TraversalMode tm;
     private EncodingManager encodingManager;
 

File: core/src/test/java/com/graphhopper/routing/util/AccessFilterTest.java
Patch:
@@ -29,7 +29,7 @@
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class AccessFilterTest {
-    private final CarFlagEncoder encoder = FlagEncoders.createCar();
+    private final FlagEncoder encoder = FlagEncoders.createCar();
     private final EncodingManager encodingManager = EncodingManager.create(encoder);
     private final BaseGraph graph = new BaseGraph.Builder(encodingManager)
             .withTurnCosts(true)

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightTagParserTest.java
Patch:
@@ -34,8 +34,8 @@
 public class Bike2WeightTagParserTest extends BikeTagParserTest {
 
     @Override
-    protected BikeCommonFlagEncoder createBikeTagParser() {
-        return FlagEncoders.createBike2(new PMap("block_fords=true"));
+    protected BikeFlagEncoder createBikeTagParser() {
+        return new Bike2WeightFlagEncoder(new PMap("block_fords=true"));
     }
 
     private Graph initExampleGraph() {

File: core/src/test/java/com/graphhopper/routing/util/BikeTagParserTest.java
Patch:
@@ -35,8 +35,8 @@
 public class BikeTagParserTest extends AbstractBikeTagParserTester {
 
     @Override
-    protected BikeCommonFlagEncoder createBikeTagParser() {
-        return FlagEncoders.createBike(new PMap("block_fords=true"));
+    protected BikeFlagEncoder createBikeTagParser() {
+        return new BikeFlagEncoder(new PMap("block_fords=true"));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/Car4WDTagParserTest.java
Patch:
@@ -35,7 +35,7 @@ public class Car4WDTagParserTest extends CarTagParserTest {
 
     @Override
     CarFlagEncoder createParser() {
-        return FlagEncoders.createCar4wd(new PMap("speed_two_directions=true|block_fords=true"));
+        return new Car4WDFlagEncoder(new PMap("speed_two_directions=true|block_fords=true"));
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -43,7 +43,7 @@ public void testEncoderAcceptNoException() {
     @Test
     public void testWrongEncoders() {
         try {
-            FootFlagEncoder foot = FlagEncoders.createFoot();
+            FlagEncoder foot = FlagEncoders.createFoot();
             EncodingManager.create(foot, foot);
             fail("There should have been an exception");
         } catch (Exception ex) {

File: core/src/test/java/com/graphhopper/routing/util/FootTagParserTest.java
Patch:
@@ -405,7 +405,7 @@ public void testFord() {
         node.setTag("foot", "no");
         assertTrue(footEncoder.isBarrier(node));
 
-        FootFlagEncoder tmpEncoder = FlagEncoders.createFoot(new PMap("block_fords=true"));
+        FootFlagEncoder tmpEncoder = new FootFlagEncoder(new PMap("block_fords=true"));
         EncodingManager.create(tmpEncoder);
         node = new ReaderNode(1, -1, -1);
         node.setTag("ford", "no");
@@ -452,7 +452,7 @@ public void testBlockByDefault() {
 
     @Test
     public void maxSpeed() {
-        FootFlagEncoder encoder = FlagEncoders.createFoot(new PMap().putObject("speed_bits", 4).putObject("speed_factor", 2));
+        FlagEncoder encoder = FlagEncoders.createFoot(new PMap().putObject("speed_bits", 4).putObject("speed_factor", 2));
         // The foot max speed is supposed to be 15km/h, but for speed_bits=4,speed_factor=2 as we use here 15 cannot
         // be stored. In fact, when we set the speed of an edge to 15 and call the getter afterwards we get a value of 16
         // because of the internal (scaled) integer representation:

File: core/src/test/java/com/graphhopper/routing/util/HeadingEdgeFilterTest.java
Patch:
@@ -12,7 +12,7 @@ class HeadingEdgeFilterTest {
     @Test
     public void getHeading() {
         GHPoint point = new GHPoint(55.67093, 12.577294);
-        CarFlagEncoder carEncoder = FlagEncoders.createCar();
+        FlagEncoder carEncoder = FlagEncoders.createCar();
         EncodingManager encodingManager = new EncodingManager.Builder().add(carEncoder).build();
         BaseGraph g = new BaseGraph.Builder(encodingManager).create();
         EdgeIteratorState edge = g.edge(0, 1);

File: core/src/test/java/com/graphhopper/routing/util/MountainBikeTagParserTest.java
Patch:
@@ -30,7 +30,7 @@
 public class MountainBikeTagParserTest extends AbstractBikeTagParserTester {
     @Override
     protected BikeCommonFlagEncoder createBikeTagParser() {
-        return FlagEncoders.createMountainBike(new PMap("block_fords=true"));
+        return new MountainBikeFlagEncoder(new PMap("block_fords=true"));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/NameSimilarityEdgeFilterTest.java
Patch:
@@ -81,7 +81,7 @@ public void testAccept() {
 
     @Test
     public void testDistanceFiltering() {
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         BaseGraph g = new BaseGraph.Builder(EncodingManager.create(encoder)).create();
         NodeAccess na = g.getNodeAccess();
 
@@ -272,7 +272,7 @@ public void curvedWayGeometry_issue2319() {
         // -----
         //
         //    2 -- 3
-        CarFlagEncoder encoder = FlagEncoders.createCar(new PMap().putObject("speed_two_directions", true));
+        FlagEncoder encoder = FlagEncoders.createCar(new PMap().putObject("speed_two_directions", true));
         EncodingManager em = EncodingManager.create(encoder);
         BaseGraph graph = new BaseGraph.Builder(em).create();
         PointList pointList = new PointList(20, false);

File: core/src/test/java/com/graphhopper/routing/util/RacingBikeTagParserTest.java
Patch:
@@ -37,7 +37,7 @@
 public class RacingBikeTagParserTest extends AbstractBikeTagParserTester {
     @Override
     protected BikeCommonFlagEncoder createBikeTagParser() {
-        return FlagEncoders.createRacingBike(new PMap("block_fords=true"));
+        return new RacingBikeFlagEncoder(new PMap("block_fords=true"));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/TagParserManagerTest.java
Patch:
@@ -64,7 +64,7 @@ public void testCombineRelations() {
         osmWay.setTag("highway", "track");
         ReaderRelation osmRel = new ReaderRelation(1);
 
-        BikeFlagEncoder defaultBike = FlagEncoders.createBike();
+        BikeFlagEncoder defaultBike = new BikeFlagEncoder();
         BikeFlagEncoder lessRelationCodes = new BikeFlagEncoder("less_relation_bits") {
             @Override
             public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way) {
@@ -93,8 +93,8 @@ public void testMixBikeTypesAndRelationCombination() {
 
         ReaderRelation osmRel = new ReaderRelation(1);
 
-        BikeFlagEncoder bikeEncoder = FlagEncoders.createBike();
-        MountainBikeFlagEncoder mtbEncoder = FlagEncoders.createMountainBike();
+        BikeFlagEncoder bikeEncoder = new BikeFlagEncoder();
+        MountainBikeFlagEncoder mtbEncoder = new MountainBikeFlagEncoder();
         TagParserManager manager = TagParserManager.create(bikeEncoder, mtbEncoder);
 
         // relation code for network rcn is NICE for bike and PREFER for mountainbike

File: core/src/test/java/com/graphhopper/routing/util/WheelchairTagParserTest.java
Patch:
@@ -404,7 +404,7 @@ public void testBarrierAccess() {
 
     @Test
     public void testBlockByDefault() {
-        WheelchairFlagEncoder tmpWheelchairEncoder = FlagEncoders.createWheelchair();
+        WheelchairFlagEncoder tmpWheelchairEncoder = new WheelchairFlagEncoder();
         EncodingManager.create(tmpWheelchairEncoder);
 
         ReaderNode node = new ReaderNode(1, -1, -1);

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMTurnRelationParserTest.java
Patch:
@@ -6,7 +6,6 @@
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.TurnCostStorage;
 import com.graphhopper.util.GHUtility;
@@ -22,7 +21,7 @@ public class OSMTurnRelationParserTest {
 
     @Test
     public void testGetRestrictionAsEntries() {
-        CarFlagEncoder encoder = FlagEncoders.createCar(5, 5, 1);
+        CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 1);
         final Map<Long, Integer> osmNodeToInternal = new HashMap<>();
         final Map<Integer, Long> internalToOSMEdge = new HashMap<>();
 

File: core/src/test/java/com/graphhopper/routing/weighting/BlockAreaWeightingTest.java
Patch:
@@ -2,9 +2,9 @@
 
 import com.graphhopper.coll.GHIntHashSet;
 import com.graphhopper.routing.querygraph.QueryGraph;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.storage.GraphEdgeIdFinder;
@@ -23,7 +23,7 @@
 
 public class BlockAreaWeightingTest {
 
-    private CarFlagEncoder encoder = FlagEncoders.createCar();
+    private FlagEncoder encoder = FlagEncoders.createCar();
     private EncodingManager em;
     private BaseGraph graph;
 

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomModelParserTest.java
Patch:
@@ -19,8 +19,8 @@
 package com.graphhopper.routing.weighting.custom;
 
 import com.graphhopper.routing.ev.*;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.storage.BaseGraph;
 import com.graphhopper.util.CustomModel;
@@ -42,7 +42,7 @@
 
 class CustomModelParserTest {
 
-    CarFlagEncoder encoder;
+    FlagEncoder encoder;
     BaseGraph graph;
     EncodingManager encodingManager;
     EnumEncodedValue<RoadClass> roadClassEnc;

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomWeightingTest.java
Patch:
@@ -4,8 +4,8 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.graphhopper.json.Statement;
 import com.graphhopper.routing.ev.*;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
@@ -28,7 +28,7 @@ class CustomWeightingTest {
     DecimalEncodedValue maxSpeedEnc;
     EnumEncodedValue<RoadClass> roadClassEnc;
     EncodingManager encodingManager;
-    CarFlagEncoder carFE;
+    FlagEncoder carFE;
 
     @BeforeEach
     public void setup() {

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -44,7 +44,7 @@ public abstract class AbstractGraphStorageTester {
     private final String locationParent = "./target/graphstorage";
     protected int defaultSize = 100;
     protected String defaultGraphLoc = "./target/graphstorage/default";
-    protected CarFlagEncoder carEncoder = createCarFlagEncoder();
+    protected FlagEncoder carEncoder = createCarFlagEncoder();
     protected EncodingManager encodingManager = new EncodingManager.Builder().add(carEncoder).add(FlagEncoders.createFoot()).build();
     protected BooleanEncodedValue carAccessEnc = carEncoder.getAccessEnc();
     protected DecimalEncodedValue carAvSpeedEnc = carEncoder.getAverageSpeedEnc();
@@ -87,7 +87,7 @@ public static int getIdOf(Graph g, double latitude, double longitude) {
         throw new IllegalArgumentException("did not find node with location " + (float) latitude + "," + (float) longitude);
     }
 
-    CarFlagEncoder createCarFlagEncoder() {
+    FlagEncoder createCarFlagEncoder() {
         return FlagEncoders.createCar(5, 5, 0);
     }
 
@@ -659,7 +659,7 @@ public void testStringIndex() {
 
     @Test
     public void test8AndMoreBytesForEdgeFlags() {
-        List<CarFlagEncoder> list = new ArrayList<>();
+        List<FlagEncoder> list = new ArrayList<>();
         list.add(FlagEncoders.createCar("car0", 29, 0.001, 0));
         list.add(FlagEncoders.createCar(29, 0.001, 0));
         EncodingManager manager = EncodingManager.create(list);

File: core/src/test/java/com/graphhopper/storage/GraphEdgeIdFinderTest.java
Patch:
@@ -37,7 +37,7 @@ public class GraphEdgeIdFinderTest {
 
     @Test
     public void testParseStringHints() {
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         EncodingManager em = EncodingManager.create(encoder);
         BaseGraph graph = new BaseGraph.Builder(em).create();
         // 0-1-2
@@ -69,7 +69,7 @@ public void testParseStringHints() {
 
     @Test
     public void testBlockAreasWithPolygon() {
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         EncodingManager em = EncodingManager.create(encoder);
         BaseGraph graph = new BaseGraph.Builder(em).create();
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java
Patch:
@@ -7,7 +7,6 @@
 import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
 import org.junit.jupiter.api.Test;
@@ -23,7 +22,7 @@ public class GraphHopperStorageLMTest {
     public void testLoad() {
         String defaultGraphLoc = "./target/ghstorage_lm";
         Helper.removeDir(new File(defaultGraphLoc));
-        CarFlagEncoder carFlagEncoder = FlagEncoders.createCar();
+        CarFlagEncoder carFlagEncoder = new CarFlagEncoder();
         EncodingManager encodingManager = new EncodingManager.Builder().add(carFlagEncoder).add(Subnetwork.create("my_profile")).build();
         GraphHopperStorage graph = GraphBuilder.start(encodingManager).setRAM(defaultGraphLoc, true).create();
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.routing.ev.TurnCost;
-import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
@@ -35,7 +35,7 @@
  */
 public class GraphHopperStorageWithTurnCostsTest extends GraphHopperStorageTest {
     @Override
-    CarFlagEncoder createCarFlagEncoder() {
+    FlagEncoder createCarFlagEncoder() {
         return FlagEncoders.createCar(5, 5, 1400);
     }
 

File: core/src/test/java/com/graphhopper/storage/ShortcutUnpackerTest.java
Patch:
@@ -6,8 +6,8 @@
 import com.graphhopper.routing.ch.ShortcutUnpacker;
 import com.graphhopper.routing.ev.EncodedValueLookup;
 import com.graphhopper.routing.ev.TurnCost;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
 import com.graphhopper.routing.weighting.FastestWeighting;
@@ -33,7 +33,7 @@ public class ShortcutUnpackerTest {
     private static final class Fixture {
         private final boolean edgeBased;
         private final EncodingManager encodingManager;
-        private final CarFlagEncoder encoder;
+        private final FlagEncoder encoder;
         private final BaseGraph graph;
         private CHStorageBuilder chBuilder;
         private RoutingCHGraph routingCHGraph;

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -148,7 +148,7 @@ public void testBoundingBoxQuery1() {
 
     @Test
     public void testMoreReal() {
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         BaseGraph graph = new BaseGraph.Builder(EncodingManager.create(encoder)).create();
         NodeAccess na = graph.getNodeAccess();
         na.setNode(1, 51.2492152, 9.4317166);
@@ -336,8 +336,8 @@ public void testRMin() {
 
     @Test
     public void testSearchWithFilter_issue318() {
-        CarFlagEncoder carEncoder = FlagEncoders.createCar();
-        BikeFlagEncoder bikeEncoder = FlagEncoders.createBike();
+        FlagEncoder carEncoder = FlagEncoders.createCar();
+        FlagEncoder bikeEncoder = FlagEncoders.createBike();
 
         EncodingManager tmpEM = EncodingManager.create(carEncoder, bikeEncoder);
         BaseGraph graph = new BaseGraph.Builder(tmpEM).create();

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -21,8 +21,8 @@
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.InstructionsFromEdges;
 import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.ShortestWeighting;
@@ -50,7 +50,7 @@ public class PathSimplificationTest {
 
     @Test
     public void testScenario() {
-        CarFlagEncoder carEncoder = FlagEncoders.createCar();
+        FlagEncoder carEncoder = FlagEncoders.createCar();
         EncodingManager carManager = EncodingManager.create(carEncoder);
         BaseGraph g = new BaseGraph.Builder(carManager).create();
         // 0-1-2

File: example/src/main/java/com/graphhopper/example/LowLevelAPIExample.java
Patch:
@@ -31,7 +31,7 @@ public static void main(String[] args) {
 
     public static void createAndSaveGraph() {
         {
-            CarFlagEncoder encoder = FlagEncoders.createCar();
+            FlagEncoder encoder = FlagEncoders.createCar();
             EncodingManager em = EncodingManager.create(encoder);
             GraphHopperStorage graph = new GraphBuilder(em).setRAM(graphLocation, true).create();
             // Make a weighted edge between two nodes and set average speed to 50km/h
@@ -55,7 +55,7 @@ public static void createAndSaveGraph() {
         {
             // Load the graph ... can be also in a different code location
             // note that the EncodingManager must be the same
-            CarFlagEncoder encoder = FlagEncoders.createCar();
+            FlagEncoder encoder = FlagEncoders.createCar();
             EncodingManager em = EncodingManager.create(encoder);
             GraphHopperStorage graph = new GraphBuilder(em).setRAM(graphLocation, true).build();
             graph.loadExisting();
@@ -81,7 +81,7 @@ public static void createAndSaveGraph() {
 
     public static void useContractionHierarchiesToMakeQueriesFaster() {
         // Creating and saving the graph
-        CarFlagEncoder encoder = FlagEncoders.createCar();
+        FlagEncoder encoder = FlagEncoders.createCar();
         EncodingManager em = EncodingManager.create(encoder);
         Weighting weighting = new FastestWeighting(encoder);
         CHConfig chConfig = CHConfig.nodeBased("my_profile", weighting);

File: web-bundle/src/test/java/com/graphhopper/gpx/GpxConversionsTest.java
Patch:
@@ -21,8 +21,8 @@
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.InstructionsFromEdges;
 import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoders;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.ShortestWeighting;
@@ -49,7 +49,7 @@
 public class GpxConversionsTest {
 
     private EncodingManager carManager;
-    private CarFlagEncoder carEncoder;
+    private FlagEncoder carEncoder;
     private TranslationMap trMap;
 
     @BeforeEach

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -691,6 +691,7 @@ protected void importOSM() {
                 setElevationProvider(eleProvider).
                 setCountryRuleFactory(countryRuleFactory);
         logger.info("using " + ghStorage.toString() + ", memory:" + getMemInfo());
+        ghStorage.create(100);
         try {
             reader.readGraph();
         } catch (IOException ex) {

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -145,6 +145,9 @@ public void readGraph() throws IOException {
         if (!osmFile.exists())
             throw new IllegalStateException("Your specified OSM file does not exist:" + osmFile.getAbsolutePath());
 
+        if (!baseGraph.isInitialized())
+            throw new IllegalStateException("BaseGraph must be initialize before we can read OSM");
+
         WaySegmentParser waySegmentParser = new WaySegmentParser.Builder(baseGraph.getNodeAccess())
                 .setDirectory(baseGraph.getDirectory())
                 .setElevationProvider(eleProvider)
@@ -156,7 +159,6 @@ public void readGraph() throws IOException {
                 .setEdgeHandler(this::addEdge)
                 .setWorkerThreads(config.getWorkerThreads())
                 .build();
-        baseGraph.create(100);
         waySegmentParser.readOSM(osmFile);
         osmDataDate = waySegmentParser.getTimeStamp();
         if (baseGraph.getNodes() == 0)

File: core/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -920,7 +920,7 @@ protected File _getOSMFile() {
     public void testCountries() throws IOException {
         EncodingManager em = EncodingManager.create("car");
         EnumEncodedValue<RoadAccess> roadAccessEnc = em.getEnumEncodedValue(RoadAccess.KEY, RoadAccess.class);
-        BaseGraph graph = new BaseGraph.Builder(em).build();
+        BaseGraph graph = new BaseGraph.Builder(em).create();
         OSMReader reader = new OSMReader(graph, em, new OSMReaderConfig());
         reader.setCountryRuleFactory(new CountryRuleFactory());
         reader.setAreaIndex(createCountryIndex());
@@ -945,7 +945,7 @@ public void testCurvedWayAlongBorder() throws IOException {
                 .add(new CountryParser())
                 .build();
         EnumEncodedValue<Country> countryEnc = em.getEnumEncodedValue(Country.KEY, Country.class);
-        BaseGraph graph = new BaseGraph.Builder(em).build();
+        BaseGraph graph = new BaseGraph.Builder(em).create();
         OSMReader reader = new OSMReader(graph, em, new OSMReaderConfig());
         reader.setCountryRuleFactory(new CountryRuleFactory());
         reader.setAreaIndex(createCountryIndex());

File: core/src/test/java/com/graphhopper/routing/TrafficChangeWithNodeOrderingReusingTest.java
Patch:
@@ -55,7 +55,7 @@ public Fixture(int maxDeviationPercentage) {
             em = EncodingManager.create(encoder);
             baseCHConfig = CHConfig.nodeBased("base", new FastestWeighting(encoder));
             trafficCHConfig = CHConfig.nodeBased("traffic", new RandomDeviationWeighting(baseCHConfig.getWeighting(), maxDeviationPercentage));
-            graph = new BaseGraph.Builder(em).build();
+            graph = new BaseGraph.Builder(em).create();
         }
 
         @Override

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -611,7 +611,7 @@ public void testDifferentVehicles() {
         idx = (LocationIndexTree) createIndexNoPrepare(g, 500000).prepareIndex();
         FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
         assertEquals(2, idx.findClosest(1, -1, AccessFilter.allEdges(footEncoder.getAccessEnc())).getClosestNode());
-        Helper.close((Closeable) g);
+        g.close();
     }
 
     @ParameterizedTest

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -1206,6 +1206,7 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo() {
         assertEquals("turn right onto Margarethenstraße", il.get(3).getTurnDescription(tr));
         assertEquals("keep left onto Hoher Markt", il.get(4).getTurnDescription(tr));
         assertEquals("turn right onto Wegscheid", il.get(6).getTurnDescription(tr));
+        assertEquals("continue onto Wegscheid", il.get(7).getTurnDescription(tr));
         assertEquals("turn right onto Ringstraße, L73", il.get(8).getTurnDescription(tr));
         assertEquals("keep left onto Eyblparkstraße", il.get(9).getTurnDescription(tr));
         assertEquals("keep left onto Austraße", il.get(10).getTurnDescription(tr));

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -191,7 +191,7 @@ protected boolean acceptWay(ReaderWay way) {
      * junction between different ways this will be ignored and no artificial edge will be created.
      */
     protected boolean isBarrierNode(ReaderNode node) {
-        return node.getTags().containsKey("barrier");
+        return node.getTags().containsKey("barrier") || node.getTags().containsKey("ford");
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -72,9 +72,9 @@ public BikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts, bool
         // SmoothnessSpeed <= smoothnessFactorPushingSectionThreshold gets mapped to speed PUSHING_SECTION_SPEED
         setSmoothnessSpeedFactor(com.graphhopper.routing.ev.Smoothness.IMPASSABLE, smoothnessFactorPushingSectionThreshold);
 
-        blockByDefaultBarriers.add("kissing_gate");
-        blockByDefaultBarriers.add("stile");
-        blockByDefaultBarriers.add("turnstile");
+        barriers.add("kissing_gate");
+        barriers.add("stile");
+        barriers.add("turnstile");
 
         setSpecificClassBicycle("touring");
     }

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -55,8 +55,8 @@ public MotorcycleFlagEncoder() {
     public MotorcycleFlagEncoder(PMap properties) {
         super(properties.putObject("speed_two_directions", true));
 
-        blockByDefaultBarriers.remove("bus_trap");
-        blockByDefaultBarriers.remove("sump_buster");
+        barriers.remove("bus_trap");
+        barriers.remove("sump_buster");
 
         trackTypeSpeedMap.clear();
         defaultSpeedMap.clear();

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -126,9 +126,9 @@ protected RacingBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCo
         routeMap.put(REGIONAL, VERY_NICE.getValue());
         routeMap.put(LOCAL, UNCHANGED.getValue());
 
-        blockByDefaultBarriers.add("kissing_gate");
-        blockByDefaultBarriers.add("stile");
-        blockByDefaultBarriers.add("turnstile");
+        barriers.add("kissing_gate");
+        barriers.add("stile");
+        barriers.add("turnstile");
 
         setAvoidSpeedLimit(81);
         setSpecificClassBicycle("roadcycling");

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -399,7 +399,7 @@ protected void preprocessWay(ReaderWay way, WaySegmentParser.CoordinateSupplier
             // ignore the duration tag. If no such cases show up anymore, because they were fixed, maybe raise the limit to find some more.
             LOGGER.warn("Unrealistic low speed calculated from duration. Maybe the duration is too long, or it is applied to a way that only represents a part of the connection? OSM way: "
                     + way.getId() + ". duration=" + durationTag + " (= " + Math.round(durationInSeconds / 60.0) +
-                    " + minutes), distance=" + Math.round(distance / 1000.0) + "km");
+                    " minutes), distance=" + distance + " m");
             return;
         }
         // These tags will be present if 1) isCalculateWayDistance was true for this way, 2) no OSM nodes were missing

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -393,7 +393,7 @@ static EncodedValue parseEncodedValueString(EncodedValueFactory factory, String
         return evObject;
     }
 
-    private TagParser parseEncodedValueString(TagParserFactory factory, String tagParserString) {
+    private static TagParser parseEncodedValueString(TagParserFactory factory, String tagParserString) {
         if (!tagParserString.equals(toLowerCase(tagParserString)))
             throw new IllegalArgumentException("Use lower case for TagParser: " + tagParserString);
 

File: web-api/src/main/java/com/graphhopper/util/CustomModel.java
Patch:
@@ -124,8 +124,9 @@ public double getDistanceInfluence() {
         return distanceInfluence == null ? DEFAULT_DISTANCE_INFLUENCE : distanceInfluence;
     }
 
-    public void setHeadingPenalty(double headingPenalty) {
+    public CustomModel setHeadingPenalty(double headingPenalty) {
         this.headingPenalty = headingPenalty;
+        return this;
     }
 
     public double getHeadingPenalty() {

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -459,7 +459,7 @@ public void testFerry() {
         way.setTag("motorcar", "yes");
         way.setTag("bicycle", "no");
         // Provide the duration value in seconds:
-        way.setTag("duration:seconds", 35 * 60);
+        way.setTag("duration:seconds", 35L * 60);
         way.setTag("estimated_distance", 50000);
         // accept
         assertTrue(encoder.getAccess(way).isFerry());
@@ -471,7 +471,7 @@ public void testFerry() {
         way.setTag("route", "ferry");
         way.setTag("motorcar", "yes");
         // Provide the duration of 12 minutes in seconds:
-        way.setTag("duration:seconds", 12 * 60);
+        way.setTag("duration:seconds", 12L * 60);
         way.setTag("estimated_distance", 100);
         // accept
         assertTrue(encoder.getAccess(way).isFerry());
@@ -487,7 +487,7 @@ public void testFerry() {
         way.setTag("route", "ferry");
         way.setTag("motorcar", "yes");
         // Provide the duration of 2 months in seconds:
-        way.setTag("duration:seconds", 87900 * 60);
+        way.setTag("duration:seconds", 87900L * 60);
         way.setTag("estimated_distance", 100);
         // accept
         assertTrue(encoder.getAccess(way).isFerry());

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -249,7 +249,7 @@ public void testFerrySpeed() {
         ReaderWay way = new ReaderWay(1);
         way.setTag("route", "ferry");
         // a bit longer than an hour
-        way.setTag("duration:seconds", 4000);
+        way.setTag("duration:seconds", 4000L);
         assertEquals(30, footEncoder.ferrySpeedCalc.getSpeed(way), .1);
         IntsRef flags = footEncoder.handleWayTags(encodingManager.createEdgeFlags(), way);
         assertEquals(15, footAvgSpeedEnc.getDecimal(false, flags), .1);

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -129,8 +129,9 @@ public ConditionalTagInspector getConditionalTagInspector() {
     /**
      * Defines bits used for edge flags used for access, speed etc.
      */
-    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
+    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue) {
         // define the first 2 bits in flags for access
+        String prefix = toString();
         registerNewEncodedValue.add(accessEnc = new SimpleBooleanEncodedValue(EncodingManager.getKey(prefix, "access"), true));
         roundaboutEnc = getBooleanEncodedValue(Roundabout.KEY);
     }

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -194,9 +194,10 @@ public TransportationMode getTransportationMode() {
     }
 
     @Override
-    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
+    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue) {
         // first two bits are reserved for route handling in superclass
-        super.createEncodedValues(registerNewEncodedValue, prefix);
+        super.createEncodedValues(registerNewEncodedValue);
+        String prefix = toString();
         registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
         registerNewEncodedValue.add(priorityEnc = new DecimalEncodedValueImpl(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), false));
 

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -155,9 +155,10 @@ public TransportationMode getTransportationMode() {
      * Define the place of the speedBits in the edge flags for car.
      */
     @Override
-    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
+    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue) {
         // first two bits are reserved for route handling in superclass
-        super.createEncodedValues(registerNewEncodedValue, prefix);
+        super.createEncodedValues(registerNewEncodedValue);
+        String prefix = toString();
         registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(EncodingManager.getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
     }
 

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -427,7 +427,7 @@ private void setPreferredLanguage(String preferredLanguage) {
     private void addEncoder(AbstractFlagEncoder encoder) {
         encoder.setEncodedValueLookup(this);
         List<EncodedValue> list = new ArrayList<>();
-        encoder.createEncodedValues(list, encoder.toString());
+        encoder.createEncodedValues(list);
         for (EncodedValue ev : list)
             addEncodedValue(ev, true);
         edgeEncoders.add(encoder);

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -141,10 +141,11 @@ public TransportationMode getTransportationMode() {
     }
 
     @Override
-    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
+    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue) {
         // first two bits are reserved for route handling in superclass
-        super.createEncodedValues(registerNewEncodedValue, prefix);
+        super.createEncodedValues(registerNewEncodedValue);
         // larger value required - ferries are faster than pedestrians
+        String prefix = toString();
         registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
         registerNewEncodedValue.add(priorityWayEncoder = new DecimalEncodedValueImpl(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), false));
 

File: core/src/main/java/com/graphhopper/routing/util/RoadsFlagEncoder.java
Patch:
@@ -17,8 +17,9 @@ public RoadsFlagEncoder() {
     }
 
     @Override
-    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
-        super.createEncodedValues(registerNewEncodedValue, prefix);
+    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue) {
+        super.createEncodedValues(registerNewEncodedValue);
+        String prefix = toString();
         registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(EncodingManager.getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
     }
 

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -648,7 +648,7 @@ public void testIssue_1256() {
         EncodingManager.create(lowFactorCar);
         List<EncodedValue> list = new ArrayList<>();
         lowFactorCar.setEncodedValueLookup(em);
-        lowFactorCar.createEncodedValues(list, "car");
+        lowFactorCar.createEncodedValues(list);
         assertEquals(2.5, encoder.ferrySpeedCalc.getSpeed(way), .1);
         assertEquals(.5, lowFactorCar.ferrySpeedCalc.getSpeed(way), .1);
     }

File: reader-gtfs/src/test/java/com/graphhopper/AnotherAgencyIT.java
Patch:
@@ -189,6 +189,7 @@ public void testMuseumToEmsi() {
         ResponsePath walkRoute = route.getBest();
         assertEquals(1, walkRoute.getLegs().size());
         assertEquals(486660, walkRoute.getTime()); // < 10 min, so the transfer in test above works ^^
+        assertEquals(readWktLineString("LINESTRING (-116.76164 36.906093, -116.761812 36.905928, -116.76217 36.905659)"), walkRoute.getLegs().get(0).geometry);
         assertFalse(route.hasErrors());
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/Label.java
Patch:
@@ -57,9 +57,9 @@ public String toString() {
 
     public final Label parent;
 
-    Label(long currentTime, GraphExplorer.MultiModalEdge edgeId, NodeId node, int nTransfers, Long departureTime, long streetTime, long extraWeight, long residualDelay, boolean impossible, Label parent) {
+    Label(long currentTime, GraphExplorer.MultiModalEdge edge, NodeId node, int nTransfers, Long departureTime, long streetTime, long extraWeight, long residualDelay, boolean impossible, Label parent) {
         this.currentTime = currentTime;
-        this.edge = edgeId;
+        this.edge = edge;
         this.node = node;
         this.nTransfers = nTransfers;
         this.departureTime = departureTime;

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtRouterFreeWalkImpl.java
Patch:
@@ -190,7 +190,7 @@ GHResponse route() {
         }
 
         private void parseSolutionsAndAddToResponse(List<List<Label.Transition>> solutions, PointList waypoints) {
-            TripFromLabel tripFromLabel = new TripFromLabel(queryGraph, gtfsStorage, realtimeFeed, pathDetailsBuilderFactory);
+            TripFromLabel tripFromLabel = new TripFromLabel(queryGraph, gtfsStorage, realtimeFeed, pathDetailsBuilderFactory, walkSpeedKmH);
             for (List<Label.Transition> solution : solutions) {
                 final ResponsePath responsePath = tripFromLabel.createResponsePath(translation, waypoints, queryGraph, accessWeighting, egressWeighting, solution, requestedPathDetails);
                 responsePath.setImpossible(solution.stream().anyMatch(t -> t.label.impossible));

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtRouterImpl.java
Patch:
@@ -188,7 +188,7 @@ GHResponse route() {
         }
 
         private void parseSolutionsAndAddToResponse(List<List<Label.Transition>> solutions, PointList waypoints) {
-            TripFromLabel tripFromLabel = new TripFromLabel(queryGraph, gtfsStorage, realtimeFeed, pathDetailsBuilderFactory);
+            TripFromLabel tripFromLabel = new TripFromLabel(queryGraph, gtfsStorage, realtimeFeed, pathDetailsBuilderFactory, walkSpeedKmH);
             for (List<Label.Transition> solution : solutions) {
                 final ResponsePath responsePath = tripFromLabel.createResponsePath(translation, waypoints, queryGraph, accessWeighting, egressWeighting, solution, requestedPathDetails);
                 responsePath.setImpossible(solution.stream().anyMatch(t -> t.label.impossible));

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -95,8 +95,8 @@ public void setup() {
             ASTAR + ",false,444",
             DIJKSTRA_BI + ",false,228",
             ASTAR_BI + ",false,184",
-            ASTAR_BI + ",true,61",
-            DIJKSTRA_BI + ",true,61"
+            ASTAR_BI + ",true,49",
+            DIJKSTRA_BI + ",true,48"
     })
     public void testMonacoDifferentAlgorithms(String algo, boolean withCH, int expectedVisitedNodes) {
         final String vehicle = "car";
@@ -1380,7 +1380,7 @@ private void executeCHFootRoute(boolean sort) {
         // identify the number of counts to compare with none-CH foot route which had nearly 700 counts
         long sum = rsp.getHints().getLong("visited_nodes.sum", 0);
         assertNotEquals(sum, 0);
-        assertTrue(sum < 145, "Too many nodes visited " + sum);
+        assertTrue(sum < 147, "Too many nodes visited " + sum);
         assertEquals(3437.1, bestPath.getDistance(), .1);
         assertEquals(85, bestPath.getPoints().size());
 

File: core/src/main/java/com/graphhopper/routing/ch/CHParameters.java
Patch:
@@ -7,13 +7,14 @@ public final class CHParameters {
     public static final String PERIODIC_UPDATES = Parameters.CH.PREPARE + "updates.periodic";
     public static final String LAST_LAZY_NODES_UPDATES = Parameters.CH.PREPARE + "updates.lazy";
     public static final String NEIGHBOR_UPDATES = Parameters.CH.PREPARE + "updates.neighbor";
+    public static final String NEIGHBOR_UPDATES_MAX = Parameters.CH.PREPARE + "updates.neighbor_max";
     public static final String CONTRACTED_NODES = Parameters.CH.PREPARE + "contracted_nodes";
     public static final String LOG_MESSAGES = Parameters.CH.PREPARE + "log_messages";
     // node contraction, node-based
     public static final String EDGE_DIFFERENCE_WEIGHT = Parameters.CH.PREPARE + "node.edge_difference_weight";
     public static final String ORIGINAL_EDGE_COUNT_WEIGHT = Parameters.CH.PREPARE + "node.original_edge_count_weight";
-    public static final String MAX_VISITED_NODES_HEURISTIC = Parameters.CH.PREPARE + "node.max_visited_nodes_heuristic";
-    public static final String MAX_VISITED_NODES_CONTRACTION = Parameters.CH.PREPARE + "node.max_visited_nodes_contraction";
+    public static final String MAX_POLL_FACTOR_HEURISTIC_NODE = Parameters.CH.PREPARE + "node.max_poll_factor_heuristic";
+    public static final String MAX_POLL_FACTOR_CONTRACTION_NODE = Parameters.CH.PREPARE + "node.max_poll_factor_contraction";
     // node contraction, edge-based
     public static final String EDGE_QUOTIENT_WEIGHT = Parameters.CH.PREPARE + "edge.edge_quotient_weight";
     public static final String ORIGINAL_EDGE_QUOTIENT_WEIGHT = Parameters.CH.PREPARE + "edge.original_edge_quotient_weight";

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -95,8 +95,8 @@ public void setup() {
             ASTAR + ",false,444",
             DIJKSTRA_BI + ",false,228",
             ASTAR_BI + ",false,184",
-            ASTAR_BI + ",true,67",
-            DIJKSTRA_BI + ",true,65"
+            ASTAR_BI + ",true,61",
+            DIJKSTRA_BI + ",true,61"
     })
     public void testMonacoDifferentAlgorithms(String algo, boolean withCH, int expectedVisitedNodes) {
         final String vehicle = "car";

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -59,7 +59,7 @@ public class PathMerger {
 
     public PathMerger(Graph graph, Weighting weighting) {
         this.graph = graph;
-        this.weighting = weighting;
+        this.weighting = graph.wrapWeighting(weighting);
     }
 
     public PathMerger setCalcPoints(boolean calcPoints) {

File: core/src/main/java/com/graphhopper/routing/RoundTripRouting.java
Patch:
@@ -21,11 +21,9 @@
 import com.carrotsearch.hppc.IntSet;
 import com.carrotsearch.hppc.cursors.IntCursor;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.FiniteWeightFilter;
 import com.graphhopper.routing.util.tour.MultiPointTour;
 import com.graphhopper.routing.util.tour.TourStrategy;
 import com.graphhopper.routing.weighting.AvoidEdgesWeighting;
-import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.DistanceCalcEarth;

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1039,7 +1039,6 @@ else if (prepared.containsKey(profile.getProfile())) {
     }
 
     protected Map<String, PrepareContractionHierarchies.Result> prepareCH(boolean closeEarly, List<CHConfig> configsToPrepare) {
-        ensureWriteAccess();
         ghStorage.freeze();
         if (closeEarly) {
             locationIndex.close();
@@ -1086,7 +1085,6 @@ else if (preparedLMS.isPresent()) {
     }
 
     protected List<PrepareLandmarks> prepareLM(boolean closeEarly, List<LMConfig> configsToPrepare) {
-        ensureWriteAccess();
         ghStorage.freeze();
         return lmPreparationHandler.prepare(configsToPrepare, ghStorage, locationIndex, closeEarly);
     }

File: web-bundle/src/main/java/com/graphhopper/resources/PtRouteResource.java
Patch:
@@ -25,11 +25,11 @@
 import com.graphhopper.gtfs.Request;
 import com.graphhopper.http.DurationParam;
 import com.graphhopper.http.GHLocationParam;
+import com.graphhopper.http.OffsetDateTimeParam;
 import com.graphhopper.jackson.ResponsePathSerializer;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.StopWatch;
 import io.dropwizard.jersey.params.AbstractParam;
-import io.dropwizard.jersey.params.InstantParam;
 
 import javax.inject.Inject;
 import javax.validation.constraints.NotNull;
@@ -55,7 +55,7 @@ public PtRouteResource(PtRouter ptRouter) {
     @GET
     @Produces(MediaType.APPLICATION_JSON)
     public ObjectNode route(@QueryParam("point") @Size(min=2,max=2) List<GHLocationParam> requestPoints,
-                            @QueryParam("pt.earliest_departure_time") @NotNull InstantParam departureTimeParam,
+                            @QueryParam("pt.earliest_departure_time") @NotNull OffsetDateTimeParam departureTimeParam,
                             @QueryParam("pt.profile_duration") DurationParam profileDuration,
                             @QueryParam("pt.arrive_by") @DefaultValue("false") boolean arriveBy,
                             @QueryParam("locale") String localeStr,
@@ -68,7 +68,7 @@ public ObjectNode route(@QueryParam("point") @Size(min=2,max=2) List<GHLocationP
                             @QueryParam("pt.egress_profile") String egressProfile) {
         StopWatch stopWatch = new StopWatch().start();
         List<GHLocation> points = requestPoints.stream().map(AbstractParam::get).collect(toList());
-        Instant departureTime = departureTimeParam.get();
+        Instant departureTime = departureTimeParam.get().toInstant();
 
         Request request = new Request(points, departureTime);
         request.setArriveBy(arriveBy);

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GtfsReader.java
Patch:
@@ -234,6 +234,7 @@ private void insertTransferEdges(int arrivalPlatformNode, int minTransferTime, N
                     edge.set(accessEnc, true).setReverse(accessEnc, false);
                     setEdgeTypeAndClearDistance(edge, GtfsStorage.EdgeType.TRANSFER);
                     edge.set(timeEnc, tailSet.firstKey() - arrivalTime);
+                    edge.set(validityIdEnc, routeType(departurePlatform));
                     gtfsStorage.getPlatformDescriptorByEdge().put(edge.getEdge(), departurePlatform);
                 }
             }
@@ -592,6 +593,7 @@ private void insertInboundBlockTransfers(List<TripWithStopTimeAndArrivalNode> ar
                 transferEdge.set(accessEnc, true).setReverse(accessEnc, false);
                 setEdgeTypeAndClearDistance(transferEdge, GtfsStorage.EdgeType.TRANSFER);
                 transferEdge.set(timeEnc, dwellTime);
+                transferEdge.set(validityIdEnc, routeType(platform));
                 gtfsStorage.getPlatformDescriptorByEdge().put(transferEdge.getEdge(), platform);
                 EdgeIteratorState boardEdge = graph.edge(i - 1, departureNode);
                 boardEdge.set(accessEnc, true).setReverse(accessEnc, false);
@@ -625,6 +627,7 @@ private void insertOutboundTransfers(String toStopId, String toRouteId, int mini
                                 edge.set(accessEnc, true).setReverse(accessEnc, false);
                                 setEdgeTypeAndClearDistance(edge, GtfsStorage.EdgeType.TRANSFER);
                                 edge.set(timeEnc, departureTime - time);
+                                edge.set(validityIdEnc, routeType(toPlatform));
                                 gtfsStorage.getPlatformDescriptorByEdge().put(edge.getEdge(), toPlatform);
                                 break;
                             }

File: core/src/main/java/com/graphhopper/routing/ch/CHParameters.java
Patch:
@@ -12,6 +12,8 @@ public final class CHParameters {
     // node contraction, node-based
     public static final String EDGE_DIFFERENCE_WEIGHT = Parameters.CH.PREPARE + "node.edge_difference_weight";
     public static final String ORIGINAL_EDGE_COUNT_WEIGHT = Parameters.CH.PREPARE + "node.original_edge_count_weight";
+    public static final String MAX_VISITED_NODES_HEURISTIC = Parameters.CH.PREPARE + "node.max_visited_nodes_heuristic";
+    public static final String MAX_VISITED_NODES_CONTRACTION = Parameters.CH.PREPARE + "node.max_visited_nodes_contraction";
     // node contraction, edge-based
     public static final String EDGE_QUOTIENT_WEIGHT = Parameters.CH.PREPARE + "edge.edge_quotient_weight";
     public static final String ORIGINAL_EDGE_QUOTIENT_WEIGHT = Parameters.CH.PREPARE + "edge.original_edge_quotient_weight";

File: core/src/main/java/com/graphhopper/routing/ch/NodeContractor.java
Patch:
@@ -47,5 +47,4 @@ public interface NodeContractor {
 
     float getDijkstraSeconds();
 
-    void prepareContraction();
 }

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -223,7 +223,6 @@ private void contractNodesUsingHeuristicNodeOrdering() {
         // but has always been like that and changing it would possibly require retuning the contraction parameters
         updatePrioritiesOfRemainingNodes();
         logger.info("Finished building queue, took: {}s, {}", sw.stop().getSeconds(), getMemInfo());
-        nodeContractor.prepareContraction();
         final int initSize = sortedNodes.size();
         int level = 0;
         checkCounter = 0;
@@ -323,7 +322,6 @@ private void contractNodesUsingHeuristicNodeOrdering() {
     }
 
     private void contractNodesUsingFixedNodeOrdering() {
-        nodeContractor.prepareContraction();
         final int nodesToContract = nodeOrderingProvider.getNumNodes();
         final int logSize = Math.max(10, (int) (params.getLogMessagesPercentage() / 100.0 * nodesToContract));
         StopWatch stopWatch = new StopWatch();
@@ -528,7 +526,7 @@ static Params forTraversalMode(TraversalMode traversalMode) {
                 // todo: optimize
                 return new Params(0, 100, 0, 100, 5);
             } else {
-                return new Params(20, 10, 20, 100, 20);
+                return new Params(0, 0, 100, 100, 20);
             }
         }
 

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -59,7 +59,6 @@ private static NodeContractor createNodeContractor(GraphHopperStorage g, CHStora
         CHPreparationGraph.buildFromGraph(prepareGraph, g, g.createCHGraph(store, chConfig).getWeighting());
         NodeContractor nodeContractor = new NodeBasedNodeContractor(prepareGraph, new CHStorageBuilder(store), new PMap());
         nodeContractor.initFromGraph();
-        nodeContractor.prepareContraction();
         return nodeContractor;
     }
 

File: core/src/main/java/com/graphhopper/routing/ev/DecimalEncodedValue.java
Patch:
@@ -8,7 +8,7 @@
  * so that the storable part of it fits into the specified number of bits (maximum 32 at the moment
  * for all implementations) and 2. the default value is always 0.
  *
- * @see UnsignedDecimalEncodedValue
+ * @see DecimalEncodedValueImpl
  */
 public interface DecimalEncodedValue extends EncodedValue {
 

File: core/src/main/java/com/graphhopper/routing/ev/EnumEncodedValue.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * This class allows to store distinct values via an enum. I.e. it stores just the indices
  */
-public final class EnumEncodedValue<E extends Enum> extends UnsignedIntEncodedValue {
+public final class EnumEncodedValue<E extends Enum> extends IntEncodedValueImpl {
     private final E[] arr;
 
     public EnumEncodedValue(String name, Class<E> enumType) {

File: core/src/main/java/com/graphhopper/routing/ev/HikeRating.java
Patch:
@@ -4,6 +4,6 @@ public class HikeRating {
     public static final String KEY = "hike_rating";
 
     public static IntEncodedValue create() {
-        return new UnsignedIntEncodedValue(KEY, 3, false);
+        return new IntEncodedValueImpl(KEY, 3, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/HorseRating.java
Patch:
@@ -4,6 +4,6 @@ public class HorseRating {
     public static final String KEY = "horse_rating";
 
     public static IntEncodedValue create() {
-        return new UnsignedIntEncodedValue(KEY, 3, false);
+        return new IntEncodedValueImpl(KEY, 3, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/IntEncodedValue.java
Patch:
@@ -7,7 +7,7 @@
  * integer is highly limited (unlike the Java 32bit integer values) so that the storable part of it fits into the
  * specified number of bits (maximum 32) and 2. the default value is always 0.
  *
- * @see UnsignedIntEncodedValue
+ * @see IntEncodedValueImpl
  */
 public interface IntEncodedValue extends EncodedValue {
 

File: core/src/main/java/com/graphhopper/routing/ev/Lanes.java
Patch:
@@ -22,6 +22,6 @@ public class Lanes {
     public static final String KEY = "lanes";
 
     public static IntEncodedValue create() {
-        return new UnsignedIntEncodedValue(KEY, 3, false);
+        return new IntEncodedValueImpl(KEY, 3, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxAxleLoad.java
Patch:
@@ -29,6 +29,6 @@ public class MaxAxleLoad {
      * it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.
      */
     public static DecimalEncodedValue create() {
-        return new UnsignedDecimalEncodedValue(KEY, 7, 0.5, Double.POSITIVE_INFINITY, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0.5, true, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxHeight.java
Patch:
@@ -32,6 +32,6 @@ public class MaxHeight {
      * it is assumed to use the maximum value.
      */
     public static DecimalEncodedValue create() {
-        return new UnsignedDecimalEncodedValue(KEY, 7, 0.1, Double.POSITIVE_INFINITY, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0.1, true, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxLength.java
Patch:
@@ -32,6 +32,6 @@ public class MaxLength {
      * between the maximum and infinity it is assumed to use the maximum value.
      */
     public static DecimalEncodedValue create() {
-        return new UnsignedDecimalEncodedValue(KEY, 7, 0.1, Double.POSITIVE_INFINITY, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0.1, true, false);
     }
 }
\ No newline at end of file

File: core/src/main/java/com/graphhopper/routing/ev/MaxSpeed.java
Patch:
@@ -35,6 +35,6 @@ public class MaxSpeed {
     public static final double UNSET_SPEED = Double.POSITIVE_INFINITY;
 
     public static DecimalEncodedValue create() {
-        return new UnsignedDecimalEncodedValue(KEY, 5, 5, UNSET_SPEED, true);
+        return new DecimalEncodedValueImpl(KEY, 5, 5, true, true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxWeight.java
Patch:
@@ -33,6 +33,6 @@ public class MaxWeight {
      * it was done with the MappedDecimalEncodedValue still handling (or rounding) of unknown values is unclear.
      */
     public static DecimalEncodedValue create() {
-        return new UnsignedDecimalEncodedValue(KEY, 8, 0.1, Double.POSITIVE_INFINITY, false);
+        return new DecimalEncodedValueImpl(KEY, 8, 0.1, true, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MaxWidth.java
Patch:
@@ -32,6 +32,6 @@ public class MaxWidth {
      * it is assumed to use the maximum value.
      */
     public static DecimalEncodedValue create() {
-        return new UnsignedDecimalEncodedValue(KEY, 7, 0.1, Double.POSITIVE_INFINITY, false);
+        return new DecimalEncodedValueImpl(KEY, 7, 0.1, true, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/MtbRating.java
Patch:
@@ -4,6 +4,6 @@ public class MtbRating {
     public static final String KEY = "mtb_rating";
 
     public static IntEncodedValue create() {
-        return new UnsignedIntEncodedValue(KEY, 3, false);
+        return new IntEncodedValueImpl(KEY, 3, false);
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/SimpleBooleanEncodedValue.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * This class implements a simple boolean storage via an UnsignedIntEncodedValue with 1 bit.
  */
-public final class SimpleBooleanEncodedValue extends UnsignedIntEncodedValue implements BooleanEncodedValue {
+public final class SimpleBooleanEncodedValue extends IntEncodedValueImpl implements BooleanEncodedValue {
 
     public SimpleBooleanEncodedValue(String name) {
         this(name, false);

File: core/src/main/java/com/graphhopper/routing/ev/StringEncodedValue.java
Patch:
@@ -16,7 +16,7 @@
  * @author Peter Karich
  * @author Thomas Butz
  */
-public final class StringEncodedValue extends UnsignedIntEncodedValue {
+public final class StringEncodedValue extends IntEncodedValueImpl {
     private final int maxValues;
     private final List<String> values;
     private final ObjectIntMap<String> indexMap;

File: core/src/main/java/com/graphhopper/routing/ev/TurnCost.java
Patch:
@@ -16,7 +16,7 @@ public static String key(String prefix) {
      */
     public static DecimalEncodedValue create(String name, int maxTurnCosts) {
         int turnBits = Helper.countBitValue(maxTurnCosts);
-        return new UnsignedDecimalEncodedValue(key(name), turnBits, 1, 0, false, true);
+        return new DecimalEncodedValueImpl(key(name), turnBits, 0, 1, false, false, false, true);
     }
 
     public static IntsRef createFlags() {

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -193,8 +193,8 @@ public TransportationMode getTransportationMode() {
     public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
         // first two bits are reserved for route handling in superclass
         super.createEncodedValues(registerNewEncodedValue, prefix);
-        registerNewEncodedValue.add(avgSpeedEnc = new UnsignedDecimalEncodedValue(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
-        registerNewEncodedValue.add(priorityEnc = new UnsignedDecimalEncodedValue(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), false));
+        registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
+        registerNewEncodedValue.add(priorityEnc = new DecimalEncodedValueImpl(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), false));
 
         bikeRouteEnc = getEnumEncodedValue(RouteNetwork.key("bike"), RouteNetwork.class);
         smoothnessEnc = getEnumEncodedValue(Smoothness.KEY, Smoothness.class);

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.ev.EncodedValue;
-import com.graphhopper.routing.ev.UnsignedDecimalEncodedValue;
+import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
@@ -159,7 +159,7 @@ public TransportationMode getTransportationMode() {
     public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix) {
         // first two bits are reserved for route handling in superclass
         super.createEncodedValues(registerNewEncodedValue, prefix);
-        registerNewEncodedValue.add(avgSpeedEnc = new UnsignedDecimalEncodedValue(EncodingManager.getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
+        registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(EncodingManager.getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
     }
 
     protected double getSpeed(ReaderWay way) {

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -147,8 +147,8 @@ public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, Stri
         // first two bits are reserved for route handling in superclass
         super.createEncodedValues(registerNewEncodedValue, prefix);
         // larger value required - ferries are faster than pedestrians
-        registerNewEncodedValue.add(avgSpeedEnc = new UnsignedDecimalEncodedValue(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
-        registerNewEncodedValue.add(priorityWayEncoder = new UnsignedDecimalEncodedValue(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), speedTwoDirections));
+        registerNewEncodedValue.add(avgSpeedEnc = new DecimalEncodedValueImpl(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
+        registerNewEncodedValue.add(priorityWayEncoder = new DecimalEncodedValueImpl(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), speedTwoDirections));
 
         footRouteEnc = getEnumEncodedValue(RouteNetwork.key("foot"), RouteNetwork.class);
     }

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -20,7 +20,7 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
 import com.graphhopper.routing.ev.EncodedValue;
-import com.graphhopper.routing.ev.UnsignedDecimalEncodedValue;
+import com.graphhopper.routing.ev.DecimalEncodedValueImpl;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.routing.weighting.CurvatureWeighting;
 import com.graphhopper.routing.weighting.PriorityWeighting;
@@ -111,8 +111,8 @@ public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, Stri
         // first two bits are reserved for route handling in superclass
         super.createEncodedValues(registerNewEncodedValue, prefix);
 
-        registerNewEncodedValue.add(priorityWayEncoder = new UnsignedDecimalEncodedValue(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), false));
-        registerNewEncodedValue.add(curvatureEncoder = new UnsignedDecimalEncodedValue(getKey(prefix, "curvature"), 4, 0.1, false));
+        registerNewEncodedValue.add(priorityWayEncoder = new DecimalEncodedValueImpl(getKey(prefix, "priority"), 4, PriorityCode.getFactor(1), false));
+        registerNewEncodedValue.add(curvatureEncoder = new DecimalEncodedValueImpl(getKey(prefix, "curvature"), 4, 0.1, false));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
Patch:
@@ -35,7 +35,7 @@ protected Object getCurrentValue() {
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-        // for very short edges we might not be able calculate a proper value for speed. dividing by calcMillis can
+        // for very short edges we might not be able to calculate a proper value for speed. dividing by calcMillis can
         // even lead to speed=Infinity -> just ignore these cases here, see #1848
         final double distance = edge.getDistance();
         if (distance < 0.1) {

File: core/src/test/java/com/graphhopper/routing/ev/BooleanEncodedValueTest.java
Patch:
@@ -11,7 +11,7 @@ public class BooleanEncodedValueTest {
     @Test
     public void testBit() {
         EncodedValue.InitializerConfig config = new EncodedValue.InitializerConfig();
-        IntEncodedValue intProp = new UnsignedIntEncodedValue("somevalue", 5, false);
+        IntEncodedValue intProp = new IntEncodedValueImpl("somevalue", 5, false);
         intProp.init(config);
 
         BooleanEncodedValue bool = new SimpleBooleanEncodedValue("access", false);

File: core/src/test/java/com/graphhopper/routing/ev/DecimalEncodedValueTest.java
Patch:
@@ -13,7 +13,7 @@ public class DecimalEncodedValueTest {
 
     @Test
     public void testInit() {
-        DecimalEncodedValue prop = new UnsignedDecimalEncodedValue("test", 10, 2, false);
+        DecimalEncodedValue prop = new DecimalEncodedValueImpl("test", 10, 2, false);
         prop.init(new EncodedValue.InitializerConfig());
         IntsRef ref = new IntsRef(1);
         prop.setDecimal(false, ref, 10d);
@@ -32,7 +32,7 @@ public void testMaxValue() {
         IntsRef flags = carEncoder.handleWayTags(em.createEdgeFlags(), way);
         assertEquals(101.5, carAverageSpeedEnc.getDecimal(true, flags), 1e-1);
 
-        DecimalEncodedValue instance1 = new UnsignedDecimalEncodedValue("test1", 8, 0.5, false);
+        DecimalEncodedValue instance1 = new DecimalEncodedValueImpl("test1", 8, 0.5, false);
         instance1.init(new EncodedValue.InitializerConfig());
         flags = em.createEdgeFlags();
         instance1.setDecimal(false, flags, 100d);
@@ -41,7 +41,7 @@ public void testMaxValue() {
 
     @Test
     public void testNegativeBounds() {
-        DecimalEncodedValue prop = new UnsignedDecimalEncodedValue("test", 10, 5, false);
+        DecimalEncodedValue prop = new DecimalEncodedValueImpl("test", 10, 5, false);
         prop.init(new EncodedValue.InitializerConfig());
         try {
             prop.setDecimal(false, new IntsRef(1), -1);

File: core/src/test/java/com/graphhopper/routing/ev/DefaultEncodedValueFactoryTest.java
Patch:
@@ -18,7 +18,7 @@ public void loadRoadClass() {
     @Test
     public void loadCarMaxSpeed() {
         EncodedValue enc = MaxSpeed.create();
-        UnsignedDecimalEncodedValue loadedEnc = (UnsignedDecimalEncodedValue) factory.create(enc.toString());
+        DecimalEncodedValueImpl loadedEnc = (DecimalEncodedValueImpl) factory.create(enc.toString());
         assertEquals(loadedEnc, enc);
     }
 

File: core/src/test/java/com/graphhopper/routing/ev/MaxWeightTest.java
Patch:
@@ -16,9 +16,6 @@ public void testSetAndGet() {
         assertEquals(20, mappedDecimalEnc.getDecimal(false, intsRef), .1);
 
         intsRef = new IntsRef(1);
-        mappedDecimalEnc.setDecimal(false, intsRef, 0);
-        assertEquals(Double.POSITIVE_INFINITY, mappedDecimalEnc.getDecimal(false, intsRef), .1);
-
         mappedDecimalEnc.setDecimal(false, intsRef, Double.POSITIVE_INFINITY);
         assertEquals(Double.POSITIVE_INFINITY, mappedDecimalEnc.getDecimal(false, intsRef), .1);
     }

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtEncodedValues.java
Patch:
@@ -43,10 +43,10 @@ public static PtEncodedValues fromEncodingManager(EncodingManager encodingManage
 
     public static EncodingManager.Builder createAndAddEncodedValues(EncodingManager.Builder builder) {
         builder.add(new SimpleBooleanEncodedValue("is_forward_pt_edge", true));
-        builder.add(new UnsignedIntEncodedValue("pt_validity_id", 20, false));
-        builder.add(new UnsignedIntEncodedValue("pt_transfers", 1, false));
+        builder.add(new IntEncodedValueImpl("pt_validity_id", 20, false));
+        builder.add(new IntEncodedValueImpl("pt_transfers", 1, false));
         builder.add(new EnumEncodedValue<>("pt_edge_type", GtfsStorage.EdgeType.class));
-        builder.add(new UnsignedIntEncodedValue("pt_time", 17, false));
+        builder.add(new IntEncodedValueImpl("pt_time", 17, false));
         return builder;
     }
 

File: core/src/main/java/com/graphhopper/search/StringIndex.java
Patch:
@@ -197,7 +197,7 @@ public Map<String, String> getAll(final long entryPointer) {
         if (keyCount == 0)
             return Collections.emptyMap();
 
-        Map<String, String> map = new HashMap<>(keyCount);
+        Map<String, String> map = new LinkedHashMap<>(keyCount);
         long tmpPointer = entryPointer + 1;
         for (int i = 0; i < keyCount; i++) {
             int currentKeyIndex = vals.getShort(tmpPointer);

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtRouterFreeWalkImpl.java
Patch:
@@ -128,6 +128,7 @@ private class RequestHandler {
         private final double betaStreetTime;
         private final double walkSpeedKmH;
         private final int blockedRouteTypes;
+        private final Map<Integer, Long> boardingPenaltiesByRouteType;
         private final GHLocation enter;
         private final GHLocation exit;
         private final Translation translation;
@@ -161,6 +162,7 @@ private class RequestHandler {
             arriveBy = request.isArriveBy();
             walkSpeedKmH = request.getWalkSpeedKmH();
             blockedRouteTypes = request.getBlockedRouteTypes();
+            boardingPenaltiesByRouteType = request.getBoardingPenaltiesByRouteType();
             translation = translationMap.getWithFallBack(request.getLocale());
             enter = request.getPoints().get(0);
             exit = request.getPoints().get(1);
@@ -256,6 +258,7 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
             router.setBetaTransfers(betaTransfers);
             router.setBetaStreetTime(betaStreetTime);
             router.setLimitStreetTime(limitStreetTime);
+            router.setBoardingPenaltyByRouteType(routeType -> boardingPenaltiesByRouteType.getOrDefault(routeType, 0L));
             Iterator<Label> iterator = router.calcLabels(startNode, initialTime).iterator();
             while (iterator.hasNext()) {
                 Label label = iterator.next();

File: core/src/test/java/com/graphhopper/routing/subnetwork/SubnetworkStorageTest.java
Patch:
@@ -9,7 +9,7 @@ public class SubnetworkStorageTest {
 
     @Test
     public void testSimple() {
-        SubnetworkStorage storage = new SubnetworkStorage(new RAMDirectory(), "fastest");
+        SubnetworkStorage storage = new SubnetworkStorage(new RAMDirectory().create("fastest"));
         storage.create(2000);
         storage.setSubnetwork(1, 88);
         assertEquals(88, storage.getSubnetwork(1));

File: web/src/test/java/com/graphhopper/http/resources/PtIsochroneTest.java
Patch:
@@ -58,7 +58,7 @@ private static GraphHopperServerConfiguration createConfig() {
         config.getGraphHopperConfiguration()
                 .putObject("graph.flag_encoders", "foot")
                 .putObject("graph.location", GRAPH_LOC)
-                .putObject("gtfs.file", "../reader-gtfs/files/sample-feed.zip").
+                .putObject("gtfs.file", "../reader-gtfs/files/sample-feed").
                 setProfiles(Collections.singletonList(new Profile("foot").setVehicle("foot").setWeighting("fastest")));
         Helper.removeDir(new File(GRAPH_LOC));
         return config;

File: web/src/test/java/com/graphhopper/http/resources/PtRouteResourceTest.java
Patch:
@@ -52,7 +52,7 @@ private static GraphHopperServerConfiguration createConfig() {
         GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();
         config.getGraphHopperConfiguration().
                 putObject("datareader.file", "../reader-gtfs/files/beatty.osm").
-                putObject("gtfs.file", "../reader-gtfs/files/sample-feed.zip").
+                putObject("gtfs.file", "../reader-gtfs/files/sample-feed").
                 putObject("graph.location", DIR).
                 setProfiles(Collections.singletonList(new Profile("foot").setVehicle("foot").setWeighting("fastest")));
         return config;

File: core/src/main/java/com/graphhopper/storage/BaseGraphNodesAndEdges.java
Patch:
@@ -63,8 +63,8 @@ class BaseGraphNodesAndEdges {
     private boolean frozen;
 
     public BaseGraphNodesAndEdges(Directory dir, int intsForFlags, boolean withElevation, boolean withTurnCosts, int segmentSize) {
-        nodes = dir.create("nodes", DAType.getPreferredInt(dir.getDefaultType()), segmentSize);
-        edges = dir.create("edges", DAType.getPreferredInt(dir.getDefaultType()), segmentSize);
+        nodes = dir.create("nodes", dir.getDefaultType("nodes", true), segmentSize);
+        edges = dir.create("edges", dir.getDefaultType("edges", true), segmentSize);
         this.intsForFlags = intsForFlags;
         this.withTurnCosts = withTurnCosts;
         this.withElevation = withElevation;

File: core/src/main/java/com/graphhopper/storage/CHStorage.java
Patch:
@@ -68,8 +68,8 @@ public class CHStorage {
 
     public CHStorage(Directory dir, String name, int segmentSize, boolean edgeBased) {
         this.edgeBased = edgeBased;
-        this.nodesCH = dir.create("nodes_ch_" + name, DAType.getPreferredInt(dir.getDefaultType()), segmentSize);
-        this.shortcuts = dir.create("shortcuts_" + name, DAType.getPreferredInt(dir.getDefaultType()), segmentSize);
+        this.nodesCH = dir.create("nodes_ch_" + name, dir.getDefaultType("nodes_ch_" + name, true), segmentSize);
+        this.shortcuts = dir.create("shortcuts_" + name, dir.getDefaultType("shortcuts_" + name, true), segmentSize);
         // shortcuts are stored consecutively using this layout (the last two entries only exist for edge-based):
         // NODEA | NODEB | WEIGHT | SKIP_EDGE1 | SKIP_EDGE2 | S_ORIG_FIRST | S_ORIG_LAST
         S_NODEA = 0;

File: core/src/main/java/com/graphhopper/storage/Directory.java
Patch:
@@ -56,6 +56,8 @@ public interface Directory {
      */
     DAType getDefaultType();
 
+    DAType getDefaultType(String dataAccess, boolean preferInts);
+
     /**
      * Removes all contained objects from the directory and releases its resources.
      */

File: core/src/main/java/com/graphhopper/storage/index/LineIntIndex.java
Patch:
@@ -21,7 +21,6 @@
 import com.carrotsearch.hppc.IntArrayList;
 import com.carrotsearch.hppc.IntHashSet;
 import com.graphhopper.geohash.SpatialKeyAlgo;
-import com.graphhopper.storage.DAType;
 import com.graphhopper.storage.DataAccess;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.util.Constants;
@@ -49,7 +48,7 @@ public class LineIntIndex {
 
     public LineIntIndex(BBox bBox, Directory dir, String name) {
         this.bounds = bBox;
-        this.dataAccess = dir.create(name, DAType.getPreferredInt(dir.getDefaultType()));
+        this.dataAccess = dir.create(name, dir.getDefaultType(name, true));
     }
 
     public boolean loadExisting() {

File: web-api/src/main/java/com/graphhopper/util/PMap.java
Patch:
@@ -27,7 +27,7 @@
  * @author Peter Karich
  */
 public class PMap {
-    private final Map<String, Object> map;
+    private final LinkedHashMap<String, Object> map;
 
     public PMap() {
         this(5);

File: core/src/main/java/com/graphhopper/routing/util/HeadingEdgeFilter.java
Patch:
@@ -62,7 +62,6 @@ static double getHeadingOfGeometryNearPoint(EdgeIteratorState edgeState, GHPoint
 
         double fromLat = points.getLat(closestPoint - 1), fromLon = points.getLon(closestPoint - 1);
         double toLat = points.getLat(closestPoint), toLon = points.getLon(closestPoint);
-        // calcOrientation returns value relative to East, but heading is relative to North
-        return (Math.toDegrees(AngleCalc.ANGLE_CALC.calcOrientation(fromLat, fromLon, toLat, toLon)) + 90) % 360;
+        return AngleCalc.ANGLE_CALC.calcAzimuth(fromLat, fromLon, toLat, toLon);
     }
 }

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -238,12 +238,12 @@ public void testUTurn() {
         assertFalse(rsp.hasErrors());
         ResponsePath res = rsp.getBest();
         InstructionList il = res.getInstructions();
-        assertEquals(3, il.size());
+        assertEquals(4, il.size());
 
         // Initial U-turn
-        assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(0).getTurnDescription(tr));
-        // Second U-turn to get to destination
         assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(1).getTurnDescription(tr));
+        // Second U-turn to get to destination
+        assertEquals("make a U-turn onto Avenue Princesse Grace", il.get(2).getTurnDescription(tr));
     }
 
     private void testImportCloseAndLoad(boolean ch, boolean lm, boolean sort, boolean custom) {

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -230,7 +230,7 @@ public void testUTurn() {
         request.addPoint(new GHPoint(43.743887, 7.431151));
         request.addPoint(new GHPoint(43.744007, 7.431076));
         //Force initial U-Turn
-        request.setHeadings(Arrays.asList(200., Double.NaN));
+        request.setHeadings(Arrays.asList(200.));
 
         request.setAlgorithm(ASTAR).setProfile(profile);
         GHResponse rsp = hopper.route(request);

File: core/src/main/java/com/graphhopper/util/CHEdgeIteratorState.java
Patch:
@@ -58,6 +58,4 @@ public interface CHEdgeIteratorState extends EdgeIteratorState {
      * Sets the weight calculated from Weighting.calcWeight, only applicable if isShortcut is true.
      */
     CHEdgeIteratorState setWeight(double weight);
-
-    void setFlagsAndWeight(int flags, double weight);
 }

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -227,7 +227,7 @@ public void testSpeedAndPriority() {
         way.setTag("highway", "residential");
         way.setTag("bicycle", "use_sidepath");
         assertEquals(18, encoder.getSpeed(way));
-        assertPriority(PREFER.getValue(), way);
+        assertPriority(REACH_DESTINATION.getValue(), way);
 
         way.clearTags();
         way.setTag("highway", "steps");

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperGtfsIT.java
Patch:
@@ -402,9 +402,9 @@ public void testVeryShortProfileQuery() {
         ghRequest.setProfileQuery(true);
         ghRequest.setMaxProfileDuration(Duration.ofSeconds(1));
         GHResponse response = ptRouter.route(ghRequest);
-        assertEquals(time(1, 20), response.getBest().getTime(), "Expected travel time == scheduled travel time");
-        // This should behave exactly as a not-profile-query, also performance-wise
-        assertThat(response.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(200);
+        assertEquals(time(1, 20), response.getAll().get(0).getTime(), "Expected travel time == scheduled travel time");
+        assertEquals(time(7, 20), response.getAll().get(1).getTime(), "Expected travel time == scheduled travel time");
+        assertThat(response.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(903);
     }
 
     @Test

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperMultimodalIT.java
Patch:
@@ -107,7 +107,7 @@ public void testDepartureTimeOfAccessLegInProfileQuery() {
         assertThat(arrivalTime(walkSolution.getLegs().get(0))).isBefore(arrivalTime(firstTransitSolution.getLegs().get(firstTransitSolution.getLegs().size()-1)));
         assertThat(routeDuration(firstTransitSolution)).isLessThanOrEqualTo(routeDuration(walkSolution));
 
-        assertThat(response.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(206);
+        assertThat(response.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(271);
     }
 
     @Test
@@ -237,7 +237,7 @@ public void testProfileQueryDoesntEndPrematurely() {
         assertThat(response1.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(142);
         ghRequest.setLimitSolutions(3);
         GHResponse response3 = graphHopper.route(ghRequest);
-        assertThat(response3.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(230);
+        assertThat(response3.getHints().getInt("visited_nodes.sum", Integer.MAX_VALUE)).isLessThanOrEqualTo(234);
         assertThat(response1.getAll().get(0).getTime()).isEqualTo(response3.getAll().get(0).getTime());
         ghRequest.setLimitSolutions(5);
         GHResponse response5 = graphHopper.route(ghRequest);

File: reader-gtfs/src/main/java/com/conveyal/gtfs/GTFSFeed.java
Patch:
@@ -384,15 +384,14 @@ public class FirstAndLastStopsDoNotHaveTimes extends RuntimeException {
 
     /** Create a GTFS feed in a temp file */
     public GTFSFeed () {
-        // calls to this must be first operation in constructor - why, Java?
         this(DBMaker.newTempFileDB()
                 .transactionDisable()
                 .mmapFileEnable()
                 .asyncWriteEnable()
                 .deleteFilesAfterClose()
+                .closeOnJvmShutdown()
                 .compressionEnable()
-                // .cacheSize(1024 * 1024) this bloats memory consumption
-                .make()); // TODO db.close();
+                .make());
     }
 
     /** Create a GTFS feed connected to a particular DB, which will be created if it does not exist. */

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtRouterImpl.java
Patch:
@@ -318,7 +318,6 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
                     }
                 }
             }
-            router.postMortemCheck();
 
             List<List<Label.Transition>> paths = new ArrayList<>();
             for (Label discoveredSolution : discoveredSolutions) {

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -35,7 +35,6 @@ public BikeFlagEncoder(PMap properties) {
                 properties.getInt("speed_factor", 2),
                 properties.getBool("turn_costs", false) ? 1 : 0);
 
-        blockBarriersByDefault(properties.getBool("block_barriers", false));
         blockPrivate(properties.getBool("block_private", true));
         blockFords(properties.getBool("block_fords", false));
     }
@@ -72,7 +71,7 @@ public BikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
         // SmoothnessSpeed <= smoothnessFactorPushingSectionThreshold gets mapped to speed PUSHING_SECTION_SPEED
         setSmoothnessSpeedFactor(com.graphhopper.routing.ev.Smoothness.IMPASSABLE, smoothnessFactorPushingSectionThreshold);
 
-        absoluteBarriers.add("kissing_gate");
+        blockByDefaultBarriers.add("kissing_gate");
         setSpecificClassBicycle("touring");
     }
 

File: core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
Patch:
@@ -43,7 +43,6 @@ public HikeFlagEncoder(PMap properties) {
 
         blockPrivate(properties.getBool("block_private", true));
         blockFords(properties.getBool("block_fords", false));
-        blockBarriersByDefault(properties.getBool("block_barriers", false));
         speedTwoDirections = properties.getBool("speed_two_directions", false);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -53,8 +53,8 @@ public MotorcycleFlagEncoder() {
     public MotorcycleFlagEncoder(PMap properties) {
         super(properties.putObject("speed_two_directions", true));
 
-        absoluteBarriers.remove("bus_trap");
-        absoluteBarriers.remove("sump_buster");
+        blockByDefaultBarriers.remove("bus_trap");
+        blockByDefaultBarriers.remove("sump_buster");
 
         trackTypeSpeedMap.clear();
         defaultSpeedMap.clear();

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -42,7 +42,6 @@ public MountainBikeFlagEncoder(PMap properties) {
                 properties.getDouble("speed_factor", 2),
                 properties.getBool("turn_costs", false) ? 1 : 0);
 
-        blockBarriersByDefault(properties.getBool("block_barriers", false));
         blockPrivate(properties.getBool("block_private", true));
         blockFords(properties.getBool("block_fords", false));
     }
@@ -138,7 +137,7 @@ protected MountainBikeFlagEncoder(int speedBits, double speedFactor, int maxTurn
         // SmoothnessSpeed <= smoothnessFactorPushingSectionThreshold gets mapped to speed PUSHING_SECTION_SPEED
         setSmoothnessSpeedFactor(com.graphhopper.routing.ev.Smoothness.IMPASSABLE, smoothnessFactorPushingSectionThreshold);
 
-        potentialBarriers.add("kissing_gate");
+        passByDefaultBarriers.add("kissing_gate");
         setSpecificClassBicycle("mtb");
     }
 

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -41,7 +41,6 @@ public RacingBikeFlagEncoder(PMap properties) {
                 properties.getDouble("speed_factor", 2),
                 properties.getBool("turn_costs", false) ? 1 : 0);
 
-        blockBarriersByDefault(properties.getBool("block_barriers", false));
         blockPrivate(properties.getBool("block_private", true));
         blockFords(properties.getBool("block_fords", false));
     }
@@ -127,7 +126,7 @@ protected RacingBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCo
         routeMap.put(REGIONAL, VERY_NICE.getValue());
         routeMap.put(LOCAL, UNCHANGED.getValue());
 
-        absoluteBarriers.add("kissing_gate");
+        blockByDefaultBarriers.add("kissing_gate");
 
         setAvoidSpeedLimit(81);
         setSpecificClassBicycle("roadcycling");

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -170,13 +170,13 @@ public void testMoscow() {
         List<Query> queries = new ArrayList<>();
         // choose perpendicular
         // http://localhost:8989/?point=55.818994%2C37.595354&point=55.819175%2C37.596931
-        queries.add(new Query(55.818994, 37.595354, 55.819175, 37.596931, 1052, 14));
+        queries.add(new Query(55.818891, 37.59515, 55.81997, 37.59854, 1052, 14));
         // should choose the closest road not the other one (opposite direction)
         // http://localhost:8989/?point=55.818898%2C37.59661&point=55.819066%2C37.596374
-        queries.add(new Query(55.818898, 37.59661, 55.819066, 37.596374, 24, 2));
+        queries.add(new Query(55.818536, 37.595848, 55.818702, 37.595564, 24, 2));
         // respect one way!
         // http://localhost:8989/?point=55.819066%2C37.596374&point=55.818898%2C37.59661
-        queries.add(new Query(55.819066, 37.596374, 55.818898, 37.59661, 1114, 23));
+        queries.add(new Query(55.818702, 37.595564, 55.818536, 37.595848, 1114, 23));
         GraphHopper hopper = createHopper(MOSCOW,
                 new Profile("car").setVehicle("car").setWeighting("fastest"));
         hopper.setMinNetworkSize(200);

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -632,8 +632,8 @@ public void testBarrierAccess() {
         node = new ReaderNode(1, -1, -1);
         node.setTag("barrier", "kissing_gate");
         node.setTag("bicycle", "yes");
-        // barrier!
-        assertFalse(encoder.handleNodeTags(node) == 0);
+        // no barrier!
+        assertTrue(encoder.handleNodeTags(node) == 0);
 
         // Test if cattle_grid is non blocking
         node = new ReaderNode(1, -1, -1);

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -353,7 +353,7 @@ public void testPathDetailsWithoutGraphHopperWeb() {
         int firstLink = edgeIds.get(0).get(2).asInt();
         int lastLink = edgeIds.get(edgeIds.size() - 1).get(2).asInt();
         assertEquals(880, firstLink);
-        assertEquals(1421, lastLink);
+        assertEquals(1420, lastLink);
 
         JsonNode maxSpeed = details.get("max_speed");
         assertEquals(-1, maxSpeed.get(0).get(2).asDouble(-1), .01);

File: web/src/test/java/com/graphhopper/http/resources/SPTResourceTest.java
Patch:
@@ -96,9 +96,9 @@ public void requestSPTEdgeBased() {
         String[] lines = rspCsvString.split("\n");
         assertTrue(lines.length > 500);
         assertEquals("prev_node_id,edge_id,node_id,time,distance", lines[0]);
-        assertEquals("-1,-1,1944,0,0", lines[1]);
-        assertEquals("1944,2273,1324,3817,74", lines[2]);
-        assertEquals("1944,2272,263,13496,262", lines[3]);
+        assertEquals("-1,-1,1941,0,0", lines[1]);
+        assertEquals("1941,2270,1324,3817,74", lines[2]);
+        assertEquals("1941,2269,263,13496,262", lines[3]);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -428,7 +428,7 @@ static double findMaxSpeed(List<Statement> speedStatements, final double maxSpee
         List<List<Statement>> blocks = splitIntoBlocks(speedStatements);
         for (List<Statement> block : blocks)
             result = getMaxSpeedForBlock(block, result);
-        if (maxSpeed <= 0)
+        if (result <= 0)
             throw new IllegalStateException("max speed is <= 0");
         return result;
     }

File: core/src/test/java/com/graphhopper/routing/DirectedRoutingTest.java
Patch:
@@ -183,7 +183,7 @@ public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
     private static class RepeatedFixtureProvider implements ArgumentsProvider {
         @Override
         public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
-            return Stream.generate(() -> new FixtureProvider().provideArguments(context)).flatMap(s -> s).limit(10);
+            return Stream.generate(() -> new FixtureProvider().provideArguments(context)).limit(10).flatMap(s -> s);
         }
     }
 

File: core/src/test/java/com/graphhopper/routing/RandomizedRoutingTest.java
Patch:
@@ -109,12 +109,11 @@ private static class Fixture {
         private RoutingCHGraph routingCHGraph;
         private PrepareLandmarks lm;
 
-        public Fixture(Algo algo, boolean prepareCH, boolean prepareLM, TraversalMode traversalMode) {
+        Fixture(Algo algo, boolean prepareCH, boolean prepareLM, TraversalMode traversalMode) {
             this.algo = algo;
             this.prepareCH = prepareCH;
             this.prepareLM = prepareLM;
             this.traversalMode = traversalMode;
-
             maxTurnCosts = 10;
             dir = new RAMDirectory();
             // todo: this test only works with speedTwoDirections=false (as long as loops are enabled), otherwise it will
@@ -287,7 +286,7 @@ private enum Algo {
     private static class RepeatedFixtureProvider implements ArgumentsProvider {
         @Override
         public Stream<? extends Arguments> provideArguments(ExtensionContext context) {
-            return Stream.generate(() -> new FixtureProvider().provideArguments(context)).flatMap(s -> s).limit(5);
+            return Stream.generate(() -> new FixtureProvider().provideArguments(context)).limit(5).flatMap(s -> s);
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -57,6 +57,8 @@ public EncodedValue create(String string) {
             enc = MaxLength.create();
         } else if (Surface.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(Surface.KEY, Surface.class);
+        } else if (Smoothness.KEY.equals(name)) {
+            enc = new EnumEncodedValue<>(Smoothness.KEY, Smoothness.class);
         } else if (Toll.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(Toll.KEY, Toll.class);
         } else if (TrackType.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -338,7 +338,8 @@ public EncodingManager build() {
                         _addRelationTagParser(new OSMBikeNetworkTagParser());
                     if (!em.hasEncodedValue(GetOffBike.KEY))
                         _addEdgeTagParser(new OSMGetOffBikeParser(), false, false);
-
+                    if (!em.hasEncodedValue(Smoothness.KEY))
+                        _addEdgeTagParser(new OSMSmoothnessParser(), false, false);
                 } else if (encoder instanceof FootFlagEncoder) {
                     if (!em.hasEncodedValue(RouteNetwork.key("foot")))
                         _addRelationTagParser(new OSMFootNetworkTagParser());

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultTagParserFactory.java
Patch:
@@ -54,6 +54,8 @@ else if (name.equals(MaxLength.KEY))
             return new OSMMaxLengthParser();
         else if (name.equals(Surface.KEY))
             return new OSMSurfaceParser();
+        else if (name.equals(Smoothness.KEY))
+            return new OSMSmoothnessParser();
         else if (name.equals(Toll.KEY))
             return new OSMTollParser();
         else if (name.equals(TrackType.KEY))

File: core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
Patch:
@@ -74,7 +74,7 @@ public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requested
                 builders.add(new BooleanDetails(key, evl.getBooleanEncodedValue(key)));
         }
 
-        for (String key : Arrays.asList(RoadClass.KEY, RoadEnvironment.KEY, Surface.KEY, RoadAccess.KEY,
+        for (String key : Arrays.asList(RoadClass.KEY, RoadEnvironment.KEY, Surface.KEY, Smoothness.KEY, RoadAccess.KEY,
                 BikeNetwork.KEY, FootNetwork.KEY, Toll.KEY, TrackType.KEY, Hazmat.KEY, HazmatTunnel.KEY,
                 HazmatWater.KEY, Country.KEY)) {
             if (requestedPathDetails.contains(key) && evl.hasEncodedValue(key))

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -422,7 +422,7 @@ public void testAlternativeRoutesBike() {
 
         assertEquals(3, rsp.getAll().size());
         // via ramsenthal
-        assertEquals(2863, rsp.getAll().get(0).getTime() / 1000);
+        assertEquals(2865, rsp.getAll().get(0).getTime() / 1000);
         // via unterwaiz
         assertEquals(3318, rsp.getAll().get(1).getTime() / 1000);
         // via eselslohe -> theta; BTW: here smaller time as 2nd alternative due to priority influences time order

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -134,7 +134,7 @@ public static List<Profile> resolveCustomModelFiles(String customModelFolder, Li
                 if (customModelFileName.contains(File.separator))
                     throw new IllegalArgumentException("Use custom_model_folder for the custom_model_file parent");
                 // Somehow dropwizard makes it very hard to find out the folder of config.yml -> use an extra parameter for the folder
-                File file = new File(customModelFolder, customModelFileName);
+                File file = Paths.get(customModelFolder).resolve(customModelFileName).toFile();
                 try {
                     CustomModel customModel = (customModelFileName.endsWith(".json") ? jsonOM : yamlOM).readValue(file, CustomModel.class);
                     newProfiles.add(new CustomProfile(profile).setCustomModel(customModel));

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceCustomModelTest.java
Patch:
@@ -48,7 +48,7 @@ private static GraphHopperServerConfiguration createConfig() {
                 putObject("datareader.file", "../core/files/north-bayreuth.osm.gz").
                 putObject("graph.location", DIR).
                 putObject("graph.encoded_values", "max_height,max_weight,max_width,hazmat,toll,surface,track_type").
-                putObject("custom_model_folder", "./src/test/resources/com/graphhopper/http/resources/").
+                putObject("custom_model_folder", "./src/test/resources/com/graphhopper/http/resources").
                 setProfiles(Arrays.asList(
                         new CustomProfile("car").setCustomModel(new CustomModel()).setVehicle("car"),
                         new CustomProfile("bike").setCustomModel(new CustomModel()).setVehicle("bike"),

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -131,7 +131,7 @@ public static List<Profile> resolveCustomModelFiles(String customModelFolder, Li
             if ("empty".equals(customModelFileName))
                 newProfiles.add(new CustomProfile(profile).setCustomModel(new CustomModel()));
             else {
-                if (customModelFileName.contains("/"))
+                if (customModelFileName.contains(File.separator))
                     throw new IllegalArgumentException("Use custom_model_folder for the custom_model_file parent");
                 // Somehow dropwizard makes it very hard to find out the folder of config.yml -> use an extra parameter for the folder
                 File file = new File(customModelFolder, customModelFileName);

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -480,7 +480,7 @@ public void testMultiplePreparationsIdenticalView() {
 
         List<CHConfig> configs = Arrays.asList(carProfile, bikeProfile);
         GraphHopperStorage ghStorage = new GraphBuilder(tmpEncodingManager).setCHConfigs(configs).create();
-        initShortcutsGraph(ghStorage, carEncoder);
+        initShortcutsGraph(ghStorage, tmpCarEncoder);
         AllEdgesIterator iter = ghStorage.getAllEdges();
         while (iter.next()) {
             GHUtility.setSpeed(18, true, true, tmpBikeEncoder, iter);
@@ -501,7 +501,7 @@ public void testMultiplePreparationsDifferentView() {
         CHConfig bikeConfig = CHConfig.nodeBased("c2", new FastestWeighting(tmpBikeEncoder));
 
         GraphHopperStorage ghStorage = new GraphBuilder(tmpEncodingManager).setCHConfigs(carConfig, bikeConfig).create();
-        initShortcutsGraph(ghStorage, carEncoder);
+        initShortcutsGraph(ghStorage, tmpCarEncoder);
         AllEdgesIterator iter = ghStorage.getAllEdges();
         while (iter.next()) {
             GHUtility.setSpeed(18, true, true, tmpBikeEncoder, iter);

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java
Patch:
@@ -126,7 +126,8 @@ public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
             return Double.POSITIVE_INFINITY;
 
         double speed = edgeToSpeedMapping.get(edgeState, reverse);
-        assert speed <= maxSpeed * SPEED_CONV : "for " + getName() + " speed <= maxSpeed is violated, " + speed + " <= " + maxSpeed * SPEED_CONV;
+        if (speed > maxSpeed * SPEED_CONV)
+            throw new IllegalStateException("for " + getName() + " speed <= maxSpeed is violated, " + speed + " <= " + maxSpeed * SPEED_CONV);
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
         if (speed < 0)

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -242,7 +242,7 @@ public void onEdge(int edgeId) {
                         if (seenEdges.add(edgeId) && edgeFilter.accept(edge)) {
                             Snap snap = new Snap(queryLat, queryLon);
                             locationIndex.traverseEdge(queryLat, queryLon, edge, (node, normedDist, wayIndex, pos) -> {
-                                if ((pos != Snap.Position.TOWER || seenNodes.add(node)) && normedDist < snap.getQueryDistance()) {
+                                if (normedDist < snap.getQueryDistance()) {
                                     snap.setQueryDistance(normedDist);
                                     snap.setClosestNode(node);
                                     snap.setWayIndex(wayIndex);
@@ -252,7 +252,7 @@ public void onEdge(int edgeId) {
                             double dist = DIST_PLANE.calcDenormalizedDist(snap.getQueryDistance());
                             snap.setClosestEdge(edge);
                             snap.setQueryDistance(dist);
-                            if (snap.isValid()) {
+                            if (snap.isValid() && (snap.getSnappedPosition() != Snap.Position.TOWER || seenNodes.add(snap.getClosestNode()))) {
                                 snap.calcSnappedPoint(DistanceCalcEarth.DIST_EARTH);
                                 if (queryShape.contains(snap.getSnappedPoint().lat, snap.getSnappedPoint().lon)) {
                                     snaps.add(snap);

File: core/src/main/java/com/graphhopper/routing/AbstractNonCHBidirAlgo.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.carrotsearch.hppc.IntObjectMap;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;

File: core/src/main/java/com/graphhopper/routing/util/FiniteWeightFilter.java
Patch:
@@ -32,7 +32,7 @@ public FiniteWeightFilter(Weighting weighting) {
     }
 
     @Override
-    public boolean accept(EdgeIteratorState edgeState) {
+    public final boolean accept(EdgeIteratorState edgeState) {
         return Double.isFinite(weighting.calcEdgeWeightWithAccess(edgeState, false)) ||
                 Double.isFinite(weighting.calcEdgeWeightWithAccess(edgeState, true));
     }

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -679,7 +679,7 @@ public static EdgeIteratorState setSpeed(double averageSpeed, boolean fwd, boole
 
         BooleanEncodedValue accessEnc = encoder.getAccessEnc();
         DecimalEncodedValue avSpeedEnc = encoder.getAverageSpeedEnc();
-        edge.set(accessEnc, fwd).setReverse(accessEnc, bwd);
+        edge.set(accessEnc, fwd, bwd);
         if (fwd)
             edge.set(avSpeedEnc, averageSpeed);
         if (bwd && avSpeedEnc.isStoreTwoDirections())

File: core/src/test/java/com/graphhopper/routing/RandomizedRoutingTest.java
Patch:
@@ -24,6 +24,7 @@
 import com.graphhopper.RepeatRule;
 import com.graphhopper.routing.ch.CHRoutingAlgorithmFactory;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
+import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.lm.LMConfig;
 import com.graphhopper.routing.lm.PerfectApproximator;
 import com.graphhopper.routing.lm.PrepareLandmarks;
@@ -132,15 +133,15 @@ public void init() {
         // fail sometimes for edge-based algorithms, #1631, but maybe we can should disable different fwd/bwd speeds
         // only for loops instead?
         encoder = new CarFlagEncoder(5, 5, maxTurnCosts);
-        encodingManager = EncodingManager.create(encoder);
+        encodingManager = new EncodingManager.Builder().add(encoder).add(Subnetwork.create("car")).build();
         graph = new GraphBuilder(encodingManager)
                 .setCHConfigStrings("p1|car|fastest|node", "p2|car|fastest|edge")
                 .setDir(dir)
                 .create();
         turnCostStorage = graph.getTurnCostStorage();
         chConfigs = graph.getCHConfigs();
         // important: for LM preparation we need to use a weighting without turn costs #1960
-        lmConfig = new LMConfig("config", chConfigs.get(0).getWeighting());
+        lmConfig = new LMConfig("car", chConfigs.get(0).getWeighting());
         weighting = traversalMode.isEdgeBased() ? chConfigs.get(1).getWeighting() : chConfigs.get(0).getWeighting();
     }
 

File: core/src/test/java/com/graphhopper/routing/lm/LMApproximatorTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.RepeatRule;
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.Path;
+import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -50,7 +51,7 @@ public void randomGraph() {
     private void run(long seed) {
         Directory dir = new RAMDirectory();
         CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 1);
-        EncodingManager encodingManager = EncodingManager.create(encoder);
+        EncodingManager encodingManager = new EncodingManager.Builder().add(encoder).add(Subnetwork.create("car")).build();
         GraphHopperStorage graph = new GraphBuilder(encodingManager).setDir(dir).withTurnCosts(true).create();
 
         Random rnd = new Random(seed);
@@ -59,7 +60,7 @@ private void run(long seed) {
 
         Weighting weighting = new FastestWeighting(encoder);
 
-        PrepareLandmarks lm = new PrepareLandmarks(dir, graph, new LMConfig("c", weighting), 16);
+        PrepareLandmarks lm = new PrepareLandmarks(dir, graph, new LMConfig("car", weighting), 16);
         lm.setMaximumWeight(10000);
         lm.doWork();
         LandmarkStorage landmarkStorage = lm.getLandmarkStorage();

File: core/src/test/java/com/graphhopper/routing/lm/LMIssueTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ev.DecimalEncodedValue;
+import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -56,7 +57,7 @@ private enum Algo {
     public void init() {
         dir = new RAMDirectory();
         encoder = new CarFlagEncoder(5, 5, 1);
-        EncodingManager encodingManager = EncodingManager.create(encoder);
+        EncodingManager encodingManager = new EncodingManager.Builder().add(encoder).add(Subnetwork.create("car")).build();
         graph = new GraphBuilder(encodingManager)
                 .setDir(dir)
                 .create();
@@ -65,7 +66,7 @@ public void init() {
 
     private void preProcessGraph() {
         graph.freeze();
-        lm = new PrepareLandmarks(dir, graph, new LMConfig("c", weighting), 16);
+        lm = new PrepareLandmarks(dir, graph, new LMConfig("car", weighting), 16);
         lm.setMaximumWeight(10000);
         lm.doWork();
     }

File: core/src/test/java/com/graphhopper/routing/subnetwork/EdgeBasedTarjanSCCTest.java
Patch:
@@ -22,6 +22,9 @@
 import com.carrotsearch.hppc.cursors.IntCursor;
 import com.graphhopper.routing.subnetwork.EdgeBasedTarjanSCC.ConnectedComponents;
 import com.graphhopper.routing.subnetwork.TarjanSCCTest.IntWithArray;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.GraphHopperStorage;

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java
Patch:
@@ -4,6 +4,7 @@
 import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
 import com.graphhopper.reader.ReaderWay;
+import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.EncodingManager.Access;
@@ -23,7 +24,7 @@ public void testLoad() {
         String defaultGraphLoc = "./target/ghstorage_lm";
         Helper.removeDir(new File(defaultGraphLoc));
         CarFlagEncoder carFlagEncoder = new CarFlagEncoder();
-        EncodingManager encodingManager = EncodingManager.create(carFlagEncoder);
+        EncodingManager encodingManager = new EncodingManager.Builder().add(carFlagEncoder).add(Subnetwork.create("my_profile")).build();
         GraphHopperStorage graph = GraphBuilder.start(encodingManager).setRAM(defaultGraphLoc, true).create();
 
         // 0-1

File: core/src/main/java/com/graphhopper/routing/ev/DefaultEncodedValueFactory.java
Patch:
@@ -69,6 +69,8 @@ public EncodedValue create(String string) {
             enc = new EnumEncodedValue<>(HazmatTunnel.KEY, HazmatTunnel.class);
         } else if (HazmatWater.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(HazmatWater.KEY, HazmatWater.class);
+        } else if (name.endsWith(Subnetwork.key(""))) {
+            enc = new SimpleBooleanEncodedValue(name);
         } else {
             throw new IllegalArgumentException("DefaultEncodedValueFactory cannot find EncodedValue " + name);
         }

File: core/src/test/java/com/graphhopper/routing/HeadingRoutingTest.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.ResponsePath;
 import com.graphhopper.config.Profile;
+import com.graphhopper.routing.ev.Subnetwork;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.*;
@@ -195,7 +196,7 @@ private Router createRouter(GraphHopperStorage graph) {
 
     private GraphHopperStorage createSquareGraph() {
         CarFlagEncoder carEncoder = new CarFlagEncoder();
-        EncodingManager encodingManager = EncodingManager.create(carEncoder);
+        EncodingManager encodingManager = new EncodingManager.Builder().add(carEncoder).add(Subnetwork.create("profile")).build();
         GraphHopperStorage g = new GraphBuilder(encodingManager).create();
 
         //   2---3---4

File: reader-osm/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -2183,7 +2183,7 @@ public void testNoLoad() {
         String vehicle = "car";
         String weighting = "fastest";
         final GraphHopper hopper = new GraphHopper().
-                setProfiles(new Profile(profile).setVehicle(vehicle).setVehicle(weighting));
+                setProfiles(new Profile(profile).setVehicle(vehicle).setWeighting(weighting));
         IllegalStateException e = assertThrows(IllegalStateException.class, () -> hopper.route(new GHRequest(42, 10.4, 42, 10).setProfile(profile)));
         assertTrue(e.getMessage().startsWith("Do a successful call to load or importOrLoad before routing"), e.getMessage());
     }

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -7,6 +7,7 @@
 import com.graphhopper.routing.ProfileResolver;
 import com.graphhopper.routing.ev.*;
 import com.graphhopper.routing.querygraph.QueryGraph;
+import com.graphhopper.routing.util.DefaultSnapFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FiniteWeightFilter;
 import com.graphhopper.routing.util.TraversalMode;
@@ -97,12 +98,13 @@ public Response doGet(
         LocationIndex locationIndex = graphHopper.getLocationIndex();
         Graph graph = graphHopper.getGraphHopperStorage();
         Weighting weighting = graphHopper.createWeighting(profile, hintsMap);
+        BooleanEncodedValue inSubnetworkEnc = graphHopper.getEncodingManager().getBooleanEncodedValue(Subnetwork.key(profileName));
         if (hintsMap.has(Parameters.Routing.BLOCK_AREA)) {
             GraphEdgeIdFinder.BlockArea blockArea = GraphEdgeIdFinder.createBlockArea(graph, locationIndex,
                     Collections.singletonList(point.get()), hintsMap, new FiniteWeightFilter(weighting));
             weighting = new BlockAreaWeighting(weighting, blockArea);
         }
-        Snap snap = locationIndex.findClosest(point.get().lat, point.get().lon, new FiniteWeightFilter(weighting));
+        Snap snap = locationIndex.findClosest(point.get().lat, point.get().lon, new DefaultSnapFilter(weighting, inSubnetworkEnc));
         if (!snap.isValid())
             throw new IllegalArgumentException("Point not found:" + point);
         QueryGraph queryGraph = QueryGraph.create(graph, snap);

File: web/src/main/java/com/graphhopper/http/cli/MatchCommand.java
Patch:
@@ -108,8 +108,6 @@ protected void run(Bootstrap<GraphHopperServerConfiguration> bootstrap, Namespac
         final boolean withRoute = !args.getString("instructions").isEmpty();
         XmlMapper xmlMapper = new XmlMapper();
 
-        Weighting weighting = hopper.createWeighting(hopper.getProfiles().get(0), hints);
-
         for (File gpxFile : args.<File>getList("gpx")) {
             try {
                 importSW.start();
@@ -132,7 +130,7 @@ protected void run(Bootstrap<GraphHopperServerConfiguration> bootstrap, Namespac
                 String outFile = gpxFile.getAbsolutePath() + ".res.gpx";
                 System.out.println("\texport results to:" + outFile);
 
-                ResponsePath responsePath = new PathMerger(mr.getGraph(), weighting).
+                ResponsePath responsePath = new PathMerger(mr.getGraph(), mr.getWeighting()).
                         doWork(PointList.EMPTY, Collections.singletonList(mr.getMergedPath()), hopper.getEncodingManager(), tr);
                 if (responsePath.hasErrors()) {
                     System.err.println("Problem with file " + gpxFile + ", " + responsePath.getErrors());

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.ev.*;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
@@ -98,8 +98,8 @@ public InstructionsFromEdges(Graph graph, Weighting weighting, EncodedValueLooku
         prevNode = -1;
         prevInRoundabout = false;
         prevName = null;
-        outEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
-        crossingExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.allEdges(encoder.getAccessEnc()));
+        outEdgeExplorer = graph.createEdgeExplorer(AccessFilter.outEdges(encoder.getAccessEnc()));
+        crossingExplorer = graph.createEdgeExplorer(AccessFilter.allEdges(encoder.getAccessEnc()));
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/ch/ShortcutFilter.java
Patch:
@@ -42,7 +42,7 @@ public static ShortcutFilter allEdges() {
     }
 
     public boolean accept(CHEdgeIteratorState edgeState) {
-        // c.f. comment in DefaultEdgeFilter
+        // c.f. comment in AccessFilter
         if (edgeState.getBaseNode() == edgeState.getAdjNode()) {
             return edgeState.getFwdAccess() || edgeState.getBwdAccess();
         }

File: core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
Patch:
@@ -254,7 +254,7 @@ public void createLandmarks() {
         // we cannot reuse the components calculated in PrepareRoutingSubnetworks as the edgeIds changed in between (called graph.optimize)
         // also calculating subnetworks from scratch makes bigger problems when working with many oneways
         final EdgeFilter tmpFilter = tarjanFilter;
-        EdgeFilter edgeFilter = edge -> DefaultEdgeFilter.outEdges(encoder.getAccessEnc()).accept(edge) && tmpFilter.accept(edge);
+        EdgeFilter edgeFilter = edge -> AccessFilter.outEdges(encoder.getAccessEnc()).accept(edge) && tmpFilter.accept(edge);
         ConnectedComponents graphComponents = TarjanSCC.findComponents(graph, edgeFilter, true);
         if (logDetails)
             LOGGER.info("Calculated " + graphComponents.getComponents().size() + " subnetworks via tarjan in " + sw.stop().getSeconds() + "s, " + Helper.getMemInfo());

File: core/src/main/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.java
Patch:
@@ -22,7 +22,7 @@
 import com.carrotsearch.hppc.IntArrayList;
 import com.carrotsearch.hppc.cursors.IntCursor;
 import com.graphhopper.routing.ev.BooleanEncodedValue;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.routing.weighting.TurnCostProvider;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.util.*;
@@ -93,7 +93,7 @@ int removeSmallSubNetworks(PrepareJob job) {
     private int removeSmallSubNetworksEdgeBased(String jobName, BooleanEncodedValue accessEnc, TurnCostProvider turnCostProvider) {
         // partition graph into strongly connected components using Tarjan's algorithm
         StopWatch sw = new StopWatch().start();
-        EdgeBasedTarjanSCC.ConnectedComponents ccs = EdgeBasedTarjanSCC.findComponents(ghStorage, DefaultEdgeFilter.outEdges(accessEnc), turnCostProvider, false);
+        EdgeBasedTarjanSCC.ConnectedComponents ccs = EdgeBasedTarjanSCC.findComponents(ghStorage, AccessFilter.outEdges(accessEnc), turnCostProvider, false);
         List<IntArrayList> components = ccs.getComponents();
         BitSet singleEdgeComponents = ccs.getSingleEdgeComponents();
         long numSingleEdgeComponents = singleEdgeComponents.cardinality();

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMTurnRelationParser.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMTurnRelation;
 import com.graphhopper.routing.ev.*;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.TurnCostStorage;
 import com.graphhopper.util.EdgeExplorer;
@@ -73,11 +73,11 @@ public void handleTurnRelationTags(OSMTurnRelation turnRelation, ExternalInterna
     }
 
     private EdgeExplorer getInExplorer(Graph graph) {
-        return cachedInExplorer == null ? cachedInExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(accessEnc)) : cachedInExplorer;
+        return cachedInExplorer == null ? cachedInExplorer = graph.createEdgeExplorer(AccessFilter.inEdges(accessEnc)) : cachedInExplorer;
     }
 
     private EdgeExplorer getOutExplorer(Graph graph) {
-        return cachedOutExplorer == null ? cachedOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(accessEnc)) : cachedOutExplorer;
+        return cachedOutExplorer == null ? cachedOutExplorer = graph.createEdgeExplorer(AccessFilter.outEdges(accessEnc)) : cachedOutExplorer;
     }
 
     /**

File: core/src/main/java/com/graphhopper/storage/RoutingCHEdgeIteratorImpl.java
Patch:
@@ -76,7 +76,7 @@ private boolean hasAccess() {
         if (isShortcut()) {
             return shortcutFilter.accept((CHEdgeIteratorState) edgeIterator);
         } else {
-            // c.f. comment in DefaultEdgeFilter
+            // c.f. comment in AccessFilter
             if (edgeIterator.getBaseNode() == edgeIterator.getAdjNode()) {
                 return finiteWeight(false) || finiteWeight(true);
             }

File: core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
Patch:
@@ -40,7 +40,7 @@ public interface LocationIndex extends Storable<LocationIndex> {
      *
      * @param edgeFilter if a graph supports multiple vehicles we have to make sure that the entry
      *                   node into the graph is accessible from a selected vehicle. E.g. if you have a FOOT-query do:
-     *                   <pre>DefaultEdgeFilter.allEdges(footFlagEncoder);</pre>
+     *                   <pre>AccessFilter.allEdges(footFlagEncoder);</pre>
      * @return An object containing the closest node and edge for the specified location. The node id
      * has at least one edge which is accepted by the specified edgeFilter. If nothing is found
      * the method Snap.isValid will return false.

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -240,8 +240,8 @@ public static void addRandomTurnCosts(Graph graph, long seed, EncodingManager em
         double pCostIsRestriction = 0.1;
 
         DecimalEncodedValue turnCostEnc = em.getDecimalEncodedValue(TurnCost.key(encoder.toString()));
-        EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder.getAccessEnc()));
-        EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
+        EdgeExplorer inExplorer = graph.createEdgeExplorer(AccessFilter.inEdges(encoder.getAccessEnc()));
+        EdgeExplorer outExplorer = graph.createEdgeExplorer(AccessFilter.outEdges(encoder.getAccessEnc()));
         for (int node = 0; node < graph.getNodes(); ++node) {
             if (random.nextDouble() < pNodeHasTurnCosts) {
                 EdgeIterator inIter = inExplorer.setBaseNode(node);

File: core/src/test/java/com/graphhopper/routing/ch/CHTurnCostTest.java
Patch:
@@ -634,8 +634,8 @@ public void testFindPath_highlyConnectedGraph_compareWithDijkstra() {
             }
         }
         graph.freeze();
-        EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder.getAccessEnc()));
-        EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
+        EdgeExplorer inExplorer = graph.createEdgeExplorer(AccessFilter.inEdges(encoder.getAccessEnc()));
+        EdgeExplorer outExplorer = graph.createEdgeExplorer(AccessFilter.outEdges(encoder.getAccessEnc()));
 
         // add turn costs or restrictions
         for (int node = 0; node < size * size; ++node) {

File: core/src/test/java/com/graphhopper/routing/subnetwork/EdgeBasedTarjanSCCTest.java
Patch:
@@ -41,7 +41,7 @@
 class EdgeBasedTarjanSCCTest {
     private final FlagEncoder encoder = new CarFlagEncoder(5, 5, 1);
     private final EncodingManager em = EncodingManager.create(encoder);
-    private final EdgeFilter edgeFilter = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
+    private final EdgeFilter edgeFilter = AccessFilter.outEdges(encoder.getAccessEnc());
 
     @Test
     public void linearSingle() {

File: core/src/test/java/com/graphhopper/routing/subnetwork/TarjanSCCTest.java
Patch:
@@ -35,7 +35,7 @@
 class TarjanSCCTest {
     private final FlagEncoder encoder = new CarFlagEncoder();
     private final EncodingManager em = EncodingManager.create(encoder);
-    private final EdgeFilter edgeFilter = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
+    private final EdgeFilter edgeFilter = AccessFilter.outEdges(encoder.getAccessEnc());
 
     @Test
     public void testFindComponents() {

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -382,12 +382,12 @@ public void testSearchWithFilter_issue318() {
         index.prepareIndex();
         index.setMaxRegionSearch(8);
 
-        EdgeFilter carFilter = DefaultEdgeFilter.allEdges(carEncoder.getAccessEnc());
+        EdgeFilter carFilter = AccessFilter.allEdges(carEncoder.getAccessEnc());
         Snap snap = index.findClosest(0.03, 0.03, carFilter);
         assertTrue(snap.isValid());
         assertEquals(33, snap.getClosestNode());
 
-        EdgeFilter bikeFilter = DefaultEdgeFilter.allEdges(bikeEncoder.getAccessEnc());
+        EdgeFilter bikeFilter = AccessFilter.allEdges(bikeEncoder.getAccessEnc());
         snap = index.findClosest(0.03, 0.03, bikeFilter);
         assertTrue(snap.isValid());
         assertEquals(2, snap.getClosestNode());
@@ -620,7 +620,7 @@ public void testDifferentVehicles() {
 
         idx = (LocationIndexTree) createIndexNoPrepare(g, 500000).prepareIndex();
         FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
-        assertEquals(2, idx.findClosest(1, -1, DefaultEdgeFilter.allEdges(footEncoder.getAccessEnc())).getClosestNode());
+        assertEquals(2, idx.findClosest(1, -1, AccessFilter.allEdges(footEncoder.getAccessEnc())).getClosestNode());
         Helper.close((Closeable) g);
     }
 }

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GraphHopperGtfs.java
Patch:
@@ -24,8 +24,7 @@
 import com.graphhopper.GraphHopperConfig;
 import com.graphhopper.routing.ev.EnumEncodedValue;
 import com.graphhopper.routing.querygraph.QueryGraph;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
-import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.GraphHopperStorage;
@@ -156,7 +155,7 @@ private void interpolateTransfers(HashMap<String, GtfsReader> readers, Map<Strin
                     if (edgeIteratorState.get(ptEncodedValues.getTypeEnc()) == GtfsStorage.EdgeType.EXIT_PT) {
                         GtfsStorageI.PlatformDescriptor fromPlatformDescriptor = getGtfsStorage().getPlatformDescriptorByEdge().get(label.edge);
                         Transfers transfers = allTransfers.get(fromPlatformDescriptor.feed_id);
-                        DefaultEdgeFilter filter = DefaultEdgeFilter.outEdges(ptEncodedValues.getAccessEnc());
+                        AccessFilter filter = AccessFilter.outEdges(ptEncodedValues.getAccessEnc());
                         EdgeExplorer edgeExplorer = graphHopperStorage.createEdgeExplorer(filter);
                         EdgeIterator edgeIterator = edgeExplorer.setBaseNode(stationNode);
                         while (edgeIterator.next()) {

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtRouterImpl.java
Patch:
@@ -25,7 +25,7 @@
 import com.graphhopper.ResponsePath;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
@@ -188,7 +188,7 @@ GHResponse route() {
         }
 
         private Snap findByPoint(GHPoint point, int indexForErrorMessage) {
-            final EdgeFilter filter = DefaultEdgeFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot").getAccessEnc());
+            final EdgeFilter filter = AccessFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot").getAccessEnc());
             Snap source = locationIndex.findClosest(point.lat, point.lon, filter);
             if (!source.isValid()) {
                 throw new PointNotFoundException("Cannot find point: " + point, indexForErrorMessage);

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -308,7 +308,7 @@ public void testFoot() {
         assertEquals(GHUtility.asSet(n10, n30, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20)));
         assertEquals(GHUtility.asSet(n30, n40), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20)));
 
-        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder.getAccessEnc()));
+        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(AccessFilter.outEdges(footEncoder.getAccessEnc()));
         assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10)));
         assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30)));
         assertEquals(GHUtility.asSet(n10, n30), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20)));
@@ -956,8 +956,8 @@ protected void importOSM() {
             setGraphHopperStorage(tmpGraph);
             super.importOSM();
             carAccessEnc = carEncoder.getAccessEnc();
-            carOutExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.outEdges(carAccessEnc));
-            carAllExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.allEdges(carAccessEnc));
+            carOutExplorer = getGraphHopperStorage().createEdgeExplorer(AccessFilter.outEdges(carAccessEnc));
+            carAllExplorer = getGraphHopperStorage().createEdgeExplorer(AccessFilter.allEdges(carAccessEnc));
         }
 
         @Override

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -447,7 +447,7 @@ private void measureLocationIndex(Graph g, final LocationIndex idx, int count) {
     private void measureGraphTraversal(final Graph graph, final FlagEncoder encoder, int count) {
         final Random rand = new Random(seed);
 
-        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
+        EdgeFilter outFilter = AccessFilter.outEdges(encoder.getAccessEnc());
         final EdgeExplorer outExplorer = graph.createEdgeExplorer(outFilter);
         MiniPerfTest miniPerf = new MiniPerfTest().setIterations(count).start((warmup, run) -> {
             int nodeId = rand.nextInt(maxNode);
@@ -488,7 +488,7 @@ private void measureGraphTraversalCH(final CHGraph lg, final FlagEncoder encoder
         });
         print("unit_testsCH.get_weight", miniPerf);
 
-        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
+        EdgeFilter outFilter = AccessFilter.outEdges(encoder.getAccessEnc());
         final CHEdgeExplorer outExplorer = lg.createEdgeExplorer(outFilter);
         miniPerf = new MiniPerfTest().setIterations(count).start((warmup, run) -> {
             int nodeId = rand.nextInt(maxNode);
@@ -607,7 +607,7 @@ private void measureRouting(final GraphHopper hopper, final QuerySettings queryS
         final AtomicInteger failedCount = new AtomicInteger(0);
         final DistanceCalc distCalc = new DistanceCalcEarth();
 
-        final EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(hopper.getEncodingManager().getEncoder(vehicle).getAccessEnc());
+        final EdgeFilter edgeFilter = AccessFilter.allEdges(hopper.getEncodingManager().getEncoder(vehicle).getAccessEnc());
         final EdgeExplorer edgeExplorer = g.createEdgeExplorer(edgeFilter);
         final AtomicLong visitedNodesSum = new AtomicLong(0);
         final AtomicLong maxVisitedNodes = new AtomicLong(0);

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -405,7 +405,7 @@ private Path calcPath(RoutingAlgorithm algo) {
 //
 ////        System.out.println("path " + from + "->" + to);
 //        return algo.calcPath(from, to);
-        // System.out.println(GraphUtility.getNodeInfo(graph, 60139, DefaultEdgeFilter.allEdges(new CarFlagEncoder()).direction(false, true)));
+        // System.out.println(GraphUtility.getNodeInfo(graph, 60139, AccessFilter.allEdges(new CarFlagEncoder()).direction(false, true)));
         // System.out.println(((GraphStorage) graph).debug(202947, 10));
 //        GraphUtility.printInfo(graph, 106511, 10);
         return algo.calcPath(162810, 35120);

File: web-bundle/src/main/java/com/graphhopper/resources/PtIsochroneResource.java
Patch:
@@ -23,7 +23,7 @@
 import com.graphhopper.isochrone.algorithm.ReadableTriangulation;
 import com.graphhopper.jackson.ResponsePathSerializer;
 import com.graphhopper.routing.querygraph.QueryGraph;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.AccessFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.FastestWeighting;
@@ -98,7 +98,7 @@ public Response doGet(
         double targetZ = initialTime.toEpochMilli() + seconds * 1000;
 
         GeometryFactory geometryFactory = new GeometryFactory();
-        final EdgeFilter filter = DefaultEdgeFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot").getAccessEnc());
+        final EdgeFilter filter = AccessFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot").getAccessEnc());
         Snap snap = locationIndex.findClosest(source.lat, source.lon, filter);
         QueryGraph queryGraph = QueryGraph.create(graphHopperStorage, Collections.singletonList(snap));
         if (!snap.isValid()) {

File: core/src/test/java/com/graphhopper/routing/subnetwork/EdgeBasedTarjanSCCTest.java
Patch:
@@ -119,8 +119,7 @@ public void oneWayBridges() {
         GHUtility.setSpeed(60, true, true, encoder, g.edge(4, 5).setDistance(1));
         GHUtility.setSpeed(60, true, false, encoder, g.edge(5, 6).setDistance(1));
         GHUtility.setSpeed(60, true, true, encoder, g.edge(6, 7).setDistance(1));
-        EdgeBasedTarjanSCC tarjan = new EdgeBasedTarjanSCC(g, accessEnc, NO_TURN_COST_PROVIDER, false);
-        ConnectedComponents result = tarjan.findComponentsRecursive();
+        ConnectedComponents result = EdgeBasedTarjanSCC.findComponentsRecursive(g, edgeFilter, NO_TURN_COST_PROVIDER, false);
         assertEquals(16, result.getEdgeKeys());
         assertEquals(7, result.getTotalComponents());
         // 0-1, 2-3-5-4-2 and 6-7

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -33,8 +33,8 @@
 import com.graphhopper.routing.lm.PrepareLandmarks;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.FiniteWeightFilter;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
@@ -226,7 +226,7 @@ public List<Snap> findCandidateSnaps(final double queryLat, final double queryLo
     }
 
     private List<Snap> findCandidateSnapsInBBox(double queryLat, double queryLon, BBox queryShape) {
-        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(weighting.getFlagEncoder().getAccessEnc());
+        EdgeFilter edgeFilter = new FiniteWeightFilter(weighting);
         List<Snap> snaps = new ArrayList<>();
         IntHashSet seenEdges = new IntHashSet();
         IntHashSet seenNodes = new IntHashSet();

File: core/src/main/java/com/graphhopper/reader/osm/pbf/PbfBlobDecoder.java
Patch:
@@ -356,6 +356,7 @@ public void run() {
             listener.complete(decodedEntities);
 
         } catch (RuntimeException e) {
+            // exception is properly rethrown in PbfDecoder.sendResultsToSink
             listener.error(e);
         }
     }

File: core/src/main/java/com/graphhopper/reader/osm/pbf/PbfStreamSplitter.java
Patch:
@@ -110,7 +110,7 @@ public void release() {
             try {
                 dis.close();
             } catch (IOException e) {
-                log.log(Level.SEVERE, "Unable to close PBF stream.", e);
+                throw new RuntimeException(e);
             }
         }
         dis = null;

File: core/src/main/java/com/graphhopper/reader/dem/CGIARProvider.java
Patch:
@@ -54,7 +54,7 @@ public CGIARProvider() {
 
     public CGIARProvider(String cacheDir) {
         // Alternative URLs for the CGIAR data can be found in #346
-        super("http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/",
+        super("https://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/",
                 cacheDir.isEmpty() ? "/tmp/cgiar" : cacheDir,
                 "GraphHopper CGIARReader",
                 6000, 6000,

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -44,7 +44,7 @@
 
 public class CustomModelParser {
     private static final AtomicLong longVal = new AtomicLong(1);
-    static final String IN_AREA_PREFIX = "in_area_";
+    static final String IN_AREA_PREFIX = "in_";
     private static final Set<String> allowedNames = new HashSet<>(Arrays.asList("edge", "Math"));
     private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);
     private static final String SCRIPT_FILE_DIR = System.getProperty(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_DIR, "./src/main/java/com/graphhopper/routing/weighting/custom");

File: core/src/test/java/com/graphhopper/routing/weighting/custom/CustomWeightingTest.java
Patch:
@@ -219,7 +219,7 @@ public void testArea() throws Exception {
 
         CustomModel vehicleModel = new CustomModel();
         vehicleModel.addToPriority(If("road_class == PRIMARY", MULTIPLY, 1.0));
-        vehicleModel.addToPriority(If("in_area_custom1", MULTIPLY, 0.5));
+        vehicleModel.addToPriority(If("in_custom1", MULTIPLY, 0.5));
 
         ObjectMapper om = new ObjectMapper().registerModule(new JtsModule());
         JsonFeature json = om.readValue("{ \"geometry\":{ \"type\": \"Polygon\", \"coordinates\": " +

File: core/src/test/java/com/graphhopper/routing/weighting/custom/ExpressionVisitorTest.java
Patch:
@@ -72,8 +72,8 @@ public void testConvertExpression() {
         assertEquals("toll == Toll.NO || road_class == RoadClass.NO", parseExpression("toll == NO || road_class == NO", validVariable, lookup).converted.toString());
 
         // convert in_area variable to function call:
-        assertEquals(CustomWeightingHelper.class.getSimpleName() + ".in(this.in_area_custom_1, edge)",
-                parseExpression("in_area_custom_1", validVariable, lookup).converted.toString());
+        assertEquals(CustomWeightingHelper.class.getSimpleName() + ".in(this.in_custom_1, edge)",
+                parseExpression("in_custom_1", validVariable, lookup).converted.toString());
 
         // no need to inject:
         assertNull(parseExpression("toll == Toll.NO", validVariable, lookup).converted);

File: web/src/test/java/com/graphhopper/http/resources/CustomWeightingRouteResourceTest.java
Patch:
@@ -102,7 +102,7 @@ public void testAvoidArea(double priority, double expectedDistance) {
         yamlQuery += "" +
                 "priority:\n" +
                 // a faster road (see #2021)? or maybe do both?
-                "  - if: in_area_custom1\n" +
+                "  - if: in_custom1\n" +
                 "    multiply_by: " + priority + "\n" +
                 "areas:\n" +
                 "  custom1:\n" +

File: core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionVisitor.java
Patch:
@@ -166,7 +166,7 @@ static void parseExpressions(StringBuilder expressions, NameValidator nameInCond
                     expressions.append("else ");
                 expressions.append("if (" + parseResult.converted + ") {" + statement.getOperation().build(statement.getValue()) + "; }\n");
             } else {
-                throw new IllegalArgumentException("The clause must be either 'if', 'else if' or 'else'");
+                throw new IllegalArgumentException("The clause must be either 'if', 'else_if' or 'else'");
             }
         }
         expressions.append(lastStmt);

File: web/src/test/java/com/graphhopper/http/resources/CustomWeightingRouteResourceLMTest.java
Patch:
@@ -40,7 +40,7 @@
 
 import static com.graphhopper.http.resources.CustomWeightingRouteResourceTest.yamlToJson;
 import static com.graphhopper.http.util.TestUtils.clientTarget;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 /**
  * @author Peter Karich
@@ -106,7 +106,7 @@ public void testCustomWeighting() {
                 "priority:\n" +
                 "  - if: road_class == RESIDENTIAL\n" +
                 "    multiply_by: 0.8\n" +
-                "  - else if: road_class == PRIMARY\n" +
+                "  - else_if: road_class == PRIMARY\n" +
                 "    multiply_by: 1\n" +
                 "  - else:\n" +
                 "    multiply_by: 0.66\n";

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -98,8 +98,8 @@ public InstructionsFromEdges(Graph graph, Weighting weighting, EncodedValueLooku
         prevNode = -1;
         prevInRoundabout = false;
         prevName = null;
-        outEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
-        crossingExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.allEdges(encoder));
+        outEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
+        crossingExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.allEdges(encoder.getAccessEnc()));
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/Router.java
Patch:
@@ -238,7 +238,7 @@ private Weighting createWeighting(Profile profile, PMap requestHints, List<GHPoi
             if (requestHints.has(Parameters.Routing.BLOCK_AREA)) {
                 FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());
                 GraphEdgeIdFinder.BlockArea blockArea = GraphEdgeIdFinder.createBlockArea(ghStorage, locationIndex,
-                        points, requestHints, DefaultEdgeFilter.allEdges(encoder));
+                        points, requestHints, DefaultEdgeFilter.allEdges(encoder.getAccessEnc()));
                 weighting = new BlockAreaWeighting(weighting, blockArea);
             }
             return weighting;

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -240,8 +240,8 @@ public static void addRandomTurnCosts(Graph graph, long seed, EncodingManager em
         double pCostIsRestriction = 0.1;
 
         DecimalEncodedValue turnCostEnc = em.getDecimalEncodedValue(TurnCost.key(encoder.toString()));
-        EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder));
-        EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
+        EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder.getAccessEnc()));
+        EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
         for (int node = 0; node < graph.getNodes(); ++node) {
             if (random.nextDouble() < pNodeHasTurnCosts) {
                 EdgeIterator inIter = inExplorer.setBaseNode(node);

File: core/src/test/java/com/graphhopper/reader/PrincetonReaderTest.java
Patch:
@@ -37,7 +37,7 @@
 public class PrincetonReaderTest {
     private FlagEncoder encoder = new CarFlagEncoder();
     private EncodingManager encodingManager = EncodingManager.create(encoder);
-    private EdgeFilter carOutEdges = DefaultEdgeFilter.outEdges(encoder);
+    private EdgeFilter carOutEdges = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
 
     @Test
     public void testRead() {

File: core/src/test/java/com/graphhopper/routing/ch/CHTurnCostTest.java
Patch:
@@ -634,8 +634,8 @@ public void testFindPath_highlyConnectedGraph_compareWithDijkstra() {
             }
         }
         graph.freeze();
-        EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder));
-        EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
+        EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder.getAccessEnc()));
+        EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
 
         // add turn costs or restrictions
         for (int node = 0; node < size * size; ++node) {

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -400,7 +400,7 @@ private double getWeight(Graph graph, Weighting w, int from, int to, boolean inc
     }
 
     private EdgeIteratorState getEdge(Graph graph, int from, int to, boolean incoming) {
-        EdgeFilter filter = incoming ? DefaultEdgeFilter.inEdges(carEncoder) : DefaultEdgeFilter.outEdges(carEncoder);
+        EdgeFilter filter = incoming ? DefaultEdgeFilter.inEdges(carEncoder.getAccessEnc()) : DefaultEdgeFilter.outEdges(carEncoder.getAccessEnc());
         EdgeIterator iter = graph.createEdgeExplorer(filter).setBaseNode(from);
         while (iter.next()) {
             if (iter.getAdjNode() == to) {
@@ -411,7 +411,7 @@ private EdgeIteratorState getEdge(Graph graph, int from, int to, boolean incomin
     }
 
     private CHEdgeIteratorState getEdge(CHGraph graph, int from, int to, boolean incoming) {
-        EdgeFilter filter = incoming ? DefaultEdgeFilter.inEdges(carEncoder) : DefaultEdgeFilter.outEdges(carEncoder);
+        EdgeFilter filter = incoming ? DefaultEdgeFilter.inEdges(carEncoder.getAccessEnc()) : DefaultEdgeFilter.outEdges(carEncoder.getAccessEnc());
         CHEdgeIterator iter = graph.createEdgeExplorer(filter).setBaseNode(from);
         while (iter.next()) {
             if (iter.getAdjNode() == to) {

File: core/src/test/java/com/graphhopper/routing/lm/LMApproximatorTest.java
Patch:
@@ -120,7 +120,7 @@ private void run(long seed) {
                     // That's a requirement for normal A*-implementations, because if it is violated,
                     // the heap-weight of settled nodes can decrease, and that would mean our
                     // stopping criterion is not sufficient.
-                    EdgeIterator neighbors = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder)).setBaseNode(v);
+                    EdgeIterator neighbors = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc())).setBaseNode(v);
                     while (neighbors.next()) {
                         int w = neighbors.getAdjNode();
                         double vw = weighting.calcEdgeWeight(neighbors, false);
@@ -131,7 +131,7 @@ private void run(long seed) {
                         }
                     }
 
-                    neighbors = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder)).setBaseNode(v);
+                    neighbors = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc())).setBaseNode(v);
                     while (neighbors.next()) {
                         int w = neighbors.getAdjNode();
                         double vw = weighting.calcEdgeWeight(neighbors, false);

File: core/src/test/java/com/graphhopper/routing/util/DefaultEdgeFilterTest.java
Patch:
@@ -50,8 +50,8 @@ public void testAccept_fwdLoopShortcut_acceptedByInExplorer() {
         graph.freeze();
         // add loop shortcut in 'fwd' direction
         addShortcut(chGraph, 0, 0, true, 0, 2);
-        CHEdgeExplorer outExplorer = chGraph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
-        CHEdgeExplorer inExplorer = chGraph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder));
+        CHEdgeExplorer outExplorer = chGraph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc()));
+        CHEdgeExplorer inExplorer = chGraph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder.getAccessEnc()));
 
         IntSet inEdges = new IntHashSet();
         IntSet outEdges = new IntHashSet();

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -92,7 +92,7 @@ public void testGraph() {
         g.edge(0, 1).setDistance(10).set(footAvgSpeedEnc, 10.0).set(footAccessEnc, true, true);
         g.edge(0, 2).setDistance(10).set(footAvgSpeedEnc, 5.0).set(footAccessEnc, true, true);
         g.edge(1, 3).setDistance(10).set(footAvgSpeedEnc, 10.0).set(footAccessEnc, true, true);
-        EdgeExplorer out = g.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder));
+        EdgeExplorer out = g.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder.getAccessEnc()));
         assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)));
         assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)));
         assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)));

File: core/src/test/java/com/graphhopper/routing/util/WheelchairFlagEncoderTest.java
Patch:
@@ -79,7 +79,7 @@ public void testGraph() {
         g.edge(0, 1).setDistance(10).set(wheelchairAvSpeedEnc, 10.0).set(wheelchairAccessEnc, true, true);
         g.edge(0, 2).setDistance(10).set(wheelchairAvSpeedEnc, 5.0).set(wheelchairAccessEnc, true, true);
         g.edge(1, 3).setDistance(10).set(wheelchairAvSpeedEnc, 10.0).set(wheelchairAccessEnc, true, true);
-        EdgeExplorer out = g.createEdgeExplorer(DefaultEdgeFilter.outEdges(wheelchairEncoder));
+        EdgeExplorer out = g.createEdgeExplorer(DefaultEdgeFilter.outEdges(wheelchairEncoder.getAccessEnc()));
         assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)));
         assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)));
         assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)));

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -52,8 +52,8 @@ public abstract class AbstractGraphStorageTester {
     protected DecimalEncodedValue carAvSpeedEnc = carEncoder.getAverageSpeedEnc();
     protected FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
     protected GraphHopperStorage graph;
-    EdgeFilter carOutFilter = DefaultEdgeFilter.outEdges(carEncoder);
-    EdgeFilter carInFilter = DefaultEdgeFilter.inEdges(carEncoder);
+    EdgeFilter carOutFilter = DefaultEdgeFilter.outEdges(carEncoder.getAccessEnc());
+    EdgeFilter carInFilter = DefaultEdgeFilter.inEdges(carEncoder.getAccessEnc());
     EdgeExplorer carOutExplorer;
     EdgeExplorer carInExplorer;
     EdgeExplorer carAllExplorer;
@@ -653,7 +653,7 @@ public void testFootMix() {
         EdgeIteratorState edge = graph.edge(0, 3).setDistance(10);
         GHUtility.setSpeed(10, true, true, footEncoder, edge);
         GHUtility.setSpeed(10, true, true, carEncoder, edge);
-        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder));
+        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder.getAccessEnc()));
         assertEquals(GHUtility.asSet(3, 1), GHUtility.getNeighbors(footOutExplorer.setBaseNode(0)));
         assertEquals(GHUtility.asSet(3, 2), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)));
     }

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -303,7 +303,7 @@ public void testSimpleShortcutCreationAndTraversal() {
         setIdentityLevels(lg);
         lg.shortcut(1, 4, PrepareEncoder.getScFwdDir(), 3, NO_EDGE, NO_EDGE);
 
-        EdgeExplorer vehicleOutExplorer = lg.createEdgeExplorer(DefaultEdgeFilter.outEdges(carEncoder));
+        EdgeExplorer vehicleOutExplorer = lg.createEdgeExplorer(DefaultEdgeFilter.outEdges(carEncoder.getAccessEnc()));
         // iteration should result in same nodes even if reusing the iterator
         assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(vehicleOutExplorer.setBaseNode(1)));
         assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(vehicleOutExplorer.setBaseNode(1)));

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -383,12 +383,12 @@ public void testSearchWithFilter_issue318() {
         index.prepareIndex();
         index.setMaxRegionSearch(8);
 
-        EdgeFilter carFilter = DefaultEdgeFilter.allEdges(carEncoder);
+        EdgeFilter carFilter = DefaultEdgeFilter.allEdges(carEncoder.getAccessEnc());
         Snap snap = index.findClosest(0.03, 0.03, carFilter);
         assertTrue(snap.isValid());
         assertEquals(33, snap.getClosestNode());
 
-        EdgeFilter bikeFilter = DefaultEdgeFilter.allEdges(bikeEncoder);
+        EdgeFilter bikeFilter = DefaultEdgeFilter.allEdges(bikeEncoder.getAccessEnc());
         snap = index.findClosest(0.03, 0.03, bikeFilter);
         assertTrue(snap.isValid());
         assertEquals(2, snap.getClosestNode());
@@ -621,7 +621,7 @@ public void testDifferentVehicles() {
 
         idx = (LocationIndexTree) createIndexNoPrepare(g, 500000).prepareIndex();
         FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
-        assertEquals(2, idx.findClosest(1, -1, DefaultEdgeFilter.allEdges(footEncoder)).getClosestNode());
+        assertEquals(2, idx.findClosest(1, -1, DefaultEdgeFilter.allEdges(footEncoder.getAccessEnc())).getClosestNode());
         Helper.close((Closeable) g);
     }
 }

File: core/src/test/java/com/graphhopper/util/CHEdgeIteratorTest.java
Patch:
@@ -41,7 +41,7 @@ public void testUpdateFlags() {
         CarFlagEncoder carFlagEncoder = new CarFlagEncoder();
         EncodingManager encodingManager = EncodingManager.create(carFlagEncoder);
         FastestWeighting weighting = new FastestWeighting(carFlagEncoder);
-        EdgeFilter carOutFilter = DefaultEdgeFilter.outEdges(carFlagEncoder);
+        EdgeFilter carOutFilter = DefaultEdgeFilter.outEdges(carFlagEncoder.getAccessEnc());
         GraphHopperStorage g = new GraphBuilder(encodingManager).setCHConfigs(CHConfig.nodeBased("p", weighting)).create();
         BooleanEncodedValue accessEnc = carFlagEncoder.getAccessEnc();
         DecimalEncodedValue avSpeedEnc = carFlagEncoder.getAverageSpeedEnc();

File: core/src/test/java/com/graphhopper/util/DepthFirstSearchTest.java
Patch:
@@ -75,7 +75,7 @@ public boolean goFurther(int v) {
         GHUtility.setSpeed(60, true, false, encoder, g.edge(5, 6).setDistance(1));
         GHUtility.setSpeed(60, true, false, encoder, g.edge(6, 4).setDistance(1));
 
-        dfs.start(g.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder)), 1);
+        dfs.start(g.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc())), 1);
 
         assertTrue(counter > 0);
         assertEquals("[1, 2, 3, 4, 5, 6]", list.toString());
@@ -108,7 +108,7 @@ public boolean goFurther(int v) {
         GHUtility.setSpeed(60, true, false, encoder, g.edge(2, 3).setDistance(1));
         GHUtility.setSpeed(60, true, true, encoder, g.edge(4, 3).setDistance(1));
 
-        dfs.start(g.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder)), 1);
+        dfs.start(g.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder.getAccessEnc())), 1);
 
         assertTrue(counter > 0);
         assertEquals("[1, 2, 3, 4]", list.toString());

File: example/src/main/java/com/graphhopper/example/IsochroneExample.java
Patch:
@@ -22,7 +22,7 @@ public static void main(String[] args) {
         FlagEncoder encoder = encodingManager.getEncoder("car");
 
         // snap some GPS coordinates to the routing graph and build a query graph
-        Snap snap = hopper.getLocationIndex().findClosest(42.508679, 1.532078, DefaultEdgeFilter.allEdges(encoder));
+        Snap snap = hopper.getLocationIndex().findClosest(42.508679, 1.532078, DefaultEdgeFilter.allEdges(encoder.getAccessEnc()));
         QueryGraph queryGraph = QueryGraph.create(hopper.getGraphHopperStorage(), snap);
 
         // run the isochrone calculation

File: map-matching/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -226,7 +226,7 @@ public List<Snap> findCandidateSnaps(final double queryLat, final double queryLo
     }
 
     private List<Snap> findCandidateSnapsInBBox(double queryLat, double queryLon, BBox queryShape) {
-        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(weighting.getFlagEncoder());
+        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(weighting.getFlagEncoder().getAccessEnc());
         List<Snap> snaps = new ArrayList<>();
         IntHashSet seenEdges = new IntHashSet();
         IntHashSet seenNodes = new IntHashSet();

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GraphExplorer.java
Patch:
@@ -59,8 +59,8 @@ public GraphExplorer(Graph graph, Weighting accessEgressWeighting, PtEncodedValu
         this.accessEnc = accessEgressWeighting.getFlagEncoder().getAccessEnc();
         this.ignoreValidities = ignoreValidities;
         this.blockedRouteTypes = blockedRouteTypes;
-        DefaultEdgeFilter accessEgressIn = DefaultEdgeFilter.inEdges(accessEgressWeighting.getFlagEncoder());
-        DefaultEdgeFilter accessEgressOut = DefaultEdgeFilter.outEdges(accessEgressWeighting.getFlagEncoder());
+        DefaultEdgeFilter accessEgressIn = DefaultEdgeFilter.inEdges(accessEgressWeighting.getFlagEncoder().getAccessEnc());
+        DefaultEdgeFilter accessEgressOut = DefaultEdgeFilter.outEdges(accessEgressWeighting.getFlagEncoder().getAccessEnc());
         DefaultEdgeFilter ptIn = DefaultEdgeFilter.inEdges(flagEncoder.getAccessEnc());
         DefaultEdgeFilter ptOut = DefaultEdgeFilter.outEdges(flagEncoder.getAccessEnc());
         EdgeFilter in = edgeState -> accessEgressIn.accept(edgeState) || ptIn.accept(edgeState);

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/GtfsReader.java
Patch:
@@ -114,7 +114,7 @@ void setCreateTransferStopsConnectSameOsmNode(boolean createTransfer) {
 
     void connectStopsToStreetNetwork() {
         FlagEncoder footEncoder = ((GraphHopperStorage) graph).getEncodingManager().getEncoder("foot");
-        final EdgeFilter filter = DefaultEdgeFilter.allEdges(footEncoder);
+        final EdgeFilter filter = DefaultEdgeFilter.allEdges(footEncoder.getAccessEnc());
         for (Stop stop : feed.stops.values()) {
             if (stop.location_type == 0) { // Only stops. Not interested in parent stations for now.
                 Snap locationSnap = walkNetworkIndex.findClosest(stop.stop_lat, stop.stop_lon, filter);

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/PtRouterImpl.java
Patch:
@@ -188,7 +188,7 @@ GHResponse route() {
         }
 
         private Snap findByPoint(GHPoint point, int indexForErrorMessage) {
-            final EdgeFilter filter = DefaultEdgeFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot"));
+            final EdgeFilter filter = DefaultEdgeFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot").getAccessEnc());
             Snap source = locationIndex.findClosest(point.lat, point.lon, filter);
             if (!source.isValid()) {
                 throw new PointNotFoundException("Cannot find point: " + point, indexForErrorMessage);

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -308,7 +308,7 @@ public void testFoot() {
         assertEquals(GHUtility.asSet(n10, n30, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20)));
         assertEquals(GHUtility.asSet(n30, n40), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20)));
 
-        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder));
+        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder.getAccessEnc()));
         assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10)));
         assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30)));
         assertEquals(GHUtility.asSet(n10, n30), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20)));
@@ -960,8 +960,8 @@ protected void importOSM() {
                     getEncodingManager().needsTurnCostsSupport());
             setGraphHopperStorage(tmpGraph);
             super.importOSM();
-            carOutExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.outEdges(carEncoder));
-            carAllExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.allEdges(carEncoder));
+            carOutExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.outEdges(carEncoder.getAccessEnc()));
+            carAllExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.allEdges(carEncoder.getAccessEnc()));
         }
 
         @Override

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -670,7 +670,7 @@ Graph runAlgo(TestAlgoCollector testCollector, String osmFile,
             FlagEncoder encoder = hopper.getEncodingManager().getEncoder(vehicle);
             Collection<AlgoHelperEntry> prepares = createAlgos(hopper, weightStr, vehicle, tMode);
 
-            EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
+            EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder.getAccessEnc());
             for (AlgoHelperEntry entry : prepares) {
                 if (entry.getExpectedAlgo().startsWith("astarbi|ch")) {
                     continue;
@@ -723,7 +723,7 @@ public void testMonacoParallel() {
         // also the preparing is too costly to be called for every thread
         int algosLength = 2;
         final Weighting weighting = new ShortestWeighting(encodingManager.getEncoder("car"));
-        final EdgeFilter filter = DefaultEdgeFilter.allEdges(carEncoder);
+        final EdgeFilter filter = DefaultEdgeFilter.allEdges(carEncoder.getAccessEnc());
         for (int no = 0; no < MAX; no++) {
             for (int instanceNo = 0; instanceNo < instances.size(); instanceNo++) {
                 String[] algos = new String[]{

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -447,7 +447,7 @@ private void measureLocationIndex(Graph g, final LocationIndex idx, int count) {
     private void measureGraphTraversal(final Graph graph, final FlagEncoder encoder, int count) {
         final Random rand = new Random(seed);
 
-        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder);
+        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
         final EdgeExplorer outExplorer = graph.createEdgeExplorer(outFilter);
         MiniPerfTest miniPerf = new MiniPerfTest().setIterations(count).start((warmup, run) -> {
             int nodeId = rand.nextInt(maxNode);
@@ -488,7 +488,7 @@ private void measureGraphTraversalCH(final CHGraph lg, final FlagEncoder encoder
         });
         print("unit_testsCH.get_weight", miniPerf);
 
-        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder);
+        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder.getAccessEnc());
         final CHEdgeExplorer outExplorer = lg.createEdgeExplorer(outFilter);
         miniPerf = new MiniPerfTest().setIterations(count).start((warmup, run) -> {
             int nodeId = rand.nextInt(maxNode);
@@ -607,7 +607,7 @@ private void measureRouting(final GraphHopper hopper, final QuerySettings queryS
         final AtomicInteger failedCount = new AtomicInteger(0);
         final DistanceCalc distCalc = new DistanceCalcEarth();
 
-        final EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(hopper.getEncodingManager().getEncoder(vehicle));
+        final EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(hopper.getEncodingManager().getEncoder(vehicle).getAccessEnc());
         final EdgeExplorer edgeExplorer = g.createEdgeExplorer(edgeFilter);
         final AtomicLong visitedNodesSum = new AtomicLong(0);
         final AtomicLong maxVisitedNodes = new AtomicLong(0);

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -9,7 +9,6 @@
 import com.graphhopper.isochrone.algorithm.ShortestPathTree;
 import com.graphhopper.isochrone.algorithm.Triangulator;
 import com.graphhopper.jackson.ResponsePathSerializer;
-import com.graphhopper.util.JsonFeature;
 import com.graphhopper.routing.ProfileResolver;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.util.*;
@@ -96,7 +95,7 @@ public Response doGet(
             throw new IllegalArgumentException("The requested profile '" + profileName + "' does not exist");
         }
         FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());
-        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
+        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder.getAccessEnc());
         LocationIndex locationIndex = graphHopper.getLocationIndex();
         Snap snap = locationIndex.findClosest(point.get().lat, point.get().lon, edgeFilter);
         if (!snap.isValid())
@@ -108,7 +107,7 @@ public Response doGet(
         Weighting weighting = graphHopper.createWeighting(profile, hintsMap);
         if (hintsMap.has(Parameters.Routing.BLOCK_AREA))
             weighting = new BlockAreaWeighting(weighting, GraphEdgeIdFinder.createBlockArea(graph, locationIndex,
-                    Collections.singletonList(point.get()), hintsMap, DefaultEdgeFilter.allEdges(encoder)));
+                    Collections.singletonList(point.get()), hintsMap, DefaultEdgeFilter.allEdges(encoder.getAccessEnc())));
         TraversalMode traversalMode = profile.isTurnCosts() ? EDGE_BASED : NODE_BASED;
         ShortestPathTree shortestPathTree = new ShortestPathTree(queryGraph, weighting, reverseFlow, traversalMode);
 

File: web-bundle/src/main/java/com/graphhopper/resources/PtIsochroneResource.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.isochrone.algorithm.ContourBuilder;
 import com.graphhopper.isochrone.algorithm.ReadableTriangulation;
 import com.graphhopper.jackson.ResponsePathSerializer;
-import com.graphhopper.util.JsonFeature;
 import com.graphhopper.routing.querygraph.QueryGraph;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
@@ -33,6 +32,7 @@
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.JsonFeature;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 import org.locationtech.jts.geom.*;
@@ -98,7 +98,7 @@ public Response doGet(
         double targetZ = initialTime.toEpochMilli() + seconds * 1000;
 
         GeometryFactory geometryFactory = new GeometryFactory();
-        final EdgeFilter filter = DefaultEdgeFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot"));
+        final EdgeFilter filter = DefaultEdgeFilter.allEdges(graphHopperStorage.getEncodingManager().getEncoder("foot").getAccessEnc());
         Snap snap = locationIndex.findClosest(source.lat, source.lon, filter);
         QueryGraph queryGraph = QueryGraph.create(graphHopperStorage, Collections.singletonList(snap));
         if (!snap.isValid()) {

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -93,7 +93,7 @@ public Response doGet(
             throw new IllegalArgumentException("The requested profile '" + profileName + "' does not exist");
         }
         FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());
-        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
+        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder.getAccessEnc());
         LocationIndex locationIndex = graphHopper.getLocationIndex();
         Snap snap = locationIndex.findClosest(point.get().lat, point.get().lon, edgeFilter);
         if (!snap.isValid())
@@ -106,7 +106,7 @@ public Response doGet(
         Weighting weighting = graphHopper.createWeighting(profile, hintsMap);
         if (hintsMap.has(Parameters.Routing.BLOCK_AREA))
             weighting = new BlockAreaWeighting(weighting, GraphEdgeIdFinder.createBlockArea(graph, locationIndex,
-                    Collections.singletonList(point.get()), hintsMap, DefaultEdgeFilter.allEdges(encoder)));
+                    Collections.singletonList(point.get()), hintsMap, DefaultEdgeFilter.allEdges(encoder.getAccessEnc())));
         TraversalMode traversalMode = profile.isTurnCosts() ? EDGE_BASED : NODE_BASED;
         ShortestPathTree shortestPathTree = new ShortestPathTree(queryGraph, weighting, reverseFlow, traversalMode);
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -81,6 +81,7 @@ protected BikeCommonFlagEncoder(int speedBits, double speedFactor, int maxTurnCo
         // potentialBarriers.add("lift_gate");
         potentialBarriers.add("swing_gate");
         potentialBarriers.add("cattle_grid");
+        potentialBarriers.add("chain");
 
         absoluteBarriers.add("fence");
         absoluteBarriers.add("stile");

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -83,6 +83,7 @@ public CarFlagEncoder(PMap properties) {
         potentialBarriers.add("kissing_gate");
         potentialBarriers.add("swing_gate");
         potentialBarriers.add("cattle_grid");
+        potentialBarriers.add("chain");
 
         absoluteBarriers.add("fence");
         absoluteBarriers.add("bollard");

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -95,6 +95,7 @@ protected FootFlagEncoder(int speedBits, double speedFactor) {
         absoluteBarriers.add("fence");
         potentialBarriers.add("gate");
         potentialBarriers.add("cattle_grid");
+        potentialBarriers.add("chain");
 
         safeHighwayTags.add("footway");
         safeHighwayTags.add("path");

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java
Patch:
@@ -217,7 +217,7 @@ private static String getReturnType(EncodedValue encodedValue) {
         if (name.contains("Decimal")) return "double";
         if (name.contains("Int")) return "int";
         if (name.contains("Boolean")) return "boolean";
-        throw new IllegalArgumentException("Unsupported EncodedValue " + name);
+        throw new IllegalArgumentException("Unsupported EncodedValue: " + encodedValue.getClass());
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/DefaultWeightingFactory.java
Patch:
@@ -19,13 +19,14 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.config.Profile;
-import com.graphhopper.util.CustomModel;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.weighting.*;
+import com.graphhopper.routing.weighting.custom.CustomModelParser;
 import com.graphhopper.routing.weighting.custom.CustomProfile;
 import com.graphhopper.routing.weighting.custom.CustomWeighting;
 import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.util.CustomModel;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 
@@ -76,7 +77,7 @@ public Weighting createWeighting(Profile profile, PMap requestHints, boolean dis
             CustomProfile customProfile = (CustomProfile) profile;
             queryCustomModel = queryCustomModel == null ?
                     customProfile.getCustomModel() : CustomModel.merge(customProfile.getCustomModel(), queryCustomModel);
-            weighting = new CustomWeighting(encoder, encodingManager, turnCostProvider, queryCustomModel);
+            weighting = CustomModelParser.createWeighting(encoder, encodingManager, turnCostProvider, queryCustomModel);
         } else if ("shortest".equalsIgnoreCase(weightingStr)) {
             weighting = new ShortestWeighting(encoder, turnCostProvider);
         } else if ("fastest".equalsIgnoreCase(weightingStr)) {

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfile.java
Patch:
@@ -35,6 +35,7 @@ public CustomProfile(String name) {
     }
 
     public CustomProfile setCustomModel(CustomModel customModel) {
+        customModel.internal();
         getHints().putObject(CustomModel.KEY, customModel);
         getHints().putObject("custom_model_file", "empty");
         return this;

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.ResponsePath;
+import com.graphhopper.json.Statement;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.details.PathDetail;
 import com.graphhopper.util.shapes.GHPoint;
@@ -30,6 +31,7 @@ public class GraphHopperModule extends SimpleModule {
 
     public GraphHopperModule() {
         setMixInAnnotation(GHRequest.class, GHRequestMixIn.class);
+        addDeserializer(Statement.class, new StatementDeserializer());
         addDeserializer(GHResponse.class, new GHResponseDeserializer());
         addDeserializer(ResponsePath.class, new ResponsePathDeserializer());
         addDeserializer(Envelope.class, new JtsEnvelopeDeserializer());

File: core/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -188,7 +188,7 @@ void preProcess(File osmFile) {
 
                     if (++tmpRelationCounter % 100_000 == 0) {
                         LOGGER.info(nf(tmpRelationCounter) + " (preprocess), osmWayMap:" + nf(getRelFlagsMapSize())
-                                + " " + Helper.getMemInfo());
+                                + ", " + Helper.getMemInfo());
                     }
                 } else if (item.isType(ReaderElement.FILEHEADER)) {
                     final OSMFileHeader fileHeader = (OSMFileHeader) item;
@@ -283,7 +283,7 @@ private void writeOsmToGraph(File osmFile) {
                         throw new IllegalStateException("Unknown type " + item.getType());
                 }
                 if (++counter % 200_000_000 == 0) {
-                    LOGGER.info(nf(counter) + ", locs:" + nf(locations) + Helper.getMemInfo());
+                    LOGGER.info(nf(counter) + ", locs:" + nf(locations) + ", " + Helper.getMemInfo());
                 }
             }
 

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceWithEleTest.java
Patch:
@@ -49,7 +49,7 @@ private static GraphHopperServerConfiguration createConfig() {
         GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();
         config.getGraphHopperConfiguration().
                 putObject("graph.elevation.provider", "srtm").
-                putObject("graph.elevation.cachedir", "../core/files/").
+                putObject("graph.elevation.cache_dir", "../core/files/").
                 putObject("prepare.min_network_size", 0).
                 putObject("graph.flag_encoders", "car").
                 putObject("datareader.file", "../core/files/monaco.osm.gz").

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -734,7 +734,9 @@ private void checkDistance(EdgeIteratorState edge) {
         final double tolerance = 1;
         final double edgeDistance = edge.getDistance();
         final double geometryDistance = distCalc.calcDistance(edge.fetchWayGeometry(FetchMode.ALL));
-        if (Math.abs(edgeDistance - geometryDistance) > tolerance)
+        if (edgeDistance > 2_000_000)
+            LOGGER.warn("Very long edge detected: " + edge + " dist: " + edgeDistance);
+        else if (Math.abs(edgeDistance - geometryDistance) > tolerance)
             throw new IllegalStateException("Suspicious distance for edge: " + edge + " " + edgeDistance + " vs. " + geometryDistance
                     + ", difference: " + (edgeDistance - geometryDistance));
     }

File: core/src/test/java/com/graphhopper/routing/DirectedBidirectionalDijkstraTest.java
Patch:
@@ -13,7 +13,6 @@
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
-import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.EdgeIteratorState;
@@ -486,7 +485,7 @@ public void directedRouting_noUTurnAtVirtualEdge() {
         na.setNode(4, 0, 1);
         na.setNode(5, 0, 0);
 
-        LocationIndex locationIndex = new LocationIndexTree(graph, dir);
+        LocationIndexTree locationIndex = new LocationIndexTree(graph, dir);
         locationIndex.prepareIndex();
         Snap snap = locationIndex.findClosest(1.1, 0.5, EdgeFilter.ALL_EDGES);
         QueryGraph queryGraph = QueryGraph.create(graph, snap);

File: core/src/test/java/com/graphhopper/routing/DirectionResolverOnQueryGraphTest.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.RAMDirectory;
-import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.EdgeExplorer;
@@ -54,7 +53,7 @@ public class DirectionResolverOnQueryGraphTest {
     private NodeAccess na;
     private FlagEncoder encoder;
     private Graph graph;
-    private LocationIndex locationIndex;
+    private LocationIndexTree locationIndex;
 
     @Before
     public void setup() {

File: core/src/test/java/com/graphhopper/routing/lm/PrepareLandmarksTest.java
Patch:
@@ -99,7 +99,7 @@ public void testLandmarkStorageAndRouting() {
             }
         }
         Directory dir = new RAMDirectory();
-        LocationIndex index = new LocationIndexTree(graph, dir);
+        LocationIndexTree index = new LocationIndexTree(graph, dir);
         index.prepareIndex();
 
         int lm = 5, activeLM = 2;

File: core/src/test/java/com/graphhopper/routing/querygraph/QueryGraphTest.java
Patch:
@@ -718,7 +718,7 @@ public void testWayGeometry_edge() {
         GHUtility.setSpeed(60, true, true, encoder, g.edge(0, 1).setDistance(10)).
                 setWayGeometry(Helper.createPointList(0.1, 0.1, 0.2, 0.2));
 
-        LocationIndex locationIndex = new LocationIndexTree(g, new RAMDirectory());
+        LocationIndexTree locationIndex = new LocationIndexTree(g, new RAMDirectory());
         locationIndex.prepareIndex();
         Snap snap = locationIndex.findClosest(0.15, 0.15, DefaultEdgeFilter.allEdges(encoder));
         assertTrue(snap.isValid());
@@ -760,7 +760,7 @@ public void testWayGeometry_pillar() {
         GHUtility.setSpeed(60, true, true, encoder, g.edge(0, 1).setDistance(10)).
                 setWayGeometry(Helper.createPointList(0.1, 0.1, 0.2, 0.2));
 
-        LocationIndex locationIndex = new LocationIndexTree(g, new RAMDirectory());
+        LocationIndexTree locationIndex = new LocationIndexTree(g, new RAMDirectory());
         locationIndex.prepareIndex();
         Snap snap = locationIndex.findClosest(0.2, 0.21, DefaultEdgeFilter.allEdges(encoder));
         assertTrue(snap.isValid());

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -257,7 +257,7 @@ public void onTile(BBox bbox, int depth) {
                     }
 
                     @Override
-                    public void onNode(int node) {
+                    public void onEdge(int edgeId) {
                         // mg.plotNode(g2, node, Color.BLUE);
                     }
                 });

File: core/src/main/java/com/graphhopper/routing/ev/EncodedValueLookup.java
Patch:
@@ -31,7 +31,9 @@ public interface EncodedValueLookup {
 
     DecimalEncodedValue getDecimalEncodedValue(String key);
 
-    <T extends Enum> EnumEncodedValue<T> getEnumEncodedValue(String key, Class<T> enumType);
+    <T extends Enum<?>> EnumEncodedValue<T> getEnumEncodedValue(String key, Class<T> enumType);
+    
+    StringEncodedValue getStringEncodedValue(String key);
 
     boolean hasEncodedValue(String key);
 }

File: core/src/test/java/com/graphhopper/routing/DirectedRoutingTest.java
Patch:
@@ -117,7 +117,8 @@ public DirectedRoutingTest(Algo algo, int uTurnCosts, boolean prepareCH, boolean
     public void init() {
         dir = new RAMDirectory();
         maxTurnCosts = 10;
-        // todo: make this work for MotorCycleFlagEncoder, #1972
+        // todo: this test only works with speedTwoDirections=false (as long as loops are enabled), otherwise it will
+        // fail sometimes for edge-based algorithms, #1631
         encoder = new CarFlagEncoder(5, 5, maxTurnCosts);
         encodingManager = EncodingManager.create(encoder);
         graph = new GraphBuilder(encodingManager).setDir(dir).withTurnCosts(true).build();

File: core/src/test/java/com/graphhopper/routing/RandomizedRoutingTest.java
Patch:
@@ -123,7 +123,8 @@ public RandomizedRoutingTest(Algo algo, boolean prepareCH, boolean prepareLM, Tr
     public void init() {
         maxTurnCosts = 10;
         dir = new RAMDirectory();
-        // todo: this test fails sometimes with MotorCycleEncoder (for dijkstra, LM and CH) unless we disable turn costs! #1972
+        // todo: this test only works with speedTwoDirections=false (as long as loops are enabled), otherwise it will
+        // fail sometimes for edge-based algorithms, #1631
         encoder = new CarFlagEncoder(5, 5, maxTurnCosts);
         encodingManager = EncodingManager.create(encoder);
         graph = new GraphBuilder(encodingManager)

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -177,7 +177,6 @@ protected BikeCommonFlagEncoder(int speedBits, double speedFactor, int maxTurnCo
         routeMap.put(REGIONAL, VERY_NICE.getValue());
         routeMap.put(LOCAL, PREFER.getValue());
 
-        speedDefault = highwaySpeeds.get("cycleway");
         setAvoidSpeedLimit(71);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -139,7 +139,6 @@ public CarFlagEncoder(PMap properties) {
         // limit speed on bad surfaces to 30 km/h
         badSurfaceSpeed = 30;
         maxPossibleSpeed = 140;
-        speedDefault = defaultSpeedMap.get("secondary");
     }
 
     public CarFlagEncoder setSpeedTwoDirections(boolean value) {

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -135,7 +135,6 @@ protected FootFlagEncoder(int speedBits, double speedFactor) {
         allowedSacScale.add("demanding_mountain_hiking");
 
         maxPossibleSpeed = FERRY_SPEED;
-        speedDefault = MEAN_SPEED;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/WheelchairFlagEncoder.java
Patch:
@@ -102,7 +102,6 @@ protected WheelchairFlagEncoder(int speedBits, double speedFactor) {
         allowedHighwayTags.add("road");
 
         maxPossibleSpeed = FERRY_SPEED;
-        speedDefault = MEAN_SPEED;
         speedTwoDirections = true;
     }
 

File: core/src/test/java/com/graphhopper/routing/RoundTripRoutingTest.java
Patch:
@@ -29,6 +29,7 @@
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.Snap;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.shapes.GHPoint;
@@ -120,7 +121,7 @@ public void testCalcRoundTrip() {
 
     private Graph createTestGraph() {
         Graph graph = new GraphHopperStorage(new RAMDirectory(), em, false, true).create(1000);
-        AlternativeRouteTest.initTestGraph(graph);
+        AlternativeRouteTest.initTestGraph(graph, carFE);
         return graph;
     }
 
@@ -133,7 +134,7 @@ private Graph createSquareGraph() {
         //    |-1 0 1
         GraphHopperStorage graph = new GraphBuilder(em).create();
         for (int i = 0; i < 8; ++i) {
-            graph.edge(i, (i + 1) % 8, 1, true);
+            GHUtility.setSpeed(60, true, true, carFE, graph.edge(i, (i + 1) % 8).setDistance(1));
         }
         updateDistancesFor(graph, 0, 1, -1);
         updateDistancesFor(graph, 1, 1, 0);

File: core/src/test/java/com/graphhopper/routing/lm/LMApproximatorTest.java
Patch:
@@ -64,7 +64,8 @@ private void run(long seed) {
         GraphHopperStorage graph = new GraphBuilder(encodingManager).setDir(dir).withTurnCosts(true).create();
 
         Random rnd = new Random(seed);
-        GHUtility.buildRandomGraph(graph, rnd, 100, 2.2, true, true, encoder.getAverageSpeedEnc(), 0.7, 0.8, 0.8);
+        GHUtility.buildRandomGraph(graph, rnd, 100, 2.2, true, true,
+                encoder.getAccessEnc(), encoder.getAverageSpeedEnc(), 60d,0.7, 0.8, 0.8);
 
         Weighting weighting = new FastestWeighting(encoder);
 

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -43,8 +43,7 @@ private Graph initExampleGraph() {
         na.setNode(1, 51.1, 12.002, 60);
         EdgeIteratorState edge = gs.edge(0, 1).
                 setWayGeometry(Helper.createPointList3D(51.1, 12.0011, 49, 51.1, 12.0015, 55));
-        edge.setDistance(100);
-        GHUtility.setProperties(edge, encoder, 10, 15);
+        GHUtility.setSpeed(10, 15, encoder, edge.setDistance(100));
         return gs;
     }
 
@@ -76,7 +75,7 @@ public void testUnchangedForStepsBridgeAndTunnel() {
 
     @Test
     public void testSetSpeed0_issue367() {
-        IntsRef edgeFlags = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, 10);
+        IntsRef edgeFlags = GHUtility.setSpeed(10, 10, encoder, encodingManager.createEdgeFlags());
         assertEquals(10, encoder.getSpeed(false, edgeFlags), .1);
         assertEquals(10, encoder.getSpeed(true, edgeFlags), .1);
 

File: core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
Patch:
@@ -49,7 +49,7 @@ private Graph initExampleGraph() {
                 setWayGeometry(Helper.createPointList3D(51.1, 12.0011, 49, 51.1, 12.0015, 55));
         edge.setDistance(100);
 
-        edge.set(accessEnc, true).setReverse(accessEnc, true).set(encoder.getAverageSpeedEnc(), 10.0).setReverse(encoder.getAverageSpeedEnc(), 15.0);
+        edge.set(accessEnc, true, true).set(encoder.getAverageSpeedEnc(), 10.0, 15.0);
         return gs;
     }
 

File: core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
Patch:
@@ -36,7 +36,7 @@ protected BikeCommonFlagEncoder createBikeEncoder() {
 
     @Test
     public void testGetSpeed() {
-        IntsRef intsRef = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, false);
+        IntsRef intsRef = GHUtility.setSpeed(10, 0, encoder, encodingManager.createEdgeFlags());
         assertEquals(10, encoder.getSpeed(intsRef), 1e-1);
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "primary");

File: core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
Patch:
@@ -94,7 +94,7 @@ public void testSacScale() {
 
     @Test
     public void testGetSpeed() {
-        IntsRef intsRef = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, false);
+        IntsRef intsRef = GHUtility.setSpeed(10, 0, encoder, encodingManager.createEdgeFlags());
         assertEquals(10, encoder.getSpeed(intsRef), 1e-1);
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "track");

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMTurnRelationParserTest.java
Patch:
@@ -32,7 +32,7 @@ public void testGetRestrictionAsEntries() {
 
         OSMTurnRelationParser parser = new OSMTurnRelationParser(encoder.toString(), 1, OSMRoadAccessParser.toOSMRestrictions(TransportationMode.CAR));
         GraphHopperStorage ghStorage = new GraphBuilder(new EncodingManager.Builder().add(encoder).addTurnCostParser(parser).build()).create();
-        EdgeBasedRoutingAlgorithmTest.initGraph(ghStorage);
+        EdgeBasedRoutingAlgorithmTest.initGraph(ghStorage, encoder);
         TurnCostParser.ExternalInternalMap map = new TurnCostParser.ExternalInternalMap() {
 
             @Override

File: core/src/test/java/com/graphhopper/routing/weighting/BlockAreaWeightingTest.java
Patch:
@@ -14,6 +14,7 @@
 import com.graphhopper.storage.index.Snap;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.shapes.Circle;
 import org.junit.Before;
 import org.junit.Test;
@@ -35,7 +36,7 @@ public void setUp() {
         em = EncodingManager.create(Arrays.asList(encoder));
         graph = new GraphBuilder(em).create();
         // 0-1
-        graph.edge(0, 1, 1, true);
+        GHUtility.setSpeed(60, true, true, encoder, graph.edge(0, 1).setDistance(1));
         updateDistancesFor(graph, 0, 0.00, 0.00);
         updateDistancesFor(graph, 1, 0.01, 0.01);
     }

File: core/src/test/java/com/graphhopper/routing/weighting/ShortFastestWeightingTest.java
Patch:
@@ -37,7 +37,7 @@ public class ShortFastestWeightingTest {
 
     @Test
     public void testShort() {
-        EdgeIteratorState edge = createMockedEdgeIteratorState(10, GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 50, true, false));
+        EdgeIteratorState edge = createMockedEdgeIteratorState(10, GHUtility.setSpeed(50, 0, encoder, encodingManager.createEdgeFlags()));
         Weighting instance = new ShortFastestWeighting(encoder, 0.03);
         assertEquals(1.02, instance.calcEdgeWeight(edge, false), 1e-8);
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java
Patch:
@@ -7,6 +7,7 @@
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.EncodingManager.Access;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
 import org.junit.Test;
 
@@ -30,7 +31,7 @@ public void testLoad() {
         way_0_1.setTag("highway", "primary");
         way_0_1.setTag("maxheight", "4.4");
 
-        graph.edge(0, 1, 1, true);
+        GHUtility.setSpeed(60, true, true, carFlagEncoder, graph.edge(0, 1).setDistance(1));
         updateDistancesFor(graph, 0, 0.00, 0.00);
         updateDistancesFor(graph, 1, 0.01, 0.01);
         graph.getEdgeIteratorState(0, 1).setFlags(
@@ -41,7 +42,7 @@ public void testLoad() {
         way_1_2.setTag("highway", "primary");
         way_1_2.setTag("maxweight", "45");
 
-        graph.edge(1, 2, 1, true);
+        GHUtility.setSpeed(60, true, true, carFlagEncoder, graph.edge(1, 2).setDistance(1));
         updateDistancesFor(graph, 2, 0.02, 0.02);
         graph.getEdgeIteratorState(1, 2).setFlags(
                 carFlagEncoder.handleWayTags(encodingManager.createEdgeFlags(), way_1_2, Access.WAY));

File: core/src/test/java/com/graphhopper/util/CHEdgeIteratorTest.java
Patch:
@@ -45,8 +45,8 @@ public void testUpdateFlags() {
         GraphHopperStorage g = new GraphBuilder(encodingManager).setCHConfigs(CHConfig.nodeBased("p", weighting)).create();
         BooleanEncodedValue accessEnc = carFlagEncoder.getAccessEnc();
         DecimalEncodedValue avSpeedEnc = carFlagEncoder.getAverageSpeedEnc();
-        g.edge(0, 1).setDistance(12).set(accessEnc, true).setReverse(accessEnc, true).set(avSpeedEnc, 10.0);
-        g.edge(0, 2).setDistance(13).set(accessEnc, true).setReverse(accessEnc, true).set(avSpeedEnc, 20.0);
+        g.edge(0, 1).setDistance(12).set(accessEnc, true, true).set(avSpeedEnc, 10.0);
+        g.edge(0, 2).setDistance(13).set(accessEnc, true, true).set(avSpeedEnc, 20.0);
         g.freeze();
 
         CHGraph lg = g.getCHGraph();
@@ -60,7 +60,7 @@ public void testUpdateFlags() {
         assertEquals(10.0, iter.getReverse(avSpeedEnc), .1);
 
         // update setProperties
-        iter.set(accessEnc, true).setReverse(accessEnc, false).set(avSpeedEnc, 20.0);
+        iter.set(accessEnc, true, false).set(avSpeedEnc, 20.0);
         assertEquals(12, iter.getDistance(), 1e-4);
 
         // update distance

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -774,7 +774,7 @@ public void testPerformance() throws IOException {
         final GraphHopperStorage graph = new GraphBuilder(eManager).create();
 
         String bigFile = "10000EWD.txt.gz";
-        new PrincetonReader(graph).setStream(new GZIPInputStream(PrincetonReader.class.getResourceAsStream(bigFile))).read();
+        new PrincetonReader(graph, eManager.getEncoder("car")).setStream(new GZIPInputStream(PrincetonReader.class.getResourceAsStream(bigFile))).read();
         GraphHopper hopper = new GraphHopper() {
             {
                 setEncodingManager(eManager);

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMTrackTypeParserTest.java
Patch:
@@ -60,7 +60,7 @@ public void testUnkownValue() {
         IntsRef intsRef = em.createEdgeFlags();
         readerWay.setTag("tracktype", "unknownstuff");
         parser.handleWayTags(intsRef, readerWay, false, relFlags);
-        assertEquals(TrackType.OTHER, ttEnc.getEnum(false, intsRef));
+        assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/ev/EncodedValueLookup.java
Patch:
@@ -21,7 +21,7 @@
 
 public interface EncodedValueLookup {
 
-    List<EncodedValue> getAllShared();
+    List<EncodedValue> getEncodedValues();
 
     <T extends EncodedValue> T getEncodedValue(String key, Class<T> encodedValueType);
 

File: core/src/main/java/com/graphhopper/routing/ev/UnsignedIntEncodedValue.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing.ev;
 
+import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 
@@ -53,8 +54,8 @@ public class UnsignedIntEncodedValue implements IntEncodedValue {
      *                           direction.
      */
     public UnsignedIntEncodedValue(String name, int bits, boolean storeTwoDirections) {
-        if (!name.toLowerCase(Locale.ROOT).equals(name))
-            throw new IllegalArgumentException("EncodedValue name must be lower case but was " + name);
+        if (!EncodingManager.isValidEncodedValue(name))
+            throw new IllegalArgumentException("EncodedValue name wasn't valid: " + name + ". Use lower case letters, underscore and numbers only.");
         if (bits <= 0)
             throw new IllegalArgumentException(name + ": bits cannot be zero or negative");
         if (bits > 31)

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -398,8 +398,8 @@ protected String getPropertiesString() {
     }
 
     @Override
-    public List<EncodedValue> getAllShared() {
-        return encodedValueLookup.getAllShared();
+    public List<EncodedValue> getEncodedValues() {
+        return encodedValueLookup.getEncodedValues();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java
Patch:
@@ -75,7 +75,7 @@ static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Ma
     @Override
     public double getValue(EdgeIteratorState iter, boolean reverse) {
         if (Double.isNaN(value)) return elseValue; // special case if only catch-all key is present
-        return iter.get(bev) ? value : elseValue;
+        return (reverse ? iter.getReverse(bev) : iter.get(bev)) ? value : elseValue;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java
Patch:
@@ -73,7 +73,7 @@ public PriorityCalculator(CustomModel customModel, EncodedValueLookup lookup) {
     static EncodedValue getEV(EncodedValueLookup lookup, String name, String key) {
         if (!lookup.hasEncodedValue(key))
             throw new IllegalArgumentException("Cannot find encoded value '" + key + "' specified in '" + name
-                    + "'. Available: " + names(lookup.getAllShared()));
+                    + "'. Available: " + names(lookup.getEncodedValues()));
         return lookup.getEncodedValue(key, EncodedValue.class);
     }
 

File: client-hc/src/main/java/com/graphhopper/api/GraphHopperMatrixWeb.java
Patch:
@@ -15,11 +15,11 @@ public class GraphHopperMatrixWeb {
     private String key;
 
     public GraphHopperMatrixWeb() {
-        this(new GHMatrixBatchRequester());
+        this(new GHMatrixSyncRequester());
     }
 
     public GraphHopperMatrixWeb(String serviceUrl) {
-        this(new GHMatrixBatchRequester(serviceUrl));
+        this(new GHMatrixSyncRequester(serviceUrl));
     }
 
     public GraphHopperMatrixWeb(GHMatrixAbstractRequester requester) {

File: core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfile.java
Patch:
@@ -8,6 +8,7 @@ public class CustomProfile extends Profile {
     public CustomProfile(Profile profile) {
         this(profile.getName());
         setVehicle(profile.getVehicle());
+        setTurnCosts(profile.isTurnCosts());
         getHints().putAll(profile.getHints());
     }
 

File: core/src/main/java/com/graphhopper/routing/Router.java
Patch:
@@ -137,7 +137,7 @@ public GHResponse route(GHRequest request) {
         } catch (MultiplePointsNotFoundException ex) {
             GHResponse ghRsp = new GHResponse();
             for (IntCursor p : ex.getPointsNotFound()) {
-                ghRsp.addError(new PointNotFoundException("Cannot find point " + p.value + ": " + request.getPoints().get(p.index), p.value));
+                ghRsp.addError(new PointNotFoundException("Cannot find point " + p.value + ": " + request.getPoints().get(p.value), p.value));
             }
             return ghRsp;
         } catch (IllegalArgumentException ex) {

File: example/src/test/java/com/graphhopper/example/RoutingExampleTest.java
Patch:
@@ -7,5 +7,6 @@ public class RoutingExampleTest {
     @Test
     public void main() {
         RoutingExample.main(new String[]{"../"});
+        RoutingExampleTC.main(new String[]{"../"});
     }
 }

File: core/src/main/java/com/graphhopper/storage/DAType.java
Patch:
@@ -74,6 +74,8 @@ public static DAType fromString(String dataAccess) {
         DAType type;
         if (dataAccess.contains("SYNC"))
             throw new IllegalArgumentException("SYNC option is no longer supported, see #982");
+        else if (dataAccess.contains("MMAP_RO"))
+            type = DAType.MMAP_RO;
         else if (dataAccess.contains("MMAP"))
             type = DAType.MMAP;
         else if (dataAccess.contains("UNSAFE"))

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -67,7 +67,7 @@ public IsochroneResource(GraphHopper graphHopper, Triangulator triangulator, Pro
         this.encodingManager = encodingManager;
     }
 
-    enum ResponseType {json, geojson}
+    public enum ResponseType {json, geojson}
 
     @GET
     @Produces(MediaType.APPLICATION_JSON)

File: core/src/main/java/com/graphhopper/routing/AlternativeRouteEdgeCH.java
Patch:
@@ -245,6 +245,9 @@ private static Path concat(Graph graph, Path suvPath, Path uvtPath) {
             path.addEdge(edge.getEdge());
         }
         Iterator<EdgeIteratorState> uvtPathI = uvtPath.calcEdges().iterator();
+        if (!uvtPathI.hasNext()) { // presumably v == t, has been known to happen, no test yet
+            return suvPath;
+        }
         uvtPathI.next(); // skip u-v edge
         uvtPathI.forEachRemaining(edge -> path.addEdge(edge.getEdge()));
         path.setEndNode(uvtPath.getEndNode());

File: reader-gtfs/src/test/java/com/graphhopper/gtfs/TransfersTest.java
Patch:
@@ -59,6 +59,7 @@ public void testTransfersByToRoute() {
         assertEquals("NEXT_TO_MUSEUM", transfer.to_stop_id);
         Assertions.assertNull(transfer.from_route_id);
         Assertions.assertNull(transfer.to_route_id);
+        Assertions.assertNotEquals(0, transfer.min_transfer_time);
 
         Transfer withinStationTransfer = transfersToStop.get(1);
         assertEquals("NEXT_TO_MUSEUM", withinStationTransfer.from_stop_id);

File: core/src/main/java/com/graphhopper/routing/ch/ShortcutUnpacker.java
Patch:
@@ -70,7 +70,7 @@ private void expandSkippedEdgesEdgeBased(int skippedEdge1, int skippedEdge2, int
             skippedEdge2 = tmp;
         }
         RoutingCHEdgeIteratorState sk2 = getEdge(skippedEdge2, adj);
-        assert sk2 != null : "skipped edge " + skippedEdge2 + " + is not attached to adjNode " + adj + ". this should " +
+        assert sk2 != null : "skipped edge " + skippedEdge2 + " is not attached to adjNode " + adj + ". this should " +
                 "never happen because edge-based CH does not use bidirectional shortcuts at the moment";
         RoutingCHEdgeIteratorState sk1 = getEdge(skippedEdge1, sk2.getBaseNode());
         if (base == adj && (sk1.getAdjNode() == sk1.getBaseNode() || sk2.getAdjNode() == sk2.getBaseNode())) {

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -354,7 +354,7 @@ public void debugPrint() {
         System.out.println("shortcuts:");
         String formatShortcutsBase = "%12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s";
         String formatShortcutExt = " | %12s | %12s";
-        String header = String.format(Locale.ROOT, formatShortcutsBase, "#", "E_NODEA", "E_NODEB", "E_LINKA", "E_LINKB", "E_DIST", "E_FLAGS", "S_SKIP_EDGE1", "S_SKIP_EDGE2");
+        String header = String.format(Locale.ROOT, formatShortcutsBase, "#", "E_NODEA", "E_NODEB", "E_LINKA", "E_LINKB", "E_FLAGS", "S_SKIP_EDGE1", "S_SKIP_EDGE2");
         if (chConfig.isEdgeBased()) {
             header += String.format(Locale.ROOT, formatShortcutExt, "S_ORIG_FIRST", "S_ORIG_LAST");
         }

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ContourBuilder.java
Patch:
@@ -123,12 +123,9 @@ private List<Polygon> punchHoles(List<LinearRing> rings) {
         }
         // 2. Sort the shells based on number of points to optimize step 3.
         shells.sort((o1, o2) -> o2.getGeometry().getNumPoints() - o1.getGeometry().getNumPoints());
-
         for (PreparedPolygon shell : shells) {
             shell.getGeometry().setUserData(new ArrayList<LinearRing>());
         }
-        System.out.println("Shells: "+shells.size());
-        System.out.println("Holes: "+holes.size());
         // 3. For each hole, determine which shell it fits in.
         for (LinearRing hole : holes) {
             outer: {

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteEdgeCHTest.java
Patch:
@@ -143,7 +143,7 @@ public void testCalcOtherAlternatives() {
         List<AlternativeRouteEdgeCH.AlternativeInfo> pathInfos = altDijkstra.calcAlternatives(10, 5);
         assertEquals(2, pathInfos.size());
         assertEquals(IntArrayList.from(10, 4, 3, 6, 5), pathInfos.get(0).path.calcNodes());
-        assertEquals(IntArrayList.from(10, 4, 3, 2, 9, 1, 5), pathInfos.get(1).path.calcNodes());
+        assertEquals(IntArrayList.from(10, 4, 8, 7, 6, 5), pathInfos.get(1).path.calcNodes());
         // The shortest path works (no restrictions on the way back
     }
 

File: core/src/main/java/com/graphhopper/routing/ev/RoadClass.java
Patch:
@@ -46,13 +46,13 @@ public String toString() {
     public static RoadClass find(String name) {
         if (name == null || name.isEmpty())
             return OTHER;
-        
+
         for (RoadClass roadClass : values()) {
             if (roadClass.name().equalsIgnoreCase(name)) {
                 return roadClass;
             }
         }
-        
+
         return OTHER;
     }
 }

File: core/src/main/java/com/graphhopper/routing/ev/RouteNetwork.java
Patch:
@@ -40,7 +40,7 @@ public String toString() {
     }
 
     public static RouteNetwork find(String name) {
-        if (name == null)
+        if (Helper.isEmpty(name))
             return OTHER;
         try {
             return RouteNetwork.valueOf(Helper.toUpperCase(name));

File: core/src/main/java/com/graphhopper/routing/ev/Surface.java
Patch:
@@ -23,7 +23,7 @@
  * This enum defines the road surface of an edge like unpaved or asphalt. If not tagged it will be "other".
  */
 public enum Surface {
-    OTHER("other"),
+    MISSING("missing"), OTHER("other"),
     PAVED("paved"), ASPHALT("asphalt"), CONCRETE("concrete"), PAVING_STONES("paving_stones"), COBBLESTONE("cobblestone"),
     UNPAVED("unpaved"), COMPACTED("compacted"), FINE_GRAVEL("fine_gravel"), GRAVEL("gravel"),
     GROUND("ground"), DIRT("dirt"), GRASS("grass"), SAND("sand");
@@ -42,8 +42,8 @@ public String toString() {
     }
 
     public static Surface find(String name) {
-        if (name == null)
-            return OTHER;
+        if (Helper.isEmpty(name))
+            return MISSING;
         try {
             return Surface.valueOf(Helper.toUpperCase(name));
         } catch (IllegalArgumentException ex) {

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -67,7 +67,7 @@ public class Constants {
     private static final int JVM_MINOR_VERSION;
 
     public static final int VERSION_NODE = 5;
-    public static final int VERSION_EDGE = 15;
+    public static final int VERSION_EDGE = 16;
     public static final int VERSION_SHORTCUT = 6;
     public static final int VERSION_GEOMETRY = 4;
     public static final int VERSION_LOCATION_IDX = 3;

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMSurfaceParserTest.java
Patch:
@@ -31,7 +31,7 @@ public void testSimpleTags() {
         IntsRef intsRef = em.createEdgeFlags();
         readerWay.setTag("highway", "primary");
         parser.handleWayTags(intsRef, readerWay, false, relFlags);
-        assertEquals(Surface.OTHER, surfaceEnc.getEnum(false, intsRef));
+        assertEquals(Surface.MISSING, surfaceEnc.getEnum(false, intsRef));
 
         readerWay.setTag("surface", "cobblestone");
         parser.handleWayTags(intsRef, readerWay, false, relFlags);

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMTrackTypeParserTest.java
Patch:
@@ -68,6 +68,6 @@ public void testNoNPE() {
         ReaderWay readerWay = new ReaderWay(1);
         IntsRef intsRef = em.createEdgeFlags();
         parser.handleWayTags(intsRef, readerWay, false, relFlags);
-        assertEquals(TrackType.OTHER, ttEnc.getEnum(false, intsRef));
+        assertEquals(TrackType.MISSING, ttEnc.getEnum(false, intsRef));
     }
 }

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -128,8 +128,9 @@ public Response doGet(
             shortestPathTree.setTimeLimit(limit + Math.max(limit * 0.14, 200_000));
         }
         ArrayList<Double> zs = new ArrayList<>();
+        double delta = limit / nBuckets.get();
         for (int i = 0; i < nBuckets.get(); i++) {
-            zs.add(limit / (nBuckets.get() - i));
+            zs.add((i + 1) * delta);
         }
 
         Collection<Coordinate> sites = shortestPathTree.searchSites(qr.getClosestNode());

File: web-bundle/src/main/java/com/graphhopper/http/DurationParam.java
Patch:
@@ -16,7 +16,7 @@
  *  limitations under the License.
  */
 
-package com.graphhopper.reader.gtfs;
+package com.graphhopper.http;
 
 import io.dropwizard.jersey.params.AbstractParam;
 

File: web-bundle/src/main/java/com/graphhopper/http/FeedConfiguration.java
Patch:
@@ -16,7 +16,7 @@
  *  limitations under the License.
  */
 
-package com.graphhopper.gtfs.dropwizard;
+package com.graphhopper.http;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.transit.realtime.GtfsRealtime;

File: web-bundle/src/main/java/com/graphhopper/http/GHLocationParam.java
Patch:
@@ -16,8 +16,9 @@
  *  limitations under the License.
  */
 
-package com.graphhopper.reader.gtfs;
+package com.graphhopper.http;
 
+import com.graphhopper.reader.gtfs.GHLocation;
 import io.dropwizard.jersey.params.AbstractParam;
 
 import javax.annotation.Nullable;

File: web-bundle/src/main/java/com/graphhopper/http/RealtimeBundle.java
Patch:
@@ -16,7 +16,7 @@
  *  limitations under the License.
  */
 
-package com.graphhopper.gtfs.dropwizard;
+package com.graphhopper.http;
 
 import com.graphhopper.reader.gtfs.GtfsStorage;
 import com.graphhopper.reader.gtfs.RealtimeFeed;

File: web-bundle/src/main/java/com/graphhopper/http/RealtimeBundleConfiguration.java
Patch:
@@ -16,9 +16,7 @@
  *  limitations under the License.
  */
 
-package com.graphhopper.gtfs.dropwizard;
-
-import java.util.List;
+package com.graphhopper.http;
 
 public interface RealtimeBundleConfiguration {
 

File: web-bundle/src/main/java/com/graphhopper/http/RealtimeFeedLoadingCache.java
Patch:
@@ -16,7 +16,7 @@
  *  limitations under the License.
  */
 
-package com.graphhopper.gtfs.dropwizard;
+package com.graphhopper.http;
 
 import com.conveyal.gtfs.GTFSFeed;
 import com.google.common.cache.CacheBuilder;

File: web-bundle/src/main/java/com/graphhopper/resources/PtRouteResource.java
Patch:
@@ -20,6 +20,8 @@
 
 import com.fasterxml.jackson.databind.node.ObjectNode;
 import com.graphhopper.GHResponse;
+import com.graphhopper.http.DurationParam;
+import com.graphhopper.http.GHLocationParam;
 import com.graphhopper.http.WebHelper;
 import com.graphhopper.reader.gtfs.*;
 import com.graphhopper.util.Helper;

File: web/src/main/java/com/graphhopper/http/GraphHopperApplication.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.gtfs.dropwizard.RealtimeBundle;
 import com.graphhopper.http.cli.ImportCommand;
 import com.graphhopper.http.resources.RootResource;
 import io.dropwizard.Application;

File: web/src/main/java/com/graphhopper/http/GraphHopperServerConfiguration.java
Patch:
@@ -19,8 +19,6 @@
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import com.graphhopper.GraphHopperConfig;
-import com.graphhopper.gtfs.dropwizard.RealtimeBundleConfiguration;
-import com.graphhopper.gtfs.dropwizard.RealtimeConfiguration;
 import io.dropwizard.Configuration;
 import io.dropwizard.bundles.assets.AssetsBundleConfiguration;
 import io.dropwizard.bundles.assets.AssetsConfiguration;

File: core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
Patch:
@@ -59,9 +59,6 @@ public final void setNode(int nodeId, double lat, double lon, double ele) {
         } else {
             baseGraph.bounds.update(lat, lon);
         }
-
-        if (baseGraph.supportsTurnCosts())
-            baseGraph.nodes.setInt(tmp + baseGraph.N_TC, TurnCostStorage.NO_TURN_ENTRY);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/AbstractBidirectionEdgeCHNoSOD.java
Patch:
@@ -46,8 +46,8 @@ public AbstractBidirectionEdgeCHNoSOD(RoutingCHGraph graph) {
         // the inner explorers will run on the base-(or base-query-)graph edges only.
         // we need extra edge explorers, because they get called inside a loop that already iterates over edges
         BooleanEncodedValue accessEnc = graph.getWeighting().getFlagEncoder().getAccessEnc();
-        innerInExplorer = graph.getBaseGraph().createEdgeExplorer(DefaultEdgeFilter.inEdges(accessEnc));
-        innerOutExplorer = graph.getBaseGraph().createEdgeExplorer(DefaultEdgeFilter.outEdges(accessEnc));
+        innerInExplorer = graph.getGraph().getBaseGraph().createEdgeExplorer(DefaultEdgeFilter.inEdges(accessEnc));
+        innerOutExplorer = graph.getGraph().getBaseGraph().createEdgeExplorer(DefaultEdgeFilter.outEdges(accessEnc));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/storage/RoutingCHGraphImpl.java
Patch:
@@ -101,7 +101,7 @@ public Graph getGraph() {
 
     @Override
     public Graph getBaseGraph() {
-        return chGraph.getBaseGraph();
+        return baseGraph;
     }
 
     @Override

File: matching-web/src/test/java/com/graphhopper/matching/RoutingAdditivityTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.ResponsePath;
-import com.graphhopper.config.CHProfile;
+import com.graphhopper.config.LMProfile;
 import com.graphhopper.config.Profile;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.CarFlagEncoder;
@@ -53,8 +53,8 @@ public void setup() {
         graphHopper.setGraphHopperLocation(GH_LOCATION);
         graphHopper.setEncodingManager(EncodingManager.create(encoder));
         graphHopper.setProfiles(new Profile("my_profile").setVehicle("car").setWeighting("fastest"));
-        graphHopper.getCHPreparationHandler().setCHProfiles(new CHProfile("my_profile"));
-        graphHopper.getRouterConfig().setCHDisablingAllowed(true);
+        graphHopper.getLMPreparationHandler().setLMProfiles(new LMProfile("my_profile"));
+        graphHopper.getRouterConfig().setLMDisablingAllowed(true);
         graphHopper.importOrLoad();
     }
 

File: matching-web/src/main/java/com/graphhopper/matching/cli/MeasurementCommand.java
Patch:
@@ -173,7 +173,9 @@ public int doCalc(boolean warmup, int run) {
                     double lon0 = bbox.minLon + rand.nextDouble() * lonDelta;
                     double lat1 = bbox.minLat + rand.nextDouble() * latDelta;
                     double lon1 = bbox.minLon + rand.nextDouble() * lonDelta;
-                    GHResponse r = hopper.route(new GHRequest(lat0, lon0, lat1, lon1));
+                    GHRequest request = new GHRequest(lat0, lon0, lat1, lon1);
+                    request.setProfile("fast_car");
+                    GHResponse r = hopper.route(request);
 
                     // if found, use it for map matching:
                     if (!r.hasErrors()) {

File: matching-web/src/main/java/com/graphhopper/matching/cli/MeasurementCommand.java
Patch:
@@ -173,7 +173,9 @@ public int doCalc(boolean warmup, int run) {
                     double lon0 = bbox.minLon + rand.nextDouble() * lonDelta;
                     double lat1 = bbox.minLat + rand.nextDouble() * latDelta;
                     double lon1 = bbox.minLon + rand.nextDouble() * lonDelta;
-                    GHResponse r = hopper.route(new GHRequest(lat0, lon0, lat1, lon1));
+                    GHRequest request = new GHRequest(lat0, lon0, lat1, lon1);
+                    request.setProfile("fast_car");
+                    GHResponse r = hopper.route(request);
 
                     // if found, use it for map matching:
                     if (!r.hasErrors()) {

File: api/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -153,7 +153,7 @@ public List<Double> getHeadings() {
     }
 
     public static boolean isAzimuthValue(double heading) {
-        // heading must be in [0, 360) oder NaN
+        // heading must be in [0, 360) or NaN
         return Double.isNaN(heading) || (Double.compare(heading, 360) < 0 && Double.compare(heading, 0) >= 0);
     }
 

File: client-hc/src/main/java/com/graphhopper/api/MatrixResponse.java
Patch:
@@ -129,7 +129,7 @@ public long getTime(int from, int to) {
      */
     public double getDistance(int from, int to) {
         if (hasErrors()) {
-            throw new IllegalStateException("Cannot return distance (" + from + "," + to + ") if errors occured " + getErrors());
+            throw new IllegalStateException("Cannot return distance (" + from + "," + to + ") if errors occurred " + getErrors());
         }
 
         if (from >= distances.length) {
@@ -147,7 +147,7 @@ public double getDistance(int from, int to) {
      */
     public double getWeight(int from, int to) {
         if (hasErrors()) {
-            throw new IllegalStateException("Cannot return weight (" + from + "," + to + ") if errors occured " + getErrors());
+            throw new IllegalStateException("Cannot return weight (" + from + "," + to + ") if errors occurred " + getErrors());
         }
 
         if (from >= weights.length) {

File: core/src/main/java/com/graphhopper/coll/CompressedArray.java
Patch:
@@ -70,7 +70,7 @@ public CompressedArray(int _segments, int entriesPerSeg, int approxBytesPerEntry
      */
     public static byte[] compress(byte[] value, int offset, int length, int compressionLevel) {
         /* Create an expandable byte array to hold the compressed data.
-         * You cannot use an array that's the same size as the orginal because
+         * You cannot use an array that's the same size as the original because
          * there is no guarantee that the compressed data will be smaller than
          * the uncompressed data. */
         ByteArrayOutputStream bos = new ByteArrayOutputStream(length);

File: core/src/main/java/com/graphhopper/reader/dem/GraphElevationSmoothing.java
Patch:
@@ -42,7 +42,7 @@ public static PointList smoothElevation(PointList geometry) {
                 }
             }
 
-            // In this case we cannot find any points withing the max search distance, so we simply skip this point
+            // In this case we cannot find any points within the max search distance, so we simply skip this point
             if(start == end)
                 continue;
 

File: core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
Patch:
@@ -61,7 +61,7 @@ public static Calendar createCalendar() {
     }
 
     static ParsedCalendar parseDateString(String dateString) throws ParseException {
-        // Replace occurences of public holidays
+        // Replace occurrences of public holidays
         dateString = dateString.replaceAll("(,( )*)?(PH|SH)", "");
         dateString = dateString.trim();
         Calendar calendar = createCalendar();
@@ -88,7 +88,7 @@ static ParsedCalendar parseDateString(String dateString) throws ParseException {
                         } catch (ParseException e5) {
                             int index = DAY_NAMES.indexOf(dateString);
                             if (index < 0)
-                                throw new ParseException("Unparseable date: \"" + dateString + "\"", 0);
+                                throw new ParseException("Unparsable date: \"" + dateString + "\"", 0);
 
                             // Ranges from 1-7
                             calendar.set(Calendar.DAY_OF_WEEK, index + 1);

File: core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
Patch:
@@ -523,7 +523,7 @@ AtomicInteger addToMap(GHIntObjectHashMap<IntSet> map, Path path) {
                 int tid = traversalMode.createTraversalId(iterState, false);
                 set.add(tid);
                 if (startTID.get() < 0) {
-                    // for node based traversal we need to explicitely add base node as starting node and to list
+                    // for node based traversal we need to explicitly add base node as starting node and to list
                     if (!traversalMode.isEdgeBased()) {
                         tid = iterState.getBaseNode();
                         set.add(tid);

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -294,7 +294,7 @@ public void next(EdgeIteratorState edge, int index, int prevEdgeId) {
                     --B-<--
                     Road A and Road B have to have the same name and roughly the same, but opposite orientation, otherwise we are assuming this is no u-turn.
 
-                    Note: This approach only works if there a turn instruction fro A->Connector and Connector->B.
+                    Note: This approach only works if there a turn instruction for A->Connector and Connector->B.
                     Currently we don't create a turn instruction if there is no other possible turn
                     We only create a u-turn if edge B is a one-way, see #1073 for more details.
                   */
@@ -437,7 +437,7 @@ private int getTurn(EdgeIteratorState edge, int baseNode, int prevNode, int adjN
         // If not, we don't need a turn instruction
         EdgeIteratorState otherContinue = outgoingEdges.getOtherContinue(prevLat, prevLon, prevOrientation);
 
-        // Signs provide too less detail, so we use the delta for a precise comparision
+        // Signs provide too less detail, so we use the delta for a precise comparison
         double delta = InstructionsHelper.calculateOrientationDelta(prevLat, prevLon, lat, lon, prevOrientation);
 
         // This state is bad! Two streets are going more or less straight

File: core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
Patch:
@@ -194,7 +194,7 @@ public int getMinimumNodes() {
     }
 
     /**
-     * This weighting is used for the selection heuristic and is per default not the weighting specified in the contructor.
+     * This weighting is used for the selection heuristic and is per default not the weighting specified in the constructor.
      * The special weighting leads to a much better distribution of the landmarks and results in better response times.
      */
     public void setLMSelectionWeighting(Weighting lmSelectionWeighting) {
@@ -264,7 +264,7 @@ public void createLandmarks() {
         String additionalInfo = "";
         // guess the factor
         if (factor <= 0) {
-            // A 'factor' is necessary to store the weight in just a short value but without loosing too much precision.
+            // A 'factor' is necessary to store the weight in just a short value but without losing too much precision.
             // This factor is rather delicate to pick, we estimate it from an exploration with some "test landmarks",
             // see estimateMaxWeight. If we pick the distance too big for small areas this could lead to (slightly)
             // suboptimal routes as there will be too big rounding errors. But picking it too small is bad for performance

File: core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
Patch:
@@ -65,7 +65,7 @@ public void applyWayTags(ReaderWay way, EdgeIteratorState edge) {
             return;
 
         // Decrease the speed for ele increase (incline), and decrease the speed for ele decrease (decline). The speed-decrease
-        // has to be bigger (compared to the speed-increase) for the same elevation difference to simulate loosing energy and avoiding hills.
+        // has to be bigger (compared to the speed-increase) for the same elevation difference to simulate losing energy and avoiding hills.
         // For the reverse speed this has to be the opposite but again keeping in mind that up+down difference.
         double incEleSum = 0, incDist2DSum = 0, decEleSum = 0, decDist2DSum = 0;
         // double prevLat = pl.getLatitude(0), prevLon = pl.getLongitude(0);

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -396,7 +396,7 @@ public void testStallOnDemandViaVirtuaNode_issue1574() {
         // * via nodes/virtual edges and the associated weight precision (without virtual nodes between source and target
         //   there is no problem, but this can happen for via routes
         // * the fact that the LevelEdgeFilter always accepts virtual nodes
-        // here we wil construct a special case where a connection is not found without the fix in #1574.
+        // here we will construct a special case where a connection is not found without the fix in #1574.
 
         // use fastest weighting in this test to be able to fine-tune some weights via the speed (see below)
         Weighting fastestWeighting = new FastestWeighting(carEncoder);

File: core/src/test/java/com/graphhopper/routing/util/WheelchairFlagEncoderTest.java
Patch:
@@ -225,7 +225,7 @@ public void testAccess() {
         assertTrue(wheelchairEncoder.getAccess(way).canSkip());
 
         way.clearTags();
-        // allow pathes as they are used as generic path
+        // allow paths as they are used as generic path
         way.setTag("highway", "path");
         assertTrue(wheelchairEncoder.getAccess(way).isWay());
 

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -518,7 +518,7 @@ public void testDeleteNodes(int fillToSize) {
 
         graph.markNodeRemoved(0);
         graph.markNodeRemoved(2);
-        // no deletion happend
+        // no deletion happened
         assertEquals(fillToSize, graph.getNodes());
 
         assertTrue(GHUtility.getProblems(graph).isEmpty());

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -161,7 +161,7 @@ public void testDisconnectEdge() {
         lg.shortcut(1, 2, PrepareEncoder.getScDirMask(), 0, 10, 11);
         lg.shortcut(1, 0, PrepareEncoder.getScFwdDir(), 0, 12, 13);
         lg.shortcut(3, 1, PrepareEncoder.getScFwdDir(), 0, 14, 15);
-        // create everytime a new independent iterator for disconnect method
+        // create every time a new independent iterator for disconnect method
         EdgeIterator iter = lg.createEdgeExplorer().setBaseNode(1);
         iter.next();
         assertEquals(3, iter.getAdjNode());
@@ -653,7 +653,7 @@ public void testCHProfilesWithDifferentNames() {
                                 CHConfig.nodeBased("a", weighting)
                         )
                         .create();
-                fail("creating mulitple profiles with the same name should be an error");
+                fail("creating multiple profiles with the same name should be an error");
             } catch (Exception e) {
                 assertTrue("unexpected error: " + e.getMessage(), e.getMessage().contains("a CHGraph already exists"));
             }

File: core/src/test/java/com/graphhopper/util/AngleCalcTest.java
Patch:
@@ -20,7 +20,6 @@
 import org.junit.Test;
 
 import static org.junit.Assert.*;
-import static org.junit.Assert.assertFalse;
 
 /**
  * @author Johannes Pelzer
@@ -37,7 +36,7 @@ public void testOrientationExact() {
         assertEquals(-45.0, Math.toDegrees(AC.calcOrientation(0, 0, -1, 1)), 0.01);
         assertEquals(-135.0, Math.toDegrees(AC.calcOrientation(0, 0, -1, -1)), 0.01);
 
-        // is symetric?
+        // is symmetric?
         assertEquals(90 - 32.76, Math.toDegrees(AC.calcOrientation(49.942, 11.580, 49.944, 11.582)), 0.01);
         assertEquals(-90 - 32.76, Math.toDegrees(AC.calcOrientation(49.944, 11.582, 49.942, 11.580)), 0.01);
     }
@@ -50,7 +49,7 @@ public void testOrientationFast() {
         assertEquals(-45.0, Math.toDegrees(AC.calcOrientation(0, 0, -1, 1, false)), 0.01);
         assertEquals(-135.0, Math.toDegrees(AC.calcOrientation(0, 0, -1, -1, false)), 0.01);
 
-        // is symetric?
+        // is symmetric?
         assertEquals(90 - 32.92, Math.toDegrees(AC.calcOrientation(49.942, 11.580, 49.944, 11.582, false)), 0.01);
         assertEquals(-90 - 32.92, Math.toDegrees(AC.calcOrientation(49.944, 11.582, 49.942, 11.580, false)), 0.01);
     }

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMInputFile.java
Patch:
@@ -228,7 +228,7 @@ public void close() throws IOException {
         } finally {
             eof = true;
             bis.close();
-            // if exception happend on OSMInputFile-thread we need to shutdown the pbf handling
+            // if exception happened on OSMInputFile-thread we need to shutdown the pbf handling
             if (pbfReaderThread != null && pbfReaderThread.isAlive())
                 pbfReaderThread.interrupt();
         }

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -550,7 +550,7 @@ void prepareHighwayNode(long osmId) {
             // osmId is used exactly once
             getNodeMap().put(osmId, PILLAR_NODE);
         } else if (tmpGHNodeId > EMPTY_NODE) {
-            // mark node as tower node as it occured at least twice times
+            // mark node as tower node as it occurred at least twice times
             getNodeMap().put(osmId, TOWER_NODE);
         } else {
             // tmpIndex is already negative (already tower node)
@@ -729,7 +729,7 @@ private int handlePillarNode(int tmpNode, long osmId, PointList pointList, boole
         double lon = pillarInfo.getLongitude(tmpNode);
         double ele = pillarInfo.getElevation(tmpNode);
         if (lat == Double.MAX_VALUE || lon == Double.MAX_VALUE)
-            throw new RuntimeException("Conversion pillarNode to towerNode already happended!? "
+            throw new RuntimeException("Conversion pillarNode to towerNode already happened!? "
                     + "osmId:" + osmId + " pillarIndex:" + tmpNode);
 
         if (convertToTowerNode) {

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfBlobDecoder.java
Patch:
@@ -230,7 +230,7 @@ private void processNodes(Osmformat.DenseNodes nodes, PbfFieldDecoder fieldDecod
                 int valueIndex = keysValuesIterator.next();
 
                 if (tags == null) {
-                    // devide by 2 as key&value, multiple by 2 because of the better approximation
+                    // divide by 2 as key&value, multiple by 2 because of the better approximation
                     tags = new HashMap<>(Math.max(3, 2 * (nodes.getKeysValsList().size() / 2) / idList.size()));
                 }
 

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -824,7 +824,7 @@ public void testGetPathsDirectionEnforcement4() {
         GHPoint start = new GHPoint(0.0015, 0.002);
         // End at middle of edge 2-3
         GHPoint end = new GHPoint(0.002, 0.0005);
-        // Via Point betweeen 8-3
+        // Via Point between 8-3
         GHPoint via = new GHPoint(0.0015, 0.001);
         GHRequest req = new GHRequest().
                 setPoints(Arrays.asList(start, via, end)).
@@ -840,7 +840,7 @@ public void testGetPathsDirectionEnforcement4() {
 
     @Test
     public void testGetPathsDirectionEnforcement5() {
-        // Test independence of previous enforcement for subsequent pathes
+        // Test independence of previous enforcement for subsequent paths
         instance = createSquareGraphInstance();
 
         // Start in middle of edge 4-5 

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMTest.java
Patch:
@@ -618,7 +618,7 @@ Graph runAlgo(TestAlgoCollector testCollector, String osmFile,
                   boolean withCH, String vehicle, String weightStr, boolean is3D) {
 
         // for different weightings we need a different storage, otherwise we would need to remove the graph folder
-        // everytime we come with a different weighting
+        // every time we come with a different weighting
         // graphFile += weightStr;
 
         AlgoHelperEntry algoEntry = null;

File: web-api/src/main/java/com/graphhopper/http/WebHelper.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.ResponsePath;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PointList;
-import org.locationtech.jts.geom.Envelope;
 
 import java.io.UnsupportedEncodingException;
 import java.net.URLEncoder;
@@ -68,7 +67,7 @@ public static PointList decodePolyline(String encoded, int initCap, boolean is3D
             int deltaLatitude = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
             lat += deltaLatitude;
 
-            // longitute
+            // longitude
             shift = 0;
             result = 0;
             do {

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -252,7 +252,7 @@ static void initHints(PMap m, MultivaluedMap<String, String> parameterMap) {
                 // TODO e.g. 'point' parameter occurs multiple times and we cannot throw an exception here
                 //  unknown parameters (hints) should be allowed to be multiparameters, too, or we shouldn't use them for
                 //  known parameters either, _or_ known parameters must be filtered before they come to this code point,
-                //  _or_ we stop passing unknown parameters alltogether.
+                //  _or_ we stop passing unknown parameters altogether.
                 // throw new WebApplicationException(String.format("This query parameter (hint) is not allowed to occur multiple times: %s", e.getKey()));
                 // see also #1976
             }

File: api/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -110,6 +110,7 @@ public static final class Routing {
          */
         public static final String WAY_POINT_MAX_DISTANCE = "way_point_max_distance";
         public static final String INIT_WAY_POINT_MAX_DISTANCE = ROUTING_INIT_PREFIX + "way_point_max_distance";
+        public static final String ELEVATION_WAY_POINT_MAX_DISTANCE = "elevation_way_point_max_distance";
         /**
          * true or false. If routes at via points should avoid u-turns. (not for CH) See related
          * 'heading' parameter:

File: core/src/main/java/com/graphhopper/routing/ch/CHRoutingAlgorithmFactory.java
Patch:
@@ -60,10 +60,10 @@ private RoutingAlgorithm doCreateAlgo(Graph graph, AlgorithmOptions opts) {
     }
 
     private RoutingAlgorithm createAlgoEdgeBased(RoutingCHGraph g, AlgorithmOptions opts) {
-        if (ASTAR_BI.equals(opts.getAlgorithm()) || Helper.isEmpty(opts.getAlgorithm())) {
+        if (ASTAR_BI.equals(opts.getAlgorithm())) {
             return new AStarBidirectionEdgeCHNoSOD(g)
                     .setApproximation(RoutingAlgorithmFactorySimple.getApproximation(ASTAR_BI, opts, g.getGraph().getNodeAccess()));
-        } else if (DIJKSTRA_BI.equals(opts.getAlgorithm())) {
+        } else if (DIJKSTRA_BI.equals(opts.getAlgorithm()) || Helper.isEmpty(opts.getAlgorithm())) {
             return new DijkstraBidirectionEdgeCHNoSOD(g);
         } else if (ALT_ROUTE.equalsIgnoreCase(opts.getAlgorithm())) {
             return new AlternativeRouteEdgeCH(g, opts.getHints());

File: core/src/main/java/com/graphhopper/routing/AStarBidirectionEdgeCHNoSOD.java
Patch:
@@ -107,7 +107,6 @@ private double getMinCurrToPathWeight() {
         return currTo.weight + weightApprox.approximate(currTo.adjNode, true);
     }
 
-
     @Override
     public String getName() {
         return "astarbi|ch|edge_based|no_sod";

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
Patch:
@@ -44,7 +44,7 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
         } else if (DIJKSTRA.equalsIgnoreCase(algoStr)) {
             ra = new Dijkstra(g, weighting, opts.getTraversalMode());
 
-        } else if (ASTAR_BI.equalsIgnoreCase(algoStr)) {
+        } else if (ASTAR_BI.equalsIgnoreCase(algoStr) || Helper.isEmpty(opts.getAlgorithm())) {
             AStarBidirection aStarBi = new AStarBidirection(g, weighting,
                     opts.getTraversalMode());
             aStarBi.setApproximation(getApproximation(ASTAR_BI, opts, g.getNodeAccess()));

File: core/src/main/java/com/graphhopper/routing/lm/LMRoutingAlgorithmFactory.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
+import com.graphhopper.util.Helper;
 import com.graphhopper.util.Parameters;
 
 import static com.graphhopper.util.Parameters.Algorithms.*;
@@ -58,7 +59,7 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
             algo.setApproximation(getApproximator(g, activeLM, epsilon));
             algo.setMaxVisitedNodes(opts.getMaxVisitedNodes());
             return algo;
-        } else if (ASTAR_BI.equalsIgnoreCase(algoStr)) {
+        } else if (ASTAR_BI.equalsIgnoreCase(algoStr) || Helper.isEmpty(opts.getAlgorithm())) {
             double epsilon = opts.getHints().getDouble(Parameters.Algorithms.AStarBi.EPSILON, 1);
             AStarBidirection algo = new AStarBidirection(g, weighting, opts.getTraversalMode());
             algo.setApproximation(getApproximator(g, activeLM, epsilon));

File: core/src/main/java/com/graphhopper/routing/weighting/custom/DecimalToValueEntry.java
Patch:
@@ -43,7 +43,7 @@ private DecimalToValueEntry(DecimalEncodedValue dev, Range range, double fallbac
 
     @Override
     public double getValue(EdgeIteratorState iter, boolean reverse) {
-        double edgeValue = iter.get(dev);
+        double edgeValue = reverse ? iter.getReverse(dev) : iter.get(dev);
         return edgeValue < maxExclusive && edgeValue > minExclusive ? rangeValue : fallback;
     }
 

File: core/src/main/java/com/graphhopper/routing/weighting/custom/EnumToValueEntry.java
Patch:
@@ -37,7 +37,7 @@ private EnumToValueEntry(EnumEncodedValue eev, double[] values) {
 
     @Override
     public double getValue(EdgeIteratorState iter, boolean reverse) {
-        int enumOrdinal = iter.get(eev);
+        int enumOrdinal = reverse ? iter.getReverse(eev) : iter.get(eev);
         return values[enumOrdinal];
     }
 

File: core/src/main/java/com/graphhopper/routing/weighting/custom/IntToValueEntry.java
Patch:
@@ -44,7 +44,7 @@ private IntToValueEntry(IntEncodedValue iev, DecimalToValueEntry.Range range, do
 
     @Override
     public double getValue(EdgeIteratorState iter, boolean reverse) {
-        double edgeValue = iter.get(iev);
+        double edgeValue = reverse ? iter.getReverse(iev) : iter.get(iev);
         return edgeValue < maxExclusive && edgeValue > minExclusive ? rangeValue : fallback;
     }
 

File: core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java
Patch:
@@ -92,8 +92,8 @@ public double calcPriority(EdgeIteratorState edge, boolean reverse) {
         for (int i = 0; i < priorityList.size(); i++) {
             EdgeToValueEntry entry = priorityList.get(i);
             double value = entry.getValue(edge, reverse);
+            if (value == 0) return 0;
             priority *= value;
-            if (priority == 0) return 0;
         }
         return priority;
     }

File: core/src/main/java/com/graphhopper/routing/weighting/custom/GeoToValueEntry.java
Patch:
@@ -43,6 +43,8 @@ static Geometry pickGeometry(CustomModel customModel, String key) {
         JsonFeature feature = customModel.getAreas().get(id);
         if (feature == null)
             throw new IllegalArgumentException("Cannot find area " + id);
+        if (feature.getGeometry() == null)
+            throw new IllegalArgumentException("Cannot find coordinates of area " + id);
         return feature.getGeometry();
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -170,6 +170,7 @@ protected void importPublicTransit() {
                                 t.transfer.min_transfer_time = (int) (t.time / 1000L);
                                 gtfsFeed.transfers.put(t.id, t.transfer);
                             });
+                    LOGGER.info("Building transit graph for feed {}", gtfsFeed.feedId);
                     gtfsReader.buildPtNetwork();
                     readers.put(id, gtfsReader);
                 });
@@ -217,7 +218,6 @@ private void insertTransfersBetweenFeeds(HashMap<String, GtfsReader> readers) {
                 }
             }
         });
-        LOGGER.info("Finished looking for inter-feed transfers");
     }
 
     private Stream<TransferWithTime> getType0TransferWithTimes(String id, GTFSFeed gtfsFeed) {

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -142,8 +142,7 @@ public void doWork(ResponsePath responsePath, List<Path> paths, EncodedValueLook
         }
 
         if (!fullPoints.isEmpty()) {
-            String debug = responsePath.getDebugInfo() + ", simplify (" + origPoints + "->" + fullPoints.getSize() + ")";
-            responsePath.addDebugInfo(debug);
+            responsePath.addDebugInfo("simplify (" + origPoints + "->" + fullPoints.getSize() + ")");
             if (fullPoints.is3D)
                 calcAscendDescend(responsePath, fullPoints);
         }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
Patch:
@@ -268,7 +268,7 @@ public boolean isAdjacentToNode(int edge, int node) {
         Map<String, int[]> boardEdgesForTrip = new HashMap<>();
         Map<String, int[]> alightEdgesForTrip = new HashMap<>();
         Map<GtfsStorage.FeedIdWithTimezone, Integer> writableTimeZones = new HashMap<>(staticGtfs.getWritableTimeZones());
-        Map<Integer, GtfsStorageI.PlatformDescriptor> platformDescriptorByEdge = new HashMap<>(staticGtfs.getPlatformDescriptorByEdge());
+        Map<Integer, GtfsStorageI.PlatformDescriptor> platformDescriptorByEdge = new HashMap<>(staticGtfs.getPlatformDescriptorByEdge()); // FIXME: Too slow for production
 
         feedMessages.forEach((feedKey, feedMessage) -> {
             GTFSFeed feed = staticGtfs.getGtfsFeeds().get(feedKey);

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -96,7 +96,7 @@ public class MiniGraphUI {
     public MiniGraphUI(GraphHopper hopper, boolean debug) {
         final Graph graph = hopper.getGraphHopperStorage();
         this.na = graph.getNodeAccess();
-        encoder = hopper.getEncodingManager().getEncoder("car");
+        encoder = hopper.getEncodingManager().fetchEdgeEncoders().get(0);
         avSpeedEnc = encoder.getAverageSpeedEnc();
         accessEnc = encoder.getAccessEnc();
         Profile profile = hopper.getProfiles().iterator().next();
@@ -136,7 +136,7 @@ public void updateBestPath(double edgeWeight, SPTEntry entry, int origEdgeId, in
                 public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
                     // doable but ugly
                     Weighting w = preparation.getCHConfig().getWeighting();
-                    return new TmpAlgo(new RoutingCHGraphImpl(routingGraph, w), mg);
+                    return new TmpAlgo(new RoutingCHGraphImpl(g, g.wrapWeighting(w)), mg);
                 }
             };
             algoOpts = new AlgorithmOptions(Algorithms.DIJKSTRA_BI, weighting);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1080,7 +1080,8 @@ public List<Path> calcPaths(GHRequest request, GHResponse ghRsp) {
                 checkNonChMaxWaypointDistance(request.getPoints());
                 final int uTurnCostsInt = request.getHints().getInt(Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);
                 if (uTurnCostsInt != INFINITE_U_TURN_COSTS && !tMode.isEdgeBased()) {
-                    throw new IllegalArgumentException("Finite u-turn costs can only be used for edge-based routing, use `" + Routing.EDGE_BASED + "=true'");
+                    throw new IllegalArgumentException("Finite u-turn costs can only be used for edge-based routing, you need to use a profile that" +
+                            "supports turn costs. Currently the following profiles that support turn costs are available: " + getTurnCostProfiles());
                 }
                 FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());
                 weighting = createWeighting(profile, request.getHints());

File: core/src/main/java/com/graphhopper/routing/AbstractBidirCHAlgo.java
Patch:
@@ -204,7 +204,7 @@ private void fillEdges(SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,
                 continue;
 
             if (updateBestPath) {
-                // only needed for edge-based -> skip the calculation and use dummy value otherwise
+                // use dummy value for edge weight as it is used for neither node- nor edge-based CH
                 updateBestPath(Double.POSITIVE_INFINITY, entry, origEdgeId, traversalId, reverse);
             }
         }

File: core/src/main/java/com/graphhopper/storage/CHConfig.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.util.Helper;
 
 import static com.graphhopper.config.Profile.validateProfileName;
 
@@ -69,5 +70,4 @@ public boolean equals(Object o) {
     public int hashCode() {
         return getName().hashCode();
     }
-
 }

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -684,5 +684,4 @@ private GraphHopperStorage createStorageWithWeightings(String... profileStrings)
                 .withTurnCosts(true)
                 .build();
     }
-
 }

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -1408,13 +1408,13 @@ public void testCrossQuery() {
         testCrossQueryAssert(profile3, hopper, 815.4, 146, true);
 
         // LM (should be the same as flex, but with less visited nodes!)
-        testCrossQueryAssert(profile1, hopper, 528.3, 106, false);
-        testCrossQueryAssert(profile2, hopper, 636.0, 78, false);
+        testCrossQueryAssert(profile1, hopper, 528.3, 74, false);
+        testCrossQueryAssert(profile2, hopper, 636.0, 84, false);
         // this is actually interesting: the number of visited nodes *increases* once again (while it strictly decreases
         // with rising distance factor for flex): cross-querying 'works', but performs *worse*, because the landmarks
         // were not customized for the weighting in use. Creating a separate LM preparation for profile3 yields 74
         // instead of 124 visited nodes (not shown here)
-        testCrossQueryAssert(profile3, hopper, 815.4, 124, false);
+        testCrossQueryAssert(profile3, hopper, 815.4, 128, false);
     }
 
     private void testCrossQueryAssert(String profile, GraphHopper hopper, double expectedWeight, int expectedVisitedNodes, boolean disableLM) {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -971,7 +971,7 @@ protected void postProcessing(boolean closeEarly) {
 
         initLocationIndex();
 
-        importPublicTranst();
+        importPublicTransit();
 
         if (lmPreparationHandler.isEnabled())
             lmPreparationHandler.createPreparations(ghStorage, locationIndex);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -971,7 +971,7 @@ protected void postProcessing(boolean closeEarly) {
 
         initLocationIndex();
 
-        importPublicTransit();
+        importPublicTranst();
 
         if (lmPreparationHandler.isEnabled())
             lmPreparationHandler.createPreparations(ghStorage, locationIndex);

File: api/src/test/java/com/graphhopper/util/shapes/BBoxTest.java
Patch:
@@ -33,7 +33,7 @@ public void testCreate() {
         DistanceCalc c = new DistanceCalcEarth();
         BBox b = c.createBBox(52, 10, 100000);
 
-        // The calclulated bounding box has no negative values (also for southern hemisphere and negative meridians)
+        // The calculated bounding box has no negative values (also for southern hemisphere and negative meridians)
         // and the ordering is always the same (top to bottom and left to right)
         assertEquals(52.8993, b.maxLat, 1e-4);
         assertEquals(8.5393, b.minLon, 1e-4);

File: api/src/test/java/com/graphhopper/util/GHResponseTest.java
Patch:
@@ -18,11 +18,10 @@
 package com.graphhopper.util;
 
 import com.graphhopper.GHResponse;
-import com.graphhopper.PathWrapper;
+import com.graphhopper.ResponsePath;
 import org.junit.Assert;
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 
 public class GHResponseTest {
@@ -35,7 +34,7 @@ public void testToString() throws Exception {
     public void testHasNoErrorIfEmpty() throws Exception {
         assertFalse(new GHResponse().hasErrors());
         GHResponse rsp = new GHResponse();
-        rsp.add(new PathWrapper());
+        rsp.add(new ResponsePath());
         assertFalse(rsp.hasErrors());
     }
 }

File: client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
Patch:
@@ -24,7 +24,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopperAPI;
-import com.graphhopper.PathWrapper;
+import com.graphhopper.ResponsePath;
 import com.graphhopper.http.WebHelper;
 import com.graphhopper.jackson.Jackson;
 import com.graphhopper.jackson.PathWrapperDeserializer;
@@ -210,7 +210,7 @@ public GHResponse route(GHRequest ghRequest) {
             JsonNode paths = json.get("paths");
 
             for (JsonNode path : paths) {
-                PathWrapper altRsp = PathWrapperDeserializer.createPathWrapper(objectMapper, path, tmpElevation, tmpTurnDescription);
+                ResponsePath altRsp = PathWrapperDeserializer.createPathWrapper(objectMapper, path, tmpElevation, tmpTurnDescription);
                 res.add(altRsp);
             }
 

File: core/src/main/java/com/graphhopper/routing/template/RoutingTemplate.java
Patch:
@@ -48,7 +48,7 @@ public interface RoutingTemplate {
 
     /**
      * This method merges the returned paths appropriately e.g. all paths from the list into one
-     * PathWrapper of GHResponse or multiple (via / round trip).
+     * ResponsePath of GHResponse or multiple (via / round trip).
      */
     void finish(PathMerger pathMerger, Translation tr);
 

File: core/src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -68,10 +68,10 @@ public void testLoad() {
         // 3 -> 0
         GHResponse rsp = instance.route(new GHRequest(42, 10.4, 42, 10).setProfile(profile));
         assertFalse(rsp.hasErrors());
-        PathWrapper arsp = rsp.getBest();
-        assertEquals(80, arsp.getDistance(), 1e-6);
+        ResponsePath responsePath = rsp.getBest();
+        assertEquals(80, responsePath.getDistance(), 1e-6);
 
-        PointList points = arsp.getPoints();
+        PointList points = responsePath.getPoints();
         assertEquals(42, points.getLatitude(0), 1e-5);
         assertEquals(10.4, points.getLongitude(0), 1e-5);
         assertEquals(41.9, points.getLatitude(1), 1e-5);

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -23,7 +23,7 @@
 import com.conveyal.gtfs.model.StopTime;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.google.transit.realtime.GtfsRealtime;
-import com.graphhopper.PathWrapper;
+import com.graphhopper.ResponsePath;
 import com.graphhopper.Trip;
 import com.graphhopper.gtfs.fare.Fares;
 import com.graphhopper.routing.InstructionsFromEdges;
@@ -59,7 +59,7 @@ class TripFromLabel {
         this.realtimeFeed = realtimeFeed;
     }
 
-    PathWrapper createPathWrapper(Translation tr, PointList waypoints, List<Trip.Leg> legs) {
+    ResponsePath createPathWrapper(Translation tr, PointList waypoints, List<Trip.Leg> legs) {
         if (legs.size() > 1 && legs.get(0) instanceof Trip.WalkLeg) {
             final Trip.WalkLeg accessLeg = (Trip.WalkLeg) legs.get(0);
             legs.set(0, new Trip.WalkLeg(accessLeg.departureLocation, new Date(legs.get(1).getDepartureTime().getTime() - (accessLeg.getArrivalTime().getTime() - accessLeg.getDepartureTime().getTime())),
@@ -72,7 +72,7 @@ PathWrapper createPathWrapper(Translation tr, PointList waypoints, List<Trip.Leg
                     new Date(legs.get(legs.size() - 2).getArrivalTime().getTime() + (egressLeg.getArrivalTime().getTime() - egressLeg.getDepartureTime().getTime()))));
         }
 
-        PathWrapper path = new PathWrapper();
+        ResponsePath path = new ResponsePath();
         path.setWaypoints(waypoints);
 
         path.getLegs().addAll(legs);

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -739,15 +739,15 @@ else if (!toLowerCase(rsp.getErrors().get(0).getMessage()).contains("not found")
                     return 0;
                 }
 
-                PathWrapper arsp = rsp.getBest();
+                ResponsePath responsePath = rsp.getBest();
                 if (!warmup) {
                     long visitedNodes = rsp.getHints().getLong("visited_nodes.sum", 0);
                     visitedNodesSum.addAndGet(visitedNodes);
                     if (visitedNodes > maxVisitedNodes.get()) {
                         maxVisitedNodes.set(visitedNodes);
                     }
 
-                    long dist = (long) arsp.getDistance();
+                    long dist = (long) responsePath.getDistance();
                     distSum.addAndGet(dist);
 
                     airDistSum.addAndGet((long) distCalc.calcDist(fromLat, fromLon, toLat, toLon));
@@ -762,7 +762,7 @@ else if (!toLowerCase(rsp.getErrors().get(0).getMessage()).contains("not found")
                         altCount.addAndGet(rsp.getAll().size());
                 }
 
-                return arsp.getPoints().getSize();
+                return responsePath.getPoints().getSize();
             }
         }.setIterations(querySettings.count).start();
 

File: web-api/src/main/java/com/graphhopper/jackson/GHResponseDeserializer.java
Patch:
@@ -23,7 +23,7 @@
 import com.fasterxml.jackson.databind.JsonNode;
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.graphhopper.GHResponse;
-import com.graphhopper.PathWrapper;
+import com.graphhopper.ResponsePath;
 
 import java.io.IOException;
 
@@ -33,8 +33,8 @@ public GHResponse deserialize(JsonParser p, DeserializationContext ctxt) throws
         GHResponse ghResponse = new GHResponse();
         JsonNode treeNode = p.readValueAsTree();
         for (JsonNode path : treeNode.get("paths")) {
-            PathWrapper pathWrapper = ((ObjectMapper) p.getCodec()).convertValue(path, PathWrapper.class);
-            ghResponse.add(pathWrapper);
+            ResponsePath responsePath = ((ObjectMapper) p.getCodec()).convertValue(path, ResponsePath.class);
+            ghResponse.add(responsePath);
         }
         return ghResponse;
     }

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -34,7 +34,7 @@ public GraphHopperModule() {
         setMixInAnnotation(LMProfile.class, LMProfileMixIn.class);
         setMixInAnnotation(GraphHopperConfig.class, GraphHopperConfigMixIn.class);
         addDeserializer(GHResponse.class, new GHResponseDeserializer());
-        addDeserializer(PathWrapper.class, new PathWrapperDeserializer());
+        addDeserializer(ResponsePath.class, new PathWrapperDeserializer());
         addDeserializer(BBox.class, new BBoxDeserializer());
         addSerializer(BBox.class, new BBoxSerializer());
         addDeserializer(GHPoint.class, new GHPointDeserializer());

File: web/src/test/java/com/graphhopper/http/resources/GpxTravelTimeConsistencyTest.java
Patch:
@@ -20,7 +20,7 @@
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GraphHopper;
-import com.graphhopper.PathWrapper;
+import com.graphhopper.ResponsePath;
 import com.graphhopper.config.Profile;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.EncodingManager;
@@ -62,13 +62,13 @@ public void testGPXListTravelTimeConsistency() {
         GHPoint routeEnd = new GHPoint(43.74958, 7.436566);
         GHRequest request = new GHRequest(routeStart, routeEnd);
         request.setProfile("profile");
-        PathWrapper path = hopper.route(request).getBest();
+        ResponsePath path = hopper.route(request).getBest();
         List<GPXEntry> gpxList = GpxFromInstructions.createGPXList(path.getInstructions());
         for (GPXEntry entry : gpxList) {
             if (entry.getTime() != null) {
                 GHRequest requestForWaypoint = new GHRequest(routeStart, entry.getPoint());
                 requestForWaypoint.setProfile("profile");
-                PathWrapper partialPath = hopper.route(requestForWaypoint).getBest();
+                ResponsePath partialPath = hopper.route(requestForWaypoint).getBest();
                 assertEquals(partialPath.getTime(), entry.getTime().longValue(), "GPXListEntry timeStamp is expected to be the same as route duration.");
             }
         }

File: core/src/main/java/com/graphhopper/routing/ch/CHPreparationHandler.java
Patch:
@@ -62,9 +62,9 @@ public void init(GraphHopperConfig ghConfig) {
         if (ghConfig.has("prepare.threads"))
             throw new IllegalStateException("Use " + CH.PREPARE + "threads instead of prepare.threads");
         if (ghConfig.has("prepare.chWeighting") || ghConfig.has("prepare.chWeightings") || ghConfig.has("prepare.ch.weightings"))
-            throw new IllegalStateException("Use profiles_ch instead of prepare.chWeighting, prepare.chWeightings or prepare.ch.weightings, see #1922");
+            throw new IllegalStateException("Use profiles_ch instead of prepare.chWeighting, prepare.chWeightings or prepare.ch.weightings, see #1922 and core/docs/profiles.md");
         if (ghConfig.has("prepare.ch.edge_based"))
-            throw new IllegalStateException("Use profiles_ch instead of prepare.ch.edge_based, see #1922");
+            throw new IllegalStateException("Use profiles_ch instead of prepare.ch.edge_based, see #1922 and core/docs/profiles.md");
 
         setPreparationThreads(ghConfig.getInt(CH.PREPARE + "threads", getPreparationThreads()));
         setDisablingAllowed(ghConfig.getBool(CH.INIT_DISABLING_ALLOWED, isDisablingAllowed()));

File: core/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java
Patch:
@@ -68,7 +68,7 @@ public LMPreparationHandler() {
     public void init(GraphHopperConfig ghConfig) {
         // throw explicit error for deprecated configs
         if (ghConfig.has("prepare.lm.weightings")) {
-            throw new IllegalStateException("Use profiles_lm instead of prepare.lm.weightings, see #1922");
+            throw new IllegalStateException("Use profiles_lm instead of prepare.lm.weightings, see #1922 and core/docs/profiles.md");
         }
 
         setPreparationThreads(ghConfig.getInt(Parameters.Landmark.PREPARE + "threads", getPreparationThreads()));

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -474,7 +474,9 @@ public void testGraphHopperWebRealExceptions(boolean usePost) {
         ex = rsp.getErrors().get(0);
         assertTrue(ex instanceof IllegalArgumentException, "Wrong exception found: " + ex.getClass().getName()
                 + ", IllegalArgumentException expected.");
-        assertTrue(ex.getMessage().contains("Vehicle not supported: `space-shuttle`. Supported are: `car`\nYou should consider using the profile parameter instead of specifying a vehicle, see #1958"), ex.getMessage());
+        assertTrue(ex.getMessage().contains("Vehicle not supported: `space-shuttle`. Supported are: `car`" +
+                "\nYou should consider using the `profile` parameter instead of specifying a vehicle." +
+                "\nAvailable profiles: [my_car]"), ex.getMessage());
 
         // an IllegalArgumentException from inside the core is written as JSON, unknown profile
         response = clientTarget(app, "/route?profile=SPACE-SHUTTLE&point=42.554851,1.536198&point=42.510071,1.548128").request().buildGet().invoke();

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -55,9 +55,6 @@ public class FootFlagEncoder extends AbstractFlagEncoder {
     private EnumEncodedValue<RouteNetwork> footRouteEnc;
     Map<RouteNetwork, Integer> routeMap = new HashMap<>();
 
-    /**
-     * Should be only instantiated via EncodingManager
-     */
     public FootFlagEncoder() {
         this(4, 1);
     }

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -240,6 +240,7 @@ protected void configure() {
         environment.jersey().register(MVTResource.class);
         environment.jersey().register(NearestResource.class);
         environment.jersey().register(RouteResource.class);
+        environment.jersey().register(CustomWeightingRouteResource.class);
         environment.jersey().register(IsochroneResource.class);
         if (configuration.getGraphHopperConfiguration().has("gtfs.file")) {
             // These are pt-specific implementations of /route and /isochrone, but the same API.

File: client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
Patch:
@@ -368,7 +368,8 @@ private Request createGetRequest(GHRequest ghRequest) {
     public String export(GHRequest ghRequest) {
         String str = "Creating request failed";
         try {
-            // todonow: should there be an error if usePost=true (because it is not supported)
+            if (postRequest)
+                throw new IllegalArgumentException("GPX export only works for GET requests, make sure to use `setPostRequest(false)`");
             Request okRequest = createGetRequest(ghRequest);
             str = getClientForRequest(ghRequest).newCall(okRequest).execute().body().string();
 

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -521,7 +521,9 @@ public void testWithError() {
 
     @Test
     public void testNoPoint() {
-        JsonNode json = clientTarget(app, "/route?profile=my_car&heading=0").request().buildGet().invoke().readEntity(JsonNode.class);
+        Response response = clientTarget(app, "/route?profile=my_car&heading=0").request().buildGet().invoke();
+        JsonNode json = response.readEntity(JsonNode.class);
+        assertEquals(400, response.getStatus());
         assertEquals("You have to pass at least one point", json.get("message").asText());
     }
 

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -196,7 +196,6 @@ public void run(GraphHopperBundleConfiguration configuration, Environment enviro
         environment.jersey().register(new MultiExceptionGPXMessageBodyWriter());
 
         environment.jersey().register(new IllegalArgumentExceptionMapper());
-        environment.jersey().register(new GHPointConverterProvider());
 
         final GraphHopperManaged graphHopperManaged = new GraphHopperManaged(configuration.getGraphHopperConfiguration(), environment.getObjectMapper());
         environment.lifecycle().manage(graphHopperManaged);

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -72,10 +72,10 @@ public Response doGet(
             @QueryParam("profile") String profileName,
             @QueryParam("buckets") @DefaultValue("1") int nBuckets,
             @QueryParam("reverse_flow") @DefaultValue("false") boolean reverseFlow,
-            @QueryParam("point") @NotNull(message = "You need to specify a point at which the isochrone is centered") GHPoint point,
+            @QueryParam("point") @NotNull GHPoint point,
             @QueryParam("time_limit") @DefaultValue("600") long timeLimitInSeconds,
             @QueryParam("distance_limit") @DefaultValue("-1") double distanceInMeter,
-            @QueryParam("type") @OneOf({"json", "geojson"}) @DefaultValue("json") String respType) {
+            @QueryParam("type") @OneOf({"json","geojson"}) @DefaultValue("json") String respType) {
 
         if (nBuckets > 20 || nBuckets < 1)
             throw new IllegalArgumentException("Number of buckets has to be in the range [1, 20]");

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -68,7 +68,7 @@ public Response doGet(
             @Context UriInfo uriInfo,
             @QueryParam("profile") String profileName,
             @QueryParam("reverse_flow") @DefaultValue("false") boolean reverseFlow,
-            @QueryParam("point") @NotNull(message = "You need to specify a point at which the shortest path tree is centered") GHPoint point,
+            @QueryParam("point") @NotNull GHPoint point,
             @QueryParam("columns") String columnsParam,
             @QueryParam("time_limit") @DefaultValue("600") long timeLimitInSeconds,
             @QueryParam("distance_limit") @DefaultValue("-1") double distanceInMeter) {

File: web/src/test/java/com/graphhopper/http/resources/IsochroneResourceTest.java
Patch:
@@ -181,7 +181,7 @@ public void missingPoint() {
         Response rsp = clientTarget(app, "/isochrone").request().buildGet().invoke();
         assertEquals(400, rsp.getStatus());
         JsonNode json = rsp.readEntity(JsonNode.class);
-        assertTrue(json.get("message").toString().contains("You need to specify a point at which the isochrone is centered"), json.toString());
+        assertTrue(json.get("message").toString().contains("query param point must not be null"), json.toString());
     }
 
     private void assertNotAllowed(String hint, String error) {
@@ -222,7 +222,7 @@ public void requestJsonBadType() {
         JsonNode json = response.readEntity(JsonNode.class);
         String message = json.path("message").asText();
 
-        assertEquals("must be one of [json, geojson]", message);
+        assertEquals("query param type must be one of [json, geojson]", message);
     }
 
     @Test

File: web/src/test/java/com/graphhopper/http/resources/SPTResourceTest.java
Patch:
@@ -126,7 +126,7 @@ public void missingPoint() {
         Response rsp = clientTarget(app, "/spt").request().buildGet().invoke();
         assertEquals(400, rsp.getStatus());
         JsonNode json = rsp.readEntity(JsonNode.class);
-        assertTrue(json.get("message").toString().contains("You need to specify a point at which the shortest path tree is centered"), json.toString());
+        assertTrue(json.get("message").toString().contains("query param point must not be null"), json.toString());
     }
 
     @Test

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -62,7 +62,7 @@ public SPTResource(GraphHopper graphHopper, ProfileResolver profileResolver, Enc
     }
 
     @GET
-    @Produces({"text/csv", MediaType.APPLICATION_JSON})
+    @Produces("text/csv")
     public Response doGet(
             @Context UriInfo uriInfo,
             @QueryParam("profile") String profileName,

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -66,7 +66,7 @@ public void testApplyWayTags() {
     public void testUnchangedForStepsBridgeAndTunnel() {
         Graph graph = initExampleGraph();
         EdgeIteratorState edge = GHUtility.getEdge(graph, 0, 1);
-        IntsRef oldFlags = edge.getFlags();
+        IntsRef oldFlags = IntsRef.deepCopyOf(edge.getFlags());
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "steps");
         encoder.applyWayTags(way, edge);

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperMatrixIT.java
Patch:
@@ -59,7 +59,7 @@ public void testMatrix() {
         req.addOutArray("distances");
         res = ghMatrix.route(req);
 
-        assertEquals(9970, res.getDistance(1, 2), 100);
+        assertEquals(9828, res.getDistance(1, 2), 100);
         assertEquals(1940, res.getWeight(1, 2), 20);
     }
 

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -173,6 +173,7 @@ public Response doGet(
                     :
                     Response.ok(WebHelper.jsonObject(ghResponse, instructions, calcPoints, enableElevation, pointsEncoded, took)).
                             header("X-GH-Took", "" + Math.round(took * 1000)).
+                            type(MediaType.APPLICATION_JSON).
                             build();
         }
     }
@@ -227,6 +228,7 @@ public Response doPost(GHRequest request, @Context HttpServletRequest httpReq) {
                     :
                     Response.ok(WebHelper.jsonObject(ghResponse, instructions, calcPoints, enableElevation, pointsEncoded, took)).
                             header("X-GH-Took", "" + Math.round(took * 1000)).
+                            type(MediaType.APPLICATION_JSON).
                             build();
         }
     }

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ContourBuilder.java
Patch:
@@ -66,7 +66,7 @@ public MultiPolygon computeIsoline(double z0) {
                 } else {
                     cC = e.orig().midPoint(e.dest()).getCoordinate();
                 }
-                polyPoints.add(cC);
+                polyPoints.add(new Coordinate(cC.x, cC.y)); // Strip z coordinate
                 processed.add(e);
                 QuadEdge E1 = ccw ? e.oNext().getPrimary() : e.oPrev().getPrimary();
                 QuadEdge E2 = ccw ? e.dPrev().getPrimary() : e.dNext().getPrimary();

File: web/src/test/java/com/graphhopper/http/resources/IsochroneResourceTest.java
Patch:
@@ -186,9 +186,6 @@ public void requestWithShortest() {
         assertTrue(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.527057, 42.507145))));
         assertFalse(polygon0.contains(geometryFactory.createPoint(new Coordinate(1.525404, 42.507081))));
 
-        // more like a circle => shorter is expected
-        assertTrue(polygon0.getCoordinates().length < 185);
-
         rsp = clientTarget(app, "/isochrone")
                 .queryParam("point", "42.509644,1.540554")
                 .queryParam("time_limit", 130)

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -186,6 +186,9 @@ public Response doPost(GHRequest request, @Context HttpServletRequest httpReq) {
             throw new IllegalArgumentException("Empty request");
 
         StopWatch sw = new StopWatch().start();
+        if (request.getHints().has(TURN_COSTS)) {
+            request.getHints().putObject(EDGE_BASED, request.getHints().getBool(TURN_COSTS, false));
+        }
         // todo: #1934, only try to resolve the profile if no profile is given!
         ProfileConfig profile = profileResolver.resolveProfile(request.getHints());
         request.setProfile(profile.getName());

File: core/src/main/java/com/graphhopper/routing/ProfileResolver.java
Patch:
@@ -86,6 +86,7 @@ private String resolveProfileName(List<CHProfile> chProfiles, List<LMProfile> lm
      * @param hintsMap   a map used to describe the CH profile that shall be selected
      * @throws IllegalArgumentException if no CH profile could be selected for the given parameters
      */
+    // todo: make private and/or make sure default vehicle is used
     public CHProfile selectCHProfile(List<CHProfile> chProfiles, HintsMap hintsMap) {
         int numMatchingEdgeBased = 0;
         List<CHProfile> matchingProfiles = new ArrayList<>();
@@ -130,6 +131,7 @@ public CHProfile selectCHProfile(List<CHProfile> chProfiles, HintsMap hintsMap)
         }
     }
 
+    // todo: make private and/or make sure default vehicle is used
     public LMProfile selectLMProfile(List<LMProfile> lmProfiles, HintsMap hintsMap) {
         List<LMProfile> matchingProfiles = new ArrayList<>();
         for (LMProfile p : lmProfiles) {

File: core/src/main/java/com/graphhopper/routing/ProfileResolver.java
Patch:
@@ -61,7 +61,7 @@ public ProfileConfig resolveProfile(EncodingManager encodingManager, List<CHProf
                 .setVehicle(vehicle)
                 .setWeighting(weighting)
                 .setTurnCosts(turnCosts);
-        profile.getHints().put(hints);
+        profile.getHints().putAll(hints);
         return profile;
     }
 

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java
Patch:
@@ -105,6 +105,7 @@ public void testCalcAlternatives() {
         PMap hints = new PMap();
         hints.putObject("alternative_route.max_weight_factor", 2.3);
         hints.putObject("alternative_route.local_optimality_factor", 0.5);
+        hints.putObject("alternative_route.max_paths", 4);
         AlternativeRouteCH altDijkstra = new AlternativeRouteCH(new RoutingCHGraphImpl(g.getCHGraph(), weighting), hints);
         List<AlternativeRouteCH.AlternativeInfo> pathInfos = altDijkstra.calcAlternatives(5, 10);
         assertEquals(3, pathInfos.size());
@@ -118,6 +119,7 @@ public void testRelaxMaximumStretch() {
         PMap hints = new PMap();
         hints.putObject("alternative_route.max_weight_factor", 4);
         hints.putObject("alternative_route.local_optimality_factor", 0.5);
+        hints.putObject("alternative_route.max_paths", 4);
         AlternativeRouteCH altDijkstra = new AlternativeRouteCH(new RoutingCHGraphImpl(g.getCHGraph(), weighting), hints);
         List<AlternativeRouteCH.AlternativeInfo> pathInfos = altDijkstra.calcAlternatives(5, 10);
         assertEquals(4, pathInfos.size());

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperConfigMixIn.java
Patch:
@@ -37,5 +37,5 @@ public interface GraphHopperConfigMixIn {
     // We can add explicit configuration properties to GraphHopperConfig (for example to allow lists or nested objects),
     // everything else is stored in a HashMap
     @JsonAnySetter
-    GraphHopperConfig put(String key, Object value);
+    GraphHopperConfig putObject(String key, Object value);
 }

File: api/src/main/java/com/graphhopper/config/ProfileConfig.java
Patch:
@@ -92,7 +92,7 @@ public PMap getHints() {
     }
 
     public ProfileConfig putHint(String key, Object value) {
-        this.hints.put(key, value);
+        this.hints.putObject(key, value);
         return this;
     }
 

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
Patch:
@@ -76,7 +76,7 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
     }
 
     public static WeightApproximator getApproximation(String prop, AlgorithmOptions opts, NodeAccess na) {
-        String approxAsStr = opts.getHints().get(prop + ".approximation", "BeelineSimplification");
+        String approxAsStr = opts.getHints().getString(prop + ".approximation", "BeelineSimplification");
         double epsilon = opts.getHints().getDouble(prop + ".epsilon", 1);
 
         BeelineWeightApproximator approx = new BeelineWeightApproximator(na, opts.getWeighting());

File: core/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java
Patch:
@@ -83,7 +83,7 @@ public void init(GraphHopperConfig ghConfig) {
         logDetails = ghConfig.getBool(Landmark.PREPARE + "log_details", false);
         minNodes = ghConfig.getInt(Landmark.PREPARE + "min_network_size", -1);
 
-        for (String loc : ghConfig.get(Landmark.PREPARE + "suggestions_location", "").split(",")) {
+        for (String loc : ghConfig.getString(Landmark.PREPARE + "suggestions_location", "").split(",")) {
             if (!loc.trim().isEmpty())
                 lmSuggestionsLocations.add(loc.trim());
         }

File: core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
Patch:
@@ -115,7 +115,7 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
         algoOpts = AlgorithmOptions.start(algoOpts).
                 algorithm(Parameters.Algorithms.ASTAR_BI).
                 weighting(avoidPathWeighting).build();
-        algoOpts.getHints().put(Algorithms.AStarBi.EPSILON, 2);
+        algoOpts.getHints().putObject(Algorithms.AStarBi.EPSILON, 2);
 
         long visitedNodesSum = 0L;
         QueryResult start = queryResults.get(0);
@@ -138,8 +138,8 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
             avoidPathWeighting.addEdges(path.calcEdges());
         }
 
-        ghResponse.getHints().put("visited_nodes.sum", visitedNodesSum);
-        ghResponse.getHints().put("visited_nodes.average", (float) visitedNodesSum / (queryResults.size() - 1));
+        ghResponse.getHints().putObject("visited_nodes.sum", visitedNodesSum);
+        ghResponse.getHints().putObject("visited_nodes.average", (float) visitedNodesSum / (queryResults.size() - 1));
 
         return pathList;
     }

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -205,8 +205,8 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
             fromQResult = toQResult;
         }
 
-        ghResponse.getHints().put("visited_nodes.sum", visitedNodesSum);
-        ghResponse.getHints().put("visited_nodes.average", (float) visitedNodesSum / (pointsCount - 1));
+        ghResponse.getHints().putObject("visited_nodes.sum", visitedNodesSum);
+        ghResponse.getHints().putObject("visited_nodes.average", (float) visitedNodesSum / (pointsCount - 1));
 
         return pathList;
     }

File: core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java
Patch:
@@ -87,7 +87,7 @@ public void onEdge(EdgeIteratorState edge, int nodeA, int nodeB) {
 
     public static GraphEdgeIdFinder.BlockArea createBlockArea(Graph graph, LocationIndex locationIndex,
                                                               List<GHPoint> points, HintsMap hints, EdgeFilter edgeFilter) {
-        String blockAreaStr = hints.get(Parameters.Routing.BLOCK_AREA, "");
+        String blockAreaStr = hints.getString(Parameters.Routing.BLOCK_AREA, "");
         GraphEdgeIdFinder.BlockArea blockArea = new GraphEdgeIdFinder(graph, locationIndex).
                 parseBlockArea(blockAreaStr, edgeFilter, hints.getDouble(Parameters.Routing.BLOCK_AREA + ".edge_id_max_area", 1000 * 1000));
         for (GHPoint p : points) {

File: core/src/test/java/com/graphhopper/GraphHopperProfileConfigTest.java
Patch:
@@ -47,8 +47,8 @@ public void deserialize() throws IOException {
         assertEquals("fastest", profileConfig.getWeighting());
         assertTrue(profileConfig.isTurnCosts());
         assertEquals(2, profileConfig.getHints().toMap().size());
-        assertEquals("bar", profileConfig.getHints().get("foo", ""));
-        assertEquals("buzz", profileConfig.getHints().get("baz", ""));
+        assertEquals("bar", profileConfig.getHints().getString("foo", ""));
+        assertEquals("buzz", profileConfig.getHints().getString("baz", ""));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionCHTest.java
Patch:
@@ -259,7 +259,7 @@ private RoutingAlgorithmFactory prepareCH(GraphHopperStorage graphHopperStorage,
 
     private RoutingAlgorithm createCHAlgo(CHGraph chGraph, boolean withSOD, AlgorithmOptions algorithmOptions) {
         if (!withSOD) {
-            algorithmOptions.getHints().put("stall_on_demand", false);
+            algorithmOptions.getHints().putObject("stall_on_demand", false);
         }
         return new CHRoutingAlgorithmFactory(chGraph).createAlgo(chGraph, algorithmOptions);
     }

File: core/src/test/java/com/graphhopper/routing/RandomCHRoutingTest.java
Patch:
@@ -166,7 +166,8 @@ private void runRandomTest(Random rnd, int numVirtualNodes) {
                     continue;
                 }
 
-                RoutingAlgorithm algo = pch.getRoutingAlgorithmFactory().createAlgo(chQueryGraph, AlgorithmOptions.start().hints(new PMap().put("stall_on_demand", true)).build());
+                RoutingAlgorithm algo = pch.getRoutingAlgorithmFactory().createAlgo(chQueryGraph, AlgorithmOptions.start().
+                        hints(new PMap().putObject("stall_on_demand", true)).build());
                 Path path = algo.calcPath(from, to);
                 if (!path.isFound()) {
                     fail("path not found for " + from + "->" + to + ", expected weight: " + refWeight);

File: core/src/test/java/com/graphhopper/routing/ch/CHProfileSelectorTest.java
Patch:
@@ -250,10 +250,10 @@ private String assertCHProfileSelectionError(String expectedError, List<CHProfil
     private HintsMap createHintsMap(String vehicle, String weighting, Boolean edgeBased, Integer uTurnCosts) {
         HintsMap hintsMap = new HintsMap().setWeighting(weighting).setVehicle(vehicle);
         if (edgeBased != null) {
-            hintsMap.put(Parameters.Routing.EDGE_BASED, edgeBased);
+            hintsMap.putObject(Parameters.Routing.EDGE_BASED, edgeBased);
         }
         if (uTurnCosts != null) {
-            hintsMap.put(Parameters.Routing.U_TURN_COSTS, uTurnCosts);
+            hintsMap.putObject(Parameters.Routing.U_TURN_COSTS, uTurnCosts);
         }
         return hintsMap;
     }

File: core/src/test/java/com/graphhopper/routing/lm/LMProfileSelectorTest.java
Patch:
@@ -131,10 +131,10 @@ private String assertLMProfileSelectionError(String expectedError, List<LMProfil
     private HintsMap createHintsMap(String vehicle, String weighting, Boolean edgeBased, Integer uTurnCosts) {
         HintsMap hintsMap = new HintsMap().setWeighting(weighting).setVehicle(vehicle);
         if (edgeBased != null) {
-            hintsMap.put(Parameters.Routing.EDGE_BASED, edgeBased);
+            hintsMap.putObject(Parameters.Routing.EDGE_BASED, edgeBased);
         }
         if (uTurnCosts != null) {
-            hintsMap.put(Parameters.Routing.U_TURN_COSTS, uTurnCosts);
+            hintsMap.putObject(Parameters.Routing.U_TURN_COSTS, uTurnCosts);
         }
         return hintsMap;
     }

File: core/src/test/java/com/graphhopper/routing/lm/PrepareLandmarksTest.java
Patch:
@@ -147,8 +147,7 @@ public void testLandmarkStorageAndRouting() {
         AStar expectedAlgo = new AStar(graph, weighting, tm);
         Path expectedPath = expectedAlgo.calcPath(41, 183);
 
-        PMap hints = new PMap();
-        hints.put(Parameters.Landmark.ACTIVE_COUNT, 2);
+        PMap hints = new PMap().putObject(Parameters.Landmark.ACTIVE_COUNT, 2);
 
         // landmarks with A*
         RoutingAlgorithm oneDirAlgoWithLandmarks = prepare.getRoutingAlgorithmFactory().createAlgo(graph,

File: core/src/test/java/com/graphhopper/routing/template/RoundTripRoutingTemplateTest.java
Patch:
@@ -84,8 +84,8 @@ public void testLookupAndCalcPaths_simpleSquareGraph() {
 
         GHRequest ghRequest =
                 new GHRequest(Collections.singletonList(start), Collections.singletonList(heading));
-        ghRequest.getHints().put(Parameters.Algorithms.RoundTrip.POINTS, numPoints);
-        ghRequest.getHints().put(Parameters.Algorithms.RoundTrip.DISTANCE, roundTripDistance);
+        ghRequest.putHint(Parameters.Algorithms.RoundTrip.POINTS, numPoints);
+        ghRequest.putHint(Parameters.Algorithms.RoundTrip.DISTANCE, roundTripDistance);
         LocationIndex locationIndex = new LocationIndexTree(g, new RAMDirectory()).prepareIndex();
         RoundTripRoutingTemplate routingTemplate =
                 new RoundTripRoutingTemplate(ghRequest, new GHResponse(), locationIndex, em, fastestWeighting, 1);

File: core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
Patch:
@@ -49,8 +49,7 @@ public void testMinWeightHasSameUnitAs_getWeight() {
 
     @Test
     public void testWeightWrongHeading() {
-        Weighting instance = new FastestWeighting(encoder, new PMap().
-                put(Parameters.Routing.HEADING_PENALTY, "100"));
+        Weighting instance = new FastestWeighting(encoder, new PMap().putObject(Parameters.Routing.HEADING_PENALTY, 100));
 
         VirtualEdgeIteratorState virtEdge = new VirtualEdgeIteratorState(0, 1, 1, 2, 10,
                 GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, false), "test", Helper.createPointList(51, 0, 51, 1), false);

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -123,7 +123,7 @@ protected void importPublicTransit() {
             getGtfsStorage().create();
             GraphHopperStorage graphHopperStorage = getGraphHopperStorage();
             int idx = 0;
-            List<String> gtfsFiles = ghConfig.has("gtfs.file") ? Arrays.asList(ghConfig.get("gtfs.file", "").split(",")) : Collections.emptyList();
+            List<String> gtfsFiles = ghConfig.has("gtfs.file") ? Arrays.asList(ghConfig.getString("gtfs.file", "").split(",")) : Collections.emptyList();
             for (String gtfsFile : gtfsFiles) {
                 try {
                     getGtfsStorage().loadGtfsFromZipFile("gtfs_" + idx++, new ZipFile(gtfsFile));

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/PtRouteResource.java
Patch:
@@ -29,7 +29,6 @@
 import com.graphhopper.routing.querygraph.VirtualEdgeIteratorState;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
@@ -375,8 +374,8 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
             if (discoveredSolutions.isEmpty() && router.getVisitedNodes() >= maxVisitedNodesForRequest) {
                 response.addError(new IllegalArgumentException("No path found - maximum number of nodes exceeded: " + maxVisitedNodesForRequest));
             }
-            response.getHints().put("visited_nodes.sum", visitedNodes);
-            response.getHints().put("visited_nodes.average", visitedNodes);
+            response.getHints().putObject("visited_nodes.sum", visitedNodes);
+            response.getHints().putObject("visited_nodes.average", visitedNodes);
             if (discoveredSolutions.isEmpty()) {
                 response.addError(new RuntimeException("No route found"));
             }

File: tools/src/main/java/com/graphhopper/tools/QueryTorture.java
Patch:
@@ -64,9 +64,9 @@ public static void main(String[] args) {
     }
 
     public void start(PMap args) {
-        String logfile = args.get("logfile", "");
+        String logfile = args.getString("logfile", "");
         int workers = args.getInt("workers", 1);
-        baseUrl = args.get("baseurl", "");
+        baseUrl = args.getString("baseurl", "");
         tooShortDistance = args.getDouble("too_short_distance", 50d);
         maxQueries = args.getLong("maxqueries", 1000L);
         timeout = args.getInt("timeout", 3000);

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -74,8 +74,8 @@ public Response doGet(
 
         HintsMap hintsMap = new HintsMap();
         RouteResource.initHints(hintsMap, uriInfo.getQueryParameters());
-        hintsMap.put(Parameters.CH.DISABLE, true);
-        hintsMap.put(Parameters.Landmark.DISABLE, true);
+        hintsMap.putObject(Parameters.CH.DISABLE, true);
+        hintsMap.putObject(Parameters.Landmark.DISABLE, true);
         ProfileConfig profile = graphHopper.resolveProfile(hintsMap);
         if (profile.isTurnCosts()) {
             throw new IllegalArgumentException("Isochrone calculation does not support turn costs yet");

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -62,8 +62,8 @@ public Response doGet(
         StopWatch sw = new StopWatch().start();
         HintsMap hintsMap = new HintsMap();
         RouteResource.initHints(hintsMap, uriInfo.getQueryParameters());
-        hintsMap.put(Parameters.CH.DISABLE, true);
-        hintsMap.put(Parameters.Landmark.DISABLE, true);
+        hintsMap.putObject(Parameters.CH.DISABLE, true);
+        hintsMap.putObject(Parameters.Landmark.DISABLE, true);
         ProfileConfig profile = graphHopper.resolveProfile(hintsMap);
         if (profile.isTurnCosts()) {
             throw new IllegalArgumentException("SPT calculation does not support turn costs yet");

File: web/src/main/java/com/graphhopper/http/GraphHopperApplication.java
Patch:
@@ -53,6 +53,6 @@ public void run(GraphHopperServerConfiguration configuration, Environment enviro
         environment.jersey().register(new GHJerseyViolationExceptionMapper());
         environment.jersey().register(new RootResource());
         environment.servlets().addFilter("cors", CORSFilter.class).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, "*");
-        environment.servlets().addFilter("ipfilter", new IPFilter(configuration.getGraphHopperConfiguration().get("jetty.whiteips", ""), configuration.getGraphHopperConfiguration().get("jetty.blackips", ""))).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, "*");
+        environment.servlets().addFilter("ipfilter", new IPFilter(configuration.getGraphHopperConfiguration().getString("jetty.whiteips", ""), configuration.getGraphHopperConfiguration().getString("jetty.blackips", ""))).addMappingForUrlPatterns(EnumSet.allOf(DispatcherType.class), false, "*");
     }
 }

File: web/src/test/java/com/graphhopper/http/resources/ChangeGraphResourceTest.java
Patch:
@@ -42,7 +42,7 @@ public class ChangeGraphResourceTest {
     static {
         config.getGraphHopperConfiguration().
                 put("graph.flag_encoders", "car").
-                put("web.change_graph.enabled", "true").
+                put("web.change_graph.enabled", true).
                 put("graph.location", DIR).
                 put("datareader.file", "../core/files/andorra.osm.pbf");
     }

File: web/src/test/java/com/graphhopper/http/resources/MvtResourceTest.java
Patch:
@@ -56,8 +56,8 @@ public class MvtResourceTest {
         config.getGraphHopperConfiguration().
                 put("graph.flag_encoders", "car").
                 put("graph.encoded_values", "road_class,road_environment,max_speed,surface").
-                put("prepare.min_network_size", "0").
-                put("prepare.min_one_way_network_size", "0").
+                put("prepare.min_network_size", 0).
+                put("prepare.min_one_way_network_size", 0).
                 put("datareader.file", "../core/files/andorra.osm.pbf").
                 put("graph.location", DIR);
     }

File: web/src/test/java/com/graphhopper/http/resources/NearestResourceWithEleTest.java
Patch:
@@ -45,7 +45,7 @@ public class NearestResourceWithEleTest {
         config.getGraphHopperConfiguration().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put("prepare.min_one_way_network_size", "0").
+                put("prepare.min_one_way_network_size", 0).
                 put("graph.flag_encoders", "car").
                 put("datareader.file", "../core/files/monaco.osm.gz").
                 put("graph.location", dir);

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceIssue1574Test.java
Patch:
@@ -49,8 +49,8 @@ public class RouteResourceIssue1574Test {
         // this is the reason we put this test into an extra file: we can only reproduce the bug of issue 1574 by increasing the one-way-network size
         config.getGraphHopperConfiguration().
                 put("graph.flag_encoders", "car").
-                put("prepare.min_network_size", "0").
-                put("prepare.min_one_way_network_size", "12").
+                put("prepare.min_network_size", 0).
+                put("prepare.min_one_way_network_size", 12).
                 put("datareader.file", "../core/files/andorra.osm.pbf").
                 put("graph.location", DIR)
                 .setProfiles(Collections.singletonList(

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceWithEleTest.java
Patch:
@@ -44,7 +44,7 @@ public class RouteResourceWithEleTest {
         config.getGraphHopperConfiguration().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put("prepare.min_one_way_network_size", "0").
+                put("prepare.min_one_way_network_size", 0).
                 put("graph.flag_encoders", "car").
                 put("datareader.file", "../core/files/monaco.osm.gz").
                 put("graph.location", dir);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -625,6 +625,8 @@ private static ElevationProvider createElevationProvider(GraphHopperConfig ghCon
             elevationProvider = new SRTMGL1Provider(cacheDirStr);
         } else if (eleProviderStr.equalsIgnoreCase("multi")) {
             elevationProvider = new MultiSourceElevationProvider(cacheDirStr);
+        } else if (eleProviderStr.equalsIgnoreCase("skadi")) {
+            elevationProvider = new SkadiProvider(cacheDirStr);
         }
 
         elevationProvider.setAutoRemoveTemporaryFiles(removeTempElevationFiles);

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -46,6 +46,8 @@ public SRTMProvider(String cacheDir) {
                 "https://srtm.kurviger.de/SRTM3/",
                 cacheDir.isEmpty()? "/tmp/srtm": cacheDir,
                 "GraphHopper SRTMReader",
+                -56,
+                60,
                 1201
         );
         // move to explicit calls?

File: core/src/main/java/com/graphhopper/reader/dem/AbstractSRTMElevationProvider.java
Patch:
@@ -127,7 +127,7 @@ public double getEle(double lat, double lon) {
 
             demProvider = new HeightTile(minLat, minLon, width, width, precision, DEGREE, DEGREE);
             cacheData.put(intKey, demProvider);
-            demProvider.setCalcMean(calcMean);
+            demProvider.setInterpolate(interpolate);
             demProvider.setHeights(heights);
         }
 

File: core/src/main/java/com/graphhopper/reader/dem/AbstractTiffElevationProvider.java
Patch:
@@ -104,7 +104,7 @@ public double getEle(double lat, double lon) {
             int minLon = getMinLonForTile(lon);
             // less restrictive against boundary checking
             demProvider = new HeightTile(minLat, minLon, WIDTH, HEIGHT, LON_DEGREE * precision, LON_DEGREE, LAT_DEGREE);
-            demProvider.setCalcMean(calcMean);
+            demProvider.setInterpolate(interpolate);
 
             cacheData.put(name, demProvider);
             DataAccess heights = getDirectory().find(name + ".gh");

File: core/src/main/java/com/graphhopper/reader/dem/GMTEDProvider.java
Patch:
@@ -132,7 +132,7 @@ public static void main(String[] args) {
         System.out.println(provider.getEle(48.469123, 9.576393));
 
         // 1113 vs new: (1115)
-        provider.setCalcMean(true);
+        provider.setInterpolate(true);
         System.out.println(provider.getEle(47.467753, 14.573911));
 
         // 0

File: core/src/main/java/com/graphhopper/reader/dem/MultiSourceElevationProvider.java
Patch:
@@ -77,9 +77,9 @@ public ElevationProvider setDAType(DAType daType) {
     }
 
     @Override
-    public void setCalcMean(boolean calcMean) {
-        srtmProvider.setCalcMean(calcMean);
-        globalProvider.setCalcMean(calcMean);
+    public void setInterpolate(boolean interpolate) {
+        srtmProvider.setInterpolate(interpolate);
+        globalProvider.setInterpolate(interpolate);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -99,7 +99,7 @@ public DataAccess find(String name, DAType type) {
         } else if (type.isMMap()) {
             da = new MMapDataAccess(name, location, byteOrder, type.isAllowWrites());
         } else {
-            da = new UnsafeDataAccess(name, location, byteOrder);
+            throw new IllegalArgumentException("DAType not supported " + type);
         }
 
         map.put(name, da);

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -891,7 +891,7 @@ public void testCrossBoundary_issue667() {
         assertTrue(qr.isValid());
         assertEquals(0.1, qr.getSnappedPoint().lat, 0.1);
         assertEquals(-179.6, qr.getSnappedPoint().lon, 0.1);
-        assertEquals(56, qr.getClosestEdge().getDistance() / 1000, 1);
+        assertEquals(112, qr.getClosestEdge().getDistance() / 1000, 1);
     }
 
     @Test

File: web/src/test/java/com/graphhopper/http/resources/MvtResourceTest.java
Patch:
@@ -96,7 +96,7 @@ public void testWithDetailsInResponse() throws IOException {
         JtsLayer layer = layerValues.values().iterator().next();
         List layerGeoList = (List) layer.getGeometries();
         Geometry geometry = (Geometry) layerGeoList.get(0);
-        assertEquals(19, geometry.getCoordinates().length);
+        assertEquals(18, geometry.getCoordinates().length);
         assertEquals(21, layerGeoList.size());
 
         Map map = (Map) ((Geometry) layerGeoList.get(0)).getUserData();

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -431,7 +431,7 @@ public void testGPXWithTrackAndWaypointsSelection() {
         assertEquals(200, response.getStatus());
         String str = response.readEntity(String.class);
         assertFalse(str.contains("<gh:distance>115.1</gh:distance>"));
-        assertTrue(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>arrive at destination</name></wpt>"));
+        assertTrue(str.contains("<wpt lat=\"42.510033\" lon=\"1.548191\"> <name>arrive at destination</name></wpt>"));
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
     }
 

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperMatrixIT.java
Patch:
@@ -98,7 +98,7 @@ public void testPOSTMatrixQueryWithPointHints() {
         req = new GHMRequest();
         req.addPoint(new GHPoint(52.517004, 13.389416));
         req.addPoint(new GHPoint(52.485707, 13.435249));
-        req.addPoint(new GHPoint(52.516848, 13.424606));
+        req.addPoint(new GHPoint(52.516857, 13.423828));
         req.addOutArray("distances");
         req.setPointHints(Arrays.asList("", "", "ifflandstr"));
         res = ghMatrix.route(req);

File: core/src/main/java/com/graphhopper/routing/weighting/DefaultTurnCostProvider.java
Patch:
@@ -63,7 +63,7 @@ public double calcTurnWeight(int edgeFrom, int nodeVia, int edgeTo) {
         double tCost = 0;
         if (edgeFrom == edgeTo) {
             // note that the u-turn costs overwrite any turn costs set in TurnCostStorage
-            tCost = true ? uTurnCosts : Double.POSITIVE_INFINITY;
+            tCost = uTurnCosts;
         } else {
             if (turnCostEnc != null)
                 tCost = turnCostStorage.get(turnCostEnc, edgeFrom, nodeVia, edgeTo);

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperMatrixIT.java
Patch:
@@ -49,15 +49,15 @@ public void testMatrix() {
         }
 
         // ... only weight:
-        assertEquals(1840, res.getWeight(1, 2), 10);
+        assertEquals(1930, res.getWeight(1, 2), 10);
 
         req = AbstractGHMatrixWebTester.createRequest();
         req.addOutArray("weights");
         req.addOutArray("distances");
         res = ghMatrix.route(req);
 
         assertEquals(9800, res.getDistance(1, 2), 50);
-        assertEquals(1840, res.getWeight(1, 2), 10);
+        assertEquals(1930, res.getWeight(1, 2), 10);
     }
 
     @Test

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -308,15 +308,15 @@ public void testMatrix() {
         }
 
         // ... only weight:
-        assertEquals(1840, res.getWeight(1, 2), 5);
+        assertEquals(1930, res.getWeight(1, 2), 10);
 
         req = AbstractGHMatrixWebTester.createRequest();
         req.addOutArray("weights");
         req.addOutArray("distances");
         res = ghMatrix.route(req);
 
         assertEquals(9834, res.getDistance(1, 2), 20);
-        assertEquals(1840, res.getWeight(1, 2), 10);
+        assertEquals(1930, res.getWeight(1, 2), 10);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/weighting/DefaultTurnCostProvider.java
Patch:
@@ -32,7 +32,6 @@ public class DefaultTurnCostProvider implements TurnCostProvider {
     private final TurnCostStorage turnCostStorage;
     private final int uTurnCostsInt;
     private final double uTurnCosts;
-    private final IntsRef tcFlags = TurnCost.createFlags();
 
     public DefaultTurnCostProvider(FlagEncoder encoder, TurnCostStorage turnCostStorage) {
         this(encoder, turnCostStorage, Weighting.INFINITE_U_TURN_COSTS);
@@ -68,7 +67,7 @@ public double calcTurnWeight(int edgeFrom, int nodeVia, int edgeTo) {
             tCost = turnCostStorage.isUTurnAllowed(nodeVia) ? uTurnCosts : Double.POSITIVE_INFINITY;
         } else {
             if (turnCostEnc != null)
-                tCost = turnCostStorage.get(turnCostEnc, tcFlags, edgeFrom, nodeVia, edgeTo);
+                tCost = turnCostStorage.get(turnCostEnc, TurnCost.createFlags(), edgeFrom, nodeVia, edgeTo);
         }
         return tCost;
     }

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.routing.profiles.BooleanEncodedValue;
 import com.graphhopper.routing.profiles.DecimalEncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
+import com.graphhopper.routing.util.spatialrules.TransportationMode;
 
 /**
  * This class provides methods to define how a value (like speed or direction) converts to a flag
@@ -35,6 +36,8 @@ public interface FlagEncoder extends EncodedValueLookup {
      */
     int getVersion();
 
+    TransportationMode getTransportationMode();
+
     /**
      * @return the maximum speed in km/h
      */

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/TransportationMode.java
Patch:
@@ -27,9 +27,7 @@
  */
 public enum TransportationMode {
 
-    MOTOR_VEHICLE(0),
-    BICYCLE(1),
-    FOOT(2);
+    OTHER(0), MOTOR_VEHICLE(1), BICYCLE(2), FOOT(3);
 
     private final int value;
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -825,7 +825,7 @@ public boolean load(String graphHopperFolder) {
     private void checkProfilesConsistency() {
         for (ProfileConfig profile : profilesByName.values()) {
             if (!encodingManager.hasEncoder(profile.getVehicle())) {
-                throw new IllegalArgumentException("Unknown vehicle '" + profile.getVehicle() + "' in profile: " + profile + ". Make sure to add all vehicle used in profiles to 'graph.flag_encoders'");
+                throw new IllegalArgumentException("Unknown vehicle '" + profile.getVehicle() + "' in profile: " + profile + ". Make sure all vehicles used in 'profiles' exist in 'graph.flag_encoders'");
             }
             FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());
             if (profile.isTurnCosts() && !encoder.supportsTurnCosts()) {

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -401,8 +401,7 @@ public void testMonacoRacingBike() {
     public void testKremsBikeRelation() {
         List<OneRun> list = new ArrayList<>();
         list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12491, 159));
-        // 3109m is better as cyclepath is used
-        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3112, 87));
+        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3077, 79));
         list.add(new OneRun(48.412294, 15.62007, 48.398306, 15.609667, 3965, 94));
 
         runAlgo(testCollector, DIR + "/krems.osm.gz", "target/krems-gh",

File: core/src/test/java/com/graphhopper/storage/change/ChangeGraphHelperTest.java
Patch:
@@ -72,7 +72,7 @@ public void testApplyChanges() throws IOException {
         ChangeGraphHelper instance = new ChangeGraphHelper(graph, locationIndex);
         JsonFeatureCollection collection = Jackson.newObjectMapper().readValue(reader, JsonFeatureCollection.class);
         long updates = instance.applyChanges(encodingManager, collection.getFeatures());
-        assertEquals(2, updates);
+        assertEquals(3, updates);
 
         // assert changed speed and access
         double newSpeed = GHUtility.getEdge(graph, 0, 1).get(avSpeedEnc);

File: core/src/test/java/com/graphhopper/routing/util/parsers/SpatialRuleParserTest.java
Patch:
@@ -10,7 +10,7 @@ public class SpatialRuleParserTest {
 
     @Test
     public void testMixParserAdding() {
-        EncodingManager em = new EncodingManager.Builder().add(new SpatialRuleParser(null)).build();
+        EncodingManager em = new EncodingManager.Builder().add(new SpatialRuleParser(null, Country.create())).build();
         assertTrue(em.hasEncodedValue(Country.KEY));
     }
 }
\ No newline at end of file

File: web-api/src/main/java/com/graphhopper/jackson/Jackson.java
Patch:
@@ -20,6 +20,7 @@
 import com.bedatadriven.jackson.datatype.jts.JtsModule;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.PropertyNamingStrategy;
 
 public class Jackson {
 
@@ -30,6 +31,7 @@ public static ObjectMapper newObjectMapper() {
     public static ObjectMapper initObjectMapper(ObjectMapper objectMapper) {
         objectMapper.registerModule(new GraphHopperModule());
         objectMapper.registerModule(new JtsModule());
+        objectMapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);
         objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         return objectMapper;
     }

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.BeanDescription;
+import com.fasterxml.jackson.databind.MapperFeature;
 import com.fasterxml.jackson.databind.SerializationConfig;
 import com.fasterxml.jackson.databind.SerializerProvider;
 import com.fasterxml.jackson.databind.module.SimpleModule;
@@ -157,6 +158,8 @@ public void initialize(Bootstrap<?> bootstrap) {
 
         Jackson.initObjectMapper(bootstrap.getObjectMapper());
         bootstrap.getObjectMapper().setDateFormat(new StdDateFormat());
+        // See https://github.com/dropwizard/dropwizard/issues/1558
+        bootstrap.getObjectMapper().enable(MapperFeature.ALLOW_EXPLICIT_PROPERTY_RENAMING);
         // Because VirtualEdgeIteratorState has getters which throw Exceptions.
         // http://stackoverflow.com/questions/35359430/how-to-make-jackson-ignore-properties-if-the-getters-throw-exceptions
         bootstrap.getObjectMapper().registerModule(new SimpleModule().setSerializerModifier(new BeanSerializerModifier() {

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -284,7 +284,7 @@ private void checkIfConfiguredAndLoadedWeightingsCompatible() {
         List<CHProfile> configured = getCHProfiles();
         for (CHProfile chProfile : configured) {
             if (!loaded.contains(chProfile.toString())) {
-                throw new IllegalStateException("Configured CH profile: " + chProfile.toString() + " is not contained in loaded weightings for CH" + loadedStr + ".\n" +
+                throw new IllegalStateException("Configured CH profile: " + chProfile.toString() + " is not contained in loaded CH profiles: " + loadedStr + ".\n" +
                         "You configured: " + configured);
             }
         }

File: core/src/test/java/com/graphhopper/routing/lm/LMPreparationHandlerTest.java
Patch:
@@ -21,12 +21,11 @@ public class LMPreparationHandlerTest {
     @Test
     public void addWeighting() {
         LMPreparationHandler handler = new LMPreparationHandler();
-        handler.setEnabled(true);
         handler.addLMProfileAsString("fastest");
         assertEquals(Arrays.asList("fastest"), handler.getLMProfileStrings());
 
         // special parameters like the maximum weight
-        handler = new LMPreparationHandler().setEnabled(true);
+        handler = new LMPreparationHandler();
         handler.addLMProfileAsString("fastest|maximum=65000");
         handler.addLMProfileAsString("shortest|maximum=20000");
         assertEquals(Arrays.asList("fastest", "shortest"), handler.getLMProfileStrings());

File: tools/src/main/java/com/graphhopper/tools/CHMeasurement.java
Patch:
@@ -113,7 +113,6 @@ private static void testPerformanceAutomaticNodeOrdering(String[] args) {
         ghConfig.put(SETTLED_EDGES_RESET_INTERVAL, resetInterval);
 
         LMPreparationHandler lmHandler = graphHopper.getLMPreparationHandler();
-        lmHandler.setEnabled(landmarks > 0);
         lmHandler.setDisablingAllowed(true);
 
         LOGGER.info("Initializing graph hopper with args: {}", ghConfig);

File: web/src/test/java/com/graphhopper/http/SpatialRulesTest.java
Patch:
@@ -45,7 +45,6 @@ public class SpatialRulesTest {
         config.getGraphHopperConfiguration().
                 put("graph.flag_encoders", "car").
                 put("graph.encoded_values", "country,road_environment,road_class,road_access,max_speed").
-                put("prepare.ch.weightings", "no").
                 put("spatial_rules.borders_directory", "../core/files/spatialrules").
                 put("spatial_rules.max_bbox", "11.4,11.7,49.9,50.1").
                 put("datareader.file", "../core/files/north-bayreuth.osm.gz").

File: web/src/test/java/com/graphhopper/http/resources/ChangeGraphResourceTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.http.GraphHopperApplication;
 import com.graphhopper.http.GraphHopperServerConfiguration;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.Parameters;
 import io.dropwizard.testing.junit.DropwizardAppRule;
 import org.junit.AfterClass;
 import org.junit.ClassRule;
@@ -43,7 +42,6 @@ public class ChangeGraphResourceTest {
 
     static {
         config.getGraphHopperConfiguration().
-                put(Parameters.CH.PREPARE + "weightings", "no").
                 put("graph.flag_encoders", "car").
                 put("web.change_graph.enabled", "true").
                 put("graph.location", DIR).

File: web/src/test/java/com/graphhopper/http/resources/GpxTravelTimeConsistencyTest.java
Patch:
@@ -23,8 +23,8 @@
 import com.graphhopper.PathWrapper;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.util.gpx.GPXEntry;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.gpx.GPXEntry;
 import com.graphhopper.util.gpx.GpxFromInstructions;
 import com.graphhopper.util.shapes.GHPoint;
 import org.junit.BeforeClass;
@@ -49,7 +49,6 @@ public static void beforeClass() {
         hopper = new GraphHopperOSM().
                 setOSMFile(osmFile).
                 setStoreOnFlush(true).
-                setCHEnabled(false).
                 setGraphHopperLocation(graphFileFoot).
                 setEncodingManager(EncodingManager.create(importVehicles)).
                 importOrLoad();

File: web/src/test/java/com/graphhopper/http/resources/I18nResourceTest.java
Patch:
@@ -21,7 +21,6 @@ public class I18nResourceTest {
 
     static {
         config.getGraphHopperConfiguration().
-                put("prepare.ch.weightings", "no").
                 put("graph.flag_encoders", "car").
                 put("datareader.file", "../core/files/andorra.osm.pbf").
                 put("graph.location", DIR);

File: web/src/test/java/com/graphhopper/http/resources/IsochroneResourceTest.java
Patch:
@@ -45,7 +45,6 @@ public class IsochroneResourceTest {
 
     static {
         config.getGraphHopperConfiguration().
-                put("prepare.ch.weightings", "no").
                 put("graph.flag_encoders", "car").
                 put("datareader.file", "../core/files/andorra.osm.pbf").
                 put("graph.location", DIR);

File: web/src/test/java/com/graphhopper/http/resources/MvtResourceTest.java
Patch:
@@ -55,7 +55,6 @@ public class MvtResourceTest {
         config.getGraphHopperConfiguration().
                 put("graph.flag_encoders", "car").
                 put("graph.encoded_values", "road_class,road_environment,max_speed,surface").
-                put("prepare.ch.weightings", "no").
                 put("prepare.min_network_size", "0").
                 put("prepare.min_one_way_network_size", "0").
                 put("datareader.file", "../core/files/andorra.osm.pbf").

File: web/src/test/java/com/graphhopper/http/resources/NearestResourceWithEleTest.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.http.GraphHopperApplication;
 import com.graphhopper.http.GraphHopperServerConfiguration;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.Parameters;
 import io.dropwizard.testing.junit.DropwizardAppRule;
 import org.junit.AfterClass;
 import org.junit.ClassRule;
@@ -45,7 +44,6 @@ public class NearestResourceWithEleTest {
         config.getGraphHopperConfiguration().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put(Parameters.CH.PREPARE + "weightings", "no").
                 put("prepare.min_one_way_network_size", "0").
                 put("graph.flag_encoders", "car").
                 put("datareader.file", "../core/files/monaco.osm.gz").

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceWithEleTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.http.GraphHopperApplication;
 import com.graphhopper.http.GraphHopperServerConfiguration;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.Parameters;
 import io.dropwizard.testing.junit.DropwizardAppRule;
 import org.junit.AfterClass;
 import org.junit.ClassRule;
@@ -44,7 +43,6 @@ public class RouteResourceWithEleTest {
         config.getGraphHopperConfiguration().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put(Parameters.CH.PREPARE + "weightings", "no").
                 put("prepare.min_one_way_network_size", "0").
                 put("graph.flag_encoders", "car").
                 put("datareader.file", "../core/files/monaco.osm.gz").

File: web/src/test/java/com/graphhopper/http/resources/SPTResourceTest.java
Patch:
@@ -42,7 +42,6 @@ public class SPTResourceTest {
 
     static {
         config.getGraphHopperConfiguration().
-                put("prepare.ch.weightings", "no").
                 put("graph.flag_encoders", "car").
                 put("graph.encoded_values", "max_speed,road_class").
                 put("datareader.file", "../core/files/andorra.osm.pbf").

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -619,7 +619,8 @@ public void testMonacoParallel() throws IOException {
         final EncodingManager encodingManager = EncodingManager.create("car");
         final GraphHopper hopper = new GraphHopperOSM().
                 setStoreOnFlush(true).
-                setEncodingManager(encodingManager).setCHEnabled(false).
+                setEncodingManager(encodingManager).
+                setCHEnabled(false).
                 setWayPointMaxDistance(0).
                 setDataReaderFile(DIR + "/monaco.osm.gz").
                 setGraphHopperLocation(graphFile).

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
Patch:
@@ -59,7 +59,6 @@ protected AbstractWeighting(FlagEncoder encoder, TurnCostProvider turnCostProvid
      */
     public abstract double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse);
 
-
     @Override
     public long calcEdgeMillis(EdgeIteratorState edgeState, boolean reverse) {
         // special case for loop edges: since they do not have a meaningful direction we always need to read them in

File: core/src/main/java/com/graphhopper/storage/CHGraph.java
Patch:
@@ -83,7 +83,6 @@ public interface CHGraph extends Graph {
     @Override
     AllCHEdgesIterator getAllEdges();
 
-
     void disconnectEdge(int edge, int adjNode, int prevEdge);
 
     /**

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmTest.java
Patch:
@@ -1003,7 +1003,7 @@ private GraphHopperStorage createGHStorage() {
     private GraphHopperStorage createGHStorage(boolean is3D, Weighting... weightings) {
         CHProfile[] chProfiles = new CHProfile[weightings.length];
         for (int i = 0; i < weightings.length; i++) {
-            chProfiles[i] = new CHProfile(weightings[i], traversalMode);
+            chProfiles[i] = new CHProfile(weightings[i], traversalMode.isEdgeBased());
         }
         return new GraphBuilder(encodingManager).set3D(is3D)
                 .setCHProfiles(chProfiles)
@@ -1156,7 +1156,7 @@ public String toString() {
     private static abstract class CHCalculator implements PathCalculator {
         @Override
         public Path calcPath(GraphHopperStorage graph, Weighting weighting, TraversalMode traversalMode, int maxVisitedNodes, int from, int to) {
-            CHProfile chProfile = new CHProfile(weighting, traversalMode);
+            CHProfile chProfile = new CHProfile(weighting, traversalMode.isEdgeBased());
             PrepareContractionHierarchies pch = PrepareContractionHierarchies.fromGraphHopperStorage(graph, chProfile);
             CHGraph chGraph = graph.getCHGraph(chProfile);
             if (chGraph.getEdges() == chGraph.getOriginalEdges()) {
@@ -1182,7 +1182,7 @@ public Path calcPath(GraphHopperStorage graph, Weighting weighting, TraversalMod
 
         @Override
         public Path calcPath(GraphHopperStorage graph, Weighting weighting, TraversalMode traversalMode, int maxVisitedNodes, QueryResult from, QueryResult to) {
-            CHProfile chProfile = new CHProfile(weighting, traversalMode);
+            CHProfile chProfile = new CHProfile(weighting, traversalMode.isEdgeBased());
             PrepareContractionHierarchies pch = PrepareContractionHierarchies.fromGraphHopperStorage(graph, chProfile);
             CHGraph chGraph = graph.getCHGraph(chProfile);
             if (chGraph.getEdges() == chGraph.getOriginalEdges()) {

File: core/src/test/java/com/graphhopper/storage/CHProfileTest.java
Patch:
@@ -20,10 +20,12 @@ public void filename() {
         EncodingManager.create(encoder);
         TurnCostStorage tcs = new TurnCostStorage(null, null);
         assertEquals("fastest_car_edge_utc30", CHProfile.edgeBased(new FastestWeighting(encoder, new DefaultTurnCostProvider(encoder, tcs, 30))).toFileName());
+        assertEquals("my_profile_name", CHProfile.edgeBased("my_profile_name", new FastestWeighting(encoder, new DefaultTurnCostProvider(encoder, tcs, 30))).toFileName());
         assertEquals("shortest_car_edge_utc-1", CHProfile.edgeBased(new ShortestWeighting(encoder, new DefaultTurnCostProvider(encoder, tcs, INFINITE_U_TURN_COSTS))).toFileName());
         assertEquals("shortest_car_edge", CHProfile.edgeBased(new ShortestWeighting(encoder, NO_TURN_COST_PROVIDER)).toFileName());
         assertEquals("fastest_car_node", CHProfile.nodeBased(new FastestWeighting(encoder)).toFileName());
         assertEquals("short_fastest_car_node", CHProfile.nodeBased(new ShortFastestWeighting(encoder, 0.1)).toFileName());
+        assertEquals("your_profile_name", CHProfile.nodeBased("your_profile_name", new ShortFastestWeighting(encoder, 0.1)).toFileName());
     }
 
 }
\ No newline at end of file

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -120,7 +120,7 @@ public void testLoadOSMNoCH() {
                 setDataReaderFile(testOsm);
         gh.importOrLoad();
 
-        assertFalse(gh.getAlgorithmFactory(new HintsMap("fastest")) instanceof PrepareContractionHierarchies);
+        assertFalse(gh.getAlgorithmFactory(new HintsMap("fastest")) instanceof CHRoutingAlgorithmFactory);
 
         GHResponse rsp = gh.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
@@ -141,7 +141,7 @@ public void testLoadOSMNoCH() {
                 setDataReaderFile(testOsm).
                 init(new GraphHopperConfig().put("graph.flag_encoders", "car").put(Parameters.CH.PREPARE + "weightings", "no"));
 
-        assertFalse(gh.getAlgorithmFactory(new HintsMap("fastest")) instanceof PrepareContractionHierarchies);
+        assertFalse(gh.getAlgorithmFactory(new HintsMap("fastest")) instanceof CHRoutingAlgorithmFactory);
         gh.close();
     }
 

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -391,12 +391,12 @@ private int getTurn(EdgeIteratorState edge, int baseNode, int prevNode, int adjN
             forceInstruction = true;
         }
 
-        InstructionsOutgoingEdges outgoingEdges = new InstructionsOutgoingEdges(prevEdge, edge, encoder, maxSpeedEnc, crossingExplorer, nodeAccess, prevNode, baseNode, adjNode);
-        int nrOfPossibleTurns = outgoingEdges.nrOfAllowedOutgoingEdges();
+        InstructionsOutgoingEdges outgoingEdges = new InstructionsOutgoingEdges(prevEdge, edge, encoder, maxSpeedEnc, roadClassEnc, roadClassLinkEnc, crossingExplorer, nodeAccess, prevNode, baseNode, adjNode);
+        int nrOfPossibleTurns = outgoingEdges.getAllowedTurns();
 
         // there is no other turn possible
         if (nrOfPossibleTurns <= 1) {
-            if (Math.abs(sign) > 1 && outgoingEdges.nrOfAllOutgoingEdges() > 1) {
+            if (Math.abs(sign) > 1 && outgoingEdges.getVisibleTurns() > 1) {
                 // This is an actual turn because |sign| > 1
                 // There could be some confusion, if we would not create a turn instruction, even though it is the only
                 // possible turn, also see #1048

File: core/src/main/java/com/graphhopper/routing/template/RoutingTemplate.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.querygraph.QueryGraph;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.Translation;
@@ -39,13 +38,13 @@ public interface RoutingTemplate {
     /**
      * This method takes the query points and returns the looked up QueryResults.
      */
-    List<QueryResult> lookup(List<GHPoint> points, FlagEncoder encoder);
+    List<QueryResult> lookup(List<GHPoint> points);
 
     /**
      * This method returns a list of Path objects which then can be merged to serve one route with
      * via points or multiple alternative paths.
      */
-    List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoFactory, AlgorithmOptions algoOpts, FlagEncoder encoder);
+    List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoFactory, AlgorithmOptions algoOpts);
 
     /**
      * This method merges the returned paths appropriately e.g. all paths from the list into one

File: core/src/test/java/com/graphhopper/routing/DirectionResolverOnQueryGraphTest.java
Patch:
@@ -278,7 +278,7 @@ private void checkResults(ExpectedResult... expectedResults) {
             qrs.add(getQueryResult(r.lat, r.lon));
         }
         queryGraph = QueryGraph.lookup(g, qrs);
-        DirectionResolver resolver = new DirectionResolver(queryGraph, encoder);
+        DirectionResolver resolver = new DirectionResolver(queryGraph, encoder.getAccessEnc());
         for (int i = 0; i < expectedResults.length; i++) {
             assertEquals("unexpected resolved direction",
                     restrictedDirection(expectedResults[i]),
@@ -301,7 +301,7 @@ private ExpectedEdge[] restricted(ExpectedEdge rightIn, ExpectedEdge rightOut, E
     private void assertUnrestricted(double lat, double lon) {
         QueryResult qr = getQueryResult(lat, lon);
         queryGraph = QueryGraph.lookup(g, qr);
-        DirectionResolver resolver = new DirectionResolver(queryGraph, encoder);
+        DirectionResolver resolver = new DirectionResolver(queryGraph, encoder.getAccessEnc());
         assertEquals(unrestricted(), resolver.resolveDirections(qr.getClosestNode(), qr.getQueryPoint()));
     }
 

File: core/src/test/java/com/graphhopper/routing/DirectionResolverTest.java
Patch:
@@ -391,7 +391,7 @@ private void checkResult(int node, DirectionResolverResult expectedResult) {
     }
 
     private void checkResult(int node, double lat, double lon, DirectionResolverResult expectedResult) {
-        DirectionResolver resolver = new DirectionResolver(g, encoder);
+        DirectionResolver resolver = new DirectionResolver(g, encoder.getAccessEnc());
         assertEquals(expectedResult, resolver.resolveDirections(node, new GHPoint(lat, lon)));
     }
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -64,7 +64,7 @@ public static List<AlgoHelperEntry> createAlgos(final GraphHopper hopper, final
 
         FlagEncoder encoder = hopper.getEncodingManager().getEncoder(hints.getVehicle());
         TurnCostProvider turnCostProvider = tMode.isEdgeBased() ? new DefaultTurnCostProvider(encoder, ghStorage.getTurnCostStorage()) : NO_TURN_COST_PROVIDER;
-        Weighting weighting = hopper.createWeighting(hints, encoder, hopper.getGraphHopperStorage(), turnCostProvider);
+        Weighting weighting = hopper.createWeighting(hints, encoder, turnCostProvider);
 
         HintsMap defaultHints = new HintsMap().put(Parameters.CH.DISABLE, true).put(Parameters.Landmark.DISABLE, true)
                 .setVehicle(hints.getVehicle()).setWeighting(hints.getWeighting());

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -145,7 +145,7 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
             map.put(Parameters.CH.DISABLE, true);
 //            map.put(Parameters.Landmark.DISABLE, true);
             routingGraph = graph;
-            weighting = hopper.createWeighting(map, encoder, graph, NO_TURN_COST_PROVIDER);
+            weighting = hopper.createWeighting(map, encoder, NO_TURN_COST_PROVIDER);
             final RoutingAlgorithmFactory tmpFactory = hopper.getAlgorithmFactory(map);
             algoFactory = new RoutingAlgorithmFactory() {
 

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -92,7 +92,7 @@ public Response doGet(
         RouteResource.initHints(hintsMap, uriInfo.getQueryParameters());
 
         // todo: isochrones with turn costs ?
-        Weighting weighting = graphHopper.createWeighting(hintsMap, encoder, graph, NO_TURN_COST_PROVIDER);
+        Weighting weighting = graphHopper.createWeighting(hintsMap, encoder, NO_TURN_COST_PROVIDER);
         Isochrone isochrone = new Isochrone(queryGraph, weighting, reverseFlow);
 
         if (distanceInMeter > 0) {

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -80,7 +80,7 @@ public Response doGet(
         RouteResource.initHints(hintsMap, uriInfo.getQueryParameters());
 
         // todo: /spt with turn costs ?
-        Weighting weighting = graphHopper.createWeighting(hintsMap, encoder, graph, NO_TURN_COST_PROVIDER);
+        Weighting weighting = graphHopper.createWeighting(hintsMap, encoder, NO_TURN_COST_PROVIDER);
         Isochrone isochrone = new Isochrone(queryGraph, weighting, reverseFlow);
 
         if (distanceInMeter > 0) {

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -100,7 +100,7 @@ public InstructionsFromEdges(Graph graph, Weighting weighting, EncodedValueLooku
         this.roundaboutEnc = evLookup.getBooleanEncodedValue(Roundabout.KEY);
 
         // both EncodedValues are optional; And return annotation only when instructions for bike encoder is requested
-        String key = getKey("bike", RouteNetwork.EV_SUFFIX);
+        String key = RouteNetwork.key("bike");
         this.bikeRouteEnc = evLookup.hasEncodedValue(key) ? evLookup.getEnumEncodedValue(key, RouteNetwork.class) : null;
         this.getOffBikeEnc = encoder instanceof BikeCommonFlagEncoder && evLookup.hasEncodedValue(GetOffBike.KEY)
                 ? evLookup.getBooleanEncodedValue(GetOffBike.KEY) : null;

File: core/src/main/java/com/graphhopper/routing/profiles/DefaultEncodedValueFactory.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing.profiles;
 
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.util.Helper;
 
 public class DefaultEncodedValueFactory implements EncodedValueFactory {
@@ -62,8 +61,8 @@ public EncodedValue create(String string) {
             enc = new EnumEncodedValue<>(Toll.KEY, Toll.class);
         } else if (TrackType.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(TrackType.KEY, TrackType.class);
-        } else if (name.endsWith(EncodingManager.getKey("", RouteNetwork.EV_SUFFIX))) {
-            enc = new EnumEncodedValue<>(EncodingManager.getKey(name, RouteNetwork.EV_SUFFIX), RouteNetwork.class);
+        } else if (name.endsWith(RouteNetwork.key(""))) {
+            enc = new EnumEncodedValue<>(name, RouteNetwork.class);
         } else if (Hazmat.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(Hazmat.KEY, Hazmat.class);
         } else if (HazmatTunnel.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/routing/profiles/EnumEncodedValue.java
Patch:
@@ -33,7 +33,7 @@ public EnumEncodedValue(String name, Class<E> enumType) {
     }
 
     public EnumEncodedValue(String name, Class<E> enumType, boolean storeTwoDirections) {
-        super(name, 32 - Integer.numberOfLeadingZeros(enumType.getEnumConstants().length), storeTwoDirections);
+        super(name, 32 - Integer.numberOfLeadingZeros(enumType.getEnumConstants().length - 1), storeTwoDirections);
         arr = enumType.getEnumConstants();
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -207,7 +207,7 @@ public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, Stri
         registerNewEncodedValue.add(avgSpeedEnc = new UnsignedDecimalEncodedValue(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
         registerNewEncodedValue.add(priorityEnc = new UnsignedDecimalEncodedValue(getKey(prefix, "priority"), 3, PriorityCode.getFactor(1), false));
 
-        bikeRouteEnc = getEnumEncodedValue(getKey("bike", EV_SUFFIX), RouteNetwork.class);
+        bikeRouteEnc = getEnumEncodedValue(RouteNetwork.key("bike"), RouteNetwork.class);
     }
 
     @Override
@@ -474,7 +474,7 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
         if (pushingSectionsHighways.contains(highway)
                 || "parking_aisle".equals(service)) {
             int pushingSectionPrio = AVOID_IF_POSSIBLE.getValue();
-            if (way.hasTag("bicycle", "use_sidepath"))  {
+            if (way.hasTag("bicycle", "use_sidepath")) {
                 pushingSectionPrio = PREFER.getValue();
             }
             if (way.hasTag("bicycle", "yes") || way.hasTag("bicycle", "permissive"))

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -156,7 +156,7 @@ public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, Stri
         registerNewEncodedValue.add(avgSpeedEnc = new UnsignedDecimalEncodedValue(getKey(prefix, "average_speed"), speedBits, speedFactor, speedTwoDirections));
         registerNewEncodedValue.add(priorityWayEncoder = new UnsignedDecimalEncodedValue(getKey(prefix, "priority"), 3, PriorityCode.getFactor(1), speedTwoDirections));
 
-        footRouteEnc = getEnumEncodedValue(getKey("foot", EV_SUFFIX), RouteNetwork.class);
+        footRouteEnc = getEnumEncodedValue(RouteNetwork.key("foot"), RouteNetwork.class);
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMBikeNetworkTagParser.java
Patch:
@@ -64,7 +64,7 @@ public IntsRef handleRelationTags(IntsRef relFlags, ReaderRelation relation) {
 
     @Override
     public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> registerNewEncodedValue) {
-        registerNewEncodedValue.add(bikeRouteEnc = new EnumEncodedValue<>(getKey("bike", RouteNetwork.EV_SUFFIX), RouteNetwork.class));
+        registerNewEncodedValue.add(bikeRouteEnc = new EnumEncodedValue<>(RouteNetwork.key("bike"), RouteNetwork.class));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMFootNetworkTagParser.java
Patch:
@@ -64,7 +64,7 @@ public IntsRef handleRelationTags(IntsRef relFlags, ReaderRelation relation) {
 
     @Override
     public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> registerNewEncodedValue) {
-        registerNewEncodedValue.add(footRouteEnc = new EnumEncodedValue<>(getKey("foot", RouteNetwork.EV_SUFFIX), RouteNetwork.class));
+        registerNewEncodedValue.add(footRouteEnc = new EnumEncodedValue<>(RouteNetwork.key("foot"), RouteNetwork.class));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/DefaultTurnCostProvider.java
Patch:
@@ -25,8 +25,6 @@
 import com.graphhopper.storage.TurnCostStorage;
 import com.graphhopper.util.EdgeIterator;
 
-import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;
-import static com.graphhopper.routing.util.EncodingManager.getKey;
 import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;
 
 public class DefaultTurnCostProvider implements TurnCostProvider {
@@ -53,7 +51,7 @@ public DefaultTurnCostProvider(FlagEncoder encoder, TurnCostStorage turnCostStor
         if (turnCostStorage == null) {
             throw new IllegalArgumentException("No storage set to calculate turn weight");
         }
-        String key = getKey(encoder.toString(), EV_SUFFIX);
+        String key = TurnCost.key(encoder.toString());
         // if null the TurnCostProvider can be still useful for edge-based routing
         this.turnCostEnc = encoder.hasEncodedValue(key) ? encoder.getDecimalEncodedValue(key) : null;
         this.turnCostStorage = turnCostStorage;

File: core/src/main/java/com/graphhopper/storage/TurnCostStorage.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.TurnCost;
 import com.graphhopper.util.EdgeIterator;
 
-import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;
 import static com.graphhopper.routing.util.EncodingManager.getKey;
 
 /**
@@ -100,7 +99,7 @@ public boolean loadExisting() {
      * This is a convenient setter method and should not be used in loops or where speed is important.
      */
     public void setExpensive(String name, EncodedValueLookup lookup, int fromEdge, int viaNode, int toEdge, double cost) {
-        set(lookup.getDecimalEncodedValue(getKey(name, EV_SUFFIX)), TurnCost.createFlags(), fromEdge, viaNode, toEdge, cost);
+        set(lookup.getDecimalEncodedValue(TurnCost.key(name)), TurnCost.createFlags(), fromEdge, viaNode, toEdge, cost);
     }
 
     /**
@@ -192,7 +191,7 @@ void setOrMerge(IntsRef tcFlags, int fromEdge, int viaNode, int toEdge, boolean
      * This is a convenient getter method and should not be used in loops or where speed is important.
      */
     public double getExpensive(String name, EncodedValueLookup lookup, int fromEdge, int viaNode, int toEdge) {
-        return get(lookup.getDecimalEncodedValue(getKey(name, EV_SUFFIX)), TurnCost.createFlags(), fromEdge, viaNode, toEdge);
+        return get(lookup.getDecimalEncodedValue(TurnCost.key(name)), TurnCost.createFlags(), fromEdge, viaNode, toEdge);
     }
 
     /**

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -33,8 +33,6 @@
 import java.util.*;
 import java.util.concurrent.atomic.AtomicInteger;
 
-import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;
-import static com.graphhopper.routing.util.EncodingManager.getKey;
 import static com.graphhopper.util.Helper.DIST_EARTH;
 
 /**
@@ -233,7 +231,7 @@ public static void addRandomTurnCosts(Graph graph, long seed, EncodingManager em
         double pEdgePairHasTurnCosts = 0.6;
         double pCostIsRestriction = 0.1;
 
-        DecimalEncodedValue turnCostEnc = em.getDecimalEncodedValue(getKey(encoder.toString(), EV_SUFFIX));
+        DecimalEncodedValue turnCostEnc = em.getDecimalEncodedValue(TurnCost.key(encoder.toString()));
         EdgeExplorer inExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder));
         EdgeExplorer outExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
         IntsRef tcFlags = TurnCost.createFlags();

File: core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java
Patch:
@@ -85,8 +85,7 @@ public void interpolatesElevationOfPillarNodes() {
         EdgeIteratorState edge17 = graph.edge(1, 7, 10, true);
         EdgeIteratorState edge27 = graph.edge(2, 7, 10, true);
         EdgeIteratorState edge37 = graph.edge(3, 7, 10, true);
-        edge17.setWayGeometry(
-                Helper.createPointList3D(12, 2, 200, 14, 4, 400, 16, 6, 600, 18, 8, 800));
+        edge17.setWayGeometry(Helper.createPointList3D(12, 2, 200, 14, 4, 400, 16, 6, 600, 18, 8, 800));
 
         IntsRef relFlags = encodingManager.createRelationFlags();
         edge01.setFlags(encodingManager.handleWayTags(normalWay, ACCEPT_WAY, relFlags));

File: core/src/test/java/com/graphhopper/routing/BidirPathExtractorTest.java
Patch:
@@ -29,8 +29,6 @@
 import com.graphhopper.util.EdgeIterator;
 import org.junit.Test;
 
-import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;
-import static com.graphhopper.routing.util.EncodingManager.getKey;
 import static org.junit.Assert.assertEquals;
 
 /**
@@ -66,7 +64,7 @@ public void testExtract2() {
         // add some turn costs at node 2 where fwd&bwd searches meet. these costs have to be included in the
         // weight and the time of the path
         TurnCostStorage turnCostStorage = g.getTurnCostStorage();
-        DecimalEncodedValue turnCostEnc = encodingManager.getDecimalEncodedValue(getKey(carEncoder.toString(), EV_SUFFIX));
+        DecimalEncodedValue turnCostEnc = encodingManager.getDecimalEncodedValue(TurnCost.key(carEncoder.toString()));
         IntsRef tcFlags = TurnCost.createFlags();
         turnCostEnc.setDecimal(false, tcFlags, 5);
         turnCostStorage.setTurnCost(tcFlags, 0, 2, 1);

File: core/src/test/java/com/graphhopper/routing/DirectedBidirectionalDijkstraTest.java
Patch:
@@ -23,8 +23,6 @@
 import java.util.HashSet;
 import java.util.Random;
 
-import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;
-import static com.graphhopper.routing.util.EncodingManager.getKey;
 import static com.graphhopper.util.EdgeIterator.ANY_EDGE;
 import static com.graphhopper.util.EdgeIterator.NO_EDGE;
 import static org.junit.Assert.*;
@@ -57,7 +55,7 @@ public void setup() {
         graph = new GraphHopperStorage(dir, encodingManager, false, true).create(1000);
         turnCostStorage = graph.getTurnCostStorage();
         weighting = createWeighting(Weighting.INFINITE_U_TURN_COSTS);
-        turnCostEnc = encodingManager.getDecimalEncodedValue(getKey(encoder.toString(), EV_SUFFIX));
+        turnCostEnc = encodingManager.getDecimalEncodedValue(TurnCost.key(encoder.toString()));
     }
 
     private Weighting createWeighting(int uTurnCosts) {

File: core/src/test/java/com/graphhopper/routing/querygraph/QueryGraphTest.java
Patch:
@@ -40,7 +40,6 @@
 import java.util.LinkedHashSet;
 import java.util.List;
 
-import static com.graphhopper.routing.profiles.TurnCost.EV_SUFFIX;
 import static com.graphhopper.storage.index.QueryResult.Position.*;
 import static com.graphhopper.util.GHUtility.updateDistancesFor;
 import static org.junit.Assert.*;
@@ -498,7 +497,7 @@ public void testTurnCostsProperlyPropagated_Issue282() {
                 create(100);
         TurnCostStorage turnExt = graphWithTurnCosts.getTurnCostStorage();
         IntsRef tcFlags = TurnCost.createFlags();
-        DecimalEncodedValue turnCostEnc = em.getDecimalEncodedValue(EncodingManager.getKey(encoder.toString(), EV_SUFFIX));
+        DecimalEncodedValue turnCostEnc = em.getDecimalEncodedValue(TurnCost.key(encoder.toString()));
         NodeAccess na = graphWithTurnCosts.getNodeAccess();
         na.setNode(0, .00, .00);
         na.setNode(1, .00, .01);

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -230,7 +230,7 @@ public void testBike() {
         // Example https://www.openstreetmap.org/way/213492914 => two hike 84544, 2768803 and two bike relations 3162932, 5254650
         IntsRef relFlags = encodingManager.handleRelationTags(rel2, encodingManager.handleRelationTags(rel, encodingManager.createRelationFlags()));
         IntsRef edgeFlags = encodingManager.handleWayTags(way, new EncodingManager.AcceptWay().put(encoder.toString(), WAY), relFlags);
-        EnumEncodedValue<RouteNetwork> enc = encodingManager.getEnumEncodedValue(getKey("bike", RouteNetwork.EV_SUFFIX), RouteNetwork.class);
+        EnumEncodedValue<RouteNetwork> enc = encodingManager.getEnumEncodedValue(RouteNetwork.key("bike"), RouteNetwork.class);
         assertEquals(RouteNetwork.REGIONAL, enc.getEnum(false, edgeFlags));
     }
 

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -144,7 +144,7 @@ public String toString() {
         manager.acceptWay(osmWay, map);
         IntsRef edgeFlags = manager.handleWayTags(osmWay, map, relFlags);
 
-        EnumEncodedValue enc = manager.getEnumEncodedValue(EncodingManager.getKey("bike", RouteNetwork.EV_SUFFIX), RouteNetwork.class);
+        EnumEncodedValue enc = manager.getEnumEncodedValue(RouteNetwork.key("bike"), RouteNetwork.class);
 
         assertTrue(defaultBike.priorityEnc.getDecimal(false, edgeFlags)
                 > lessRelationCodes.priorityEnc.getDecimal(false, edgeFlags));

File: api/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
Patch:
@@ -87,8 +87,9 @@ public void setElevation(int index, double ele) {
         wrappedPointList.setElevation(fromOffset + index, ele);
     }
 
-    public void makeImmutable() {
+    public PointList makeImmutable() {
         this.wrappedPointList.makeImmutable();
+        return this;
     }
 
     @Override

File: api/src/test/java/com/graphhopper/util/shapes/PolygonTest.java
Patch:
@@ -22,7 +22,7 @@ public void testContains(){
         assertTrue(square.contains(10,10));
         assertTrue(square.contains(16,10));
         assertFalse(square.contains(10,-20));
-        assertTrue(square.contains(10,0));
+        assertTrue(square.contains(10,0.1));
         assertFalse(square.contains(10,20));
         assertTrue(square.contains(10,16));
         assertFalse(square.contains(20,20));

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupArray.java
Patch:
@@ -182,7 +182,7 @@ private void addRuleInternal(SpatialRule rule) {
 
                     GHPoint center = getCoordinatesForIndex(xIdx, yIdx);
                     // TODO: Consider creating a new method in Polygon that does the 5 checks - p.partOfTile?
-                    if (polygon.contains(center) ||
+                    if (polygon.contains(center.lat, center.lon) ||
                             polygon.contains(center.getLat() - checkDiff, center.getLon() - checkDiff) ||
                             polygon.contains(center.getLat() - checkDiff, center.getLon() + checkDiff) ||
                             polygon.contains(center.getLat() + checkDiff, center.getLon() - checkDiff) ||

File: core/src/main/java/com/graphhopper/routing/weighting/BlockAreaWeighting.java
Patch:
@@ -17,7 +17,7 @@ public BlockAreaWeighting(Weighting superWeighting, GraphEdgeIdFinder.BlockArea
 
     @Override
     public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
-        if (blockArea.contains(edgeState))
+        if (blockArea.intersects(edgeState))
             return Double.POSITIVE_INFINITY;
 
         return superWeighting.calcEdgeWeight(edgeState, reverse);

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -50,8 +50,9 @@
  * loadExisting, (4) usage, (5) flush, (6) close
  */
 class BaseGraph implements Graph {
-    // currently distances are stored as 4 byte integers. using a conversion factor of 1000 the minimum distance
-    // that is not considered zero is 0.0005m (=0.5mm) and the maximum distance per edge is about 2.147.483m=2147km
+    // Currently distances are stored as 4 byte integers. using a conversion factor of 1000 the minimum distance
+    // that is not considered zero is 0.0005m (=0.5mm) and the maximum distance per edge is about 2.147.483m=2147km.
+    // See OSMReader.addEdge and #1871.
     private static final double INT_DIST_FACTOR = 1000d;
     static double MAX_DIST = Integer.MAX_VALUE / INT_DIST_FACTOR;
 

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -698,11 +698,11 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, IntsR
                     pillarNodes.add(lat, lon);
             }
         }
-        if (towerNodeDistance < 0.0001) {
+        if (towerNodeDistance < 0.001) {
             // As investigation shows often two paths should have crossed via one identical point 
             // but end up in two very close points.
             zeroCounter++;
-            towerNodeDistance = 0.0001;
+            towerNodeDistance = 0.001;
         }
 
         double maxDistance = (Integer.MAX_VALUE - 1) / 1000d;

File: core/src/main/java/com/graphhopper/routing/AbstractNonCHBidirAlgo.java
Patch:
@@ -28,6 +28,7 @@
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 
 import java.util.PriorityQueue;
 
@@ -218,7 +219,7 @@ protected double calcWeight(EdgeIteratorState iter, SPTEntry currEdge, boolean r
         if (!access) {
             return Double.POSITIVE_INFINITY;
         }
-        return weighting.calcWeight(iter, reverse, getIncomingEdge(currEdge)) + currEdge.getWeightOfVisitedPath();
+        return GHUtility.calcWeightWithTurnWeight(weighting, iter, reverse, getIncomingEdge(currEdge)) + currEdge.getWeightOfVisitedPath();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -508,7 +508,7 @@ private void updatePointsAndInstruction(EdgeIteratorState edge, PointList pl) {
         }
         double newDist = edge.getDistance();
         prevInstruction.setDistance(newDist + prevInstruction.getDistance());
-        // todonow: why do we not account for turn times here ?
+        // todo: why do we not account for turn times here ?
         prevInstruction.setTime(weighting.calcEdgeMillis(edge, false) + prevInstruction.getTime());
     }
 

File: core/src/main/java/com/graphhopper/routing/PathExtractor.java
Patch:
@@ -23,6 +23,7 @@
 import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.StopWatch;
 
 public class PathExtractor {
@@ -78,7 +79,7 @@ private void setExtractionTime(long nanos) {
     protected void onEdge(int edge, int adjNode, int prevEdge) {
         EdgeIteratorState edgeState = graph.getEdgeIteratorState(edge, adjNode);
         path.addDistance(edgeState.getDistance());
-        path.addTime(weighting.calcMillis(edgeState, false, prevEdge));
+        path.addTime(GHUtility.calcMillisWithTurnMillis(weighting, edgeState, false, prevEdge));
         path.addEdge(edge);
     }
 

File: core/src/main/java/com/graphhopper/routing/ch/CHProfileSelector.java
Patch:
@@ -59,9 +59,6 @@ private CHProfile select() {
             if (edgeBased != null && p.isEdgeBased() != edgeBased) {
                 continue;
             }
-            if (uTurnCosts != null && p.getUTurnCostsInt() != uTurnCosts) {
-                continue;
-            }
             if (!p.getWeighting().matches(hintsMap)) {
                 continue;
             }

File: core/src/main/java/com/graphhopper/routing/ch/CHRoutingAlgorithmFactory.java
Patch:
@@ -19,7 +19,6 @@
 package com.graphhopper.routing.ch;
 
 import com.graphhopper.routing.*;
-import com.graphhopper.routing.weighting.TurnWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
 
@@ -53,8 +52,7 @@ private RoutingAlgorithm doCreateAlgo(Graph graph, AlgorithmOptions opts) {
             if (turnCostStorage == null) {
                 throw new IllegalArgumentException("For edge-based CH you need a turn cost extension");
             }
-            TurnWeighting turnWeighting = new TurnWeighting(getWeighting(), turnCostStorage, chProfile.getUTurnCosts());
-            RoutingCHGraph g = new RoutingCHGraphImpl(graph, getWeighting(), turnWeighting);
+            RoutingCHGraph g = new RoutingCHGraphImpl(graph, graph.wrapWeighting(getWeighting()));
             return createAlgoEdgeBased(g, opts);
         } else {
             RoutingCHGraph g = new RoutingCHGraphImpl(graph, chProfile.getWeighting());

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.util.AbstractAlgoPreparation;
 import com.graphhopper.routing.util.TraversalMode;
-import com.graphhopper.routing.weighting.TurnWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.Helper;
@@ -89,8 +88,7 @@ private PrepareContractionHierarchies(GraphHopperStorage ghStorage, CHProfile ch
             if (turnCostStorage == null) {
                 throw new IllegalArgumentException("For edge-based CH you need a turn cost storage");
             }
-            TurnWeighting turnWeighting = new TurnWeighting(chProfile.getWeighting(), turnCostStorage, chProfile.getUTurnCosts());
-            prepareGraph = PrepareCHGraph.edgeBased(chGraph, chProfile.getWeighting(), turnWeighting);
+            prepareGraph = PrepareCHGraph.edgeBased(chGraph, chProfile.getWeighting());
             nodeContractor = new EdgeBasedNodeContractor(prepareGraph, pMap);
         } else {
             prepareGraph = PrepareCHGraph.nodeBased(chGraph, chProfile.getWeighting());

File: core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
Patch:
@@ -99,9 +99,9 @@ public LandmarkStorage(GraphHopperStorage graph, Directory dir, final Weighting
         // allowing arbitrary weighting is too dangerous
         this.lmSelectionWeighting = new ShortestWeighting(encoder) {
             @Override
-            public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
+            public double calcEdgeWeight(EdgeIteratorState edge, boolean reverse) {
                 // make accessibility of shortest identical to the provided weighting to avoid problems like shown in testWeightingConsistence
-                double res = weighting.calcWeight(edge, reverse, prevOrNextEdgeId);
+                double res = weighting.calcEdgeWeight(edge, reverse);
                 if (res >= Double.MAX_VALUE)
                     return Double.POSITIVE_INFINITY;
 

File: core/src/main/java/com/graphhopper/routing/weighting/AvoidEdgesWeighting.java
Patch:
@@ -54,8 +54,8 @@ public void addEdges(Collection<EdgeIteratorState> edges) {
     }
 
     @Override
-    public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
-        double weight = superWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
+    public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
+        double weight = superWeighting.calcEdgeWeight(edgeState, reverse);
         if (visitedEdges.contains(edgeState.getEdge()))
             return weight * edgePenaltyFactor;
 

File: core/src/main/java/com/graphhopper/routing/weighting/BlockAreaWeighting.java
Patch:
@@ -16,11 +16,11 @@ public BlockAreaWeighting(Weighting superWeighting, GraphEdgeIdFinder.BlockArea
     }
 
     @Override
-    public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
+    public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
         if (blockArea.contains(edgeState))
             return Double.POSITIVE_INFINITY;
 
-        return superWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
+        return superWeighting.calcEdgeWeight(edgeState, reverse);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.Helper;
+import com.graphhopper.util.GHUtility;
 
 import static com.graphhopper.util.Parameters.Details.AVERAGE_SPEED;
 
@@ -35,13 +35,13 @@ protected Object getCurrentValue() {
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-        double tmpVal = edge.getDistance() / weighting.calcMillis(edge, false, prevEdgeId) * 3600;
+        double tmpVal = edge.getDistance() / GHUtility.calcMillisWithTurnMillis(weighting, edge, false, prevEdgeId) * 3600;
         if (Double.isInfinite(tmpVal))
             throw new IllegalStateException("average_speed was infinite for " + edge.fetchWayGeometry(3));
 
         prevEdgeId = edge.getEdge();
         if (Math.abs(tmpVal - decimalValue) >= precision) {
-            this.decimalValue =  Math.round(tmpVal / precision) * precision;
+            this.decimalValue = Math.round(tmpVal / precision) * precision;
             return true;
         }
         return false;

File: core/src/main/java/com/graphhopper/util/details/TimeDetails.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 
 import static com.graphhopper.util.Parameters.Details.TIME;
 
@@ -42,7 +43,7 @@ public TimeDetails(Weighting weighting) {
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         if (edge.getEdge() != prevEdgeId) {
-            time = weighting.calcMillis(edge, false, prevEdgeId);
+            time = GHUtility.calcMillisWithTurnMillis(weighting, edge, false, prevEdgeId);
             prevEdgeId = edge.getEdge();
             return true;
         }

File: core/src/main/java/com/graphhopper/util/details/WeightDetails.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 
 import static com.graphhopper.util.Parameters.Details.WEIGHT;
 
@@ -43,7 +44,7 @@ public WeightDetails(Weighting weighting) {
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         if (edge.getEdge() != edgeId) {
             edgeId = edge.getEdge();
-            weight = weighting.calcWeight(edge, false, edgeId);
+            weight = GHUtility.calcWeightWithTurnWeight(weighting, edge, false, edgeId);
             return true;
         }
         return false;

File: core/src/test/java/com/graphhopper/routing/BidirPathExtractorTest.java
Patch:
@@ -23,8 +23,8 @@
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.weighting.DefaultTurnCostProvider;
 import com.graphhopper.routing.weighting.FastestWeighting;
-import com.graphhopper.routing.weighting.TurnWeighting;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIterator;
 import org.junit.Test;
@@ -77,7 +77,7 @@ public void testExtract2() {
         SPTEntry bwdEntry = new SPTEntry(1, 2, 1.2);
         bwdEntry.parent = new SPTEntry(EdgeIterator.NO_EDGE, 3, 0);
 
-        Path p = BidirPathExtractor.extractPath(g, new TurnWeighting(new FastestWeighting(carEncoder), turnCostStorage), fwdEntry, bwdEntry, 0);
+        Path p = BidirPathExtractor.extractPath(g, new FastestWeighting(carEncoder, new DefaultTurnCostProvider(carEncoder, turnCostStorage)), fwdEntry, bwdEntry, 0);
         p.setWeight(5 + 1.8);
 
         assertEquals(IntArrayList.from(1, 2, 3), p.calcNodes());

File: core/src/test/java/com/graphhopper/routing/DirectedBidirectionalDijkstraTest.java
Patch:
@@ -56,12 +56,12 @@ public void setup() {
         encodingManager = EncodingManager.create(encoder);
         graph = new GraphHopperStorage(dir, encodingManager, false, true).create(1000);
         turnCostStorage = graph.getTurnCostStorage();
-        weighting = createWeighting(Double.POSITIVE_INFINITY);
+        weighting = createWeighting(Weighting.INFINITE_U_TURN_COSTS);
         turnCostEnc = encodingManager.getDecimalEncodedValue(getKey(encoder.toString(), EV_SUFFIX));
     }
 
-    private Weighting createWeighting(double defaultUTurnCosts) {
-        return new TurnWeighting(new FastestWeighting(encoder), turnCostStorage, defaultUTurnCosts);
+    private Weighting createWeighting(int uTurnCosts) {
+        return new FastestWeighting(encoder, new DefaultTurnCostProvider(encoder, turnCostStorage, uTurnCosts));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java
Patch:
@@ -70,7 +70,7 @@ public void testInfinitWeight() {
         EdgeIteratorState edge = ghStorage.edge(0, 1);
         int res = new LandmarkStorage(ghStorage, dir, new FastestWeighting(encoder) {
             @Override
-            public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
+            public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
                 return Integer.MAX_VALUE * 2L;
             }
         }, 8).setMaximumWeight(LandmarkStorage.PRECISION).calcWeight(edge, false);
@@ -79,7 +79,7 @@ public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevO
         dir = new RAMDirectory();
         res = new LandmarkStorage(ghStorage, dir, new FastestWeighting(encoder) {
             @Override
-            public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
+            public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
                 return Double.POSITIVE_INFINITY;
             }
         }, 8).setMaximumWeight(LandmarkStorage.PRECISION).calcWeight(edge, false);

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
Patch:
@@ -113,7 +113,7 @@ long calcTravelTimeMillis(EdgeIteratorState edge, long earliestStartTime) {
         GtfsStorage.EdgeType edgeType = edge.get(flagEncoder.getTypeEnc());
         switch (edgeType) {
             case HIGHWAY:
-                // todonow: why do we not account for turn times here ?
+                // todo: why do we not account for turn times here ?
                 return (long) (accessEgressWeighting.calcEdgeMillis(edge, reverse) * (5.0 / walkSpeedKmH));
             case ENTER_TIME_EXPANDED_NETWORK:
                 if (reverse) {

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -1217,8 +1217,9 @@ public void testNodeBasedCHOnlyButTurnCostForNonCH() {
         assertMoscowNodeBased(tmpHopper, "false", true);
         GHResponse rsp = runMoscow(tmpHopper, "true", true);
         assertEquals(1, rsp.getErrors().size());
-        assertTrue("unexpected error: " + rsp.getErrors().toString(), rsp.getErrors().toString().contains(
-                "Cannot find matching CH profile for your request.\nrequested:  *|car|edge_based=true|u_turn_costs=*\navailable: [fastest|car|edge_based=false|u_turn_costs=-1]"));
+        String expected = "Cannot find matching CH profile for your request.\nrequested:  *|car|edge_based=true|u_turn_costs=*\navailable: [fastest|car|edge_based=false]";
+        assertTrue("unexpected error:\n" + rsp.getErrors().toString() + "\nwhen expecting an error containing:\n" + expected,
+                rsp.getErrors().toString().contains(expected));
     }
 
     @Test

File: reader-osm/src/test/java/com/graphhopper/routing/TrafficChangeWithNodeOrderingReusingTest.java
Patch:
@@ -187,8 +187,8 @@ public double getMinWeight(double distance) {
         }
 
         @Override
-        public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
-            double baseWeight = baseWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
+        public double calcEdgeWeight(EdgeIteratorState edgeState, boolean reverse) {
+            double baseWeight = baseWeighting.calcEdgeWeight(edgeState, reverse);
             if (edgeState instanceof CHEdgeIteratorState) {
                 // important! we may not change weights of shortcuts (the deviations are already included in their weight)
                 if (((CHEdgeIteratorState) edgeState).isShortcut()) {

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -52,6 +52,8 @@
 import java.awt.event.MouseWheelListener;
 import java.util.Random;
 
+import static com.graphhopper.routing.weighting.TurnCostProvider.NO_TURN_COST_PROVIDER;
+
 /**
  * A rough graphical user interface for visualizing the OSM graph. Mainly for debugging algorithms
  * and spatial data structures. See e.g. this blog post:
@@ -143,7 +145,7 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
             map.put(Parameters.CH.DISABLE, true);
 //            map.put(Parameters.Landmark.DISABLE, true);
             routingGraph = graph;
-            weighting = hopper.createWeighting(map, encoder, graph);
+            weighting = hopper.createWeighting(map, encoder, graph, NO_TURN_COST_PROVIDER);
             final RoutingAlgorithmFactory tmpFactory = hopper.getAlgorithmFactory(map);
             algoFactory = new RoutingAlgorithmFactory() {
 

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -512,7 +512,7 @@ public void trimTo(long capacity) {
             // windows does not allow changing the length of an open files
             if (!Constants.WINDOWS) {
                 // reduce file size
-                raFile.setLength(HEADER_OFFSET + remainingSegNo * segmentSizeInBytes);
+                raFile.setLength(HEADER_OFFSET + (long) remainingSegNo * segmentSizeInBytes);
             }
         } catch (Exception ex) {
             throw new RuntimeException(ex);

File: core/src/test/java/com/graphhopper/routing/weighting/RandomizedRoutingTest.java
Patch:
@@ -261,7 +261,7 @@ private void run(long seed) {
                     .calcPath(source, target);
             strictViolations.addAll(comparePaths(refPath, path, source, target, seed));
         }
-        if (strictViolations.size() > Math.max(1, 0.20 * numQueries)) {
+        if (strictViolations.size() > Math.max(1, 0.30 * numQueries)) {
             for (String strictViolation : strictViolations) {
                 System.out.println("strict violation: " + strictViolation);
             }
@@ -308,7 +308,7 @@ private void runWithQueryGraph(long seed) {
         }
         // we do not do a strict check because there can be ambiguity, for example when there are zero weight loops.
         // however, when there are too many deviations we fail
-        if (strictViolations.size() > Math.max(1, 0.20 * numQueries)) {
+        if (strictViolations.size() > Math.max(1, 0.30 * numQueries)) {
             fail("Too many strict violations: " + strictViolations.size() + " / " + numQueries + ", seed: " + seed);
         }
     }

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperMatrixIT.java
Patch:
@@ -258,9 +258,9 @@ public void testPointsNotFound_doNotFailFast() {
                     assertEquals(867000, time, 20000);
                     assertTrue(connected);
                 } else if (i == 3 && j == 1) {
-                    assertEquals(1073, weight, 15);
+                    assertEquals(1073, weight, 20);
                     assertEquals(13856, distance, 100);
-                    assertEquals(864000, time, 15000);
+                    assertEquals(864000, time, 20000);
                     assertTrue(connected);
                 } else {
                     assertEquals(Double.MAX_VALUE, weight, 1.e-3);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMBikeNetworkTagParser.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.RouteNetwork;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMGetOffBikeParser.java
Patch:
@@ -5,7 +5,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.GetOffBike;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.Arrays;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMHazmatTunnelParser.java
Patch:
@@ -5,7 +5,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.HazmatTunnel;
-import com.graphhopper.routing.util.EncodingManager.Access;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxAxleLoadParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.MaxAxleLoad;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.storage.IntsRef;
 
@@ -36,7 +35,7 @@ public class OSMMaxAxleLoadParser implements TagParser {
     public OSMMaxAxleLoadParser() {
         this(MaxAxleLoad.create());
     }
-    
+
     public OSMMaxAxleLoadParser(DecimalEncodedValue maxAxleLoadEncoder) {
         this.maxAxleLoadEncoder = maxAxleLoadEncoder;
     }

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxHeightParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.MaxHeight;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.storage.IntsRef;
 
@@ -36,7 +35,7 @@ public class OSMMaxHeightParser implements TagParser {
     public OSMMaxHeightParser() {
         this(MaxHeight.create());
     }
-    
+
     public OSMMaxHeightParser(DecimalEncodedValue heightEncoder) {
         this.heightEncoder = heightEncoder;
     }

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxLengthParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.MaxLength;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.storage.IntsRef;
 
@@ -36,7 +35,7 @@ public class OSMMaxLengthParser implements TagParser {
     public OSMMaxLengthParser() {
         this(MaxLength.create());
     }
-    
+
     public OSMMaxLengthParser(DecimalEncodedValue lengthEncoder) {
         this.lengthEncoder = lengthEncoder;
     }

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadEnvironmentParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.RoadEnvironment;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMSurfaceParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.Surface;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/TagParser.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;

File: core/src/main/java/com/graphhopper/routing/weighting/Weighting.java
Patch:
@@ -28,7 +28,6 @@
  * @author Peter Karich
  */
 public interface Weighting {
-
     int INFINITE_U_TURN_COSTS = -1;
 
     /**

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParserTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static com.graphhopper.routing.util.EncodingManager.Access.WAY;
 import static org.junit.Assert.assertEquals;
 
 public class OSMMaxWeightParserTest {

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMSurfaceParserTest.java
Patch:
@@ -8,7 +8,6 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import static com.graphhopper.routing.util.EncodingManager.Access.WAY;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -33,7 +33,6 @@
 import com.graphhopper.routing.util.parsers.OSMMaxHeightParser;
 import com.graphhopper.routing.util.parsers.OSMMaxWeightParser;
 import com.graphhopper.routing.util.parsers.OSMMaxWidthParser;
-import com.graphhopper.routing.util.parsers.OSMRoadClassParser;
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;

File: core/src/main/java/com/graphhopper/coll/MapEntry.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * Simple impl of Map.Entry. So that we can have ordered maps.
- * <p>
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.util.PMap;
 
 /**

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -596,9 +596,9 @@ public void testCalcInstructionForMotorwayFork() {
         //      1 ---- 2 ---- 4
         //              \
         //               3
-        na.setNode(1, 48.909071,8.647136);
-        na.setNode(2, 48.908962,8.647978);
-        na.setNode(3, 48.908867,8.648155);
+        na.setNode(1, 48.909071, 8.647136);
+        na.setNode(2, 48.908962, 8.647978);
+        na.setNode(3, 48.908867, 8.648155);
         na.setNode(4, 48.908789, 8.649244);
 
         EnumEncodedValue<RoadClass> roadClassEnc = carManager.getEnumEncodedValue(RoadClass.KEY, RoadClass.class);

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMTurnRelation;
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.profiles.BooleanEncodedValue;
@@ -140,7 +139,7 @@ public String toString() {
         // relation code is PREFER
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "lcn");
-        IntsRef relFlags = manager.handleRelationTags(osmRel,manager.createRelationFlags());
+        IntsRef relFlags = manager.handleRelationTags(osmRel, manager.createRelationFlags());
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay();
         manager.acceptWay(osmWay, map);
         IntsRef edgeFlags = manager.handleWayTags(osmWay, map, relFlags);
@@ -166,7 +165,7 @@ public void testMixBikeTypesAndRelationCombination() {
         // relation code for network rcn is VERY_NICE for bike and PREFER for mountainbike
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "rcn");
-        IntsRef relFlags = manager.handleRelationTags(osmRel,manager.createRelationFlags());
+        IntsRef relFlags = manager.handleRelationTags(osmRel, manager.createRelationFlags());
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay();
         manager.acceptWay(osmWay, map);
         IntsRef edgeFlags = manager.handleWayTags(osmWay, map, relFlags);

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -5,7 +5,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.MultiException;
 import com.graphhopper.PathWrapper;
-import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.details.PathDetail;

File: web-api/src/main/java/com/graphhopper/jackson/MultiExceptionSerializer.java
Patch:
@@ -15,7 +15,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.core.JsonGenerator;

File: web-api/src/main/java/com/graphhopper/jackson/PathWrapperDeserializer.java
Patch:
@@ -15,7 +15,6 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.core.JsonParser;

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -182,7 +182,7 @@ protected DataReader importData() throws IOException {
                 for (; activeLMCount > 3; activeLMCount -= 4) {
                     printTimeOfRouteQuery(hopper, isCH, isLM, count / 4, "routingLM" + activeLMCount, vehicleStr,
                             true, false, activeLMCount, true, false, false, false);
-                    printTimeOfRouteQuery(hopper, isCH, isLM, count / 4, "routingLM_edge" + activeLMCount, vehicleStr,
+                    printTimeOfRouteQuery(hopper, isCH, isLM, count / 4, "routingLM" + activeLMCount + "_edge", vehicleStr,
                             true, false, activeLMCount, true, true, false, false);
                 }
 

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -174,7 +174,7 @@ public void testRetrieveOnlyStreetname() {
         GHResponse res = gh.route(req);
         List<String> given = extractInstructionNames(res.getBest(), 5);
         assertEquals(Arrays.asList(
-                "Continue", "Keep left", "Turn right onto B 246", "Turn sharp right onto Dorfaue, K 6156", "Turn right onto B 96"
+                "Continue", "Keep left", "Turn right onto B 246", "Turn right onto Dorfaue, K 6156", "Turn right onto B 96"
         ), given);
 
         req.getHints().put("turn_description", false);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMBikeNetworkTagParser.java
Patch:
@@ -69,7 +69,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         // just copy value into different bit range
         RouteNetwork routeNetwork = transformerRouteRelEnc.getEnum(false, relationFlags);
         bikeRouteEnc.setEnum(false, edgeFlags, routeNetwork);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMFootNetworkTagParser.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.RouteNetwork;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 
@@ -69,7 +68,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         // just copy value into different bit range
         RouteNetwork footNetwork = transformerRouteRelEnc.getEnum(false, relationFlags);
         footRouteEnc.setEnum(false, edgeFlags, footNetwork);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMGetOffBikeParser.java
Patch:
@@ -36,7 +36,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         String highway = way.getTag("highway");
         if (!way.hasTag("bicycle", accepted) && (pushBikeHighwayTags.contains(highway) || way.hasTag("railway", "platform"))
                 || "steps".equals(highway) || way.hasTag("bicycle", "dismount")) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMHazmatParser.java
Patch:
@@ -5,7 +5,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.Hazmat;
-import com.graphhopper.routing.util.EncodingManager.Access;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;
@@ -24,7 +23,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         if (readerWay.hasTag("hazmat", "no")) {
             hazEnc.setEnum(false, edgeFlags, Hazmat.NO);
         }

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMHazmatTunnelParser.java
Patch:
@@ -34,7 +34,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         if (readerWay.hasTag("hazmat:adr_tunnel_cat", TUNNEL_CATEGORY_NAMES)) {
             HazmatTunnel code = HazmatTunnel.valueOf(readerWay.getTag("hazmat:adr_tunnel_cat"));
             hazTunnelEnc.setEnum(false, edgeFlags, code);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMHazmatWaterParser.java
Patch:
@@ -5,7 +5,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.HazmatWater;
-import com.graphhopper.routing.util.EncodingManager.Access;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;
@@ -25,7 +24,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         if (readerWay.hasTag("hazmat:water", "no")) {
             hazWaterEnc.setEnum(false, edgeFlags, HazmatWater.NO);
         } else if (readerWay.hasTag("hazmat:water", "permissive")) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxAxleLoadParser.java
Patch:
@@ -47,7 +47,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         OSMValueExtractor.extractTons(edgeFlags, way, maxAxleLoadEncoder, Collections.singletonList("maxaxleload"));
         return edgeFlags;
     }

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxHeightParser.java
Patch:
@@ -47,7 +47,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         List<String> heightTags = Arrays.asList("maxheight", "maxheight:physical"/*, the OSM tag "height" is not used for the height of a road, so omit it here! */);
         OSMValueExtractor.extractMeter(edgeFlags, way, heightEncoder, heightTags);
         return edgeFlags;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxLengthParser.java
Patch:
@@ -47,7 +47,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         OSMValueExtractor.extractMeter(edgeFlags, way, lengthEncoder, Collections.singletonList("maxlength"));
         return edgeFlags;
     }

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxSpeedParser.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.MaxSpeed;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.spatialrules.SpatialRule;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.shapes.GHPoint;
@@ -53,7 +52,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         double maxSpeed = AbstractFlagEncoder.parseSpeed(way.getTag("maxspeed"));
 
         if (maxSpeed < 0) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.MaxWeight;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.storage.IntsRef;
 
@@ -36,7 +35,7 @@ public class OSMMaxWeightParser implements TagParser {
     public OSMMaxWeightParser() {
         this(MaxWeight.create());
     }
-    
+
     public OSMMaxWeightParser(DecimalEncodedValue weightEncoder) {
         this.weightEncoder = weightEncoder;
     }
@@ -47,7 +46,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         // do not include OSM tag "height" here as it has completely different meaning (height of peak)
         List<String> weightTags = Arrays.asList("maxweight", "maxgcweight");
         OSMValueExtractor.extractTons(edgeFlags, way, weightEncoder, weightTags);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxWidthParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.MaxWidth;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.parsers.helpers.OSMValueExtractor;
 import com.graphhopper.storage.IntsRef;
 
@@ -36,7 +35,7 @@ public class OSMMaxWidthParser implements TagParser {
     public OSMMaxWidthParser() {
         this(MaxWidth.create());
     }
-    
+
     public OSMMaxWidthParser(DecimalEncodedValue widthEncoder) {
         this.widthEncoder = widthEncoder;
     }
@@ -47,7 +46,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         List<String> widthTags = Arrays.asList("maxwidth", "maxwidth:physical", "width");
         OSMValueExtractor.extractMeter(edgeFlags, way, widthEncoder, widthTags);
         return edgeFlags;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.RoadAccess;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.spatialrules.SpatialRule;
 import com.graphhopper.routing.util.spatialrules.TransportationMode;
 import com.graphhopper.storage.IntsRef;
@@ -51,7 +50,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         RoadAccess accessValue = YES;
         RoadAccess tmpAccessValue;
         for (String restriction : restrictions) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadClassLinkParser.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.profiles.*;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 
@@ -38,7 +37,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         String highwayTag = readerWay.getTag("highway");
         if (!Helper.isEmpty(highwayTag) && highwayTag.endsWith("_link"))
             linkEnc.setBool(false, edgeFlags, true);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadClassParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.RoadClass;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;
@@ -43,8 +42,8 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
-        if (!access.isWay())
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
+        if (ferry)
             return edgeFlags;
 
         String roadClassTag = readerWay.getTag("highway");

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadEnvironmentParser.java
Patch:
@@ -43,9 +43,9 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         RoadEnvironment roadEnvironment = OTHER;
-        if (access.isFerry())
+        if (ferry)
             roadEnvironment = FERRY;
         else if (readerWay.hasTag("bridge") && !readerWay.hasTag("bridge", "no"))
             roadEnvironment = BRIDGE;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoundaboutParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValue;
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.Roundabout;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;
@@ -45,8 +44,8 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
-        if (!access.isWay())
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
+        if (ferry)
             return edgeFlags;
         boolean isRoundabout = way.hasTag("junction", "roundabout") || way.hasTag("junction", "circular");
         if (isRoundabout)

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMSurfaceParser.java
Patch:
@@ -48,7 +48,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         String surfaceTag = readerWay.getTag("surface");
         Surface surface = Surface.find(surfaceTag);
         if (surface == OTHER && !Helper.isEmpty(surfaceTag)) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMTollParser.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.profiles.EnumEncodedValue;
 import com.graphhopper.routing.profiles.Toll;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.IntsRef;
 
 import java.util.List;
@@ -41,8 +40,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access,
-                                 IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
         if (readerWay.hasTag("toll", "yes"))
             tollEnc.setEnum(false, edgeFlags, Toll.ALL);
         else if (readerWay.hasTag("toll:hgv", "yes"))

File: core/src/main/java/com/graphhopper/routing/util/parsers/SpatialRuleParser.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.profiles.*;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.spatialrules.SpatialRule;
 import com.graphhopper.routing.util.spatialrules.SpatialRuleLookup;
 import com.graphhopper.storage.IntsRef;
@@ -52,7 +51,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags) {
         GHPoint estimatedCenter = way.getTag("estimated_center", null);
         if (estimatedCenter != null) {
             SpatialRule rule = spatialRuleLookup.lookupRule(estimatedCenter);

File: core/src/main/java/com/graphhopper/routing/util/parsers/TagParser.java
Patch:
@@ -33,5 +33,5 @@ public interface TagParser {
 
     void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> registerNewEncodedValue);
 
-    IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags);
+    IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, boolean ferry, IntsRef relationFlags);
 }

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParserTest.java
Patch:
@@ -30,13 +30,13 @@ public void testSimpleTags() {
         IntsRef intsRef = em.createEdgeFlags();
         readerWay.setTag("highway", "primary");
         readerWay.setTag("maxweight", "5");
-        parser.handleWayTags(intsRef, readerWay, WAY, em.createRelationFlags());
+        parser.handleWayTags(intsRef, readerWay, false, em.createRelationFlags());
         assertEquals(5.0, mwEnc.getDecimal(false, intsRef), .01);
 
         // if value is beyond the maximum then do not use infinity instead fallback to more restrictive maximum
         intsRef = em.createEdgeFlags();
         readerWay.setTag("maxweight", "50");
-        parser.handleWayTags(intsRef, readerWay, WAY, em.createRelationFlags());
+        parser.handleWayTags(intsRef, readerWay, false, em.createRelationFlags());
         assertEquals(mwEnc.getMaxDecimal(), mwEnc.getDecimal(false, intsRef), .01);
     }
 }
\ No newline at end of file

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMSurfaceParserTest.java
Patch:
@@ -31,16 +31,16 @@ public void testSimpleTags() {
         ReaderWay readerWay = new ReaderWay(1);
         IntsRef intsRef = em.createEdgeFlags();
         readerWay.setTag("highway", "primary");
-        parser.handleWayTags(intsRef, readerWay, WAY, relFlags);
+        parser.handleWayTags(intsRef, readerWay, false, relFlags);
         assertEquals(Surface.OTHER, surfaceEnc.getEnum(false, intsRef));
 
         readerWay.setTag("surface", "cobblestone");
-        parser.handleWayTags(intsRef, readerWay, WAY, relFlags);
+        parser.handleWayTags(intsRef, readerWay, false, relFlags);
         assertEquals(Surface.COBBLESTONE, surfaceEnc.getEnum(false, intsRef));
         assertTrue(Surface.COBBLESTONE.ordinal() > Surface.ASPHALT.ordinal());
 
         readerWay.setTag("surface", "earth");
-        parser.handleWayTags(intsRef, readerWay, WAY, relFlags);
+        parser.handleWayTags(intsRef, readerWay, false, relFlags);
         assertEquals(Surface.DIRT, surfaceEnc.getEnum(false, intsRef));
     }
 }
\ No newline at end of file

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -739,7 +739,7 @@ public void testSRTMWithoutTunnelInterpolation() {
                 .setCHEnabled(false).setGraphHopperLocation(tmpGraphFile)
                 .setEncodingManager(EncodingManager.start().add(new OSMRoadEnvironmentParser() {
                     @Override
-                    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
+                    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean ferry, IntsRef relationFlags) {
                         // do not change RoadEnvironment to avoid triggering tunnel interpolation - is this a valid use case after #TODONOW?
                         return edgeFlags;
                     }

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -948,7 +948,7 @@ protected DataReader importData() {
                     throw new RuntimeException(e);
                 }
             }
-        }.setEncodingManager(new EncodingManager.Builder().add(new CarFlagEncoder()).build()).
+        }.setEncodingManager(new EncodingManager.Builder().add(new CarFlagEncoder()).add(new BikeFlagEncoder()).build()).
                 setGraphHopperLocation(dir).setCHEnabled(false).
                 importOrLoad();
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -615,7 +615,6 @@ private void printInfo() {
      * disc which is usually a lot faster.
      */
     public GraphHopper importOrLoad() {
-        clean();
         if (!load(ghLocation)) {
             printInfo();
             process(ghLocation, false);

File: core/src/main/java/com/graphhopper/routing/ch/PrepareCHGraph.java
Patch:
@@ -138,6 +138,7 @@ boolean isReadyForContraction() {
      */
     public void disconnect(PrepareCHEdgeExplorer explorer, PrepareCHEdgeIterator edgeState) {
         // search edge with opposite direction but we need to know the previousEdge so we cannot simply do:
+        // EdgeIteratorState tmpIter = getEdgeIteratorState(edgeState.getEdge(), edgeState.getBaseNode());
         PrepareCHEdgeIterator tmpIter = explorer.setBaseNode(edgeState.getAdjNode());
         int prevEdge = EdgeIterator.NO_EDGE;
         while (tmpIter.next()) {

File: matching-core/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -60,7 +60,6 @@
 public class MapMatching {
 
     private final Logger logger = LoggerFactory.getLogger(getClass());
-    private final GraphHopper graphHopper;
 
     // Penalty in m for each U-turn performed at the beginning or end of a path between two
     // subsequent candidates.
@@ -77,7 +76,6 @@ public class MapMatching {
     private QueryGraph queryGraph;
 
     public MapMatching(GraphHopper graphHopper, HintsMap hints) {
-        this.graphHopper = graphHopper;
         this.locationIndex = (LocationIndexTree) graphHopper.getLocationIndex();
 
         if (!hints.has("vehicle")) hints.put("vehicle", "car");

File: matching-web/src/main/java/com/graphhopper/matching/cli/MatchCommand.java
Patch:
@@ -109,7 +109,7 @@ public void run(Bootstrap bootstrap, Namespace args) {
                 System.out.println("\texport results to:" + outFile);
 
                 PathWrapper pathWrapper = new PathWrapper();
-                new PathMerger(hopper.getGraphHopperStorage(), weighting).
+                new PathMerger(mr.getGraph(), weighting).
                         doWork(pathWrapper, Collections.singletonList(mr.getMergedPath()), hopper.getEncodingManager(), tr);
                 if (pathWrapper.hasErrors()) {
                     System.err.println("Problem with file " + gpxFile + ", " + pathWrapper.getErrors());

File: matching-web/src/main/java/com/graphhopper/matching/cli/MatchCommand.java
Patch:
@@ -109,7 +109,7 @@ public void run(Bootstrap bootstrap, Namespace args) {
                 System.out.println("\texport results to:" + outFile);
 
                 PathWrapper pathWrapper = new PathWrapper();
-                new PathMerger(hopper.getGraphHopperStorage(), weighting).
+                new PathMerger(mapMatching.getQueryGraph(), weighting).
                         doWork(pathWrapper, Collections.singletonList(mr.getMergedPath()), hopper.getEncodingManager(), tr);
                 if (pathWrapper.hasErrors()) {
                     System.err.println("Problem with file " + gpxFile + ", " + pathWrapper.getErrors());

File: client-hc/src/main/java/com/graphhopper/api/model/GHGeocodingEntry.java
Patch:
@@ -149,12 +149,12 @@ public void setStreet(String street) {
         this.street = street;
     }
 
-    @JsonProperty("house_number")
+    @JsonProperty("housenumber")
     public String getHouseNumber() {
         return houseNumber;
     }
 
-    @JsonProperty("house_number")
+    @JsonProperty("housenumber")
     public void setHouseNumber(String houseNumber) {
         this.houseNumber = houseNumber;
     }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
Patch:
@@ -122,11 +122,11 @@ public static GtfsStorage createOrLoad(Directory directory) {
 		}
 	}
 
-	private GtfsStorage(Directory dir) {
+	GtfsStorage(Directory dir) {
 		this.dir = dir;
 	}
 
-	private boolean loadExisting() {
+	boolean loadExisting() {
 		File file = new File(dir.getLocation() + "/transit_schedule");
 		if (!file.exists()) {
 			return false;
@@ -141,7 +141,7 @@ private boolean loadExisting() {
 		return true;
 	}
 
-	private void create() {
+	void create() {
 		this.dir.create();
 		final File file = new File(dir.getLocation() + "/transit_schedule");
 		try {

File: reader-osm/src/test/java/com/graphhopper/routing/TrafficChangeWithNodeOrderingReusingTest.java
Patch:
@@ -70,7 +70,6 @@ public void testPerformanceForRandomTrafficChange() throws IOException {
         // read osm
         OSMReader reader = new OSMReader(ghStorage);
         reader.setFile(new File(OSM_FILE));
-        reader.setCreateStorage(true);
         reader.readGraph();
         ghStorage.freeze();
 

File: web-bundle/src/main/java/com/graphhopper/resources/PtIsochroneResource.java
Patch:
@@ -41,13 +41,14 @@
 import org.locationtech.jts.triangulate.quadedge.QuadEdgeSubdivision;
 import org.locationtech.jts.triangulate.quadedge.Vertex;
 
+import javax.inject.Inject;
 import javax.ws.rs.*;
 import javax.ws.rs.core.MediaType;
 import java.time.Instant;
 import java.util.*;
 import java.util.function.Function;
 
-@Path("isochrone")
+@Path("isochrone-pt")
 public class PtIsochroneResource {
 
     private static final double JTS_TOLERANCE = 0.00001;
@@ -59,6 +60,7 @@ public class PtIsochroneResource {
 
     private final Function<Label, Double> z = label -> (double) label.currentTime;
 
+    @Inject
     public PtIsochroneResource(GtfsStorage gtfsStorage, EncodingManager encodingManager, GraphHopperStorage graphHopperStorage, LocationIndex locationIndex) {
         this.gtfsStorage = gtfsStorage;
         this.encodingManager = encodingManager;

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.json.geo.JsonFeature;
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.dem.*;
+import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ch.CHAlgoFactoryDecorator;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
@@ -524,6 +525,7 @@ public GraphHopper init(CmdArgs args) {
                 emBuilder.addAll(flagEncoderFactory, flagEncodersStr);
             emBuilder.setEnableInstructions(args.getBool("datareader.instructions", true));
             emBuilder.setPreferredLanguage(args.get("datareader.preferred_language", ""));
+            emBuilder.setDateRangeParser(DateRangeParser.createInstance(args.get("datareader.date_range_parser_day", "")));
             // overwrite EncodingManager object from configuration file
             setEncodingManager(emBuilder.build());
         }

File: core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
Patch:
@@ -66,7 +66,7 @@ public DateRange(ParsedCalendar from, ParsedCalendar to) {
 
     public boolean isInRange(Calendar date) {
         if (!yearless && !dayOnly)
-            return date.after(from) && date.before(to);
+            return date.after(from) && date.before(to) || date.equals(from) || date.equals(to);
 
         if (dayOnly) {
             int currentDayOfWeek = date.get(Calendar.DAY_OF_WEEK);

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -66,8 +66,6 @@ public BikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
 
         absoluteBarriers.add("kissing_gate");
         setSpecificClassBicycle("touring");
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/Car4WDFlagEncoder.java
Patch:
@@ -31,8 +31,6 @@ public Car4WDFlagEncoder(PMap properties) {
 
         trackTypeSpeedMap.put("grade4", 5); // ... some hard or compressed materials
         trackTypeSpeedMap.put("grade5", 5); // ... no hard materials. soil/sand/grass
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -142,8 +142,6 @@ public CarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
         badSurfaceSpeed = 30;
         maxPossibleSpeed = 140;
         speedDefault = defaultSpeedMap.get("secondary");
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -141,7 +141,6 @@ public FootFlagEncoder(int speedBits, double speedFactor) {
 
         maxPossibleSpeed = FERRY_SPEED;
         speedDefault = MEAN_SPEED;
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
Patch:
@@ -59,8 +59,6 @@ public HikeFlagEncoder(int speedBits, double speedFactor) {
         allowedSacScale.add("alpine_hiking");
         allowedSacScale.add("demanding_alpine_hiking");
         allowedSacScale.add("difficult_alpine_hiking");
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -115,8 +115,6 @@ public MotorcycleFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts
         defaultSpeedMap.put("road", 20);
         // forestry stuff
         defaultSpeedMap.put("track", 15);
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -131,8 +131,6 @@ public MountainBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCos
 
         potentialBarriers.add("kissing_gate");
         setSpecificClassBicycle("mtb");
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -124,8 +124,6 @@ public RacingBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts
 
         setAvoidSpeedLimit(81);
         setSpecificClassBicycle("roadcycling");
-
-        init();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/WheelchairFlagEncoder.java
Patch:
@@ -102,7 +102,6 @@ public WheelchairFlagEncoder(int speedBits, double speedFactor) {
         maxPossibleSpeed = FERRY_SPEED;
         speedDefault = MEAN_SPEED;
         speedTwoDirections = true;
-        init();
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -77,7 +77,7 @@ public void testWrongEncoders() {
             EncodingManager.create(foot, foot);
             fail("There should have been an exception");
         } catch (Exception ex) {
-            assertEquals("You must not register a FlagEncoder (foot) twice!", ex.getMessage());
+            assertEquals("You must not register a FlagEncoder (foot) twice or for two EncodingManagers!", ex.getMessage());
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -39,7 +39,7 @@ public BikeFlagEncoder(PMap properties) {
         this(properties.getInt("speed_bits", 4),
                 properties.getInt("speed_factor", 2),
                 properties.getBool("turn_costs", false) ? 1 : 0);
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
     }
 
     public BikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -57,7 +57,7 @@ public CarFlagEncoder(PMap properties) {
                 properties.getDouble("speed_factor", 5),
                 properties.getBool("turn_costs", false) ? 1 : 0);
         this.speedTwoDirections = properties.getBool("speed_two_directions", false);
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
         this.setBlockByDefault(properties.getBool("block_barriers", true));
     }
 

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -64,7 +64,7 @@ public FootFlagEncoder() {
     public FootFlagEncoder(PMap properties) {
         this((int) properties.getLong("speed_bits", 4),
                 properties.getDouble("speed_factor", 1));
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
         this.speedTwoDirections = properties.getBool("speed_two_directions", false);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -53,7 +53,7 @@ public MotorcycleFlagEncoder(PMap properties) {
         this(properties.getInt("speed_bits", 5),
                 properties.getDouble("speed_factor", 5),
                 properties.getBool("turn_costs", false) ? 1 : 0);
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
     }
 
     public MotorcycleFlagEncoder(String propertiesStr) {

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -41,7 +41,7 @@ public MountainBikeFlagEncoder(PMap properties) {
         this((int) properties.getLong("speed_bits", 4),
                 properties.getDouble("speed_factor", 2),
                 properties.getBool("turn_costs", false) ? 1 : 0);
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
     }
 
     public MountainBikeFlagEncoder(String propertiesStr) {

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -41,7 +41,7 @@ public RacingBikeFlagEncoder(PMap properties) {
         this((int) properties.getLong("speed_bits", 4),
                 properties.getDouble("speed_factor", 2),
                 properties.getBool("turn_costs", false) ? 1 : 0);
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
     }
 
     public RacingBikeFlagEncoder(String propertiesStr) {

File: core/src/main/java/com/graphhopper/routing/util/WheelchairFlagEncoder.java
Patch:
@@ -51,7 +51,7 @@ public WheelchairFlagEncoder() {
     public WheelchairFlagEncoder(PMap properties) {
         this((int) properties.getLong("speed_bits", 4),
                 properties.getDouble("speed_factor", 1));
-        this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockFords(properties.getBool("block_fords", false));
     }
 
     public WheelchairFlagEncoder(int speedBits, double speedFactor) {

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -52,6 +52,7 @@ public abstract class AbstractBikeFlagEncoderTester {
     @Before
     public void setUp() {
         encodingManager = EncodingManager.create(encoder = createBikeEncoder());
+        encoder.setBlockFords(true);
         roundaboutEnc = encodingManager.getBooleanEncodedValue(Roundabout.KEY);
         priorityEnc = encodingManager.getDecimalEncodedValue(EncodingManager.getKey(encoder, "priority"));
         avSpeedEnc = encoder.getAverageSpeedEnc();

File: core/src/test/java/com/graphhopper/routing/util/Car4WDFlagEncoderTest.java
Patch:
@@ -34,7 +34,7 @@
 public class Car4WDFlagEncoderTest extends CarFlagEncoderTest {
 
     CarFlagEncoder createEncoder() {
-        return new Car4WDFlagEncoder(new PMap("speed_two_directions=true"));
+        return new Car4WDFlagEncoder(new PMap("speed_two_directions=true|block_fords=true"));
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -52,7 +52,7 @@ public class CarFlagEncoderTest {
     private final BooleanEncodedValue accessEnc = encoder.getAccessEnc();
 
     CarFlagEncoder createEncoder() {
-        return new CarFlagEncoder(new PMap("speed_two_directions=true"));
+        return new CarFlagEncoder(new PMap("speed_two_directions=true|block_fords=true"));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
Patch:
@@ -74,9 +74,9 @@ public void testAccess() {
         way.clearTags();
         way.setTag("highway", "unclassified");
         way.setTag("ford", "yes");
-        assertTrue(encoder.getAccess(way).canSkip());
-        way.setTag("motorcycle", "yes");
         assertTrue(encoder.getAccess(way).isWay());
+        way.setTag("motorcycle", "no");
+        assertTrue(encoder.getAccess(way).canSkip());
 
         way.clearTags();
         way.setTag("route", "ferry");

File: core/src/main/java/com/graphhopper/reader/ReaderElement.java
Patch:
@@ -136,15 +136,15 @@ public boolean hasTag(String key, String... values) {
     /**
      * Check that a given tag has one of the specified values.
      */
-    public final boolean hasTag(String key, Set<String> values) {
+    public final boolean hasTag(String key, Collection<String> values) {
         return values.contains(getTag(key, ""));
     }
 
     /**
      * Check a number of tags in the given order for the any of the given values. Used to parse
      * hierarchical access restrictions
      */
-    public boolean hasTag(List<String> keyList, Set<String> values) {
+    public boolean hasTag(List<String> keyList, Collection<String> values) {
         for (String key : keyList) {
             if (values.contains(getTag(key, "")))
                 return true;

File: core/src/main/java/com/graphhopper/routing/profiles/DefaultEncodedValueFactory.java
Patch:
@@ -34,6 +34,8 @@ public EncodedValue create(String string) {
         // creating the Country EV is done while SpatialRuleIndex is created and not here
         if (Roundabout.KEY.equals(name)) {
             enc = Roundabout.create();
+        } else if (GetOffBike.KEY.equals(name)) {
+            enc = GetOffBike.create();
         } else if (RoadClass.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(RoadClass.KEY, RoadClass.class);
         } else if (RoadClassLink.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/util/details/PathDetailsFromEdges.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.util.details;
 
 import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.profiles.EncodedValueLookup;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -55,11 +55,11 @@ public PathDetailsFromEdges(List<PathDetailsBuilder> calculators, int previousIn
      * @param pathBuilderFactory Generates the relevant PathBuilders
      * @return List of PathDetails for this Path
      */
-    public static Map<String, List<PathDetail>> calcDetails(Path path, EncodingManager encodingManager, Weighting weighting,
+    public static Map<String, List<PathDetail>> calcDetails(Path path, EncodedValueLookup evLookup, Weighting weighting,
                                                             List<String> requestedPathDetails, PathDetailsBuilderFactory pathBuilderFactory, int previousIndex) {
         if (!path.isFound() || requestedPathDetails.isEmpty())
             return Collections.emptyMap();
-        List<PathDetailsBuilder> pathBuilders = pathBuilderFactory.createPathDetailsBuilders(requestedPathDetails, encodingManager, weighting);
+        List<PathDetailsBuilder> pathBuilders = pathBuilderFactory.createPathDetailsBuilders(requestedPathDetails, evLookup, weighting);
         if (pathBuilders.isEmpty())
             return Collections.emptyMap();
 

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -140,7 +140,7 @@ public void testScenario() {
         // Path is: [0 0-1, 3 1-4, 6 4-7, 9 7-8, 11 8-9, 10 9-10]
         ShortestWeighting weighting = new ShortestWeighting(carEncoder);
         Path p = new Dijkstra(g, weighting, tMode).calcPath(0, 10);
-        InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, carManager.getBooleanEncodedValue(Roundabout.KEY), usTR);
+        InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, carManager, usTR);
         Map<String, List<PathDetail>> details = PathDetailsFromEdges.calcDetails(p, carManager, weighting,
                 Arrays.asList(AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -27,7 +27,6 @@
 import com.graphhopper.Trip;
 import com.graphhopper.gtfs.fare.Fares;
 import com.graphhopper.routing.InstructionsFromEdges;
-import com.graphhopper.routing.profiles.Roundabout;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;
@@ -357,7 +356,7 @@ private List<Trip.Leg> parsePathIntoLegs(List<Label.Transition> path, Graph grap
         } else {
             InstructionList instructions = new InstructionList(tr);
             InstructionsFromEdges instructionsFromEdges = new InstructionsFromEdges(graph,
-                    weighting, weighting.getFlagEncoder().getBooleanEncodedValue(Roundabout.KEY), tr, instructions);
+                    weighting, weighting.getFlagEncoder(), tr, instructions);
             int prevEdgeId = -1;
             for (int i = 1; i < path.size(); i++) {
                 if (path.get(i).edge.edgeType != GtfsStorage.EdgeType.HIGHWAY) {

File: web-bundle/src/test/java/com/graphhopper/util/gpx/GpxFromInstructionsTest.java
Patch:
@@ -55,14 +55,12 @@ public class GpxFromInstructionsTest {
 
     private EncodingManager carManager;
     private FlagEncoder carEncoder;
-    private BooleanEncodedValue roundaboutEnc;
     private TranslationMap trMap;
 
     @Before
     public void setUp() {
         carEncoder = new CarFlagEncoder();
         carManager = EncodingManager.create(carEncoder);
-        roundaboutEnc = carManager.getBooleanEncodedValue(Roundabout.KEY);
         trMap = new TranslationMap().doImport();
     }
 
@@ -92,7 +90,7 @@ public void testInstructionsWithTimeAndPlace() {
 
         ShortestWeighting weighting = new ShortestWeighting(carEncoder);
         Path p = new Dijkstra(g, weighting, TraversalMode.NODE_BASED).calcPath(1, 5);
-        InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, roundaboutEnc, trMap.getWithFallBack(Locale.US));
+        InstructionList wayList = InstructionsFromEdges.calcInstructions(p, g, weighting, carManager, trMap.getWithFallBack(Locale.US));
         PointList points = p.calcPoints();
         assertEquals(4, wayList.size());
 

File: core/src/main/java/com/graphhopper/util/PathSimplification.java
Patch:
@@ -125,7 +125,8 @@ public void setInterval(int index, int start, int end) {
 
         simplify(pathWrapper.getPoints(), partitions, douglasPeucker);
         assertConsistencyOfPathDetails(pathWrapper.getPathDetails());
-        assertConsistencyOfInstructions(pathWrapper.getInstructions(), pathWrapper.getPoints().size());
+        if (enableInstructions)
+            assertConsistencyOfInstructions(pathWrapper.getInstructions(), pathWrapper.getPoints().size());
         return pointList;
     }
 

File: api/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -84,7 +84,7 @@ public static int countBitValue(int maxTurnCosts) {
             maxTurnCosts >>= 1;
             counter++;
         }
-        return counter++;
+        return counter;
     }
 
     public static void saveProperties(Map<String, String> map, Writer tmpWriter) throws IOException {

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -42,9 +42,9 @@
 public class Path {
     protected Graph graph;
     protected double distance;
-    protected boolean reverseOrder = true;
     protected long time;
     protected int endNode = -1;
+    private boolean reverseOrder = true;
     private List<String> description;
     private boolean found;
     private int fromNode = -1;

File: core/src/main/java/com/graphhopper/routing/profiles/DefaultEncodedValueFactory.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing.profiles;
 
+import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.util.Helper;
 
 public class DefaultEncodedValueFactory implements EncodedValueFactory {
@@ -59,6 +60,8 @@ public EncodedValue create(String string) {
             enc = new EnumEncodedValue<>(Toll.KEY, Toll.class);
         } else if (TrackType.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(TrackType.KEY, TrackType.class);
+        } else if (name.endsWith(EncodingManager.getKey("", RouteNetwork.EV_SUFFIX))) {
+            enc = new EnumEncodedValue<>(EncodingManager.getKey(name, RouteNetwork.EV_SUFFIX), RouteNetwork.class);
         } else if (Hazmat.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(Hazmat.KEY, Hazmat.class);
         } else if (HazmatTunnel.KEY.equals(name)) {

File: core/src/main/java/com/graphhopper/routing/util/WheelchairFlagEncoder.java
Patch:
@@ -192,7 +192,7 @@ public EncodingManager.Access getAccess(ReaderWay way) {
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access) {
         if (access.canSkip()) {
             return edgeFlags;
         }
@@ -258,13 +258,13 @@ private void setFwdBwdSpeed(EdgeIteratorState edge, int fwdSpeed, int bwdSpeed)
     }
 
     /**
-     * First get priority from {@link FootFlagEncoder#handlePriority(ReaderWay, int)} then evaluate wheelchair specific
+     * First get priority from {@link FootFlagEncoder#handlePriority(ReaderWay, Integer)} then evaluate wheelchair specific
      * tags.
      *
      * @return a priority for the given way
      */
     @Override
-    protected int handlePriority(ReaderWay way, int priorityFromRelation) {
+    protected int handlePriority(ReaderWay way, Integer priorityFromRelation) {
         TreeMap<Double, Integer> weightToPrioMap = new TreeMap<>();
 
         weightToPrioMap.put(100d, super.handlePriority(way, priorityFromRelation));

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxAxleLoadParser.java
Patch:
@@ -50,7 +50,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
 
     @Override
     public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access,
-                                 long relationFlags) {
+                                 IntsRef relationFlags) {
         OSMValueExtractor.extractTons(edgeFlags, way, maxAxleLoadEncoder,
                 Collections.singletonList("maxaxleload"), enableLog);
         return edgeFlags;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxHeightParser.java
Patch:
@@ -49,7 +49,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
         List<String> heightTags = Arrays.asList("maxheight", "maxheight:physical"/*, the OSM tag "height" is not used for the height of a road, so omit it here! */);
         OSMValueExtractor.extractMeter(edgeFlags, way, heightEncoder, heightTags, enableLog);
         return edgeFlags;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxLengthParser.java
Patch:
@@ -50,7 +50,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
 
     @Override
     public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access,
-                                 long relationFlags) {
+                                 IntsRef relationFlags) {
         OSMValueExtractor.extractMeter(edgeFlags, way, lengthEncoder,
                 Collections.singletonList("maxlength"), enableLog);
         return edgeFlags;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxSpeedParser.java
Patch:
@@ -53,7 +53,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
         double maxSpeed = AbstractFlagEncoder.parseSpeed(way.getTag("maxspeed"));
 
         if (maxSpeed < 0) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParser.java
Patch:
@@ -49,7 +49,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
         // do not include OSM tag "height" here as it has completely different meaning (height of peak)
         List<String> weightTags = Arrays.asList("maxweight", "maxgcweight");
         OSMValueExtractor.extractTons(edgeFlags, way, weightEncoder, weightTags, enableLog);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMMaxWidthParser.java
Patch:
@@ -49,7 +49,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
         List<String> widthTags = Arrays.asList("maxwidth", "maxwidth:physical", "width");
         OSMValueExtractor.extractMeter(edgeFlags, way, widthEncoder, widthTags, enableLog);
         return edgeFlags;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java
Patch:
@@ -51,7 +51,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
         RoadAccess accessValue = YES;
         RoadAccess tmpAccessValue;
         for (String restriction : restrictions) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadClassLinkParser.java
Patch:
@@ -38,7 +38,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
         String highwayTag = readerWay.getTag("highway");
         if (!Helper.isEmpty(highwayTag) && highwayTag.endsWith("_link"))
             linkEnc.setBool(false, edgeFlags, true);

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadClassParser.java
Patch:
@@ -43,7 +43,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
         if (!access.isWay())
             return edgeFlags;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadEnvironmentParser.java
Patch:
@@ -43,7 +43,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
         RoadEnvironment roadEnvironment = OTHER;
         if (access.isFerry())
             roadEnvironment = FERRY;

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoundaboutParser.java
Patch:
@@ -45,7 +45,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
         if (!access.isWay())
             return edgeFlags;
         boolean isRoundabout = way.hasTag("junction", "roundabout") || way.hasTag("junction", "circular");

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMSurfaceParser.java
Patch:
@@ -48,7 +48,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access, IntsRef relationFlags) {
         String surfaceTag = readerWay.getTag("surface");
         Surface surface = Surface.find(surfaceTag);
         if (surface == OTHER && !Helper.isEmpty(surfaceTag)) {

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMTollParser.java
Patch:
@@ -42,7 +42,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
 
     @Override
     public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, EncodingManager.Access access,
-                                 long relationFlags) {
+                                 IntsRef relationFlags) {
         if (readerWay.hasTag("toll", "yes"))
             tollEnc.setEnum(false, edgeFlags, Toll.ALL);
         else if (readerWay.hasTag("toll:hgv", "yes"))

File: core/src/main/java/com/graphhopper/routing/util/parsers/OSMTrackTypeParser.java
Patch:
@@ -44,7 +44,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> li
 
     @Override
     public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, Access access,
-                                 long relationFlags) {
+                                 IntsRef relationFlags) {
         if (!access.isWay())
             return edgeFlags;
 

File: core/src/main/java/com/graphhopper/routing/util/parsers/SpatialRuleParser.java
Patch:
@@ -49,7 +49,7 @@ public void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> re
     }
 
     @Override
-    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags) {
+    public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags) {
         GHPoint estimatedCenter = way.getTag("estimated_center", null);
         if (estimatedCenter != null) {
             SpatialRule rule = spatialRuleLookup.lookupRule(estimatedCenter);

File: core/src/main/java/com/graphhopper/routing/util/parsers/TagParser.java
Patch:
@@ -27,11 +27,11 @@
 
 /**
  * This interface defines how parts of the information from 'way' is converted into IntsRef. A TagParser usually
- * has one corresponding EncodedValue. Other situations like multiple tags for one EncodedValue are possible too.
+ * has one corresponding EncodedValue but more are possible too.
  */
 public interface TagParser {
 
     void createEncodedValues(EncodedValueLookup lookup, List<EncodedValue> registerNewEncodedValue);
 
-    IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, long relationFlags);
+    IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay way, EncodingManager.Access access, IntsRef relationFlags);
 }

File: core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.coll.GHIntHashSet;
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.profiles.RoadEnvironment;
+import com.graphhopper.storage.IntsRef;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
@@ -87,7 +88,7 @@ public void interpolatesElevationOfPillarNodes() {
         edge17.setWayGeometry(
                 Helper.createPointList3D(12, 2, 200, 14, 4, 400, 16, 6, 600, 18, 8, 800));
 
-        long relFlags = 0;
+        IntsRef relFlags = encodingManager.createRelationFlags();
         edge01.setFlags(encodingManager.handleWayTags(normalWay, ACCEPT_WAY, relFlags));
         edge12.setFlags(encodingManager.handleWayTags(normalWay, ACCEPT_WAY, relFlags));
         edge23.setFlags(encodingManager.handleWayTags(normalWay, ACCEPT_WAY, relFlags));

File: core/src/test/java/com/graphhopper/reader/dem/EdgeElevationInterpolatorTest.java
Patch:
@@ -27,6 +27,7 @@
 import com.graphhopper.routing.util.FootFlagEncoder;
 import com.graphhopper.routing.util.parsers.OSMRoadEnvironmentParser;
 import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.IntsRef;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
@@ -47,7 +48,7 @@ public abstract class EdgeElevationInterpolatorTest {
     protected GraphHopperStorage graph;
     protected EnumEncodedValue<RoadEnvironment> roadEnvEnc;
     protected EncodingManager encodingManager;
-    protected long relFlags;
+    protected IntsRef relFlags;
     protected EdgeElevationInterpolator edgeElevationInterpolator;
 
     @SuppressWarnings("resource")
@@ -59,7 +60,7 @@ public void setUp() {
                 true).create(100);
         roadEnvEnc = encodingManager.getEnumEncodedValue(RoadEnvironment.KEY, RoadEnvironment.class);
         edgeElevationInterpolator = createEdgeElevationInterpolator();
-        relFlags = 0;
+        relFlags = encodingManager.createRelationFlags();
         interpolatableWay = createInterpolatableWay();
         normalWay = new ReaderWay(0);
         normalWay.setTag("highway", "primary");

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -935,7 +935,7 @@ private Graph generatePathDetailsGraph() {
         tmpEdge = g.edge(1, 2, 5, true).setName("1-2");
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay();
         assertTrue(carManager.acceptWay(w, map));
-        long relFlags = 0;
+        IntsRef relFlags = carManager.createRelationFlags();
         tmpEdge.setFlags(carManager.handleWayTags(w, map, relFlags));
         tmpEdge = g.edge(4, 5, 5, true).setName("4-5");
         tmpEdge.setFlags(carManager.handleWayTags(w, map, relFlags));

File: core/src/test/java/com/graphhopper/routing/profiles/DecimalEncodedValueTest.java
Patch:
@@ -29,7 +29,7 @@ public void testMaxValue() {
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "motorway_link");
         way.setTag("maxspeed", "70 mph");
-        IntsRef flags = carEncoder.handleWayTags(em.createEdgeFlags(), way, carEncoder.getAccess(way), 0);
+        IntsRef flags = carEncoder.handleWayTags(em.createEdgeFlags(), way, carEncoder.getAccess(way));
         assertEquals(101.5, carAverageSpeedEnc.getDecimal(true, flags), 1e-1);
 
         DecimalEncodedValue instance1 = new UnsignedDecimalEncodedValue("test1", 8, 0.5, false);

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -98,8 +98,7 @@ public void testRoutingFailsWithInvalidGraph_issue665() {
 
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay();
         assertTrue(encodingManager.acceptWay(way, map));
-        long relationFlags = 0;
-        IntsRef wayFlags = encodingManager.handleWayTags(way, map, relationFlags);
+        IntsRef wayFlags = encodingManager.handleWayTags(way, map, encodingManager.createRelationFlags());
         graph.edge(0, 1).setDistance(247).setFlags(wayFlags);
 
         assertTrue(isGraphValid(graph, encoder));

File: core/src/test/java/com/graphhopper/routing/util/DataFlagEncoderTest.java
Patch:
@@ -38,7 +38,7 @@ public class DataFlagEncoderTest {
     private final EnumEncodedValue<Surface> surfaceEnc;
     private final DecimalEncodedValue carMaxSpeedEnc;
     private final EncodingManager encodingManager;
-    private final long relFlags;
+    private final IntsRef relFlags;
 
     public DataFlagEncoderTest() {
         properties = new PMap();
@@ -50,7 +50,7 @@ public DataFlagEncoderTest() {
                 add(new OSMSurfaceParser()).
                 add(new OSMMaxSpeedParser(carMaxSpeedEnc = MaxSpeed.create())).
                 add(encoder).build();
-        relFlags = 0;
+        relFlags = encodingManager.createRelationFlags();
         roadEnvironmentEnc = encodingManager.getEnumEncodedValue(RoadEnvironment.KEY, RoadEnvironment.class);
         roadClassEnc = encodingManager.getEnumEncodedValue(RoadClass.KEY, RoadClass.class);
         roadAccessEnc = encodingManager.getEnumEncodedValue(RoadAccess.KEY, RoadAccess.class);

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMMaxAxleLoadParserTest.java
Patch:
@@ -16,13 +16,13 @@ public class OSMMaxAxleLoadParserTest {
     private EncodingManager em;
     private DecimalEncodedValue malEnc;
     private OSMMaxAxleLoadParser parser;
-    private long relFlags;
+    private IntsRef relFlags;
 
     @Before
     public void setUp() {
         parser = new OSMMaxAxleLoadParser();
         em = new EncodingManager.Builder().add(parser).build();
-        relFlags = 0;
+        relFlags = em.createRelationFlags();
         malEnc = em.getDecimalEncodedValue(MaxAxleLoad.KEY);
     }
 

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMMaxWeightParserTest.java
Patch:
@@ -30,13 +30,13 @@ public void testSimpleTags() {
         IntsRef intsRef = em.createEdgeFlags();
         readerWay.setTag("highway", "primary");
         readerWay.setTag("maxweight", "5");
-        parser.handleWayTags(intsRef, readerWay, WAY, 0);
+        parser.handleWayTags(intsRef, readerWay, WAY, em.createRelationFlags());
         assertEquals(5.0, mwEnc.getDecimal(false, intsRef), .01);
 
         // if value is beyond the maximum then do not use infinity instead fallback to more restrictive maximum
         intsRef = em.createEdgeFlags();
         readerWay.setTag("maxweight", "50");
-        parser.handleWayTags(intsRef, readerWay, WAY, 0);
+        parser.handleWayTags(intsRef, readerWay, WAY, em.createRelationFlags());
         assertEquals(mwEnc.getMaxDecimal(), mwEnc.getDecimal(false, intsRef), .01);
     }
 }
\ No newline at end of file

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMTollParserTest.java
Patch:
@@ -26,7 +26,7 @@ public void setUp() {
     @Test
     public void testSimpleTags() {
         ReaderWay readerWay = new ReaderWay(1);
-        long relFlags = 0;
+        IntsRef relFlags = em.createRelationFlags();
         IntsRef intsRef = em.createEdgeFlags();
         readerWay.setTag("highway", "primary");
         parser.handleWayTags(intsRef, readerWay, WAY, relFlags);

File: core/src/test/java/com/graphhopper/routing/util/parsers/OSMTrackTypeParserTest.java
Patch:
@@ -15,7 +15,7 @@
 public class OSMTrackTypeParserTest {
 
     private EncodingManager em;
-    private long relFlags;
+    private IntsRef relFlags;
     private EnumEncodedValue<TrackType> ttEnc;
     private OSMTrackTypeParser parser;
 
@@ -24,7 +24,7 @@ public void setUp() {
         parser = new OSMTrackTypeParser();
         em = new EncodingManager.Builder().add(parser).build();
         ttEnc = em.getEnumEncodedValue(TrackType.KEY, TrackType.class);
-        relFlags = 0;
+        relFlags = em.createRelationFlags();
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/weighting/GenericWeightingTest.java
Patch:
@@ -62,7 +62,7 @@ public void setUp() {
         updateDistancesFor(graph, 0, 0.00, 0.00);
         updateDistancesFor(graph, 1, 0.01, 0.01);
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay().put(encoder.toString(), EncodingManager.Access.WAY);
-        graph.getEdgeIteratorState(0, 1).setFlags(em.handleWayTags(way, map, 0));
+        graph.getEdgeIteratorState(0, 1).setFlags(em.handleWayTags(way, map, em.createRelationFlags()));
     }
 
     @Test
@@ -98,7 +98,7 @@ public void testDisabledRoadAttributes() {
         updateDistancesFor(simpleGraph, 0, 0.00, 0.00);
         updateDistancesFor(simpleGraph, 1, 0.01, 0.01);
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay().put(encoder.toString(), EncodingManager.Access.WAY);
-        simpleGraph.getEdgeIteratorState(0, 1).setFlags(simpleEncodingManager.handleWayTags(way, map, 0));
+        simpleGraph.getEdgeIteratorState(0, 1).setFlags(simpleEncodingManager.handleWayTags(way, map, em.createRelationFlags()));
 
         Weighting instance = new GenericWeighting(simpleEncoder, new HintsMap().put(GenericWeighting.HEIGHT_LIMIT, 5.0));
         EdgeIteratorState edge = simpleGraph.getEdgeIteratorState(0, 1);

File: core/src/test/java/com/graphhopper/routing/weighting/TurnWeightingTest.java
Patch:
@@ -63,8 +63,7 @@ public void calcWeightAndTime_withTurnCosts_shortest() {
     }
 
     private void setTurnCost(int from, int via, int to, double turnCost) {
-        long turnFlags = encoder.getTurnFlags(false, turnCost);
-        turnCostExt.addTurnInfo(getEdge(graph, from, via).getEdge(), via, getEdge(graph, via, to).getEdge(), turnFlags);
+        turnCostExt.setExpensive(encoder.toString(), encodingManager, getEdge(graph, from, via).getEdge(), via, getEdge(graph, via, to).getEdge(), turnCost);
     }
 
 }
\ No newline at end of file

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageForDataFlagEncoderTest.java
Patch:
@@ -64,7 +64,7 @@ public void testStorageProperties() {
         updateDistancesFor(graph, 0, 0.00, 0.00);
         updateDistancesFor(graph, 1, 0.01, 0.01);
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay().put(encoder.toString(), Access.WAY);
-        graph.getEdgeIteratorState(0, 1).setFlags(encodingManager.handleWayTags(way_0_1, map, 0));
+        graph.getEdgeIteratorState(0, 1).setFlags(encodingManager.handleWayTags(way_0_1, map, encodingManager.createRelationFlags()));
 
         // 1-2
         ReaderWay way_1_2 = new ReaderWay(28l);
@@ -73,15 +73,15 @@ public void testStorageProperties() {
 
         graph.edge(1, 2, 1, true);
         updateDistancesFor(graph, 2, 0.02, 0.02);
-        graph.getEdgeIteratorState(1, 2).setFlags(encodingManager.handleWayTags(way_1_2, map, 0));
+        graph.getEdgeIteratorState(1, 2).setFlags(encodingManager.handleWayTags(way_1_2, map, encodingManager.createRelationFlags()));
 
         // 2-0
         ReaderWay way_2_0 = new ReaderWay(29l);
         way_2_0.setTag("highway", "primary");
         way_2_0.setTag("maxwidth", "5");
 
         graph.edge(2, 0, 1, true);
-        graph.getEdgeIteratorState(2, 0).setFlags(encodingManager.handleWayTags(way_2_0, map, 0));
+        graph.getEdgeIteratorState(2, 0).setFlags(encodingManager.handleWayTags(way_2_0, map, encodingManager.createRelationFlags()));
 
         graph.flush();
         graph.close();

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -30,6 +30,7 @@
 import com.graphhopper.routing.weighting.ShortestWeighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
+import com.graphhopper.storage.IntsRef;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.details.PathDetail;
 import com.graphhopper.util.details.PathDetailsBuilderFactory;
@@ -86,7 +87,7 @@ public void testScenario() {
         w.setTag("highway", "tertiary");
         w.setTag("maxspeed", "10");
 
-        long relFlags = 0;
+        IntsRef relFlags = carManager.createRelationFlags();
         EdgeIteratorState tmpEdge;
         tmpEdge = g.edge(0, 1, 10000, true).setName("0-1");
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay();

File: web-bundle/src/test/java/com/graphhopper/util/gpx/GpxFromInstructionsTest.java
Patch:
@@ -214,7 +214,7 @@ private IntsRef flagsForSpeed(EncodingManager encodingManager, int speedKmPerHou
         way.setTag("maxspeed", String.format("%d km/h", speedKmPerHour));
         EncodingManager.AcceptWay map = new EncodingManager.AcceptWay();
         encodingManager.acceptWay(way, map);
-        return encodingManager.handleWayTags(way, map, 0);
+        return encodingManager.handleWayTags(way, map, encodingManager.createRelationFlags());
     }
 
     private void verifyGPX(String gpx) {

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -1265,8 +1265,9 @@ public void testEdgeBasedRequiresTurnCostSupport() {
         req.getHints().put(Routing.EDGE_BASED, true);
         req.setVehicle("foot");
         GHResponse rsp = hopper.route(req);
+        assertTrue(rsp.hasErrors());
         assertTrue("using edge-based for encoder without turncost support should be an error, but got:\n" + rsp.getErrors(),
-                rsp.getErrors().toString().contains("You need a turn cost storage to make use of edge_based=true, e.g. use car|turn_costs=true"));
+                rsp.getErrors().toString().contains("You need to set up a turn cost storage to make use of edge_based=true, e.g. use car|turn_costs=true"));
     }
 
     @Test

File: api/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -565,7 +565,7 @@ public void parse2DJSON(String str) {
             if (latlon.trim().length() == 0)
                 continue;
 
-            String ll[] = latlon.split(",");
+            String[] ll = latlon.split(",");
             String lat = ll[1].replace("]", "").trim();
             add(Double.parseDouble(lat), Double.parseDouble(ll[0].trim()), Double.NaN);
         }

File: core/src/main/java/com/graphhopper/routing/util/WheelchairFlagEncoder.java
Patch:
@@ -95,7 +95,6 @@ public WheelchairFlagEncoder(int speedBits, double speedFactor) {
         excludeSmoothness.add("impassable");
 
         allowedHighwayTags.addAll(safeHighwayTags);
-        allowedHighwayTags.addAll(excludeHighwayTags);
         allowedHighwayTags.add("cycleway");
         allowedHighwayTags.add("unclassified");
         allowedHighwayTags.add("road");

File: api/src/main/java/com/graphhopper/util/AngleCalc.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Calculates the angle of a turn, defined by three points. The fast atan2 method is from Jim Shima,
  * 1999, http://www.dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization
- * <p>
+ * and stands under public domain.
  *
  * @author Johannes Pelzer
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -139,7 +139,7 @@ public synchronized void putCurrentVersions() {
         put("edges.version", Constants.VERSION_EDGE);
         put("geometry.version", Constants.VERSION_GEOMETRY);
         put("location_index.version", Constants.VERSION_LOCATION_IDX);
-        put("name_index.version", Constants.VERSION_NAME_IDX);
+        put("string_index.version", Constants.VERSION_STRING_IDX);
         put("shortcuts.version", Constants.VERSION_SHORTCUT);
     }
 
@@ -148,7 +148,7 @@ public synchronized String versionsToString() {
                 + get("edges.version") + ","
                 + get("geometry.version") + ","
                 + get("location_index.version") + ","
-                + get("name_index.version");
+                + get("string_index.version");
     }
 
     public synchronized boolean checkVersions(boolean silent) {
@@ -164,7 +164,7 @@ public synchronized boolean checkVersions(boolean silent) {
         if (!check("location_index", Constants.VERSION_LOCATION_IDX, silent))
             return false;
 
-        if (!check("name_index", Constants.VERSION_NAME_IDX, silent))
+        if (!check("string_index", Constants.VERSION_STRING_IDX, silent))
             return false;
 
         if (!check("shortcuts", Constants.VERSION_SHORTCUT, silent))

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -71,7 +71,7 @@ public class Constants {
     public static final int VERSION_SHORTCUT = 5;
     public static final int VERSION_GEOMETRY = 4;
     public static final int VERSION_LOCATION_IDX = 3;
-    public static final int VERSION_NAME_IDX = 3;
+    public static final int VERSION_STRING_IDX = 5;
     /**
      * The version without the snapshot string
      */
@@ -144,7 +144,7 @@ public class Constants {
 
     public static String getVersions() {
         return VERSION_NODE + "," + VERSION_EDGE + "," + VERSION_GEOMETRY + "," + VERSION_LOCATION_IDX
-                + "," + VERSION_NAME_IDX + "," + VERSION_SHORTCUT;
+                + "," + VERSION_STRING_IDX + "," + VERSION_SHORTCUT;
     }
 
     public static String getMajorVersion() {

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -947,7 +947,7 @@ public void testGetAllEdgesWithDelete() {
     }
 
     @Test
-    public void testNameIndex() {
+    public void testStringIndex() {
         graph = createGHStorage();
         EdgeIteratorState iter1 = graph.edge(0, 1, 10, true);
         iter1.setName("named street1");

File: core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java
Patch:
@@ -57,6 +57,9 @@ else if (name.equals(CAR4WD))
         if (name.equals(MOTORCYCLE))
             return new MotorcycleFlagEncoder(configuration);
 
+        if (name.equals(WHEELCHAIR))
+            return new WheelchairFlagEncoder(configuration);
+
         throw new IllegalArgumentException("entry in encoder list not supported " + name);
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java
Patch:
@@ -32,6 +32,7 @@ public interface FlagEncoderFactory {
     String FOOT = "foot";
     String HIKE = "hike";
     String MOTORCYCLE = "motorcycle";
+    String WHEELCHAIR = "wheelchair";
     String GENERIC = "generic";
 
     FlagEncoder createFlagEncoder(String name, PMap configuration);

File: core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
Patch:
@@ -43,8 +43,8 @@ public HikeFlagEncoder() {
     }
 
     public HikeFlagEncoder(PMap properties) {
-        this((int) properties.getLong("speedBits", 4),
-                properties.getDouble("speedFactor", 1));
+        this((int) properties.getLong("speed_bits", 4),
+                properties.getDouble("speed_factor", 1));
         this.setBlockFords(properties.getBool("block_fords", false));
     }
 

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -293,7 +293,7 @@ protected int loadEdgesHeader() {
         return 3;
     }
 
-    protected int setEdgesHeader() {
+    int setEdgesHeader() {
         shortcuts.setHeader(0 * 4, shortcutCount);
         shortcuts.setHeader(1 * 4, shortcutEntryBytes);
         return 3;
@@ -366,6 +366,8 @@ public boolean loadExisting() {
 
     @Override
     public void flush() {
+        setNodesHeader();
+        setEdgesHeader();
         nodesCH.flush();
         shortcuts.flush();
     }

File: reader-osm/src/main/java/com/graphhopper/reader/osm/GraphHopperOSM.java
Patch:
@@ -64,7 +64,7 @@ public GraphHopperOSM setOSMFile(String osmFileStr) {
     }
 
     @Override
-    protected void loadOrPrepareLM() {
+    protected void loadOrPrepareLM(boolean closeEarly) {
         if (!getLMFactoryDecorator().isEnabled() || getLMFactoryDecorator().getPreparations().isEmpty())
             return;
 
@@ -88,6 +88,6 @@ public String getId() {
             }
         }
 
-        super.loadOrPrepareLM();
+        super.loadOrPrepareLM(closeEarly);
     }
 }

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -78,7 +78,7 @@ public void start() {
                 + ", " + graphHopper.getGraphHopperStorage().toDetailsString());
     }
 
-    GraphHopper getGraphHopper() {
+    public GraphHopper getGraphHopper() {
         return graphHopper;
     }
 

File: web/src/main/java/com/graphhopper/http/cli/ImportCommand.java
Patch:
@@ -55,8 +55,7 @@ protected void run(Bootstrap<GraphHopperServerConfiguration> bootstrap, Namespac
             gtfsStorage.close();
         } else {
             final GraphHopperManaged graphHopper = new GraphHopperManaged(configuration.getGraphHopperConfiguration(), bootstrap.getObjectMapper());
-            graphHopper.start();
-            graphHopper.stop();
+            graphHopper.getGraphHopper().importAndClose();
         }
 
     }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
Patch:
@@ -213,7 +213,8 @@ public Map<Validity, Integer> getOperatingDayPatterns() {
         return operatingDayPatterns;
     }
 
-	Map<Integer, FeedIdWithTimezone> getTimeZones() {
+    @Override
+	public Map<Integer, FeedIdWithTimezone> getTimeZones() {
 		return readableTimeZones;
 	}
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorageI.java
Patch:
@@ -89,6 +89,8 @@ public int hashCode() {
 
     Map<GtfsStorage.FeedIdWithTimezone, Integer> getWritableTimeZones();
 
+    Map<Integer, GtfsStorage.FeedIdWithTimezone> getTimeZones();
+
     Map<Integer, byte[]> getTripDescriptors();
 
     Map<Integer, Integer> getStopSequences();

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -216,7 +216,7 @@ private void parseSolutionsAndAddToResponse(List<List<Label.Transition>> solutio
 
         private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
             StopWatch stopWatch = new StopWatch().start();
-            final GraphExplorer accessEgressGraphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, ptEncodedValues, gtfsStorage, realtimeFeed, !arriveBy, true, walkSpeedKmH);
+            final GraphExplorer accessEgressGraphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, ptEncodedValues, gtfsStorage, realtimeFeed, !arriveBy, true, walkSpeedKmH, false);
             boolean reverse = !arriveBy;
             GtfsStorage.EdgeType edgeType = reverse ? GtfsStorage.EdgeType.EXIT_PT : GtfsStorage.EdgeType.ENTER_PT;
             MultiCriteriaLabelSetting stationRouter = new MultiCriteriaLabelSetting(accessEgressGraphExplorer, ptEncodedValues, reverse, false, false, false, maxVisitedNodesForRequest, new ArrayList<>());
@@ -239,7 +239,7 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
                 reverseSettledSet.put(stationLabel.adjNode, stationLabel);
             }
 
-            GraphExplorer graphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, ptEncodedValues, gtfsStorage, realtimeFeed, arriveBy, false, walkSpeedKmH);
+            GraphExplorer graphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, ptEncodedValues, gtfsStorage, realtimeFeed, arriveBy, false, walkSpeedKmH, false);
             List<Label> discoveredSolutions = new ArrayList<>();
             final long smallestStationLabelWeight;
             MultiCriteriaLabelSetting router = new MultiCriteriaLabelSetting(graphExplorer, ptEncodedValues, arriveBy, true, !ignoreTransfers, profileQuery, maxVisitedNodesForRequest, discoveredSolutions);
@@ -487,7 +487,7 @@ private Stream<TransferWithTime> getType0TransferWithTimes(GTFSFeed gtfsFeed) {
                     points.add(graphHopperStorage.getNodeAccess().getLat(tonode), graphHopperStorage.getNodeAccess().getLon(tonode));
 
                     QueryGraph queryGraph = QueryGraph.lookup(graphHopperStorage, Collections.emptyList());
-                    final GraphExplorer graphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, ptEncodedValues, gtfsStorage, realtimeFeed, false, true, 5.0);
+                    final GraphExplorer graphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, ptEncodedValues, gtfsStorage, realtimeFeed, false, true, 5.0, false);
 
                     MultiCriteriaLabelSetting router = new MultiCriteriaLabelSetting(graphExplorer, ptEncodedValues, false, false, false, false, Integer.MAX_VALUE, new ArrayList<>());
                     Iterator<Label> iterator = router.calcLabels(fromnode, Instant.ofEpochMilli(0), 0).iterator();

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/MultiCriteriaLabelSetting.java
Patch:
@@ -81,7 +81,7 @@ public MultiCriteriaLabelSetting(GraphExplorer explorer, PtEncodedValues flagEnc
         fromMap = new IntObjectHashMap<>();
     }
 
-    Stream<Label> calcLabels(int from, Instant startTime, int blockedRouteTypes) {
+    public Stream<Label> calcLabels(int from, Instant startTime, int blockedRouteTypes) {
         this.startTime = startTime.toEpochMilli();
         this.blockedRouteTypes = blockedRouteTypes;
         return StreamSupport.stream(new MultiCriteriaLabelSettingSpliterator(from), false)

File: web-bundle/src/main/java/com/graphhopper/resources/PtIsochroneResource.java
Patch:
@@ -102,7 +102,7 @@ public Response doGet(
         }
 
         PtEncodedValues ptEncodedValues = PtEncodedValues.fromEncodingManager(encodingManager);
-        GraphExplorer graphExplorer = new GraphExplorer(queryGraph, new FastestWeighting(encodingManager.getEncoder("foot")), ptEncodedValues, gtfsStorage, RealtimeFeed.empty(gtfsStorage), reverseFlow, false, 5.0);
+        GraphExplorer graphExplorer = new GraphExplorer(queryGraph, new FastestWeighting(encodingManager.getEncoder("foot")), ptEncodedValues, gtfsStorage, RealtimeFeed.empty(gtfsStorage), reverseFlow, false, 5.0, reverseFlow);
         MultiCriteriaLabelSetting router = new MultiCriteriaLabelSetting(graphExplorer, ptEncodedValues, reverseFlow, false, false, false, 1000000, Collections.emptyList());
 
         Map<Coordinate, Double> z1 = new HashMap<>();

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -163,6 +163,7 @@ protected BikeCommonFlagEncoder(int speedBits, double speedFactor, int maxTurnCo
 
         setHighwaySpeed("living_street", 6);
         setHighwaySpeed("steps", PUSHING_SECTION_SPEED / 2);
+        avoidHighwayTags.add("steps");
 
         final int CYCLEWAY_SPEED = 18;  // Make sure cycleway and path use same speed value, see #634
         setHighwaySpeed("cycleway", CYCLEWAY_SPEED);

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -604,6 +604,8 @@ public void applyWayTags(ReaderWay way, EdgeIteratorState edge) {
             edge.setName(name);
         }
 
+        if (Double.isInfinite(edge.getDistance()))
+            throw new IllegalStateException("Infinite distance should not happen due to #435. way ID=" + way.getId());
         for (AbstractFlagEncoder encoder : edgeEncoders) {
             encoder.applyWayTags(way, edge);
         }

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -292,9 +292,9 @@ public void testMonacoFoot3D() {
     public void testNorthBayreuthHikeFastestAnd3D() {
         List<OneRun> list = new ArrayList<>();
         // prefer hiking route 'Teufelsloch Unterwaiz' and 'Rotmain-Wanderweg'        
-        list.add(new OneRun(49.974972, 11.515657, 49.991022, 11.512299, 2365, 66));
+        list.add(new OneRun(49.974972, 11.515657, 49.991022, 11.512299, 2384, 93));
         // prefer hiking route 'Markgrafenweg Bayreuth Kulmbach' but avoid tertiary highway from Pechgraben
-        list.add(new OneRun(49.990967, 11.545258, 50.023182, 11.555386, 5636, 97));
+        list.add(new OneRun(49.990967, 11.545258, 50.023182, 11.555386, 4746, 119));
         runAlgo(testCollector, DIR + "/north-bayreuth.osm.gz", "target/north-bayreuth-gh",
                 list, "hike", true, "hike", "fastest", true);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());

File: web-api/src/main/java/com/graphhopper/jackson/GHPointDeserializer.java
Patch:
@@ -10,7 +10,7 @@
 
 class GHPointDeserializer extends JsonDeserializer<GHPoint> {
     @Override
-    public GHPoint deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException {
+    public GHPoint deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
         double[] bounds = jsonParser.readValueAs(double[].class);
         return GHPoint.fromJson(bounds);
     }

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -1,9 +1,11 @@
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.MultiException;
 import com.graphhopper.PathWrapper;
+import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.details.PathDetail;
@@ -13,6 +15,7 @@
 public class GraphHopperModule extends SimpleModule {
 
     public GraphHopperModule() {
+        setMixInAnnotation(GHRequest.class, GHRequestMixIn.class);
         addDeserializer(GHResponse.class, new GHResponseDeserializer());
         addDeserializer(PathWrapper.class, new PathWrapperDeserializer());
         addDeserializer(BBox.class, new BBoxDeserializer());

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -232,11 +232,11 @@ protected void configure() {
         });
         environment.lifecycle().manage(new Managed() {
             @Override
-            public void start() throws Exception {
+            public void start() {
             }
 
             @Override
-            public void stop() throws Exception {
+            public void stop() {
                 locationIndex.close();
                 gtfsStorage.close();
                 graphHopperStorage.close();

File: matching-web-bundle/src/main/java/com/graphhopper/matching/gpx/Gpx.java
Patch:
@@ -21,12 +21,13 @@
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
 
+import java.util.ArrayList;
 import java.util.List;
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Gpx {
 
     @JacksonXmlElementWrapper(useWrapping = false)
-    public List<Trk> trk;
+    public List<Trk> trk = new ArrayList<>();
 
 }

File: matching-web-bundle/src/main/java/com/graphhopper/matching/gpx/Trk.java
Patch:
@@ -19,9 +19,11 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
 import com.graphhopper.matching.Observation;
 import com.graphhopper.util.shapes.GHPoint3D;
 
+import javax.validation.constraints.NotNull;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.List;
@@ -31,7 +33,7 @@
 public class Trk {
 
     @JacksonXmlElementWrapper(useWrapping = false)
-    public List<Trkseg> trkseg;
+    public List<Trkseg> trkseg = new ArrayList<>();
     public String name;
 
     public List<Observation> getEntries() {

File: matching-web-bundle/src/main/java/com/graphhopper/matching/gpx/Trkseg.java
Patch:
@@ -20,13 +20,15 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;
 
+import java.util.ArrayList;
 import java.util.List;
 
 @JsonIgnoreProperties(ignoreUnknown = true)
 public class Trkseg {
 
     @JacksonXmlElementWrapper(useWrapping = false)
-    public List<Trkpt> trkpt;
+    public List<Trkpt> trkpt = new ArrayList<>();
 
 }

File: matching-web-bundle/src/main/java/com/graphhopper/matching/http/MapMatchingResource.java
Patch:
@@ -87,7 +87,7 @@ public Response match(
             @QueryParam("gps_accuracy") @DefaultValue("40") double gpsAccuracy) {
 
         boolean writeGPX = "gpx".equalsIgnoreCase(outType);
-        if (gpx.trk == null) {
+        if (gpx.trk.isEmpty()) {
             throw new IllegalArgumentException("No tracks found in GPX document. Are you using waypoints or routes instead?");
         }
         if (gpx.trk.size() > 1) {

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -22,8 +22,6 @@
 import com.graphhopper.routing.profiles.BooleanEncodedValue;
 import com.graphhopper.routing.util.AllCHEdgesIterator;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.weighting.AbstractWeighting;
-import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.BaseGraph.AllEdgeIterator;
 import com.graphhopper.storage.BaseGraph.EdgeIterable;
 import com.graphhopper.util.*;
@@ -405,7 +403,7 @@ public void debugPrint() {
             System.out.format(Locale.ROOT, " ... %d more nodes", baseGraph.getNodes() - printMax);
         }
         System.out.println("shortcuts:");
-        String formatShortcutsBase = "%12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s";
+        String formatShortcutsBase = "%12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s";
         String formatShortcutExt = " | %12s | %12s";
         String header = String.format(Locale.ROOT, formatShortcutsBase, "#", "E_NODEA", "E_NODEB", "E_LINKA", "E_LINKB", "E_DIST", "E_FLAGS", "S_SKIP_EDGE1", "S_SKIP_EDGE2");
         if (chProfile.isEdgeBased()) {

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -140,11 +140,11 @@ protected DataReader importData() throws IOException {
             maxNode = g.getNodes();
             boolean isCH = false;
             boolean isLM = false;
-            final boolean withoutSpeedup = args.getBool("measurement.without_speedup", true);
+            final boolean runSlow = args.getBool("measurement.run_slow_routing", true);
             GHBitSet allowedEdges = printGraphDetails(g, vehicleStr);
             printMiscUnitPerfTests(g, isCH, encoder, count * 100, allowedEdges);
             printLocationIndexQuery(g, hopper.getLocationIndex(), count);
-            if (!withoutSpeedup) {
+            if (runSlow) {
                 printTimeOfRouteQuery(hopper, isCH, isLM, count / 20, "routing", vehicleStr,
                         true, false, -1, true, false);
             }

File: core/src/main/java/com/graphhopper/routing/util/parsers/helpers/OSMValueExtractor.java
Patch:
@@ -35,7 +35,7 @@ public static void extractTons(IntsRef edgeFlags, ReaderWay way, DecimalEncodedV
     }
 
     public static double stringToTons(String value) {
-        value = value.toLowerCase().replaceAll("(tons|ton)", "t");
+        value = toLowerCase(value).replaceAll("(tons|ton)", "t");
         value = value.replace("mgw", "").trim();
         if (isInvalid(value))
             throw new NumberFormatException("Cannot parse value for 'tons': " + value);
@@ -114,7 +114,7 @@ public static double stringToMeter(String value) {
     }
 
     static boolean isInvalid(String value) {
-        value = value.toLowerCase();
+        value = toLowerCase(value);
         return value.isEmpty() || value.startsWith("default") || value.equals("none") || value.equals("unknown")
                 || value.contains("unrestricted") || value.startsWith("〜")
                 || value.contains("narrow") || value.equals("unsigned") || value.equals("fixme") || value.equals("small")

File: client-hc/src/test/java/com/graphhopper/api/AbstractGraphHopperMatrixWebIntegrationTester.java
Patch:
@@ -157,7 +157,7 @@ public void testConnectionNotFound_doNotFailFast() {
                 } else if (i == 0 && j == 3) {
                     assertTrue(connected);
                     assertEquals(4931, weight, 100);
-                    assertEquals(78643, distance, 100);
+                    assertEquals(78812, distance, 100);
                     assertEquals(3752000, time, 100000);
                 } else if (i == 3 && j == 0) {
                     assertTrue(connected);

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -535,7 +535,7 @@ public boolean equals(Object o) {
 
         @Override
         public int hashCode() {
-            return Objects.hash(startNode, startEdge, endNode, targetEdge);
+            return 31 * startNode + endNode;
         }
     }
 

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/Isochrone.java
Patch:
@@ -107,7 +107,7 @@ public void setDistanceLimit(double limit) {
     public static class IsoLabelWithCoordinates {
         public final int nodeId;
         public int edgeId, prevEdgeId, prevNodeId;
-        public int timeInSec, prevTimeInSec;
+        public int timeMillis, prevTimeMillis;
         public int distance, prevDistance;
         public GHPoint coordinate, prevCoordinate;
 
@@ -132,7 +132,7 @@ public void apply(int nodeId, IsoLabel label) {
                 double lon = na.getLongitude(nodeId);
                 IsoLabelWithCoordinates isoLabelWC = new IsoLabelWithCoordinates(nodeId);
                 isoLabelWC.coordinate = new GHPoint(lat, lon);
-                isoLabelWC.timeInSec = Math.round(label.time);
+                isoLabelWC.timeMillis = Math.round(label.time);
                 isoLabelWC.distance = (int) Math.round(label.distance);
                 isoLabelWC.edgeId = label.edge;
                 if (label.parent != null) {
@@ -144,7 +144,7 @@ public void apply(int nodeId, IsoLabel label) {
                     isoLabelWC.prevEdgeId = prevLabel.edge;
                     isoLabelWC.prevCoordinate = new GHPoint(prevLat, prevLon);
                     isoLabelWC.prevDistance = (int) Math.round(prevLabel.distance);
-                    isoLabelWC.prevTimeInSec = Math.round(prevLabel.time);
+                    isoLabelWC.prevTimeMillis = Math.round(prevLabel.time);
                 }
                 callback.add(isoLabelWC);
             }

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -140,10 +140,10 @@ public Response doGet(
                                 sb.append(label.prevCoordinate == null ? 0 : label.prevDistance);
                                 continue;
                             case "time":
-                                sb.append(label.timeInSec);
+                                sb.append(label.timeMillis);
                                 continue;
                             case "prev_time":
-                                sb.append(label.prevCoordinate == null ? 0 : label.prevTimeInSec);
+                                sb.append(label.prevCoordinate == null ? 0 : label.prevTimeMillis);
                                 continue;
                             case "longitude":
                                 sb.append(label.coordinate.lon);

File: core/src/main/java/com/graphhopper/routing/profiles/DefaultEncodedValueFactory.java
Patch:
@@ -53,6 +53,8 @@ public EncodedValue create(String string) {
             enc = new EnumEncodedValue<>(Surface.KEY, Surface.class);
         } else if (Toll.KEY.equals(name)) {
             enc = new EnumEncodedValue<>(Toll.KEY, Toll.class);
+        } else if (TrackType.KEY.equals(name)) {
+            enc = new EnumEncodedValue<>(TrackType.KEY, TrackType.class);
         } else {
             throw new IllegalArgumentException("DefaultEncodedValueFactory cannot find EncodedValue " + name);
         }

File: core/src/main/java/com/graphhopper/routing/util/parsers/DefaultTagParserFactory.java
Patch:
@@ -52,6 +52,8 @@ else if (name.equals(Surface.KEY))
             return new OSMSurfaceParser();
         else if (name.equals(Toll.KEY))
             return new OSMTollParser();
+        else if (name.equals(TrackType.KEY))
+            return new OSMTrackTypeParser();
         throw new IllegalArgumentException("entry in encoder list not supported " + name);
     }
 }

File: core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
Patch:
@@ -62,7 +62,7 @@ public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requested
         for (Map.Entry entry : Arrays.asList(new MapEntry<>(RoadClass.KEY, RoadClass.class),
                 new MapEntry<>(RoadEnvironment.KEY, RoadEnvironment.class), new MapEntry<>(Surface.KEY, Surface.class),
                 new MapEntry<>(RoadAccess.KEY, RoadAccess.class), new MapEntry<>(Toll.KEY, Toll.class),
-                new MapEntry<>(Country.KEY, Country.class))) {
+                new MapEntry<>(TrackType.KEY, TrackType.class), new MapEntry<>(Country.KEY, Country.class))) {
             String key = (String) entry.getKey();
             if (requestedPathDetails.contains(key) && encoder.hasEncodedValue(key))
                 builders.add(new EnumDetails(key, encoder.getEnumEncodedValue(key, (Class<Enum>) entry.getValue())));

File: web/src/main/java/com/graphhopper/http/GraphHopperApplication.java
Patch:
@@ -22,10 +22,8 @@
 import com.graphhopper.http.resources.RootResource;
 import io.dropwizard.Application;
 import io.dropwizard.bundles.assets.ConfiguredAssetsBundle;
-import io.dropwizard.client.HttpClientBuilder;
 import io.dropwizard.setup.Bootstrap;
 import io.dropwizard.setup.Environment;
-import org.apache.http.client.HttpClient;
 
 import javax.servlet.DispatcherType;
 import java.util.EnumSet;

File: core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
Patch:
@@ -31,7 +31,6 @@
 import com.graphhopper.storage.StorableProperties;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.util.CmdArgs;
-import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.Parameters.Landmark;
@@ -88,7 +87,7 @@ public void init(CmdArgs args) {
                 lmSuggestionsLocations.add(loc.trim());
         }
         String lmWeightingsStr = args.get(Landmark.PREPARE + "weightings", "");
-        if (!lmWeightingsStr.isEmpty() && !lmWeightingsStr.equalsIgnoreCase("no")) {
+        if (!lmWeightingsStr.isEmpty() && !lmWeightingsStr.equalsIgnoreCase("no") && !lmWeightingsStr.equalsIgnoreCase("false")) {
             List<String> tmpLMWeightingList = Arrays.asList(lmWeightingsStr.split(","));
             setWeightingsAsStrings(tmpLMWeightingList);
         }

File: api/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -114,6 +114,7 @@ public static final class Routing {
          */
         public static final String PASS_THROUGH = "pass_through";
         public static final String POINT_HINT = "point_hint";
+        public static final String SNAP_PREVENTION = "snap_prevention";
         /**
          * default heading penalty in seconds
          */
@@ -189,7 +190,7 @@ public static final class NON_CH {
     /**
      * Properties for the details response
      */
-    public static final class DETAILS {
+    public static final class Details {
 
         public static final String PATH_DETAILS = "details";
 

File: core/src/main/java/com/graphhopper/util/details/DistanceDetails.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.util.EdgeIteratorState;
 
-import static com.graphhopper.util.Parameters.DETAILS.DISTANCE;
+import static com.graphhopper.util.Parameters.Details.DISTANCE;
 
 public class DistanceDetails extends AbstractPathDetailsBuilder {
 

File: core/src/main/java/com/graphhopper/util/details/EdgeIdDetails.java
Patch:
@@ -21,7 +21,7 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
 
-import static com.graphhopper.util.Parameters.DETAILS.EDGE_ID;
+import static com.graphhopper.util.Parameters.Details.EDGE_ID;
 
 /**
  * Calculate the Edge Id segments of a Path

File: core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
Patch:
@@ -27,7 +27,7 @@
 import java.util.List;
 import java.util.Map;
 
-import static com.graphhopper.util.Parameters.DETAILS.*;
+import static com.graphhopper.util.Parameters.Details.*;
 
 /**
  * Generates a list of PathDetailsBuilder from a List of PathDetail names

File: core/src/main/java/com/graphhopper/util/details/StreetNameDetails.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.util.EdgeIteratorState;
 
-import static com.graphhopper.util.Parameters.DETAILS.STREET_NAME;
+import static com.graphhopper.util.Parameters.Details.STREET_NAME;
 
 /**
  * Calculate the speed name segments of a Path

File: core/src/main/java/com/graphhopper/util/details/TimeDetails.java
Patch:
@@ -20,7 +20,7 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 
-import static com.graphhopper.util.Parameters.DETAILS.TIME;
+import static com.graphhopper.util.Parameters.Details.TIME;
 
 /**
  * Calculate the time segments for a Path

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.*;
 
 import static com.graphhopper.storage.AbstractGraphStorageTester.assertPList;
-import static com.graphhopper.util.Parameters.DETAILS.*;
+import static com.graphhopper.util.Parameters.Details.*;
 import static org.junit.Assert.*;
 
 /**

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -30,7 +30,7 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.NodeAccess;
-import com.graphhopper.util.Parameters.DETAILS;
+import com.graphhopper.util.Parameters.Details;
 import com.graphhopper.util.details.PathDetail;
 import com.graphhopper.util.details.PathDetailsBuilderFactory;
 import org.junit.Before;
@@ -139,7 +139,7 @@ public void testScenario() {
         // Path is: [0 0-1, 3 1-4, 6 4-7, 9 7-8, 11 8-9, 10 9-10]
         Path p = new Dijkstra(g, new ShortestWeighting(carEncoder), tMode).calcPath(0, 10);
         InstructionList wayList = p.calcInstructions(carManager.getBooleanEncodedValue(Roundabout.KEY), usTR);
-        Map<String, List<PathDetail>> details = p.calcDetails(Arrays.asList(DETAILS.AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
+        Map<String, List<PathDetail>> details = p.calcDetails(Arrays.asList(Details.AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
 
         PathWrapper pathWrapper = new PathWrapper();
         pathWrapper.setInstructions(wayList);

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -449,7 +449,7 @@ public int doCalc(boolean warmup, int run) {
                         put("instructions", withInstructions);
 
                 if (withInstructions)
-                    req.setPathDetails(Arrays.asList(Parameters.DETAILS.AVERAGE_SPEED));
+                    req.setPathDetails(Arrays.asList(Parameters.Details.AVERAGE_SPEED));
 
                 // put(algo + ".approximation", "BeelineSimplification").
                 // put(algo + ".epsilon", 2);

File: web-bundle/src/main/java/com/graphhopper/resources/MVTResource.java
Patch:
@@ -58,7 +58,7 @@ public Response doGetXyz(
             @PathParam("z") int zInfo,
             @PathParam("x") int xInfo,
             @PathParam("y") int yInfo,
-            @QueryParam(Parameters.DETAILS.PATH_DETAILS) List<String> pathDetails) {
+            @QueryParam(Parameters.Details.PATH_DETAILS) List<String> pathDetails) {
 
         if (zInfo <= 9) {
             VectorTile.Tile.Builder mvtBuilder = VectorTile.Tile.newBuilder();

File: web-bundle/src/main/java/com/graphhopper/resources/SPTResource.java
Patch:
@@ -166,7 +166,7 @@ public Response doGet(
                         if (edge == null)
                             continue;
 
-                        if (col.equals(Parameters.DETAILS.STREET_NAME)) {
+                        if (col.equals(Parameters.Details.STREET_NAME)) {
                             sb.append(edge.getName().replaceAll(",", ""));
                             continue;
                         }

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -286,6 +286,7 @@ protected void configure() {
         environment.jersey().register(NearestResource.class);
         environment.jersey().register(RouteResource.class);
         environment.jersey().register(IsochroneResource.class);
+        environment.jersey().register(SPTResource.class);
         environment.jersey().register(I18NResource.class);
         environment.jersey().register(InfoResource.class);
         environment.healthChecks().register("graphhopper", new GraphHopperHealthCheck(graphHopperManaged.getGraphHopper()));

File: core/src/main/java/com/graphhopper/util/XFirstSearch.java
Patch:
@@ -26,8 +26,8 @@
  */
 public abstract class XFirstSearch {
     /**
-     * Pick the BitSet implementation wisely. Use GHBitSetImpl only if we are sure you visit a large portion of the graph.
-     * And if you choose GHTBitSet the initial capacity can be also important for performance.
+     * Pick the BitSet implementation wisely. Use {@link com.graphhopper.coll.GHBitSetImpl} only if we are sure you visit a large portion of the graph.
+     * And if you choose {@link com.graphhopper.coll.GHTBitSet} the initial capacity can be also important for performance.
      */
     protected abstract GHBitSet createBitSet();
 

File: core/src/main/java/com/graphhopper/reader/dem/ElevationInterpolator.java
Patch:
@@ -25,7 +25,6 @@
  * Elevation interpolator calculates elevation for the given lat/lon coordinates
  * based on lat/lon/ele coordinates of the given points.
  * <p>
- * <p>
  * In case of two points, elevation is calculated using linear interpolation
  * (see
  * {@link #calculateElevationBasedOnTwoPoints(double, double, double, double, double, double, double, double)}).

File: core/src/main/java/com/graphhopper/reader/dem/NodeElevationInterpolator.java
Patch:
@@ -22,7 +22,7 @@
 import com.graphhopper.util.PointList;
 
 /**
- * Interpolates elevations of inner nodes based on elevations of outer nodes.
+ * Interpolates elevations of pillar nodes based on elevations of tower nodes.
  *
  * @author Alexey Valikov
  */

File: core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java
Patch:
@@ -21,11 +21,10 @@
 
 /**
  * Implementation of breadth first search (BFS)
- * <p>
  *
  * @author Peter Karich
  */
-public class BreadthFirstSearch extends XFirstSearch {
+public abstract class BreadthFirstSearch extends XFirstSearch {
     @Override
     public void start(EdgeExplorer explorer, int startNode) {
         SimpleIntDeque fifo = new SimpleIntDeque();

File: core/src/main/java/com/graphhopper/util/DepthFirstSearch.java
Patch:
@@ -22,12 +22,11 @@
 
 /**
  * Implementation of depth first search (DFS) by LIFO queue
- * <p>
  *
  * @author Peter Karich
  * @author Jan Sölter
  */
-public class DepthFirstSearch extends XFirstSearch {
+public abstract class DepthFirstSearch extends XFirstSearch {
     /**
      * beginning with startNode add all following nodes to LIFO queue. If node has been already
      * explored before, skip reexploration.

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -666,9 +666,6 @@ public void applyWayTags(ReaderWay way, EdgeIteratorState edge) {
         }
     }
 
-    /**
-     * The returned list is never empty.
-     */
     public List<FlagEncoder> fetchEdgeEncoders() {
         return new ArrayList<FlagEncoder>(edgeEncoders);
     }

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -281,6 +281,8 @@ protected void configure() {
         if (configuration.getBool("web.change_graph.enabled", false)) {
             environment.jersey().register(ChangeGraphResource.class);
         }
+
+        environment.jersey().register(MVTResource.class);
         environment.jersey().register(NearestResource.class);
         environment.jersey().register(RouteResource.class);
         environment.jersey().register(IsochroneResource.class);

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
Patch:
@@ -71,7 +71,7 @@ public void start() {
         graphHopper.importOrLoad();
         logger.info("loaded graph at:" + graphHopper.getGraphHopperLocation()
                 + ", data_reader_file:" + graphHopper.getDataReaderFile()
-                + ", flag_encoders:" + graphHopper.getEncodingManager()
+                + ", encoded values:" + graphHopper.getEncodingManager().toEncodedValuesAsString()
                 + ", " + graphHopper.getGraphHopperStorage().toDetailsString());
     }
 

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -146,4 +146,4 @@ private Response jsonSuccessResponse(Object result, float took) {
         info.put("took", Math.round(took * 1000));
         return Response.ok(json).build();
     }
-}
+}
\ No newline at end of file

File: core/src/main/java/com/graphhopper/routing/profiles/RoadAccess.java
Patch:
@@ -46,6 +46,7 @@ public static RoadAccess find(String name) {
         if (name == null)
             return YES;
         try {
+            // public and permissive will be converted into "yes"
             return RoadAccess.valueOf(Helper.toUpperCase(name));
         } catch (IllegalArgumentException ex) {
             return YES;

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -417,7 +417,7 @@ private void addEncodedValue(EncodedValue ev, boolean encValBoundToFlagEncoder)
         if (config.getRequiredBits() > getBytesForFlags() * 8)
             throw new IllegalArgumentException(String.format(Locale.ROOT, ERR + "(Attempt to add EncodedValue " + ev.getName() + ") ",
                     config.getRequiredBits(), bitsForEdgeFlags, "edge") +
-                    "Decrease the number of vehicles or increase the flags to more bytes via graph.bytes_for_flags: " + (config.getRequiredBits() / 8));
+                    "Decrease the number of vehicles or increase the flags to more bytes via graph.bytes_for_flags: " + (config.getRequiredBits() / 32 * 4 + 4));
 
         encodedValueMap.put(ev.getName(), ev);
     }

File: core/src/test/java/com/graphhopper/routing/CHQueryWithTurnCostsTest.java
Patch:
@@ -710,7 +710,6 @@ private void testPathCalculation(int from, int to, int expectedEdgeWeight, IntAr
 
     private AbstractBidirectionEdgeCHNoSOD createAlgo() {
         TurnWeighting chTurnWeighting = new TurnWeighting(new PreparationWeighting(weighting), turnCostExtension);
-        chTurnWeighting.setDefaultUTurnCost(0);
         AbstractBidirectionEdgeCHNoSOD algo = "astar".equals(algoString) ?
                 new AStarBidirectionEdgeCHNoSOD(chGraph, chTurnWeighting) :
                 new DijkstraBidirectionEdgeCHNoSOD(chGraph, chTurnWeighting);

File: core/src/main/java/com/graphhopper/routing/profiles/EncodedValueLookup.java
Patch:
@@ -29,5 +29,5 @@ public interface EncodedValueLookup {
 
     <T extends Enum> EnumEncodedValue<T> getEnumEncodedValue(String key, Class<T> enumType);
 
-    boolean hasEncoder(String key);
+    boolean hasEncodedValue(String key);
 }

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -28,6 +28,7 @@
 
 import java.util.*;
 
+import static com.graphhopper.routing.util.EncodingManager.getKey;
 import static com.graphhopper.routing.util.PriorityCode.*;
 
 /**
@@ -150,8 +151,8 @@ public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, Stri
         // first two bits are reserved for route handling in superclass
         super.createEncodedValues(registerNewEncodedValue, prefix, index);
         // larger value required - ferries are faster than pedestrians
-        registerNewEncodedValue.add(speedEncoder = new FactorizedDecimalEncodedValue(prefix + "average_speed", speedBits, speedFactor, false));
-        registerNewEncodedValue.add(priorityWayEncoder = new FactorizedDecimalEncodedValue(prefix + "priority", 3, PriorityCode.getFactor(1), false));
+        registerNewEncodedValue.add(speedEncoder = new FactorizedDecimalEncodedValue(getKey(prefix, "average_speed"), speedBits, speedFactor, false));
+        registerNewEncodedValue.add(priorityWayEncoder = new FactorizedDecimalEncodedValue(getKey(prefix, "priority"), 3, PriorityCode.getFactor(1), false));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/weighting/ShortFastestWeighting.java
Patch:
@@ -55,7 +55,6 @@ public ShortFastestWeighting(FlagEncoder encoder, double distanceFactor) {
 
     @Override
     public double getMinWeight(double distance) {
-        // TODO: Should we add the [+ distance * distanceFactor]. It improves the heuristic of the A*.
         return super.getMinWeight(distance) * timeFactor + distance * distanceFactor;
     }
 

File: core/src/main/java/com/graphhopper/storage/GraphExtension.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * If you need custom storages, like turn cost tables, or osmid tables for your graph you implement
- * this interface and put it in any graph storage you want.
+ * this interface and add it to any graph storage you want.
  */
 public interface GraphExtension extends Storable<GraphExtension> {
     /**

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.Roundabout;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.util.details.PathDetailsBuilderFactory;
 import com.graphhopper.util.exceptions.ConnectionNotFoundException;
@@ -87,7 +88,7 @@ public void doWork(PathWrapper altRsp, List<Path> paths, EncodingManager encodin
         InstructionList fullInstructions = new InstructionList(tr);
         PointList fullPoints = PointList.EMPTY;
         List<String> description = new ArrayList<>();
-        BooleanEncodedValue roundaboutEnc = encodingManager.getBooleanEncodedValue(EncodingManager.ROUNDABOUT);
+        BooleanEncodedValue roundaboutEnc = encodingManager.getBooleanEncodedValue(Roundabout.KEY);
         for (int pathIndex = 0; pathIndex < paths.size(); pathIndex++) {
             Path path = paths.get(pathIndex);
             if (!path.isFound()) {

File: core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
Patch:
@@ -275,7 +275,6 @@ private void assertDistTimeWeight(Path path, int numEdges, double distPerEdge, d
         assertEquals("wrong time", 1000 * (numEdges * weightPerEdge + turnCost), path.getTime(), 1.e-6);
     }
 
-
     private void blockNode3(Graph g) {
         // Totally block this node (all 9 turn relations)
         addTurnRestriction(g, 2, 3, 1);
@@ -472,5 +471,4 @@ private void addTurnCost(Graph g, double costs, int from, int via, int to) {
     private void addTurnFlags(Graph g, int from, int via, int to, long turnFlags) {
         tcs.addTurnInfo(getEdge(g, from, via).getEdge(), via, getEdge(g, via, to).getEdge(), turnFlags);
     }
-
 }

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -40,7 +40,7 @@
  * @author Peter Karich
  */
 public class PrepareContractionHierarchiesTest {
-    private final CarFlagEncoder carEncoder = new CarFlagEncoder();
+    private final CarFlagEncoder carEncoder = new CarFlagEncoder("speed_two_directions=true");
     private final EncodingManager encodingManager = EncodingManager.create(carEncoder);
     private final Weighting weighting = new ShortestWeighting(carEncoder);
     private final TraversalMode tMode = TraversalMode.NODE_BASED;

File: core/src/test/java/com/graphhopper/routing/profiles/BooleanEncodedValueTest.java
Patch:
@@ -12,7 +12,7 @@ public class BooleanEncodedValueTest {
     @Test
     public void testBit() {
         EncodedValue.InitializerConfig config = new EncodedValue.InitializerConfig();
-        IntEncodedValue intProp = new SimpleIntEncodedValue("somevalue", 5);
+        IntEncodedValue intProp = new SimpleIntEncodedValue("somevalue", 5, false);
         intProp.init(config);
 
         BooleanEncodedValue bool = new SimpleBooleanEncodedValue("access", false);

File: core/src/test/java/com/graphhopper/routing/profiles/IntEncodedValueTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.graphhopper.routing.profiles;
 
 import com.graphhopper.storage.IntsRef;
+import com.graphhopper.util.PMap;
 import org.junit.Test;
 
 import static org.junit.Assert.assertEquals;
@@ -32,7 +33,7 @@ public void testDirectedValue() {
 
     @Test
     public void multiIntsUsage() {
-        IntEncodedValue prop = new SimpleIntEncodedValue("test", 32, true);
+        IntEncodedValue prop = new SimpleIntEncodedValue("test", 31, true);
         prop.init(new EncodedValue.InitializerConfig());
         IntsRef ref = new IntsRef(2);
         prop.setInt(false, ref, 10);

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.profiles.BooleanEncodedValue;
 import com.graphhopper.routing.profiles.DecimalEncodedValue;
+import com.graphhopper.routing.profiles.Roundabout;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.Translation;
@@ -49,7 +50,7 @@ public abstract class AbstractBikeFlagEncoderTester {
     @Before
     public void setUp() {
         encodingManager = EncodingManager.create(encoder = createBikeEncoder());
-        roundaboutEnc = encodingManager.getBooleanEncodedValue(EncodingManager.ROUNDABOUT);
+        roundaboutEnc = encodingManager.getBooleanEncodedValue(Roundabout.KEY);
         priorityEnc = encodingManager.getDecimalEncodedValue(EncodingManager.getKey(encoder, "priority"));
         avSpeedEnc = encoder.getAverageSpeedEnc();
     }

File: core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
Patch:
@@ -35,7 +35,7 @@ protected BikeCommonFlagEncoder createBikeEncoder() {
 
     @Test
     public void testGetSpeed() {
-        IntsRef intsRef = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, true);
+        IntsRef intsRef = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, false);
         assertEquals(10, encoder.getSpeed(intsRef), 1e-1);
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "primary");

File: core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
Patch:
@@ -93,7 +93,7 @@ public void testSacScale() {
 
     @Test
     public void testGetSpeed() {
-        IntsRef intsRef = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, true);
+        IntsRef intsRef = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, false);
         assertEquals(10, encoder.getSpeed(intsRef), 1e-1);
         ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "track");

File: core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
Patch:
@@ -41,7 +41,7 @@ public class FastestWeightingTest {
     @Test
     public void testMinWeightHasSameUnitAs_getWeight() {
         Weighting instance = new FastestWeighting(encoder);
-        IntsRef flags = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, encoder.getMaxSpeed(), true, true);
+        IntsRef flags = GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, encoder.getMaxSpeed(), true, false);
         assertEquals(instance.getMinWeight(10), instance.calcWeight(createMockedEdgeIteratorState(10, flags), false, EdgeIterator.NO_EDGE), 1e-8);
     }
 
@@ -51,7 +51,7 @@ public void testWeightWrongHeading() {
                 put(Parameters.Routing.HEADING_PENALTY, "100"));
 
         VirtualEdgeIteratorState virtEdge = new VirtualEdgeIteratorState(0, 1, 1, 2, 10,
-                GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, true), "test", Helper.createPointList(51, 0, 51, 1), false);
+                GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 10, true, false), "test", Helper.createPointList(51, 0, 51, 1), false);
         double time = instance.calcWeight(virtEdge, false, 0);
 
         virtEdge.setUnfavored(true);

File: core/src/test/java/com/graphhopper/routing/weighting/ShortFastestWeightingTest.java
Patch:
@@ -38,7 +38,7 @@ public class ShortFastestWeightingTest {
 
     @Test
     public void testShort() {
-        EdgeIteratorState edge = createMockedEdgeIteratorState(10, GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 50, true, true));
+        EdgeIteratorState edge = createMockedEdgeIteratorState(10, GHUtility.setProperties(encodingManager.createEdgeFlags(), encoder, 50, true, false));
         Weighting instance = new ShortFastestWeighting(encoder, 0.03);
         assertEquals(1.02, instance.calcWeight(edge, false, EdgeIterator.NO_EDGE), 1e-8);
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -491,7 +491,7 @@ public void testShortcutCreationAndAccessForManyVehicles() {
         BooleanEncodedValue tmpCarAccessEnc = tmpCar.getAccessEnc();
 
         graph = new GraphHopperStorage(chWeightings, new RAMDirectory(), em, false, new GraphExtension.NoOpExtension()).create(1000);
-        IntsRef edgeFlags = GHUtility.setProperties(em.createEdgeFlags(), tmpCar, 100, true, true);
+        IntsRef edgeFlags = GHUtility.setProperties(em.createEdgeFlags(), tmpCar, 100, true, false);
         graph.edge(0, 1).setDistance(10).setFlags(GHUtility.setProperties(edgeFlags, tmpBike, 10, true, true));
         graph.edge(1, 2).setDistance(10).setFlags(edgeFlags);
 

File: core/src/test/java/com/graphhopper/util/GHUtilityTest.java
Patch:
@@ -199,9 +199,9 @@ public void testZeroValue() {
 //        TIntLongHashMap map2 = new TIntLongHashMap(100, 0.7f, -1, -1);
 //        assertFalse(map2.containsKey(0));
 //        assertFalse(map2.containsValue(0));
-//        map2.put(0, 3);
-//        map2.put(1, 0);
-//        map2.put(2, 1);
+//        map2.add(0, 3);
+//        map2.add(1, 0);
+//        map2.add(2, 1);
 //        assertTrue(map2.containsKey(0));
 //        assertTrue(map2.containsValue(0));
 //        assertEquals(3, map2.get(0));

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.Roundabout;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -51,7 +52,7 @@ public class InstructionListTest {
     public void setUp() {
         carEncoder = new CarFlagEncoder();
         carManager = EncodingManager.create(carEncoder);
-        roundaboutEnc = carManager.getBooleanEncodedValue(EncodingManager.ROUNDABOUT);
+        roundaboutEnc = carManager.getBooleanEncodedValue(Roundabout.KEY);
     }
 
     private List<String> getTurnDescriptions(InstructionList instructionList) {

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.Path;
+import com.graphhopper.routing.profiles.Roundabout;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -137,7 +138,7 @@ public void testScenario() {
 
         // Path is: [0 0-1, 3 1-4, 6 4-7, 9 7-8, 11 8-9, 10 9-10]
         Path p = new Dijkstra(g, new ShortestWeighting(carEncoder), tMode).calcPath(0, 10);
-        InstructionList wayList = p.calcInstructions(carManager.getBooleanEncodedValue(EncodingManager.ROUNDABOUT), usTR);
+        InstructionList wayList = p.calcInstructions(carManager.getBooleanEncodedValue(Roundabout.KEY), usTR);
         Map<String, List<PathDetail>> details = p.calcDetails(Arrays.asList(DETAILS.AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
 
         PathWrapper pathWrapper = new PathWrapper();

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -27,7 +27,7 @@
 import com.graphhopper.Trip;
 import com.graphhopper.gtfs.fare.Fares;
 import com.graphhopper.routing.InstructionsFromEdges;
-import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.profiles.Roundabout;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;
@@ -371,7 +371,7 @@ private List<Trip.Leg> parsePathIntoLegs(List<Label.Transition> path, Graph grap
         } else {
             InstructionList instructions = new InstructionList(tr);
             InstructionsFromEdges instructionsFromEdges = new InstructionsFromEdges(path.get(1).edge.edgeIteratorState.getBaseNode(), graph,
-                    weighting, weighting.getFlagEncoder(), weighting.getFlagEncoder().getBooleanEncodedValue(EncodingManager.ROUNDABOUT), graph.getNodeAccess(), tr, instructions);
+                    weighting, weighting.getFlagEncoder(), weighting.getFlagEncoder().getBooleanEncodedValue(Roundabout.KEY), graph.getNodeAccess(), tr, instructions);
             int prevEdgeId = -1;
             for (int i = 1; i < path.size(); i++) {
                 if (path.get(i).edge.edgeType != GtfsStorage.EdgeType.HIGHWAY) {

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -219,7 +219,7 @@ public void paintComponent(final Graphics2D g2) {
 //
 //                g2.setColor(Color.RED.brighter().brighter());
 //                path = prepare.createAlgo().calcPath(from, to);
-//                System.out.println("now: " + path.toDetailsString());
+//                System.out.println("now: " + path.toFlagEncodersAsString());
 //                plotPath(path, g2, 1);
                 g2.setColor(Color.black);
 

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.coll.GHIntHashSet;
 import com.graphhopper.coll.GHIntObjectHashMap;
 import com.graphhopper.routing.util.AllEdgesIterator;
-import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.QueryResult;

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -104,8 +104,9 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {
     PointList fetchWayGeometry(int mode);
 
     /**
-     * @param list is a sorted collection of nodes between the baseNode and the current adjacent
-     *             node. Specify the list without the adjacent and base nodes.
+     * @param list is a sorted collection of nodes between the base node and the current adjacent node. Specify the list
+     *             without the adjacent and base node. This method can be called multiple times, but if the distance
+     *             changes, the setDistance method is not called automatically.
      */
     EdgeIteratorState setWayGeometry(PointList list);
 

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -654,7 +654,7 @@ public void testSRTMWithTunnelInterpolation() {
                 .setVehicle(vehicle).setWeighting(weightCalcStr));
         PathWrapper arsp = rsp.getBest();
         // Without interpolation: 356.5
-        assertEquals(350.9, arsp.getDistance(), .1);
+        assertEquals(351, arsp.getDistance(), .1);
         PointList pointList = arsp.getPoints();
         assertEquals(6, pointList.getSize());
         assertTrue(pointList.is3D());

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCH.java
Patch:
@@ -65,7 +65,7 @@ private boolean entryIsStallable(SPTEntry entry, IntObjectMap<SPTEntry> bestWeig
         EdgeIterator iter = edgeExplorer.setBaseNode(entry.adjNode);
         while (iter.next()) {
             // no need to inspect the edge we are coming from
-            if (iter.getEdge() == entry.adjNode) {
+            if (iter.getEdge() == entry.edge) {
                 continue;
             }
             int traversalId = traversalMode.createTraversalId(iter, reverse);

File: android/app/src/main/java/com/graphhopper/android/MainActivity.java
Patch:
@@ -184,7 +184,7 @@ boolean isReady() {
             logUser("Preparation still in progress");
             return false;
         }
-        logUser("Prepare finished but hopper not ready. This happens when there was an error while loading the files");
+        logUser("Prepare finished but GraphHopper not ready. This happens when there was an error while loading the files");
         return false;
     }
 

File: core/src/test/java/com/graphhopper/storage/GraphEdgeIdFinderTest.java
Patch:
@@ -124,13 +124,13 @@ public void testBlockAreasWithPolygon() {
         GraphEdgeIdFinder.BlockArea blockArea = graphFinder.parseBlockArea("2,1, 0,2, 2,3", DefaultEdgeFilter.allEdges(encoder), 1000 * 1000);
 
         GHIntHashSet blockedEdges = new GHIntHashSet();
-        blockedEdges.addAll(new int[]{1, 2, 6, 7});
+        blockedEdges.addAll(1, 2, 6, 7);
         assertEquals(blockedEdges, blockArea.blockedEdges);
 
         blockArea = graphFinder.parseBlockArea("2,1, 1,3, 1,2, 0,1", DefaultEdgeFilter.allEdges(encoder), 1000 * 1000);
 
         blockedEdges = new GHIntHashSet();
-        blockedEdges.addAll(new int[]{4, 9, 6, 7});
+        blockedEdges.addAll(4, 9, 6, 7);
         assertEquals(blockedEdges, blockArea.blockedEdges);
     }
 }

File: core/src/test/java/com/graphhopper/routing/ch/CHTurnCostTest.java
Patch:
@@ -569,6 +569,7 @@ public void testFindPath_highlyConnectedGraph_compareWithDijkstra() {
         }
 
         List<Integer> contractionOrder = getRandomIntegerSequence(chGraph.getNodes(), rnd);
+        checkStrict = false;
         compareCHWithDijkstra(numQueries, contractionOrder);
     }
 

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -465,7 +465,7 @@ public static EdgeIteratorState getEdge(Graph graph, int base, int adj) {
     public static int createEdgeKey(int nodeA, int nodeB, int edgeId, boolean reverse) {
         edgeId = edgeId << 1;
         if (reverse)
-            return (nodeA > nodeB) ? edgeId : edgeId + 1;
+            return (nodeA >= nodeB) ? edgeId : edgeId + 1;
         return (nodeA > nodeB) ? edgeId + 1 : edgeId;
     }
 

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -51,7 +51,6 @@ public AStarBidirectionTest(TraversalMode tMode) {
     public static Collection<Object[]> configs() {
         return Arrays.asList(new Object[][]{
                 {TraversalMode.NODE_BASED},
-                {TraversalMode.EDGE_BASED_1DIR},
                 {TraversalMode.EDGE_BASED_2DIR},
                 {TraversalMode.EDGE_BASED_2DIR_UTURN}
         });

File: core/src/test/java/com/graphhopper/routing/AStarTest.java
Patch:
@@ -46,7 +46,6 @@ public AStarTest(TraversalMode tMode) {
     public static Collection<Object[]> configs() {
         return Arrays.asList(new Object[][]{
                 {TraversalMode.NODE_BASED},
-                {TraversalMode.EDGE_BASED_1DIR},
                 {TraversalMode.EDGE_BASED_2DIR},
                 {TraversalMode.EDGE_BASED_2DIR_UTURN}
         });

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -45,7 +45,6 @@ public DijkstraBidirectionRefTest(TraversalMode tMode) {
     public static Collection<Object[]> configs() {
         return Arrays.asList(new Object[][]{
                 {TraversalMode.NODE_BASED},
-                {TraversalMode.EDGE_BASED_1DIR},
                 {TraversalMode.EDGE_BASED_2DIR},
                 {TraversalMode.EDGE_BASED_2DIR_UTURN}
         });

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -45,7 +45,6 @@ public DijkstraTest(TraversalMode tMode) {
     public static Collection<Object[]> configs() {
         return Arrays.asList(new Object[][]{
                 {TraversalMode.NODE_BASED},
-                {TraversalMode.EDGE_BASED_1DIR},
                 {TraversalMode.EDGE_BASED_2DIR},
                 {TraversalMode.EDGE_BASED_2DIR_UTURN}
         });

File: core/src/test/java/com/graphhopper/util/GHUtilityTest.java
Patch:
@@ -170,6 +170,9 @@ public void testEdgeStuff() {
         assertEquals(8, GHUtility.createEdgeKey(1, 2, 4, false));
         assertEquals(9, GHUtility.createEdgeKey(2, 1, 4, false));
 
+        assertEquals(6, GHUtility.createEdgeKey(1, 1, 3, false));
+        assertEquals(6, GHUtility.createEdgeKey(1, 1, 3, true));
+
         assertTrue(GHUtility.isSameEdgeKeys(GHUtility.createEdgeKey(1, 2, 4, false), GHUtility.createEdgeKey(1, 2, 4, false)));
         assertTrue(GHUtility.isSameEdgeKeys(GHUtility.createEdgeKey(2, 1, 4, false), GHUtility.createEdgeKey(1, 2, 4, false)));
         assertFalse(GHUtility.isSameEdgeKeys(GHUtility.createEdgeKey(1, 2, 4, false), GHUtility.createEdgeKey(1, 2, 5, false)));

File: core/src/main/java/com/graphhopper/routing/ch/NodeBasedNodeContractor.java
Patch:
@@ -172,6 +172,7 @@ private long findShortcuts(ShortcutHandler sch) {
                 continue;
 
             final double incomingEdgeWeight = prepareWeighting.calcWeight(incomingEdges, true, EdgeIterator.NO_EDGE);
+            // this check is important to prevent calling calcMillis on inaccessible edges and also allows early exit
             if (Double.isInfinite(incomingEdgeWeight)) {
                 continue;
             }
@@ -360,7 +361,7 @@ public String toString() {
             else
                 str = from + "->";
 
-            return str + to + ", weight:" + weight + " (" + skippedEdge1 + "," + skippedEdge2 + ")";
+            return str + to + ", weight:" + weight + " (" + skippedEdge1 + "," + skippedEdge2 + "), dist: " + dist;
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
Patch:
@@ -49,8 +49,8 @@ public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrN
         if (reverse && !edgeState.getReverse(accessEnc) || !reverse && !edgeState.get(accessEnc))
             throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. " +
                     "(" + edgeState.getBaseNode() + " - " + edgeState.getAdjNode() + ") "
-                            + edgeState.fetchWayGeometry(3) + " " + edgeState.getDistance() + " "
-                            + "Reverse:" + reverse + ", fwd:" + edgeState.get(accessEnc) + ", bwd:" + edgeState.getReverse(accessEnc));
+                    + edgeState.fetchWayGeometry(3) + ", dist: " + edgeState.getDistance() + " "
+                    + "Reverse:" + reverse + ", fwd:" + edgeState.get(accessEnc) + ", bwd:" + edgeState.getReverse(accessEnc) + ", fwd-speed: " + edgeState.get(avSpeedEnc) + ", bwd-speed: " + edgeState.getReverse(avSpeedEnc));
 
         double speed = reverse ? edgeState.getReverse(avSpeedEnc) : edgeState.get(avSpeedEnc);
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -31,7 +31,7 @@
 @Path("isochrone")
 public class IsochroneResource {
 
-    private static final Logger logger = LoggerFactory.getLogger(RouteResource.class);
+    private static final Logger logger = LoggerFactory.getLogger(IsochroneResource.class);
 
     private final GraphHopper graphHopper;
     private final EncodingManager encodingManager;

File: api/src/main/java/com/graphhopper/util/shapes/Polygon.java
Patch:
@@ -100,7 +100,7 @@ public boolean contains(GHPoint point) {
     }
 
     @Override
-    public boolean intersect(Shape o) {
+    public boolean intersects(Shape o) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: api/src/main/java/com/graphhopper/util/shapes/Shape.java
Patch:
@@ -27,7 +27,7 @@ public interface Shape {
     /**
      * @return true if edges or areas of this and the specified shapes overlap
      */
-    boolean intersect(Shape o);
+    boolean intersects(Shape o);
 
     /**
      * @return true only if lat and lon are inside (or on the edge) of this shape

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -87,7 +87,7 @@ public void testAlternativeRoute() {
         path = paths.get(0);
         isBetween(20, 30, path.getPoints().size());
         isBetween(800, 900, path.getDistance());
-        assertTrue("expected: " + path.getDescription().get(0), Arrays.asList("Jacobistraße", "Ludwig-Gercke-Straße", "Eichendorffplatz").contains(path.getDescription().get(0)));
+        assertTrue("expected: " + path.getDescription().get(0), Arrays.asList("Jacobistraße", "Bismarckstraße", "Ludwig-Gercke-Straße", "Eichendorffplatz").contains(path.getDescription().get(0)));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -93,7 +93,7 @@ public void testWayList() {
         assertEquals("continue", tmp.getTurnDescription(tr));
 //        assertEquals("[0, 6]", tmp.get("interval").toString());
         assertEquals(6, tmp.getLength());
-        System.out.println(tmp.getPoints());
+//        System.out.println(tmp.getPoints());
 
 
         tmp = instr.get(1);
@@ -102,7 +102,7 @@ public void testWayList() {
         assertEquals("arrive at destination", tmp.getTurnDescription(tr));
 //        assertEquals("[6, 6]", tmp.get("interval").toString());
         assertEquals(0, tmp.getLength());
-        System.out.println(tmp.getPoints());
+//        System.out.println(tmp.getPoints());
 
         int acc = 0;
         for (Instruction instruction : instr) {

File: api/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -136,7 +136,7 @@ public int size() {
         }
 
         @Override
-        public GHPoint3D toGHPoint(int index) {
+        public GHPoint3D get(int index) {
             throw new UnsupportedOperationException("cannot access EMPTY PointList");
         }
 
@@ -571,7 +571,7 @@ public void parse2DJSON(String str) {
         }
     }
 
-    public GHPoint3D toGHPoint(int index) {
+    public GHPoint3D get(int index) {
         return new GHPoint3D(getLatitude(index), getLongitude(index), getElevation(index));
     }
 
@@ -594,7 +594,7 @@ public GHPoint3D next() {
                 if (counter >= getSize())
                     throw new NoSuchElementException();
 
-                GHPoint3D point = PointList.this.toGHPoint(counter);
+                GHPoint3D point = PointList.this.get(counter);
                 counter++;
                 return point;
             }

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -291,7 +291,7 @@ private double distanceOfSnappedPointToPillarNode(QueryResult o) {
                     }
                 });
 
-                GHPoint3D prevPoint = fullPL.toGHPoint(0);
+                GHPoint3D prevPoint = fullPL.get(0);
                 int adjNode = closestEdge.getAdjNode();
                 int origEdgeKey = GHUtility.createEdgeKey(baseNode, adjNode, closestEdge.getEdge(), false);
                 int origRevEdgeKey = GHUtility.createEdgeKey(baseNode, adjNode, closestEdge.getEdge(), true);
@@ -342,7 +342,7 @@ private double distanceOfSnappedPointToPillarNode(QueryResult o) {
                 if (addedEdges)
                     createEdges(origEdgeKey, origRevEdgeKey,
                             prevPoint, prevWayIndex, false,
-                            fullPL.toGHPoint(fullPL.getSize() - 1), fullPL.getSize() - 2,
+                            fullPL.get(fullPL.getSize() - 1), fullPL.getSize() - 2,
                             fullPL, closestEdge, virtNodeId - 1, adjNode);
 
                 return true;

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -108,7 +108,7 @@ public void doWork(PathWrapper altRsp, List<Path> paths, EncodingManager encodin
                     if (pathIndex + 1 < paths.size()) {
                         ViaInstruction newInstr = new ViaInstruction(fullInstructions.get(fullInstructions.size() - 1));
                         newInstr.setViaCount(pathIndex + 1);
-                        fullInstructions.replaceLast(newInstr);
+                        fullInstructions.set(fullInstructions.size() - 1, newInstr);
                     }
                 }
 

File: core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
Patch:
@@ -193,8 +193,8 @@ public void testMultipleVirtualNodes() {
         assertEquals(3, getPoints(queryGraph, 0, 3).getSize());
         PointList pl = getPoints(queryGraph, 3, 1);
         assertEquals(2, pl.getSize());
-        assertEquals(new GHPoint(1.5, 1.5), pl.toGHPoint(0));
-        assertEquals(new GHPoint(1, 2.5), pl.toGHPoint(1));
+        assertEquals(new GHPoint(1.5, 1.5), pl.get(0));
+        assertEquals(new GHPoint(1, 2.5), pl.get(1));
 
         EdgeIteratorState edge = GHUtility.getEdge(queryGraph, 3, 1);
         assertNotNull(queryGraph.getEdgeIteratorState(edge.getEdge(), 3));

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -194,7 +194,7 @@ private InstructionList getInstructions(Translation tr, List<Trip.Leg> legs) {
                 arrivalPointList.add(arrivalStop.geometry.getY(), arrivalStop.geometry.getX());
                 Instruction arrivalInstruction = new Instruction(Instruction.PT_END_TRIP, arrivalStop.stop_name, InstructionAnnotation.EMPTY, arrivalPointList);
                 if (ptLeg.isInSameVehicleAsPrevious) {
-                    instructions.replaceLast(arrivalInstruction);
+                    instructions.set(instructions.size() - 1, arrivalInstruction);
                 } else {
                     instructions.add(arrivalInstruction);
                 }

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -301,9 +301,9 @@ public void testSortedGraph_noCH() {
                 setAlgorithm(DIJKSTRA_BI)).getBest();
         assertFalse(rsp.hasErrors());
         assertEquals(3, rsp.getPoints().getSize());
-        assertEquals(new GHPoint(51.24921503475044, 9.431716451757769), rsp.getPoints().toGHPoint(0));
-        assertEquals(new GHPoint(52.0, 9.0), rsp.getPoints().toGHPoint(1));
-        assertEquals(new GHPoint(51.199999850988384, 9.39999970197677), rsp.getPoints().toGHPoint(2));
+        assertEquals(new GHPoint(51.24921503475044, 9.431716451757769), rsp.getPoints().get(0));
+        assertEquals(new GHPoint(52.0, 9.0), rsp.getPoints().get(1));
+        assertEquals(new GHPoint(51.199999850988384, 9.39999970197677), rsp.getPoints().get(2));
 
         GHRequest req = new GHRequest(51.2492152, 9.4317166, 51.2, 9.4);
         boolean old = instance.getEncodingManager().isEnableInstructions();

File: core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
Patch:
@@ -157,7 +157,7 @@ public void setMaxExplorationFactor(double explorationFactor) {
     public void setMaxPaths(int maxPaths) {
         this.maxPaths = maxPaths;
         if (this.maxPaths < 2)
-            throw new IllegalStateException("Use normal algorithm with less overhead instead if no alternatives are required");
+            throw new IllegalArgumentException("Use normal algorithm with less overhead instead if no alternatives are required");
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -134,11 +134,11 @@ public float calculatePriority(int node) {
         float priority = params.edgeQuotientWeight * edgeQuotient +
                 params.originalEdgeQuotientWeight * origEdgeQuotient +
                 params.hierarchyDepthWeight * hierarchyDepth;
-        LOGGER.trace("node: %d, eq: %d / %d = %f, oeq: %d / %d = %f, depth: %d --> %f\n",
+        LOGGER.trace(String.format(Locale.ROOT, "node: %d, eq: %d / %d = %f, oeq: %d / %d = %f, depth: %d --> %f\n",
                 node,
                 numShortcuts, numPrevEdges, edgeQuotient,
                 numOrigEdges, numPrevOrigEdges, origEdgeQuotient,
-                hierarchyDepth, priority);
+                hierarchyDepth, priority));
         return priority;
     }
 

File: core/src/main/java/com/graphhopper/routing/weighting/TurnWeighting.java
Patch:
@@ -44,7 +44,7 @@ public class TurnWeighting implements Weighting {
      * @param turnCostExt the turn cost storage to be used
      */
     public TurnWeighting(Weighting superWeighting, TurnCostExtension turnCostExt) {
-        this.turnCostEncoder = (TurnCostEncoder) superWeighting.getFlagEncoder();
+        this.turnCostEncoder = superWeighting.getFlagEncoder();
         this.superWeighting = superWeighting;
         this.turnCostExt = turnCostExt;
 
@@ -57,7 +57,7 @@ public TurnWeighting(Weighting superWeighting, TurnCostExtension turnCostExt) {
      * 'tricking' other turn costs or restrictions.
      */
     public TurnWeighting setDefaultUTurnCost(double costInSeconds) {
-        this.defaultUTurnCost = costInSeconds;
+        defaultUTurnCost = costInSeconds;
         return this;
     }
 

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -386,7 +386,7 @@ public void testNodeContraction_shortcutWeightRounding() {
     @Test
     public void testNodeContraction_preventUnnecessaryShortcutWithLoop() {
         // there should not be shortcuts where one of the skipped edges is a loop at the node to be contracted,
-        // see also #1581
+        // see also #1583
         CarFlagEncoder encoder = new CarFlagEncoder();
         EncodingManager encodingManager = EncodingManager.create(encoder);
         Weighting weighting = new FastestWeighting(encoder);

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -664,7 +664,8 @@ public void testReusingNodeOrdering() {
         int numNodes = 5_000;
         int numQueries = 100;
         long seed = System.nanoTime();
-        GHUtility.buildRandomGraph(ghStorage, seed, numNodes, 1.3, false, false, 0.9, 0.8);
+        Random rnd = new Random(seed);
+        GHUtility.buildRandomGraph(ghStorage, rnd, numNodes, 1.3, true, true, carFlagEncoder.getAverageSpeedEnc(), 0.7, 0.9, 0.8);
         ghStorage.freeze();
 
         // create CH for cars
@@ -685,7 +686,6 @@ public void testReusingNodeOrdering() {
         motorCyclePch.doWork();
 
         // run a few sample queries to check correctness
-        Random rnd = new Random(seed);
         for (int i = 0; i < numQueries; ++i) {
             Dijkstra dijkstra = new Dijkstra(ghStorage, motorCycleWeighting, traversalMode);
             RoutingAlgorithm chAlgo = motorCyclePch.createAlgo(motorCycleCH, AlgorithmOptions.start().weighting(motorCycleWeighting).build());

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -173,8 +173,8 @@ private QueryResult findClosest(GHPoint point, int indexForErrorMessage) {
             if (!source.isValid()) {
                 throw new PointNotFoundException("Cannot find point: " + point, indexForErrorMessage);
             }
-            if (flagEncoder.getEdgeType(source.getClosestEdge()) != GtfsStorage.EdgeType.HIGHWAY) {
-                throw new RuntimeException(flagEncoder.getEdgeType(source.getClosestEdge()).name());
+            if (source.getClosestEdge().get(flagEncoder.getTypeEnc()) != GtfsStorage.EdgeType.HIGHWAY) {
+                throw new RuntimeException(source.getClosestEdge().get(flagEncoder.getTypeEnc()).name());
             }
             return source;
         }
@@ -206,7 +206,7 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
                 if (label.adjNode == startNode) {
                     stationLabels.add(label);
                     break;
-                } else if (label.edge != -1 && flagEncoder.getEdgeType(accessEgressGraphExplorer.getEdgeIteratorState(label.edge, label.parent.adjNode)) == edgeType) {
+                } else if (label.edge != -1 && accessEgressGraphExplorer.getEdgeIteratorState(label.edge, label.parent.adjNode).get(flagEncoder.getTypeEnc()) == edgeType) {
                     stationLabels.add(label);
                 }
             }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/Label.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.reader.gtfs;
 
-import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIteratorState;
 
 import java.time.Instant;
@@ -141,7 +140,7 @@ public Transition next() {
     }
 
     private static EdgeLabel getEdgeLabel(EdgeIteratorState edgeIteratorState, PtFlagEncoder flagEncoder) {
-        return new EdgeLabel(edgeIteratorState, flagEncoder.getEdgeType(edgeIteratorState), edgeIteratorState.get(flagEncoder.getValidityIdEnc()),
+        return new EdgeLabel(edgeIteratorState, edgeIteratorState.get(flagEncoder.getTypeEnc()), edgeIteratorState.get(flagEncoder.getValidityIdEnc()),
                 edgeIteratorState.get(flagEncoder.getTransfersEnc()), edgeIteratorState.getDistance());
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/MultiCriteriaLabelSetting.java
Patch:
@@ -150,7 +150,7 @@ public boolean tryAdvance(Consumer<? super Label> action) {
                 action.accept(label);
                 final IntEncodedValue validityEnc = flagEncoder.getValidityIdEnc();
                 explorer.exploreEdgesAround(label).forEach(edge -> {
-                    GtfsStorage.EdgeType edgeType = flagEncoder.getEdgeType(edge);
+                    GtfsStorage.EdgeType edgeType = edge.get(flagEncoder.getTypeEnc());
                     if (edgeType == GtfsStorage.EdgeType.ENTER_PT && reverse && ptOnly) return;
                     if (edgeType == GtfsStorage.EdgeType.EXIT_PT && !reverse && ptOnly) return;
                     if ((edgeType == GtfsStorage.EdgeType.ENTER_PT || edgeType == GtfsStorage.EdgeType.EXIT_PT) && (blockedRouteTypes & (1 << edge.get(validityEnc))) != 0)

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -385,7 +385,8 @@ public void testNodeContraction_shortcutWeightRounding() {
 
     @Test
     public void testNodeContraction_preventUnnecessaryShortcutWithLoop() {
-        // there should not be shortcuts where one of the skipped edges is a loop at the node to be contracted
+        // there should not be shortcuts where one of the skipped edges is a loop at the node to be contracted,
+        // see also #1581
         CarFlagEncoder encoder = new CarFlagEncoder();
         EncodingManager encodingManager = EncodingManager.create(encoder);
         Weighting weighting = new FastestWeighting(encoder);

File: core/src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -83,7 +83,7 @@ public Path extract() {
         setFromNode(currEdge.adjNode);
         reverseOrder();
         currEdge = edgeTo;
-        int prevEdge = nextEdgeValid ? sptEntry.edge : EdgeIterator.NO_EDGE;
+        int prevEdge = EdgeIterator.Edge.isValid(sptEntry.edge) ? sptEntry.edge : EdgeIterator.NO_EDGE;
         int tmpEdge = currEdge.edge;
         while (EdgeIterator.Edge.isValid(tmpEdge)) {
             currEdge = currEdge.parent;

File: core/src/main/java/com/graphhopper/storage/GraphBuilder.java
Patch:
@@ -95,7 +95,7 @@ public CHGraph chGraphCreate(Weighting singleCHWeighting) {
     /**
      * Default graph is a {@link GraphHopperStorage} with an in memory directory and disabled storing on flush.
      * Afterwards you'll need to call {@link GraphHopperStorage#create} to have a usable object. Better use
-     * {@link GraphHopperStorage#create} directly.
+     * {@link #create} directly.
      */
     public GraphHopperStorage build() {
         Directory dir = mmap ?

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -29,12 +29,12 @@
 import java.util.List;
 
 /**
- * This class merges multiple {@link Path} objects into one continues object that
+ * This class merges multiple {@link Path} objects into one continuous object that
  * can be used in the {@link PathWrapper}. There will be a Path between every waypoint.
  * So for two waypoints there will be only one Path object. For three waypoints there will be
  * two Path objects.
  * <p>
- * The instructions are generated per Path object and are merged into one continues InstructionList.
+ * The instructions are generated per Path object and are merged into one continuous InstructionList.
  * The PointList per Path object are merged and optionally simplified.
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/storage/change/ChangeGraphHelper.java
Patch:
@@ -93,7 +93,7 @@ private long applyChange(JsonFeature jsonFeature, FlagEncoder encoder) {
         BooleanEncodedValue accessEnc = encoder.getAccessEnc();
         DecimalEncodedValue avSpeedEnc = encoder.getAverageSpeedEnc();
         long updates = 0;
-        EdgeFilter filter = DefaultEdgeFilter.allEdges(encoder);
+        EdgeFilter filter = EdgeFilter.ALL_EDGES;
         GHIntHashSet edges = new GHIntHashSet();
         if (jsonFeature.hasGeometry()) {
             graphBrowser.fillEdgeIDs(edges, jsonFeature.getGeometry(), filter);

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -605,7 +605,7 @@ public DecimalEncodedValue getDecimalEncodedValue(String key) {
     }
 
     @Override
-    public <T extends Enum> EnumEncodedValue getEnumEncodedValue(String key, Class<T> enumType) {
+    public <T extends Enum> EnumEncodedValue<T> getEnumEncodedValue(String key, Class<T> enumType) {
         return encodedValueLookup.getEnumEncodedValue(key, enumType);
     }
 

File: core/src/main/java/com/graphhopper/storage/index/QueryResult.java
Patch:
@@ -164,7 +164,7 @@ public void calcSnappedPoint(DistanceCalc distCalc) {
     @Override
     public String toString() {
         if (closestEdge != null)
-            return closestEdge.getBaseNode() + "-" + closestEdge.getAdjNode() + "  " + snappedPoint;
+            return closestEdge.getBaseNode() + "-" + closestEdge.getAdjNode() + "  " + snappedPoint + ", " + queryPoint;
         return closestNode + ", " + queryPoint + ", " + wayIndex;
     }
 

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -198,7 +198,7 @@ public static void buildRandomGraph(Graph graph, long seed, int numNodes, double
                 graph.getNodes(), graph.getAllEdges().length(), minDist, maxDist));
     }
 
-    private static double getDistance(int from, int to, NodeAccess nodeAccess) {
+    public static double getDistance(int from, int to, NodeAccess nodeAccess) {
         double fromLat = nodeAccess.getLat(from);
         double fromLon = nodeAccess.getLon(from);
         double toLat = nodeAccess.getLat(to);

File: core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
Patch:
@@ -162,9 +162,9 @@ void fillVirtualEdges(IntObjectMap<VirtualEdgeIterator> node2Edge, int towerNode
                 super.fillVirtualEdges(node2Edge, towerNode, mainExpl);
                 // ignore nodes should include baseNode == 1
                 if (towerNode == 3)
-                    assertEquals("[3->4]", node2Edge.get(towerNode).toString());
+                    assertEquals("virtual edge: (invalid), all: [3->4]", node2Edge.get(towerNode).toString());
                 else if (towerNode == 1)
-                    assertEquals("[1->4, 1 1-0]", node2Edge.get(towerNode).toString());
+                    assertEquals("virtual edge: (invalid), all: [1->4, 1 1-0]", node2Edge.get(towerNode).toString());
                 else
                     throw new IllegalStateException("not allowed " + towerNode);
             }

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -32,6 +32,7 @@
 import com.graphhopper.util.shapes.GHPoint;
 import io.dropwizard.testing.junit.DropwizardAppRule;
 import org.junit.AfterClass;
+import org.junit.BeforeClass;
 import org.junit.ClassRule;
 import org.junit.Test;
 
@@ -62,9 +63,9 @@ public class RouteResourceTest {
     }
 
     @ClassRule
-    public static final DropwizardAppRule<GraphHopperServerConfiguration> app = new DropwizardAppRule(
-            GraphHopperApplication.class, config);
+    public static final DropwizardAppRule<GraphHopperServerConfiguration> app = new DropwizardAppRule<>(GraphHopperApplication.class, config);
 
+    @BeforeClass
     @AfterClass
     public static void cleanUp() {
         Helper.removeDir(new File(DIR));

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -694,7 +694,7 @@ public boolean getReverse(BooleanEncodedValue property) {
         public final IntsRef getFlags() {
             if (isShortcut())
                 throw new IllegalStateException("Shortcut should not need to return raw flags!");
-            return getFlags();
+            return super.getFlags();
         }
 
         @Override

File: core/src/main/java/com/graphhopper/routing/AbstractBidirectionEdgeCHNoSOD.java
Patch:
@@ -78,7 +78,7 @@ public boolean finished() {
     }
 
     @Override
-    protected void updateBestPath(EdgeIteratorState edgeState, SPTEntry entry, int traversalId, boolean reverse) {
+    protected void updateBestPath(EdgeIteratorState edgeState, SPTEntry entry, int traversalKey, boolean reverse) {
         // special case where the fwd/bwd search runs directly into the opposite node, for example if the highest level
         // node of the shortest path matches the source or target. in this case one of the searches does not contribute
         // anything to the shortest path.
@@ -142,7 +142,7 @@ protected int getIncomingEdge(SPTEntry entry) {
     }
 
     @Override
-    protected int getTraversalId(EdgeIteratorState edge, int origEdgeId, boolean reverse) {
+    protected int getTraversalKey(EdgeIteratorState edge, int origEdgeId, boolean reverse) {
         int baseNode = graph.getOtherNode(origEdgeId, edge.getAdjNode());
         return GHUtility.createEdgeKey(baseNode, edge.getAdjNode(), origEdgeId, reverse);
     }

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCH.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper.routing;
 
 import com.carrotsearch.hppc.IntObjectMap;
-import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.SPTEntry;
@@ -63,8 +62,8 @@ private boolean entryIsStallable(SPTEntry entry, IntObjectMap<SPTEntry> bestWeig
         // reached via a suboptimal path. We do this regardless of the CH level of the adjacent nodes.
         EdgeIterator iter = edgeExplorer.setBaseNode(entry.adjNode);
         while (iter.next()) {
-            int traversalId = traversalMode.createTraversalId(iter, reverse);
-            SPTEntry adjNode = bestWeightMap.get(traversalId);
+            int traversalKey = traversalMode.createTraversalKey(iter, reverse);
+            SPTEntry adjNode = bestWeightMap.get(traversalKey);
             if (adjNode != null &&
                     adjNode.weight + weighting.calcWeight(iter, !reverse, getIncomingEdge(entry)) < entry.weight) {
                 return true;

File: core/src/main/java/com/graphhopper/routing/util/TraversalMode.java
Patch:
@@ -90,7 +90,7 @@ public static TraversalMode fromString(String name) {
      *                  backward searches in bidirectional algorithms.
      * @return the identifier to access the shortest path tree
      */
-    public final int createTraversalId(EdgeIteratorState iterState, boolean reverse) {
+    public final int createTraversalKey(EdgeIteratorState iterState, boolean reverse) {
         if (edgeBased) {
             if (noOfStates == 1)
                 return iterState.getEdge();
@@ -102,9 +102,9 @@ public final int createTraversalId(EdgeIteratorState iterState, boolean reverse)
     }
 
     /**
-     * If you have an EdgeIteratorState the other createTraversalId is preferred!
+     * If you have an EdgeIteratorState the other createTraversalKey is preferred!
      */
-    public final int createTraversalId(int baseNode, int adjNode, int edgeId, boolean reverse) {
+    public final int createTraversalKey(int baseNode, int adjNode, int edgeId, boolean reverse) {
         if (edgeBased) {
             if (noOfStates == 1)
                 return edgeId;

File: tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
Patch:
@@ -44,11 +44,11 @@ public void setGraphics2D(Graphics2D g2) {
     }
 
     @Override
-    public void updateBestPath(EdgeIteratorState edgeState, SPTEntry entry, int traversalId, boolean reverse) {
+    public void updateBestPath(EdgeIteratorState edgeState, SPTEntry entry, int traversalKey, boolean reverse) {
         if (g2 != null) {
-            mg.plotNode(g2, traversalId, Color.YELLOW);
+            mg.plotNode(g2, traversalKey, Color.YELLOW);
         }
-        super.updateBestPath(edgeState, entry, traversalId, reverse);
+        super.updateBestPath(edgeState, entry, traversalKey, reverse);
     }
 
     @Override

File: tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
Patch:
@@ -47,11 +47,11 @@ public void setGraphics2D(Graphics2D g2) {
     }
 
     @Override
-    public void updateBestPath(EdgeIteratorState es, SPTEntry entry, int traversalId, boolean reverse) {
+    public void updateBestPath(EdgeIteratorState es, SPTEntry entry, int traversalKey, boolean reverse) {
         if (g2 != null) {
             mg.plotEdge(g2, na.getLat(entry.parent.adjNode), na.getLon(entry.parent.adjNode), na.getLat(entry.adjNode), na.getLon(entry.adjNode), .8f);
         }
         // System.out.println("new node:" + currLoc);
-        super.updateBestPath(es, entry, traversalId, reverse);
+        super.updateBestPath(es, entry, traversalKey, reverse);
     }
 }

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -118,11 +118,11 @@ public void setGraphics2D(Graphics2D g2) {
                     }
 
                     @Override
-                    public void updateBestPath(EdgeIteratorState es, SPTEntry entry, int traversalId, boolean reverse) {
+                    public void updateBestPath(EdgeIteratorState es, SPTEntry entry, int traversalKey, boolean reverse) {
                         if (g2 != null)
-                            mg.plotNode(g2, traversalId, Color.YELLOW, 6);
+                            mg.plotNode(g2, traversalKey, Color.YELLOW, 6);
 
-                        super.updateBestPath(es, entry, traversalId, reverse);
+                        super.updateBestPath(es, entry, traversalKey, reverse);
                     }
                 }
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -247,7 +247,7 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
                             discoveredSolutions.add(combinedSolution);
                             originalSolutions.put(combinedSolution, label);
                             if (profileQuery) {
-                                highestWeightForDominationTest = router.weight(discoveredSolutions.get(discoveredSolutions.size()-1));
+                                highestWeightForDominationTest = router.weight(discoveredSolutions.get(discoveredSolutions.size() - 1));
                             } else {
                                 highestWeightForDominationTest = discoveredSolutions.stream().filter(s -> !s.impossible && (ignoreTransfers || s.nTransfers <= 1)).mapToLong(router::weight).min().orElse(Long.MAX_VALUE);
                             }
@@ -285,7 +285,7 @@ private List<List<Label.Transition>> findPaths(int startNode, int destNode) {
             visitedNodes += router.getVisitedNodes();
             response.addDebugInfo("routing:" + stopWatch.stop().getSeconds() + "s");
             if (discoveredSolutions.isEmpty() && router.getVisitedNodes() >= maxVisitedNodesForRequest) {
-                throw new IllegalArgumentException("No path found - maximum number of nodes exceeded: " + maxVisitedNodesForRequest);
+                response.addError(new IllegalArgumentException("No path found - maximum number of nodes exceeded: " + maxVisitedNodesForRequest));
             }
             response.getHints().put("visited_nodes.sum", visitedNodes);
             response.getHints().put("visited_nodes.average", visitedNodes);

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -233,7 +233,7 @@ public EncodingManager.Access getAccess(ReaderWay way) {
             if (way.hasTag("route", ferries)) {
                 // if bike is NOT explicitly tagged allow bike but only if foot is not specified
                 String bikeTag = way.getTag("bicycle");
-                if (bikeTag == null && !way.hasTag("foot") || "yes".equals(bikeTag))
+                if (bikeTag == null && !way.hasTag("foot") || intendedValues.contains(bikeTag))
                     accept = EncodingManager.Access.FERRY;
             }
 

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -205,7 +205,7 @@ public EncodingManager.Access getAccess(ReaderWay way) {
 
             if (way.hasTag("route", ferries)) {
                 String footTag = way.getTag("foot");
-                if (footTag == null || "yes".equals(footTag))
+                if (footTag == null || intendedValues.contains(footTag))
                     acceptPotentially = EncodingManager.Access.FERRY;
             }
 

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -379,10 +379,10 @@ public InstructionList calcInstructions(BooleanEncodedValue roundaboutEnc, final
      */
     public Map<String, List<PathDetail>> calcDetails(List<String> requestedPathDetails, PathDetailsBuilderFactory pathBuilderFactory, int previousIndex) {
         if (!isFound() || requestedPathDetails.isEmpty())
-            return Collections.EMPTY_MAP;
+            return Collections.emptyMap();
         List<PathDetailsBuilder> pathBuilders = pathBuilderFactory.createPathDetailsBuilders(requestedPathDetails, encoder, weighting);
         if (pathBuilders.isEmpty())
-            return Collections.EMPTY_MAP;
+            return Collections.emptyMap();
 
         forEveryEdge(new PathDetailsFromEdges(pathBuilders, previousIndex));
 
@@ -399,7 +399,7 @@ public Map<String, List<PathDetail>> calcDetails(List<String> requestedPathDetai
 
     @Override
     public String toString() {
-        return "distance:" + getDistance() + ", edges:" + edgeIds.size();
+        return "found: " + found + ", weight: " + weight + ", time: " + time + ", distance: " + distance + ", edges: " + edgeIds.size();
     }
 
     public String toDetailsString() {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1013,11 +1013,11 @@ public List<Path> calcPaths(GHRequest request, GHResponse ghRsp) {
 
             RoutingTemplate routingTemplate;
             if (ROUND_TRIP.equalsIgnoreCase(algoStr))
-                routingTemplate = new RoundTripRoutingTemplate(request, ghRsp, locationIndex, maxRoundTripRetries);
+                routingTemplate = new RoundTripRoutingTemplate(request, ghRsp, locationIndex, encodingManager, maxRoundTripRetries);
             else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
-                routingTemplate = new AlternativeRoutingTemplate(request, ghRsp, locationIndex);
+                routingTemplate = new AlternativeRoutingTemplate(request, ghRsp, locationIndex, encodingManager);
             else
-                routingTemplate = new ViaRoutingTemplate(request, ghRsp, locationIndex);
+                routingTemplate = new ViaRoutingTemplate(request, ghRsp, locationIndex, encodingManager);
 
             List<Path> altPaths = null;
             int maxRetries = routingTemplate.getMaxRetries();

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -20,6 +20,7 @@
 import com.carrotsearch.hppc.IntArrayList;
 import com.carrotsearch.hppc.IntIndexedContainer;
 import com.graphhopper.coll.GHIntArrayList;
+import com.graphhopper.routing.profiles.BooleanEncodedValue;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
@@ -358,15 +359,15 @@ public void finish() {
     /**
      * @return the list of instructions for this path.
      */
-    public InstructionList calcInstructions(final Translation tr) {
+    public InstructionList calcInstructions(BooleanEncodedValue roundaboutEnc, final Translation tr) {
         final InstructionList ways = new InstructionList(edgeIds.size() / 4, tr);
         if (edgeIds.isEmpty()) {
             if (isFound()) {
                 ways.add(new FinishInstruction(nodeAccess, endNode));
             }
             return ways;
         }
-        forEveryEdge(new InstructionsFromEdges(getFromNode(), graph, weighting, encoder, nodeAccess, tr, ways));
+        forEveryEdge(new InstructionsFromEdges(getFromNode(), graph, weighting, encoder, roundaboutEnc, nodeAccess, tr, ways));
         return ways;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -22,7 +22,6 @@
 
 /**
  * Specifies the settings for cycletouring/trekking
- * <p>
  *
  * @author ratrun
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/routing/util/Car4WDFlagEncoder.java
Patch:
@@ -50,7 +50,7 @@ public Car4WDFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
 
     @Override
     public int getVersion() {
-        return 1;
+        return 2;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -45,7 +45,7 @@ public TestAlgoCollector(String name) {
         this.name = name;
     }
 
-    public TestAlgoCollector assertDistance(AlgoHelperEntry algoEntry, List<QueryResult> queryList,
+    public TestAlgoCollector assertDistance(EncodingManager encodingManager, AlgoHelperEntry algoEntry, List<QueryResult> queryList,
                                             OneRun oneRun) {
         List<Path> altPaths = new ArrayList<>();
         QueryGraph queryGraph = new QueryGraph(algoEntry.getForQueryGraph());
@@ -78,7 +78,7 @@ public TestAlgoCollector assertDistance(AlgoHelperEntry algoEntry, List<QueryRes
                 setSimplifyResponse(false).
                 setEnableInstructions(true);
         PathWrapper rsp = new PathWrapper();
-        pathMerger.doWork(rsp, altPaths, trMap.getWithFallBack(Locale.US));
+        pathMerger.doWork(rsp, altPaths, encodingManager, trMap.getWithFallBack(Locale.US));
 
         if (rsp.hasErrors()) {
             errors.add("response for " + algoEntry + " contains errors. Expected distance: " + oneRun.getDistance()
@@ -97,7 +97,7 @@ public TestAlgoCollector assertDistance(AlgoHelperEntry algoEntry, List<QueryRes
         if (Math.abs(rsp.getDistance() - oneRun.getDistance()) > 2) {
             errors.add(algoEntry + " returns path not matching the expected distance of " + oneRun.getDistance()
                     + "\t Returned was " + rsp.getDistance() + "\t (expected points " + oneRun.getLocs()
-                    + ", was " + pointList.getSize() + ") " + queryList);
+                    + ", was " + pointList.getSize() + ") " + "\t (weight " + rsp.getRouteWeight() + ") " + queryList);
         }
 
         // There are real world instances where A-B-C is identical to A-C (in meter precision).

File: core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
Patch:
@@ -19,7 +19,6 @@
 
 /**
  * Encodes and decodes a turn restriction and turn costs within a integer flag
- * <p>
  *
  * @author Karl Hübner
  */

File: core/src/main/java/com/graphhopper/routing/weighting/FastestWeighting.java
Patch:
@@ -58,14 +58,14 @@ public double getMinWeight(double distance) {
 
     @Override
     public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-        double speed = reverse ? flagEncoder.getReverseSpeed(edge.getFlags()) : flagEncoder.getSpeed(edge.getFlags());
+        double speed = reverse ? edge.getReverse(avSpeedEnc) : edge.get(avSpeedEnc);
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
 
         double time = edge.getDistance() / speed * SPEED_CONV;
 
         // add direction penalties at start/stop/via points
-        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
+        boolean unfavoredEdge = edge.get(EdgeIteratorState.UNFAVORED_EDGE);
         if (unfavoredEdge)
             time += headingPenalty;
 
@@ -76,7 +76,7 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
     public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
         // TODO move this to AbstractWeighting?
         long time = 0;
-        boolean unfavoredEdge = edgeState.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
+        boolean unfavoredEdge = edgeState.get(EdgeIteratorState.UNFAVORED_EDGE);
         if (unfavoredEdge)
             time += headingPenaltyMillis;
 

File: core/src/main/java/com/graphhopper/routing/weighting/GenericWeighting.java
Patch:
@@ -75,9 +75,9 @@ public double getMinWeight(double distance) {
     public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
         // handle oneways and removed edges via subnetwork removal (existing and allowed highway tags but 'island' edges)
         if (reverse) {
-            if (!gEncoder.isBackward(edgeState, accessType))
+            if (!edgeState.getReverse(accessEnc))
                 return Double.POSITIVE_INFINITY;
-        } else if (!gEncoder.isForward(edgeState, accessType)) {
+        } else if (!edgeState.get(accessEnc)) {
             return Double.POSITIVE_INFINITY;
         }
 
@@ -124,7 +124,7 @@ public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrN
         long timeInMillis = (long) (edgeState.getDistance() / speed * SPEED_CONV);
 
         // add direction penalties at start/stop/via points
-        boolean unfavoredEdge = edgeState.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
+        boolean unfavoredEdge = edgeState.get(EdgeIteratorState.UNFAVORED_EDGE);
         if (unfavoredEdge)
             timeInMillis += headingPenaltyMillis;
 

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -335,7 +335,7 @@ IntArrayList getEntries() {
         return IntArrayList.from(entries);
     }
 
-    // fillIDs according to how they are stored
+    // fill node IDs according to how they are stored
     final void fillIDs(long keyPart, int intIndex, GHIntHashSet set, int depth) {
         long pointer = (long) intIndex << 2;
         if (depth == entries.length) {

File: core/src/test/java/com/graphhopper/routing/ch/PrepareEncoderTest.java
Patch:
@@ -30,9 +30,9 @@ public class PrepareEncoderTest {
 
     @Test
     public void testOverwrite() {
-        long forward = PrepareEncoder.getScFwdDir();
-        long backward = PrepareEncoder.getScFwdDir() ^ PrepareEncoder.getScDirMask();
-        long both = PrepareEncoder.getScDirMask();
+        int forward = PrepareEncoder.getScFwdDir();
+        int backward = PrepareEncoder.getScFwdDir() ^ PrepareEncoder.getScDirMask();
+        int both = PrepareEncoder.getScDirMask();
         assertEquals(1, PrepareEncoder.getScMergeStatus(forward, forward));
         assertEquals(1, PrepareEncoder.getScMergeStatus(backward, backward));
         assertEquals(2, PrepareEncoder.getScMergeStatus(forward, both));

File: core/src/test/java/com/graphhopper/routing/util/Car4WDFlagEncoderTest.java
Patch:
@@ -17,15 +17,15 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.ReaderNode;
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.util.Helper;
 import org.junit.Test;
 
 import java.text.DateFormat;
 import java.util.Date;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 
 /**
  * @author Peter Karich

File: core/src/test/java/com/graphhopper/routing/util/DefaultEdgeFilterTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.graphhopper.storage.CHGraph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.CHEdgeExplorer;
 import com.graphhopper.util.CHEdgeIterator;
 import com.graphhopper.util.CHEdgeIteratorState;
@@ -70,7 +71,7 @@ public void testAccept_fwdLoopShortcut_acceptedByInExplorer() {
 
     private void addShortcut(CHGraph chGraph, int from, int to, boolean fwd, int firstOrigEdge, int lastOrigEdge) {
         CHEdgeIteratorState shortcut = chGraph.shortcut(from, to);
-        shortcut.setFlags(fwd ? PrepareEncoder.getScFwdDir() : PrepareEncoder.getScBwdDir());
+        shortcut.setFlagsAndWeight(fwd ? PrepareEncoder.getScFwdDir() : PrepareEncoder.getScBwdDir(), 0);
         shortcut.setFirstAndLastOrigEdges(firstOrigEdge, lastOrigEdge);
     }
 

File: core/src/test/java/com/graphhopper/routing/weighting/GenericWeightingTest.java
Patch:
@@ -66,7 +66,7 @@ public void setUp() {
         graph.edge(0, 1, 1, true);
         AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 0, 0.00, 0.00);
         AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 1, 0.01, 0.01);
-        graph.getEdgeIteratorState(0, 1).setFlags(encoder.handleWayTags(way, 1, 0));
+        graph.getEdgeIteratorState(0, 1).setFlags(encoder.handleWayTags(em.createEdgeFlags(), way, 1, 0));
     }
 
     @Test
@@ -101,7 +101,7 @@ public void testDisabledRoadAttributes() {
         simpleGraph.edge(0, 1, 1, true);
         AbstractRoutingAlgorithmTester.updateDistancesFor(simpleGraph, 0, 0.00, 0.00);
         AbstractRoutingAlgorithmTester.updateDistancesFor(simpleGraph, 1, 0.01, 0.01);
-        simpleGraph.getEdgeIteratorState(0, 1).setFlags(simpleEncoder.handleWayTags(way, 1, 0));
+        simpleGraph.getEdgeIteratorState(0, 1).setFlags(simpleEncoder.handleWayTags(simpleEncodingManager.createEdgeFlags(), way, 1, 0));
 
         Weighting instance = new GenericWeighting(simpleEncoder, new HintsMap().put(GenericWeighting.HEIGHT_LIMIT, 5.0));
         EdgeIteratorState edge = simpleGraph.getEdgeIteratorState(0, 1);

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java
Patch:
@@ -32,7 +32,7 @@ public void testLoad() {
         graph.edge(0, 1, 1, true);
         AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 0, 0.00, 0.00);
         AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 1, 0.01, 0.01);
-        graph.getEdgeIteratorState(0, 1).setFlags(carFlagEncoder.handleWayTags(way_0_1, 1, 0));
+        graph.getEdgeIteratorState(0, 1).setFlags(carFlagEncoder.handleWayTags(encodingManager.createEdgeFlags(), way_0_1, 1, 0));
 
         // 1-2
         ReaderWay way_1_2 = new ReaderWay(28l);
@@ -41,7 +41,7 @@ public void testLoad() {
 
         graph.edge(1, 2, 1, true);
         AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 2, 0.02, 0.02);
-        graph.getEdgeIteratorState(1, 2).setFlags(carFlagEncoder.handleWayTags(way_1_2, 1, 0));
+        graph.getEdgeIteratorState(1, 2).setFlags(carFlagEncoder.handleWayTags(encodingManager.createEdgeFlags(), way_1_2, 1, 0));
 
         graph.flush();
         graph.close();

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -135,7 +135,7 @@ public void testScenario() {
 
         // Path is: [0 0-1, 3 1-4, 6 4-7, 9 7-8, 11 8-9, 10 9-10]
         Path p = new Dijkstra(g, new ShortestWeighting(carEncoder), tMode).calcPath(0, 10);
-        InstructionList wayList = p.calcInstructions(usTR);
+        InstructionList wayList = p.calcInstructions(carManager.getBooleanEncodedValue(EncodingManager.ROUNDABOUT), usTR);
         Map<String, List<PathDetail>> details = p.calcDetails(Arrays.asList(DETAILS.AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
 
         PathWrapper pathWrapper = new PathWrapper();

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/Label.java
Patch:
@@ -141,7 +141,8 @@ public Transition next() {
     }
 
     private static EdgeLabel getEdgeLabel(EdgeIteratorState edgeIteratorState, PtFlagEncoder flagEncoder) {
-        return new EdgeLabel(edgeIteratorState, flagEncoder.getEdgeType(edgeIteratorState.getFlags()), flagEncoder.getValidityId(edgeIteratorState.getFlags()), flagEncoder.getTransfers(edgeIteratorState.getFlags()), edgeIteratorState.getDistance());
+        return new EdgeLabel(edgeIteratorState, flagEncoder.getEdgeType(edgeIteratorState), edgeIteratorState.get(flagEncoder.getValidityIdEnc()),
+                edgeIteratorState.get(flagEncoder.getTransfersEnc()), edgeIteratorState.getDistance());
     }
 
 }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -27,6 +27,7 @@
 import com.graphhopper.Trip;
 import com.graphhopper.gtfs.fare.Fares;
 import com.graphhopper.routing.InstructionsFromEdges;
+import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.*;
 import org.locationtech.jts.geom.Coordinate;
@@ -379,7 +380,7 @@ private List<Trip.Leg> parsePathIntoLegs(List<Label.Transition> path, GraphExplo
         } else {
             InstructionList instructions = new InstructionList(tr);
             InstructionsFromEdges instructionsFromEdges = new InstructionsFromEdges(path.get(1).edge.edgeIteratorState.getBaseNode(), graph.getGraph(),
-                    weighting, weighting.getFlagEncoder(), graph.getNodeAccess(), tr, instructions);
+                    weighting, weighting.getFlagEncoder(), weighting.getFlagEncoder().getBooleanEncodedValue(EncodingManager.ROUNDABOUT), graph.getNodeAccess(), tr, instructions);
             int prevEdgeId = -1;
             for (int i = 1; i < path.size(); i++) {
                 if (path.get(i).edge.edgeType != GtfsStorage.EdgeType.HIGHWAY) {

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -65,7 +65,7 @@ public class RealtimeIT {
     public static void init() {
         Helper.removeDir(new File(GRAPH_LOC));
         final PtFlagEncoder ptFlagEncoder = new PtFlagEncoder();
-        EncodingManager encodingManager = new EncodingManager(Arrays.asList(new CarFlagEncoder(), new FootFlagEncoder(), ptFlagEncoder), 8);
+        EncodingManager encodingManager = new EncodingManager(Arrays.asList(new CarFlagEncoder(), ptFlagEncoder, new FootFlagEncoder()), 8);
         GHDirectory directory = GraphHopperGtfs.createGHDirectory(GRAPH_LOC);
         GtfsStorage gtfsStorage = GraphHopperGtfs.createGtfsStorage();
         graphHopperStorage = GraphHopperGtfs.createOrLoad(directory, encodingManager, ptFlagEncoder, gtfsStorage, Collections.singleton("files/sample-feed.zip"), Collections.emptyList());

File: web/src/test/java/com/graphhopper/http/isochrone/PtIsochroneResourceTest.java
Patch:
@@ -65,7 +65,7 @@ public class PtIsochroneResourceTest {
         final CarFlagEncoder carFlagEncoder = new CarFlagEncoder();
         final FootFlagEncoder footFlagEncoder = new FootFlagEncoder();
 
-        EncodingManager encodingManager = new EncodingManager(Arrays.asList(carFlagEncoder, footFlagEncoder, ptFlagEncoder), 8);
+        EncodingManager encodingManager = new EncodingManager(Arrays.asList(carFlagEncoder, footFlagEncoder, ptFlagEncoder), 12);
         GHDirectory directory = GraphHopperGtfs.createGHDirectory(GRAPH_LOC);
         GtfsStorage gtfsStorage = GraphHopperGtfs.createGtfsStorage();
         graphHopperStorage = GraphHopperGtfs.createOrLoad(directory, encodingManager, ptFlagEncoder, gtfsStorage, Collections.singleton("../reader-gtfs/files/sample-feed.zip"), Collections.emptyList());

File: core/src/main/java/com/graphhopper/reader/dem/CGIARProvider.java
Patch:
@@ -54,7 +54,7 @@ public CGIARProvider() {
 
     public CGIARProvider(String cacheDir) {
         // Alternative URLs for the CGIAR data can be found in #346
-        super("http://srtm.csi.cgiar.org/SRT-ZIP/SRTM_V41/SRTM_Data_GeoTiff",
+        super("http://srtm.csi.cgiar.org/wp-content/uploads/files/srtm_5x5/TIFF/",
                 cacheDir.isEmpty() ? "/tmp/cgiar" : cacheDir,
                 "GraphHopper CGIARReader",
                 6000, 6000,

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -81,7 +81,7 @@ public void initStorage() {
             @Override
             public void freeze() {
                 for (CHGraphImpl cg : getAllCHGraphs()) {
-                    cg._freeze();
+                    cg._prepareForContraction();
                 }
             }
         };
@@ -326,6 +326,7 @@ private List<String> parseList(String listStr) {
     @Override
     public void flush() {
         for (CHGraphImpl cg : getAllCHGraphs()) {
+            cg.setNodesHeader();
             cg.setEdgesHeader();
             cg.flush();
         }

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -87,7 +87,7 @@ public void testAlternativeRoute() {
         path = paths.get(0);
         isBetween(20, 30, path.getPoints().size());
         isBetween(800, 900, path.getDistance());
-        assertTrue("expected: " + path.getDescription().get(0), Arrays.asList("Jacobistraße", "Ludwig-Gercke-Straße").contains(path.getDescription().get(0)));
+        assertTrue("expected: " + path.getDescription().get(0), Arrays.asList("Jacobistraße", "Ludwig-Gercke-Straße", "Eichendorffplatz").contains(path.getDescription().get(0)));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/EdgeFilter.java
Patch:
@@ -21,12 +21,11 @@
 
 /**
  * Class used to traverse a graph.
- * <p>
  *
  * @author Peter Karich
  */
 public interface EdgeFilter {
-    static final EdgeFilter ALL_EDGES = new EdgeFilter() {
+    EdgeFilter ALL_EDGES = new EdgeFilter() {
         @Override
         public final boolean accept(EdgeIteratorState edgeState) {
             return true;

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
Patch:
@@ -42,7 +42,9 @@ public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrN
         long flags = edgeState.getFlags();
         if (reverse && !flagEncoder.isBackward(flags)
                 || !reverse && !flagEncoder.isForward(flags))
-            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
+            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. " +
+                    "(" + edgeState.getBaseNode() + " - " + edgeState.getAdjNode() + ") "
+                    + edgeState.fetchWayGeometry(3) + " " + edgeState.getDistance() + " "
                     + "Reverse:" + reverse + ", fwd:" + flagEncoder.isForward(flags) + ", bwd:" + flagEncoder.isBackward(flags));
 
         double speed = reverse ? flagEncoder.getReverseSpeed(flags) : flagEncoder.getSpeed(flags);

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/Isochrone.java
Patch:
@@ -198,7 +198,7 @@ private void searchInternal(int from) {
                 double tmpWeight = weighting.calcWeight(iter, reverseFlow, currEdge.edge) + currEdge.weight;
                 if (Double.isInfinite(tmpWeight))
                     continue;
-                
+
                 double tmpDistance = iter.getDistance() + currEdge.distance;
                 long tmpTime = weighting.calcMillis(iter, reverseFlow, currEdge.edge) + currEdge.time;
                 int tmpNode = iter.getAdjNode();

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -246,7 +246,7 @@ public void testPathDetailsWithoutGraphHopperWeb() throws Exception {
         int firstLink = edgeIds.get(0).get(2).asInt();
         int lastLink = edgeIds.get(edgeIds.size() - 1).get(2).asInt();
         assertEquals(880, firstLink);
-        assertEquals(1420, lastLink);
+        assertEquals(1421, lastLink);
     }
 
     @Test

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -87,7 +87,7 @@ public void testAlternativeRoute() {
         path = paths.get(0);
         isBetween(20, 30, path.getPoints().size());
         isBetween(800, 900, path.getDistance());
-        assertTrue("expected: " + path.getDescription().get(0), Arrays.asList("Jacobistraße", "Ludwig-Gercke-Straße").contains(path.getDescription().get(0)));
+        assertTrue("expected: " + path.getDescription().get(0), Arrays.asList("Jacobistraße", "Ludwig-Gercke-Straße", "Eichendorffplatz").contains(path.getDescription().get(0)));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -52,7 +52,6 @@ public static DefaultEdgeFilter allEdges(FlagEncoder flagEncoder) {
 
     @Override
     public final boolean accept(EdgeIteratorState iter) {
-        if(iter.getBaseNode() == iter.getAdjNode()) throw new IllegalStateException("loop cannot happen");//return iter.isForward(encoder) || iter.isBackward(encoder);
         return fwd && iter.isForward(encoder) || bwd && iter.isBackward(encoder);
     }
 

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -660,7 +660,7 @@ Collection<EdgeIteratorState> addOSMWay(final LongIndexedContainer osmNodeIds, f
                         newEdges.add(addEdge(firstNode, newEndNode, pointList, flags, wayOsmId));
                         pointList.clear();
                         pointList.add(nodeAccess, newEndNode);
-                        tmpNode = firstNode;
+                        firstNode = newEndNode;
                     }
 
                     pointList.add(nodeAccess, tmpNode);

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -246,7 +246,7 @@ public void testPathDetailsWithoutGraphHopperWeb() throws Exception {
         int firstLink = edgeIds.get(0).get(2).asInt();
         int lastLink = edgeIds.get(edgeIds.size() - 1).get(2).asInt();
         assertEquals(880, firstLink);
-        assertEquals(1420, lastLink);
+        assertEquals(1421, lastLink);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -52,6 +52,7 @@ public static DefaultEdgeFilter allEdges(FlagEncoder flagEncoder) {
 
     @Override
     public final boolean accept(EdgeIteratorState iter) {
+        if(iter.getBaseNode() == iter.getAdjNode()) return iter.isForward(encoder) || iter.isBackward(encoder);
         return fwd && iter.isForward(encoder) || bwd && iter.isBackward(encoder);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -57,7 +57,7 @@ public final boolean accept(EdgeIteratorState iter) {
             // background: we need to explicitly accept shortcut edges that are loops, because if we insert a loop
             // shortcut with the fwd flag a DefaultEdgeFilter with bwd=true and fwd=false does not find it, although 
             // it is also an 'incoming' edge.
-            return true;
+            return iter.isForward(encoder) || iter.isBackward(encoder);
         }
         return fwd && iter.isForward(encoder) || bwd && iter.isBackward(encoder);
     }

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -563,7 +563,7 @@ private void writeSummary(String summaryLocation, String propLocation) {
                 "graph.edges",
                 "measurement.seed",
                 CH.PREPARE + "time",
-                CH.PREPARE + "shortcuts",
+                CH.PREPARE + "node.shortcuts",
                 CH.PREPARE + "edge.shortcuts",
                 "routing.distance_mean",
                 "routing.mean",

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/GeneralError.java
Patch:
@@ -36,6 +36,7 @@ public class GeneralError extends GTFSError implements Serializable {
 
     public GeneralError(String file, long line, String field, String message) {
         super(file, line, field);
+        this.message = message;
     }
 
     @Override public String getMessage() {

File: core/src/main/java/com/graphhopper/routing/ch/CHEntry.java
Patch:
@@ -25,7 +25,7 @@
 public class CHEntry extends SPTEntry {
     /**
      * The id of the incoming original edge at this shortest path tree entry. For original edges this is the same
-     * as the edge id, but for shortcuts this the id of the last original edge of the shortcut.
+     * as the edge id, but for shortcuts this is the id of the last original edge of the shortcut.
      *
      * @see CHEdgeIteratorState#setFirstAndLastOrigEdges(int, int)
      * @see EdgeIteratorState#getOrigEdgeLast()

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -91,7 +91,7 @@ public void init(CmdArgs args) {
             setDisablingAllowed(args.getBool(CH.INIT_DISABLING_ALLOWED, isDisablingAllowed()));
 
         String edgeBasedCHStr = args.get(CH.PREPARE + "edge_based", "off");
-        edgeBasedCHMode = EdgeBasedCHMode.valueOf(edgeBasedCHStr.trim().toUpperCase());
+        edgeBasedCHMode = EdgeBasedCHMode.valueOf(edgeBasedCHStr.trim().toUpperCase(Locale.ROOT));
 
         pMap = args;
     }

File: core/src/main/java/com/graphhopper/routing/ch/WitnessPathSearcher.java
Patch:
@@ -28,6 +28,7 @@
 import com.graphhopper.util.*;
 
 import java.util.Arrays;
+import java.util.Locale;
 
 import static com.graphhopper.routing.ch.CHParameters.*;
 import static com.graphhopper.util.EdgeIterator.NO_EDGE;
@@ -506,7 +507,7 @@ static class Stats {
 
         @Override
         public String toString() {
-            return String.format(
+            return String.format(Locale.ROOT,
                     "limit-exhaustion: %s %%, avg-settled: %s, avg-max-settled: %s, avg-polled-edges: %s",
                     quotient(numSettledEdges * 100, maxNumSettledEdges),
                     quotient(numSettledEdges, numSearches),
@@ -515,7 +516,7 @@ public String toString() {
         }
 
         private String quotient(long a, long b) {
-            return b == 0 ? "NaN" : String.format("%5.1f", a / ((double) b));
+            return b == 0 ? "NaN" : String.format(Locale.ROOT, "%5.1f", a / ((double) b));
         }
 
         void reset() {

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -436,7 +436,7 @@ public void debugPrint() {
         String formatShortcuts = "%12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s\n";
         System.out.format(Locale.ROOT, formatShortcuts, "#", "E_NODEA", "E_NODEB", "E_LINKA", "E_LINKB", "E_DIST", "E_FLAGS", "S_SKIP_EDGE1", "S_SKIP_EDGE2", "S_ORIG_FIRST", "S_ORIG_LAST");
         for (int i = baseGraph.edgeCount; i < baseGraph.edgeCount + Math.min(shortcutCount, printMax); ++i) {
-            System.out.format(formatShortcuts, i,
+            System.out.format(Locale.ROOT, formatShortcuts, i,
                     shortcuts.getInt(chEdgeAccess.toPointer(i) + chEdgeAccess.E_NODEA),
                     shortcuts.getInt(chEdgeAccess.toPointer(i) + chEdgeAccess.E_NODEB),
                     shortcuts.getInt(chEdgeAccess.toPointer(i) + chEdgeAccess.E_LINKA),

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/GeneralError.java
Patch:
@@ -36,6 +36,7 @@ public class GeneralError extends GTFSError implements Serializable {
 
     public GeneralError(String file, long line, String field, String message) {
         super(file, line, field);
+        this.message = message;
     }
 
     @Override public String getMessage() {

File: api/src/main/java/com/graphhopper/util/shapes/GHPoint.java
Patch:
@@ -20,6 +20,8 @@
 import com.graphhopper.util.NumHelper;
 import org.locationtech.jts.geom.Point;
 
+import java.util.Locale;
+
 /**
  * @author Peter Karich
  */
@@ -104,7 +106,7 @@ public String toString() {
     }
 
     public String toShortString() {
-        return String.format("%.8f,%.8f", lat, lon);
+        return String.format(Locale.ROOT, "%.8f,%.8f", lat, lon);
     }
 
     /**

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperGeocodingIT.java
Patch:
@@ -47,7 +47,8 @@ public void testExtent() {
     @Test
     public void testForwardGeocodingNominatim() {
         GHGeocodingResponse response = geocoding.geocode(new GHGeocodingRequest(false, null, "Berlin", "en", 5, "nominatim", 5000));
-        assertEquals(4, response.getHits().size());
+        int size = response.getHits().size();
+        assertTrue("Unexpected response hit count " + size, size == 4 || size == 5);
         assertTrue(response.getHits().get(0).getName().contains("Berlin"));
     }
 

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -69,8 +69,8 @@ public class CHGraphImpl implements CHGraph, Storable<CHGraph> {
         this.weighting = w;
         this.baseGraph = baseGraph;
         final String name = AbstractWeighting.weightingToFileName(w);
-        this.nodesCH = dir.find("nodes_ch_" + name);
-        this.shortcuts = dir.find("shortcuts_" + name);
+        this.nodesCH = dir.find("nodes_ch_" + name, DAType.getPreferredInt(dir.getDefaultType()));
+        this.shortcuts = dir.find("shortcuts_" + name, DAType.getPreferredInt(dir.getDefaultType()));
         this.chEdgeAccess = new EdgeAccess(shortcuts, baseGraph.bitUtil) {
             @Override
             final EdgeIterable createSingleEdge(EdgeFilter edgeFilter) {

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java
Patch:
@@ -181,7 +181,7 @@ public void testEnsureSize() {
         Directory dir = new RAMDirectory();
         graph = newGHStorage(dir, false).create(defaultSize);
         int roughEdgeRowLength = 4 * 8;
-        int testIndex = dir.find("edges").getSegmentSize() * 3 / roughEdgeRowLength;
+        int testIndex = dir.find("edges", DAType.RAM_INT).getSegmentSize() * 3 / roughEdgeRowLength;
         // we need a big node index to trigger multiple segments, but low enough to avoid OOM
         graph.edge(0, testIndex, 10, true);
 

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperGeocodingIT.java
Patch:
@@ -47,7 +47,7 @@ public void testExtent() {
     @Test
     public void testForwardGeocodingNominatim() {
         GHGeocodingResponse response = geocoding.geocode(new GHGeocodingRequest(false, null, "Berlin", "en", 5, "nominatim", 5000));
-        assertEquals(5, response.getHits().size());
+        assertEquals(4, response.getHits().size());
         assertTrue(response.getHits().get(0).getName().contains("Berlin"));
     }
 

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionEdgeCHTest.java
Patch:
@@ -25,6 +25,7 @@
 import com.graphhopper.storage.*;
 import com.graphhopper.util.Parameters;
 
+import java.util.Collections;
 import java.util.List;
 
 public class AStarBidirectionEdgeCHTest extends AbstractRoutingAlgorithmTester {
@@ -43,7 +44,7 @@ protected CHGraph getGraph(GraphHopperStorage ghStorage, Weighting weighting) {
     @Override
     protected GraphHopperStorage createGHStorage(
             EncodingManager em, List<? extends Weighting> weightings, boolean is3D) {
-        return new GraphHopperStorage(weightings, new RAMDirectory(), em, is3D, new TurnCostExtension()).create(1000);
+        return new GraphHopperStorage(Collections.<Weighting>emptyList(), weightings, new RAMDirectory(), em, is3D, new TurnCostExtension()).create(1000);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionEdgeCHTest.java
Patch:
@@ -23,6 +23,7 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
 
+import java.util.Collections;
 import java.util.List;
 
 public class DijkstraBidirectionEdgeCHTest extends AbstractRoutingAlgorithmTester {
@@ -34,7 +35,7 @@ protected CHGraph getGraph(GraphHopperStorage ghStorage, Weighting weighting) {
     @Override
     protected GraphHopperStorage createGHStorage(
             EncodingManager em, List<? extends Weighting> weightings, boolean is3D) {
-        return new GraphHopperStorage(weightings, new RAMDirectory(),
+        return new GraphHopperStorage(Collections.<Weighting>emptyList(), weightings, new RAMDirectory(),
                 em, is3D, new TurnCostExtension()).create(1000);
     }
 

File: core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java
Patch:
@@ -84,7 +84,7 @@ public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevO
     public void testSetGetWeight() {
         ghStorage.edge(0, 1, 40, true);
         Directory dir = new RAMDirectory();
-        DataAccess da = dir.find("landmarks_fastest_car");
+        DataAccess da = dir.find("landmarks_fastest_car_node");
         da.create(2000);
 
         LandmarkStorage lms = new LandmarkStorage(ghStorage, dir, new FastestWeighting(encoder), 4).

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -1062,7 +1062,9 @@ public void testCHOnOffWithTurnCosts() {
                 setCHEnabled(true).
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager("car|turn_costs=true"));
-        tmpHopper.getCHFactoryDecorator().setDisablingAllowed(true);
+        tmpHopper.getCHFactoryDecorator()
+                .setEdgeBasedCHMode(CHAlgoFactoryDecorator.EdgeBasedCHMode.EDGE_OR_NODE)
+                .setDisablingAllowed(true);
         tmpHopper.importOrLoad();
 
         // with CH

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -168,7 +168,7 @@ public void testLoadingWithDifferentCHConfig_issue471() {
             gh.load(ghLoc);
             fail();
         } catch (Exception ex) {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Configured graph.ch.weightings:"));
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("You loaded a CH graph, but you did not specify graph.ch.weightings"));
         }
 
         Helper.removeDir(new File(ghLoc));
@@ -190,7 +190,7 @@ public void testLoadingWithDifferentCHConfig_issue471() {
             gh.load(ghLoc);
             fail();
         } catch (Exception ex) {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Configured graph.ch.weightings:"));
+            assertTrue(ex.getMessage(), ex.getMessage().contains("is not contained in loaded weightings"));
         }
     }
 

File: api/src/main/java/com/graphhopper/json/geo/JsonFeatureCollection.java
Patch:
@@ -17,14 +17,15 @@
  */
 package com.graphhopper.json.geo;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
  * @author Peter Karich
  */
 public class JsonFeatureCollection {
-    String type;
-    List<JsonFeature> features;
+    String type = "FeatureCollection";
+    List<JsonFeature> features = new ArrayList<>();
 
     public String getType() {
         return type;

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ContourBuilder.java
Patch:
@@ -107,8 +107,8 @@ private Coordinate moveEpsilonTowards(Coordinate coordinate, Coordinate distantF
     }
 
     private int cut(double za, double zb, double z0) {
-        if (za < z0 && zb > z0) return 1;
-        if (za > z0 && zb < z0) return -1;
+        if (za <= z0 && zb > z0) return 1;
+        if (za > z0 && zb <= z0) return -1;
         return 0;
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
Patch:
@@ -38,7 +38,7 @@
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 
-final class GraphExplorer {
+public final class GraphExplorer {
 
     private final EdgeExplorer edgeExplorer;
     private final PtFlagEncoder flagEncoder;
@@ -54,7 +54,7 @@ final class GraphExplorer {
     private double walkSpeedKmH;
 
 
-    GraphExplorer(Graph graph, Weighting accessEgressWeighting, PtFlagEncoder flagEncoder, GtfsStorage gtfsStorage, RealtimeFeed realtimeFeed, boolean reverse, List<VirtualEdgeIteratorState> extraEdges, boolean walkOnly, double walkSpeedKmh) {
+    public GraphExplorer(Graph graph, Weighting accessEgressWeighting, PtFlagEncoder flagEncoder, GtfsStorage gtfsStorage, RealtimeFeed realtimeFeed, boolean reverse, List<VirtualEdgeIteratorState> extraEdges, boolean walkOnly, double walkSpeedKmh) {
         this.graph = graph;
         this.accessEgressWeighting = accessEgressWeighting;
         DefaultEdgeFilter accessEgressIn = DefaultEdgeFilter.inEdges(accessEgressWeighting.getFlagEncoder());

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
Patch:
@@ -104,7 +104,7 @@ public int hashCode() {
 
 	private Map<String, Integer> stationNodes;
 
-	enum EdgeType {
+	public enum EdgeType {
 		HIGHWAY, ENTER_TIME_EXPANDED_NETWORK, LEAVE_TIME_EXPANDED_NETWORK, ENTER_PT, EXIT_PT, HOP, DWELL, BOARD, ALIGHT, OVERNIGHT, TRANSFER, WAIT, WAIT_ARRIVAL
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/Label.java
Patch:
@@ -23,7 +23,7 @@
 import java.time.Instant;
 import java.util.Iterator;
 
-class Label {
+public class Label {
 
     static class Transition {
         final Label label;
@@ -62,10 +62,10 @@ public String toString() {
         }
     }
 
-    final long currentTime;
+    public final long currentTime;
 
     final int edge;
-    final int adjNode;
+    public final int adjNode;
 
     final int nTransfers;
     final int nWalkDistanceConstraintViolations;

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/PtFlagEncoder.java
Patch:
@@ -95,7 +95,7 @@ long setValidityId(long flags, int validityId) {
 		return this.validityId.setValue(flags, validityId);
 	}
 
-	GtfsStorage.EdgeType getEdgeType(long flags) {
+	public GtfsStorage.EdgeType getEdgeType(long flags) {
 		return GtfsStorage.EdgeType.values()[(int) type.getValue(flags)];
 	}
 

File: web-api/src/main/java/com/graphhopper/jackson/Jackson.java
Patch:
@@ -18,13 +18,15 @@
 package com.graphhopper.jackson;
 
 import com.bedatadriven.jackson.datatype.jts.JtsModule;
+import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.databind.*;
 
 public class Jackson {
     public static ObjectMapper newObjectMapper() {
         ObjectMapper objectMapper = new ObjectMapper();
         objectMapper.registerModule(new GraphHopperModule());
         objectMapper.registerModule(new JtsModule());
+        objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
         return objectMapper;
     }
 }

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -231,7 +231,7 @@ protected void configure() {
         });
         environment.jersey().register(NearestResource.class);
         environment.jersey().register(RouteResource.class);
-        environment.jersey().register(IsochroneResource.class);
+        environment.jersey().register(new PtIsochroneResource(gtfsStorage, encodingManager, graphHopperStorage, locationIndex));
         environment.jersey().register(I18NResource.class);
         environment.jersey().register(InfoResource.class);
         // Say we only support pt, even though we now have several flag encoders. Yes, I know, we're almost there.

File: core/src/main/java/com/graphhopper/routing/ch/CHParameters.java
Patch:
@@ -11,6 +11,9 @@ public final class CHParameters {
     static final String EDGE_DIFFERENCE_WEIGHT = Parameters.CH.PREPARE + "node.edge_difference_weight";
     static final String ORIGINAL_EDGE_COUNT_WEIGHT = Parameters.CH.PREPARE + "node.original_edge_count_weight";
     static final String CONTRACTED_NEIGHBORS_WEIGHT = Parameters.CH.PREPARE + "node.contracted_neighbors_weight";
+    static final String EDGE_QUOTIENT_WEIGHT = Parameters.CH.PREPARE + "edge.edge_quotient_weight";
+    static final String ORIGINAL_EDGE_QUOTIENT_WEIGHT = Parameters.CH.PREPARE + "edge.original_edge_quotient_weight";
+    static final String HIERARCHY_DEPTH_WEIGHT = Parameters.CH.PREPARE + "edge.hierarchy_depth_weight";
 
     private CHParameters() {
     }

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionEdgeCHTest.java
Patch:
@@ -51,8 +51,8 @@ protected GraphHopperStorage createGHStorage(
     @Override
     public RoutingAlgorithmFactory createFactory(GraphHopperStorage ghStorage, AlgorithmOptions opts) {
         PrepareContractionHierarchies ch = new PrepareContractionHierarchies(
-                new GHDirectory("", DAType.RAM_INT), ghStorage, getGraph(ghStorage, opts.getWeighting()), opts.getWeighting(),
-                TraversalMode.EDGE_BASED_2DIR, new PrepareContractionHierarchies.Config());
+                new GHDirectory("", DAType.RAM_INT), ghStorage, getGraph(ghStorage, opts.getWeighting()),
+                TraversalMode.EDGE_BASED_2DIR);
         ch.doWork();
         return ch;
     }

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionEdgeCHTest.java
Patch:
@@ -43,8 +43,8 @@ protected GraphHopperStorage createGHStorage(
     @Override
     public RoutingAlgorithmFactory createFactory(GraphHopperStorage ghStorage, AlgorithmOptions opts) {
         PrepareContractionHierarchies ch = new PrepareContractionHierarchies(
-                new GHDirectory("", DAType.RAM_INT), ghStorage, getGraph(ghStorage, opts.getWeighting()), opts.getWeighting(),
-                TraversalMode.EDGE_BASED_2DIR, new PrepareContractionHierarchies.Config());
+                new GHDirectory("", DAType.RAM_INT), ghStorage, getGraph(ghStorage, opts.getWeighting()),
+                TraversalMode.EDGE_BASED_2DIR);
         ch.doWork();
         return ch;
     }

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -487,7 +487,7 @@ public void testMultiplePreparationsDifferentView() {
     }
 
     private PrepareContractionHierarchies createPrepareContractionHierarchies(GraphHopperStorage g, CHGraph lg) {
-        return new PrepareContractionHierarchies(dir, g, lg, weighting, tMode, new PrepareContractionHierarchies.Config());
+        return new PrepareContractionHierarchies(dir, g, lg, tMode);
     }
     
     void checkPath(GraphHopperStorage ghStorage, Weighting w, int expShortcuts, double expDistance, IntIndexedContainer expNodes) {

File: core/src/test/java/com/graphhopper/routing/ch/WitnessPathSearcherTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.TurnCostExtension;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.PMap;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -126,7 +127,7 @@ public void test_witness_bidirectional() {
     }
 
     private WitnessPathSearcher createFinder() {
-        return new WitnessPathSearcher(graph, chGraph, chTurnWeighting, new WitnessPathSearcher.Config());
+        return new WitnessPathSearcher(graph, chGraph, chTurnWeighting, new PMap());
     }
 
     private void setMaxLevelOnAllNodes() {

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -904,7 +904,7 @@ public void testGetWeightingForCH() {
 
     private PrepareContractionHierarchies createPrepareContractionHierarchies(RAMDirectory ramDir, GraphHopperStorage storage, Weighting weighting) {
         return new PrepareContractionHierarchies(ramDir, storage, storage.getGraph(CHGraph.class, weighting),
-                TraversalMode.NODE_BASED, new PrepareContractionHierarchies.Config());
+                TraversalMode.NODE_BASED);
     }
 
     @Test

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ContourBuilder.java
Patch:
@@ -40,7 +40,7 @@ public ContourBuilder(QuadEdgeSubdivision triangulation) {
         this.triangulation = triangulation;
     }
 
-    public Geometry computeIsoline(double z0) {
+    public MultiPolygon computeIsoline(double z0) {
         Set<QuadEdge> processed = new HashSet<>();
         List<LinearRing> rings = new ArrayList<>();
 

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -246,7 +246,7 @@ public void testPathDetailsWithoutGraphHopperWeb() throws Exception {
         int firstLink = edgeIds.get(0).get(2).asInt();
         int lastLink = edgeIds.get(edgeIds.size() - 1).get(2).asInt();
         assertEquals(880, firstLink);
-        assertEquals(1419, lastLink);
+        assertEquals(1420, lastLink);
     }
 
     @Test

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/EmptyFieldError.java
Patch:
@@ -1,6 +1,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /** Indicates that a field marked as required is not present in a GTFS feed on a particular line. */
 public class EmptyFieldError extends GTFSError implements Serializable {
@@ -11,7 +12,7 @@ public EmptyFieldError(String file, long line, String field) {
     }
 
     @Override public String getMessage() {
-        return String.format("No value supplied for a required column.");
+        return String.format(Locale.getDefault(), "No value supplied for a required column.");
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/MissingColumnError.java
Patch:
@@ -1,6 +1,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /** Indicates that a column marked as required is entirely missing from a GTFS feed. */
 public class MissingColumnError extends GTFSError implements Serializable {
@@ -11,7 +12,7 @@ public MissingColumnError(String file, String field) {
     }
 
     @Override public String getMessage() {
-        return String.format("Missing required column.");
+        return String.format(Locale.getDefault(), "Missing required column.");
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/MissingTableError.java
Patch:
@@ -1,6 +1,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /** Indicates that a table marked as required is not present in a GTFS feed. */
 public class MissingTableError extends GTFSError implements Serializable {
@@ -11,7 +12,7 @@ public MissingTableError(String file) {
     }
 
     @Override public String getMessage() {
-        return String.format("This table is required by the GTFS specification but is missing.");
+        return String.format(Locale.getDefault(), "This table is required by the GTFS specification but is missing.");
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/NumberParseError.java
Patch:
@@ -1,6 +1,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /** Represents a problem parsing an integer field of GTFS feed. */
 public class NumberParseError extends GTFSError implements Serializable {
@@ -11,7 +12,7 @@ public NumberParseError(String file, long line, String field) {
     }
 
     @Override public String getMessage() {
-        return String.format("Error parsing a number from a string.");
+        return String.format(Locale.getDefault(), "Error parsing a number from a string.");
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/RangeError.java
Patch:
@@ -1,6 +1,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /** Indicates that a number is out of the acceptable range. */
 public class RangeError extends GTFSError implements Serializable {
@@ -16,7 +17,7 @@ public RangeError(String file, long line, String field, double min, double max,
     }
 
     @Override public String getMessage() {
-        return String.format("Number %s outside of acceptable range [%s,%s].", actual, min, max);
+        return String.format(Locale.getDefault(), "Number %s outside of acceptable range [%s,%s].", actual, min, max);
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/ReferentialIntegrityError.java
Patch:
@@ -1,6 +1,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /** Indicates that an entity referenced another entity that does not exist. */
 public class ReferentialIntegrityError extends GTFSError implements Serializable {
@@ -23,7 +24,7 @@ public int compareTo (GTFSError o) {
     }
 
     @Override public String getMessage() {
-        return String.format(badReference);
+        return String.format(Locale.getDefault(), badReference);
     }
 
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/error/TableInSubdirectoryError.java
Patch:
@@ -19,6 +19,7 @@
 package com.conveyal.gtfs.error;
 
 import java.io.Serializable;
+import java.util.Locale;
 
 /**
  * Created by landon on 10/14/16.
@@ -35,6 +36,6 @@ public TableInSubdirectoryError(String file, String directory) {
     }
 
     @Override public String getMessage() {
-        return String.format("All GTFS files (including %s.txt) should be at root of zipfile, not nested in subdirectory (%s)", file, directory);
+        return String.format(Locale.getDefault(), "All GTFS files (including %s.txt) should be at root of zipfile, not nested in subdirectory (%s)", file, directory);
     }
 }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/model/Frequency.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.io.IOException;
 import java.util.Iterator;
+import java.util.Locale;
 
 import static com.conveyal.gtfs.model.Entity.Writer.convertToGtfsTime;
 
@@ -42,7 +43,7 @@ public String getId() {
          sb.append("_to_");
          sb.append(convertToGtfsTime(end_time));
          sb.append("_every_");
-         sb.append(String.format("%dm%02ds", headway_secs / 60, headway_secs % 60));
+         sb.append(String.format(Locale.getDefault(), "%dm%02ds", headway_secs / 60, headway_secs % 60));
          if (exact_times == 1) sb.append("_exact");
          return sb.toString();
      }

File: reader-gtfs/src/main/java/com/conveyal/gtfs/model/Shape.java
Patch:
@@ -1,8 +1,8 @@
 package com.conveyal.gtfs.model;
 
 import com.conveyal.gtfs.GTFSFeed;
-import com.conveyal.gtfs.util.Util;
 import com.vividsolutions.jts.geom.Coordinate;
+import com.vividsolutions.jts.geom.GeometryFactory;
 import com.vividsolutions.jts.geom.LineString;
 import org.mapdb.Fun;
 
@@ -12,6 +12,7 @@
  * Represents a collection of GTFS shape points. Never saved in MapDB but constructed on the fly.
  */
 public class Shape {
+    public static GeometryFactory geometryFactory = new GeometryFactory();
     /** The shape itself */
     public LineString geometry;
 
@@ -25,7 +26,7 @@ public Shape (GTFSFeed feed, String shape_id) {
         Coordinate[] coords = points.values().stream()
                 .map(point -> new Coordinate(point.shape_pt_lon, point.shape_pt_lat))
                 .toArray(i -> new Coordinate[i]);
-        geometry = Util.geometryFactory.createLineString(coords);
+        geometry = geometryFactory.createLineString(coords);
         shape_dist_traveled = points.values().stream().mapToDouble(point -> point.shape_dist_traveled).toArray();
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -88,6 +88,7 @@ protected BikeCommonFlagEncoder(int speedBits, double speedFactor, int maxTurnCo
         // potentialBarriers.add("lift_gate");
         potentialBarriers.add("swing_gate");
 
+        absoluteBarriers.add("fence");
         absoluteBarriers.add("stile");
         absoluteBarriers.add("turnstile");
 

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -84,6 +84,7 @@ public CarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
         potentialBarriers.add("kissing_gate");
         potentialBarriers.add("swing_gate");
 
+        absoluteBarriers.add("fence");
         absoluteBarriers.add("bollard");
         absoluteBarriers.add("stile");
         absoluteBarriers.add("turnstile");

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -93,6 +93,7 @@ public FootFlagEncoder(int speedBits, double speedFactor) {
         sidewalkValues.add("right");
 
         setBlockByDefault(false);
+        absoluteBarriers.add("fence");
         potentialBarriers.add("gate");
 
         safeHighwayTags.add("footway");

File: api/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
Patch:
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.util;
 
+import static java.lang.Math.*;
+
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 
-import static java.lang.Math.*;
-
 /**
  * @author Peter Karich
  */
@@ -155,7 +155,7 @@ else if (factor < 0)
         return calcNormalizedDist(c_lat, c_lon / shrinkFactor, r_lat_deg, r_lon_deg);
     }
 
-    private double calcShrinkFactor(double a_lat_deg, double b_lat_deg) {
+    double calcShrinkFactor(double a_lat_deg, double b_lat_deg) {
         return cos(toRadians((a_lat_deg + b_lat_deg) / 2));
     }
 

File: core/src/main/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.java
Patch:
@@ -197,7 +197,7 @@ String toString(FlagEncoder encoder, EdgeIterator iter) {
     /**
      * This method removes networks that will be never be visited by this filter. See #235 for
      * example, small areas like parking lots are sometimes connected to the whole network through a
-     * one-way road. This is clearly an error - but is causes the routing to fail when a point gets
+     * one-way road. This is clearly an error - but it causes the routing to fail when a point gets
      * connected to this small area. This routine removes all these networks from the graph.
      * <p>
      *
@@ -217,7 +217,7 @@ int removeDeadEndUnvisitedNetworks(final PrepEdgeFilter bothFilter) {
 
     /**
      * This method removes the access to edges available from the nodes contained in the components.
-     * But only if a components' size is smaller then the specified min value.
+     * But only if a components' size is smaller than the specified min value.
      * <p>
      *
      * @return number of removed edges

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -302,7 +302,7 @@ final void setWeight(CommonEdgeIterator edge, double weight) {
         if (weight > MAX_WEIGHT)
             weightLong = MAX_WEIGHT_LONG;
         else
-            weightLong = (Math.round(weight * WEIGHT_FACTOR)) << 2;
+            weightLong = ((long) (weight * WEIGHT_FACTOR)) << 2;
 
         long accessFlags = edge.getDirectFlags() & scDirMask;
         edge.setFlags(weightLong | accessFlags);

File: matching-core/src/main/java/com/graphhopper/matching/GPXExtension.java
Patch:
@@ -81,7 +81,7 @@ public QueryResult getQueryResult() {
      * Returns whether this GPXExtension is directed. This is true if the snapped point
      * is a virtual node, otherwise the snapped node is a real (tower) node and false is returned.
      */
-    public boolean isDirected() {
+    public boolean isOnDirectedEdge() {
         return isDirected;
     }
 

File: matching-web/src/test/java/com/graphhopper/matching/http/MapMatchingResourceTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.http.WebHelper;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
-import io.dropwizard.logging.DefaultLoggingFactory;
 import io.dropwizard.testing.junit.DropwizardAppRule;
 import org.junit.AfterClass;
 import org.junit.ClassRule;
@@ -44,7 +43,6 @@ public class MapMatchingResourceTest {
     private static final MapMatchingServerConfiguration config = new MapMatchingServerConfiguration();
 
     static {
-        ((DefaultLoggingFactory) config.getLoggingFactory()).setLevel("DEBUG");
         config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.flag_encoders", "car").
                 put("prepare.ch.weightings", "no").

File: matching-web/src/test/java/com/graphhopper/matching/MapMatching2Test.java
Patch:
@@ -110,8 +110,7 @@ public void testIssue127() throws IOException {
         AlgorithmOptions opts = AlgorithmOptions.start().build();
         MapMatching mapMatching = new MapMatching(hopper, opts);
 
-        // two points
-        // TODO either do the match or throw only IllegalArgumentException like we do if just a single point is snapped
+        // query with two identical points
         Gpx gpx = xmlMapper.readValue(getClass().getResourceAsStream("/issue-127.gpx"), Gpx.class);
         MatchResult mr = mapMatching.doWork(gpx.trk.get(0).getEntries());
 

File: matching-core/src/main/java/com/graphhopper/matching/GPXExtension.java
Patch:
@@ -81,7 +81,7 @@ public QueryResult getQueryResult() {
      * Returns whether this GPXExtension is directed. This is true if the snapped point
      * is a virtual node, otherwise the snapped node is a real (tower) node and false is returned.
      */
-    public boolean isDirected() {
+    public boolean isOnDirectedEdge() {
         return isDirected;
     }
 

File: matching-web/src/test/java/com/graphhopper/matching/http/MapMatchingResourceTest.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.http.WebHelper;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
-import io.dropwizard.logging.DefaultLoggingFactory;
 import io.dropwizard.testing.junit.DropwizardAppRule;
 import org.junit.AfterClass;
 import org.junit.ClassRule;
@@ -44,7 +43,6 @@ public class MapMatchingResourceTest {
     private static final MapMatchingServerConfiguration config = new MapMatchingServerConfiguration();
 
     static {
-        ((DefaultLoggingFactory) config.getLoggingFactory()).setLevel("DEBUG");
         config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.flag_encoders", "car").
                 put("prepare.ch.weightings", "no").

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -83,7 +83,7 @@ public void tearDown() {
     }
 
     @Test
-    public void testMonacoWithInstructions() throws Exception {
+    public void testMonacoWithInstructions() {
         GHResponse rsp = hopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
                 setAlgorithm(ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
@@ -952,7 +952,7 @@ public void testFlexMode_631() {
                 setDisablingAllowed(true);
 
         tmpHopper.getLMFactoryDecorator().setEnabled(true).
-                setWeightingsAsStrings(Arrays.asList("fastest")).
+                setWeightingsAsStrings(Arrays.asList("fastest|maximum=2000")).
                 setDisablingAllowed(true);
 
         tmpHopper.importOrLoad();

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -527,8 +527,8 @@ Graph runAlgo(TestAlgoCollector testCollector, String osmFile,
             // avoid that path.getDistance is too different to path.getPoint.calcDistance
             hopper.setWayPointMaxDistance(0);
 
-            // always enable landmarks
-            hopper.getLMFactoryDecorator().addWeighting(weightStr).
+            // always enable landmarks, add maximum information to reduce warnings
+            hopper.getLMFactoryDecorator().addWeighting(weightStr+"|maximum=60000").
                     setEnabled(true).setDisablingAllowed(true);
 
             if (withCH)

File: web-bundle/src/main/java/com/graphhopper/resources/InfoResource.java
Patch:
@@ -1,6 +1,6 @@
 /*
  *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
  *
  *  GraphHopper GmbH licenses this file to you under the Apache License,
@@ -65,7 +65,8 @@ public static class PerVehicle {
     @GET
     public Info getInfo() {
         final Info info = new Info();
-        info.bbox = storage.getBounds();
+        // use bbox always without elevation (for backward compatibility)
+        info.bbox = new BBox(storage.getBounds().minLon, storage.getBounds().maxLon, storage.getBounds().minLat, storage.getBounds().maxLat);
         info.supported_vehicles = storage.getEncodingManager().toString().split(",");
         for (String v : info.supported_vehicles) {
             Info.PerVehicle perVehicleJson = new Info.PerVehicle();

File: web/src/test/java/com/graphhopper/http/GraphHopperDataFlagEncoderSpatialRulesTest.java
Patch:
@@ -31,11 +31,11 @@
 import static org.junit.Assert.*;
 
 /**
- * Tests the DataFlagencoder with the SpatialRuleLookup enabled
+ * Tests the DataFlagEncoder with the SpatialRuleLookup enabled
  *
  * @author Robin Boldt
  */
-public class GraphHopperDataflagEncoderSpatialRulesIT {
+public class GraphHopperDataFlagEncoderSpatialRulesTest {
     private static final String DIR = "./target/north-bayreuth-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/GraphHopperLandmarksTest.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Robin Boldt
  */
-public class GraphHopperLandmarksIT {
+public class GraphHopperLandmarksTest {
     private static final String DIR = "./target/landmark-test-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/isochrone/IsochroneResourceTest.java
Patch:
@@ -21,7 +21,7 @@
 import static junit.framework.TestCase.assertTrue;
 import static org.junit.Assert.assertEquals;
 
-public class IsochroneResourceIT {
+public class IsochroneResourceTest {
     private static final String DIR = "./target/andorra-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/resources/ChangeGraphResourceTest.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * @author Peter Karich
  */
-public class ChangeGraphResourceIT {
+public class ChangeGraphResourceTest {
     private static final String DIR = "./target/andorra-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/resources/I18nResourceTest.java
Patch:
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
-public class I18nResourceIT {
+public class I18nResourceTest {
     private static final String DIR = "./target/andorra-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/resources/NearestResourceTest.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * @author svantulden
  */
-public class NearestResourceIT {
+public class NearestResourceTest {
     private static final String dir = "./target/andorra-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/resources/NearestResourceWithEleTest.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * @author svantulden
  */
-public class NearestResourceWithEleIT {
+public class NearestResourceWithEleTest {
     private static final String dir = "./target/monaco-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceTest.java
Patch:
@@ -46,7 +46,7 @@
 /**
  * @author Peter Karich
  */
-public class RouteResourceIT {
+public class RouteResourceTest {
     private static final String DIR = "./target/andorra-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: web/src/test/java/com/graphhopper/http/resources/RouteResourceWithEleTest.java
Patch:
@@ -36,7 +36,7 @@
 /**
  * @author Peter Karich
  */
-public class RouteResourceWithEleIT {
+public class RouteResourceWithEleTest {
     private static final String dir = "./target/monaco-gh/";
 
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();

File: matching-web/src/main/java/com/graphhopper/matching/cli/MeasurementCommand.java
Patch:
@@ -116,7 +116,7 @@ public void run(Bootstrap bootstrap, Namespace args) {
         } finally {
             properties.put("measurement.count", "" + count);
             properties.put("measurement.seed", "" + seed);
-            properties.put("measurement.time", "" + sw.stop().getTime());
+            properties.put("measurement.time", "" + sw.stop().getMillis());
             System.gc();
             properties.put("measurement.totalMB", "" + Helper.getTotalMB());
             properties.put("measurement.usedMB", "" + Helper.getUsedMB());

File: core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java
Patch:
@@ -107,7 +107,7 @@ public synchronized boolean tryLock() {
             // on-the-fly: make sure directory exists
             if (!lockDir.exists()) {
                 if (!lockDir.mkdirs())
-                    throw new RuntimeException("Directory " + lockDir + " does not exist and cannot created to place lock file there: " + lockFile);
+                    throw new RuntimeException("Directory " + lockDir + " does not exist and cannot be created to place lock file there: " + lockFile);
             }
 
             if (!lockDir.isDirectory())

File: core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
Patch:
@@ -76,7 +76,7 @@ public synchronized boolean tryLock() {
             // make sure directory exists, do it on-the-fly (not possible when setLockDir is called)
             if (!lockDir.exists()) {
                 if (!lockDir.mkdirs())
-                    throw new RuntimeException("Directory " + lockDir + " does not exist and cannot created to place lock file there: " + lockFile);
+                    throw new RuntimeException("Directory " + lockDir + " does not exist and cannot be created to place lock file there: " + lockFile);
             }
 
             // this test can only be performed after the dir has created!

File: client-hc/src/test/java/com/graphhopper/api/AbstractGraphHopperMatrixWebIntegrationTester.java
Patch:
@@ -57,7 +57,7 @@ public void testBikeMatrix() {
         req.addOutArray("times");
 
         MatrixResponse res = ghMatrix.route(req);
-        assertEquals(2450, res.getTime(1, 2) / 1000, 110);
+        assertEquals(2200, res.getTime(1, 2) / 1000, 200);
     }
 
     @Test

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -56,7 +56,6 @@ public void testSimpleRoute() {
         isBetween(180, 200, alt.getDescend());
         isBetween(1000, 1500, alt.getRouteWeight());
 
-
         // change vehicle
         res = gh.route(new GHRequest(49.6724, 11.3494, 49.6550, 11.4180).
                 setVehicle("bike"));

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -130,7 +130,6 @@ private class RequestHandler {
             }
             arriveBy = request.getHints().getBool(Parameters.PT.ARRIVE_BY, false);
             walkSpeedKmH = request.getHints().getDouble(Parameters.PT.WALK_SPEED, 5.0);
-            maxWalkDistancePerLeg = request.getHints().getDouble(Parameters.PT.MAX_WALK_DISTANCE_PER_LEG, 1000.0);
             blockedRouteTypes = request.getHints().getInt(Parameters.PT.BLOCKED_ROUTE_TYPES, 0);
             translation = translationMap.getWithFallBack(request.getLocale());
             if (request.getPoints().size() != 2) {
@@ -139,6 +138,9 @@ private class RequestHandler {
             enter = request.getPoints().get(0);
             exit = request.getPoints().get(1);
             separateWalkQuery = profileQuery;
+            // Maximum walking distance is unlimited by default, _except_ when we search for access/egress from origin
+            // and destination separately (currently in profile queries). Because there we need to know when to stop.
+            maxWalkDistancePerLeg = request.getHints().getDouble(Parameters.PT.MAX_WALK_DISTANCE_PER_LEG, separateWalkQuery ? 1000.0 : Double.MAX_VALUE);
         }
 
         GHResponse route() {

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -208,7 +208,7 @@ public void testDirectedGraph2() {
         assertEquals(oldCount, g.getAllEdges().length());
         assertEquals(oldCount, GHUtility.count(g.getAllEdges()));
 
-        int numShortcuts = 9;
+        long numShortcuts = 9;
         assertEquals(numShortcuts, prepare.getShortcuts());
         assertEquals(oldCount + numShortcuts, lg.getAllEdges().length());
         assertEquals(oldCount + numShortcuts, GHUtility.count(lg.getAllEdges()));

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -789,7 +789,7 @@ public boolean isEnabled() {
 
     @Test
     public void testMultipleCHPreparationsInParallel() {
-        HashMap<String, Integer> shortcutCountMap = new HashMap<>();
+        HashMap<String, Long> shortcutCountMap = new HashMap<>();
         // try all parallelization modes        
         for (int threadCount = 1; threadCount < 6; threadCount++) {
             EncodingManager em = new EncodingManager(Arrays.asList(new CarFlagEncoder(), new MotorcycleFlagEncoder(),
@@ -810,11 +810,11 @@ public void testMultipleCHPreparationsInParallel() {
                 assertTrue("Preparation wasn't run! [" + threadCount + "]", pch.isPrepared());
 
                 String name = AbstractWeighting.weightingToFileName(pch.getWeighting());
-                Integer singleThreadShortcutCount = shortcutCountMap.get(name);
+                Long singleThreadShortcutCount = shortcutCountMap.get(name);
                 if (singleThreadShortcutCount == null)
                     shortcutCountMap.put(name, pch.getShortcuts());
                 else
-                    assertEquals((int) singleThreadShortcutCount, pch.getShortcuts());
+                    assertEquals((long) singleThreadShortcutCount, pch.getShortcuts());
 
                 String keyError = Parameters.CH.PREPARE + "error." + name;
                 String valueError = tmpGH.getGraphHopperStorage().getProperties().get(keyError);

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -90,7 +90,7 @@ void start(CmdArgs args) {
             protected void prepareCH() {
                 StopWatch sw = new StopWatch().start();
                 super.prepareCH();
-                put(Parameters.CH.PREPARE + "time", sw.stop().getTime());
+                put(Parameters.CH.PREPARE + "time", sw.stop().getMillis());
                 int edges = getGraphHopperStorage().getAllEdges().length();
                 if (getCHFactoryDecorator().hasWeightings()) {
                     Weighting weighting = getCHFactoryDecorator().getWeightings().get(0);
@@ -103,7 +103,7 @@ protected void prepareCH() {
             protected void loadOrPrepareLM() {
                 StopWatch sw = new StopWatch().start();
                 super.loadOrPrepareLM();
-                put(Parameters.Landmark.PREPARE + "time", sw.stop().getTime());
+                put(Parameters.Landmark.PREPARE + "time", sw.stop().getMillis());
             }
 
             @Override
@@ -178,7 +178,7 @@ protected DataReader importData() throws IOException {
             put("measurement.gitinfo", gitCommit);
             put("measurement.count", count);
             put("measurement.seed", seed);
-            put("measurement.time", sw.stop().getTime());
+            put("measurement.time", sw.stop().getMillis());
             System.gc();
             put("measurement.totalMB", getTotalMB());
             put("measurement.usedMB", getUsedMB());

File: tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.ui;
 
-import com.graphhopper.routing.AStar;
 import com.graphhopper.routing.AStarBidirection;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;

File: web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
Patch:
@@ -146,6 +146,7 @@ public Response doGet(
         } else {
             logger.info(logStr + ", alternatives: " + ghResponse.getAll().size()
                     + ", distance0: " + ghResponse.getBest().getDistance()
+                    + ", weight0: " + ghResponse.getBest().getRouteWeight()
                     + ", time0: " + Math.round(ghResponse.getBest().getTime() / 60000f) + "min"
                     + ", points0: " + ghResponse.getBest().getPoints().getSize()
                     + ", debugInfo: " + ghResponse.getDebugInfo());

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -977,8 +977,7 @@ public List<Path> calcPaths(GHRequest request, GHResponse ghRsp) {
         readLock.lock();
         try {
             if (!encodingManager.supports(vehicle))
-                throw new IllegalArgumentException("Vehicle " + vehicle + " unsupported. "
-                        + "Supported are: " + getEncodingManager());
+                throw new IllegalArgumentException("Vehicle not supported: " + vehicle + ". Supported are: " + encodingManager.toString());
 
             HintsMap hints = request.getHints();
             String tModeStr = hints.get("traversal_mode", traversalMode.toString());

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -197,6 +197,9 @@ public void run(GraphHopperBundleConfiguration configuration, Environment enviro
         environment.jersey().register(new MultiExceptionMapper());
         environment.jersey().register(new MultiExceptionGPXMessageBodyWriter());
 
+        environment.jersey().register(new IllegalArgumentExceptionMapper());
+        environment.jersey().register(new GHPointConverterProvider());
+
         if (configuration.getGraphHopperConfiguration().has("gtfs.file")) {
             // switch to different API implementation when using Pt
             runPtGraphHopper(configuration.getGraphHopperConfiguration(), environment);

File: web-bundle/src/main/java/com/graphhopper/http/MultiExceptionMapper.java
Patch:
@@ -28,6 +28,6 @@
 public class MultiExceptionMapper implements ExceptionMapper<MultiException> {
     @Override
     public Response toResponse(MultiException exception) {
-        return Response.status(400).entity(exception).build();
+        return Response.status(Response.Status.BAD_REQUEST).entity(exception).build();
     }
 }

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -54,7 +54,6 @@ public Response doGet(
             @Context HttpServletRequest httpReq,
             @Context UriInfo uriInfo,
             @QueryParam("vehicle") @DefaultValue("car") String vehicle,
-            @QueryParam("weighting") @DefaultValue("fastest") String weightingStr,
             @QueryParam("buckets") @DefaultValue("1") int buckets,
             @QueryParam("reverse_flow") @DefaultValue("false") boolean reverseFlow,
             @QueryParam("point") GHPoint point,

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -1,6 +1,7 @@
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.graphhopper.MultiException;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.details.PathDetail;
@@ -18,6 +19,7 @@ public GraphHopperModule() {
         addSerializer(PathDetail.class, new PathDetailSerializer());
         addSerializer(InstructionList.class, new InstructionListSerializer());
         addDeserializer(CmdArgs.class, new CmdArgsDeserializer());
+        addSerializer(MultiException.class, new MultiExceptionSerializer());
     }
 
 }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -355,7 +355,6 @@ public static GraphHopperStorage createOrLoad(GHDirectory directory, EncodingMan
                             t.transfer.transfer_type = 2;
                             t.transfer.min_transfer_time = (int) (t.time / 1000L);
                             gtfsFeed.transfers.put(t.id, t.transfer);
-                            System.out.print(String.format("%s\t%s\t%d\t%d\n", t.transfer.from_stop_id, t.transfer.to_stop_id, t.transfer.transfer_type, t.time));
                         });
                 gtfsReader.readGraph();
             }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsReader.java
Patch:
@@ -138,11 +138,10 @@ void readGraph() {
         gtfsStorage.getFares().putAll(feed.fares);
         transfers = new Transfers(feed);
         gtfsStorage.getTransfers().put(id, transfers);
-        connectStopsToStreetNetwork();
         buildPtNetwork();
     }
 
-    private void connectStopsToStreetNetwork() {
+    void connectStopsToStreetNetwork() {
         EdgeFilter filter = new EverythingButPt(encoder);
         for (Stop stop : feed.stops.values()) {
             QueryResult locationQueryResult = walkNetworkIndex.findClosest(stop.stop_lat, stop.stop_lon, filter);

File: api/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -251,7 +251,7 @@ public List<String> getPointHints() {
     }
 
     public boolean hasPointHints() {
-        return pointHints.size() == points.size();
+        return pointHints.size() == points.size() && !points.isEmpty();
     }
 
     public GHRequest setPathDetails(List<String> pathDetails) {

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -44,7 +44,7 @@
  */
 public class EncodingManager {
     private static final String ERR = "Encoders are requesting %s bits, more than %s bits of %s flags. ";
-    private static final String WAY_ERR = "Decrease the number of vehicles or increase the flags to take long via graph.bytes_for_flags=8";
+    private static final String WAY_ERR = "Decrease the number of vehicles or increase the flags to take long via graph.bytes_for_flags: 8";
     private final List<AbstractFlagEncoder> edgeEncoders = new ArrayList<>();
     private final int bitsForEdgeFlags;
     private final int bitsForTurnFlags = 8 * 4;

File: matching-core/src/main/java/com/graphhopper/matching/GPXFile.java
Patch:
@@ -152,9 +152,6 @@ public GPXFile doImport(Document doc, double defaultSpeed) {
                 prevLon = lon;
                 prevMillis = millis;
             }
-            if (entries.size() == 0) {
-                throw new ParseException("No trackpoints found in GPX file", 0);
-            }
             return this;
         } catch (ParseException e) {
             throw new RuntimeException(e);

File: api/src/test/java/com/graphhopper/util/PointListTest.java
Patch:
@@ -237,6 +237,8 @@ public void testToGeoJson() {
 
         assertEquals(3, pl.toLineString(true).getNumPoints());
         assertEquals(2, pl.shallowCopy(1, 3, false).toLineString(true).getNumPoints());
+
+        assertEquals(0, PointList.EMPTY.toLineString(false).getNumPoints());
     }
 
 

File: api/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -209,6 +209,6 @@ public static final class PT {
         public static final String MAX_WALK_DISTANCE_PER_LEG = "pt.max_walk_distance_per_leg";
         public static final String MAX_TRANSFER_DISTANCE_PER_LEG = "pt.max_transfer_distance_per_leg";
         public static final String LIMIT_SOLUTIONS = "pt.limit_solutions";
-
+        public static final String BLOCKED_ROUTE_TYPES = "pt.blocked_route_types";
     }
 }

File: web-api/src/main/java/com/graphhopper/jackson/GraphHopperModule.java
Patch:
@@ -1,6 +1,7 @@
 package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.databind.module.SimpleModule;
+import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.details.PathDetail;
 import com.graphhopper.util.shapes.BBox;
@@ -16,6 +17,7 @@ public GraphHopperModule() {
         addDeserializer(PathDetail.class, new PathDetailDeserializer());
         addSerializer(PathDetail.class, new PathDetailSerializer());
         addSerializer(InstructionList.class, new InstructionListSerializer());
+        addDeserializer(CmdArgs.class, new CmdArgsDeserializer());
     }
 
 }

File: api/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.fasterxml.jackson.annotation.JsonValue;
-
 import java.text.DateFormat;
 import java.text.DecimalFormat;
 import java.text.DecimalFormatSymbols;
@@ -80,7 +78,6 @@ public void replaceLast(Instruction instr) {
         instructions.set(instructions.size() - 1, instr);
     }
 
-    @JsonValue
     public List<Map<String, Object>> createJson() {
         List<Map<String, Object>> instrList = new ArrayList<>(instructions.size());
         int pointsIndex = 0;

File: api/src/main/java/com/graphhopper/util/shapes/GHPoint.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util.shapes;
 
-import com.fasterxml.jackson.annotation.JsonCreator;
 import com.graphhopper.util.NumHelper;
 import com.vividsolutions.jts.geom.Point;
 
@@ -48,7 +47,6 @@ public static GHPoint fromStringLonLat(String str) {
         return fromString(str, true);
     }
 
-    @JsonCreator
     public static GHPoint fromJson(double[] xy) {
         return new GHPoint(xy[1], xy[0]);
     }

File: client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java
Patch:
@@ -63,7 +63,7 @@ public MatrixResponse route(GHMRequest ghRequest) {
             outArraysList.add("weights");
         }
 
-        ArrayNode outArrayListJson = factory.arrayNode(outArraysList.size());
+        ArrayNode outArrayListJson = factory.arrayNode();
         for (String str : outArraysList) {
             outArrayListJson.add(str);
         }
@@ -168,9 +168,9 @@ public MatrixResponse route(GHMRequest ghRequest) {
     }
 
     protected final ArrayNode createPointList(List<GHPoint> list) {
-        ArrayNode outList = factory.arrayNode(list.size()); // new ArrayList<>(list.size())
+        ArrayNode outList = factory.arrayNode(); // new ArrayList<>(list.size())
         for (GHPoint p : list) {
-            ArrayNode entry = factory.arrayNode(2);
+            ArrayNode entry = factory.arrayNode();
             entry.add(p.lon);
             entry.add(p.lat);
             outList.add(entry);

File: client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
Patch:
@@ -25,6 +25,7 @@
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.http.WebHelper;
+import com.graphhopper.jackson.Jackson;
 import com.graphhopper.util.*;
 import com.graphhopper.util.details.PathDetail;
 import com.graphhopper.util.exceptions.*;
@@ -90,7 +91,7 @@ public GraphHopperWeb(String serviceUrl) {
         ignoreSet.add("points_encoded");
         ignoreSet.add("pointsencoded");
         ignoreSet.add("type");
-        objectMapper = new ObjectMapper();
+        objectMapper = Jackson.newObjectMapper();
     }
 
     public GraphHopperWeb setDownloader(OkHttpClient downloader) {

File: core/src/test/java/com/graphhopper/storage/change/ChangeGraphHelperTest.java
Patch:
@@ -1,6 +1,5 @@
 package com.graphhopper.storage.change;
 
-import com.graphhopper.util.ObjectMapperFactory;
 import com.graphhopper.json.geo.JsonFeatureCollection;
 import com.graphhopper.routing.AbstractRoutingAlgorithmTester;
 import com.graphhopper.routing.util.AllEdgesIterator;
@@ -13,6 +12,7 @@
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
+import com.graphhopper.jackson.Jackson;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -63,7 +63,7 @@ public void testApplyChanges() throws IOException {
 
         Reader reader = new InputStreamReader(getClass().getResourceAsStream("overlaydata1.json"), Helper.UTF_CS);
         ChangeGraphHelper instance = new ChangeGraphHelper(graph, locationIndex);
-        JsonFeatureCollection collection = ObjectMapperFactory.create().readValue(reader, JsonFeatureCollection.class);
+        JsonFeatureCollection collection = Jackson.newObjectMapper().readValue(reader, JsonFeatureCollection.class);
         long updates = instance.applyChanges(encodingManager, collection.getFeatures());
         assertEquals(2, updates);
 

File: web-api/src/main/java/com/graphhopper/jackson/PathDetailDeserializer.java
Patch:
@@ -1,10 +1,11 @@
-package com.graphhopper.util.details;
+package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.core.JsonParseException;
 import com.fasterxml.jackson.core.JsonParser;
 import com.fasterxml.jackson.databind.DeserializationContext;
 import com.fasterxml.jackson.databind.JsonDeserializer;
 import com.fasterxml.jackson.databind.JsonNode;
+import com.graphhopper.util.details.PathDetail;
 
 import java.io.IOException;
 

File: web-api/src/main/java/com/graphhopper/jackson/PathDetailSerializer.java
Patch:
@@ -1,9 +1,10 @@
-package com.graphhopper.util.details;
+package com.graphhopper.jackson;
 
 import com.fasterxml.jackson.core.JsonGenerationException;
 import com.fasterxml.jackson.core.JsonGenerator;
 import com.fasterxml.jackson.databind.JsonSerializer;
 import com.fasterxml.jackson.databind.SerializerProvider;
+import com.graphhopper.util.details.PathDetail;
 
 import java.io.IOException;
 

File: web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -203,7 +203,7 @@ public void stop() throws Exception {
     }
 
     private void runRegularGraphHopper(CmdArgs configuration, Environment environment) {
-        final GraphHopperManaged graphHopperManaged = new GraphHopperManaged(configuration);
+        final GraphHopperManaged graphHopperManaged = new GraphHopperManaged(configuration, environment.getObjectMapper());
         environment.lifecycle().manage(graphHopperManaged);
         environment.jersey().register(new AbstractBinder() {
             @Override

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -932,7 +932,7 @@ public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph g
         if (hintsMap.has(Routing.BLOCK_AREA)) {
             String blockAreaStr = hintsMap.get(Parameters.Routing.BLOCK_AREA, "");
             GraphEdgeIdFinder.BlockArea blockArea = new GraphEdgeIdFinder(graph, locationIndex).
-                    parseBlockArea(blockAreaStr, new DefaultEdgeFilter(encoder), hintsMap.getDouble("block_area.edge_id_max_area", 1000 * 1000));
+                    parseBlockArea(blockAreaStr, DefaultEdgeFilter.allEdges(encoder), hintsMap.getDouble("block_area.edge_id_max_area", 1000 * 1000));
             return new BlockAreaWeighting(weighting, blockArea);
         }
 

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
-import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -57,8 +56,8 @@ public AbstractRoutingAlgorithm(Graph graph, Weighting weighting, TraversalMode
         this.traversalMode = traversalMode;
         this.graph = graph;
         this.nodeAccess = graph.getNodeAccess();
-        outEdgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(flagEncoder, false, true));
-        inEdgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(flagEncoder, true, false));
+        outEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(flagEncoder));
+        inEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(flagEncoder));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
Patch:
@@ -88,8 +88,8 @@ public InstructionsFromEdges(int tmpNode, Graph graph, Weighting weighting, Flag
         prevNode = -1;
         prevInRoundabout = false;
         prevName = null;
-        outEdgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(this.encoder, false, true));
-        crossingExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, true));
+        outEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
+        crossingExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.allEdges(encoder));
     }
 
 

File: core/src/main/java/com/graphhopper/routing/ch/NodeContractor.java
Patch:
@@ -73,8 +73,8 @@ void initFromGraph() {
         maxEdgesCount = ghStorage.getAllEdges().length();
         ignoreNodeFilter = new IgnoreNodeFilter(prepareGraph, maxLevel);
         FlagEncoder prepareFlagEncoder = prepareWeighting.getFlagEncoder();
-        vehicleInExplorer = prepareGraph.createEdgeExplorer(new DefaultEdgeFilter(prepareFlagEncoder, true, false));
-        vehicleOutExplorer = prepareGraph.createEdgeExplorer(new DefaultEdgeFilter(prepareFlagEncoder, false, true));
+        vehicleInExplorer = prepareGraph.createEdgeExplorer(DefaultEdgeFilter.inEdges(prepareFlagEncoder));
+        vehicleOutExplorer = prepareGraph.createEdgeExplorer(DefaultEdgeFilter.outEdges(prepareFlagEncoder));
         prepareAlgo = new DijkstraOneToMany(prepareGraph, prepareWeighting, traversalMode);
     }
 

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -211,7 +211,7 @@ public RoutingAlgorithm createAlgo(Graph graph, AlgorithmOptions opts) {
     private void initFromGraph() {
         ghStorage.freeze();
         FlagEncoder prepareFlagEncoder = prepareWeighting.getFlagEncoder();
-        final EdgeFilter allFilter = new DefaultEdgeFilter(prepareFlagEncoder, true, true);
+        final EdgeFilter allFilter = DefaultEdgeFilter.allEdges(prepareFlagEncoder);
         // filter by vehicle and level number
         final EdgeFilter accessWithLevelFilter = new LevelEdgeFilter(prepareGraph) {
             @Override

File: core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
Patch:
@@ -246,7 +246,7 @@ public void createLandmarks() {
 
         byte[] subnetworks = new byte[graph.getNodes()];
         Arrays.fill(subnetworks, (byte) UNSET_SUBNETWORK);
-        EdgeFilter tarjanFilter = new DefaultEdgeFilter(encoder, false, true);
+        EdgeFilter tarjanFilter = DefaultEdgeFilter.outEdges(encoder);
         IntHashSet blockedEdges = new IntHashSet();
 
         // the ruleLookup splits certain areas from each other but avoids making this a permanent change so that other algorithms still can route through these regions.

File: core/src/main/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.java
Patch:
@@ -205,7 +205,7 @@ String toString(FlagEncoder encoder, EdgeIterator iter) {
      */
     int removeDeadEndUnvisitedNetworks(final PrepEdgeFilter bothFilter) {
         StopWatch sw = new StopWatch(bothFilter.getEncoder() + " findComponents").start();
-        final EdgeFilter outFilter = new DefaultEdgeFilter(bothFilter.getEncoder(), false, true);
+        final EdgeFilter outFilter = DefaultEdgeFilter.outEdges(bothFilter.getEncoder());
 
         // partition graph into strongly connected components using Tarjan's algorithm        
         TarjansSCCAlgorithm tarjan = new TarjansSCCAlgorithm(ghStorage, outFilter, true);
@@ -288,7 +288,7 @@ static class PrepEdgeFilter extends DefaultEdgeFilter {
         FlagEncoder encoder;
 
         public PrepEdgeFilter(FlagEncoder encoder) {
-            super(encoder);
+            super(encoder, true, true);
             this.encoder = encoder;
         }
 

File: core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
Patch:
@@ -77,7 +77,7 @@ public List<QueryResult> lookup(List<GHPoint> points, FlagEncoder encoder) {
 
         TourStrategy strategy = new MultiPointTour(new Random(seed), distanceInMeter, roundTripPointCount, initialHeading);
         queryResults = new ArrayList<>(2 + strategy.getNumberOfGeneratedPoints());
-        EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
         QueryResult startQR = locationIndex.findClosest(start.lat, start.lon, edgeFilter);
         if (!startQR.isValid())
             throw new PointNotFoundException("Cannot find point 0: " + start, 0);

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -59,7 +59,7 @@ public List<QueryResult> lookup(List<GHPoint> points, FlagEncoder encoder) {
         if (points.size() < 2)
             throw new IllegalArgumentException("At least 2 points have to be specified, but was:" + points.size());
 
-        EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
         queryResults = new ArrayList<>(points.size());
         for (int placeIndex = 0; placeIndex < points.size(); placeIndex++) {
             GHPoint point = points.get(placeIndex);

File: core/src/main/java/com/graphhopper/storage/change/ChangeGraphHelper.java
Patch:
@@ -91,7 +91,7 @@ public long applyChanges(EncodingManager em, Collection<JsonFeature> features) {
 
     private long applyChange(JsonFeature jsonFeature, FlagEncoder encoder) {
         long updates = 0;
-        EdgeFilter filter = new DefaultEdgeFilter(encoder);
+        EdgeFilter filter = DefaultEdgeFilter.allEdges(encoder);
         GHIntHashSet edges = new GHIntHashSet();
         if (jsonFeature.hasGeometry()) {
             graphBrowser.fillEdgeIDs(edges, jsonFeature.getGeometry(), filter);

File: core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
Patch:
@@ -49,7 +49,7 @@ public interface LocationIndex extends Storable<LocationIndex> {
      *
      * @param edgeFilter if a graph supports multiple vehicles we have to make sure that the entry
      *                   node into the graph is accessible from a selected vehicle. E.g. if you have a FOOT-query do:
-     *                   <pre>new DefaultEdgeFilter(footFlagEncoder);</pre>
+     *                   <pre>DefaultEdgeFilter.allEdges(footFlagEncoder);</pre>
      * @return An object containing the closest node and edge for the specified location. The node id
      * has at least one edge which is accepted from the specified edgeFilter. If nothing is found
      * the method QueryResult.isValid will return false.

File: core/src/test/java/com/graphhopper/reader/PrincetonReaderTest.java
Patch:
@@ -38,7 +38,7 @@
  */
 public class PrincetonReaderTest {
     private EncodingManager encodingManager = new EncodingManager("car");
-    private EdgeFilter carOutEdges = new DefaultEdgeFilter(encodingManager.getEncoder("car"), false, true);
+    private EdgeFilter carOutEdges = DefaultEdgeFilter.outEdges(encodingManager.getEncoder("car"));
 
     @Test
     public void testRead() {

File: core/src/test/java/com/graphhopper/routing/PathBidirRefTest.java
Patch:
@@ -38,7 +38,7 @@
 public class PathBidirRefTest {
     private final EncodingManager encodingManager = new EncodingManager("car");
     private FlagEncoder carEncoder = encodingManager.getEncoder("car");
-    private EdgeFilter carOutEdges = new DefaultEdgeFilter(carEncoder, false, true);
+    private EdgeFilter carOutEdges = DefaultEdgeFilter.outEdges(carEncoder);
 
     Graph createGraph() {
         return new GraphBuilder(encodingManager).create();
@@ -72,7 +72,7 @@ public void testExtract2() {
         pw.sptEntry = new SPTEntry(iter.getEdge(), 2, 10);
         pw.sptEntry.parent = new SPTEntry(EdgeIterator.NO_EDGE, 1, 0);
 
-        explorer = g.createEdgeExplorer(new DefaultEdgeFilter(carEncoder, true, false));
+        explorer = g.createEdgeExplorer(DefaultEdgeFilter.inEdges(carEncoder));
         iter = explorer.setBaseNode(3);
         iter.next();
         pw.edgeTo = new SPTEntry(iter.getEdge(), 2, 20);

File: core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
Patch:
@@ -428,8 +428,8 @@ public QueryResult createLocationResult(double lat, double lon,
 
     @Test
     public void testIteration_Issue163() {
-        EdgeFilter outEdgeFilter = new DefaultEdgeFilter(encodingManager.getEncoder("car"), false, true);
-        EdgeFilter inEdgeFilter = new DefaultEdgeFilter(encodingManager.getEncoder("car"), true, false);
+        EdgeFilter outEdgeFilter = DefaultEdgeFilter.outEdges(encodingManager.getEncoder("car"));
+        EdgeFilter inEdgeFilter = DefaultEdgeFilter.inEdges(encodingManager.getEncoder("car"));
         EdgeExplorer inExplorer = g.createEdgeExplorer(inEdgeFilter);
         EdgeExplorer outExplorer = g.createEdgeExplorer(outEdgeFilter);
 

File: core/src/test/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworksTest.java
Patch:
@@ -189,9 +189,9 @@ public void testRemoveSubnetworkWhenMultipleVehicles() {
         // remove nothing because of two vehicles with different subnetworks
         assertEquals(9, g.getNodes());
 
-        EdgeExplorer carExplorer = g.createEdgeExplorer(new DefaultEdgeFilter(carEncoder));
+        EdgeExplorer carExplorer = g.createEdgeExplorer(DefaultEdgeFilter.allEdges(carEncoder));
         assertEquals(GHUtility.asSet(7, 2, 1), GHUtility.getNeighbors(carExplorer.setBaseNode(3)));
-        EdgeExplorer bikeExplorer = g.createEdgeExplorer(new DefaultEdgeFilter(bikeEncoder));
+        EdgeExplorer bikeExplorer = g.createEdgeExplorer(DefaultEdgeFilter.allEdges(bikeEncoder));
         assertEquals(GHUtility.asSet(7, 2, 1, 4), GHUtility.getNeighbors(bikeExplorer.setBaseNode(3)));
 
         GHUtility.getEdge(g, 3, 4).setFlags(carEncoder.setProperties(10, false, false) | bikeEncoder.setProperties(5, false, false));
@@ -283,7 +283,7 @@ public void testTarjan() {
         GraphHopperStorage g = createSubnetworkTestStorage();
 
         // Requires a single vehicle type, otherwise we throw.
-        final EdgeFilter filter = new DefaultEdgeFilter(carFlagEncoder, false, true);
+        final EdgeFilter filter = DefaultEdgeFilter.outEdges(carFlagEncoder);
         TarjansSCCAlgorithm tarjan = new TarjansSCCAlgorithm(g, filter, false);
 
         List<IntArrayList> components = tarjan.findComponents();

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -75,7 +75,7 @@ public void testGraph() {
         g.edge(0, 1).setDistance(10).setFlags(footEncoder.setProperties(10, true, true));
         g.edge(0, 2).setDistance(10).setFlags(footEncoder.setProperties(5, true, true));
         g.edge(1, 3).setDistance(10).setFlags(footEncoder.setProperties(10, true, true));
-        EdgeExplorer out = g.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
+        EdgeExplorer out = g.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder));
         assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)));
         assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)));
         assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)));

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -49,8 +49,8 @@ public abstract class AbstractGraphStorageTester {
     protected CarFlagEncoder carEncoder = (CarFlagEncoder) encodingManager.getEncoder("car");
     protected FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
     protected GraphHopperStorage graph;
-    EdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, false, true);
-    EdgeFilter carInFilter = new DefaultEdgeFilter(carEncoder, true, false);
+    EdgeFilter carOutFilter = DefaultEdgeFilter.outEdges(carEncoder);
+    EdgeFilter carInFilter = DefaultEdgeFilter.inEdges(carEncoder);
     EdgeExplorer carOutExplorer;
     EdgeExplorer carInExplorer;
     EdgeExplorer carAllExplorer;
@@ -881,7 +881,7 @@ public void testFootMix() {
         graph.edge(0, 1).setDistance(10).setFlags(footEncoder.setProperties(10, true, true));
         graph.edge(0, 2).setDistance(10).setFlags(carEncoder.setProperties(10, true, true));
         graph.edge(0, 3).setDistance(10).setFlags(footEncoder.setProperties(10, true, true) | carEncoder.setProperties(10, true, true));
-        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
+        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder));
         assertEquals(GHUtility.asSet(3, 1), GHUtility.getNeighbors(footOutExplorer.setBaseNode(0)));
         assertEquals(GHUtility.asSet(3, 2), GHUtility.getNeighbors(carOutExplorer.setBaseNode(0)));
     }

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -338,7 +338,7 @@ public void testSimpleShortcutCreationAndTraversal() {
         CHGraph lg = graph.getGraph(CHGraph.class);
         lg.shortcut(1, 4).setWeight(3).setFlags(carEncoder.setProperties(10, true, true));
 
-        EdgeExplorer vehicleOutExplorer = lg.createEdgeExplorer(new DefaultEdgeFilter(carEncoder, false, true));
+        EdgeExplorer vehicleOutExplorer = lg.createEdgeExplorer(DefaultEdgeFilter.outEdges(carEncoder));
         // iteration should result in same nodes even if reusing the iterator
         assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(vehicleOutExplorer.setBaseNode(1)));
         assertEquals(GHUtility.asSet(3, 4), GHUtility.getNeighbors(vehicleOutExplorer.setBaseNode(1)));

File: core/src/test/java/com/graphhopper/storage/index/AbstractLocationIndexTester.java
Patch:
@@ -341,7 +341,7 @@ public void testDifferentVehicles() {
 
         idx = createIndex(g, -1);
         FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("foot");
-        assertEquals(2, idx.findClosest(1, -1, new DefaultEdgeFilter(footEncoder)).getClosestNode());
+        assertEquals(2, idx.findClosest(1, -1, DefaultEdgeFilter.allEdges(footEncoder)).getClosestNode());
         Helper.close((Closeable) g);
     }
 }

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -465,12 +465,12 @@ public void testSearchWithFilter_issue318() {
         index.prepareIndex();
         index.setMaxRegionSearch(8);
 
-        EdgeFilter carFilter = new DefaultEdgeFilter(carEncoder, true, true);
+        EdgeFilter carFilter = DefaultEdgeFilter.allEdges(carEncoder);
         QueryResult qr = index.findClosest(0.03, 0.03, carFilter);
         assertTrue(qr.isValid());
         assertEquals(33, qr.getClosestNode());
 
-        EdgeFilter bikeFilter = new DefaultEdgeFilter(bikeEncoder, true, true);
+        EdgeFilter bikeFilter = DefaultEdgeFilter.allEdges(bikeEncoder);
         qr = index.findClosest(0.03, 0.03, bikeFilter);
         assertTrue(qr.isValid());
         assertEquals(2, qr.getClosestNode());

File: core/src/test/java/com/graphhopper/util/CHEdgeIteratorTest.java
Patch:
@@ -38,7 +38,7 @@ public void testUpdateFlags() {
         CarFlagEncoder carFlagEncoder = new CarFlagEncoder();
         EncodingManager encodingManager = new EncodingManager(carFlagEncoder);
         FastestWeighting weighting = new FastestWeighting(carFlagEncoder);
-        EdgeFilter carOutFilter = new DefaultEdgeFilter(carFlagEncoder, false, true);
+        EdgeFilter carOutFilter = DefaultEdgeFilter.outEdges(carFlagEncoder);
         GraphHopperStorage ghStorage = new GraphBuilder(encodingManager).setCHGraph(weighting).create();
         CHGraph g = ghStorage.getGraph(CHGraph.class, weighting);
         g.edge(0, 1).setDistance(12).setFlags(carFlagEncoder.setProperties(10, true, true));

File: core/src/test/java/com/graphhopper/util/DepthFirstSearchTest.java
Patch:
@@ -68,7 +68,7 @@ public boolean goFurther(int v) {
         g.edge(5, 6, 1, false);
         g.edge(6, 4, 1, false);
 
-        dfs.start(g.createEdgeExplorer(new DefaultEdgeFilter(fe, false, true)), 1);
+        dfs.start(g.createEdgeExplorer(DefaultEdgeFilter.outEdges(fe)), 1);
 
         assertTrue(counter > 0);
         assertEquals("[1, 2, 3, 4, 5, 6]", list.toString());
@@ -96,7 +96,7 @@ public boolean goFurther(int v) {
         g.edge(2, 3, 1, false);
         g.edge(4, 3, 1, true);
 
-        dfs.start(g.createEdgeExplorer(new DefaultEdgeFilter(fe, false, true)), 1);
+        dfs.start(g.createEdgeExplorer(DefaultEdgeFilter.outEdges(fe)), 1);
 
         assertTrue(counter > 0);
         assertEquals("[1, 2, 3, 4]", list.toString());

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
Patch:
@@ -55,7 +55,7 @@ final class GraphExplorer {
 
     GraphExplorer(Graph graph, PtTravelTimeWeighting weighting, PtFlagEncoder flagEncoder, GtfsStorage gtfsStorage, RealtimeFeed realtimeFeed, boolean reverse, List<VirtualEdgeIteratorState> extraEdges, boolean walkOnly) {
         this.graph = graph;
-        this.edgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(flagEncoder, reverse, !reverse));
+        this.edgeExplorer = graph.createEdgeExplorer(reverse ? DefaultEdgeFilter.inEdges(flagEncoder) : DefaultEdgeFilter.outEdges(flagEncoder));
         this.flagEncoder = flagEncoder;
         this.weighting = weighting;
         this.gtfsStorage = gtfsStorage;

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -454,10 +454,10 @@ public Collection<TurnCostTableEntry> analyzeTurnRelation(FlagEncoder encoder, O
         EdgeExplorer edgeInExplorer = inExplorerMap.get(encoder);
 
         if (edgeOutExplorer == null || edgeInExplorer == null) {
-            edgeOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true));
+            edgeOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(encoder));
             outExplorerMap.put(encoder, edgeOutExplorer);
 
-            edgeInExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, false));
+            edgeInExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(encoder));
             inExplorerMap.put(encoder, edgeInExplorer);
         }
         return turnRelation.getRestrictionAsEntries(encoder, edgeOutExplorer, edgeInExplorer, this);

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -325,7 +325,7 @@ public void testFoot() {
         assertEquals(GHUtility.asSet(n10, n30, n40), GHUtility.getNeighbors(carAllExplorer.setBaseNode(n20)));
         assertEquals(GHUtility.asSet(n30, n40), GHUtility.getNeighbors(carOutExplorer.setBaseNode(n20)));
 
-        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
+        EdgeExplorer footOutExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(footEncoder));
         assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n10)));
         assertEquals(GHUtility.asSet(n20, n50), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n30)));
         assertEquals(GHUtility.asSet(n10, n30), GHUtility.getNeighbors(footOutExplorer.setBaseNode(n20)));
@@ -847,8 +847,8 @@ protected DataReader importData() throws IOException {
                 throw new RuntimeException(e);
             }
             osmReader.readGraph();
-            carOutExplorer = getGraphHopperStorage().createEdgeExplorer(new DefaultEdgeFilter(carEncoder, false, true));
-            carAllExplorer = getGraphHopperStorage().createEdgeExplorer(new DefaultEdgeFilter(carEncoder, true, true));
+            carOutExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.outEdges(carEncoder));
+            carAllExplorer = getGraphHopperStorage().createEdgeExplorer(DefaultEdgeFilter.allEdges(carEncoder));
             return osmReader;
         }
     }

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -547,7 +547,7 @@ Graph runAlgo(TestAlgoCollector testCollector, String osmFile,
 
             Collection<AlgoHelperEntry> prepares = RoutingAlgorithmIT.createAlgos(hopper, hints, tMode);
 
-            EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+            EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
             for (AlgoHelperEntry entry : prepares) {
                 algoEntry = entry;
                 LocationIndex idx = entry.getIdx();
@@ -595,7 +595,7 @@ public void testMonacoParallel() throws IOException {
         // also the preparing is too costly to be called for every thread
         int algosLength = 2;
         final Weighting weighting = new ShortestWeighting(encodingManager.getEncoder("car"));
-        final EdgeFilter filter = new DefaultEdgeFilter(carEncoder);
+        final EdgeFilter filter = DefaultEdgeFilter.allEdges(carEncoder);
         for (int no = 0; no < MAX; no++) {
             for (int instanceNo = 0; instanceNo < instances.size(); instanceNo++) {
                 String[] algos = new String[]{

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -267,7 +267,7 @@ public int doCalc(boolean warmup, int run) {
             print("unit_testsCH.get_weight", miniPerf);
         }
 
-        EdgeFilter outFilter = new DefaultEdgeFilter(encoder, false, true);
+        EdgeFilter outFilter = DefaultEdgeFilter.outEdges(encoder);
         final EdgeExplorer outExplorer = graph.createEdgeExplorer(outFilter);
         MiniPerfTest miniPerf = new MiniPerfTest() {
             @Override

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -370,7 +370,7 @@ private Path calcPath(RoutingAlgorithm algo) {
 //
 ////        System.out.println("path " + from + "->" + to);
 //        return algo.calcPath(from, to);
-        // System.out.println(GraphUtility.getNodeInfo(graph, 60139, new DefaultEdgeFilter(new CarFlagEncoder()).direction(false, true)));
+        // System.out.println(GraphUtility.getNodeInfo(graph, 60139, DefaultEdgeFilter.allEdges(new CarFlagEncoder()).direction(false, true)));
         // System.out.println(((GraphStorage) graph).debug(202947, 10));
 //        GraphUtility.printInfo(graph, 106511, 10);
         return algo.calcPath(162810, 35120);

File: web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java
Patch:
@@ -69,7 +69,7 @@ public Response doGet(
             throwArgExc("vehicle not supported:" + vehicle);
 
         FlagEncoder encoder = encodingManager.getEncoder(vehicle);
-        EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+        EdgeFilter edgeFilter = DefaultEdgeFilter.allEdges(encoder);
         LocationIndex locationIndex = graphHopper.getLocationIndex();
         QueryResult qr = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
         if (!qr.isValid())

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class GraphHopperWebIT {
 
-    public static final String KEY = System.getProperty("key", "missing key from command line, specify via -Dkey=$API_KEY");
+    public static final String KEY = System.getProperty("key", "78da6e9a-273e-43d1-bdda-8f24e007a1fa");
 
     private final GraphHopperWeb gh = new GraphHopperWeb();
     private final GraphHopperMatrixWeb ghMatrix = new GraphHopperMatrixWeb();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -519,7 +519,7 @@ public FlagEncoderFactory getFlagEncoderFactory() {
      * CmdArgs.readFromConfig("config.properties", "graphhopper.config")
      */
     public GraphHopper init(CmdArgs args) {
-        args = CmdArgs.readFromConfigAndMerge(args, "config", "graphhopper.config");
+        args.merge(CmdArgs.readFromSystemProperties());
         if (args.has("osmreader.osm"))
             throw new IllegalArgumentException("Instead osmreader.osm use datareader.file, for other changes see core/files/changelog.txt");
 

File: web/src/main/java/com/graphhopper/http/GraphHopperBundle.java
Patch:
@@ -157,8 +157,8 @@ public void initialize(Bootstrap<?> bootstrap) {
     }
 
     @Override
-    public void run(GraphHopperBundleConfiguration configuration, Environment environment) throws Exception {
-        configuration.getGraphHopperConfiguration().merge(CmdArgs.readFromConfigAndMerge(configuration.getGraphHopperConfiguration()));
+    public void run(GraphHopperBundleConfiguration configuration, Environment environment) {
+        configuration.getGraphHopperConfiguration().merge(CmdArgs.readFromSystemProperties());
 
         if (configuration.getGraphHopperConfiguration().has("gtfs.file")) {
             // switch to different API implementation when using Pt

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/Transfers.java
Patch:
@@ -43,7 +43,7 @@ class Transfers {
     List<Transfer> getTransfersToStop(String toStopId, String toRouteId) {
         final List<Transfer> allInboundTransfers = transfersToStop.getOrDefault(toStopId, Collections.emptyList());
         final Map<String, List<Transfer>> byFromStop = allInboundTransfers.stream()
-                .filter(t -> t.transfer_type == 2)
+                .filter(t -> t.transfer_type == 0 || t.transfer_type == 2)
                 .filter(t -> t.to_route_id == null || toRouteId.equals(t.to_route_id))
                 .collect(Collectors.groupingBy(t -> t.from_stop_id));
         final List<Transfer> result = new ArrayList<>();
@@ -68,7 +68,7 @@ List<Transfer> getTransfersToStop(String toStopId, String toRouteId) {
     List<Transfer> getTransfersFromStop(String fromStopId, String fromRouteId) {
         final List<Transfer> allOutboundTransfers = transfersFromStop.getOrDefault(fromStopId, Collections.emptyList());
         final Map<String, List<Transfer>> byToStop = allOutboundTransfers.stream()
-                .filter(t -> t.transfer_type == 2)
+                .filter(t -> t.transfer_type == 0 || t.transfer_type == 2)
                 .filter(t -> t.from_route_id == null || fromRouteId.equals(t.from_route_id))
                 .collect(Collectors.groupingBy(t -> t.to_stop_id));
         final List<Transfer> result = new ArrayList<>();

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/fare/Fares.java
Patch:
@@ -49,7 +49,7 @@ private static Optional<List<Ticket>> ticketsBruteForce(Map<String, Fare> fares,
         // Take the cheapest.
         TicketPurchaseScoreCalculator ticketPurchaseScoreCalculator = new TicketPurchaseScoreCalculator();
         return allShoppingCarts(fares, trip)
-                .max(Comparator.comparingInt(ticketPurchaseScoreCalculator::calculateScore))
+                .max(Comparator.comparingDouble(ticketPurchaseScoreCalculator::calculateScore))
                 .map(TicketPurchase::getTickets);
     }
 

File: reader-gtfs/src/main/java/com/graphhopper/gtfs/fare/FixedFareAttributeLoader.java
Patch:
@@ -44,5 +44,6 @@ public void loadOneRow() throws IOException {
         String fareId = getStringField("fare_id", true);
         final Fare fare = fares.get(fareId);
         fare.fare_attribute.transfers = getIntField("transfers", false, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
+        fare.fare_attribute.transfer_duration = getIntField("transfer_duration", false, 0, 24*60*60, 24*60*60);
     }
 }

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -29,7 +29,7 @@
  * @author Peter Karich
  */
 public class GHTreeMapComposed {
-    private static final Integer NOT_EMPTY = new Integer(-3);
+    private static final Integer NOT_EMPTY = -3;
     private final BitUtil bitUtil = BitUtil.BIG;
     private final TreeMap<Long, Integer> map;
 

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -94,7 +94,7 @@ public void initFromGraph() {
                 new ArrayBasedLegacyWitnessPathFinder(prepareGraph, turnWeighting, traversalMode, maxLevel) :
                 new MapBasedLegacyWitnessPathFinder(prepareGraph, turnWeighting, traversalMode, maxLevel);
         witnessPathFinder = arrayBasedWitnessPathFinder ?
-                new ArrayWitnessPathFinder(ghStorage, prepareGraph, turnWeighting) :
+                new WitnessPathFinder(ghStorage, prepareGraph, turnWeighting) :
                 new MapWitnessPathFinder(ghStorage, prepareGraph, turnWeighting);
         DefaultEdgeFilter inEdgeFilter = new DefaultEdgeFilter(encoder, true, false);
         DefaultEdgeFilter outEdgeFilter = new DefaultEdgeFilter(encoder, false, true);

File: core/src/test/java/com/graphhopper/routing/ch/WitnessPathFinderTest.java
Patch:
@@ -107,8 +107,8 @@ public void test_witness_bidirectional() {
         assertNull(result);
     }
 
-    private ArrayWitnessPathFinder createFinder() {
-        return new ArrayWitnessPathFinder(graph, chGraph, chTurnWeighting);
+    private WitnessPathFinder createFinder() {
+        return new WitnessPathFinder(graph, chGraph, chTurnWeighting);
     }
 
     private void setMaxLevelOnAllNodes() {

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -53,8 +53,8 @@ public void testSimpleRoute() {
         PathWrapper alt = res.getBest();
         isBetween(200, 250, alt.getPoints().size());
         isBetween(11000, 12000, alt.getDistance());
-        isBetween(310, 320, alt.getAscend());
-        isBetween(235, 245, alt.getDescend());
+        isBetween(240, 270, alt.getAscend());
+        isBetween(180, 200, alt.getDescend());
         isBetween(1000, 1500, alt.getRouteWeight());
 
 

File: core/src/test/java/com/graphhopper/routing/ch/NodeBasedNodeContractorTest.java
Patch:
@@ -53,6 +53,7 @@ public void setUp() {
     private NodeContractor createNodeContractor() {
         NodeContractor nodeContractor = new NodeBasedNodeContractor(dir, graph, lg, weighting);
         nodeContractor.initFromGraph();
+        nodeContractor.prepareContraction();
         return nodeContractor;
     }
 

File: core/src/main/java/com/graphhopper/routing/ch/NodeBasedNodeContractor.java
Patch:
@@ -129,13 +129,12 @@ public float calculatePriority(int node) {
     }
 
     @Override
-    public long contractNode(int node) {
+    public void contractNode(int node) {
         shortcuts.clear();
         long degree = findShortcuts(addScHandler.setNode(node));
         addedShortcutsCount += addShortcuts(shortcuts.keySet());
         // put weight factor on meanDegree instead of taking the average => meanDegree is more stable
         meanDegree = (meanDegree * 2 + degree) / 3;
-        return degree;
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java
Patch:
@@ -1158,7 +1158,7 @@ public void testNodeContraction_randomGraph_checkStatistics() {
         for (int i = 0; i < 10; ++i) {
             initialize();
             buildRandomGraph(seed);
-            System.out.println("graph for legacy aggressive search");
+//            System.out.println("graph for legacy aggressive search");
             GHUtility.printGraphForUnitTest(graph, encoder);
             EdgeBasedNodeContractor.searchType = SearchType.LEGACY_AGGRESSIVE;
 
@@ -1170,7 +1170,7 @@ public void testNodeContraction_randomGraph_checkStatistics() {
 
             initialize();
             buildRandomGraph(seed);
-            System.out.println("graph for aggressive search");
+//            System.out.println("graph for aggressive search");
             GHUtility.printGraphForUnitTest(graph, encoder);
             EdgeBasedNodeContractor.searchType = SearchType.AGGRESSIVE;
 

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -78,7 +78,7 @@ public void init(CmdArgs args) {
         // default is enabled & fastest
         String chWeightingsStr = args.get(CH.PREPARE + "weightings", "");
 
-        if ("no".equals(chWeightingsStr)) {
+        if ("no".equals(chWeightingsStr) || "false".equals(chWeightingsStr)) {
             // default is fastest and we need to clear this explicitly
             weightingsAsStrings.clear();
         } else if (!chWeightingsStr.isEmpty()) {

File: core/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -197,6 +197,7 @@ public static final class DETAILS {
         public static final String STREET_NAME = "street_name";
         public static final String EDGE_ID = "edge_id";
         public static final String TIME = "time";
+        public static final String DISTANCE = "distance";
     }
 
     public static final class PT {

File: core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
Patch:
@@ -47,6 +47,9 @@ public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requested
         if (requestedPathDetails.contains(TIME))
             builders.add(new TimeDetails(weighting));
 
+        if (requestedPathDetails.contains(DISTANCE))
+            builders.add(new DistanceDetails());
+
         if (requestedPathDetails.size() != builders.size()) {
             throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
         }

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperGtfsIT.java
Patch:
@@ -201,10 +201,9 @@ public void testRoute1ProfileLatestDeparture() {
                 FROM_LAT, FROM_LON,
                 TO_LAT, TO_LON
         );
-        ghRequest.getHints().put(Parameters.PT.EARLIEST_DEPARTURE_TIME, LocalDateTime.of(2007,1,2,13,0).atZone(zoneId).toInstant());
+        ghRequest.getHints().put(Parameters.PT.EARLIEST_DEPARTURE_TIME, LocalDateTime.of(2007,1,1,13,0).atZone(zoneId).toInstant());
         ghRequest.getHints().put(Parameters.PT.ARRIVE_BY, true);
         ghRequest.getHints().put(Parameters.PT.PROFILE_QUERY, true);
-        // TODO: Find the problem with 1.1.2007
         ghRequest.getHints().put(Parameters.PT.IGNORE_TRANSFERS, true);
         ghRequest.getHints().put(Parameters.PT.LIMIT_SOLUTIONS, 4);
 

File: tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
Patch:
@@ -44,7 +44,7 @@ public void setGraphics2D(Graphics2D g2) {
     }
 
     @Override
-    public void updateBestPath(EdgeIteratorState edgeState, AStar.AStarEntry entry, int traversalId, boolean reverse) {
+    public void updateBestPath(EdgeIteratorState edgeState, SPTEntry entry, int traversalId, boolean reverse) {
         if (g2 != null) {
             mg.plotNode(g2, traversalId, Color.YELLOW);
         }

File: web/src/main/java/com/graphhopper/http/GraphHopperBundleConfiguration.java
Patch:
@@ -20,8 +20,8 @@
 
 import com.graphhopper.util.CmdArgs;
 
-public interface HasGraphHopperConfiguration {
+public interface GraphHopperBundleConfiguration {
 
-    CmdArgs graphhopper();
+    CmdArgs getGraphHopperConfiguration();
 
 }

File: web/src/main/java/com/graphhopper/http/cli/ImportCommand.java
Patch:
@@ -32,7 +32,7 @@ public ImportCommand() {
 
     @Override
     protected void run(Bootstrap<GraphHopperServerConfiguration> bootstrap, Namespace namespace, GraphHopperServerConfiguration configuration) throws Exception {
-        final GraphHopperManaged graphHopper = new GraphHopperManaged(configuration.graphhopper());
+        final GraphHopperManaged graphHopper = new GraphHopperManaged(configuration.getGraphHopperConfiguration());
         graphHopper.start();
         graphHopper.stop();
     }

File: web/src/test/java/com/graphhopper/http/ChangeGraphResourceIT.java
Patch:
@@ -41,7 +41,7 @@ public class ChangeGraphResourceIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put(Parameters.CH.PREPARE + "weightings", "no").
                 put("graph.flag_encoders", "car").
                 put("web.change_graph.enabled", "true").

File: web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
Patch:
@@ -41,7 +41,7 @@ public class GraphHopperDataflagEncoderSpatialRulesIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.flag_encoders", "generic").
                 put("prepare.ch.weightings", "no").
                 put("spatial_rules.location", "../core/files/spatialrules/countries.geo.json").

File: web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
Patch:
@@ -42,7 +42,7 @@ public class GraphHopperLandmarksIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.flag_encoders", "car").
                 put("prepare.ch.weightings", "fastest").
                 put("prepare.lm.weightings", "fastest").

File: web/src/test/java/com/graphhopper/http/NearestResourceIT.java
Patch:
@@ -40,7 +40,7 @@ public class NearestResourceIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.flag_encoders", "car").
                 put("prepare.ch.weightings", "fastest").
                 put("datareader.file", "../core/files/andorra.osm.pbf").

File: web/src/test/java/com/graphhopper/http/NearestResourceWithEleIT.java
Patch:
@@ -41,7 +41,7 @@ public class NearestResourceWithEleIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
                 put(Parameters.CH.PREPARE + "weightings", "no").

File: web/src/test/java/com/graphhopper/http/RouteResourceIT.java
Patch:
@@ -50,7 +50,7 @@ public class RouteResourceIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.flag_encoders", "car").
                 put("prepare.ch.weightings", "fastest").
                 put("prepare.min_network_size", "0").

File: web/src/test/java/com/graphhopper/http/RouteResourceWithEleIT.java
Patch:
@@ -40,7 +40,7 @@ public class RouteResourceWithEleIT {
     private static final GraphHopperServerConfiguration config = new GraphHopperServerConfiguration();
 
     static {
-        config.graphhopper.merge(new CmdArgs().
+        config.getGraphHopperConfiguration().merge(new CmdArgs().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
                 put(Parameters.CH.PREPARE + "weightings", "no").

File: core/src/main/java/com/graphhopper/routing/ch/SmartWitnessPathFinder.java
Patch:
@@ -13,10 +13,10 @@
 public abstract class SmartWitnessPathFinder {
     // for very dense graph a higher initial value is probably appropriate, the initial value does not play a big role
     // because this parameter will be adjusted automatically during the graph contraction
-    public static int initialMaxSettledEdges = 10;
+    public static int initialMaxSettledEdges = 100;
     // number of standard deviations above mean where distribution is truncated, for a normal distribution for
     // example sigmaFactor = 2 means about 95% of all observations are included
-    public static double sigmaFactor = 3;
+    public static double sigmaFactor = 3.0;
 
     protected final GraphHopperStorage graph;
     protected final CHGraph chGraph;

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -39,7 +39,7 @@
 public class EdgeBasedNodeContractor extends AbstractNodeContractor {
     // todo: modify code such that logging does not alter performance 
     private static final Logger LOGGER = LoggerFactory.getLogger(EdgeBasedNodeContractor.class);
-    //        public static SearchType searchType = SearchType.AGGRESSIVE;
+    //            public static SearchType searchType = SearchType.AGGRESSIVE;
     public static SearchType searchType = SearchType.SMART;
     public static boolean arrayBasedWitnessPathFinder = true;
     public static float edgeDifferenceWeight = 1;

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -39,7 +39,7 @@
 public class EdgeBasedNodeContractor extends AbstractNodeContractor {
     // todo: modify code such that logging does not alter performance 
     private static final Logger LOGGER = LoggerFactory.getLogger(EdgeBasedNodeContractor.class);
-    //    public static SearchType searchType = SearchType.AGGRESSIVE;
+    //        public static SearchType searchType = SearchType.AGGRESSIVE;
     public static SearchType searchType = SearchType.SMART;
     public static boolean arrayBasedWitnessPathFinder = true;
     public static float edgeDifferenceWeight = 1;

File: core/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java
Patch:
@@ -1144,7 +1144,6 @@ public void testNodeContraction_numPolledEdges() {
         nodeContractor.contractNode(0);
         assertTrue("too many edges polled: " + nodeContractor.getNumPolledEdges(),
                 nodeContractor.getNumPolledEdges() <= 8);
-        // todo: make sure that 8 or less edges got polled
     }
 
     @Test

File: tools/src/main/java/com/graphhopper/tools/CHMeasurement.java
Patch:
@@ -212,7 +212,7 @@ private ManualPrepareContractionHierarchies contractGraphWithRandomTurnCosts() {
      * The queries are compared with a normal AStar search for comparison and to ensure correctness.
      */
     private static void testPerformanceAutomaticNodeOrdering(String[] args) {
-        String osmFile = "local/maps/bremen-latest.osm.pbf";
+        String osmFile = "local/maps/berlin-latest.osm.pbf";
         int periodicUpdates = 20;
         int lazyUpdates = 100;
         int neighborUpdates = 4;

File: core/src/main/java/com/graphhopper/util/details/DistanceDetails.java
Patch:
@@ -1,4 +1,4 @@
-1package com.graphhopper.util.details;
+package com.graphhopper.util.details;
 
 import com.graphhopper.util.EdgeIteratorState;
 

File: core/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -197,6 +197,7 @@ public static final class DETAILS {
         public static final String STREET_NAME = "street_name";
         public static final String EDGE_ID = "edge_id";
         public static final String TIME = "time";
+        public static final String DISTANCE = "distance";
     }
 
     public static final class PT {

File: core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
Patch:
@@ -47,6 +47,9 @@ public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requested
         if (requestedPathDetails.contains(TIME))
             builders.add(new TimeDetails(weighting));
 
+        if (requestedPathDetails.contains(DISTANCE))
+            builders.add(new DistanceDetails());
+
         if (requestedPathDetails.size() != builders.size()) {
             throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
         }

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCHNoSOD.java
Patch:
@@ -25,6 +25,9 @@
 public class DijkstraBidirectionCHNoSOD extends DijkstraBidirectionRef {
     public DijkstraBidirectionCHNoSOD(Graph graph, Weighting weighting, TraversalMode traversalMode) {
         super(graph, weighting, traversalMode);
+        if (traversalMode.isEdgeBased()) {
+            throw new IllegalArgumentException("Edge based traversal is not supported for CH");
+        }
     }
 
     @Override

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -56,7 +56,7 @@
  */
 public class Measurement {
     private static final Logger logger = LoggerFactory.getLogger(Measurement.class);
-    private final Map<String, String> properties = new TreeMap<String, String>();
+    private final Map<String, String> properties = new TreeMap<>();
     private long seed;
     private int maxNode;
 

File: tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
Patch:
@@ -47,11 +47,11 @@ public void setGraphics2D(Graphics2D g2) {
     }
 
     @Override
-    public void updateBestPath(EdgeIteratorState es, SPTEntry bestEE, int currLoc) {
+    public void updateBestPath(EdgeIteratorState es, SPTEntry entry, int traversalId, boolean reverse) {
         if (g2 != null) {
-            mg.plotEdge(g2, na.getLat(bestEE.parent.adjNode), na.getLon(bestEE.parent.adjNode), na.getLat(currLoc), na.getLon(currLoc), .8f);
+            mg.plotEdge(g2, na.getLat(entry.parent.adjNode), na.getLon(entry.parent.adjNode), na.getLat(entry.adjNode), na.getLon(entry.adjNode), .8f);
         }
         // System.out.println("new node:" + currLoc);
-        super.updateBestPath(es, bestEE, currLoc);
+        super.updateBestPath(es, entry, traversalId, reverse);
     }
 }

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -112,11 +112,11 @@ public void setGraphics2D(Graphics2D g2) {
                     }
 
                     @Override
-                    public void updateBestPath(EdgeIteratorState es, SPTEntry bestEE, int currLoc) {
+                    public void updateBestPath(EdgeIteratorState es, SPTEntry entry, int traversalId, boolean reverse) {
                         if (g2 != null)
-                            mg.plotNode(g2, currLoc, Color.YELLOW, 6);
+                            mg.plotNode(g2, traversalId, Color.YELLOW, 6);
 
-                        super.updateBestPath(es, bestEE, currLoc);
+                        super.updateBestPath(es, entry, traversalId, reverse);
                     }
                 }
 

File: core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
Patch:
@@ -142,7 +142,7 @@ public Builder weighting(Weighting weighting) {
         }
 
         /**
-         * For possible values see Parameters.Algorithms
+         * For possible values see {@link Parameters.Algorithms}
          */
         public Builder algorithm(String algorithm) {
             this.opts.algorithm = algorithm;

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -50,8 +50,8 @@ public Dijkstra(Graph graph, Weighting weighting, TraversalMode tMode) {
     }
 
     protected void initCollections(int size) {
-        fromHeap = new PriorityQueue<SPTEntry>(size);
-        fromMap = new GHIntObjectHashMap<SPTEntry>(size);
+        fromHeap = new PriorityQueue<>(size);
+        fromMap = new GHIntObjectHashMap<>(size);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -61,7 +61,7 @@ public Path extract() {
             return this;
 
         if (sptEntry.adjNode != edgeTo.adjNode)
-            throw new IllegalStateException("Locations of the 'to'- and 'from'-Edge has to be the same." + toString() + ", fromEntry:" + sptEntry + ", toEntry:" + edgeTo);
+            throw new IllegalStateException("Locations of the 'to'- and 'from'-Edge have to be the same. " + toString() + ", fromEntry:" + sptEntry + ", toEntry:" + edgeTo);
 
         extractSW.start();
         if (switchFromAndToSPTEntry) {

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -52,7 +52,7 @@
  * @author Peter Karich
  */
 public class QueryGraph implements Graph {
-    final static int VE_BASE = 0, VE_BASE_REV = 1, VE_ADJ = 2, VE_ADJ_REV = 3;
+    static final int VE_BASE = 0, VE_BASE_REV = 1, VE_ADJ = 2, VE_ADJ_REV = 3;
     private static final AngleCalc AC = Helper.ANGLE_CALC;
     private final Graph mainGraph;
     private final NodeAccess mainNodeAccess;
@@ -61,7 +61,7 @@ public class QueryGraph implements Graph {
     private final QueryGraph baseGraph;
     private final GraphExtension wrappedExtension;
     // TODO when spreading it on different threads we need multiple independent explorers
-    private final Map<Integer, EdgeExplorer> cacheMap = new HashMap<Integer, EdgeExplorer>(4);
+    private final Map<Integer, EdgeExplorer> cacheMap = new HashMap<>(4);
 
     // For every virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap.
     List<VirtualEdgeIteratorState> virtualEdges;

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -39,8 +39,8 @@
 import static com.graphhopper.util.Parameters.CH.DISABLE;
 
 /**
- * This class implements the CH decorator and provides several helper methods related to CH
- * preparation and its vehicle profiles.
+ * This class implements the CH decorator for the routing algorithm factory and provides several
+ * helper methods related to CH preparation and its vehicle profiles.
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/ch/NodeContractor.java
Patch:
@@ -69,7 +69,7 @@ class NodeContractor {
     void initFromGraph() {
         // todo: do we really need this method ? the problem is that ghStorage/prepareGraph can potentially be modified
         // between the constructor call and contractNode,calcShortcutCount etc. ...
-        maxLevel = prepareGraph.getNodes() + 1;
+        maxLevel = prepareGraph.getNodes();
         maxEdgesCount = ghStorage.getAllEdges().length();
         ignoreNodeFilter = new IgnoreNodeFilter(prepareGraph, maxLevel);
         FlagEncoder prepareFlagEncoder = prepareWeighting.getFlagEncoder();

File: core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
Patch:
@@ -24,7 +24,7 @@
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
- * Used in CH preparation and therefor assumed that all edges are of type CHEdgeIteratorState
+ * Used in CH preparation and therefore assumed that all edges are of type CHEdgeIteratorState
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -112,6 +112,8 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
             String debug = ", algoInit:" + sw.stop().getSeconds() + "s";
 
             sw = new StopWatch().start();
+
+            // calculate paths
             List<Path> tmpPathList = algo.calcPaths(fromQResult.getClosestNode(), toQResult.getClosestNode());
             debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s";
             if (tmpPathList.isEmpty())
@@ -136,6 +138,7 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
                 throw new IllegalArgumentException("No path found due to maximum nodes exceeded " + algoOpts.getMaxVisitedNodes());
 
             visitedNodesSum += algo.getVisitedNodes();
+            altResponse.addDebugInfo("visited nodes sum: " + visitedNodesSum);
             fromQResult = toQResult;
         }
 

File: core/src/main/java/com/graphhopper/routing/util/AbstractAlgoPreparation.java
Patch:
@@ -26,10 +26,12 @@ public abstract class AbstractAlgoPreparation {
     public void doWork() {
         if (prepared)
             throw new IllegalStateException("Call doWork only once!");
-
         prepared = true;
+        doSpecificWork();
     }
 
+    protected abstract void doSpecificWork();
+
     public boolean isPrepared() {
         return prepared;
     }

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -599,7 +599,7 @@ else if (maxTurnCosts == 1) {
             if (costs != 0 || Double.isInfinite(costs))
                 throw new IllegalArgumentException("Restricted turn can only have infinite costs (or use 0)");
         } else if (costs >= maxTurnCosts)
-            throw new IllegalArgumentException("Cost is too high. Or specifiy restricted == true");
+            throw new IllegalArgumentException("Cost is too high. Or specify restricted == true");
 
         if (costs < 0)
             throw new IllegalArgumentException("Turn costs cannot be negative");
@@ -682,7 +682,7 @@ public double getDouble(long flags, int key) {
      */
     protected double applyMaxSpeed(ReaderWay way, double speed) {
         double maxSpeed = getMaxSpeed(way);
-        // We obay speed limits
+        // We obey speed limits
         if (maxSpeed >= 0) {
             // We assume that the average speed is 90% of the allowed maximum
             return maxSpeed * 0.9;

File: core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
Patch:
@@ -22,7 +22,7 @@
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
- * Only certain nodes are accepted and therefor the others are ignored.
+ * Only accepts edges leading to equal and higher level nodes. Used in CH preparation.
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/storage/GraphExtension.java
Patch:
@@ -23,12 +23,12 @@
  */
 public interface GraphExtension extends Storable<GraphExtension> {
     /**
-     * @return true, if and only if, if an additional field at the graphs node storage is required
+     * @return true, if and only if an additional field at the graphs node storage is required
      */
     boolean isRequireNodeField();
 
     /**
-     * @return true, if and only if, if an additional field at the graphs edge storage is required
+     * @return true, if and only if an additional field at the graphs edge storage is required
      */
     boolean isRequireEdgeField();
 

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -47,7 +47,7 @@ public final class GraphHopperStorage implements GraphStorage, Graph {
     private final StorableProperties properties;
     private final BaseGraph baseGraph;
     // same flush order etc
-    private final Collection<CHGraphImpl> chGraphs = new ArrayList<CHGraphImpl>(5);
+    private final Collection<CHGraphImpl> chGraphs = new ArrayList<>(5);
 
     public GraphHopperStorage(Directory dir, EncodingManager encodingManager, boolean withElevation, GraphExtension extendedStorage) {
         this(Collections.<Weighting>emptyList(), dir, encodingManager, withElevation, extendedStorage);
@@ -100,7 +100,7 @@ public <T extends Graph> T getGraph(Class<T> clazz, Weighting weighting) {
         if (weighting == null)
             throw new IllegalStateException("Cannot find CHGraph with null weighting");
 
-        List<Weighting> existing = new ArrayList<Weighting>();
+        List<Weighting> existing = new ArrayList<>();
         for (CHGraphImpl cg : chGraphs) {
             if (cg.getWeighting() == weighting)
                 return (T) cg;
@@ -127,7 +127,7 @@ public boolean isCHPossible() {
     }
 
     public List<Weighting> getCHWeightings() {
-        List<Weighting> list = new ArrayList<Weighting>(chGraphs.size());
+        List<Weighting> list = new ArrayList<>(chGraphs.size());
         for (CHGraphImpl cg : chGraphs) {
             list.add(cg.getWeighting());
         }

File: core/src/main/java/com/graphhopper/util/StopWatch.java
Patch:
@@ -58,7 +58,7 @@ public StopWatch stop() {
      * @return the time delta in milliseconds
      */
     public long getTime() {
-        return nanoTime / 1000000;
+        return nanoTime / 1_000_000;
     }
 
     public long getNanos() {

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -407,11 +407,11 @@ public void testMaxVisitedNodes() {
         assertFalse(p.isFound());
     }
 
-    // 1-2-3-4-5
+    // 0-1-2-3-4
     // |     / |
-    // |    9  |
+    // |    8  |
     // \   /   /
-    //  8-7-6-/
+    //  7-6-5-/
     @Test
     public void testBidirectional2() {
         GraphHopperStorage graph = createGHStorage(false);

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -166,7 +166,7 @@ protected LocationIndex createLocationIndex(Directory dir) {
             float perRun = sw.stop().getSeconds() / ((float) (N - noJvmWarming));
             System.out.println("# " + getClass().getSimpleName() + " " + entry
                     + ":" + sw.stop().getSeconds() + ", per run:" + perRun);
-            assertTrue("speed to low!? " + perRun + " per run", perRun < 0.08);
+            assertTrue("speed too low!? " + perRun + " per run", perRun < 0.08);
         }
     }
 }

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -296,7 +296,7 @@ public void testSave_and_Freeze() throws IOException {
         assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)));
         assertEquals(1, GHUtility.count(chGraph.createEdgeExplorer().setBaseNode(1)));
 
-        // base graph does not see shortcut        
+        // base graph does not see shortcut
         assertEquals(0, GHUtility.count(graph.createEdgeExplorer().setBaseNode(2)));
         assertEquals(1, GHUtility.count(chGraph.createEdgeExplorer().setBaseNode(2)));
 

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -268,7 +268,7 @@ public void paintComponent(Graphics2D g2) {
                     g2.setColor(color);
                     boolean fwd = encoder.isForward(edge.getFlags());
                     boolean bwd = encoder.isBackward(edge.getFlags());
-                    float width = speed > 90? 1f : 0.8f;
+                    float width = speed > 90 ? 1f : 0.8f;
                     if (fwd && !bwd) {
                         mg.plotDirectedEdge(g2, lat, lon, lat2, lon2, width);
                     } else {

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -80,7 +80,7 @@ public void init(CmdArgs args) {
         // default is enabled & fastest
         String chWeightingsStr = args.get(CH.PREPARE + "weightings", "");
 
-        if ("no".equals(chWeightingsStr)) {
+        if ("no".equals(chWeightingsStr) || "false".equals(chWeightingsStr)) {
             // default is fastest and we need to clear this explicitely
             weightingsAsStrings.clear();
         } else if (!chWeightingsStr.isEmpty()) {

File: core/src/main/java/com/graphhopper/routing/GenericDijkstraBidirection.java
Patch:
@@ -70,7 +70,6 @@ protected void initFrom(int from, double weight) {
         }
     }
 
-
     @Override
     protected void initTo(int to, double weight) {
         currTo = createStartEntry(to, weight, true);
@@ -217,7 +216,7 @@ private void fillEdges(T currEdge, PriorityQueue<T> prioQueue,
     }
 
     protected void updateBestPath(EdgeIteratorState edgeState, T entry, int traversalId, boolean reverse) {
-        SPTEntry entryOther = bestWeightMapOther.get(traversalId);
+        T entryOther = bestWeightMapOther.get(traversalId);
         if (entryOther == null)
             return;
 
@@ -228,7 +227,7 @@ protected void updateBestPath(EdgeIteratorState edgeState, T entry, int traversa
                 throw new IllegalStateException("cannot happen for edge based execution of " + getName());
 
             if (entryOther.adjNode != entry.adjNode) {
-                // prevents the path to contain the edge at the meeting point twice and subtract the weight (excluding turn weight => no previous edge)
+                // prevents the path to contain the edge at the meeting point twice and subtracts the weight (excluding turn weight => no previous edge)
                 entry = getParent(entry);
                 weight -= weighting.calcWeight(edgeState, reverse, EdgeIterator.NO_EDGE);
             } else if (!traversalMode.hasUTurnSupport())

File: core/src/main/java/com/graphhopper/routing/ch/AbstractNodeContractor.java
Patch:
@@ -32,7 +32,7 @@ abstract class AbstractNodeContractor implements NodeContractor {
     public void initFromGraph() {
         // todo: do we really need this method ? the problem is that ghStorage/prepareGraph can potentially be modified
         // between the constructor call and contractNode,calcShortcutCount etc. ...
-        maxLevel = prepareGraph.getNodes() + 1;
+        maxLevel = prepareGraph.getNodes();
         maxEdgesCount = ghStorage.getAllEdges().length();
     }
 

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -79,7 +79,7 @@ public EdgeBasedNodeContractor(Directory dir, GraphHopperStorage ghStorage, CHGr
     @Override
     public void initFromGraph() {
         super.initFromGraph();
-        maxLevel = prepareGraph.getNodes() + 1;
+        maxLevel = prepareGraph.getNodes();
         witnessPathFinder = arrayBasedWitnessPathFinder ?
                 new ArrayBasedWitnessPathFinder(prepareGraph, turnWeighting, traversalMode, maxLevel) :
                 new MapBasedWitnessPathFinder(prepareGraph, turnWeighting, traversalMode, maxLevel);

File: core/src/main/java/com/graphhopper/routing/ch/ManualPrepareContractionHierarchies.java
Patch:
@@ -64,7 +64,7 @@ protected void runGraphContraction() {
     private void setMaxLevelOnAllNodes() {
         int nodes = prepareGraph.getNodes();
         for (int node = 0; node < nodes; node++) {
-            prepareGraph.setLevel(node, nodes + 1);
+            prepareGraph.setLevel(node, nodes);
         }
     }
 

File: core/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java
Patch:
@@ -1012,7 +1012,7 @@ private Set<Shortcut> setOf(Shortcut... shortcuts) {
     private void setMaxLevelOnAllNodes() {
         int nodes = chGraph.getNodes();
         for (int node = 0; node < nodes; node++) {
-            chGraph.setLevel(node, nodes + 1);
+            chGraph.setLevel(node, nodes);
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCHNoSOD.java
Patch:
@@ -26,7 +26,8 @@ public class DijkstraBidirectionCHNoSOD extends DijkstraBidirectionRef {
     public DijkstraBidirectionCHNoSOD(Graph graph, Weighting weighting, TraversalMode traversalMode) {
         super(graph, weighting, traversalMode);
         if (traversalMode.isEdgeBased()) {
-            throw new IllegalArgumentException("Edge based traversal is not supported for CH");
+            throw new IllegalArgumentException("For edge based graph traversal " +
+                    " you need to use AStar/DijkstraBidirectionEdgeCHNoSOD instead");
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -42,8 +42,8 @@ protected SPTEntry createStartEntry(int node, double weight, boolean reverse) {
     }
 
     @Override
-    protected SPTEntry createEntry(EdgeIteratorState iter, double weight, SPTEntry parent, boolean reverse) {
-        SPTEntry entry = new SPTEntry(iter.getEdge(), iter.getAdjNode(), weight);
+    protected SPTEntry createEntry(EdgeIteratorState edge, int edgeId, double weight, SPTEntry parent, boolean reverse) {
+        SPTEntry entry = new SPTEntry(edge.getEdge(), edge.getAdjNode(), weight);
         entry.parent = parent;
         return entry;
     }

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -154,7 +154,8 @@ private static void printUnitTestEdge(FlagEncoder flagEncoder, EdgeIteratorState
         }
         int from = fwd ? edge.getBaseNode() : edge.getAdjNode();
         int to = fwd ? edge.getAdjNode() : edge.getBaseNode();
-        System.out.printf("graph.edge(%d, %d, %f, %s);\n", from, to, edge.getDistance(), fwd && bwd ? "true" : "false");
+        System.out.printf(Locale.ROOT,
+                "graph.edge(%d, %d, %f, %s);\n", from, to, edge.getDistance(), fwd && bwd ? "true" : "false");
     }
 
     public static void printInfo(final Graph g, int startNode, final int counts, final EdgeFilter filter) {

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -423,7 +423,7 @@ public Weighting getWeighting() {
     }
 
     private String getTimesAsString() {
-        return String.format(
+        return String.format(Locale.ROOT,
                 "t(dijk): %6.2f, t(period): %6.2f, t(lazy): %6.2f, t(neighbor): %6.2f",
                 dijkstraTime, periodTime, lazyTime, neighborTime);
     }
@@ -484,7 +484,8 @@ public String toString() {
     }
 
     private void logStats(long counter, int updateCounter) {
-        logger.info(String.format("%10s, updates: %2d, nodes: %10s, shortcuts: %10s, dijkstras: %10s, %s, meanDegree: %2d, %s, %s",
+        logger.info(String.format(Locale.ROOT,
+                "%10s, updates: %2d, nodes: %10s, shortcuts: %10s, dijkstras: %10s, %s, meanDegree: %2d, %s, %s",
                 nf(counter), updateCounter, nf(sortedNodes.getSize()),
                 nf(nodeContractor.getAddedShortcutsCount()), nf(nodeContractor.getDijkstraCount()),
                 getTimesAsString(), (long) meanDegree, nodeContractor.getPrepareAlgoMemoryUsage(),

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -134,7 +134,7 @@ public static void printGraphForUnitTest(Graph g, FlagEncoder encoder, BBox bBox
         NodeAccess na = g.getNodeAccess();
         for (int node = 0; node < g.getNodes(); ++node) {
             if (bBox.contains(na.getLat(node), na.getLon(node))) {
-                System.out.printf("na.setNode(%d, %f, %f);\n", node, na.getLat(node), na.getLon(node));
+                System.out.printf(Locale.ROOT, "na.setNode(%d, %f, %f);\n", node, na.getLat(node), na.getLon(node));
             }
         }
         AllEdgesIterator iter = g.getAllEdges();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1219,7 +1219,7 @@ protected void cleanUp() {
         preparation.setMinOneWayNetworkSize(minOneWayNetworkSize);
         preparation.doWork();
         int currNodeCount = ghStorage.getNodes();
-        logger.info("edges: " + ghStorage.getAllEdges().getMaxId() + ", nodes " + currNodeCount
+        logger.info("edges: " + ghStorage.getAllEdges().length() + ", nodes " + currNodeCount
                 + ", there were " + preparation.getMaxSubnetworks()
                 + " subnetworks. removed them => " + (prevNodeCount - currNodeCount)
                 + " less nodes");

File: core/src/main/java/com/graphhopper/reader/dem/AbstractEdgeElevationInterpolator.java
Patch:
@@ -81,7 +81,7 @@ public void execute() {
 
     private void interpolateElevationsOfTowerNodes() {
         final AllEdgesIterator edge = storage.getAllEdges();
-        final GHBitSet visitedEdgeIds = new GHBitSetImpl(edge.getMaxId());
+        final GHBitSet visitedEdgeIds = new GHBitSetImpl(edge.length());
         final EdgeExplorer edgeExplorer = storage.createEdgeExplorer();
 
         while (edge.next()) {

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -154,7 +154,7 @@ public QueryGraph(Graph graph) {
         mainGraph = graph;
         mainNodeAccess = graph.getNodeAccess();
         mainNodes = graph.getNodes();
-        mainEdges = graph.getAllEdges().getMaxId();
+        mainEdges = graph.getAllEdges().length();
 
         if (mainGraph.getExtension() instanceof TurnCostExtension)
             wrappedExtension = new QueryGraphTurnExt();

File: core/src/main/java/com/graphhopper/routing/ch/NodeContractor.java
Patch:
@@ -70,7 +70,7 @@ void initFromGraph() {
         // todo: do we really need this method ? the problem is that ghStorage/prepareGraph can potentially be modified
         // between the constructor call and contractNode,calcShortcutCount etc. ...
         maxLevel = prepareGraph.getNodes() + 1;
-        maxEdgesCount = ghStorage.getAllEdges().getMaxId();
+        maxEdgesCount = ghStorage.getAllEdges().length();
         ignoreNodeFilter = new IgnoreNodeFilter(prepareGraph, maxLevel);
         FlagEncoder prepareFlagEncoder = prepareWeighting.getFlagEncoder();
         vehicleInExplorer = prepareGraph.createEdgeExplorer(new DefaultEdgeFilter(prepareFlagEncoder, true, false));
@@ -247,7 +247,7 @@ private void setOrigEdgeCount(int edgeId, int value) {
             if (value != 1)
                 throw new IllegalStateException("Trying to set original edge count for normal edge to a value = " + value
                         + ", edge:" + (edgeId + maxEdgesCount) + ", max:" + maxEdgesCount + ", graph.max:" +
-                        prepareGraph.getAllEdges().getMaxId());
+                        prepareGraph.getAllEdges().length());
             return;
         }
 

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -238,7 +238,7 @@ private void contractNodes() {
         // node priorities all shortcut searches are cancelled immediately and all possible shortcuts are counted because
         // no witness path can be found. this is not really what we want, but changing it requires re-optimizing the
         // graph contraction parameters, because it affects the node contraction order.
-        meanDegree = prepareGraph.getAllEdges().getMaxId() / prepareGraph.getNodes();
+        meanDegree = prepareGraph.getAllEdges().length() / prepareGraph.getNodes();
         int level = 1;
         long counter = 0;
         int initSize = sortedNodes.getSize();

File: core/src/main/java/com/graphhopper/routing/util/AllEdgesIterator.java
Patch:
@@ -24,7 +24,7 @@
  */
 public interface AllEdgesIterator extends EdgeIterator {
     /**
-     * @return the maximum edgeId in the graph which is roughly the number of edges.
+     * @return the maximum edgeId in the graph plus 1
      */
-    int getMaxId();
+    int length();
 }

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -1008,7 +1008,7 @@ private AllEdgeIterator(BaseGraph baseGraph, EdgeAccess edgeAccess) {
         }
 
         @Override
-        public int getMaxId() {
+        public int length() {
             return baseGraph.edgeCount;
         }
 

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -593,8 +593,8 @@ public final long getFlags() {
         }
 
         @Override
-        public int getMaxId() {
-            return super.getMaxId() + shortcutCount;
+        public int length() {
+            return super.length() + shortcutCount;
         }
 
         @Override

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -18,8 +18,6 @@
 package com.graphhopper.util;
 
 import com.carrotsearch.hppc.IntIndexedContainer;
-import com.carrotsearch.hppc.LongArrayList;
-import com.carrotsearch.hppc.LongIndexedContainer;
 import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHBitSetImpl;
 import com.graphhopper.coll.GHIntArrayList;
@@ -116,7 +114,7 @@ public static List<Integer> getEdgeIds(EdgeIterator iter) {
     }
 
     public static void printEdgeInfo(final Graph g, FlagEncoder encoder) {
-        System.out.println("-- Graph n:" + g.getNodes() + " e:" + g.getAllEdges().getMaxId() + " ---");
+        System.out.println("-- Graph n:" + g.getNodes() + " e:" + g.getAllEdges().length() + " ---");
         AllEdgesIterator iter = g.getAllEdges();
         while (iter.next()) {
             String sc = "";

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -927,14 +927,14 @@ public void testGetAllEdgesWithDelete() {
         graph.edge(2, 3, 1, true);
         AllEdgesIterator iter = graph.getAllEdges();
         assertEquals(4, GHUtility.count(iter));
-        assertEquals(4, iter.getMaxId());
+        assertEquals(4, iter.length());
 
         // delete
         graph.markNodeRemoved(1);
         graph.optimize();
         iter = graph.getAllEdges();
         assertEquals(2, GHUtility.count(iter));
-        assertEquals(4, iter.getMaxId());
+        assertEquals(4, iter.length());
 
         iter = graph.getAllEdges();
         assertTrue(iter.next());

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -309,8 +309,8 @@ public void testSave_and_Freeze() throws IOException {
 
         chGraph = getGraph(graph);
         assertEquals(10, chGraph.getNodes());
-        assertEquals(2, graph.getAllEdges().getMaxId());
-        assertEquals(3, chGraph.getAllEdges().getMaxId());
+        assertEquals(2, graph.getAllEdges().length());
+        assertEquals(3, chGraph.getAllEdges().length());
         assertEquals(1, GHUtility.count(chGraph.createEdgeExplorer().setBaseNode(2)));
 
         AllCHEdgesIterator iter = chGraph.getAllEdges();

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java
Patch:
@@ -218,7 +218,7 @@ public void testDoThrowExceptionIfDimDoesNotMatch() {
     public void testIdentical() {
         GraphHopperStorage store = new GraphHopperStorage(new RAMDirectory(), encodingManager, true, new GraphExtension.NoOpExtension());
         assertEquals(store.getNodes(), store.getGraph(Graph.class).getNodes());
-        assertEquals(store.getAllEdges().getMaxId(), store.getGraph(Graph.class).getAllEdges().getMaxId());
+        assertEquals(store.getAllEdges().length(), store.getGraph(Graph.class).getAllEdges().length());
     }
 
     public void testAdditionalEdgeField() {

File: core/src/test/java/com/graphhopper/util/GHUtilityTest.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.carrotsearch.hppc.LongArrayList;
 import com.graphhopper.coll.GHIntLongHashMap;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
@@ -113,7 +112,7 @@ public void testCopyWithSelfRef() {
         CHGraph lg = new GraphBuilder(encodingManager).chGraphCreate(new FastestWeighting(carEncoder));
         GHUtility.copyTo(g, lg);
 
-        assertEquals(g.getAllEdges().getMaxId(), lg.getAllEdges().getMaxId());
+        assertEquals(g.getAllEdges().length(), lg.getAllEdges().length());
     }
 
     @Test

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
Patch:
@@ -165,7 +165,7 @@ GHResponse route() {
         private void substitutePointWithVirtualNode(int index, boolean reverse, GHPoint ghPoint, ArrayList<QueryResult> allQueryResults) {
             final GraphExplorer graphExplorer = new GraphExplorer(queryGraph, weighting, flagEncoder, gtfsStorage, realtimeFeed, reverse, extraEdges, true);
             int nextNodeId = graphWithExtraEdges.getNodes() + 2 + index; // FIXME: A number bigger than the number of nodes QueryGraph adds
-            int nextEdgeId = graphWithExtraEdges.getAllEdges().getMaxId() + 100; // FIXME: A number bigger than the number of edges QueryGraph adds
+            int nextEdgeId = graphWithExtraEdges.getAllEdges().length() + 100; // FIXME: A number bigger than the number of edges QueryGraph adds
 
             final List<Label> stationNodes = findStationNodes(graphExplorer, allQueryResults.get(index).getClosestNode(), reverse);
             for (Label stationNode : stationNodes) {

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
Patch:
@@ -88,8 +88,8 @@ public AllEdgesIterator getAllEdges() {
                 final AllEdgesIterator edge = baseGraph.getAllEdges();
                 return new AllEdgesIterator() {
                     @Override
-                    public int getMaxId() {
-                        return edge.getMaxId();
+                    public int length() {
+                        return edge.length();
                     }
 
                     @Override

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
Patch:
@@ -113,7 +113,7 @@ public static RealtimeFeed fromProtobuf(Graph graph, GtfsStorage staticGtfs, PtF
         final LinkedList<VirtualEdgeIteratorState> additionalEdges = new LinkedList<>();
         final Graph overlayGraph = new Graph() {
             int nNodes = 0;
-            int firstEdge = graph.getAllEdges().getMaxId()+1;
+            int firstEdge = graph.getAllEdges().length()+1;
             final NodeAccess nodeAccess = new NodeAccess() {
                 IntIntHashMap additionalNodeFields = new IntIntHashMap();
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
Patch:
@@ -85,9 +85,9 @@ public EdgeIteratorState getEdgeIteratorState(int edgeId, int adjNode) {
     public AllEdgesIterator getAllEdges() {
         return new AllEdgesIterator() {
             @Override
-            public int getMaxId() {
+            public int length() {
                 return IntStream.concat(
-                        IntStream.of(baseGraph.getAllEdges().getMaxId()),
+                        IntStream.of(baseGraph.getAllEdges().length()),
                         extraEdges.stream().mapToInt(VirtualEdgeIteratorState::getEdge))
                         .max().getAsInt();
             }

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -326,7 +326,7 @@ public void testFootAndCar() {
         instance.importOrLoad();
 
         assertEquals(5, instance.getGraphHopperStorage().getNodes());
-        assertEquals(8, instance.getGraphHopperStorage().getAllEdges().getMaxId());
+        assertEquals(8, instance.getGraphHopperStorage().getAllEdges().length());
 
         // A to D
         GHResponse grsp = instance.route(new GHRequest(11.1, 50, 11.3, 51).setVehicle("car"));
@@ -522,7 +522,7 @@ public void testFootOnly() {
         instance.importOrLoad();
 
         assertEquals(2, instance.getGraphHopperStorage().getNodes());
-        assertEquals(2, instance.getGraphHopperStorage().getAllEdges().getMaxId());
+        assertEquals(2, instance.getGraphHopperStorage().getAllEdges().length());
 
         // A to E only for foot
         GHResponse grsp = instance.route(new GHRequest(11.1, 50, 11.19, 52).setVehicle("foot"));

File: core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
Patch:
@@ -142,7 +142,7 @@ public Builder weighting(Weighting weighting) {
         }
 
         /**
-         * For possible values see Parameters.Algorithms
+         * For possible values see {@link Parameters.Algorithms}
          */
         public Builder algorithm(String algorithm) {
             this.opts.algorithm = algorithm;

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -50,8 +50,8 @@ public Dijkstra(Graph graph, Weighting weighting, TraversalMode tMode) {
     }
 
     protected void initCollections(int size) {
-        fromHeap = new PriorityQueue<SPTEntry>(size);
-        fromMap = new GHIntObjectHashMap<SPTEntry>(size);
+        fromHeap = new PriorityQueue<>(size);
+        fromMap = new GHIntObjectHashMap<>(size);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -61,7 +61,7 @@ public Path extract() {
             return this;
 
         if (sptEntry.adjNode != edgeTo.adjNode)
-            throw new IllegalStateException("Locations of the 'to'- and 'from'-Edge has to be the same." + toString() + ", fromEntry:" + sptEntry + ", toEntry:" + edgeTo);
+            throw new IllegalStateException("Locations of the 'to'- and 'from'-Edge have to be the same. " + toString() + ", fromEntry:" + sptEntry + ", toEntry:" + edgeTo);
 
         extractSW.start();
         if (switchFromAndToSPTEntry) {

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -52,7 +52,7 @@
  * @author Peter Karich
  */
 public class QueryGraph implements Graph {
-    final static int VE_BASE = 0, VE_BASE_REV = 1, VE_ADJ = 2, VE_ADJ_REV = 3;
+    static final int VE_BASE = 0, VE_BASE_REV = 1, VE_ADJ = 2, VE_ADJ_REV = 3;
     private static final AngleCalc AC = Helper.ANGLE_CALC;
     private final Graph mainGraph;
     private final NodeAccess mainNodeAccess;
@@ -61,7 +61,7 @@ public class QueryGraph implements Graph {
     private final QueryGraph baseGraph;
     private final GraphExtension wrappedExtension;
     // TODO when spreading it on different threads we need multiple independent explorers
-    private final Map<Integer, EdgeExplorer> cacheMap = new HashMap<Integer, EdgeExplorer>(4);
+    private final Map<Integer, EdgeExplorer> cacheMap = new HashMap<>(4);
 
     // For every virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap.
     List<VirtualEdgeIteratorState> virtualEdges;

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -39,8 +39,8 @@
 import static com.graphhopper.util.Parameters.CH.DISABLE;
 
 /**
- * This class implements the CH decorator and provides several helper methods related to CH
- * preparation and its vehicle profiles.
+ * This class implements the CH decorator for the routing algorithm factory and provides several
+ * helper methods related to CH preparation and its vehicle profiles.
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
Patch:
@@ -24,7 +24,7 @@
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
- * Used in CH preparation and therefor assumed that all edges are of type CHEdgeIteratorState
+ * Used in CH preparation and therefore assumed that all edges are of type CHEdgeIteratorState
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -112,6 +112,8 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
             String debug = ", algoInit:" + sw.stop().getSeconds() + "s";
 
             sw = new StopWatch().start();
+
+            // calculate paths
             List<Path> tmpPathList = algo.calcPaths(fromQResult.getClosestNode(), toQResult.getClosestNode());
             debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s";
             if (tmpPathList.isEmpty())
@@ -136,6 +138,7 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
                 throw new IllegalArgumentException("No path found due to maximum nodes exceeded " + algoOpts.getMaxVisitedNodes());
 
             visitedNodesSum += algo.getVisitedNodes();
+            altResponse.addDebugInfo("visited nodes sum: " + visitedNodesSum);
             fromQResult = toQResult;
         }
 

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -599,7 +599,7 @@ else if (maxTurnCosts == 1) {
             if (costs != 0 || Double.isInfinite(costs))
                 throw new IllegalArgumentException("Restricted turn can only have infinite costs (or use 0)");
         } else if (costs >= maxTurnCosts)
-            throw new IllegalArgumentException("Cost is too high. Or specifiy restricted == true");
+            throw new IllegalArgumentException("Cost is too high. Or specify restricted == true");
 
         if (costs < 0)
             throw new IllegalArgumentException("Turn costs cannot be negative");
@@ -682,7 +682,7 @@ public double getDouble(long flags, int key) {
      */
     protected double applyMaxSpeed(ReaderWay way, double speed) {
         double maxSpeed = getMaxSpeed(way);
-        // We obay speed limits
+        // We obey speed limits
         if (maxSpeed >= 0) {
             // We assume that the average speed is 90% of the allowed maximum
             return maxSpeed * 0.9;

File: core/src/main/java/com/graphhopper/storage/GraphExtension.java
Patch:
@@ -23,12 +23,12 @@
  */
 public interface GraphExtension extends Storable<GraphExtension> {
     /**
-     * @return true, if and only if, if an additional field at the graphs node storage is required
+     * @return true, if and only if an additional field at the graphs node storage is required
      */
     boolean isRequireNodeField();
 
     /**
-     * @return true, if and only if, if an additional field at the graphs edge storage is required
+     * @return true, if and only if an additional field at the graphs edge storage is required
      */
     boolean isRequireEdgeField();
 

File: core/src/main/java/com/graphhopper/util/StopWatch.java
Patch:
@@ -58,7 +58,7 @@ public StopWatch stop() {
      * @return the time delta in milliseconds
      */
     public long getTime() {
-        return nanoTime / 1000000;
+        return nanoTime / 1_000_000;
     }
 
     public long getNanos() {

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -407,11 +407,11 @@ public void testMaxVisitedNodes() {
         assertFalse(p.isFound());
     }
 
-    // 1-2-3-4-5
+    // 0-1-2-3-4
     // |     / |
-    // |    9  |
+    // |    8  |
     // \   /   /
-    //  8-7-6-/
+    //  7-6-5-/
     @Test
     public void testBidirectional2() {
         GraphHopperStorage graph = createGHStorage(false);

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -166,7 +166,7 @@ protected LocationIndex createLocationIndex(Directory dir) {
             float perRun = sw.stop().getSeconds() / ((float) (N - noJvmWarming));
             System.out.println("# " + getClass().getSimpleName() + " " + entry
                     + ":" + sw.stop().getSeconds() + ", per run:" + perRun);
-            assertTrue("speed to low!? " + perRun + " per run", perRun < 0.08);
+            assertTrue("speed too low!? " + perRun + " per run", perRun < 0.08);
         }
     }
 }

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -296,7 +296,7 @@ public void testSave_and_Freeze() throws IOException {
         assertEquals(1, GHUtility.count(graph.createEdgeExplorer().setBaseNode(1)));
         assertEquals(1, GHUtility.count(chGraph.createEdgeExplorer().setBaseNode(1)));
 
-        // base graph does not see shortcut        
+        // base graph does not see shortcut
         assertEquals(0, GHUtility.count(graph.createEdgeExplorer().setBaseNode(2)));
         assertEquals(1, GHUtility.count(chGraph.createEdgeExplorer().setBaseNode(2)));
 

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -268,7 +268,7 @@ public void paintComponent(Graphics2D g2) {
                     g2.setColor(color);
                     boolean fwd = encoder.isForward(edge.getFlags());
                     boolean bwd = encoder.isBackward(edge.getFlags());
-                    float width = speed > 90? 1f : 0.8f;
+                    float width = speed > 90 ? 1f : 0.8f;
                     if (fwd && !bwd) {
                         mg.plotDirectedEdge(g2, lat, lon, lat2, lon2, width);
                     } else {

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java
Patch:
@@ -74,9 +74,6 @@ public void testSave_and_fileFormat() throws IOException {
         graph.edge(9, 11, 200, true);
         graph.edge(1, 2, 120, false);
 
-        assertEquals(4, graph.getAllEdges().length());
-        assertEquals(4, graph.getNodes());
-
         iter1.setName("named street1");
         iter2.setName("named street2");
 

File: core/src/main/java/com/graphhopper/routing/lm/LandmarkSuggestion.java
Patch:
@@ -55,7 +55,7 @@ public static final LandmarkSuggestion readLandmarks(String file, LocationIndex
                 continue;
             }
 
-            GHPoint point = GHPoint.parseLonLat(lmStr);
+            GHPoint point = GHPoint.fromStringLonLat(lmStr);
             if (point == null)
                 throw new RuntimeException("Invalid format " + lmStr + " for point " + lmSuggestionIdx);
 

File: core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java
Patch:
@@ -106,7 +106,7 @@ public void fillEdgeIDs(GHIntHashSet edgeIds, Geometry geometry, EdgeFilter filt
             GHPoint point = GHPoint.create((Point) geometry);
             findClosestEdgeToPoint(edgeIds, point, filter);
         } else if (geometry instanceof LineString) {
-            PointList pl = PointList.from((LineString) geometry);
+            PointList pl = PointList.fromLineString((LineString) geometry);
             // TODO do map matching or routing
             int lastIdx = pl.size() - 1;
             if (pl.size() >= 2) {

File: core/src/main/java/com/graphhopper/storage/change/ChangeGraphResponse.java
Patch:
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.storage.change;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
+
 /**
  * This class describes the changes that were applied to the graph, currently only used in GraphHopper.changeGraph
  *
@@ -29,6 +31,7 @@ public ChangeGraphResponse(long updateCount) {
         this.updateCount = updateCount;
     }
 
+    @JsonProperty("updates")
     public long getUpdateCount() {
         return updateCount;
     }

File: core/src/main/java/com/graphhopper/util/shapes/BBox.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.util.shapes;
 
 import com.fasterxml.jackson.annotation.JsonCreator;
+import com.fasterxml.jackson.annotation.JsonValue;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.NumHelper;
 
@@ -258,8 +259,9 @@ public boolean isValid() {
      * @return array containing this bounding box. Attention: GeoJson is lon,lat! If 3D is gets even
      * worse: lon,lat,ele
      */
+    @JsonValue
     public List<Double> toGeoJson() {
-        List<Double> list = new ArrayList<Double>(4);
+        List<Double> list = new ArrayList<>(4);
         list.add(Helper.round6(minLon));
         list.add(Helper.round6(minLat));
         // hmh

File: core/src/test/java/com/graphhopper/util/PointListTest.java
Patch:
@@ -235,8 +235,8 @@ public void testToGeoJson() {
         pl.add(1, 1, 1);
         pl.add(2, 2, 2);
 
-        assertEquals(3, pl.toGeoJson(true).size());
-        assertEquals(2, pl.shallowCopy(1, 3, false).toGeoJson(true).size());
+        assertEquals(3, pl.toLineString(true).getNumPoints());
+        assertEquals(2, pl.shallowCopy(1, 3, false).toLineString(true).getNumPoints());
     }
 
 

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
Patch:
@@ -251,6 +251,7 @@ public GraphExtension getExtension() {
                 throw new RuntimeException();
             }
         };
+
         Map<GtfsStorage.Validity, Integer> operatingDayPatterns = new HashMap<>(staticGtfs.getOperatingDayPatterns());
         Map<Integer, byte[]> tripDescriptors = new HashMap<>();
         Map<Integer, Integer> stopSequences = new HashMap<>();

File: tools/src/main/java/com/graphhopper/tools/QueryTorture.java
Patch:
@@ -269,7 +269,7 @@ static Query parse(String logLine) {
                 }
 
                 value = value.replace("%2C", ",");
-                GHPoint point = GHPoint.parse(value);
+                GHPoint point = GHPoint.fromString(value);
                 if (point == null)
                     continue;
 

File: core/src/main/java/com/graphhopper/routing/lm/LMApproximator.java
Patch:
@@ -79,7 +79,7 @@ public LMApproximator(Graph graph, int maxBaseNodes, LandmarkStorage lms, int ac
         this.maxBaseNodes = maxBaseNodes;
         int idxVirtNode = maxBaseNodes;
         virtNodeMap = new GHIntObjectHashMap(graph.getNodes() - idxVirtNode, 0.5f);
-        // virtual nodes handling: calculate the minium weight for the virt. nodes, i.e. pick the correct neighbouring node
+        // virtual nodes handling: calculate the minimum weight for the virtual nodes, i.e. pick the correct neighbouring node
         if (graph instanceof QueryGraph) {
             QueryGraph qGraph = (QueryGraph) graph;
             // there are at least two virtual nodes (start & destination)

File: core/src/main/java/com/graphhopper/routing/AbstractBidirectionEdgeCHNoSOD.java
Patch:
@@ -152,9 +152,9 @@ protected void updateBestPath(EdgeIteratorState edgeState, T entry, int traversa
             }
 
             double turnCostsAtBridgeNode = reverse ?
-                    // todo: maybe we should make this a bit cleaner (check weighting type at construction type etc.)
-                    ((TurnWeighting) weighting).calcTurnWeight(iter.getLastOrigEdge(), edgeState.getBaseNode(), prevOrNextOrigEdgeId) :
-                    ((TurnWeighting) weighting).calcTurnWeight(prevOrNextOrigEdgeId, edgeState.getBaseNode(), iter.getFirstOrigEdge());
+//                     todo: maybe we should make this a bit cleaner (check weighting type at construction time etc.)
+                    ((TurnWeighting) weighting).calcTurnWeight(iter.getLastOrigEdge(), iter.getBaseNode(), prevOrNextOrigEdgeId) :
+                    ((TurnWeighting) weighting).calcTurnWeight(prevOrNextOrigEdgeId, iter.getBaseNode(), iter.getFirstOrigEdge());
 
             double newWeight = entry.getWeightOfVisitedPath() + entryOther.getWeightOfVisitedPath() + turnCostsAtBridgeNode;
             if (newWeight < bestPath.getWeight()) {

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -283,7 +283,7 @@ private void contractNodes() {
         // todo: why do we start counting levels with 1 ??
         int level = 1;
         long counter = 0;
-        long logSize = Math.round(Math.max(10, initSize / 100 * logMessagesPercentage));
+        long logSize = Math.round(Math.max(10, initSize / 100d * logMessagesPercentage));
         if (logMessagesPercentage == 0)
             logSize = Integer.MAX_VALUE;
 
@@ -302,7 +302,7 @@ private void contractNodes() {
 
         // according to paper "Polynomial-time Construction of Contraction Hierarchies for Multi-criteria Objectives" by Funke and Storandt
         // we don't need to wait for all nodes to be contracted
-        long nodesToAvoidContract = Math.round((100 - nodesContractedPercentage) / 100 * sortedNodes.getSize());
+        long nodesToAvoidContract = Math.round((100 - nodesContractedPercentage) / 100d * sortedNodes.getSize());
         StopWatch lazySW = new StopWatch();
 
         // Recompute priority of uncontracted neighbors.

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -703,6 +703,9 @@ void inPlaceNodeRemove(int removeNodeCount) {
                 setWayGeometry_(fetchWayGeometry_(edgePointer, true, 0, -1, -1), edgePointer, false);
         }
 
+        // clear N_EDGE_REF
+        initNodeRefs((nodeCount - removeNodeCount) * nodeEntryBytes, nodeCount * nodeEntryBytes);
+
         if (removeNodeCount >= nodeCount)
             throw new IllegalStateException("graph is empty after in-place removal but was " + removeNodeCount);
 

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -488,8 +488,7 @@ public void testBlockTripSkipsStop() {
         GHResponse route = graphHopperFactory.createWith(feedMessageBuilder.build()).route(ghRequest);
 
         assertFalse(route.hasErrors());
-        assertEquals(2, route.getAll().size()); // I want to get the impossible route as well.
-        assertTrue(route.getAll().get(1).isImpossible());
+        assertTrue(route.getAll().get(route.getAll().size()-1).isImpossible());
 
         // Note that my stop (BULLFROG), which is skipped, is a switch of "block legs", so even though it looks like I (impossibly) transfer there,
         // this is not a real transfer. The bus drives through BULLFROG without stopping.

File: client-hc/src/main/java/com/graphhopper/api/MatrixResponse.java
Patch:
@@ -88,7 +88,7 @@ public void setDistanceRow(int row, int distanceRow[]) {
 
     public void setWeightRow(int row, double weightRow[]) {
         if (weights.length > 0) {
-            check(weights.length, toCount, "to weights");
+            check(weightRow.length, toCount, "to weights");
             weights[row] = weightRow;
         } else {
             throw new UnsupportedOperationException("Cannot call setWeightRow if weights are disabled");

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
Patch:
@@ -105,7 +105,7 @@ public static RealtimeFeed fromProtobuf(Graph graph, GtfsStorage staticGtfs, PtF
             .map(GtfsRealtime.FeedEntity::getTripUpdate)
             .filter(tripUpdate -> tripUpdate.getTrip().getScheduleRelationship() == GtfsRealtime.TripDescriptor.ScheduleRelationship.SCHEDULED)
             .forEach(tripUpdate -> {
-                String key = GtfsStorage.tripKey(tripUpdate.getTrip().getTripId(), tripUpdate.getTrip().hasStartTime() ? tripUpdate.getTrip().getStartTime() : "00:00:00");
+                String key = GtfsStorage.tripKey(tripUpdate.getTrip().getTripId(), tripUpdate.getTrip().getStartTime());
                 final int[] boardEdges = staticGtfs.getBoardEdgesForTrip().get(key);
                 final int[] leaveEdges = staticGtfs.getAlightEdgesForTrip().get(key);
                 if (boardEdges == null || leaveEdges == null) {
@@ -400,7 +400,7 @@ public Optional<GtfsReader.TripWithStopTimes> findUpdate(GtfsRealtime.TripDescri
     }
 
     public GtfsRealtime.TripDescriptor normalize(GtfsRealtime.TripDescriptor tripDescriptor) {
-        return GtfsRealtime.TripDescriptor.newBuilder(tripDescriptor).clearRouteId().clearStartTime().build();
+        return GtfsRealtime.TripDescriptor.newBuilder(tripDescriptor).clearRouteId().build();
     }
 
     public static GtfsReader.TripWithStopTimes toTripWithStopTimes(GTFSFeed feed, Agency agency, GtfsRealtime.TripUpdate tripUpdate) {

File: isochrone/src/main/java/com/graphhopper/isochrone/algorithm/Isochrone.java
Patch:
@@ -202,6 +202,9 @@ public void searchInternal(int from) {
                 }
 
                 double tmpWeight = weighting.calcWeight(iter, reverseFlow, currEdge.edge) + currEdge.weight;
+                if (Double.isInfinite(tmpWeight))
+                    continue;
+                
                 double tmpDistance = iter.getDistance() + currEdge.distance;
                 long tmpTime = weighting.calcMillis(iter, reverseFlow, currEdge.edge) + currEdge.time;
                 int tmpNode = iter.getAdjNode();

File: core/src/main/java/com/graphhopper/routing/ch/WitnessPathFinder.java
Patch:
@@ -70,9 +70,9 @@ public void setInitialEntries(IntObjectMap<WitnessSearchEntry> initialEntries) {
 
     protected abstract void initEntries(IntObjectMap<WitnessSearchEntry> initialEntries);
 
-    public abstract CHEntry getFoundEntry(int edge, int adjNode);
+    public abstract WitnessSearchEntry getFoundEntry(int edge, int adjNode);
 
-    public abstract CHEntry getFoundEntryNoParents(int edge, int adjNode);
+    public abstract WitnessSearchEntry getFoundEntryNoParents(int edge, int adjNode);
 
     public abstract void findTarget(int targetEdge, int targetNode);
 

File: core/src/main/java/com/graphhopper/routing/ch/WitnessSearchEntry.java
Patch:
@@ -21,8 +21,9 @@ class WitnessSearchEntry extends CHEntry {
     // todo: explain what this is needed for
     boolean onOrigPath;
 
-    public WitnessSearchEntry(int edge, int incEdge, int adjNode, double weight) {
+    public WitnessSearchEntry(int edge, int incEdge, int adjNode, double weight, boolean onOrigPath) {
         super(edge, incEdge, adjNode, weight);
+        this.onOrigPath = onOrigPath;
     }
 
     public WitnessSearchEntry getParent() {

File: core/src/test/java/com/graphhopper/routing/ch/WitnessPathFinderTest.java
Patch:
@@ -45,7 +45,7 @@ public void findTarget_works() {
         graph.edge(1, 2, 1, false);
         graph.edge(1, 3, 2, false);
         graph.freeze();
-        WitnessSearchEntry entry = new WitnessSearchEntry(0, 0, 1, 8);
+        WitnessSearchEntry entry = new WitnessSearchEntry(0, 0, 1, 8, true);
         entry.onOrigPath = true;
         IntObjectMap<WitnessSearchEntry> initialEntries = new IntObjectHashMap<>();
         int edgeKey = getEdgeKey(entry.incEdge, entry.adjNode);

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -166,7 +166,7 @@ private int findAndHandleShortcuts(int node) {
     }
 
     private int findAndHandleShortcutsAggressive(int node) {
-        LOGGER.debug("Finding shortcuts for node {}, required shortcuts will be {}ed", node, addingShortcutHandler.getAction());
+        LOGGER.debug("Finding shortcuts for node {}, required shortcuts will be {}ed", node, activeShortcutHandler.getAction());
         stats().nodes++;
         resetEdgeCounters();
         LongSet witnessedPairs = new LongHashSet(16);
@@ -324,7 +324,7 @@ private IntObjectMap<WitnessSearchEntry> getInitialEntriesAggressive(int fromNod
     private int findAndHandleShortcutsClassic(int node) {
         // todo: for osm data where there are only a very few turn restrictions (no left turn etc.) the graph
         // contraction should be much faster if we exploit that there are no turn costs on most nodes
-        LOGGER.debug("Finding shortcuts for node {}, required shortcuts will be {}ed", node, addingShortcutHandler.getAction());
+        LOGGER.debug("Finding shortcuts for node {}, required shortcuts will be {}ed", node, activeShortcutHandler.getAction());
         stats().nodes++;
         resetEdgeCounters();
         int degree = 0;
@@ -379,7 +379,7 @@ private int findAndHandleShortcutsClassic(int node) {
     public String getPrepareAlgoMemoryUsage() {
         // todo: this method is currently misused to print some statistics for performance analysis
         String result = String.format("stats(calc): %s, stats(contract): %s, %s",
-                countingShortcutHandler.getStats(), addingShortcutHandler.getStats(), witnessPathFinder.getStatusString()); 
+                countingShortcutHandler.getStats(), addingShortcutHandler.getStats(), witnessPathFinder.getStatusString());
         countingShortcutHandler.resetStats();
         addingShortcutHandler.resetStats();
         witnessPathFinder.resetStats();

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -280,6 +280,7 @@ private void contractNodes() {
         // graph contraction parameters, because it affects the node contraction order.
         meanDegree = prepareGraph.getAllEdges().getMaxId() / prepareGraph.getNodes();
         initSize = sortedNodes.getSize();
+        // todo: why do we start counting levels with 1 ??
         int level = 1;
         long counter = 0;
         long logSize = Math.round(Math.max(10, initSize / 100 * logMessagesPercentage));

File: core/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java
Patch:
@@ -754,8 +754,10 @@ public void testContractNode_noUnnecessaryShortcut_differentWitnessesForDifferen
     }
 
     @Test
-    @Ignore("This test showcases an unnecessary shortcut that is introduced by the turn replacement algorithm, aggressive search should pass")
     public void testContractNode_noUnnecessaryShortcut_differentInitialEntriesForDifferentInEdges() {
+        // this test shows a (quite realistic) example where the aggressive search finds a witness where the turn
+        // replacement search does not. this test will fail with turn replacement search enabled
+        
         //         /--- 2 ->-\
         //        /           \
         // 0 --> 1 ---> 3 ---> 5 --> 6 

File: core/src/main/java/com/graphhopper/routing/ch/EdgeBasedNodeContractor.java
Patch:
@@ -38,7 +38,7 @@
 public class EdgeBasedNodeContractor extends AbstractNodeContractor {
     // todo: modify code such that logging does not alter performance 
     private static final Logger LOGGER = LoggerFactory.getLogger(EdgeBasedNodeContractor.class);
-    public static boolean aggressiveSearch = false;
+    public static boolean aggressiveSearch = true;
     public static int edgeDifferenceWeight = 8;
     public static int originalEdgeDifferenceWeight = 4;
     public static int hierarchyDepthWeight = 1;

File: core/src/main/java/com/graphhopper/routing/ch/WitnessPathFinder.java
Patch:
@@ -34,7 +34,7 @@
 import java.util.PriorityQueue;
 
 public class WitnessPathFinder {
-    public static int maxOrigEdgesPerInitialEntry = 5;
+    public static int maxOrigEdgesPerInitialEntry = 100;
     private final CHGraph graph;
     private final Weighting weighting;
     private final TraversalMode traversalMode;
@@ -100,7 +100,7 @@ public void findTarget(int targetEdge, int targetNode) {
 
             EdgeIterator iter = outEdgeExplorer.setBaseNode(currEdge.adjNode);
             while (iter.next()) {
-                // increases number of shortcuts and not sure if needed
+                // todo: increases number of shortcuts and not sure if needed
 //                if (!currEdge.onOrigPath && iter.getAdjNode() == avoidNode) {
 //                    continue;
 //                }

File: core/src/test/java/com/graphhopper/routing/ch/EdgeBasedNodeContractorTest.java
Patch:
@@ -699,6 +699,7 @@ public void testContractNode_witnessPathsAreFound() {
     }
 
     @Test
+    @Ignore("not sure how to fix this yet")
     @Repeat(times = 10)
     public void testContractNode_noUnnecessaryShortcut_witnessPathOfEqualWeight() {
         // this test runs repeatedly because it might pass/fail by incidence (because path lengths are equal)

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -205,7 +205,7 @@ private class StopsFromBoardHopDwellEdges {
         private Instant arrivalTimeFromHopEdge;
         private Optional<Instant> updatedArrival;
         private StopTime stopTime = null;
-        private GtfsReader.TripWithStopTimes tripUpdate;
+        private GtfsReader.TripWithStopTimes tripUpdate = null;
         private int stopSequence = 0;
 
         StopsFromBoardHopDwellEdges(String feedId, GtfsRealtime.TripDescriptor tripDescriptor) {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1219,9 +1219,9 @@ protected void cleanUp() {
         preparation.setMinOneWayNetworkSize(minOneWayNetworkSize);
         preparation.doWork();
         int currNodeCount = ghStorage.getNodes();
-        logger.info("edges: " + ghStorage.getAllEdges().getMaxId() + ", nodes " + currNodeCount
-                + ", there were " + preparation.getMaxSubnetworks()
-                + " subnetworks. removed them => " + (prevNodeCount - currNodeCount)
+        logger.info("edges: " + Helper.nf(ghStorage.getAllEdges().getMaxId()) + ", nodes " + Helper.nf(currNodeCount)
+                + ", there were " + Helper.nf(preparation.getMaxSubnetworks())
+                + " subnetworks. removed them => " + Helper.nf(prevNodeCount - currNodeCount)
                 + " less nodes");
     }
 

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -22,14 +22,14 @@
 import java.util.TreeMap;
 
 /**
- * A priority queue implemented by a TreeMap. As the tree map does not allow duplicated we compose
+ * A priority queue implemented by a TreeMap. As the tree map does not allow duplicates we compose
  * the key via priority | nodeId.
  * <p>
  *
  * @author Peter Karich
  */
 public class GHTreeMapComposed {
-    private static final Integer NOT_EMPTY = new Integer(-3);
+    private static final Integer NOT_EMPTY = -3;
     private final BitUtil bitUtil = BitUtil.BIG;
     private final TreeMap<Long, Integer> map;
 

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -435,7 +435,7 @@ public void debugPrint() {
         System.out.println("shortcuts:");
         String formatShortcuts = "%12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s | %12s\n";
         System.out.format(formatShortcuts, "#", "E_NODEA", "E_NODEB", "E_LINKA", "E_LINKB", "E_DIST", "E_FLAGS", "S_SKIP_EDGE1", "S_SKIP_EDGE2", "S_ORIG_FIRST", "S_ORIG_LAST");
-        for (int i = baseGraph.edgeCount; i < Math.min(shortcutCount, printMax); ++i) {
+        for (int i = baseGraph.edgeCount; i < baseGraph.edgeCount + Math.min(shortcutCount, printMax); ++i) {
             System.out.format(formatShortcuts, i,
                     shortcuts.getInt(chEdgeAccess.toPointer(i) + chEdgeAccess.E_NODEA),
                     shortcuts.getInt(chEdgeAccess.toPointer(i) + chEdgeAccess.E_NODEB),

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -89,7 +89,9 @@ public RoutingAlgorithmFactory createRoutingFactory() {
         }
 
         if (hopper.getCHFactoryDecorator().isEnabled()) {
-            final HintsMap chHints = new HintsMap(defaultHints).put(Parameters.CH.DISABLE, false);
+            final HintsMap chHints = new HintsMap(defaultHints);
+            chHints.put(Parameters.CH.DISABLE, false);
+            chHints.put(Parameters.Routing.EDGE_BASED, tMode.isEdgeBased());
             Weighting pickedWeighting = null;
             for (Weighting tmpWeighting : hopper.getCHFactoryDecorator().getWeightings()) {
                 if (tmpWeighting.equals(weighting)) {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -530,7 +530,7 @@ public GraphHopper init(CmdArgs args) {
         String graphHopperFolder = args.get("graph.location", "");
         if (isEmpty(graphHopperFolder) && isEmpty(ghLocation)) {
             if (isEmpty(dataReaderFile))
-                throw new IllegalArgumentException("You need to specify an OSM file.");
+                throw new IllegalArgumentException("If no graph.location is provided you need to specify an OSM file.");
 
             graphHopperFolder = pruneFileEnd(dataReaderFile) + "-gh";
         }

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -374,4 +374,4 @@ public void testBlockTrips() {
     }
 
 
-}
+}
\ No newline at end of file

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -561,7 +561,7 @@ public void testSRTMWithInstructions() throws Exception {
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager(importVehicles));
 
-        tmpHopper.setElevationProvider(new SRTMProvider().setCacheDir(new File(DIR)));
+        tmpHopper.setElevationProvider(new SRTMProvider(DIR));
         tmpHopper.importOrLoad();
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.730729, 7.421288, 43.727697, 7.419199).
@@ -611,7 +611,7 @@ public void testSRTMWithoutTunnelInterpolation() throws Exception {
                 .setCHEnabled(false).setGraphHopperLocation(tmpGraphFile)
                 .setEncodingManager(new EncodingManager(importVehicles, 8));
 
-        tmpHopper.setElevationProvider(new SRTMProvider().setCacheDir(new File(DIR)));
+        tmpHopper.setElevationProvider(new SRTMProvider(DIR));
         tmpHopper.importOrLoad();
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.74056471749763, 7.4299266210693755,
@@ -637,7 +637,7 @@ public void testSRTMWithTunnelInterpolation() throws Exception {
                 .setCHEnabled(false).setGraphHopperLocation(tmpGraphFile)
                 .setEncodingManager(new EncodingManager(genericImportVehicles, 8));
 
-        tmpHopper.setElevationProvider(new SRTMProvider().setCacheDir(new File(DIR)));
+        tmpHopper.setElevationProvider(new SRTMProvider(DIR));
         tmpHopper.importOrLoad();
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.74056471749763, 7.4299266210693755,

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -647,8 +647,7 @@ protected double getElevation(ReaderNode node) {
     public void testReadEleFromDataProvider() {
         GraphHopper hopper = new GraphHopperFacade("test-osm5.xml");
         // get N10E046.hgt.zip
-        ElevationProvider provider = new SRTMProvider();
-        provider.setCacheDir(new File(GraphHopperIT.DIR));
+        ElevationProvider provider = new SRTMProvider(GraphHopperIT.DIR);
         hopper.setElevationProvider(provider);
         hopper.importOrLoad();
 

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -536,7 +536,7 @@ Graph runAlgo(TestAlgoCollector testCollector, String osmFile,
                         setEnabled(true).setDisablingAllowed(true);
 
             if (is3D)
-                hopper.setElevationProvider(new SRTMProvider().setCacheDir(new File(DIR)));
+                hopper.setElevationProvider(new SRTMProvider(DIR));
 
             hopper.importOrLoad();
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1046,8 +1046,8 @@ else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
                     queryGraph = new QueryGraph(ghStorage);
                     queryGraph.lookup(qResults);
                     weighting = createWeighting(hints, encoder, queryGraph);
-                    ghRsp.addDebugInfo("tmode:" + tMode.toString());
                 }
+                ghRsp.addDebugInfo("tmode:" + tMode.toString());
 
                 int maxVisitedNodesForRequest = hints.getInt(Routing.MAX_VISITED_NODES, maxVisitedNodes);
                 if (maxVisitedNodesForRequest > maxVisitedNodes)
@@ -1075,7 +1075,7 @@ else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
                         setPathDetailsBuilders(pathBuilderFactory, request.getPathDetails()).
                         setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0);
 
-                if(request.hasFavoredHeading(0))
+                if (request.hasFavoredHeading(0))
                     pathMerger.setFavoredHeading(request.getFavoredHeading(0));
 
                 if (routingTemplate.isReady(pathMerger, tr))

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -259,7 +259,7 @@ public RoutingAlgorithmFactory getDecoratedAlgorithmFactory(RoutingAlgorithmFact
             if (p.isEdgeBased() == edgeBased && p.getWeighting().matches(map))
                 return p;
 
-            entriesStr += p.getWeighting() + "|" + (edgeBased ? "edge" : "node") + ", ";
+            entriesStr += p.getWeighting() + "|" + (p.isEdgeBased() ? "edge" : "node") + ", ";
         }
 
         throw new IllegalArgumentException("Cannot find CH RoutingAlgorithmFactory for weighting map " + map + " in entries " + entriesStr);

File: client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
Patch:
@@ -120,11 +120,11 @@ public void testRetrieveOnlyStreetname() {
                 addPoint(new GHPoint(52.399067, 13.469238));
 
         GHResponse res = gh.route(req);
-        assertEquals("Turn right onto B 246", res.getBest().getInstructions().get(4).getName());
+        assertEquals("Continue onto B 96", res.getBest().getInstructions().get(4).getName());
 
         req.getHints().put("turn_description", false);
         res = gh.route(req);
-        assertEquals("B 246", res.getBest().getInstructions().get(4).getName());
+        assertEquals("B 96", res.getBest().getInstructions().get(4).getName());
     }
 
     @Test

File: core/src/main/java/com/graphhopper/reader/DataReader.java
Patch:
@@ -36,6 +36,8 @@ public interface DataReader {
 
     DataReader setWayPointMaxDistance(double wayPointMaxDistance);
 
+    DataReader setSmoothElevation(boolean smoothElevation);
+
     /**
      * This method triggers reading the underlying data to create a graph
      */

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -922,7 +922,7 @@ public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph g
         }
 
         if (weighting == null)
-            throw new IllegalArgumentException("weighting " + weighting + " not supported");
+            throw new IllegalArgumentException("weighting " + weightingStr + " not supported");
 
         if (hintsMap.has(Routing.BLOCK_AREA)) {
             String blockAreaStr = hintsMap.get(Parameters.Routing.BLOCK_AREA, "");
@@ -1075,7 +1075,7 @@ else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
                         setPathDetailsBuilders(pathBuilderFactory, request.getPathDetails()).
                         setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0);
 
-                if(request.hasFavoredHeading(0))
+                if (request.hasFavoredHeading(0))
                     pathMerger.setFavoredHeading(request.getFavoredHeading(0));
 
                 if (routingTemplate.isReady(pathMerger, tr))

File: client-hc/src/test/java/com/graphhopper/api/AbstractGraphHopperMatrixWebIntegrationTester.java
Patch:
@@ -56,7 +56,7 @@ public void testBikeMatrix() {
         req.addOutArray("times");
 
         MatrixResponse res = ghMatrix.route(req);
-        assertEquals(2495, res.getTime(1, 2) / 1000, 50);
+        assertEquals(2450, res.getTime(1, 2) / 1000, 110);
     }
 
     @Test

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -26,7 +26,6 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ch.CHAlgoFactoryDecorator;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
-import com.graphhopper.routing.lm.LandmarkStorage;
 import com.graphhopper.routing.lm.PrepareLandmarks;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.routing.weighting.AbstractWeighting;

File: client-hc/src/test/java/com/graphhopper/api/AbstractGraphHopperMatrixWebIntegrationTester.java
Patch:
@@ -56,7 +56,7 @@ public void testBikeMatrix() {
         req.addOutArray("times");
 
         MatrixResponse res = ghMatrix.route(req);
-        assertEquals(2350, res.getTime(1, 2) / 1000, 50);
+        assertEquals(2495, res.getTime(1, 2) / 1000, 50);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1074,6 +1074,9 @@ else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
                         setPathDetailsBuilders(pathBuilderFactory, request.getPathDetails()).
                         setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0);
 
+                if(request.hasFavoredHeading(0))
+                    pathMerger.setFavoredHeading(request.getFavoredHeading(0));
+
                 if (routingTemplate.isReady(pathMerger, tr))
                     break;
             }

File: core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
Patch:
@@ -39,9 +39,6 @@ static int calculateSign(double prevLatitude, double prevLongitude, double latit
         double delta = calculateOrientationDelta(prevLatitude, prevLongitude, latitude, longitude, prevOrientation);
         double absDelta = Math.abs(delta);
 
-        // TODO not only calculate the mathematical orientation, but also compare to other streets
-        // TODO If there is one street turning slight right and one right, but no straight street
-        // TODO We can assume the slight right street would be a continue
         if (absDelta < 0.2) {
             // 0.2 ~= 11°
             return Instruction.CONTINUE_ON_STREET;

File: core/src/main/java/com/graphhopper/util/AngleCalc.java
Patch:
@@ -115,7 +115,7 @@ public double calcAzimuth(double lat1, double lon1, double lat2, double lon2) {
         if (orientation < 0)
             orientation += 2 * Math.PI;
 
-        return Math.toDegrees(Helper.round4(orientation))%360;
+        return Math.toDegrees(Helper.round4(orientation)) % 360;
     }
 
     String azimuth2compassPoint(double azimuth) {

File: core/src/main/java/com/graphhopper/util/ViaInstruction.java
Patch:
@@ -31,6 +31,7 @@ public ViaInstruction(Instruction instr) {
         this(instr.getName(), instr.getAnnotation(), instr.getPoints());
         setDistance(instr.getDistance());
         setTime(instr.getTime());
+        this.extraInfo = instr.extraInfo;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/PathWrapper.java
Patch:
@@ -254,9 +254,6 @@ public void addPathDetails(Map<String, List<PathDetail>> details) {
             throw new IllegalStateException("Details have to be the same size");
         }
         for (Map.Entry<String, List<PathDetail>> detailEntry : details.entrySet()) {
-            if (detailEntry.getValue().isEmpty())
-                throw new IllegalStateException("PathDetails " + detailEntry.getKey() + " must not be empty");
-
             if (this.pathDetails.containsKey(detailEntry.getKey())) {
                 List<PathDetail> pd = this.pathDetails.get(detailEntry.getKey());
                 PathMerger.merge(pd, detailEntry.getValue());

File: core/src/main/java/com/graphhopper/util/PathSimplification.java
Patch:
@@ -49,7 +49,8 @@ public PathSimplification(PathWrapper pathWrapper, DouglasPeucker douglasPeucker
         this.pathDetails = pathWrapper.getPathDetails();
         for (String name : pathDetails.keySet()) {
             List<PathDetail> pathDetailList = pathDetails.get(name);
-            if (pathDetailList.isEmpty())
+            // If the pointList only contains one point, PathDetails have to be empty because 1 point => 0 edges
+            if (pathDetailList.isEmpty() && pointList.size() > 1)
                 throw new IllegalStateException("PathDetails " + name + " must not be empty");
 
             listsToSimplify.add(pathDetailList);
@@ -58,7 +59,7 @@ public PathSimplification(PathWrapper pathWrapper, DouglasPeucker douglasPeucker
     }
 
     public PointList simplify() {
-        if (listsToSimplify.isEmpty() || pointList.isEmpty())
+        if (listsToSimplify.isEmpty() || pointList.size() <= 2)
             return pointList;
 
         // The offset of already included points

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -674,8 +674,8 @@ public double getDouble(long flags, int key) {
     }
 
     /**
-     * @param way:   needed to retrieve tags
-     * @param speed: speed guessed e.g. from the road type or other tags
+     * @param way   needed to retrieve tags
+     * @param speed speed guessed e.g. from the road type or other tags
      * @return The assumed speed.
      */
     protected double applyMaxSpeed(ReaderWay way, double speed) {

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -325,8 +325,8 @@ public long handleRelationTags(ReaderRelation relation, long oldRelationFlags) {
      * just only 90%.
      * <p>
      *
-     * @param way:   needed to retrieve tags
-     * @param speed: speed guessed e.g. from the road type or other tags
+     * @param way   needed to retrieve tags
+     * @param speed speed guessed e.g. from the road type or other tags
      * @return The assumed average speed.
      */
     @Override

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -335,8 +335,8 @@ public String getWayInfo(ReaderWay way) {
     }
 
     /**
-     * @param way:   needed to retrieve tags
-     * @param speed: speed guessed e.g. from the road type or other tags
+     * @param way   needed to retrieve tags
+     * @param speed speed guessed e.g. from the road type or other tags
      * @return The assumed speed
      */
     protected double applyBadSurfaceSpeed(ReaderWay way, double speed) {

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -674,8 +674,8 @@ public double getDouble(long flags, int key) {
     }
 
     /**
-     * @param way:   needed to retrieve tags
-     * @param speed: speed guessed e.g. from the road type or other tags
+     * @param way   needed to retrieve tags
+     * @param speed speed guessed e.g. from the road type or other tags
      * @return The assumed speed.
      */
     protected double applyMaxSpeed(ReaderWay way, double speed) {

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -325,8 +325,8 @@ public long handleRelationTags(ReaderRelation relation, long oldRelationFlags) {
      * just only 90%.
      * <p>
      *
-     * @param way:   needed to retrieve tags
-     * @param speed: speed guessed e.g. from the road type or other tags
+     * @param way   needed to retrieve tags
+     * @param speed speed guessed e.g. from the road type or other tags
      * @return The assumed average speed.
      */
     @Override

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -335,8 +335,8 @@ public String getWayInfo(ReaderWay way) {
     }
 
     /**
-     * @param way:   needed to retrieve tags
-     * @param speed: speed guessed e.g. from the road type or other tags
+     * @param way   needed to retrieve tags
+     * @param speed speed guessed e.g. from the road type or other tags
      * @return The assumed speed
      */
     protected double applyBadSurfaceSpeed(ReaderWay way, double speed) {

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -558,7 +558,7 @@ public void testVia() {
         assertFalse("should find 1->2->3", grsp.hasErrors());
         PathWrapper rsp = grsp.getBest();
         assertEquals(rsp12.getBest().getDistance() + rsp23.getBest().getDistance(), rsp.getDistance(), 1e-6);
-        assertEquals(5, rsp.getPoints().getSize());
+        assertEquals(4, rsp.getPoints().getSize());
         assertEquals(5, rsp.getInstructions().size());
         assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign());
     }

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -309,7 +309,7 @@ public void testBug1014() {
         OneRun run = new OneRun();
         run.add(50.016923, 11.514187, 0, 0);
         run.add(50.019129, 11.500325, 0, 0);
-        run.add(50.023623, 11.56929, 7069, 180);
+        run.add(50.023623, 11.56929, 7069, 178);
         list.add(run);
 
         runAlgo(testCollector, DIR + "/north-bayreuth.osm.gz", "target/north-bayreuth-gh",

File: reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
Patch:
@@ -558,7 +558,7 @@ public void testVia() {
         assertFalse("should find 1->2->3", grsp.hasErrors());
         PathWrapper rsp = grsp.getBest();
         assertEquals(rsp12.getBest().getDistance() + rsp23.getBest().getDistance(), rsp.getDistance(), 1e-6);
-        assertEquals(5, rsp.getPoints().getSize());
+        assertEquals(4, rsp.getPoints().getSize());
         assertEquals(5, rsp.getInstructions().size());
         assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign());
     }

File: reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
Patch:
@@ -309,7 +309,7 @@ public void testBug1014() {
         OneRun run = new OneRun();
         run.add(50.016923, 11.514187, 0, 0);
         run.add(50.019129, 11.500325, 0, 0);
-        run.add(50.023623, 11.56929, 7069, 180);
+        run.add(50.023623, 11.56929, 7069, 178);
         list.add(run);
 
         runAlgo(testCollector, DIR + "/north-bayreuth.osm.gz", "target/north-bayreuth-gh",

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.text.DateFormat;
 import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
 import java.util.*;
 
 /**
@@ -181,6 +182,7 @@ public String createGPX(String trackName, long startTimeMillis, boolean includeE
         decimalFormat.setMinimumFractionDigits(1);
         decimalFormat.setMaximumFractionDigits(6);
         decimalFormat.setMinimumIntegerDigits(1);
+        decimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.US));
 
         String header = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"
                 + "<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -21,6 +21,7 @@
 
 import java.text.DateFormat;
 import java.text.DecimalFormat;
+import java.text.DecimalFormatSymbols;
 import java.util.*;
 
 /**
@@ -181,6 +182,7 @@ public String createGPX(String trackName, long startTimeMillis, boolean includeE
         decimalFormat.setMinimumFractionDigits(1);
         decimalFormat.setMaximumFractionDigits(6);
         decimalFormat.setMinimumIntegerDigits(1);
+        decimalFormat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.US));
 
         String header = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"
                 + "<gpx xmlns=\"http://www.topografix.com/GPX/1/1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.GraphHopper;
-import com.graphhopper.reader.PrinctonReader;
+import com.graphhopper.reader.PrincetonReader;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HintsMap;
@@ -130,7 +130,7 @@ public void testPerformance() throws IOException {
         final GraphHopperStorage graph = new GraphBuilder(eManager).create();
 
         String bigFile = "10000EWD.txt.gz";
-        new PrinctonReader(graph).setStream(new GZIPInputStream(PrinctonReader.class.getResourceAsStream(bigFile))).read();
+        new PrincetonReader(graph).setStream(new GZIPInputStream(PrincetonReader.class.getResourceAsStream(bigFile))).read();
         GraphHopper hopper = new GraphHopper() {
             {
                 setCHEnabled(false);

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -42,8 +42,8 @@ public class DijkstraBidirectionRef extends AbstractBidirAlgo {
     protected SPTEntry currFrom;
     protected SPTEntry currTo;
     protected PathBidirRef bestPath;
-    private PriorityQueue<SPTEntry> pqOpenSetFrom;
-    private PriorityQueue<SPTEntry> pqOpenSetTo;
+    PriorityQueue<SPTEntry> pqOpenSetFrom;
+    PriorityQueue<SPTEntry> pqOpenSetTo;
     private boolean updateBestPath = true;
 
     public DijkstraBidirectionRef(Graph graph, Weighting weighting, TraversalMode tMode) {

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -97,7 +97,7 @@ public MiniGraphUI(GraphHopper hopper, boolean debug) {
             final RoutingAlgorithmFactory tmpFactory = hopper.getAlgorithmFactory(map);
             algoFactory = new RoutingAlgorithmFactory() {
 
-                class TmpAlgo extends PrepareContractionHierarchies.DijkstraBidirectionCH implements DebugAlgo {
+                class TmpAlgo extends DijkstraBidirectionCH implements DebugAlgo {
                     private final GraphicsWrapper mg;
                     private Graphics2D g2;
 

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -37,6 +37,7 @@
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
 import java.text.DateFormat;
+import java.text.DecimalFormat;
 import java.text.NumberFormat;
 import java.text.SimpleDateFormat;
 import java.util.*;

File: tools/src/main/java/com/graphhopper/ui/GraphicsWrapper.java
Patch:
@@ -125,11 +125,11 @@ public void plotNode(Graphics2D g2, int loc, Color c) {
 
 
     public void plotNode(Graphics2D g2, int loc, Color c, int size) {
-        plotNode(g2, loc, c, size);
+        plotNode(g2, loc, c, size, "");
     }
 
     public void plotNode(Graphics2D g2, int loc, Color c, int size, String text) {
-        plotNode(g2, na, loc, c, 4, "");
+        plotNode(g2, na, loc, c, size, "");
     }
 
     public void plotNode(Graphics2D g2, NodeAccess na, int loc, Color c, int size, String text) {

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsReader.java
Patch:
@@ -442,7 +442,7 @@ private Iterable<StopTime> getInterpolatedStopTimesForTrip(String trip_id) {
 
     private void insertInboundTransfers(String fromStopId, String from_route_id, int minimumTransferTime, SortedSet<Fun.Tuple2<Integer, Integer>> toStopTimelineNode) {
         for (TimelineNodeIdWithTripId entry : arrivalTimelineNodes.get(fromStopId)) {
-            if (from_route_id == null || from_route_id.equals(feed.trips.get(entry.tripId).route_id)) {
+            if (from_route_id == null || from_route_id.equals(entry.routeId)) {
                 int arrivalTime = times.get(entry.timelineNodeId);
                 SortedSet<Fun.Tuple2<Integer, Integer>> tailSet = toStopTimelineNode.tailSet(new Fun.Tuple2<>(arrivalTime + minimumTransferTime, -1));
                 if (!tailSet.isEmpty()) {

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -164,7 +164,7 @@ public void testSkipTransferStop() {
     }
 
     @Test
-    public void testExtraRoute() {
+    public void testExtraTrip() {
         final double FROM_LAT = 36.914893, FROM_LON = -116.76821; // NADAV stop
         final double TO_LAT = 36.868446, TO_LON = -116.784582; // BEATTY_AIRPORT stop
         GHRequest ghRequest = new GHRequest(

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/MultiCriteriaLabelSetting.java
Patch:
@@ -104,6 +104,9 @@ public boolean tryAdvance(Consumer<? super Label> action) {
                 Label label = fromHeap.poll();
                 action.accept(label);
                 explorer.exploreEdgesAround(label).forEach(edge -> {
+                    if (edge == null) {
+                        System.out.println("wurst");
+                    }
                     GtfsStorage.EdgeType edgeType = flagEncoder.getEdgeType(edge.getFlags());
                     long nextTime;
                     if (reverse) {

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.reader.gtfs.GraphHopperGtfs;
 import com.graphhopper.reader.gtfs.GtfsStorage;
 import com.graphhopper.reader.gtfs.PtFlagEncoder;
+import com.graphhopper.reader.gtfs.RealtimeFeed;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GHDirectory;
 import com.graphhopper.storage.GraphHopperStorage;

File: core/src/main/java/com/graphhopper/PathWrapper.java
Patch:
@@ -254,6 +254,9 @@ public void addPathDetails(Map<String, List<PathDetail>> details) {
             throw new IllegalStateException("Details have to be the same size");
         }
         for (Map.Entry<String, List<PathDetail>> detailEntry : details.entrySet()) {
+            if (detailEntry.getValue().isEmpty())
+                throw new IllegalStateException("PathDetails " + detailEntry.getKey() + " must not be empty");
+
             if (this.pathDetails.containsKey(detailEntry.getKey())) {
                 List<PathDetail> pd = this.pathDetails.get(detailEntry.getKey());
                 PathMerger.merge(pd, detailEntry.getValue());

File: core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
Patch:
@@ -39,7 +39,7 @@ public AverageSpeedDetails(FlagEncoder encoder) {
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-        if (encoder.getSpeed(edge.getFlags()) != curAvgSpeed) {
+        if (Math.abs(encoder.getSpeed(edge.getFlags()) - curAvgSpeed) > 0.0001) {
             this.curAvgSpeed = this.encoder.getSpeed(edge.getFlags());
             return true;
         }

File: core/src/test/java/com/graphhopper/util/PathSimplificationTest.java
Patch:
@@ -25,7 +25,6 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.ShortestWeighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
@@ -137,7 +136,7 @@ public void testScenario() {
         // Path is: [0 0-1, 3 1-4, 6 4-7, 9 7-8, 11 8-9, 10 9-10]
         Path p = new Dijkstra(g, new ShortestWeighting(carEncoder), tMode).calcPath(0, 10);
         InstructionList wayList = p.calcInstructions(usTR);
-        Map<String, List<PathDetail>> details = p.calcDetails(new PathDetailsBuilderFactory(Arrays.asList(DETAILS.AVERAGE_SPEED), carEncoder, new FastestWeighting(carEncoder)), 0);
+        Map<String, List<PathDetail>> details = p.calcDetails(Arrays.asList(DETAILS.AVERAGE_SPEED), new PathDetailsBuilderFactory(), 0);
 
         PathWrapper pathWrapper = new PathWrapper();
         pathWrapper.setInstructions(wayList);

File: core/src/test/java/com/graphhopper/routing/template/RoundTripRoutingTemplateTest.java
Patch:
@@ -51,14 +51,14 @@ public class RoundTripRoutingTemplateTest {
     private final GHPoint ghPoint1 = new GHPoint(0, 0);
     private final GHPoint ghPoint2 = new GHPoint(1, 1);
 
-    @Test(expected = IllegalStateException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void lookup_throwsIfNumberOfGivenPointsNotOne() {
         RoundTripRoutingTemplate routingTemplate = new RoundTripRoutingTemplate(
                 new GHRequest(Collections.singletonList(ghPoint1)), new GHResponse(), null, 1);
         routingTemplate.lookup(Arrays.asList(ghPoint1, ghPoint2), carFE);
     }
 
-    @Test(expected = IllegalStateException.class)
+    @Test(expected = IllegalArgumentException.class)
     public void lookup_throwsIfNumberOfPointsInRequestNotOne() {
         RoundTripRoutingTemplate routingTemplate = new RoundTripRoutingTemplate(
                 new GHRequest(Arrays.asList(ghPoint1, ghPoint2)), new GHResponse(), null, 1);

File: core/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -426,6 +426,9 @@ public PointList clone(boolean reverse) {
 
     /**
      * This method does a deep copy of this object for the specified range.
+     *
+     * @param from the copying of the old PointList starts at this index
+     * @param end the copying of the old PointList ends at the index before (i.e. end is exclusive)
      */
     public PointList copy(int from, int end) {
         if (from > end)

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -977,8 +977,7 @@ public List<Path> calcPaths(GHRequest request, GHResponse ghRsp) {
 
             String algoStr = request.getAlgorithm();
             if (algoStr.isEmpty())
-                algoStr = chFactoryDecorator.isEnabled() && !disableCH &&
-                        !(lmFactoryDecorator.isEnabled() && !disableLM) ? DIJKSTRA_BI : ASTAR_BI;
+                algoStr = chFactoryDecorator.isEnabled() && !disableCH ? DIJKSTRA_BI : ASTAR_BI;
 
             List<GHPoint> points = request.getPoints();
             // TODO Maybe we should think about a isRequestValid method that checks all that stuff that we could do to fail fast

File: matching-web/src/test/java/com/graphhopper/matching/http/MatchServletTest.java
Patch:
@@ -68,7 +68,7 @@ public void testDoPost() throws Exception {
         // }
         JsonNode path = json.get("paths").get(0);
         assertEquals(5, path.get("instructions").size());
-        assertEquals(9, WebHelper.decodePolyline(path.get("points").asText(), 10, false).size());
+        assertEquals(7, WebHelper.decodePolyline(path.get("points").asText(), 10, false).size());
 
         assertEquals(132.9, path.get("time").asLong() / 1000f, 0.1);
         assertEquals(1002, path.get("distance").asDouble(), 1);

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperGtfsIT.java
Patch:
@@ -338,6 +338,7 @@ public void testTransferRules() {
                 TO1_LAT, TO1_LON
         );
         request.getHints().put(Parameters.PT.EARLIEST_DEPARTURE_TIME, LocalDateTime.of(2007,1,6,7,30).atZone(zoneId).toInstant());
+        request.getHints().put(Parameters.PT.MAX_TRANSFER_DISTANCE_PER_LEG, Double.MAX_VALUE);
 
         GHResponse response = graphHopper.route(request);
         assertEquals("Ignoring transfer rules (free walking): Will be there at 9.", time(1, 30), response.getBest().getTime());
@@ -347,7 +348,6 @@ public void testTransferRules() {
                 TO1_LAT, TO1_LON
         );
         request.getHints().put(Parameters.PT.EARLIEST_DEPARTURE_TIME, LocalDateTime.of(2007,1,6,7,30).atZone(zoneId).toInstant());
-        request.getHints().put(Parameters.PT.MAX_TRANSFER_DISTANCE_PER_LEG, 0.0);
 
         response = graphHopper.route(request);
         assertEquals("Transfer rule: 11 minutes. Will miss connection, and be there at 14.", time(6, 30), response.getBest().getTime());
@@ -366,7 +366,6 @@ public void testTransferRules() {
                 TO2_LAT, TO2_LON
         );
         request.getHints().put(Parameters.PT.EARLIEST_DEPARTURE_TIME, LocalDateTime.of(2007,1,6,7,30).atZone(zoneId).toInstant());
-        request.getHints().put(Parameters.PT.MAX_TRANSFER_DISTANCE_PER_LEG, 0.0);
 
         response = graphHopper.route(request);
         assertEquals("Will still be there at 8:10 because there is a route-specific exception for this route.", time(0, 40), response.getBest().getTime());
@@ -376,7 +375,6 @@ public void testTransferRules() {
                 FROM_LAT, FROM_LON
         );
         request.getHints().put(Parameters.PT.EARLIEST_DEPARTURE_TIME, LocalDateTime.of(2007,1,6,12,5).atZone(zoneId).toInstant());
-        request.getHints().put(Parameters.PT.MAX_TRANSFER_DISTANCE_PER_LEG, 0.0);
 
         response = graphHopper.route(request);
         assertEquals("Will take 1:15 because of a 'from route' exception with a longer transfer time.", time(1, 15), response.getBest().getTime());

File: reader-gtfs/src/test/java/com/graphhopper/GraphHopperMultimodalIT.java
Patch:
@@ -41,7 +41,7 @@
 
 public class GraphHopperMultimodalIT {
 
-    private static final String GRAPH_LOC = "target/GraphHopperGtfsIT";
+    private static final String GRAPH_LOC = "target/GraphHopperMultimodalIT";
     private static GraphHopperGtfs graphHopper;
     private static final ZoneId zoneId = ZoneId.of("America/Los_Angeles");
     private static GraphHopperStorage graphHopperStorage;

File: web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
Patch:
@@ -100,6 +100,8 @@ public Map<String, Object> toJSON(GHResponse rsp,
 
                     jsonPath.put("legs", ar.getLegs());
 
+                    jsonPath.put("details", ar.getPathDetails());
+
                     jsonPath.put("ascend", ar.getAscend());
                     jsonPath.put("descend", ar.getDescend());
                 }

File: reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
Patch:
@@ -61,9 +61,6 @@ PathWrapper parseSolutionIntoPath(Instant initialTime, boolean arriveBy, PtFlagE
         path.setPoints(pointsList);
         path.setDistance(path.getLegs().stream().mapToDouble(Trip.Leg::getDistance).sum());
         path.setTime((solution.currentTime - initialTime.toEpochMilli()) * (arriveBy ? -1 : 1));
-        if (solution.departureTime != null) {
-            path.setFirstPtLegDeparture(solution.departureTime);
-        }
         path.setNumChanges((int) path.getLegs().stream()
                 .filter(l -> l instanceof Trip.PtLeg)
                 .filter(l -> !((Trip.PtLeg) l).isInSameVehicleAsPrevious)

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -242,6 +242,9 @@ public long acceptWay(ReaderWay way) {
             if (way.hasTag("railway", "platform"))
                 return acceptBit;
 
+            if (way.hasTag("man_made", "pier"))
+                return acceptBit;
+
             return 0;
         }
 

File: core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
Patch:
@@ -79,6 +79,9 @@ public long acceptWay(ReaderWay way) {
             if (way.hasTag("railway", "platform"))
                 return acceptBit;
 
+            if (way.hasTag("man_made", "pier"))
+                return acceptBit;
+
             return 0;
         }
 

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -87,7 +87,7 @@ public void testMonacoWithInstructions() throws Exception {
                 setAlgorithm(ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
         // identify the number of counts to compare with CH foot route
-        assertEquals(698, rsp.getHints().getLong("visited_nodes.sum", 0));
+        assertEquals(699, rsp.getHints().getLong("visited_nodes.sum", 0));
 
         PathWrapper arsp = rsp.getBest();
         assertEquals(3437.6, arsp.getDistance(), .1);

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -337,7 +337,7 @@ public void testMonacoVia() {
         assertEquals("Turn left", resultJson.get(5).get("text"));
         assertEquals("Turn right onto Avenue Albert II", resultJson.get(6).get("text"));
 
-        assertEquals("Stopover 1", resultJson.get(20).get("text"));
+        assertEquals("Waypoint 1", resultJson.get(20).get("text"));
 
         assertEquals("Continue onto Avenue Albert II", resultJson.get(31).get("text"));
         assertEquals("Turn left", resultJson.get(32).get("text"));

File: core/src/main/java/com/graphhopper/util/Parameters.java
Patch:
@@ -120,8 +120,8 @@ public static final class Routing {
         public static final double DEFAULT_HEADING_PENALTY = 300;
         public static final String HEADING_PENALTY = "heading_penalty";
         /**
-         * block road access via a point lat,lon or an area defined from a circle lat,lon,radius or
-         * a rectangular lat1,lon1,lat2,lon2
+         * block road access via a point in the format lat,lon or an area defined by a circle lat,lon,radius or
+         * a rectangle lat1,lon1,lat2,lon2
          */
         public static final String BLOCK_AREA = "block_area";
     }

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.AbstractWeighting;
+import com.graphhopper.routing.weighting.BlockAreaWeighting;
 import com.graphhopper.routing.weighting.GenericWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
@@ -316,9 +317,6 @@ public void createPreparations(GraphHopperStorage ghStorage, TraversalMode trave
         traversalMode = getNodeBase();
 
         for (Weighting weighting : getWeightings()) {
-            if (weighting instanceof GenericWeighting) {
-                ((GenericWeighting) weighting).setGraph(ghStorage);
-            }
             PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(
                     new GHDirectory("", DAType.RAM_INT), ghStorage, ghStorage.getGraph(CHGraph.class, weighting),
                     weighting, traversalMode);

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
Patch:
@@ -27,7 +27,7 @@
 public abstract class AbstractWeighting implements Weighting {
     protected final FlagEncoder flagEncoder;
 
-    public AbstractWeighting(FlagEncoder encoder) {
+    protected AbstractWeighting(FlagEncoder encoder) {
         this.flagEncoder = encoder;
         if (!flagEncoder.isRegistered())
             throw new IllegalStateException("Make sure you add the FlagEncoder " + flagEncoder + " to an EncodingManager before using it elsewhere");

File: core/src/main/java/com/graphhopper/routing/weighting/ShortFastestWeighting.java
Patch:
@@ -35,13 +35,13 @@ public class ShortFastestWeighting extends FastestWeighting {
     private final double distanceFactor;
     private final double timeFactor;
 
-    public ShortFastestWeighting(FlagEncoder encoder, PMap pMap) {
+    public ShortFastestWeighting(FlagEncoder encoder, PMap map) {
         super(encoder);
-        timeFactor = checkBounds(TIME_FACTOR, pMap.getDouble(TIME_FACTOR, 1));
+        timeFactor = checkBounds(TIME_FACTOR, map.getDouble(TIME_FACTOR, 1));
 
         // is it faster to include timeFactor via distanceFactor = tmp / timeFactor?
         // default value derived from the cost for time e.g. 25€/hour and for distance 0.5€/km
-        distanceFactor = checkBounds(DISTANCE_FACTOR, pMap.getDouble(DISTANCE_FACTOR, 0.07));
+        distanceFactor = checkBounds(DISTANCE_FACTOR, map.getDouble(DISTANCE_FACTOR, 0.07));
 
         if (timeFactor < 1e-5 && distanceFactor < 1e-5)
             throw new IllegalArgumentException("[" + NAME + "] one of distance_factor or time_factor has to be non-zero");

File: core/src/main/java/com/graphhopper/util/PMap.java
Patch:
@@ -25,7 +25,6 @@
  * <p>
  *
  * @author Peter Karich
- * @see ConfigMap
  */
 public class PMap {
     private final Map<String, String> map;

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -533,8 +533,7 @@ public void testCalcInstructionsForDataFlagEncoder() {
         g.edge(2, 4, 5, true).setFlags(dataFlagEncoder.handleWayTags(w,1,0));
         g.edge(2, 3, 5, true).setFlags(dataFlagEncoder.handleWayTags(w,1,0));
 
-        ConfigMap cMap = dataFlagEncoder.readStringMap(new PMap());
-        Path p = new Dijkstra(g, new GenericWeighting(dataFlagEncoder, cMap), TraversalMode.NODE_BASED).calcPath(1, 3);
+        Path p = new Dijkstra(g, new GenericWeighting(dataFlagEncoder, new HintsMap()), TraversalMode.NODE_BASED).calcPath(1, 3);
         assertTrue(p.isFound());
         InstructionList wayList = p.calcInstructions(tr);
         assertEquals(3, wayList.size());

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageForDataFlagEncoderTest.java
Patch:
@@ -51,7 +51,6 @@ public void tearDown() {
         Helper.removeDir(new File(locationParent));
     }
 
-
     @Test
     public void testStorageProperties() {
         graph = new GraphBuilder(encodingManager).setStore(true).setLocation(defaultGraphLoc).create();

File: reader-gtfs/src/test/java/com/graphhopper/RealtimeIT.java
Patch:
@@ -186,7 +186,7 @@ public void testBlockTrips() {
                 .setScheduleRelationship(SKIPPED);
 
         GHResponse response = graphHopperFactory.createWith(feedMessageBuilder.build()).route(ghRequest);
-        assertEquals("I can still use the AB1 trip", "AB1", (((Trip.PtLeg) response.getBest().getLegs().get(1)).tripId));
+        assertEquals("I can still use the AB1 trip", "AB1", (((Trip.PtLeg) response.getBest().getLegs().get(0)).tripId));
         assertEquals("It takes", time(1,20), response.getBest().getTime());
     }
 

File: web/src/test/java/com/graphhopper/http/ChangeGraphServletIT.java
Patch:
@@ -47,6 +47,7 @@ public void setUp() {
         CmdArgs args = new CmdArgs().
                 put(Parameters.CH.PREPARE + "weightings", "no").
                 put("graph.flag_encoders", "car").
+                put("web.change_graph.enabled", "true").
                 put("graph.location", DIR).
                 put("datareader.file", "../core/files/andorra.osm.pbf");
         setUpJetty(args);

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -243,8 +243,8 @@ public List<PrepareContractionHierarchies> getPreparations() {
 
     @Override
     public RoutingAlgorithmFactory getDecoratedAlgorithmFactory(RoutingAlgorithmFactory defaultAlgoFactory, HintsMap map) {
-        boolean forceFlexMode = map.getBool(DISABLE, false);
-        if (!isEnabled() || forceFlexMode)
+        boolean disableCH = map.getBool(DISABLE, false);
+        if (!isEnabled() || disablingAllowed && disableCH)
             return defaultAlgoFactory;
 
         if (preparations.isEmpty())

File: core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
Patch:
@@ -216,8 +216,8 @@ public List<PrepareLandmarks> getPreparations() {
 
     @Override
     public RoutingAlgorithmFactory getDecoratedAlgorithmFactory(RoutingAlgorithmFactory defaultAlgoFactory, HintsMap map) {
-        boolean forceFlexMode = map.getBool(DISABLE, false);
-        if (!isEnabled() || disablingAllowed && forceFlexMode)
+        boolean disableLM = map.getBool(DISABLE, false);
+        if (!isEnabled() || disablingAllowed && disableLM)
             return defaultAlgoFactory;
 
         if (preparations.isEmpty())

File: reader-gtfs/src/test/java/com/graphhopper/gtfs/fare/FareTest.java
Patch:
@@ -142,7 +142,7 @@ public void buyMoreThanOneTicketIfTripIsLongerThanAllowedOnOne(Map<String, Fare>
     private static Map<String, Fare> parseFares(String fareAttributes, String fareRules) {
         GTFSFeed feed = new GTFSFeed();
         HashMap<String, Fare> fares = new HashMap<>();
-        new FareAttribute.Loader(feed, fares) {
+        new FixedFareAttributeLoader(feed, fares) {
             void load(String input){
                 reader = new CsvReader(new StringReader(input));
                 reader.setHeaders(new String[]{"fare_id","price","currency_type","payment_method","transfers","transfer_duration"});

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleContainer.java
Patch:
@@ -26,7 +26,7 @@
  */
 class SpatialRuleContainer {
 
-    protected final Set<SpatialRule> rules = new LinkedHashSet<>();
+    final Set<SpatialRule> rules = new LinkedHashSet<>();
 
     public SpatialRuleContainer addRule(SpatialRule spatialRule) {
         rules.add(spatialRule);
@@ -38,7 +38,7 @@ public SpatialRuleContainer addRules(Collection<SpatialRule> rules) {
         return this;
     }
 
-    public Collection<SpatialRule> getRules() {
+    Collection<SpatialRule> getRules() {
         return rules;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/AustriaSpatialRule.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.routing.util.spatialrules.countries;
 
 import com.graphhopper.routing.util.spatialrules.AccessValue;
+import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;
 import com.graphhopper.routing.util.spatialrules.TransportationMode;
 
 /**

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.routing.util.spatialrules.countries;
 
 import com.graphhopper.routing.util.spatialrules.AccessValue;
+import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;
 import com.graphhopper.routing.util.spatialrules.TransportationMode;
 
 /**

File: web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.graphhopper.http;
 
-import org.json.JSONObject;
+import com.fasterxml.jackson.databind.node.ObjectNode;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
@@ -25,7 +25,7 @@
 public class InvalidRequestServlet extends GHBaseServlet {
     @Override
     protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
-        JSONObject json = new JSONObject();
+        ObjectNode json = jsonNodeFactory.objectNode();
         json.put("message", "Not found");
         writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
     }

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -85,6 +85,9 @@ public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes) throw
 
         if (!ghRsp.hasErrors()) {
             try {
+                if(requestPoints.isEmpty()){
+                    throw new IllegalArgumentException("You have to pass at least one point");
+                }
                 List<Double> favoredHeadings = Collections.EMPTY_LIST;
                 try {
                     favoredHeadings = getDoubleParamList(httpReq, "heading");

File: web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
Patch:
@@ -51,7 +51,7 @@ public InputStream fetch(HttpURLConnection conn, boolean readErrorStreamNoExcept
         PathWrapper arsp = rsp.getBest();
         assertEquals(2138.3, arsp.getDistance(), 1e-1);
         assertEquals(17, arsp.getPoints().getSize());
-        assertEquals(5, arsp.getInstructions().getSize());
+        assertEquals(5, arsp.getInstructions().size());
         assertEquals("(0,Geradeaus auf A 100,1268.519329705091,65237)", arsp.getInstructions().get(0).toString());
         assertEquals(11, arsp.getInstructions().get(0).getPoints().size());
 

File: reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
Patch:
@@ -60,6 +60,7 @@ public class OSMShapeFileReader extends ShapeFileReader {
     private static final Logger LOGGER = LoggerFactory.getLogger(OSMShapeFileReader.class);
     private final HashSet<EdgeAddedListener> edgeAddedListeners = new HashSet<>();
     private int nextNodeId = FIRST_NODE_ID;
+    private final String encoding= "utf8";
 
     public OSMShapeFileReader(GraphHopperStorage ghStorage) {
         super(ghStorage);
@@ -90,7 +91,7 @@ void processJunctions() {
         FeatureIterator<SimpleFeature> roads = null;
 
         try {
-            dataStore = openShapefileDataStore(roadsFile);
+            dataStore = openShapefileDataStore(roadsFile, encoding);
             roads = getFeatureIterator(dataStore);
 
             HashSet<Coordinate> tmpSet = new HashSet<>();
@@ -152,7 +153,7 @@ void processRoads() {
         FeatureIterator<SimpleFeature> roads = null;
 
         try {
-            dataStore = openShapefileDataStore(roadsFile);
+            dataStore = openShapefileDataStore(roadsFile, encoding);
             roads = getFeatureIterator(dataStore);
 
             while (roads.hasNext()) {

File: reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
Patch:
@@ -87,10 +87,11 @@ protected FeatureIterator<SimpleFeature> getFeatureIterator(DataStore dataStore)
         }
     }
 
-    protected DataStore openShapefileDataStore(File file) {
+    protected DataStore openShapefileDataStore(File file, String encoding) {
         try {
             Map<String, Object> map = new HashMap<String, Object>();
             map.put("url", file.toURI().toURL());
+            map.put("charset", encoding);
             DataStore ds = DataStoreFinder.getDataStore(map);
             if (ds == null)
                 throw new IllegalArgumentException("Cannot find DataStore at " + file);

File: core/src/main/java/com/graphhopper/storage/TurnCostExtension.java
Patch:
@@ -178,7 +178,7 @@ private long nextCostFlags(int edgeFrom, int nodeVia, int edgeTo) {
             turnCostIndex = nextTurnCostIndex;
         }
         // so many turn restrictions on one node? here is something wrong
-        if (i > 1000)
+        if (i >= 1000)
             throw new IllegalStateException("something went wrong: there seems to be no end of the turn cost-list!?");
         return EMPTY_FLAGS;
     }

File: core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
Patch:
@@ -266,6 +266,7 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
     public boolean loadOrDoWork(final StorableProperties properties) {
         ExecutorCompletionService completionService = new ExecutorCompletionService<>(threadPool);
         int counter = 0;
+        int submittedPreparations = 0;
         boolean prepared = false;
         for (final PrepareLandmarks plm : preparations) {
             counter++;
@@ -291,11 +292,12 @@ public void run() {
                     }
                 }
             }, name);
+            submittedPreparations++;
         }
 
         threadPool.shutdown();
         try {
-            for(int i = 0; i < getPreparations().size(); i++){
+            for (int i = 0; i < submittedPreparations; i++) {
                 completionService.take().get();
             }
         } catch (Exception e) {

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -117,12 +117,14 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
             if (tmpPathList.isEmpty())
                 throw new IllegalStateException("At least one path has to be returned for " + fromQResult + " -> " + toQResult);
 
+            int idx = 0;
             for (Path path : tmpPathList) {
                 if (path.getTime() < 0)
-                    throw new RuntimeException("Time was negative. Please report as bug and include:" + ghRequest);
+                    throw new RuntimeException("Time was negative " + path.getTime() + " for index " + idx + ". Please report as bug and include:" + ghRequest);
 
                 pathList.add(path);
                 debug += ", " + path.getDebugInfo();
+                idx++;
             }
 
             altResponse.addDebugInfo(debug);

File: core/src/main/java/com/graphhopper/storage/Graph.java
Patch:
@@ -70,7 +70,6 @@ public interface Graph {
 
     /**
      * Returns a wrapper over the specified edgeId.
-     * <p>
      *
      * @param adjNode is the node that will be returned via adjNode(). If adjNode is
      *                Integer.MIN_VALUE then the edge with uncertain values for adjNode and baseNode (two

File: core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
Patch:
@@ -187,7 +187,7 @@ public void setSkippedEdges(int edge1, int edge2) {
     }
 
     @Override
-    public boolean canBeOverwritten(long flags) {
+    public int getMergeStatus(long flags) {
         throw new UnsupportedOperationException("Not supported.");
     }
 }

File: core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
Patch:
@@ -177,7 +177,7 @@ public int getAdditionalField() {
     }
 
     @Override
-    public boolean canBeOverwritten(long flags) {
+    public int getMergeStatus(long flags) {
         throw new UnsupportedOperationException("Not supported.");
     }
 

File: core/src/main/java/com/graphhopper/util/CHEdgeIteratorState.java
Patch:
@@ -45,11 +45,10 @@ public interface CHEdgeIteratorState extends EdgeIteratorState {
 
     /**
      * This method is only used on preparation.
-     * <p>
      *
-     * @see PrepareEncoder#canBeOverwritten(long, long)
+     * @see PrepareEncoder#getScMergeStatus(long, long)
      */
-    boolean canBeOverwritten(long flags);
+    int getMergeStatus(long flags);
 
     /**
      * Returns the weight of this shortcut.

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -491,7 +491,7 @@ public CHEdgeIteratorState setWeight(double weight) {
         }
 
         @Override
-        public boolean canBeOverwritten(long flags) {
+        public int getMergeStatus(long flags) {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
     }

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -53,7 +53,7 @@ public class PrepareContractionHierarchies extends AbstractAlgoPreparation imple
     private final GraphHopperStorage ghStorage;
     private final CHGraphImpl prepareGraph;
     private final DataAccess originalEdges;
-    final Map<Shortcut, Shortcut> shortcuts = new HashMap<Shortcut, Shortcut>();
+    private final Map<Shortcut, Shortcut> shortcuts = new HashMap<Shortcut, Shortcut>();
     private final Random rand = new Random(123);
     private final StopWatch allSW = new StopWatch();
     AddShortcutHandler addScHandler = new AddShortcutHandler();

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -406,7 +406,7 @@ public CHEdgeIteratorImpl(BaseGraph baseGraph, EdgeAccess edgeAccess, EdgeFilter
 
         @Override
         public final long getFlags() {
-//            checkShortcut(false, "getFlags");
+            checkShortcut(false, "getFlags");
             return super.getDirectFlags();
         }
 

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -30,7 +30,6 @@
 import com.graphhopper.storage.*;
 import com.graphhopper.util.*;
 import org.junit.Before;
-import org.junit.Ignore;
 import org.junit.Test;
 
 import java.util.Arrays;

File: core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
Patch:
@@ -187,7 +187,7 @@ public void setSkippedEdges(int edge1, int edge2) {
     }
 
     @Override
-    public boolean canBeOverwritten(long flags) {
+    public int getMergeStatus(long flags) {
         throw new UnsupportedOperationException("Not supported.");
     }
 }

File: core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
Patch:
@@ -177,7 +177,7 @@ public int getAdditionalField() {
     }
 
     @Override
-    public boolean canBeOverwritten(long flags) {
+    public int getMergeStatus(long flags) {
         throw new UnsupportedOperationException("Not supported.");
     }
 

File: core/src/main/java/com/graphhopper/util/CHEdgeIteratorState.java
Patch:
@@ -45,11 +45,10 @@ public interface CHEdgeIteratorState extends EdgeIteratorState {
 
     /**
      * This method is only used on preparation.
-     * <p>
      *
-     * @see PrepareEncoder#canBeOverwritten(long, long)
+     * @see PrepareEncoder#getMergeStatus(long, long)
      */
-    boolean canBeOverwritten(long flags);
+    int getMergeStatus(long flags);
 
     /**
      * Returns the weight of this shortcut.

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -491,7 +491,7 @@ public CHEdgeIteratorState setWeight(double weight) {
         }
 
         @Override
-        public boolean canBeOverwritten(long flags) {
+        public int getMergeStatus(long flags) {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
     }

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -33,7 +33,7 @@ public class TranslationMap {
     private static final List<String> LOCALES = Arrays.asList("ar", "ast", "bg", "ca",
             "cs_CZ", "da_DK", "de_DE", "el", "en_US", "es", "fa", "fil", "fi",
             "fr_FR", "fr_CH", "gl", "he", "hr_HR", "hsb", "hu_HU", "it", "ja", "ko", "lt_LT", "ne",
-            "nl", "pl_PL", "pt_BR", "pt_PT", "ro", "ru", "si", "sk", "sv_SE", "tr", "uk",
+            "nl", "pl_PL", "pt_BR", "pt_PT", "ro", "ru", "sl_SI", "sk", "sv_SE", "tr", "uk",
             "vi_VI", "zh_CN", "zh_HK");
     private final Map<String, Translation> translations = new HashMap<String, Translation>();
 

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -28,7 +28,6 @@
 
 /**
  * GraphHopper request wrapper to simplify requesting GraphHopper.
- * <p>
  *
  * @author Peter Karich
  * @author ratrun
@@ -100,6 +99,7 @@ public GHRequest(GHPoint startPlace, GHPoint endPlace) {
     /**
      * Set routing request
      * <p>
+     *
      * @param points          List of stopover points in order: start, 1st stop, 2nd stop, ..., end
      * @param favoredHeadings List of favored headings for starting (start point) and arrival (via
      *                        and end points) Headings are north based azimuth (clockwise) in (0, 360) or NaN for equal

File: core/src/main/java/com/graphhopper/apache/commons/collections/IntDoubleBinaryHeap.java
Patch:
@@ -16,13 +16,14 @@
 package com.graphhopper.apache.commons.collections;
 
 import com.graphhopper.coll.BinHeapWrapper;
+
 import java.util.Arrays;
 import java.util.NoSuchElementException;
 
 /**
  * This class is a partial copy of the class org.apache.commons.collections.BinaryHeap for
  * just the min heap and primitive, sorted double keys and associated int elements.
- *
+ * <p>
  * The library can be found here: https://commons.apache.org/proper/commons-collections/
  */
 public class IntDoubleBinaryHeap implements BinHeapWrapper<Number, Integer> {
@@ -162,7 +163,7 @@ final void percolateDownMinHeap(final int index) {
         elements[hole] = element;
         keys[hole] = key;
     }
-    
+
     final void percolateUpMinHeap(final int index) {
         int hole = index;
         int element = elements[hole];

File: core/src/main/java/com/graphhopper/coll/GHIntArrayList.java
Patch:
@@ -18,10 +18,10 @@
 package com.graphhopper.coll;
 
 import com.carrotsearch.hppc.IntArrayList;
+
 import java.util.Random;
 
 /**
- *
  * @author Peter Karich
  */
 public class GHIntArrayList extends IntArrayList {

File: core/src/main/java/com/graphhopper/coll/GHIntHashSet.java
Patch:
@@ -20,6 +20,7 @@
 import com.carrotsearch.hppc.HashOrderMixingStrategy;
 import com.carrotsearch.hppc.IntContainer;
 import com.carrotsearch.hppc.IntHashSet;
+
 import static com.graphhopper.coll.GHIntObjectHashMap.DETERMINISTIC;
 
 /**

File: core/src/main/java/com/graphhopper/coll/GHIntLongHashMap.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.carrotsearch.hppc.HashOrderMixingStrategy;
 import com.carrotsearch.hppc.IntLongHashMap;
+
 import static com.graphhopper.coll.GHIntObjectHashMap.DETERMINISTIC;
 
 /**
- *
  * @author Peter Karich
  */
 public class GHIntLongHashMap extends IntLongHashMap {

File: core/src/main/java/com/graphhopper/coll/GHLongHashSet.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.carrotsearch.hppc.HashOrderMixingStrategy;
 import com.carrotsearch.hppc.LongHashSet;
+
 import static com.graphhopper.coll.GHIntObjectHashMap.DETERMINISTIC;
 
 /**
- *
  * @author Peter Karich
  */
 public class GHLongHashSet extends LongHashSet {

File: core/src/main/java/com/graphhopper/coll/GHLongLongHashMap.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.carrotsearch.hppc.HashOrderMixingStrategy;
 import com.carrotsearch.hppc.LongLongHashMap;
+
 import static com.graphhopper.coll.GHIntObjectHashMap.DETERMINISTIC;
 
 /**
- *
  * @author Peter Karich
  */
 public class GHLongLongHashMap extends LongLongHashMap {

File: core/src/main/java/com/graphhopper/coll/GHLongObjectHashMap.java
Patch:
@@ -19,10 +19,10 @@
 
 import com.carrotsearch.hppc.HashOrderMixingStrategy;
 import com.carrotsearch.hppc.LongObjectHashMap;
+
 import static com.graphhopper.coll.GHIntObjectHashMap.DETERMINISTIC;
 
 /**
- *
  * @author Peter Karich
  */
 public class GHLongObjectHashMap<T> extends LongObjectHashMap<T> {

File: core/src/main/java/com/graphhopper/coll/GHObjectIntHashMap.java
Patch:
@@ -20,10 +20,10 @@
 import com.carrotsearch.hppc.HashOrderMixingStrategy;
 import com.carrotsearch.hppc.ObjectIntAssociativeContainer;
 import com.carrotsearch.hppc.ObjectIntHashMap;
+
 import static com.graphhopper.coll.GHIntObjectHashMap.DETERMINISTIC;
 
 /**
- *
  * @author Peter Karich
  */
 public class GHObjectIntHashMap<T> extends ObjectIntHashMap<T> {

File: core/src/main/java/com/graphhopper/coll/GHSortedCollection.java
Patch:
@@ -20,6 +20,7 @@
 import com.carrotsearch.hppc.LongArrayList;
 import com.carrotsearch.hppc.cursors.IntCursor;
 import com.carrotsearch.hppc.predicates.IntPredicate;
+
 import java.util.Iterator;
 import java.util.Map.Entry;
 import java.util.TreeMap;
@@ -114,7 +115,7 @@ public int pollKey() {
         }
 
         Iterator<IntCursor> iter = set.iterator();
-        final int val = iter.next().value;        
+        final int val = iter.next().value;
         set.remove(val);
         if (set.isEmpty()) {
             map.remove(e.getKey());

File: core/src/main/java/com/graphhopper/coll/GHTBitSet.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.coll;
 
 import com.carrotsearch.hppc.cursors.IntCursor;
+
 import java.util.Iterator;
 
 /**

File: core/src/main/java/com/graphhopper/reader/dem/AbstractEdgeElevationInterpolator.java
Patch:
@@ -35,7 +35,6 @@
  * Abstract base class for tunnel/bridge edge elevation interpolators. This
  * class estimates elevation of inner nodes of a tunnel/bridge based on
  * elevations of entry nodes. See #713 for more information.
- *
  * <p>
  * Since inner nodes of tunnel or bridge do not lie on the Earth surface, we
  * should not use elevations returned by the elevation provider for these

File: core/src/main/java/com/graphhopper/reader/dem/BridgeElevationInterpolator.java
Patch:
@@ -30,7 +30,7 @@
 public class BridgeElevationInterpolator extends AbstractEdgeElevationInterpolator {
 
     public BridgeElevationInterpolator(GraphHopperStorage storage,
-                    DataFlagEncoder dataFlagEncoder) {
+                                       DataFlagEncoder dataFlagEncoder) {
         super(storage, dataFlagEncoder);
     }
 

File: core/src/main/java/com/graphhopper/reader/dem/TunnelElevationInterpolator.java
Patch:
@@ -30,7 +30,7 @@
 public class TunnelElevationInterpolator extends AbstractEdgeElevationInterpolator {
 
     public TunnelElevationInterpolator(GraphHopperStorage storage,
-                    DataFlagEncoder dataFlagEncoder) {
+                                       DataFlagEncoder dataFlagEncoder) {
         super(storage, dataFlagEncoder);
     }
 

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactory.java
Patch:
@@ -25,5 +25,8 @@
  * @author Peter Karich
  */
 public interface RoutingAlgorithmFactory {
+    /**
+     * This method creates an algorithm out of this factory based on the specified opts and graph.
+     */
     RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts);
 }

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactoryDecorator.java
Patch:
@@ -18,11 +18,14 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.util.CmdArgs;
 
 /**
  * @author Peter Karich
  */
 public interface RoutingAlgorithmFactoryDecorator {
+    void init(CmdArgs args);
+
     boolean isEnabled();
 
     /**

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -675,7 +675,6 @@ public String getName() {
             }
 
             @Override
-
             public String toString() {
                 return getName() + "|" + prepareWeighting;
             }
@@ -719,7 +718,7 @@ public String toString() {
 
     @Override
     public String toString() {
-        return "prepare|CH|dijkstrabi";
+        return "prepare|dijkstrabi|ch";
     }
 
     interface ShortcutHandler {

File: core/src/main/java/com/graphhopper/routing/template/AlternativeRoutingTemplate.java
Patch:
@@ -36,6 +36,7 @@
 import java.util.List;
 
 import static com.graphhopper.util.Parameters.Routing.PASS_THROUGH;
+
 import com.graphhopper.util.shapes.GHPoint;
 
 /**
@@ -52,7 +53,7 @@ public AlternativeRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, Locatio
     public List<QueryResult> lookup(List<GHPoint> points, FlagEncoder encoder) {
         if (points.size() > 2)
             throw new IllegalArgumentException("Currently alternative routes work only with start and end point. You tried to use: " + points.size() + " points");
-        
+
         return super.lookup(points, encoder);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -258,9 +258,9 @@ public long acceptWay(ReaderWay way) {
         }
 
         // use the way if it is tagged for bikes
-        if (way.hasTag("bicycle", intendedValues) || 
-            way.hasTag("bicycle", "dismount") || 
-            way.hasTag("highway", "cycleway"))
+        if (way.hasTag("bicycle", intendedValues) ||
+                way.hasTag("bicycle", "dismount") ||
+                way.hasTag("highway", "cycleway"))
             return acceptBit;
 
         // accept only if explicitly tagged for bike usage

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -94,6 +94,7 @@ public interface FlagEncoder extends TurnCostEncoder {
      * uses a minimum value which is two magnitudes higher than in the super class. 
      * Currently this means starting from 100, and subclasses of this class start from 10000 and so on.
      */
+
     /**
      * Reports whether the edge is available in backward direction (i.e. from adj node to base node)
      * for a certain vehicle.

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupArray.java
Patch:
@@ -116,10 +116,10 @@ public SpatialRule lookupRule(double lat, double lon) {
     }
 
     protected int getRuleContainerIndex(int xIndex, int yIndex) {
-        if (xIndex < 0 || xIndex > lookupArray.length) {
+        if (xIndex < 0 || xIndex >= lookupArray.length) {
             return EMPTY_RULE_INDEX;
         }
-        if (yIndex < 0 || yIndex > lookupArray[0].length) {
+        if (yIndex < 0 || yIndex >= lookupArray[0].length) {
             return EMPTY_RULE_INDEX;
         }
         return castByteToInt(lookupArray[xIndex][yIndex]);

File: core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/DefaultSpatialRule.java
Patch:
@@ -73,6 +73,6 @@ public AccessValue getAccessValue(String highwayTag, TransportationMode transpor
 
     @Override
     public String getId() {
-        throw new UnsupportedOperationException("No country code for the DefaultSpatialRule");
+        throw new UnsupportedOperationException("No id for the DefaultSpatialRule");
     }
 }

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
Patch:
@@ -47,7 +47,7 @@ public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrN
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
             throw new IllegalStateException("Invalid speed stored in edge! " + speed);
         if (speed == 0)
-            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.");        
+            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.");
 
         return (long) (edgeState.getDistance() * 3600 / speed);
     }

File: core/src/main/java/com/graphhopper/routing/weighting/BeelineWeightApproximator.java
Patch:
@@ -24,7 +24,6 @@
 /**
  * Approximates the distance to the goal node by weighting the beeline distance according to the
  * distance weighting
- * <p>
  *
  * @author jansoe
  */
@@ -41,7 +40,7 @@ public BeelineWeightApproximator(NodeAccess nodeAccess, Weighting weighting) {
     }
 
     @Override
-    public void setGoalNode(int toNode) {
+    public void setTo(int toNode) {
         toLat = nodeAccess.getLatitude(toNode);
         toLon = nodeAccess.getLongitude(toNode);
     }
@@ -52,7 +51,7 @@ public WeightApproximator setEpsilon(double epsilon) {
     }
 
     @Override
-    public WeightApproximator duplicate() {
+    public WeightApproximator reverse() {
         return new BeelineWeightApproximator(nodeAccess, weighting).setDistanceCalc(distanceCalc).setEpsilon(epsilon);
     }
 

File: core/src/main/java/com/graphhopper/search/NameIndex.java
Patch:
@@ -72,7 +72,7 @@ public long put(String name) {
         long oldPointer = bytePointer;
         names.ensureCapacity(bytePointer + 1 + bytes.length);
         byte[] sizeBytes = new byte[]{
-            (byte) bytes.length
+                (byte) bytes.length
         };
         names.setBytes(bytePointer, sizeBytes, sizeBytes.length);
         bytePointer++;

File: core/src/main/java/com/graphhopper/storage/DataAccess.java
Patch:
@@ -87,8 +87,8 @@ public interface DataAccess extends Storable<DataAccess> {
     int getHeader(int bytePos);
 
     /**
-     * The first time you use a DataAccess object after configuring it you need to call this. After
-     * that first call you have to use ensureCapacity to ensure that enough space is reserved.
+     * The first time you use a DataAccess object after configuring it you need to call this method.
+     * After that first call you have to use ensureCapacity to ensure that enough space is reserved.
      */
     @Override
     DataAccess create(long bytes);

File: core/src/main/java/com/graphhopper/storage/Directory.java
Patch:
@@ -51,6 +51,7 @@ public interface Directory {
      * Renames the specified DataAccess object into one.
      */
     // DataAccess rename( DataAccess da, String newName );
+
     /**
      * Removes the specified object from the directory.
      */

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -155,7 +155,7 @@ private ByteBuffer newByteBuffer(long offset, long byteCount) throws IOException
         ByteBuffer buf = null;
         IOException ioex = null;
         // One retry if it fails. It could fail e.g. if previously buffer wasn't yet unmapped from the jvm
-        for (int trial = 0; trial < 1;) {
+        for (int trial = 0; trial < 1; ) {
             try {
                 buf = raFile.getChannel().map(
                         allowWrites ? FileChannel.MapMode.READ_WRITE : FileChannel.MapMode.READ_ONLY,

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -29,7 +29,9 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
+
 import java.util.ArrayList;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: core/src/main/java/com/graphhopper/util/BitUtil.java
Patch:
@@ -27,7 +27,6 @@
  * 2=&gt;...
  * </pre> LITTLE endianness is default for GraphHopper and most microprocessors.
  *
- *
  * @author Peter Karich
  */
 public abstract class BitUtil {

File: core/src/main/java/com/graphhopper/util/EdgeExplorer.java
Patch:
@@ -29,7 +29,6 @@
 public interface EdgeExplorer {
     /**
      * This method sets the base node for iteration through neighboring edges (EdgeIteratorStates).
-     * <p>
      *
      * @return EdgeIterator around the specified baseNode. The resulting iterator can be a new
      * instance or a reused instance returned in a previous call. So be sure you do not use the

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -359,7 +359,7 @@ public static int reverseEdgeKey(int edgeKey) {
     public static int getEdgeFromEdgeKey(int edgeKey) {
         return edgeKey / 2;
     }
-    
+
     /**
      * This edge iterator can be used in tests to mock specific iterator behaviour via overloading
      * certain methods.

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -45,7 +45,7 @@ static String simpleXMLEscape(String str) {
         // We could even use the 'more flexible' CDATA section but for now do the following. The 'and' could be important sometimes:
         return str.replaceAll("&", "&amp;").
                 // but do not care for:
-                replaceAll("[\\<\\>]", "_");
+                        replaceAll("[\\<\\>]", "_");
     }
 
     public void replaceLast(Instruction instr) {

File: core/src/main/java/com/graphhopper/util/MiniPerfTest.java
Patch:
@@ -92,7 +92,7 @@ public String getReport() {
     }
 
     public String nf(Number num) {
-        return new DecimalFormat("#.#").format(num);
+        return new DecimalFormat("#.###").format(num);
     }
 
     /**

File: core/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -371,12 +371,12 @@ public List<Double[]> toGeoJson(boolean includeElevation) {
         for (int i = 0; i < size; i++) {
             if (includeElevation)
                 points.add(new Double[]{
-                    Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i)),
-                    Helper.round2(getElevation(i))
+                        Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i)),
+                        Helper.round2(getElevation(i))
                 });
             else
                 points.add(new Double[]{
-                    Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i))
+                        Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i))
                 });
         }
         return points;

File: core/src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -71,6 +71,7 @@ public void testLoad() {
                 setStoreOnFlush(false).
                 setEncodingManager(encodingManager).setCHEnabled(false).
                 loadGraph(graph);
+        // 3 -> 0
         GHResponse rsp = instance.route(new GHRequest(42, 10.4, 42, 10));
         assertFalse(rsp.hasErrors());
         PathWrapper arsp = rsp.getBest();

File: core/src/test/java/com/graphhopper/apache/commons/collections/IntDoubleBinaryHeapTest.java
Patch:
@@ -4,7 +4,6 @@
 import com.graphhopper.coll.BinHeapWrapper;
 
 /**
- *
  * @author Peter Karich
  */
 public class IntDoubleBinaryHeapTest extends AbstractBinHeapTest {

File: core/src/test/java/com/graphhopper/apache/commons/lang3/StringUtilsTest.java
Patch:
@@ -24,12 +24,12 @@
 /**
  * This class is a partial Copy of the org.apache.commons.lang3.StringUtils
  * that can be found here: https://github.com/apache/commons-lang/blob/master/src/test/java/org/apache/commons/lang3/StringUtilsTest.java
- *
+ * <p>
  * The library can be found here: https://commons.apache.org/proper/commons-lang/
  *
  * @author Robin Boldt
  */
-public class StringUtilsTest{
+public class StringUtilsTest {
 
     @Test
     public void testGetLevenshteinDistance_StringString() {

File: core/src/test/java/com/graphhopper/coll/GHIntArrayListTest.java
Patch:
@@ -18,7 +18,9 @@
 package com.graphhopper.coll;
 
 import java.util.Random;
+
 import org.junit.Test;
+
 import static org.junit.Assert.*;
 
 /**

File: core/src/test/java/com/graphhopper/coll/GHSortedCollectionTest.java
Patch:
@@ -26,7 +26,7 @@
  * @author Peter Karich
  */
 public class GHSortedCollectionTest {
-    
+
     @Test
     public void testPoll() {
         GHSortedCollection instance = new GHSortedCollection();

File: core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.reader.dem;
 
 import com.graphhopper.coll.GHIntHashSet;
+
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
@@ -51,7 +52,7 @@ public void interpolatesElevationOfPillarNodes() {
 
         // @formatter:off
         /*
-		 * Graph structure:
+         * Graph structure:
 		 * 0-----1-----2-----3-----4
 		 *        \    |    /
 		 *         \   |   /

File: core/src/test/java/com/graphhopper/reader/dem/TunnelElevationInterpolatorTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.reader.dem;
 
 import com.graphhopper.coll.GHIntHashSet;
+
 import static org.junit.Assert.assertEquals;
 
 import org.junit.Test;
@@ -49,7 +50,7 @@ public void doesNotInterpolateElevationOfTunnelWithZeroOuterNodes() {
 
         // @formatter:off
         /*
-		 * Graph structure:
+         * Graph structure:
 		 * 0--T--1--T--2     3--T--4
 		 * Tunnel 0-1-2 has a single outer node 2.
          */

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -516,7 +516,7 @@ public void testWithCoordinates() {
         graph.edge(2, 3, 2, true).setWayGeometry(Helper.createPointList(0, 1.5));
         graph.edge(3, 4, 2, true).setWayGeometry(Helper.createPointList(0, 2));
 
-        // duplicate but one is longer
+        // duplicate but the second edge is longer
         graph.edge(0, 2, 1.2, true);
         graph.edge(0, 2, 1.5, true).setWayGeometry(Helper.createPointList(0.5, 0));
 
@@ -695,7 +695,7 @@ QueryResult newQR(Graph graph, int node1, int node2) {
     public void testTwoWeightsPerEdge() {
         FlagEncoder encoder = new Bike2WeightFlagEncoder();
         EncodingManager em = new EncodingManager(encoder);
-        AlgorithmOptions opts = AlgorithmOptions.start().                
+        AlgorithmOptions opts = AlgorithmOptions.start().
                 weighting(new FastestWeighting(encoder)).build();
         GraphHopperStorage graph = createGHStorage(em, Arrays.asList(opts.getWeighting()), true);
         initEleGraph(graph);

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java
Patch:
@@ -56,8 +56,8 @@ public AlternativeRouteTest(TraversalMode tMode) {
     @Parameterized.Parameters(name = "{0}")
     public static Collection<Object[]> configs() {
         return Arrays.asList(new Object[][]{
-            {TraversalMode.NODE_BASED},
-            {TraversalMode.EDGE_BASED_2DIR}
+                {TraversalMode.NODE_BASED},
+                {TraversalMode.EDGE_BASED_2DIR}
         });
     }
 

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -50,7 +50,6 @@ public void testFound() {
         g.close();
     }
 
-    @Test
     public void testWayList() {
         GraphHopperStorage g = new GraphBuilder(carManager).create();
         NodeAccess na = g.getNodeAccess();

File: core/src/test/java/com/graphhopper/routing/util/Car4WDFlagEncoderTest.java
Patch:
@@ -57,7 +57,7 @@ public void testAccess() {
         way.setTag("highway", "track");
         way.setTag("tracktype", "grade2");
         assertTrue(encoder.acceptWay(way) > 0);
-	// This is the only difference from a "car"
+        // This is the only difference from a "car"
         way.setTag("tracktype", "grade4");
         assertTrue(encoder.acceptWay(way) > 0);
 

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -198,7 +198,7 @@ public void testDestinationTag() {
         assertEquals(60, encoder.getSpeed(way), 1e-1);
 
         way.setTag("vehicle", "destination");
-        long flags = encoder.handleWayTags(way, encoder.acceptWay(way),0);
+        long flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
         assertEquals(5, encoder.getSpeed(flags), 1e-1);
     }
 
@@ -595,6 +595,7 @@ public void testCombination() {
         assertTrue(em.getEncoder("bike").isBackward(edgeFlags));
         assertTrue(em.getEncoder("bike").isForward(edgeFlags));
     }
+
     @Test
     public void testApplyBadSurfaceSpeed() {
         ReaderWay way = new ReaderWay(1);

File: core/src/test/java/com/graphhopper/storage/index/AbstractLocationIndexTester.java
Patch:
@@ -185,8 +185,8 @@ public void testGrid() {
             }
 
             assertTrue(i + " orig:" + (float) lat + "," + (float) lon
-                    + " full:" + fullLat + "," + fullLon + " fullDist:" + fullDist
-                    + " found:" + newLat + "," + newLon + " foundDist:" + newDist,
+                            + " full:" + fullLat + "," + fullLon + " fullDist:" + fullDist
+                            + " found:" + newLat + "," + newLon + " foundDist:" + newDist,
                     Math.abs(fullDist - newDist) < 50000);
         }
         fullIndex.close();

File: core/src/test/java/com/graphhopper/util/DouglasPeuckerTest.java
Patch:
@@ -78,7 +78,7 @@ public void testSimplifyCheckPointOrder() {
         assertEquals(11, pointList.getSize());
         assertFalse(pointList.toString(), pointList.toString().contains("NaN"));
         assertEquals("(50.203764443183644,9.961074440801317), (50.20318963087774,9.960999562464645), (50.202952888673984,9.96094144793469), (50.20267889356641,9.96223002587773), (50.201853928011374,9.961859918278305), "
-                + "(50.20138565901039,9.961668810881722), (50.20128507617008,9.96216874485095), (50.20088553877664,9.961953795595925), (50.200686794534775,9.961899033827313), (50.20014066696481,9.961716680863127), (50.199798499043254,9.961588158344957)",
+                        + "(50.20138565901039,9.961668810881722), (50.20128507617008,9.96216874485095), (50.20088553877664,9.961953795595925), (50.200686794534775,9.961899033827313), (50.20014066696481,9.961716680863127), (50.199798499043254,9.961588158344957)",
                 pointList.toString());
     }
 }

File: core/src/test/java/com/graphhopper/util/FinishInstructionTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.util;
 
 import org.junit.Test;
+
 import static org.junit.Assert.*;
 
 /**

File: reader-json/src/main/java/com/graphhopper/json/FeatureJsonDeserializer.java
Patch:
@@ -90,7 +90,7 @@ public JsonFeature deserialize(JsonElement json, Type type, JsonDeserializationC
             return new JsonFeature(id, strType, bbox, geometry, properties);
 
         } catch (Exception ex) {
-            throw new JsonParseException("Problem parsing JSON feature " + json);
+            throw new JsonParseException("Problem parsing JSON feature " + json, ex);
         }
     }
 

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfFieldDecoder.java
Patch:
@@ -10,7 +10,7 @@
  * <p>
  *
  * @author Brett Henderson
- * <p>
+ *         <p>
  */
 public class PbfFieldDecoder {
     private static final double COORDINATE_SCALING_FACTOR = 0.000000001;

File: reader-shp/src/main/java/com/graphhopper/reader/shp/GraphhopperSHP.java
Patch:
@@ -25,9 +25,10 @@
 import com.graphhopper.storage.GraphHopperStorage;
 
 /**
+ * This class is the main entry point to import from OpenStreetMap shape files similar to GraphHopperOSM which imports
+ * OSM xml and pbf files.
  *
  * @author Phil
- *
  */
 public class GraphhopperSHP extends GraphHopper {
     private final HashSet<EdgeAddedListener> edgeAddedListeners = new HashSet<>();

File: reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
Patch:
@@ -101,7 +101,7 @@ protected DataStore openShapefileDataStore(File file) {
     }
 
     /*
-	 * Get longitude using the current long-lat order convention
+     * Get longitude using the current long-lat order convention
      */
     protected double lng(Coordinate coordinate) {
         return coordinate.getOrdinate(0);

File: reader-shp/src/main/java/com/graphhopper/reader/shp/Utils.java
Patch:
@@ -22,9 +22,7 @@
 import com.vividsolutions.jts.geom.GeometryFactory;
 
 /**
- *
  * @author Phil
- *
  */
 public class Utils {
     public static String toWKT(PointList list) {

File: web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
Patch:
@@ -22,12 +22,14 @@
 import com.graphhopper.storage.change.ChangeGraphResponse;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.StopWatch;
+
 import java.io.IOException;
 import java.io.InputStreamReader;
 import javax.inject.Inject;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+
 import org.json.JSONObject;
 import com.graphhopper.json.GHJson;
 

File: web/src/main/java/com/graphhopper/http/GHServer.java
Patch:
@@ -64,7 +64,7 @@ public void start(Injector injector) throws Exception {
         ResourceHandler resHandler = new ResourceHandler();
         resHandler.setDirectoriesListed(false);
         resHandler.setWelcomeFiles(new String[]{
-            "index.html"
+                "index.html"
         });
         resHandler.setResourceBase(args.get("jetty.resourcebase", "./web/src/main/webapp"));
 
@@ -95,7 +95,7 @@ public void start(Injector injector) throws Exception {
 
         HandlerList handlers = new HandlerList();
         handlers.setHandlers(new Handler[]{
-            resHandler, servHandler
+                resHandler, servHandler
         });
 
         GzipHandler gzipHandler = new GzipHandler();

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -38,6 +38,7 @@
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+
 import org.json.JSONException;
 
 /**

File: web/src/test/java/com/graphhopper/http/ChangeGraphServletIT.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.Parameters;
 import org.json.JSONObject;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -43,7 +44,7 @@ public static void cleanUp() {
     @Before
     public void setUp() {
         CmdArgs args = new CmdArgs().
-                put("prepare.ch.weightings", "no").
+                put(Parameters.CH.PREPARE + "weightings", "no").
                 put("graph.flag_encoders", "car").
                 put("graph.location", DIR).
                 put("datareader.file", "../core/files/andorra.osm.pbf");

File: web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.Parameters;
 import org.json.JSONObject;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -45,7 +46,7 @@ public void setUp() {
         CmdArgs args = new CmdArgs().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put("prepare.ch.weightings", "no").
+                put(Parameters.CH.PREPARE + "weightings", "no").
                 put("prepare.min_one_way_network_size", "0").
                 put("config", "../config-example.properties").
                 put("datareader.file", "../core/files/monaco.osm.gz").

File: web/src/test/java/com/graphhopper/http/NearestServletWithEleIT.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.Parameters;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.junit.AfterClass;
@@ -47,7 +48,7 @@ public void setUp() {
         CmdArgs args = new CmdArgs().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put("prepare.ch.weightings", "no").
+                put(Parameters.CH.PREPARE + "weightings", "no").
                 put("prepare.min_one_way_network_size", "0").
                 put("config", "../config-example.properties").
                 put("datareader.file", "../core/files/monaco.osm.gz").

File: web/src/test/java/com/graphhopper/http/SpatialRuleLookupBuilderTest.java
Patch:
@@ -65,7 +65,7 @@ public void testBounds() {
     @Test
     public void testIntersection() {
         /*
-            We are creating a BBox smaller than Germany. We have the German Spatial rule acitivated by default.
+            We are creating a BBox smaller than Germany. We have the German Spatial rule activated by default.
             So the BBox should not contain a Point lying somewhere close in Germany.
          */
         Reader reader = new InputStreamReader(SpatialRuleLookupBuilderTest.class.getResourceAsStream("countries.geo.json"));

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1194,5 +1194,4 @@ protected void ensureWriteAccess() {
     public void setNonChMaxWaypointDistance(int nonChMaxWaypointDistance) {
         this.nonChMaxWaypointDistance = nonChMaxWaypointDistance;
     }
-
 }

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -437,7 +437,7 @@ public static void cleanHack() {
 
     public static String nf(long no) {
         // I like french localization the most: 123654 will be 123 654 instead
-        // of comma vs. point confusion for english/german guys.
+        // of comma vs. point confusion for English/German people.
         // NumberFormat is not thread safe => but getInstance looks like it's cached
         return NumberFormat.getInstance(Locale.FRANCE).format(no);
     }

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -229,7 +229,7 @@ public String getVehicle() {
     }
 
     /**
-     * Specifiy car, bike or foot. Or specify empty to use default.
+     * Specify car, bike or foot. Or specify empty to use default.
      */
     public GHRequest setVehicle(String vehicle) {
         hints.setVehicle(vehicle);

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -88,7 +88,7 @@ public String getDebugInfo() {
 
     /**
      * This method returns true if one of the paths has an error or if the response itself is
-     * errornous.
+     * erroneous.
      */
     public boolean hasErrors() {
         if (!errors.isEmpty())
@@ -103,7 +103,7 @@ public boolean hasErrors() {
     }
 
     /**
-     * This method returns all the explicitely added errors and the errors of all paths.
+     * This method returns all the explicitly added errors and the errors of all paths.
      */
     public List<Throwable> getErrors() {
         List<Throwable> list = new ArrayList<Throwable>();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -853,7 +853,7 @@ private void initCHAlgoFactoryDecorator() {
     }
 
     /**
-     * This method creates prepations.
+     * This method creates preparations.
      *
      * @deprecated use getCHFactoryDecorator().createPreparations() instead. Will be removed in 0.8.
      */

File: core/src/main/java/com/graphhopper/coll/CompressedArray.java
Patch:
@@ -30,7 +30,7 @@
 import java.util.zip.Inflater;
 
 /**
- * Stores the entries in compressed segments. The methods de(compress) are taken from lucene
+ * Stores the entries in compressed segments. The methods de(compress) are taken from Lucene
  * CompressionTools. Before accessing the stored values be sure you called flush.
  * <p>
  *
@@ -52,7 +52,7 @@ public CompressedArray() {
     /**
      * @param _segments           initialize with this number of segments
      * @param entriesPerSeg       a static number which sets the entries per segment
-     * @param approxBytesPerEntry an *approximative* number (as entries can have different lengths)
+     * @param approxBytesPerEntry an *approximate* number (as entries can have different lengths)
      */
     public CompressedArray(int _segments, int entriesPerSeg, int approxBytesPerEntry) {
         if (entriesPerSeg < 1) {

File: core/src/main/java/com/graphhopper/geohash/SpatialKeyAlgo.java
Patch:
@@ -28,7 +28,7 @@
  * <p>
  * lat0 lon0 | lat1 lon1 | lat2 lon2
  * <p>
- * This works similar to how BIG endianess works for bytes to int packing. Detailed information is
+ * This works similar to how BIG endianness works for bytes to int packing. Detailed information is
  * available in this blog post:
  * http://karussell.wordpress.com/2012/05/23/spatial-keys-memory-efficient-geohashes/
  * <p>

File: core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
Patch:
@@ -56,7 +56,7 @@ public void setCalcMean(boolean eleCalcMean) {
     };
 
     /**
-     * @return returns the hight in meter or Double.NaN if invalid
+     * @return returns the height in meters or Double.NaN if invalid
      */
     double getEle(double lat, double lon);
 

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -86,7 +86,7 @@ protected void initCollections(int size) {
     }
 
     /**
-     * @param approx if true it enables approximative distance calculation from lat,lon values
+     * @param approx if true it enables approximate distance calculation from lat,lon values
      */
     public AStarBidirection setApproximation(WeightApproximator approx) {
         weightApprox = new ConsistentWeightApproximator(approx);

File: core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
Patch:
@@ -41,7 +41,7 @@
 
 /**
  * This class implements the alternative paths search using the "plateau" and partially the
- * "penalty" method discribed in the following papers.
+ * "penalty" method described in the following papers.
  * <p>
  * <ul>
  * <li>Choice Routing Explanation - Camvit 2009:

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -25,7 +25,7 @@
 import com.graphhopper.util.EdgeIterator;
 
 /**
- * Recursivly unpack shortcuts.
+ * Recursively unpack shortcuts.
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -316,7 +316,7 @@ public long handleRelationTags(ReaderRelation relation, long oldRelationFlags) {
      *
      * @param way:   needed to retrieve tags
      * @param speed: speed guessed e.g. from the road type or other tags
-     * @return The assumed avererage speed.
+     * @return The assumed average speed.
      */
     @Override
     protected double applyMaxSpeed(ReaderWay way, double speed) {

File: core/src/main/java/com/graphhopper/routing/weighting/AbstractAdjustedWeighting.java
Patch:
@@ -41,7 +41,7 @@ public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrN
     }
 
     /**
-     * Returns the flagEncoder of the superWeighting. Usually we do not have a Flagencoder here.
+     * Returns the flagEncoder of the superWeighting. Usually we do not have a FlagEncoder here.
      */
     @Override
     public FlagEncoder getFlagEncoder() {

File: core/src/main/java/com/graphhopper/routing/weighting/AvoidEdgesWeighting.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * Rates already used Paths worse.
  *
- * @author RobinBoldt
+ * @author Robin Boldt
  */
 public class AvoidEdgesWeighting extends AbstractAdjustedWeighting {
     // contains the edge IDs of the already visited edges

File: core/src/main/java/com/graphhopper/routing/weighting/Weighting.java
Patch:
@@ -55,7 +55,7 @@ public interface Weighting {
     /**
      * This method calculates the time taken (in milli seconds) for the specified edgeState and
      * optionally include the turn costs (in seconds) of the previous (or next) edgeId via
-     * prevOrNextEdgeId. Typically used for post-processing and on only a few thausend edges.
+     * prevOrNextEdgeId. Typically used for post-processing and on only a few thousand edges.
      */
     long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId);
 

File: core/src/main/java/com/graphhopper/storage/DataAccess.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.storage;
 
 /**
- * Abstraction of the underlying datastructure with a unique id and location. To ensure that the id
+ * Abstraction of the underlying data structure with a unique id and location. To ensure that the id
  * is unique use a Directory.attach or findAttach, if you don't need uniqueness call
  * Directory.create. Current implementations are RAM and memory mapped access.
  * <p>

File: core/src/main/java/com/graphhopper/storage/VLongStorage.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.Arrays;
 
 /**
- * Taken from lucene DataOutput. VLong's are longs which have variable length depending on the size.
+ * Taken from Lucene DataOutput. VLong's are longs which have variable length depending on the size.
  * When used together with 'delta compression' it is likely that you'll use only 1 byte per value.
  */
 public class VLongStorage {

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -118,7 +118,7 @@ public LocationIndex setResolution(int resolution) {
 
     /**
      * Fill quadtree which will span a raster over the entire specified graph g. But do this in a
-     * pre-defined resolution which is controlled via capacity. This datastructure then uses approx.
+     * pre-defined resolution which is controlled via capacity. This data structure then uses approx.
      * capacity * 4 bytes. So maximum capacity is 2^30 where the quadtree would cover the world
      * boundaries every 1.3km - IMO enough for EU or US networks.
      */

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -41,7 +41,7 @@
 /**
  * This implementation implements an n-tree to get the closest node or edge from GPS coordinates.
  * <p>
- * All leafs are at the same depth, otherwise it is quite complicated to calculate the bresenham
+ * All leafs are at the same depth, otherwise it is quite complicated to calculate the Bresenham
  * line for different resolutions, especially if a leaf node could be split into a tree-node and
  * resolution changes.
  * <p>

File: core/src/main/java/com/graphhopper/util/AngleCalc.java
Patch:
@@ -80,7 +80,7 @@ public double convertAzimuth2xaxisAngle(double azimuth) {
 
     /**
      * Change the representation of an orientation, so the difference to the given baseOrientation
-     * will be smaller or equal to PI (180 degree). This is achieved by adding or substracting a
+     * will be smaller or equal to PI (180 degree). This is achieved by adding or subtracting a
      * 2*PI, so the direction of the orientation will not be changed
      */
     public double alignOrientation(double baseOrientation, double orientation) {

File: core/src/main/java/com/graphhopper/util/BitUtilBig.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.util;
 
 /**
- * Conversion between "the memory" (integer/long/float/double/string) to bytes via BIG endianess.
+ * Conversion between "the memory" (integer/long/float/double/string) to bytes via BIG endianness.
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/util/BitUtilLittle.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.util;
 
 /**
- * Conversion between "the memory" (integer/long/float/double/string) to bytes via little endianess.
+ * Conversion between "the memory" (integer/long/float/double/string) to bytes via little endianness.
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java
Patch:
@@ -20,7 +20,7 @@
 import com.graphhopper.coll.GHBitSet;
 
 /**
- * Implementattion of breadth first search (BFS)
+ * Implementation of breadth first search (BFS)
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java
Patch:
@@ -20,7 +20,7 @@
 import static java.lang.Math.*;
 
 /**
- * Calculates the approximative distance of two points on earth. Very good results if delat_lon is
+ * Calculates the approximate distance of two points on earth. Very good results if delat_lon is
  * not too big (see DistanceCalcTest), e.g. the distance is small.
  * <p>
  * http://en.wikipedia.org/wiki/Geographical_distance#Spherical_Earth_projected_to_a_plane

File: core/src/main/java/com/graphhopper/util/DouglasPeucker.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.util;
 
 /**
- * Simplyfies a list of 2D points which are not too far away.
+ * Simplifies a list of 2D points which are not too far away.
  * http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm
  * <p>
  * Calling simplify is thread safe.

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -32,7 +32,7 @@ public interface EdgeIteratorState {
 
     /**
      * @return the edge id of the current edge. Do not make any assumptions about the concrete
-     * values, except that for an implemention it is recommended that they'll be contiguous.
+     * values, except that for an implementation it is recommended that they'll be contiguous.
      */
     int getEdge();
 

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -318,7 +318,7 @@ public static PointList createPointList3D(double... list) {
     /**
      * Converts into an integer to be compatible with the still limited DataAccess class (accepts
      * only integer values). But this conversion also reduces memory consumption where the precision
-     * loss is accceptable. As +- 180° and +-90° are assumed as maximum values.
+     * loss is acceptable. As +- 180° and +-90° are assumed as maximum values.
      * <p>
      *
      * @return the integer of the specified degree

File: core/src/main/java/com/graphhopper/util/PMap.java
Patch:
@@ -146,7 +146,7 @@ String get(String key) {
     }
 
     /**
-     * This method copies the underlying structur into a new Map object
+     * This method copies the underlying structure into a new Map object
      */
     public Map<String, String> toMap() {
         return new HashMap<>(map);

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -94,7 +94,7 @@ public void add(Translation tr) {
     }
 
     /**
-     * Returns the Translation object for the specified locale and falls back to english if the
+     * Returns the Translation object for the specified locale and falls back to English if the
      * locale was not found.
      */
     public Translation getWithFallBack(Locale locale) {

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -60,12 +60,12 @@
  * of the relation.
  * <p>
  * 2.a) Reads nodes from OSM file and stores lat+lon information either into the intermediate
- * datastructure for the pillar nodes (pillarLats/pillarLons) or, if a tower node, directly into the
+ * data structure for the pillar nodes (pillarLats/pillarLons) or, if a tower node, directly into the
  * graphStorage via setLatitude/setLongitude. It can also happen that a pillar node needs to be
  * transformed into a tower node e.g. via barriers or different speed values for one way.
  * <p>
  * 2.b) Reads ways OSM file and creates edges while calculating the speed etc from the OSM tags.
- * When creating an edge the pillar node information from the intermediate datastructure will be
+ * When creating an edge the pillar node information from the intermediate data structure will be
  * stored in the way geometry of that edge.
  * <p>
  *

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -51,7 +51,7 @@
 
 /**
  * A rough graphical user interface for visualizing the OSM graph. Mainly for debugging algorithms
- * and spatial datastructures. See e.g. this blog post:
+ * and spatial data structures. See e.g. this blog post:
  * https://graphhopper.com/blog/2016/01/19/alternative-roads-to-rome/
  * <p>
  * Use the web module for a better/faster/userfriendly/... alternative!

File: web/src/main/java/com/graphhopper/http/RouteSerializer.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Map;
 
 /**
- * This interface speficies how the route should be transformed into JSON.
+ * This interface specifies how the route should be transformed into JSON.
  * <p>
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -168,7 +168,7 @@ public int getVisitedNodes() {
 
     @Override
     public String getName() {
-        return Parameters.Algorithms.ASTAR;
+        return Parameters.Algorithms.ASTAR + "|" + weightApprox;
     }
 
     public static class AStarEntry extends SPTEntry {

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -280,6 +280,6 @@ public void updateBestPath(EdgeIteratorState edgeState, AStarEntry entryCurrent,
 
     @Override
     public String getName() {
-        return Parameters.Algorithms.ASTAR_BI;
+        return Parameters.Algorithms.ASTAR_BI + "|" + weightApprox;
     }
 }

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -671,7 +671,7 @@ protected Path createAndInitPath() {
 
             @Override
             public String getName() {
-                return "astarbiCH";
+                return "astarbi|ch";
             }
 
             @Override
@@ -707,7 +707,7 @@ protected Path createAndInitPath() {
 
             @Override
             public String getName() {
-                return "dijkstrabiCH";
+                return "dijkstrabi|ch";
             }
 
             @Override

File: core/src/main/java/com/graphhopper/util/PMap.java
Patch:
@@ -149,7 +149,7 @@ String get(String key) {
      * This method copies the underlying structur into a new Map object
      */
     public Map<String, String> toMap() {
-        return new HashMap<String, String>(map);
+        return new HashMap<>(map);
     }
 
     private Map<String, String> getMap() {

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -382,6 +382,7 @@ public Object run() throws Exception {
                         final Object theUnsafe = f.get(null);
                         try {
                             unmapper.bindTo(theUnsafe).invokeExact(buffer);
+                            return null;
                         } catch (Throwable t) {
                             throw new RuntimeException(t);
                         }

File: core/src/test/java/com/graphhopper/reader/dem/SRTMProviderTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.reader.dem;
 
 import com.graphhopper.storage.DAType;
+import com.graphhopper.util.Constants;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -96,7 +97,6 @@ public void testGetHeight_issue545() throws IOException {
     @Test
     public void testGetHeightMMap() throws IOException {
         instance.setCacheDir(new File("./files/"));
-        instance.setDAType(DAType.MMAP);
         assertEquals(161, instance.getEle(55.8943144, -3), 1e-1);
     }
 }

File: web/src/main/java/com/graphhopper/http/GHServer.java
Patch:
@@ -66,7 +66,7 @@ public void start(Injector injector) throws Exception {
         resHandler.setWelcomeFiles(new String[]{
             "index.html"
         });
-        resHandler.setResourceBase(args.get("jetty.resourcebase", "./src/main/webapp"));
+        resHandler.setResourceBase(args.get("jetty.resourcebase", "./web/src/main/webapp"));
 
         server = new Server();
         // getSessionHandler and getSecurityHandler should always return null

File: matching-core/src/main/java/com/graphhopper/matching/EdgeMatch.java
Patch:
@@ -61,8 +61,8 @@ public double getMinDistance() {
 
         double min = Double.MAX_VALUE;
         for (GPXExtension gpxExt : gpxExtensions) {
-            if (gpxExt.queryResult.getQueryDistance() < min) {
-                min = gpxExt.queryResult.getQueryDistance();
+            if (gpxExt.getQueryResult().getQueryDistance() < min) {
+                min = gpxExt.getQueryResult().getQueryDistance();
             }
         }
         return min;

File: matching-core/src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -89,7 +89,8 @@ private void start(CmdArgs args) {
                     hints(new HintsMap().put("weighting", "fastest").put("vehicle", firstEncoder.toString())).
                     build();
             MapMatching mapMatching = new MapMatching(hopper, opts);
-            mapMatching.setTransitionProbabilityBeta(args.getDouble("transition_probability_beta", 0.00959442));
+            mapMatching.setTransitionProbabilityBeta(args.getDouble
+                    ("transition_probability_beta", 2.0));
             mapMatching.setMeasurementErrorSigma(gpsAccuracy);
 
             // do the actual matching, get the GPX entries from a file or via stream

File: matching-web/src/test/java/com/graphhopper/matching/http/MatchResultToJsonTest.java
Patch:
@@ -58,8 +58,8 @@ public GHPoint3D getSnappedPoint() {
             }
         };
 
-        list.add(new GPXExtension(new GPXEntry(-3.4446, -38.9996, 100000), queryResult1, 1));
-        list.add(new GPXExtension(new GPXEntry(-3.4448, -38.9999, 100001), queryResult2, 1));
+        list.add(new GPXExtension(new GPXEntry(-3.4446, -38.9996, 100000), queryResult1));
+        list.add(new GPXExtension(new GPXEntry(-3.4448, -38.9999, 100001), queryResult2));
         return list;
     }
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -93,7 +93,7 @@ public void testEnsureCapacity() throws IOException {
         graph.create(100); // 100 is the minimum size
 
         // assert that turnCostStorage can hold 104 turn cost entries at the beginning
-        assertEquals(104, turnCostStorage.getCapacity() / 16);
+        assertEquals(128, turnCostStorage.getCapacity());
 
         Random r = new Random();
 

File: matching-core/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -179,7 +179,7 @@ public MatchResult doWork(List<GPXEntry> gpxList) {
                     + " filtered GPX entries (from " + gpxList.size()
                     + "), but two or more are needed");
         }
-        
+
         // now find each of the entries in the graph:
         final EdgeFilter edgeFilter = new DefaultEdgeFilter(algoOptions.getWeighting().getFlagEncoder());
 
@@ -261,6 +261,8 @@ private List<GPXEntry> filterGPXEntries(List<GPXEntry> gpxList) {
                     gpxEntry.getLat(), gpxEntry.getLon()) > 2 * measurementErrorSigma) {
                 filtered.add(gpxEntry);
                 prevEntry = gpxEntry;
+            } else {
+                logger.debug("Filter out GPX entry: {}", i + 1);
             }
         }
         return filtered;

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -98,7 +98,7 @@ public List<Path> calcPaths(QueryGraph queryGraph, RoutingAlgorithmFactory algoF
                 Path prevRoute = pathList.get(placeIndex - 2);
                 if (prevRoute.getEdgeCount() > 0) {
                     EdgeIteratorState incomingVirtualEdge = prevRoute.getFinalEdge();
-                    queryGraph.enforceHeadingByEdgeId(fromQResult.getClosestNode(), incomingVirtualEdge.getEdge(), false);
+                    queryGraph.unfavorVirtualEdgePair(fromQResult.getClosestNode(), incomingVirtualEdge.getEdge());
                 }
             }
 

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -472,8 +472,9 @@ protected double getFerrySpeed(ReaderWay way, double unknownSpeed, double shortT
                             shortTripsSpeed = speedEncoder.factor / 2;
                         }
                     } else {
-                        long lastId = way.getNodes().get(way.getNodes().size() - 1);
-                        if (way.getNodes().get(0) != lastId)
+                        long lastId = way.getNodes().isEmpty() ? -1 : way.getNodes().get(way.getNodes().size() - 1);
+                        long firstId = way.getNodes().isEmpty() ? -1 : way.getNodes().get(0);
+                        if (firstId != lastId)
                             logger.warn("Unrealistic long duration ignored in way with way ID=" + way.getId() + " : Duration tag value="
                                     + way.getTag("duration") + " (=" + Math.round(duration / 60d) + " minutes)");
                         durationInHours = 0;

File: core/src/main/java/com/graphhopper/routing/weighting/GenericWeighting.java
Patch:
@@ -162,6 +162,8 @@ public String getName() {
      * Use this method to associate a graph with this weighting to calculate e.g. node locations too.
      */
     public void setGraph(Graph graph) {
+        if(graph == null)
+            return;
         this.na = graph.getNodeAccess();
     }
 }

File: core/src/main/java/com/graphhopper/routing/weighting/GenericWeighting.java
Patch:
@@ -38,10 +38,9 @@
  */
 public class GenericWeighting extends AbstractWeighting {
     /**
-     * Converting to seconds is not necessary but makes adding other penalties easier (e.g. turn
-     * costs or traffic light costs etc)
+     * Convert to milliseconds for correct calcMillis.
      */
-    protected final static double SPEED_CONV = 3.6;
+    private final static double SPEED_CONV = 3600;
     private final double headingPenalty;
     private final long headingPenaltyMillis;
     private final double maxSpeed;

File: core/src/main/java/com/graphhopper/coll/GHBitSet.java
Patch:
@@ -21,6 +21,8 @@
  * Wrapper interface of an integer container for different implementations like OpenBitset, BitSet,
  * ...
  * <p>
+ * Loop via<br/>
+ * <code>for (int i = set.next(0); i >= 0; i = set.next(i + 1)) {...}</code>
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/coll/SparseIntIntArray.java
Patch:
@@ -75,7 +75,7 @@ static int binarySearch(int[] a, int start, int len, int key) {
     }
 
     /**
-     * Gets the Object mapped from the specified key, or <code>null</code> if no such mapping has
+     * Gets the Object mapped from the specified key, or <code>-1</code> if no such mapping has
      * been made.
      */
     public int get(int key) {

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.reader.dem;
 
+import com.graphhopper.coll.GHIntObjectHashMap;
 import com.graphhopper.storage.DAType;
 import com.graphhopper.storage.DataAccess;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.GHDirectory;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.Downloader;
 import com.graphhopper.util.Helper;
-import gnu.trove.map.hash.TIntObjectHashMap;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -49,8 +49,8 @@ public class SRTMProvider implements ElevationProvider {
     private final int DEFAULT_WIDTH = 1201;
     private final int WIDTH_BYTE_INDEX = 0;
     // use a map as an array is not quite useful if we want to hold only parts of the world
-    private final TIntObjectHashMap<HeightTile> cacheData = new TIntObjectHashMap<HeightTile>();
-    private final TIntObjectHashMap<String> areas = new TIntObjectHashMap<String>();
+    private final GHIntObjectHashMap<HeightTile> cacheData = new GHIntObjectHashMap<HeightTile>();
+    private final GHIntObjectHashMap<String> areas = new GHIntObjectHashMap<String>();
     private final double precision = 1e7;
     private final double invPrecision = 1 / precision;
     private Directory dir;

File: core/src/main/java/com/graphhopper/routing/weighting/AvoidEdgesWeighting.java
Patch:
@@ -17,9 +17,9 @@
  */
 package com.graphhopper.routing.weighting;
 
+import com.carrotsearch.hppc.IntSet;
+import com.graphhopper.coll.GHIntHashSet;
 import com.graphhopper.util.EdgeIteratorState;
-import gnu.trove.set.TIntSet;
-import gnu.trove.set.hash.TIntHashSet;
 
 import java.util.Collection;
 
@@ -30,7 +30,7 @@
  */
 public class AvoidEdgesWeighting extends AbstractAdjustedWeighting {
     // contains the edge IDs of the already visited edges
-    protected final TIntSet visitedEdges = new TIntHashSet();
+    protected final IntSet visitedEdges = new GHIntHashSet();
 
     private double edgePenaltyFactor = 5.0;
 

File: core/src/test/java/com/graphhopper/coll/GHSortedCollectionTest.java
Patch:
@@ -26,6 +26,7 @@
  * @author Peter Karich
  */
 public class GHSortedCollectionTest {
+    
     @Test
     public void testPoll() {
         GHSortedCollection instance = new GHSortedCollection();

File: core/src/test/java/com/graphhopper/coll/GHTBitSetTest.java
Patch:
@@ -39,6 +39,6 @@ public void testToString() {
         GHBitSet bs = createBitSet(100);
         bs.add(12);
         bs.add(1);
-        assertEquals("{12,1}", bs.toString());
+        assertEquals("[1, 12]", bs.toString());
     }
 }

File: core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
Patch:
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.routing;
 
+import com.carrotsearch.hppc.IntObjectMap;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.TurnWeighting;
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
-import gnu.trove.map.TIntObjectMap;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -152,7 +152,7 @@ public void testFillVirtualEdges() {
         QueryGraph queryGraph = new QueryGraph(g) {
 
             @Override
-            void fillVirtualEdges(TIntObjectMap<VirtualEdgeIterator> node2Edge, int towerNode, EdgeExplorer mainExpl) {
+            void fillVirtualEdges(IntObjectMap<VirtualEdgeIterator> node2Edge, int towerNode, EdgeExplorer mainExpl) {
                 super.fillVirtualEdges(node2Edge, towerNode, mainExpl);
                 // ignore nodes should include baseNode == 1
                 if (towerNode == 3)

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing.ch;
 
+import com.carrotsearch.hppc.IntIndexedContainer;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies.Shortcut;
 import com.graphhopper.routing.util.BikeFlagEncoder;
@@ -28,7 +29,6 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.*;
-import gnu.trove.list.TIntList;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -635,7 +635,7 @@ public void testMultiplePreparationsDifferentView() {
         checkPath(ghStorage, bikeWeighting, 9, 5, Helper.createTList(3, 10, 14, 16, 13, 12));
     }
 
-    void checkPath(GraphHopperStorage ghStorage, Weighting w, int expShortcuts, double expDistance, TIntList expNodes) {
+    void checkPath(GraphHopperStorage ghStorage, Weighting w, int expShortcuts, double expDistance, IntIndexedContainer expNodes) {
         CHGraph lg = ghStorage.getGraph(CHGraph.class, w);
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(dir, ghStorage, lg, w, tMode);
         prepare.doWork();

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMTurnRelation.java
Patch:
@@ -64,7 +64,7 @@ public Collection<TurnCostTableEntry> getRestrictionAsEntries(TurnCostEncoder en
 
         try {
             // street with restriction was not included (access or tag limits etc)
-            if (nodeVia == OSMReader.EMPTY)
+            if (nodeVia == OSMReader.EMPTY_NODE)
                 return Collections.emptyList();
 
             int edgeIdFrom = EdgeIterator.NO_EDGE;

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfBlobDecoder.java
Patch:
@@ -1,14 +1,14 @@
 // This software is released into the Public Domain.  See copying.txt for details.
 package com.graphhopper.reader.osm.pbf;
 
+import com.carrotsearch.hppc.LongIndexedContainer;
 import com.google.protobuf.InvalidProtocolBufferException;
 import com.graphhopper.reader.ReaderElement;
 import com.graphhopper.reader.ReaderNode;
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.reader.osm.OSMFileHeader;
 import com.graphhopper.util.Helper;
-import gnu.trove.list.TLongList;
 import org.openstreetmap.osmosis.osmbinary.Fileformat;
 import org.openstreetmap.osmosis.osmbinary.Osmformat;
 import org.slf4j.Logger;
@@ -253,7 +253,7 @@ private void processWays(List<Osmformat.Way> ways, PbfFieldDecoder fieldDecoder)
             // delta encoded meaning that each id is stored as a delta against
             // the previous one.
             long nodeId = 0;
-            TLongList wayNodes = osmWay.getNodes();
+            LongIndexedContainer wayNodes = osmWay.getNodes();
             for (long nodeIdOffset : way.getRefsList()) {
                 nodeId += nodeIdOffset;
                 wayNodes.add(nodeId);

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMReaderTest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.reader.osm;
 
+import com.carrotsearch.hppc.LongIndexedContainer;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
@@ -33,7 +34,6 @@
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
-import gnu.trove.list.TLongList;
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
@@ -553,7 +553,7 @@ public long handleNodeTags(ReaderNode node) {
             }
 
             @Override
-            Collection<EdgeIteratorState> addOSMWay(TLongList osmNodeIds, long wayFlags, long osmId) {
+            Collection<EdgeIteratorState> addOSMWay(LongIndexedContainer osmNodeIds, long wayFlags, long osmId) {
                 return Collections.emptyList();
             }
         };

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.ui;
 
+import com.carrotsearch.hppc.IntIndexedContainer;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHTBitSet;
@@ -32,7 +33,6 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.Parameters.Algorithms;
 import com.graphhopper.util.shapes.BBox;
-import gnu.trove.list.TIntList;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -314,7 +314,7 @@ private Path plotPath(Path tmpPath, Graphics2D g2, int w) {
         double prevLat = Double.NaN;
         double prevLon = Double.NaN;
         boolean plotNodes = false;
-        TIntList nodes = tmpPath.calcNodes();
+        IntIndexedContainer nodes = tmpPath.calcNodes();
         if (plotNodes) {
             for (int i = 0; i < nodes.size(); i++) {
                 plotNodeName(g2, nodes.get(i));

File: reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -191,7 +191,7 @@ public void testAlternativeRoutesBikeAndCar() {
     @Test
     public void testPointHint() {
         GraphHopper tmpHopper = new GraphHopperOSM().
-                setOSMFile(DIR + "/Laufamholzstraße.osm.xml").
+                setOSMFile(DIR + "/Laufamholzstrasse.osm.xml").
                 setCHEnabled(false).
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager("car"));

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.AStar.AStarEntry;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.BeelineWeightApproximator;
 import com.graphhopper.routing.weighting.ConsistentWeightApproximator;

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -56,7 +56,7 @@ protected void initCollections(int size) {
         openSetFrom = new PriorityQueue<SPTEntry>(size);
         bestWeightMapFrom = new TIntObjectHashMap<SPTEntry>(size);
 
-        openSetTo = new PriorityQueue<SPTEntry>(size / 10);
+        openSetTo = new PriorityQueue<SPTEntry>(size);
         bestWeightMapTo = new TIntObjectHashMap<SPTEntry>(size);
     }
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java
Patch:
@@ -180,7 +180,9 @@ public void internalDisconnect() {
     public void testEnsureSize() {
         Directory dir = new RAMDirectory();
         graph = newGHStorage(dir, false).create(defaultSize);
-        int testIndex = dir.find("edges").getSegmentSize() * 3;
+        int roughEdgeRowLength = 4 * 8;
+        int testIndex = dir.find("edges").getSegmentSize() * 3 / roughEdgeRowLength;
+        // we need a big node index to trigger multiple segments, but low enough to avoid OOM
         graph.edge(0, testIndex, 10, true);
 
         // test if optimize works without error

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -399,8 +399,8 @@ public void next(EdgeIteratorState edge, int index) {
                 } else {
                     latitude = wayGeo.getLatitude(1);
                     longitude = wayGeo.getLongitude(1);
-                    assert java.lang.Double.compare(prevLat, nodeAccess.getLatitude(baseNode)) == 0;
-                    assert java.lang.Double.compare(prevLon, nodeAccess.getLongitude(baseNode)) == 0;
+                    assert Double.compare(prevLat, nodeAccess.getLatitude(baseNode)) == 0;
+                    assert Double.compare(prevLon, nodeAccess.getLongitude(baseNode)) == 0;
                 }
 
                 name = edge.getName();

File: web/src/main/java/com/graphhopper/http/GHBaseServlet.java
Patch:
@@ -64,14 +64,14 @@ protected void writeJson(HttpServletRequest req, HttpServletResponse res, JSONOb
             if (debug)
                 writeResponse(res, callbackName + "(" + json.toString(2) + ")");
             else
-                writeResponse(res, callbackName + "(" + json.toString() + ")");
+                writeResponse(res, callbackName + "(" + json.toString(0) + ")");
 
         } else {
             res.setContentType("application/json");
             if (debug)
                 writeResponse(res, json.toString(2));
             else
-                writeResponse(res, json.toString());
+                writeResponse(res, json.toString(0));
         }
     }
 
@@ -90,7 +90,7 @@ protected void writeJsonError(HttpServletResponse res, int code, JSONObject json
             res.setStatus(code);
             res.getWriter().append(json.toString(2));
         } catch (IOException ex) {
-            logger.error("Cannot write error " + ex.getMessage());
+            throw new RuntimeException("Cannot write JSON Error " + code, ex);
         }
     }
 

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -171,8 +171,9 @@ public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes) throw
 
             if (ghRsp.hasErrors())
                 writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
-            else
+            else {
                 writeJson(httpReq, httpRes, new JSONObject(map));
+            }
         }
     }
 

File: matching-core/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -232,8 +232,9 @@ private List<SequenceState<GPXExtension, GPXEntry, Path>> computeViterbiSequence
 
                 throw new RuntimeException("Sequence is broken for submitted track at time step "
                         + timeStepCounter + " (" + gpxList.size() + " points). " + likelyReasonStr
-                        + "observation:" + timeStep.observation + ", candidates: "
-                        + getSnappedCandidates(timeStep.candidates));
+                        + "observation:" + timeStep.observation + ", "
+                        + timeStep.candidates.size() + " candidates: " + getSnappedCandidates(timeStep.candidates)
+                        + ". If a match is expected consider increasing max_visited_nodes.");
             }
 
             timeStepCounter++;

File: matching-core/src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
-import com.graphhopper.GraphHopper;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.Path;
@@ -233,7 +232,7 @@ public void testUTurns() {
                 fetchStreets(mr.getEdgeMatches()));
     }
 
-    List<String> fetchStreets(List<EdgeMatch> emList) {
+    static List<String> fetchStreets(List<EdgeMatch> emList) {
         List<String> list = new ArrayList<String>();
         int prevNode = -1;
         List<String> errors = new ArrayList<String>();

File: matching-core/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -232,8 +232,9 @@ private List<SequenceState<GPXExtension, GPXEntry, Path>> computeViterbiSequence
 
                 throw new RuntimeException("Sequence is broken for submitted track at time step "
                         + timeStepCounter + " (" + gpxList.size() + " points). " + likelyReasonStr
-                        + "observation:" + timeStep.observation + ", candidates: "
-                        + getSnappedCandidates(timeStep.candidates));
+                        + "observation:" + timeStep.observation + ", "
+                        + timeStep.candidates.size() + " candidates: " + getSnappedCandidates(timeStep.candidates)
+                        + ". If a match is expected consider increasing max_visited_nodes.");
             }
 
             timeStepCounter++;

File: matching-core/src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
-import com.graphhopper.GraphHopper;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.Path;
@@ -233,7 +232,7 @@ public void testUTurns() {
                 fetchStreets(mr.getEdgeMatches()));
     }
 
-    List<String> fetchStreets(List<EdgeMatch> emList) {
+    static List<String> fetchStreets(List<EdgeMatch> emList) {
         List<String> list = new ArrayList<String>();
         int prevNode = -1;
         List<String> errors = new ArrayList<String>();

File: core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java
Patch:
@@ -33,6 +33,9 @@ public FlagEncoder createFlagEncoder(String name, PMap configuration) {
         else if (name.equals(CAR))
             return new CarFlagEncoder(configuration);
 
+        else if (name.equals(CAR4WD))
+            return new Car4WDFlagEncoder(configuration);
+
         if (name.equals(BIKE))
             return new BikeFlagEncoder(configuration);
 

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java
Patch:
@@ -24,6 +24,7 @@
  */
 public interface FlagEncoderFactory {
     final String CAR = "car";
+    final String CAR4WD = "car4wd";
     final String BIKE = "bike";
     final String BIKE2 = "bike2";
     final String RACINGBIKE = "racingbike";

File: core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
Patch:
@@ -35,7 +35,7 @@
 import com.graphhopper.util.Parameters.Algorithms.RoundTrip;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.Translation;
-import com.graphhopper.util.exceptions.CannotFindPointException;
+import com.graphhopper.util.exceptions.PointNotFoundException;
 import com.graphhopper.util.shapes.GHPoint;
 
 import java.util.ArrayList;
@@ -80,7 +80,7 @@ public List<QueryResult> lookup(List<GHPoint> points, FlagEncoder encoder) {
         EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
         QueryResult startQR = locationIndex.findClosest(start.lat, start.lon, edgeFilter);
         if (!startQR.isValid())
-            throw new CannotFindPointException("Cannot find point 0: " + start, 0);
+            throw new PointNotFoundException("Cannot find point 0: " + start, 0);
 
         queryResults.add(startQR);
 

File: core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
Patch:
@@ -31,7 +31,7 @@
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.Translation;
-import com.graphhopper.util.exceptions.CannotFindPointException;
+import com.graphhopper.util.exceptions.PointNotFoundException;
 import com.graphhopper.util.shapes.GHPoint;
 
 import java.util.ArrayList;
@@ -67,7 +67,7 @@ public List<QueryResult> lookup(List<GHPoint> points, FlagEncoder encoder) {
             GHPoint point = points.get(placeIndex);
             QueryResult res = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
             if (!res.isValid())
-                ghResponse.addError(new CannotFindPointException("Cannot find point " + placeIndex + ": " + point, placeIndex));
+                ghResponse.addError(new PointNotFoundException("Cannot find point " + placeIndex + ": " + point, placeIndex));
 
             queryResults.add(res);
         }

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -19,8 +19,10 @@
 
 import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.Path;
+import com.graphhopper.util.exceptions.ConnectionNotFoundException;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -126,7 +128,7 @@ public void doWork(PathWrapper altRsp, List<Path> paths, Translation tr) {
             altRsp.setInstructions(fullInstructions);
 
         if (!allFound)
-            altRsp.addError(new RuntimeException("Connection between locations not found"));
+            altRsp.addError(new ConnectionNotFoundException("Connection between locations not found", Collections.<String, Object>emptyMap()));
 
         altRsp.setDescription(description).
                 setPoints(fullPoints).

File: core/src/main/java/com/graphhopper/util/exceptions/GHException.java
Patch:
@@ -25,5 +25,5 @@
  * @author Robin Boldt
  */
 public interface GHException {
-    public abstract Map<String, String> getDetails();
+    public abstract Map<String, Object> getDetails();
 }

File: core/src/main/java/com/graphhopper/util/exceptions/PointOutOfBoundsException.java
Patch:
@@ -5,7 +5,7 @@
  *
  * @author Robin Boldt
  */
-public class PointOutOfBoundsException extends CannotFindPointException {
+public class PointOutOfBoundsException extends PointNotFoundException {
     public PointOutOfBoundsException(String var1, int pointIndex) {
         super(var1, pointIndex);
     }

File: web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
Patch:
@@ -52,9 +52,9 @@ public Map<String, Object> toJSON(GHResponse rsp,
 
         if (rsp.hasErrors()) {
             json.put("message", getMessage(rsp.getErrors().get(0)));
-            List<Map<String, String>> errorHintList = new ArrayList<Map<String, String>>();
+            List<Map<String, Object>> errorHintList = new ArrayList<>();
             for (Throwable t : rsp.getErrors()) {
-                Map<String, String> map = new HashMap<String, String>();
+                Map<String, Object> map = new HashMap<>();
                 map.put("message", getMessage(t));
                 map.put("details", t.getClass().getName());
                 if (t instanceof GHException) {

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -54,6 +54,7 @@ public CarFlagEncoder(PMap properties) {
                 properties.getBool("turn_costs", false) ? 1 : 0);
         this.properties = properties;
         this.setBlockFords(properties.getBool("block_fords", true));
+        this.setBlockByDefault(properties.getBool("block_barriers", true));        
     }
 
     public CarFlagEncoder(String propertiesStr) {

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -61,7 +61,7 @@ public FootFlagEncoder(PMap properties) {
         this((int) properties.getLong("speedBits", 4),
                 properties.getDouble("speedFactor", 1));
         this.properties = properties;
-        this.setBlockFords(properties.getBool("blockFords", true));
+        this.setBlockFords(properties.getBool("block_fords", true));
     }
 
     public FootFlagEncoder(String propertiesStr) {

File: core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
Patch:
@@ -42,7 +42,7 @@ public HikeFlagEncoder(PMap properties) {
         this((int) properties.getLong("speedBits", 4),
                 properties.getDouble("speedFactor", 1));
         this.properties = properties;
-        this.setBlockFords(properties.getBool("blockFords", true));
+        this.setBlockFords(properties.getBool("block_fords", true));
     }
 
     public HikeFlagEncoder(String propertiesStr) {

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -102,9 +102,7 @@ protected DataReader importData() throws IOException {
         hopper.importOrLoad();
 
         GraphHopperStorage g = hopper.getGraphHopperStorage();
-//        if ("true".equals(g.getProperties().get("prepare.done")))
-//            throw new IllegalStateException("Graph has to be unprepared but wasn't!");
-
+        
         String vehicleStr = args.get("graph.flag_encoders", "car");
         FlagEncoder encoder = hopper.getEncodingManager().getEncoder(vehicleStr);
         Weighting weighting = hopper.getCHFactoryDecorator().getWeightings().get(0);

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -147,7 +147,8 @@ private Path runAlgo() {
 
     @Override
     protected Path extractPath() {
-        return new Path(graph, flagEncoder).setWeight(currEdge.weight).setSPTEntry(currEdge).extract();
+        return new Path(graph, weighting).
+                setWeight(currEdge.weight).setSPTEntry(currEdge).extract();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -153,7 +153,7 @@ public void initTo(int to, double weight) {
 
     @Override
     protected Path createAndInitPath() {
-        bestPath = new PathBidirRef(graph, flagEncoder);
+        bestPath = new PathBidirRef(graph, flagEncoder, weighting);
         return bestPath;
     }
 

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -118,7 +118,7 @@ public List<Path> calcPaths(int from, int to) {
     }
 
     protected Path createEmptyPath() {
-        return new Path(graph, flagEncoder);
+        return new Path(graph, weighting);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
Patch:
@@ -423,7 +423,7 @@ public boolean execute(final int traversalId, final SPTEntry fromSPTEntry) {
 
                         // plateaus.add(new PlateauInfo(altName, plateauEdges));
                         if (sortBy < worstSortBy || alternatives.size() < maxPaths) {
-                            Path path = new PathBidirRef(graph, flagEncoder).
+                            Path path = new PathBidirRef(graph, flagEncoder, weighting).
                                     setSPTEntryTo(toSPTEntry).setSPTEntry(fromSPTEntry).
                                     setWeight(weight);
                             path.extract();

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -122,7 +122,8 @@ protected Path extractPath() {
         if (currEdge == null || !finished())
             return createEmptyPath();
 
-        return new Path(graph, flagEncoder).setWeight(currEdge.weight).setSPTEntry(currEdge).extract();
+        return new Path(graph, weighting).
+                setWeight(currEdge.weight).setSPTEntry(currEdge).extract();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -101,7 +101,7 @@ public void initTo(int to, double weight) {
 
     @Override
     protected Path createAndInitPath() {
-        bestPath = new PathBidirRef(graph, flagEncoder);
+        bestPath = new PathBidirRef(graph, flagEncoder, weighting);
         return bestPath;
     }
 

File: core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
Patch:
@@ -76,7 +76,7 @@ public Path calcPath(int from, int to) {
 
     @Override
     public Path extractPath() {
-        PathNative p = new PathNative(graph, flagEncoder, parents, edgeIds);
+        PathNative p = new PathNative(graph, flagEncoder, weighting, parents, edgeIds);
         if (endNode >= 0)
             p.setWeight(weights[endNode]);
         p.setFromNode(fromNode);

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -678,7 +678,7 @@ protected boolean finished() {
 
             @Override
             protected Path createAndInitPath() {
-                bestPath = new Path4CH(graph, graph.getBaseGraph(), flagEncoder);
+                bestPath = new Path4CH(graph, graph.getBaseGraph(), flagEncoder, weighting);
                 return bestPath;
             }
 
@@ -715,7 +715,7 @@ public boolean finished() {
 
             @Override
             protected Path createAndInitPath() {
-                bestPath = new Path4CH(graph, graph.getBaseGraph(), flagEncoder);
+                bestPath = new Path4CH(graph, graph.getBaseGraph(), flagEncoder, weighting);
                 return bestPath;
             }
 

File: core/src/main/java/com/graphhopper/routing/util/DataFlagEncoder.java
Patch:
@@ -448,9 +448,7 @@ protected long setLowSpeed(long flags, double speed, boolean reverse) {
 
     @Override
     public double getSpeed(long flags) {
-        // TODO fix Path.calcMillis(Path.java:255)
-        // use pluggable weighting.calcMillis but include reverse somehow
-        return 50;
+        throw new UnsupportedOperationException("Calculate speed via more customizable Weighting.calcMillis method");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
Patch:
@@ -45,8 +45,7 @@ public interface TurnCostEncoder {
     long getTurnFlags(boolean restricted, double costs);
 
     /**
-     * whether turn costs nor turn restrictions will be encoded by this encoder, should be used for
-     * pedestrians
+     * No turn costs will be enabled by this encoder, should be used for pedestrians
      */
     class NoTurnCostsEncoder implements TurnCostEncoder {
 

File: core/src/test/java/com/graphhopper/routing/PathBidirRefTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.SPTEntry;
@@ -47,7 +48,7 @@ Graph createGraph() {
     public void testExtract() {
         Graph g = createGraph();
         g.edge(1, 2, 10, true);
-        PathBidirRef pw = new PathBidirRef(g, carEncoder);
+        PathBidirRef pw = new PathBidirRef(g, carEncoder, new FastestWeighting(carEncoder));
         EdgeExplorer explorer = g.createEdgeExplorer(carOutEdges);
         EdgeIterator iter = explorer.setBaseNode(1);
         iter.next();
@@ -67,7 +68,7 @@ public void testExtract2() {
         EdgeExplorer explorer = g.createEdgeExplorer(carOutEdges);
         EdgeIterator iter = explorer.setBaseNode(1);
         iter.next();
-        PathBidirRef pw = new PathBidirRef(g, carEncoder);
+        PathBidirRef pw = new PathBidirRef(g, carEncoder, new FastestWeighting(carEncoder));
         pw.sptEntry = new SPTEntry(iter.getEdge(), 2, 10);
         pw.sptEntry.parent = new SPTEntry(EdgeIterator.NO_EDGE, 1, 0);
 

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -49,7 +49,7 @@ private void expandEdge(CHEdgeIteratorState mainEdgeState, boolean reverse) {
             double dist = mainEdgeState.getDistance();
             distance += dist;
             long flags = mainEdgeState.getFlags();
-            time += calcMillis(dist, flags, reverse);
+            time += calcMillis(mainEdgeState, reverse);
             addEdge(mainEdgeState.getEdge());
             return;
         }

File: core/src/main/java/com/graphhopper/routing/weighting/Weighting.java
Patch:
@@ -46,7 +46,9 @@ public interface Weighting {
      * +Infinity. Make sure your method does not return NaN which can e.g. occur for 0/0.
      */
     double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId);
-
+    
+//    double calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId);
+    
     FlagEncoder getFlagEncoder();
 
     String getName();

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -284,7 +284,7 @@ public long flagsDefault(boolean forward, boolean backward) {
     }
 
     @Override
-    public long setAccess(long flags, boolean forward, boolean backward) {
+    public long setAccess(long flags, boolean forward, boolean backward) {       
         return setBool(setBool(flags, K_BACKWARD, backward), K_FORWARD, forward);
     }
 

File: core/src/test/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworksTest.java
Patch:
@@ -180,7 +180,8 @@ public void testRemoveSubnetworkWhenMultipleVehicles() {
         BikeFlagEncoder bikeEncoder = new BikeFlagEncoder();
         EncodingManager em2 = new EncodingManager(carEncoder, bikeEncoder);
         GraphHopperStorage g = createSubnetworkTestStorage2(em2);
-        GHUtility.getEdge(g, 3, 4).setFlags(carEncoder.setProperties(10, false, false) | bikeEncoder.setProperties(5, true, true));
+        GHUtility.getEdge(g, 3, 4).setFlags(carEncoder.setProperties(10, false, false)
+                | bikeEncoder.setProperties(5, true, true));
         PrepareRoutingSubnetworks instance = new PrepareRoutingSubnetworks(g, em2.fetchEdgeEncoders());
         instance.setMinNetworkSize(5);
         instance.doWork();

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -89,7 +89,7 @@ public void testWrongEncoders() {
             new EncodingManager(new FootFlagEncoder(), new CarFlagEncoder(), new BikeFlagEncoder(), new MountainBikeFlagEncoder(), new RacingBikeFlagEncoder());
             assertTrue(false);
         } catch (Exception ex) {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Encoders are requesting more than 32 bits of way flags. Decrease the"));
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Encoders are requesting 44 bits, more than 32 bits of way flags. Decrease the"));
         }
     }
 

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
Patch:
@@ -150,8 +150,9 @@ public void readGraph() throws IOException {
         writeOsm2Graph(osmFile);
         sw2.stop();
 
-        LOGGER.info("time(pass1): " + (int) sw1.getSeconds() + " pass2: " + (int) sw2.getSeconds() + " total:"
-                + ((int) (sw1.getSeconds() + sw2.getSeconds())));
+        LOGGER.info("time pass1:" + (int) sw1.getSeconds() + "s, "
+                + "pass2:" + (int) sw2.getSeconds() + "s, "
+                + "total:" + (int) (sw1.getSeconds() + sw2.getSeconds()) + "s");
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactory.java
Patch:
@@ -24,7 +24,6 @@
  *
  * @author Peter Karich
  */
-public interface RoutingAlgorithmFactory
-{
-    RoutingAlgorithm createAlgo( Graph g, AlgorithmOptions opts );
+public interface RoutingAlgorithmFactory {
+    RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts);
 }

File: core/src/main/java/com/graphhopper/routing/util/AllCHEdgesIterator.java
Patch:
@@ -22,6 +22,5 @@
 /**
  * @author Peter Karich
  */
-public interface AllCHEdgesIterator extends AllEdgesIterator, CHEdgeIterator
-{
+public interface AllCHEdgesIterator extends AllEdgesIterator, CHEdgeIterator {
 }

File: core/src/main/java/com/graphhopper/routing/util/AllEdgesIterator.java
Patch:
@@ -22,8 +22,7 @@
 /**
  * @author Peter Karich
  */
-public interface AllEdgesIterator extends EdgeIterator
-{
+public interface AllEdgesIterator extends EdgeIterator {
     /**
      * @return the maximum edgeId in the graph which is roughly the number of edges.
      */

File: core/src/main/java/com/graphhopper/search/Geocoding.java
Patch:
@@ -24,12 +24,12 @@
 /**
  * Interface to convert from place names to points.
  * <p>
+ *
  * @author Peter Karich
  */
-public interface Geocoding
-{
+public interface Geocoding {
     /**
      * Returns a list of matching points for the specified place query string.
      */
-    List<GHPlace> names2places( GHPlace... place );
+    List<GHPlace> names2places(GHPlace... place);
 }

File: core/src/main/java/com/graphhopper/search/ReverseGeocoding.java
Patch:
@@ -24,12 +24,12 @@
 /**
  * Interface to convert from points to place names or node ids.
  * <p>
+ *
  * @author Peter Karich
  */
-public interface ReverseGeocoding
-{
+public interface ReverseGeocoding {
     /**
      * Tries to retrieve a locational string from the specified points (list of lat,lon).
      */
-    List<GHPlace> places2names( GHPlace... points );
+    List<GHPlace> places2names(GHPlace... points);
 }

File: core/src/main/java/com/graphhopper/routing/template/AlternativeRoutingTemplate.java
Patch:
@@ -26,6 +26,7 @@
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.util.Parameters.Routing;
+import static com.graphhopper.util.Parameters.Routing.PASS_THROUGH;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.PointList;
 import com.graphhopper.util.Translation;
@@ -49,7 +50,7 @@ public List<Path> calcPaths( QueryGraph queryGraph, RoutingAlgorithmFactory algo
     {
         boolean withViaTurnPenalty = ghRequest.getHints().getBool(Routing.PASS_THROUGH, false);
         if (withViaTurnPenalty)
-            throw new IllegalStateException("Alternative paths and a viaTurnPenalty at the same time is currently not supported");
+            throw new IllegalArgumentException("Alternative paths and " + PASS_THROUGH + " at the same time is currently not supported");
 
         return super.calcPaths(queryGraph, algoFactory, algoOpts);
     }

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -24,6 +24,7 @@
 import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHBitSetImpl;
 import com.graphhopper.reader.DataReader;
+import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.LocationIndex;
@@ -74,7 +75,7 @@ void start( CmdArgs args )
         String gitCommit = args.get("measurement.gitinfo", "");
         int count = args.getInt("measurement.count", 5000);
 
-        GraphHopper hopper = new GraphHopper()
+        GraphHopper hopper = new GraphHopperOSM()
         {
             @Override
             protected void prepare()
@@ -99,7 +100,7 @@ protected DataReader importData() throws IOException
         };
 
         hopper.init(args).
-                forDesktop();        
+                forDesktop();
         hopper.getCHFactoryDecorator().setDisablingAllowed(true);
         hopper.importOrLoad();
 

File: core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
Patch:
@@ -27,7 +27,7 @@
  * The algorithm options. Create an immutable object via:
  * <pre>
  * AlgorithmOptions algoOpts = AlgorithmOptions.start().
- *        algorithm(AlgorithmOptions.DIJKSTRA).
+ *        algorithm(Parameters.Algorithms.DIJKSTRA).
  *        weighting(weighting).
  *        build();
  * </pre>

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -19,8 +19,6 @@
 
 import com.graphhopper.reader.ReaderRelation;
 import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.reader.osm.conditional.ConditionalOSMTagInspector;
-import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -821,7 +821,7 @@ public RoutingAlgorithm createAlgo( Graph graph, AlgorithmOptions opts )
             algo = createDijkstraBidirection(graph);
         } else
         {
-            throw new IllegalArgumentException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies");
+            throw new IllegalArgumentException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies. Try with ch.disable=true");
         }
 
         algo.setMaxVisitedNodes(opts.getMaxVisitedNodes());

File: matching-core/src/main/java/com/graphhopper/matching/MapMatchingHmmProbabilities.java
Patch:
@@ -95,14 +95,14 @@ public Double normalizedTransitionMetric(S sourcePosition, O sourceMeasurement,
             throw new IllegalStateException(
                     "Time difference between subsequent location measurements must be >= 0.");
         }
-
+        
         final double linearDistance = spatialMetrics.linearDistance(sourceMeasurement,
                 targetMeasurement);
         final Double routeLength = spatialMetrics.routeLength(sourcePosition, targetPosition);
         if (routeLength == null) {
             return null;
         } else if (timeDiff == 0) {
-            // avoid Infinity if identical snapped positions
+            // avoid Infinity if identical snapped positions, assume 0 length difference
             return 0.0;
         } else {
             return Math.abs(linearDistance - routeLength) / (timeDiff * timeDiff);

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -215,7 +215,7 @@ protected String createGPXString( HttpServletRequest req, HttpServletResponse re
         return rsp.getInstructions().createGPX(trackName, time, includeElevation, withRoute, withTrack, withWayPoints);
     }
 
-    protected String errorsToXML( List<Throwable> list )
+    protected String errorsToXML( Collection<Throwable> list )
     {
         if (list.isEmpty())
             throw new RuntimeException("errorsToXML should not be called with an empty list");
@@ -238,7 +238,7 @@ protected String errorsToXML( List<Throwable> list )
 
             Element messageElement = doc.createElement("message");
             extensionsElement.appendChild(messageElement);
-            messageElement.setTextContent(list.get(0).getMessage());
+            messageElement.setTextContent(list.iterator().next().getMessage());
 
             Element hintsElement = doc.createElement("hints");
             extensionsElement.appendChild(hintsElement);

File: matching-core/src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -77,7 +77,7 @@ private void start(CmdArgs args) {
             int gpsAccuracy = args.getInt("gps_accuracy", -1);
             if (gpsAccuracy < 0) {
                 // backward compatibility since 0.8
-                gpsAccuracy = args.getInt("gpx_accuracy", 15);
+                gpsAccuracy = args.getInt("gpx_accuracy", 40);
             }
 
             String instructions = args.get("instructions", "");

File: matching-web/src/main/java/com/graphhopper/matching/http/MatchDefaultModule.java
Patch:
@@ -41,7 +41,7 @@ protected void configure() {
                 (LocationIndexTree) getGraphHopper().getLocationIndex());
         bind(LocationIndexMatch.class).toInstance(locationMatch);
 
-        Double timeout = args.getDouble("web.gpx.max_accuracy", 50);
+        Double timeout = args.getDouble("web.gpx.max_accuracy", 100);
         bind(Double.class).annotatedWith(Names.named("gpx.max_accuracy")).toInstance(timeout);
     }
 }

File: matching-web/src/main/java/com/graphhopper/matching/http/MatchServlet.java
Patch:
@@ -107,7 +107,7 @@ public void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes)
 
         String vehicle = getParam(httpReq, "vehicle", "car");
         int maxVisitedNodes = Math.min(getIntParam(httpReq, "max_visited_nodes", 800), 5000);
-        double defaultAccuracy = 20;
+        double defaultAccuracy = 40;
         double gpsAccuracy = Math.min(Math.max(getDoubleParam(httpReq, "gps_accuracy", defaultAccuracy), 5), gpxMaxAccuracy);
         Locale locale = Helper.getLocale(getParam(httpReq, "locale", "en"));
         PathWrapper matchGHRsp = new PathWrapper();

File: matching-core/src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -138,8 +138,8 @@ private void start(CmdArgs args) {
             BBox bbox = BBox.createInverse(false);
             for (File gpxFile : files) {
                 List<GPXEntry> inputGPXEntries = new GPXFile().doImport(gpxFile.getAbsolutePath()).getEntries();
-                for (GPXEntry entry : inputGPXEntries) {
-                    bbox.update(entry.getLat(), entry.getLon(), entry.getEle());
+                for (GPXEntry entry : inputGPXEntries) {                    
+                    bbox.update(entry.getLat(), entry.getLon());
                 }
             }
 

File: matching-web/src/test/java/com/graphhopper/matching/http/MatchServletTest.java
Patch:
@@ -45,9 +45,9 @@ public static void cleanUp() {
     @Before
     public void setUp() {
         CmdArgs args = new CmdArgs().
-                put("graph.flagEncoders", "car").
-                put("prepare.chWeightings", "no").
-                put("osmreader.osm", PBF).
+                put("graph.flag_encoders", "car").
+                put("prepare.ch.weightings", "no").
+                put("datareader.file", PBF).
                 put("graph.location", DIR);
         setUpJetty(args);
     }

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -79,7 +79,7 @@ public static void main( String[] args ) throws IOException
     // possible alternatives see #451
     // http://mirror.ufs.ac.za/datasets/SRTM3/
     //"http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/"
-    private String baseUrl = "https://srtm.kurviger.de/SRTM3/";
+    private String baseUrl = "http://srtm.kurviger.de/SRTM3/";
     private boolean calcMean = false;
 
     public SRTMProvider()

File: core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * Removes nodes which are not part of the large networks. Ie. mostly nodes with no edges at all but
- * also small subnetworks which are often bugs in OSM data or indicate otherwise disconnected areas
+ * also small subnetworks which could be bugs in OSM data or indicate otherwise disconnected areas
  * e.g. via barriers or one way problems - see #86.
  * <p>
  * @author Peter Karich

File: core/src/test/java/com/graphhopper/reader/OSMNodeTest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.reader;
 
+import com.graphhopper.reader.ReaderNode;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -29,7 +30,7 @@ public class OSMNodeTest
     @Test
     public void testSetTags()
     {
-        OSMNode instance = new OSMNode(0, 10, 10);
+        ReaderNode instance = new ReaderNode(0, 10, 10);
         assertTrue(Double.isNaN(instance.getEle()));
 
         instance.setTag("ele", "-10.1");

File: core/src/test/java/com/graphhopper/routing/util/EncodedDoubleValueTest.java
Patch:
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.ReaderWay;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -54,7 +54,7 @@ public void testMaxValueAndSwap()
 
         CarFlagEncoder carEncoder = new CarFlagEncoder(10, 0.5, 0);
         new EncodingManager(carEncoder);
-        OSMWay way = new OSMWay(1);
+        ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "motorway_link");
         way.setTag("maxspeed", "70 mph");
         flags = carEncoder.handleWayTags(way, 1, 0);

File: core/src/test/java/com/graphhopper/routing/util/HikeFlagEncoderTest.java
Patch:
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.ReaderWay;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -32,7 +32,7 @@ public class HikeFlagEncoderTest
     @Test
     public void testPriority()
     {
-        OSMWay way = new OSMWay(1);
+        ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "cycleway");
         assertEquals(PriorityCode.UNCHANGED.getValue(), hikeEncoder.handlePriority(way, 0));
 

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.util;
 
+import com.graphhopper.reader.ReaderWay;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
 
-import com.graphhopper.reader.OSMWay;
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.*;
@@ -457,7 +457,7 @@ public void testCreateGPX()
 
     private long flagsForSpeed( EncodingManager encodingManager, int speedKmPerHour )
     {
-        OSMWay way = new OSMWay(1);
+        ReaderWay way = new ReaderWay(1);
         way.setTag("highway", "motorway");
         way.setTag("maxspeed", String.format("%d km/h", speedKmPerHour));
         return encodingManager.handleWayTags(way, 1, 0);

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMFileHeader.java
Patch:
@@ -15,8 +15,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader;
+package com.graphhopper.reader.osm;
 
+import com.graphhopper.reader.ReaderElement;
 import javax.xml.stream.XMLStreamConstants;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
@@ -26,7 +27,7 @@
  * <p>
  * @author ratrun
  */
-public class OSMFileHeader extends OSMElement
+public class OSMFileHeader extends ReaderElement
 {
     /**
      * Constructor for XML Parser

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMTagParser.java
Patch:
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader;
+package com.graphhopper.reader.osm;
 
 import java.util.Date;
 import javax.xml.datatype.DatatypeFactory;

File: reader-osm/src/main/java/com/graphhopper/reader/osm/OSMTurnRelation.java
Patch:
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader;
+package com.graphhopper.reader.osm;
 
 import com.graphhopper.routing.util.TurnCostEncoder;
 import com.graphhopper.util.EdgeExplorer;

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfBlobDecoderListener.java
Patch:
@@ -1,7 +1,7 @@
 // This software is released into the Public Domain.  See copying.txt for details.
-package com.graphhopper.reader.pbf;
+package com.graphhopper.reader.osm.pbf;
 
-import com.graphhopper.reader.OSMElement;
+import com.graphhopper.reader.ReaderElement;
 
 import java.util.List;
 
@@ -17,7 +17,7 @@ public interface PbfBlobDecoderListener
      * <p>
      * @param decodedEntities The decoded entities.
      */
-    void complete( List<OSMElement> decodedEntities );
+    void complete( List<ReaderElement> decodedEntities );
 
     /**
      * Notifies the listener that an error occurred during processing.

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfFieldDecoder.java
Patch:
@@ -1,5 +1,5 @@
 // This software is released into the Public Domain.  See copying.txt for details.
-package com.graphhopper.reader.pbf;
+package com.graphhopper.reader.osm.pbf;
 
 import java.util.Date;
 

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfRawBlob.java
Patch:
@@ -1,5 +1,5 @@
 // This software is released into the Public Domain.  See copying.txt for details.
-package com.graphhopper.reader.pbf;
+package com.graphhopper.reader.osm.pbf;
 
 /**
  * Represents a single piece of raw blob data extracted from the PBF stream. It has not yet been

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfReader.java
Patch:
@@ -1,5 +1,5 @@
 // This software is released into the Public Domain.  See copying.txt for details.
-package com.graphhopper.reader.pbf;
+package com.graphhopper.reader.osm.pbf;
 
 import java.io.DataInputStream;
 import java.io.InputStream;

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/PbfStreamSplitter.java
Patch:
@@ -1,5 +1,5 @@
 // This software is released into the Public Domain.  See copying.txt for details.
-package com.graphhopper.reader.pbf;
+package com.graphhopper.reader.osm.pbf;
 
 import org.openstreetmap.osmosis.osmbinary.Fileformat;
 

File: reader-osm/src/main/java/com/graphhopper/reader/osm/pbf/Sink.java
Patch:
@@ -15,16 +15,16 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.pbf;
+package com.graphhopper.reader.osm.pbf;
 
-import com.graphhopper.reader.OSMElement;
+import com.graphhopper.reader.ReaderElement;
 
 /**
  * @author Nop
  */
 public interface Sink
 {
-    void process( OSMElement item );
+    void process( ReaderElement item );
 
     void complete();
 }

File: reader-osm/src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper;
 
+import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.PointList;
@@ -48,7 +49,7 @@ public void testLoad()
         graph.edge(0, 4, 40, true);
         graph.edge(4, 3, 40, true);
 
-        GraphHopper instance = new GraphHopper().
+        GraphHopper instance = new GraphHopperOSM().
                 setStoreOnFlush(false).
                 setEncodingManager(encodingManager).setCHEnabled(false).
                 loadGraph(graph);

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMTagParserTest.java
Patch:
@@ -15,8 +15,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader;
+package com.graphhopper.reader.osm;
 
+import com.graphhopper.reader.osm.OSMTagParser;
 import static org.junit.Assert.*;
 import static org.junit.Assert.fail;
 import org.junit.Test;

File: reader-osm/src/test/java/com/graphhopper/reader/osm/OSMTurnRelationTest.java
Patch:
@@ -15,9 +15,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader;
+package com.graphhopper.reader.osm;
 
-import com.graphhopper.reader.OSMTurnRelation.Type;
+import com.graphhopper.reader.osm.OSMTurnRelation.Type;
 import com.graphhopper.routing.EdgeBasedRoutingAlgorithmTest;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;

File: web/src/main/java/com/graphhopper/http/DefaultModule.java
Patch:
@@ -20,6 +20,7 @@
 import com.google.inject.AbstractModule;
 import com.google.inject.name.Names;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.TranslationMap;
 import org.slf4j.Logger;
@@ -52,10 +53,10 @@ public GraphHopper getGraphHopper()
      */
     protected GraphHopper createGraphHopper( CmdArgs args )
     {
-        GraphHopper tmp = new GraphHopper().forServer().init(args);
+        GraphHopper tmp = new GraphHopperOSM().forServer().init(args);
         tmp.importOrLoad();
         logger.info("loaded graph at:" + tmp.getGraphHopperLocation()
-                + ", source:" + tmp.getOSMFile()
+                + ", source:" + tmp.getDataReaderFile()
                 + ", flagEncoders:" + tmp.getEncodingManager()
                 + ", class:" + tmp.getGraphHopperStorage().toDetailsString());
         return tmp;

File: web/src/main/java/com/graphhopper/http/InfoServlet.java
Patch:
@@ -70,10 +70,10 @@ public void doGet( HttpServletRequest req, HttpServletResponse res ) throws Serv
         json.put("build_date", Constants.BUILD_DATE);
 
         StorableProperties props = hopper.getGraphHopperStorage().getProperties();
-        json.put("import_date", props.get("osmreader.import.date"));
+        json.put("import_date", props.get("datareader.import.date"));
 
-        if (!Helper.isEmpty(props.get("osmreader.data.date")))
-            json.put("data_date" , props.get("osmreader.data.date"));
+        if (!Helper.isEmpty(props.get("datareader.data.date")))
+            json.put("data_date" , props.get("datareader.data.date"));
 
         if (!Helper.isEmpty(props.get("prepare.date")))
             json.put("prepare_date", props.get("prepare.date"));

File: web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
Patch:
@@ -52,7 +52,7 @@ public void setUp()
                 put("prepare.ch.weightings", "no").
                 put("prepare.min_one_way_network_size", "0").
                 put("config", "../config-example.properties").
-                put("osmreader.osm", "../core/files/monaco.osm.gz").
+                put("datareader.file", "../core/files/monaco.osm.gz").
                 put("graph.location", dir);
         setUpJetty(args);
     }

File: web/src/test/java/com/graphhopper/http/NearestServletIT.java
Patch:
@@ -51,7 +51,7 @@ public void setUp()
     {
         CmdArgs args = new CmdArgs().
                 put("config", "../config-example.properties").
-                put("osmreader.osm", "../core/files/andorra.osm.pbf").
+                put("datareader.file", "../core/files/andorra.osm.pbf").
                 put("graph.location", dir);
         setUpJetty(args);
     }

File: web/src/test/java/com/graphhopper/http/NearestServletWithEleIT.java
Patch:
@@ -55,7 +55,7 @@ public void setUp()
                 put("prepare.ch.weightings", "no").
                 put("prepare.min_one_way_network_size", "0").
                 put("config", "../config-example.properties").
-                put("osmreader.osm", "../core/files/monaco.osm.gz").
+                put("datareader.file", "../core/files/monaco.osm.gz").
                 put("graph.location", dir);
         setUpJetty(args);
     }

File: matching-core/src/test/java/com/graphhopper/matching/LocationIndexMatchTest.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphHopperStorage;
-import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.storage.index.LocationIndexTree;

File: matching-core/src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -30,7 +30,6 @@
 import com.graphhopper.util.BreadthFirstSearch;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.GPXEntry;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionList;

File: matching-web/src/main/java/com/graphhopper/matching/http/MatchServer.java
Patch:
@@ -31,7 +31,7 @@ public class MatchServer extends GHServer {
 
     public static void main(String[] argsStr) throws Exception {
         CmdArgs args = CmdArgs.read(argsStr);
-        args.put("prepare.chWeightings", "no");
+        args.put("prepare.ch.weightings", "no");
         new MatchServer(args).start();
     }
     private final CmdArgs args;

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -75,7 +75,7 @@ public FootFlagEncoder( String propertiesStr )
     public FootFlagEncoder( int speedBits, double speedFactor )
     {
         super(speedBits, speedFactor, 0);
-        restrictions.addAll(Arrays.asList("foot", "vehicle", "access"));
+        restrictions.addAll(Arrays.asList("foot", "access"));
         restrictedValues.add("private");
         restrictedValues.add("no");
         restrictedValues.add("restricted");

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -132,9 +132,9 @@ public void testAccess()
         way.clearTags();
         way.setTag("highway", "service");
         way.setTag("vehicle", "no");
-        assertFalse(footEncoder.acceptWay(way) > 0);
-        way.setTag("foot", "yes");
         assertTrue(footEncoder.acceptWay(way) > 0);
+        way.setTag("foot", "no");
+        assertFalse(footEncoder.acceptWay(way) > 0);
 
         way.clearTags();
         way.setTag("highway", "tertiary");

File: matching-core/src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -165,7 +165,8 @@ public double timeDifference(GPXEntry m1, GPXEntry m2) {
                 return deltaTs;
             }
         };
-        final QueryGraph queryGraph = new QueryGraph(graph);
+        final QueryGraph queryGraph = new QueryGraph(graph).
+                setUseEdgeExplorerCache(true);
         queryGraph.lookup(allCandidates);
         SpatialMetrics<GPXExtension, GPXEntry> spatialMetrics = new SpatialMetrics<GPXExtension, GPXEntry>() {
             @Override

File: web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
Patch:
@@ -50,6 +50,7 @@ public void setUp()
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
                 put("prepare.ch.weightings", "no").
+                put("prepare.min_one_way_network_size", "0").
                 put("config", "../config-example.properties").
                 put("osmreader.osm", "../core/files/monaco.osm.gz").
                 put("graph.location", dir);

File: web/src/test/java/com/graphhopper/http/NearestServletWithEleIT.java
Patch:
@@ -52,7 +52,8 @@ public void setUp()
         CmdArgs args = new CmdArgs().
                 put("graph.elevation.provider", "srtm").
                 put("graph.elevation.cachedir", "../core/files/").
-                put("prepare.chWeightings", "no").
+                put("prepare.ch.weightings", "no").
+                put("prepare.min_one_way_network_size", "0").
                 put("config", "../config-example.properties").
                 put("osmreader.osm", "../core/files/monaco.osm.gz").
                 put("graph.location", dir);

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -821,7 +821,7 @@ public RoutingAlgorithm createAlgo( Graph graph, AlgorithmOptions opts )
             algo = createDijkstraBidirection(graph);
         } else
         {
-            throw new UnsupportedOperationException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies");
+            throw new IllegalArgumentException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies");
         }
 
         algo.setMaxVisitedNodes(opts.getMaxVisitedNodes());

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper;
 
 import com.graphhopper.util.PMap;
-import com.graphhopper.util.PointList;
 
 import java.util.ArrayList;
 import java.util.List;

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -70,9 +70,10 @@ public GraphHopperWeb()
         ignoreSet.add("type");
     }
 
-    public void setDownloader( Downloader downloader )
+    public GraphHopperWeb setDownloader( Downloader downloader )
     {
         this.downloader = downloader;
+        return this;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -368,7 +368,7 @@ void processWay( OSMWay way )
             if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon))
             {
                 double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
-                // Add artificial tag for the estamated distance and center
+                // Add artificial tag for the estimated distance and center
                 way.setTag("estimated_distance", estimatedDist);
                 way.setTag("estimated_center", new GHPoint((firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
             }

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -368,7 +368,7 @@ void processWay( OSMWay way )
             if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon))
             {
                 double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
-                // Add artificial tag for the estamated distance and center
+                // Add artificial tag for the estimated distance and center
                 way.setTag("estimated_distance", estimatedDist);
                 way.setTag("estimated_center", new GHPoint((firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
             }

File: core/src/test/java/com/graphhopper/routing/util/FastestWeightingTest.java
Patch:
@@ -34,15 +34,15 @@ public class FastestWeightingTest
     @Test
     public void testMinWeightHasSameUnitAs_getWeight()
     {
-        FastestWeighting instance = new FastestWeighting(encoder);
+        Weighting instance = new FastestWeighting(encoder);
         long flags = encoder.setProperties(encoder.getMaxSpeed(), true, true);
         assertEquals(instance.getMinWeight(10), instance.calcWeight(createEdge(10, flags), false, EdgeIterator.NO_EDGE), 1e-8);
     }
 
     @Test
     public void testWeightWrongHeading()
     {
-        FastestWeighting instance = new FastestWeighting(encoder, new PMap().put(Parameters.Routing.HEADING_PENALTY, "100"));
+        Weighting instance = new FastestWeighting(encoder, new PMap().put(Parameters.Routing.HEADING_PENALTY, "100"));
         VirtualEdgeIteratorState virtEdge = new VirtualEdgeIteratorState(0, 1, 1, 2, 10,
                 encoder.setProperties(10, true, true), "test", Helper.createPointList(51, 0, 51, 1));
         double time = instance.calcWeight(virtEdge, false, 0);
@@ -66,7 +66,7 @@ public void testWeightWrongHeading()
     @Test
     public void testSpeed0()
     {
-        FastestWeighting instance = new FastestWeighting(encoder);
+        Weighting instance = new FastestWeighting(encoder);
 
         assertEquals(1.0 / 0, instance.calcWeight(createEdge(10, encoder.setProperties(0, true, true)), false, EdgeIterator.NO_EDGE), 1e-8);
 

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -32,7 +32,7 @@ public class GHResponse
 {
     private String debugInfo = "";
     private final List<Throwable> errors = new ArrayList<Throwable>(4);
-    private final PMap hintsMap = new PMap();    
+    private final PMap hintsMap = new PMap();
     private final List<PathWrapper> pathWrappers = new ArrayList<PathWrapper>(5);
 
     public GHResponse()
@@ -77,7 +77,7 @@ public void addDebugInfo( String debugInfo )
             throw new IllegalStateException("Debug information has to be none null");
 
         if (!this.debugInfo.isEmpty())
-            this.debugInfo += ";";
+            this.debugInfo += "; ";
 
         this.debugInfo += debugInfo;
     }

File: android/app/src/main/java/com/graphhopper/android/MainActivity.java
Patch:
@@ -384,7 +384,7 @@ protected void onProgressUpdate( Integer... values )
 
             protected void onPostExecute( Object _ignore )
             {
-                dialog.hide();
+                dialog.dismiss();
                 if (hasError())
                 {
                     String str = "An error happened while retrieving maps:" + getErrorMessage();

File: android/app/src/main/java/com/graphhopper/android/MainActivity.java
Patch:
@@ -384,7 +384,7 @@ protected void onProgressUpdate( Integer... values )
 
             protected void onPostExecute( Object _ignore )
             {
-                dialog.hide();
+                dialog.dismiss();
                 if (hasError())
                 {
                     String str = "An error happened while retrieving maps:" + getErrorMessage();

File: tools/src/main/java/com/graphhopper/tools/QueryTorture.java
Patch:
@@ -336,7 +336,7 @@ public String createQueryString()
                 if (!qStr.isEmpty())
                     qStr += "&";
 
-                qStr += "point=" + pointStr;
+                qStr += "point=" + encodeURL(pointStr);
             }
             for (Entry<String, String> e : params.entrySet())
             {

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -386,8 +386,9 @@ protected double discriminateSlowStreets( double bendiness, double speed )
 
     /**
      * A really small bendiness or a bendiness greater than 1 indicates an error in the calculation.
-     * Just ignore them. We use bendiness > 1.2 since the beelineDistance is only approximated,
-     * therefore it can happen on straight roads, that the beeline is longer than the road.
+     * Just ignore them. We use bendiness greater 1.2 since the beelineDistance is only
+     * approximated, therefore it can happen on straight roads, that the beeline is longer than the
+     * road.
      */
     protected double correctErrors( double bendiness )
     {

File: core/src/main/java/com/graphhopper/util/DistanceCalc.java
Patch:
@@ -63,7 +63,8 @@ public interface DistanceCalc
      *   r
      *  .
      * a-------b
-     * <p>
+     * </pre>
+     * <pre>
      * case 2:
      * r
      *  .
@@ -94,7 +95,7 @@ GHPoint calcCrossingPointToEdge( double r_lat_deg, double r_lon_deg,
 
     /**
      * This methods projects a point given in lat and long (in degrees) into a direction, given as
-     * heading, measured clockwise from north in degrees. The distance is passed in km.     
+     * heading, measured clockwise from north in degrees. The distance is passed in km.
      */
     public GHPoint projectCoordinate( double lat_deg, double lon_deg,
                                       double distanceInMeter, double headingClockwiseFromNorth );

File: core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
Patch:
@@ -43,7 +43,7 @@ public class DistanceCalcEarth implements DistanceCalc
 
     /**
      * Calculates distance of (from, to) in meter.
-     * <p/>
+     * <p>
      * http://en.wikipedia.org/wiki/Haversine_formula a = sin²(Δlat/2) +
      * cos(lat1).cos(lat2).sin²(Δlong/2) c = 2.atan2(√a, √(1−a)) d = R.c
      */
@@ -118,7 +118,7 @@ public double calcNormalizedEdgeDistance( double r_lat_deg, double r_lon_deg,
 
     /**
      * New edge distance calculation where no validEdgeDistance check would be necessary
-     * <p/>
+     * <p>
      * @return the normalized distance of the query point "r" to the project point "c" onto the line
      * segment a-b
      */

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java
Patch:
@@ -31,6 +31,7 @@ public interface FlagEncoderFactory
     final String RACINGBIKE = "racingbike";
     final String MOUNTAINBIKE = "mtb";
     final String FOOT = "foot";
+    final String HIKE = "hike";
     final String MOTORCYCLE = "motorcycle";
     final FlagEncoderFactory DEFAULT = new DefaultFlagEncoderFactory();
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -252,7 +252,7 @@ public void testSidewalkNo()
 
         boolean testAlsoCH = false, is3D = false;
         runAlgo(testCollector, "files/map-sidewalk-no.osm.gz", "target/graph-sidewalkno",
-                list, "foot", testAlsoCH, "foot", "fastest", is3D);
+                list, "hike", testAlsoCH, "hike", "fastest", is3D);
 
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -335,15 +335,15 @@ public void testMonacoFoot3D()
     }
 
     @Test
-    public void testNorthBayreuthFootFastestAnd3D()
+    public void testNorthBayreuthHikeFastestAnd3D()
     {
         List<OneRun> list = new ArrayList<OneRun>();
         // prefer hiking route 'Teufelsloch Unterwaiz' and 'Rotmain-Wanderweg'        
         list.add(new OneRun(49.974972, 11.515657, 49.991022, 11.512299, 2365, 66));
         // prefer hiking route 'Markgrafenweg Bayreuth Kulmbach' but avoid tertiary highway from Pechgraben
         list.add(new OneRun(49.990967, 11.545258, 50.023182, 11.555386, 5636, 97));
         runAlgo(testCollector, "files/north-bayreuth.osm.gz", "target/north-bayreuth-gh",
-                list, "foot", true, "foot", "fastest", true);
+                list, "hike", true, "hike", "fastest", true);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -201,7 +201,7 @@ public static PathWrapper createPathWrapper( JSONObject path,
             JSONArray point = snappedPoints.getJSONArray(index);
             points.add(WebHelper.toGHPoint(point));
         }
-        pathWrapper.setPoints(points);
+        pathWrapper.setWaypoints(points);
 
         if (tmpCalcPoints)
         {

File: core/src/main/java/com/graphhopper/storage/Directory.java
Patch:
@@ -51,7 +51,6 @@ public interface Directory
      * Renames the specified DataAccess object into one.
      */
     // DataAccess rename( DataAccess da, String newName );
-
     /**
      * Removes the specified object from the directory.
      */
@@ -71,4 +70,6 @@ public interface Directory
      * Returns all created directories.
      */
     Collection<DataAccess> getAll();
+
+    Directory create();
 }

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -68,7 +68,6 @@ public GHDirectory( String _location, DAType defaultType )
                 put("nodes", DAType.RAM_INT);
             }
         }
-        mkdirs();
     }
 
     @Override
@@ -194,10 +193,12 @@ public boolean isStoring()
         return defaultType.isStoring();
     }
 
-    protected void mkdirs()
+    @Override
+    public Directory create()
     {
         if (isStoring())
             new File(location).mkdirs();
+        return this;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -174,6 +174,7 @@ public GraphHopperStorage create( long byteCount )
         if (encodingManager == null)
             throw new IllegalStateException("EncodingManager can only be null if you call loadExisting");
 
+        dir.create();
         long initSize = Math.max(byteCount, 100);
         properties.create(100);
 

File: core/src/test/java/com/graphhopper/search/NameIndexTest.java
Patch:
@@ -99,7 +99,7 @@ public void testFlush()
         String location = "./target/nameindex-store";
         Helper.removeDir(new File(location));
 
-        NameIndex index = new NameIndex(new RAMDirectory(location, true)).create(1000);
+        NameIndex index = new NameIndex(new RAMDirectory(location, true).create()).create(1000);
         long pointer = index.put("test");
         index.flush();
         index.close();

File: core/src/test/java/com/graphhopper/storage/MMapDirectoryTest.java
Patch:
@@ -25,6 +25,6 @@ public class MMapDirectoryTest extends AbstractDirectoryTester
     @Override
     Directory createDir()
     {
-        return new MMapDirectory(location);
+        return new MMapDirectory(location).create();
     }
 }

File: core/src/test/java/com/graphhopper/storage/RAMDirectoryTest.java
Patch:
@@ -25,6 +25,6 @@ public class RAMDirectoryTest extends AbstractDirectoryTester
     @Override
     Directory createDir()
     {
-        return new RAMDirectory(location, true);
+        return new RAMDirectory(location, true).create();
     }
 }

File: core/src/test/java/com/graphhopper/storage/StorablePropertiesTest.java
Patch:
@@ -32,7 +32,7 @@ public class StorablePropertiesTest
 {
     Directory createDir( String location, boolean store )
     {
-        return new RAMDirectory(location, store);
+        return new RAMDirectory(location, store).create();
     }
 
     @Test

File: core/src/test/java/com/graphhopper/storage/index/Location2IDQuadtreeTest.java
Patch:
@@ -36,7 +36,7 @@ public LocationIndex createIndex( Graph g, int resolution )
     {
         if (resolution < 0)
             resolution = 120;
-        return new Location2IDQuadtree(g, new MMapDirectory(location + "loc2idIndex")).
+        return new Location2IDQuadtree(g, new MMapDirectory(location + "loc2idIndex").create()).
                 setResolution(resolution).prepareIndex();
     }
 

File: core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
Patch:
@@ -42,14 +42,14 @@ public class DateRangeParser
         "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"
     });
 
-    static Calendar createCalendar()
+    public static Calendar createCalendar()
     {
         // Use locale US as exception here (instead of UK) to match week order "Su-Sa" used in Calendar for day_of_week.
         // Inconsistent but we should not use US for other date handling stuff like strange default formatting, related to #647.
         return Calendar.getInstance(Helper.UTC, Locale.US);
     }
 
-    public static ParsedCalendar parseDateString( String dateString ) throws ParseException
+    static ParsedCalendar parseDateString( String dateString ) throws ParseException
     {
         // Replace occurences of public holidays
         dateString = dateString.replaceAll("(,( )*)?(PH|SH)", "");

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 
@@ -132,7 +133,7 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         // forestry stuff
         defaultSpeedMap.put("track", 15);
 
-        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
+        conditionalTagsInspector = new ConditionalTagsInspector(DateRangeParser.createCalendar(), restrictions, restrictedValues, intendedValues);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.util.PMap;
 
 import java.util.*;
@@ -134,7 +135,7 @@ public FootFlagEncoder( int speedBits, double speedFactor )
 
         maxPossibleSpeed = FERRY_SPEED;
 
-        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
+        conditionalTagsInspector = new ConditionalTagsInspector(DateRangeParser.createCalendar(), restrictions, restrictedValues, intendedValues);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
@@ -118,7 +119,7 @@ public MotorcycleFlagEncoder( int speedBits, double speedFactor, int maxTurnCost
         // forestry stuff
         defaultSpeedMap.put("track", 15);
 
-        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
+        conditionalTagsInspector = new ConditionalTagsInspector(DateRangeParser.createCalendar(), restrictions, restrictedValues, intendedValues);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspectorTest.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.reader.osm.conditional;
 
-import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.reader.OSMWay;
 import org.junit.Test;
 

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -182,6 +182,7 @@ public GHResponse route( GHRequest request )
                 JSONArray point = snappedPoints.getJSONArray(index);
                 points.add(WebHelper.toGHPoint(point));
             }
+            res.setPoints(points);
 
             return res;
 

File: core/src/main/java/com/graphhopper/routing/ch/CHAlgoFactoryDecorator.java
Patch:
@@ -28,7 +28,6 @@
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.Parameters.CH;
 import static com.graphhopper.util.Parameters.CH.DISABLE;
-import com.graphhopper.util.Parameters.Routing;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -331,7 +330,7 @@ public void run()
 
                         Thread.currentThread().setName(name);
                         prepare.doWork();
-                        properties.put(errorKey, "");
+                        properties.remove(errorKey);
                         properties.put("prepare.date." + name, Helper.createFormatter().format(new Date()));
                     } catch (Exception ex)
                     {

File: matching-web/src/test/java/com/graphhopper/matching/http/BaseServletTester.java
Patch:
@@ -39,7 +39,7 @@
 public class BaseServletTester {
 
     private static final MediaType MT_JSON = MediaType.parse("application/json; charset=utf-8");
-    private static final MediaType MT_XML = MediaType.parse("application/xml; charset=utf-8");
+    private static final MediaType MT_XML = MediaType.parse("application/gpx+xml; charset=utf-8");
     private final OkHttpClient client = new OkHttpClient();
     private static MatchServer server;
     protected static Logger logger = LoggerFactory.getLogger(BaseServletTester.class);

File: core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
Patch:
@@ -81,6 +81,8 @@ public List<QueryResult> lookup( List<GHPoint> points, FlagEncoder encoder )
         queryResults = new ArrayList<>(2 + strategy.getNumberOfGeneratedPoints());
         EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
         QueryResult startQR = locationIndex.findClosest(start.lat, start.lon, edgeFilter);
+        if (!startQR.isValid())
+            ghResponse.addError(new IllegalArgumentException("Cannot find point 0: " + start));
         queryResults.add(startQR);
 
         GHPoint last = points.get(0);

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -54,13 +54,13 @@ public void testGetSpeed()
         assertEquals(18, encoder.getSpeed(way));
         assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
 
-        // Pushing section !! This is fine as we obey the law!
+        // Pushing section: this is fine as we obey the law!
         way.clearTags();
         way.setTag("highway", "footway");
         assertEquals(PUSHING_SECTION_SPEED, encoder.getSpeed(way));
         assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
 
-        // Pushing section irrespective of the pavement
+        // Use pushing section irrespective of the pavement
         way.setTag("surface", "paved");
         assertEquals(PUSHING_SECTION_SPEED, encoder.getSpeed(way));
         assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
@@ -113,7 +113,7 @@ public void testGetSpeed()
         assertEquals(PUSHING_SECTION_SPEED, encoder.getSpeed(way));
         assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
 
-        // pushing section
+        // use pushing section
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "paved");

File: core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
Patch:
@@ -105,7 +105,7 @@ public void testGetSpeed()
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "track");
         way.setTag("tracktype", "grade3");
-        // Pushing section
+        // use pushing section
         assertEquals(PUSHING_SECTION_SPEED, getSpeedFromFlags(way), 1e-1);
 
         // Even if it is part of a cycle way

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -70,7 +70,7 @@ public BikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         preferHighwayTags.add("unclassified");
 
         absoluteBarriers.add("kissing_gate");
-        setSpecificBicycleClass("touring");
+        setSpecificClassBicycle("touring");
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -425,7 +425,7 @@ public void testKremsBikeRelation()
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12491, 159));
         // 3109m is better as cyclepath is used
-        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3113, 87));
+        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3077, 79));
         list.add(new OneRun(48.412294, 15.62007, 48.398306, 15.609667, 3965, 94));
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",

File: core/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -560,7 +560,7 @@ public void testFlexMode_631()
 
         tmpHopper.getCHFactoryDecorator().
                 setWeightingsAsStrings(Arrays.asList("fastest")).
-                setForcingFlexibleModeAllowed(true);
+                setDisablingAllowed(true);
 
         tmpHopper.importOrLoad();
 
@@ -575,7 +575,7 @@ public void testFlexMode_631()
         assertEquals(92, bestPath.getPoints().getSize());
 
         // now request flex mode
-        req.getHints().put("routing.flexibleMode.force", true);
+        req.getHints().put("routing.ch.disable", true);
         rsp = tmpHopper.route(req);
         sum = rsp.getHints().getLong("visited_nodes.sum", 0);
         assertTrue("Too few visited nodes for flex mode " + sum, sum > 60);

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -100,7 +100,7 @@ protected DataReader importData() throws IOException
 
         hopper.init(args).
                 forDesktop();        
-        hopper.getCHFactoryDecorator().setForcingFlexibleModeAllowed(true);
+        hopper.getCHFactoryDecorator().setDisablingAllowed(true);
         hopper.importOrLoad();
 
         GraphHopperStorage g = hopper.getGraphHopperStorage();

File: core/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -527,10 +527,10 @@ private void executeCHFootRoute()
         GraphHopper tmpHopper = new GraphHopper().
                 setStoreOnFlush(true).
                 setOSMFile(tmpOsmFile).
-                setCHWeightings(Arrays.asList(weightCalcStr)).
                 setGraphHopperLocation(tmpGraphFile).
-                setEncodingManager(new EncodingManager(tmpImportVehicles)).
-                importOrLoad();
+                setEncodingManager(new EncodingManager(tmpImportVehicles));
+        tmpHopper.getCHFactoryDecorator().setWeightingsAsStrings(weightCalcStr);
+        tmpHopper.importOrLoad();
 
         // same query as in testMonacoWithInstructions
         GHResponse rsp = tmpHopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).

File: matching-web/src/main/java/com/graphhopper/matching/http/MatchServer.java
Patch:
@@ -31,7 +31,7 @@ public class MatchServer extends GHServer {
 
     public static void main(String[] argsStr) throws Exception {
         CmdArgs args = CmdArgs.read(argsStr);
-        args.put("prepare.chWeighting", "no");
+        args.put("prepare.chWeightings", "no");
         new MatchServer(args).start();
     }
     private final CmdArgs args;

File: core/src/main/java/com/graphhopper/reader/OSMTagParser.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * This class currently parses the duration tag only.
- * <p/>
+ *
  * @author ratrun
  */
 public class OSMTagParser

File: core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
Patch:
@@ -44,7 +44,7 @@
 /**
  * This class implements the alternative paths search using the "plateau" and partially the
  * "penalty" method discribed in the following papers.
- * <p/>
+ * <p>
  * <ul>
  * <li>Choice Routing Explanation - Camvit 2009:
  * http://www.camvit.com/camvit-technical-english/Camvit-Choice-Routing-Explanation-english.pdf</li>
@@ -58,7 +58,6 @@
  * http://algo2.iti.kit.edu/download/altgraph_tapas_extended.pdf
  * </li>
  * </ul>
- * <p/>
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
Patch:
@@ -30,14 +30,14 @@ public interface RoutingAlgorithm
 {
     /**
      * Calculates the best path between the specified nodes.
-     * <p/>
+     *
      * @return the path. Call the method found() to make sure that the path is valid.
      */
     Path calcPath( int from, int to );
 
     /**
      * Calculates multiple possibilities for a path.
-     * <p/>
+     *
      * @see #calcPath(int, int)
      */
     List<Path> calcPaths( int from, int to );

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactoryDecorator.java
Patch:
@@ -27,7 +27,7 @@ public interface RoutingAlgorithmFactoryDecorator
 {
     /**
      * This method returns the specified algoFactory unchanged, decorates it or completely replaces
-     * it depending on the specified opts.
+     * it depending on the specified optionsMap.
      */
-    RoutingAlgorithmFactory decorate( RoutingAlgorithmFactory defaultAlgoFactory, HintsMap map );
+    RoutingAlgorithmFactory getDecoratedAlgorithmFactory( RoutingAlgorithmFactory algoFactory, HintsMap optionsMap );
 }

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -105,7 +105,7 @@ public GraphHopperTest( String osmFile, boolean turnCosts )
             setOSMFile(osmFile);
             setGraphHopperLocation(dir);
             setEncodingManager(new EncodingManager("CAR,FOOT"));
-            setCHEnable(false);
+            setCHEnabled(false);
 
             if (turnCosts)
             {

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -98,9 +98,9 @@ protected DataReader importData() throws IOException
             }
         };
 
-        hopper.init(args).
-                setFlexibleModeAllowed(true).
-                importOrLoad();
+        hopper.init(args);
+        hopper.getCHFactoryDecorator().setForcingFlexibleModeAllowed(true);
+        hopper.importOrLoad();
 
         GraphHopperStorage g = hopper.getGraphHopperStorage();
 //        if ("true".equals(g.getProperties().get("prepare.done")))

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -795,7 +795,7 @@ protected OSMReader initOSMReader( OSMReader reader )
     public boolean load( String graphHopperFolder )
     {
         if (!(new File(graphHopperFolder).exists()))
-            return false;
+            throw new IllegalStateException("Path \"" + graphHopperFolder + "\" does not exist");
 
         return initializeStorage(graphHopperFolder);
     }
@@ -1038,7 +1038,7 @@ public GHResponse route( GHRequest request )
     protected List<Path> calcPaths( GHRequest request, GHResponse ghRsp )
     {
         if (ghStorage == null || !fullyLoaded)
-            throw new IllegalStateException("Call load or importOrLoad before routing");
+            throw new IllegalStateException("Do a successful call to load or importOrLoad before routing");
 
         if (ghStorage.isClosed())
             throw new IllegalStateException("You need to create a new GraphHopper instance as it is already closed");

File: core/src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -112,7 +112,7 @@ public void testNoLoad()
             assertTrue(false);
         } catch (Exception ex)
         {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Call load or importOrLoad before routing"));
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Do a successful call to load or importOrLoad before routing"));
         }
 
         instance = new GraphHopper().setEncodingManager(encodingManager);
@@ -122,7 +122,7 @@ public void testNoLoad()
             assertTrue(false);
         } catch (Exception ex)
         {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Call load or importOrLoad before routing"));
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Do a successful call to load or importOrLoad before routing"));
         }
     }
 }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1038,7 +1038,7 @@ public GHResponse route( GHRequest request )
     protected List<Path> calcPaths( GHRequest request, GHResponse ghRsp )
     {
         if (ghStorage == null || !fullyLoaded)
-            throw new IllegalStateException("Call load or importOrLoad before routing");
+            throw new IllegalStateException("Do a successful call to load or importOrLoad before routing");
 
         if (ghStorage.isClosed())
             throw new IllegalStateException("You need to create a new GraphHopper instance as it is already closed");

File: core/src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -112,7 +112,7 @@ public void testNoLoad()
             assertTrue(false);
         } catch (Exception ex)
         {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Call load or importOrLoad before routing"));
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Do a successful call to load or importOrLoad before routing"));
         }
 
         instance = new GraphHopper().setEncodingManager(encodingManager);
@@ -122,7 +122,7 @@ public void testNoLoad()
             assertTrue(false);
         } catch (Exception ex)
         {
-            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Call load or importOrLoad before routing"));
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Do a successful call to load or importOrLoad before routing"));
         }
     }
 }

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -451,7 +451,7 @@ public void testNoNPE_ifLoadNotSuccessful()
             assertTrue(false);
         } catch (IllegalStateException ex)
         {
-            assertEquals("Call load or importOrLoad before routing", ex.getMessage());
+            assertEquals("Do a successful call to load or importOrLoad before routing", ex.getMessage());
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -84,9 +84,7 @@ boolean isPushingSection( OSMWay way )
     {
         String highway = way.getTag("highway");
         String trackType = way.getTag("tracktype");
-        return way.hasTag("highway", pushingSections)
-                || way.hasTag("railway", "platform")
-                || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
+        return super.isPushingSection(way) || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -73,7 +73,7 @@ public FootFlagEncoder( String propertiesStr )
     public FootFlagEncoder( int speedBits, double speedFactor )
     {
         super(speedBits, speedFactor, 0);
-        restrictions.addAll(Arrays.asList("foot", "access"));
+        restrictions.addAll(Arrays.asList("foot", "vehicle", "access"));
         restrictedValues.add("private");
         restrictedValues.add("no");
         restrictedValues.add("restricted");

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -165,8 +165,9 @@ boolean isPushingSection( OSMWay way )
     {
         String highway = way.getTag("highway");
         String trackType = way.getTag("tracktype");
-        return way.hasTag("highway", pushingSections)
+        return way.hasTag("highway", pushingSectionsHighways)
                 || way.hasTag("railway", "platform")
+                || way.hasTag("bicycle", "dismount")
                 || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
     }
 

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -40,7 +40,8 @@
 
 /**
  * A rough graphical user interface for visualizing the OSM graph. Mainly for debugging algorithms
- * and spatial datastructures.
+ * and spatial datastructures. See e.g. this blog post:
+ * https://graphhopper.com/blog/2016/01/19/alternative-roads-to-rome/
  * <p>
  * Use the web module for a better/faster/userfriendly/... alternative!
  * <p>

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -191,7 +191,7 @@ public boolean hasFavoredHeading( int i )
     private void validateAzimuthValue( double heading )
     {
         // heading must be in (0, 360) oder NaN
-        if (!Double.isNaN(heading) && ((Double.compare(heading, 360) > 0) || (Double.compare(heading, 0) < 0)))
+        if (!Double.isNaN(heading) && (Double.compare(heading, 360) > 0 || Double.compare(heading, 0) < 0))
             throw new IllegalArgumentException("Heading " + heading + " must be in range (0,360) or NaN");
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -994,7 +994,7 @@ public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder
         } else if ("curvature".equalsIgnoreCase(weighting))
         {
             if (encoder.supports(CurvatureWeighting.class))
-                return new CurvatureWeighting(encoder, weightingMap, ghStorage);
+                return new CurvatureWeighting(encoder, weightingMap);
             else
                 return new FastestWeighting(encoder, weightingMap);
         }

File: core/src/main/java/com/graphhopper/coll/GHBitSetImpl.java
Patch:
@@ -77,7 +77,6 @@ public final GHBitSet copyTo( GHBitSet bs )
             ((GHBitSetImpl) bs).or(this);
         } else
         {
-            int len = size();
             for (int index = super.nextSetBit(0); index >= 0;
                     index = super.nextSetBit(index + 1))
             {

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -46,7 +46,7 @@ public void clear()
     void remove( int key, int value )
     {
         long v = bitUtil.toLong(value, key);
-        if (map.remove(v) != NOT_EMPTY)
+        if (!map.remove(v).equals(NOT_EMPTY))
         {
             throw new IllegalStateException("cannot remove key " + key + " with value " + value
                     + " - did you insert " + key + "," + value + " before?");

File: core/src/main/java/com/graphhopper/reader/DataReader.java
Patch:
@@ -32,7 +32,8 @@ public interface DataReader
     void readGraph() throws IOException;
 
     /**
-     * This method returns the date of the most recent change for the underlying data.
+     * This method returns the date of the most recent change for the underlying data or null if not
+     * found.
      */
     Date getDataDate();
 }

File: core/src/main/java/com/graphhopper/reader/OSMTagParser.java
Patch:
@@ -76,8 +76,8 @@ public static long parseDuration( String str ) throws IllegalArgumentException
                     minStr = minStr.substring(0, index);
                 }
 
-                seconds += Integer.parseInt(hourStr) * 60 * 60;
-                seconds += Integer.parseInt(minStr) * 60;
+                seconds += Integer.parseInt(hourStr) * 60L * 60;
+                seconds += Integer.parseInt(minStr) * 60L;
                 seconds += Integer.parseInt(secondsStr);
                 return seconds;
             } else

File: core/src/main/java/com/graphhopper/reader/PillarInfo.java
Patch:
@@ -30,7 +30,7 @@
  */
 public class PillarInfo implements PointAccess
 {
-    private final int LAT = 0 * 4, LON = 1 * 4, ELE = 2 * 4;
+    private static final int LAT = 0 * 4, LON = 1 * 4, ELE = 2 * 4;
     private final boolean enabled3D;
     private final DataAccess da;
     private final int rowSizeInBytes;

File: core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
Patch:
@@ -60,7 +60,7 @@ public interface ElevationProvider
      */
     void release();
 
-    public final static ElevationProvider NOOP = new ElevationProvider()
+    ElevationProvider NOOP = new ElevationProvider()
     {
         @Override
         public double getEle( double lat, double lon )

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -320,6 +320,7 @@ private byte[] getByteArrayFromZipFile( String fileDetails ) throws InterruptedE
             os.write(buffer, 0, len);
         }
         os.flush();
+        Helper.close(buff);
         return os.toByteArray();
     }
 

File: core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
Patch:
@@ -85,10 +85,10 @@ public boolean isInRange( Calendar date )
             int currentDayOfWeek = date.get(Calendar.DAY_OF_WEEK);
             if (reverse)
             {
-                return (from.get(Calendar.DAY_OF_WEEK) <= currentDayOfWeek || currentDayOfWeek <= to.get(Calendar.DAY_OF_WEEK));
+                return from.get(Calendar.DAY_OF_WEEK) <= currentDayOfWeek || currentDayOfWeek <= to.get(Calendar.DAY_OF_WEEK);
             } else
             {
-                return (from.get(Calendar.DAY_OF_WEEK) <= currentDayOfWeek && currentDayOfWeek <= to.get(Calendar.DAY_OF_WEEK));
+                return from.get(Calendar.DAY_OF_WEEK) <= currentDayOfWeek && currentDayOfWeek <= to.get(Calendar.DAY_OF_WEEK);
             }
         }
 

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.InternalGraphEventListener;
 import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;

File: core/src/main/java/com/graphhopper/routing/util/AbstractWeighting.java
Patch:
@@ -15,6 +15,8 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.util.GHUtility;
+
 /**
  *
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
Patch:
@@ -25,8 +25,6 @@
 import com.graphhopper.util.PointList;
 
 import static com.graphhopper.util.Helper.*;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * Stores two speed values into an edge to support avoiding too much incline

File: core/src/main/java/com/graphhopper/routing/util/CurvatureWeighting.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
 
@@ -28,7 +27,7 @@ public class CurvatureWeighting extends PriorityWeighting
 {
     private final double minFactor;
 
-    public CurvatureWeighting( FlagEncoder flagEncoder, PMap pMap, GraphHopperStorage ghStorage )
+    public CurvatureWeighting( FlagEncoder flagEncoder, PMap pMap )
     {
         super(flagEncoder, pMap);
 

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -202,7 +202,7 @@ private void registerEncoder( AbstractFlagEncoder encoder )
         // turn flag bits are independent from edge encoder bits
         usedBits = encoder.defineTurnBits(encoderCount, nextTurnBit);
         if (usedBits > bitsForTurnFlags)
-            throw new IllegalArgumentException(String.format(ERR, bitsForEdgeFlags, "turn"));
+            throw new IllegalArgumentException(String.format(ERR, bitsForTurnFlags, "turn"));
         nextTurnBit = usedBits;
 
         edgeEncoders.add(encoder);

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -121,7 +121,7 @@ public interface FlagEncoder extends TurnCostEncoder
     /**
      * Returns true if the feature class is supported like TurnWeighting or PriorityWeighting.
      */
-    public boolean supports( Class<?> feature );
+    boolean supports( Class<?> feature );
 
     /**
      * @return additional cost or warning information for an instruction like ferry or road charges.

File: core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
Patch:
@@ -48,7 +48,7 @@ public interface TurnCostEncoder
      * whether turn costs nor turn restrictions will be encoded by this encoder, should be used for
      * pedestrians
      */
-    static class NoTurnCostsEncoder implements TurnCostEncoder
+    class NoTurnCostsEncoder implements TurnCostEncoder
     {
 
         @Override

File: core/src/main/java/com/graphhopper/storage/GraphExtension.java
Patch:
@@ -62,7 +62,7 @@ public interface GraphExtension extends Storable<GraphExtension>
      * default implementation defines no additional fields or any logic. there's like nothing , like
      * the default behavior.
      */
-    public class NoOpExtension implements GraphExtension
+    class NoOpExtension implements GraphExtension
     {
 
         @Override

File: core/src/main/java/com/graphhopper/storage/TurnCostExtension.java
Patch:
@@ -30,8 +30,8 @@
 public class TurnCostExtension implements GraphExtension
 {
     /* pointer for no cost entry */
-    private final int NO_TURN_ENTRY = -1;
-    private final long EMPTY_FLAGS = 0L;
+    private static final int NO_TURN_ENTRY = -1;
+    private static final long EMPTY_FLAGS = 0L;
 
     /*
      * items in turn cost tables: edge from, edge to, getCosts, pointer to next

File: core/src/main/java/com/graphhopper/storage/index/Location2IDFullWithEdgesIndex.java
Patch:
@@ -21,9 +21,7 @@
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
-import com.graphhopper.util.DistancePlaneProjection;
 import com.graphhopper.util.DistanceCalc;
-import com.graphhopper.util.DistanceCalcEarth;
 import com.graphhopper.util.Helper;
 
 /**

File: core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
Patch:
@@ -42,6 +42,7 @@ public interface LocationIndex extends Storable<LocationIndex>
     LocationIndex prepareIndex();
 
     /**
+     * @deprecated will be removed with 0.8 use 'QueryResult findClosest' instead
      * @return the closest node id for the specified geo location (latitude,longitude)
      */
     int findID( double lat, double lon );

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -240,7 +240,7 @@ InMemConstructionIndex getPrepareInMemIndex()
     public int findID( double lat, double lon )
     {
         QueryResult res = findClosest(lat, lon, EdgeFilter.ALL_EDGES);
-        if (res == null)
+        if (!res.isValid())
             return -1;
 
         return res.getClosestNode();
@@ -740,7 +740,7 @@ public final boolean findNetworkEntries( double queryLat, double queryLon,
             findNetworkEntriesSingleRegion(foundEntries, subqueryLatB, subqueryLon);
         }
 
-        if (iteration % 2 == 1)
+        if (iteration % 2 != 0)
         {
             // Check if something was found already...
             if (!foundEntries.isEmpty())
@@ -967,7 +967,7 @@ protected boolean checkAdjacent( EdgeIteratorState currEdge )
     }
 
     // make entries static as otherwise we get an additional reference to this class (memory waste)
-    static interface InMemEntry
+    interface InMemEntry
     {
         boolean isLeaf();
     }

File: core/src/main/java/com/graphhopper/util/AngleCalc.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util;
 
-import static java.lang.Math.PI;
 import static java.lang.Math.cos;
 import static java.lang.Math.toRadians;
 

File: core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
Patch:
@@ -239,7 +239,7 @@ public boolean validEdgeDistance( double r_lat_deg, double r_lon_deg,
     @Override
     public boolean isCrossBoundary( double lon1, double lon2 )
     {
-        return Math.abs(lon1 - lon2) > 300;
+        return abs(lon1 - lon2) > 300;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/util/Downloader.java
Patch:
@@ -138,8 +138,8 @@ public void downloadFile( String url, String toFile ) throws IOException
             }
         } finally
         {
-            writer.close();
-            in.close();
+            Helper.close(writer);
+            Helper.close(in);
         }
     }
 

File: core/src/main/java/com/graphhopper/util/EdgeIterator.java
Patch:
@@ -50,9 +50,9 @@ public interface EdgeIterator extends EdgeIteratorState
      * integer value to indicate if an edge is valid or not which then would be initialized with
      * this value
      */
-    public static final int NO_EDGE = -1;
+    int NO_EDGE = -1;
 
-    static class Edge
+    class Edge
     {
         public static boolean isValid( int edgeId )
         {

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -28,7 +28,7 @@
  */
 public interface EdgeIteratorState
 {
-    final static int K_UNFAVORED_EDGE = -1;
+    int K_UNFAVORED_EDGE = -1;
 
     /**
      * @return the edge id of the current edge. Do not make any assumptions about the concrete

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -23,7 +23,7 @@
 
 public class Instruction
 {
-    private static final AngleCalc ac = new AngleCalc();
+    private static final AngleCalc AC = Helper.ANGLE_CALC;
 
     public static final int LEAVE_ROUNDABOUT = -6; // for future use
     public static final int TURN_SHARP_LEFT = -3;
@@ -215,7 +215,7 @@ String calcDirection( Instruction nextI )
         if (Double.isNaN(azimuth))
             return "";
 
-        return ac.azimuth2compassPoint(azimuth);
+        return AC.azimuth2compassPoint(azimuth);
     }
 
     /**
@@ -243,7 +243,7 @@ public double calcAzimuth( Instruction nextI )
 
         double lat = points.getLatitude(0);
         double lon = points.getLongitude(0);
-        return ac.calcAzimuth(lat, lon, nextLat, nextLon);
+        return AC.calcAzimuth(lat, lon, nextLat, nextLon);
     }
 
     void checkOne()

File: core/src/test/java/com/graphhopper/coll/GHSortedCollectionTest.java
Patch:
@@ -29,7 +29,7 @@ public class GHSortedCollectionTest
     @Test
     public void testPoll()
     {
-        GHSortedCollection instance = new GHSortedCollection(100);
+        GHSortedCollection instance = new GHSortedCollection();
         assertTrue(instance.isEmpty());
         instance.insert(0, 10);
         assertEquals(10, instance.peekValue());
@@ -44,7 +44,7 @@ public void testPoll()
     @Test
     public void testInsert()
     {
-        GHSortedCollection instance = new GHSortedCollection(100);
+        GHSortedCollection instance = new GHSortedCollection();
         assertTrue(instance.isEmpty());
         instance.insert(0, 10);
         assertEquals(1, instance.getSize());
@@ -64,7 +64,7 @@ public void testInsert()
     @Test
     public void testUpdate()
     {
-        GHSortedCollection instance = new GHSortedCollection(100);
+        GHSortedCollection instance = new GHSortedCollection();
         assertTrue(instance.isEmpty());
         instance.insert(0, 10);
         instance.insert(1, 11);

File: core/src/test/java/com/graphhopper/geohash/SpatialKeyAlgoTest.java
Patch:
@@ -114,7 +114,6 @@ public void testBijectionBug2()
             GHPoint coord2 = new GHPoint();
             algo.decode(keyY, coord2);
 
-            double precision = DistanceCalcEarth.C / (1 << (i / 2 - 2)) / 4;
             double dist = new DistanceCalcEarth().calcDist(coord.lat, coord.lon, coord2.lat, coord2.lon);
             assertEquals(0, dist, 1e-5);
 //            System.out.println("\n\n##" + i + "\nkeyX:" + BitUtil.BIG.toBitString(keyX));

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -626,7 +626,7 @@ public long handleNodeTags( OSMNode node )
 
         lonMap.put(1, 1.0d);
         lonMap.put(2, 1.0d);
-        final AtomicInteger increased = new AtomicInteger(0);
+
         OSMReader osmreader = new OSMReader(ghStorage)
         {
             // mock data access

File: web/src/main/java/com/graphhopper/http/GHBaseServlet.java
Patch:
@@ -40,7 +40,7 @@
  */
 public class GHBaseServlet extends HttpServlet
 {
-    protected static Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
+    protected static final Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
     @Inject
     @Named("jsonpAllowed")
     private boolean jsonpAllowed;

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -32,8 +32,6 @@
 
 import org.json.JSONArray;
 import org.json.JSONObject;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * Main wrapper of the GraphHopper Directions API for a simple and efficient usage.
@@ -42,7 +40,6 @@
  */
 public class GraphHopperWeb implements GraphHopperAPI
 {
-    private final Logger logger = LoggerFactory.getLogger(getClass());
     private Downloader downloader = new Downloader("GraphHopper Java Client");
     private String routeServiceUrl = "https://graphhopper.com/api/1/route";
     private String key = "";

File: web/src/test/java/com/graphhopper/http/BaseServletTester.java
Patch:
@@ -37,7 +37,7 @@
 public class BaseServletTester
 {
     private static GHServer server;
-    protected static Logger logger = LoggerFactory.getLogger(BaseServletTester.class);
+    protected static final Logger logger = LoggerFactory.getLogger(BaseServletTester.class);
     protected static int port;
     protected Injector injector;
 

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -98,7 +98,7 @@ private Path runAlgo()
         {
             int currVertex = currEdge.adjNode;
             visitedCount++;
-            if (isWeightLimitExceeded())
+            if (isWeightLimitExceeded() || isMaxVisitedNodesExceeded())
                 return createEmptyPath();
 
             if (finished())

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -211,6 +211,8 @@ protected boolean isWeightLimitExceeded()
         return currFrom.weight + currTo.weight > weightLimit;
     }
 
+
+
     @Override
     boolean fillEdgesFrom()
     {

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -66,7 +66,7 @@ public Path calcPath( int from, int to )
 
     protected void runAlgo()
     {
-        while (!finished() && !isWeightLimitExceeded())
+        while (!finished() && !isWeightLimitExceeded() && !isMaxVisitedNodesExceeded())
         {
             if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -76,7 +76,7 @@ protected void runAlgo()
         while (true)
         {
             visitedNodes++;
-            if (isWeightLimitExceeded() || finished())
+            if (isWeightLimitExceeded() || finished() || isMaxVisitedNodesExceeded())
                 break;
 
             int startNode = currEdge.adjNode;

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -621,8 +621,8 @@ void findShortcuts( ShortcutHandler sch )
 
                 double existingDistSum = v_u_dist + outgoingEdges.getDistance();
                 prepareAlgo.setWeightLimit(existingDirectWeight);
-                prepareAlgo.setLimitVisitedNodes((int) meanDegree * 100)
-                        .setEdgeFilter(ignoreNodeFilter.setAvoidNode(sch.getNode()));
+                prepareAlgo.setMaxVisitedNodes((int) meanDegree * 100);
+                prepareAlgo.setEdgeFilter(ignoreNodeFilter.setAvoidNode(sch.getNode()));
 
                 dijkstraSW.start();
                 dijkstraCount++;

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -272,6 +272,7 @@ public void testMonacoFastest()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
+
     @Test
     public void testMonacoMixed()
     {

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -92,7 +92,8 @@ public void testShortestPathSkipNode()
         assertTrue(algo.getWeight(nodeEntry) > normalDist);
 
         algo.clear();
-        nodeEntry = algo.setLimitVisitedNodes(1).findEndNode(4, 2);
+        algo.setMaxVisitedNodes(1);
+        nodeEntry = algo.findEndNode(4, 2);
         assertEquals(-1, nodeEntry);
     }
 

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -98,7 +98,7 @@ private Path runAlgo()
         {
             int currVertex = currEdge.adjNode;
             visitedCount++;
-            if (isWeightLimitExceeded())
+            if (isWeightLimitExceeded() || isMaxVisitedNodesExceeded())
                 return createEmptyPath();
 
             if (finished())

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -211,6 +211,8 @@ protected boolean isWeightLimitExceeded()
         return currFrom.weight + currTo.weight > weightLimit;
     }
 
+
+
     @Override
     boolean fillEdgesFrom()
     {

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -66,7 +66,7 @@ public Path calcPath( int from, int to )
 
     protected void runAlgo()
     {
-        while (!finished() && !isWeightLimitExceeded())
+        while (!finished() && !isWeightLimitExceeded() && !isMaxVisitedNodesExceeded())
         {
             if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -76,7 +76,7 @@ protected void runAlgo()
         while (true)
         {
             visitedNodes++;
-            if (isWeightLimitExceeded() || finished())
+            if (isWeightLimitExceeded() || finished() || isMaxVisitedNodesExceeded())
                 break;
 
             int startNode = currEdge.adjNode;

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -621,8 +621,8 @@ void findShortcuts( ShortcutHandler sch )
 
                 double existingDistSum = v_u_dist + outgoingEdges.getDistance();
                 prepareAlgo.setWeightLimit(existingDirectWeight);
-                prepareAlgo.setLimitVisitedNodes((int) meanDegree * 100)
-                        .setEdgeFilter(ignoreNodeFilter.setAvoidNode(sch.getNode()));
+                prepareAlgo.setMaxVisitedNodes((int) meanDegree * 100);
+                prepareAlgo.setEdgeFilter(ignoreNodeFilter.setAvoidNode(sch.getNode()));
 
                 dijkstraSW.start();
                 dijkstraCount++;

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -272,6 +272,7 @@ public void testMonacoFastest()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
+
     @Test
     public void testMonacoMixed()
     {

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -92,7 +92,8 @@ public void testShortestPathSkipNode()
         assertTrue(algo.getWeight(nodeEntry) > normalDist);
 
         algo.clear();
-        nodeEntry = algo.setLimitVisitedNodes(1).findEndNode(4, 2);
+        algo.setMaxVisitedNodes(1);
+        nodeEntry = algo.findEndNode(4, 2);
         assertEquals(-1, nodeEntry);
     }
 

File: matching-core/src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -17,8 +17,8 @@
  */
 package com.graphhopper.matching;
 
-import com.graphhopper.AltResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.GraphHopperStorage;
@@ -107,7 +107,7 @@ private void start(CmdArgs args) {
                     if (instructions.isEmpty()) {
                         il = new InstructionList(null);
                     } else {
-                        AltResponse matchGHRsp = new AltResponse();
+                        PathWrapper matchGHRsp = new PathWrapper();
                         Path path = mapMatching.calcPath(mr);
                         new PathMerger().doWork(matchGHRsp, Collections.singletonList(path), tr);
                         il = matchGHRsp.getInstructions();

File: matching-core/src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -17,10 +17,10 @@
  */
 package com.graphhopper.matching;
 
-import com.graphhopper.AltResponse;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.GraphHopperStorage;
@@ -101,7 +101,7 @@ public void testDoWork() {
         assertEquals(mr.getGpxEntriesMillis(), mr.getMatchMillis());
 
         Path path = mapMatching.calcPath(mr);
-        AltResponse matchGHRsp = new AltResponse();
+        PathWrapper matchGHRsp = new PathWrapper();
         new PathMerger().doWork(matchGHRsp, Collections.singletonList(path), SINGLETON.get("en"));
         InstructionList il = matchGHRsp.getInstructions();
 
@@ -120,7 +120,7 @@ public void testDoWork() {
         assertEquals(mr.getGpxEntriesMillis(), mr.getMatchMillis());
 
         path = mapMatching.calcPath(mr);
-        matchGHRsp = new AltResponse();
+        matchGHRsp = new PathWrapper();
         new PathMerger().doWork(matchGHRsp, Collections.singletonList(path), SINGLETON.get("en"));
         il = matchGHRsp.getInstructions();
 

File: matching-web/src/main/java/com/graphhopper/matching/http/MatchServlet.java
Patch:
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.matching.http;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.http.GraphHopperServlet;
@@ -107,7 +107,7 @@ public void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes)
         String vehicle = getParam(httpReq, "vehicle", "car");
 
         Locale locale = Helper.getLocale(getParam(httpReq, "locale", "en"));
-        AltResponse matchGHRsp = new AltResponse();
+        PathWrapper matchGHRsp = new PathWrapper();
         MatchResult matchRsp = null;
         StopWatch sw = new StopWatch().start();
 
@@ -149,7 +149,7 @@ public void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes)
             }
         } else {
             GHResponse rsp = new GHResponse();
-            rsp.addAlternative(matchGHRsp);
+            rsp.add(matchGHRsp);
             Map<String, Object> map = routeSerializer.toJSON(rsp, true, pointsEncoded,
                     enableElevation, enableInstructions);
 

File: web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
Patch:
@@ -72,7 +72,7 @@ public String downloadAsString( String url, boolean readErrorStreamNoException )
                 assertFalse(url.contains("algo1"));
                 assertTrue(url.contains("alternative_route.max_paths=4"));
 
-                assertEquals("https://graphhopper.com/api/1/route?point=52.0,13.0&point=52.0,14.0&&type=json&instructions=true&points_encoded=true&calc_points=true&algorithm=&locale=en_US&elevation=false&key=blup", url);
+                assertEquals("https://graphhopper.com/api/1/route?point=52.0,13.0&point=52.0,14.0&&type=json&instructions=true&points_encoded=true&calc_points=true&algorithm=&locale=en_US&elevation=false&key=blup&alternative_route.max_paths=4", url);
                 return Helper.isToString(getClass().getResourceAsStream("test_encoded.json"));
             }
         };

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -97,8 +97,6 @@ public String getDebugInfo()
     /**
      * This method returns true if one of the paths has an error or if the response itself is
      * errornous.
-     * <p/>
-     * @see #hasRawErrors()
      */
     public boolean hasErrors()
     {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1294,7 +1294,7 @@ public void run()
                             ghStorage.getProperties().put("prepare.date." + name, Helper.createFormatter().format(new Date()));
                         } catch (Exception ex)
                         {
-                            logger.error("Problem while CH preparation " + name);
+                            logger.error("Problem while CH preparation " + name, ex);
                             ghStorage.getProperties().put(errorKey, ex.getMessage());
                         }
                     }

File: core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
Patch:
@@ -118,7 +118,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
                 return factor * weighting.calcWeight(edge, reverse, prevOrNextEdgeId);
             }
         };
-        AlternativeRoute.AltDijkstraBidirectionRef altBidirDijktra = new AlternativeRoute.AltDijkstraBidirectionRef(graph, flagEncoder,
+        AlternativeRoute.AlternativeBidirSearch altBidirDijktra = new AlternativeRoute.AlternativeBidirSearch(graph, flagEncoder,
                 altWeighting, traversalMode, 1);
         altBidirDijktra.setWeightLimit(weightLimit);
         // find an alternative for backward direction starting from 'to'

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -59,8 +59,8 @@ public TestAlgoCollector assertDistance( AlgoHelperEntry algoEntry, List<QueryRe
 
         for (int i = 0; i < queryList.size() - 1; i++)
         {
-            Path path = algoEntry.createAlgo(queryGraph).
-                    calcPath(queryList.get(i).getClosestNode(), queryList.get(i + 1).getClosestNode());
+            RoutingAlgorithm algo = algoEntry.createAlgo(queryGraph);
+            Path path = algo.calcPath(queryList.get(i).getClosestNode(), queryList.get(i + 1).getClosestNode());
             // System.out.println(path.calcInstructions().createGPX("temp", 0, "GMT"));
             altPaths.add(path);
         }

File: core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java
Patch:
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import static com.graphhopper.routing.AbstractRoutingAlgorithmTester.updateDistancesFor;
-import com.graphhopper.routing.AlternativeRoute.AltDijkstraBidirectionRef;
+import com.graphhopper.routing.AlternativeRoute.AlternativeBidirSearch;
 import com.graphhopper.storage.*;
 import java.util.Arrays;
 import java.util.Collection;
@@ -175,7 +175,7 @@ public void testDisconnectedAreas()
         updateDistancesFor(g, 20, 0.00, -0.01);
 
         Weighting weighting = new FastestWeighting(carFE);
-        AltDijkstraBidirectionRef altDijkstra = new AltDijkstraBidirectionRef(g, carFE, weighting, traversalMode, 1);
+        AlternativeBidirSearch altDijkstra = new AlternativeBidirSearch(g, carFE, weighting, traversalMode, 1);
         Path path = altDijkstra.calcPath(1, 20);
         assertFalse(path.isFound());
 

File: core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
Patch:
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.reader.osm.conditional;
 
-import java.text.SimpleDateFormat;
+import com.graphhopper.util.Helper;
 import java.util.Calendar;
 
 /**
@@ -82,7 +82,7 @@ public Calendar getMin()
     @Override
     public String toString()
     {
-        return parseType + "; " + new SimpleDateFormat().format(parsedCalendar.getTime());
+        return parseType + "; " + Helper.createFormatter().format(parsedCalendar.getTime());
     }
 
     public enum ParseType

File: core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
Patch:
@@ -13,7 +13,6 @@
 import gnu.trove.list.TLongList;
 
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.zip.DataFormatException;
 import java.util.zip.Inflater;

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionAnnotation;
 import com.graphhopper.util.Translation;

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.PMap;
 
 import java.util.*;

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;

File: core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java
Patch:
@@ -18,8 +18,6 @@
 package com.graphhopper.reader.osm.conditional;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.CalendarBasedTest;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import org.junit.Before;
 import org.junit.Test;
 

File: core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspectorTest.java
Patch:
@@ -15,8 +15,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osm;
+package com.graphhopper.reader.osm.conditional;
 
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.reader.OSMWay;
 import org.junit.Test;
 

File: core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
Patch:
@@ -27,7 +27,7 @@ public DateRange( ParsedCalendar from, ParsedCalendar to )
         Calendar toCal = to.parsedCalendar;
 
         // This should never happen
-        if (fromCal.get(Calendar.ERA) != fromCal.get(Calendar.ERA))
+        if (fromCal.get(Calendar.ERA) != toCal.get(Calendar.ERA))
         {
             throw new IllegalArgumentException("Different ERAs are not allowed. From:" + from + " To:" + to);
         }

File: core/src/main/java/com/graphhopper/reader/OSMTagParser.java
Patch:
@@ -28,8 +28,8 @@
  */
 public class OSMTagParser
 {
-    // Calendar cal = Calendar.getInstance();cal.set(2015, 11, 1); cal.getTimeInMillis(), see #588
-    private final static Date STATIC_DATE = new Date(1448924400000L);
+    // use a day somewhere within July 1970 which then makes two identical long months ala 31 days, see #588
+    private final static Date STATIC_DATE = new Date((31 * 6) * 24 * 3600 * 1000);
 
     /**
      * Parser according to http://wiki.openstreetmap.org/wiki/Key:duration The value consists of a

File: core/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -324,9 +324,6 @@ public boolean equals( Object obj )
             return false;
 
         PointList other = (PointList) obj;
-        if (other.isEmpty() && other.isEmpty())
-            return true;
-
         if (this.getSize() != other.getSize() || this.is3D() != other.is3D())
             return false;
 

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -246,7 +246,7 @@ public long handleWayTags( OSMWay way, long allowed, long relationFlags )
         {
             // get assumed speed from highway type
             double speed = getSpeed(way);
-            speed = applyMaxSpeed(way, speed, true);
+            speed = applyMaxSpeed(way, speed);
 
             // limit speed to max 30 km/h if bad surface
             if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -208,7 +208,7 @@ public long handleWayTags( OSMWay way, long allowed, long priorityFromRelation )
         {
             // get assumed speed from highway type
             double speed = getSpeed(way);
-            speed = applyMaxSpeed(way, speed, true);
+            speed = applyMaxSpeed(way, speed);
 
             double maxMCSpeed = parseSpeed(way.getTag("maxspeed:motorcycle"));
             if (maxMCSpeed > 0 && maxMCSpeed < speed)

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -154,9 +154,9 @@ public int getVersion()
     }
 
     @Override
-    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    void collect( OSMWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap )
     {
-        super.collect(way, weightToPrioMap);
+        super.collect(way, wayTypeSpeed, weightToPrioMap);
 
         String highway = way.getTag("highway");
         if ("track".equals(highway))

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -142,9 +142,9 @@ public int getVersion()
     }
 
     @Override
-    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    void collect( OSMWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap )
     {
-        super.collect(way, weightToPrioMap);
+        super.collect(way, wayTypeSpeed, weightToPrioMap);
 
         String highway = way.getTag("highway");
         if ("service".equals(highway))

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -56,7 +56,7 @@ protected void assertPriority( int expectedPrio, OSMWay way )
 
     protected void assertPriority( int expectedPrio, OSMWay way, long relationFlags )
     {
-        assertEquals(expectedPrio, encoder.handlePriority(way, (int) encoder.relationCodeEncoder.getValue(relationFlags)));
+        assertEquals(expectedPrio, encoder.handlePriority(way, 18, (int) encoder.relationCodeEncoder.getValue(relationFlags)));
     }
 
     protected double getSpeedFromFlags( OSMWay way )
@@ -373,15 +373,15 @@ public void testReduceToMaxSpeed()
     {
         OSMWay way = new OSMWay(12);
         way.setTag("maxspeed", "90");
-        assertEquals(12, encoder.applyMaxSpeed(way, 12, false), 1e-2);
+        assertEquals(12, encoder.applyMaxSpeed(way, 12), 1e-2);
     }
 
     @Test
     public void testPreferenceForSlowSpeed()
     {
         OSMWay osmWay = new OSMWay(1);
         osmWay.setTag("highway", "tertiary");
-        assertEquals(30, encoder.getSpeed(encoder.setSpeed(0, encoder.applyMaxSpeed(osmWay, 49, false))), 1e-1);
+        assertEquals(30, encoder.getSpeed(encoder.setSpeed(0, encoder.applyMaxSpeed(osmWay, 49))), 1e-1);
         assertPriority(PREFER.getValue(), osmWay);
     }
 

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -172,7 +172,7 @@ public long handleRelationTags( OSMRelation relation, long oldRelFlags )
             }
 
             @Override
-            protected int handlePriority( OSMWay way, int priorityFromRelation )
+            protected int handlePriority( OSMWay way, double wayTypeSpeed, int priorityFromRelation )
             {
                 return priorityFromRelation;
             }

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -246,7 +246,7 @@ public long handleWayTags( OSMWay way, long allowed, long relationFlags )
         {
             // get assumed speed from highway type
             double speed = getSpeed(way);
-            speed = applyMaxSpeed(way, speed, true);
+            speed = applyMaxSpeed(way, speed);
 
             // limit speed to max 30 km/h if bad surface
             if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -208,7 +208,7 @@ public long handleWayTags( OSMWay way, long allowed, long priorityFromRelation )
         {
             // get assumed speed from highway type
             double speed = getSpeed(way);
-            speed = applyMaxSpeed(way, speed, true);
+            speed = applyMaxSpeed(way, speed);
 
             double maxMCSpeed = parseSpeed(way.getTag("maxspeed:motorcycle"));
             if (maxMCSpeed > 0 && maxMCSpeed < speed)

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -154,9 +154,9 @@ public int getVersion()
     }
 
     @Override
-    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    void collect( OSMWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap )
     {
-        super.collect(way, weightToPrioMap);
+        super.collect(way, wayTypeSpeed, weightToPrioMap);
 
         String highway = way.getTag("highway");
         if ("track".equals(highway))

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -142,9 +142,9 @@ public int getVersion()
     }
 
     @Override
-    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    void collect( OSMWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap )
     {
-        super.collect(way, weightToPrioMap);
+        super.collect(way, wayTypeSpeed, weightToPrioMap);
 
         String highway = way.getTag("highway");
         if ("service".equals(highway))

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -56,7 +56,7 @@ protected void assertPriority( int expectedPrio, OSMWay way )
 
     protected void assertPriority( int expectedPrio, OSMWay way, long relationFlags )
     {
-        assertEquals(expectedPrio, encoder.handlePriority(way, (int) encoder.relationCodeEncoder.getValue(relationFlags)));
+        assertEquals(expectedPrio, encoder.handlePriority(way, 18, (int) encoder.relationCodeEncoder.getValue(relationFlags)));
     }
 
     protected double getSpeedFromFlags( OSMWay way )
@@ -373,15 +373,15 @@ public void testReduceToMaxSpeed()
     {
         OSMWay way = new OSMWay(12);
         way.setTag("maxspeed", "90");
-        assertEquals(12, encoder.applyMaxSpeed(way, 12, false), 1e-2);
+        assertEquals(12, encoder.applyMaxSpeed(way, 12), 1e-2);
     }
 
     @Test
     public void testPreferenceForSlowSpeed()
     {
         OSMWay osmWay = new OSMWay(1);
         osmWay.setTag("highway", "tertiary");
-        assertEquals(30, encoder.getSpeed(encoder.setSpeed(0, encoder.applyMaxSpeed(osmWay, 49, false))), 1e-1);
+        assertEquals(30, encoder.getSpeed(encoder.setSpeed(0, encoder.applyMaxSpeed(osmWay, 49))), 1e-1);
         assertPriority(PREFER.getValue(), osmWay);
     }
 

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -172,7 +172,7 @@ public long handleRelationTags( OSMRelation relation, long oldRelFlags )
             }
 
             @Override
-            protected int handlePriority( OSMWay way, int priorityFromRelation )
+            protected int handlePriority( OSMWay way, double wayTypeSpeed, int priorityFromRelation )
             {
                 return priorityFromRelation;
             }

File: matching-core/src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -230,7 +230,7 @@ public void testAvoidOffRoadUTurns() {
     @Test
     public void testCheckOrRepair() {
         GraphHopperStorage graph = hopper.getGraphHopperStorage();
-        MapMatching mm = new MapMatching(graph, null, null);
+        MapMatching mm = new MapMatching(graph, null, graph.getEncodingManager().getEncoder("car"));
         List<EdgeMatch> list = new ArrayList<EdgeMatch>();
 
         // System.out.println(GHUtility.getNeighbors(graph.createEdgeExplorer().setBaseNode(24594)));
@@ -265,7 +265,7 @@ public void testCheckOrRepair() {
     @Test
     public void testRepairUTurn() {
         GraphHopperStorage graph = hopper.getGraphHopperStorage();
-        MapMatching mm = new MapMatching(graph, null, null);
+        MapMatching mm = new MapMatching(graph, null, graph.getEncodingManager().getEncoder("car"));
         List<EdgeMatch> list = new ArrayList<EdgeMatch>();
 
         // System.out.println(GHUtility.getNeighbors(graph.createEdgeExplorer().setBaseNode(24594)));

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -195,7 +195,7 @@ protected String createGPXString( HttpServletRequest req, HttpServletResponse re
             return rsp.getInstructions().createGPX(trackName, time, includeElevation, withRoute, withTrack, withWayPoints);
     }
 
-    String errorsToXML( List<Throwable> list )
+    protected String errorsToXML( List<Throwable> list )
     {
         try
         {

File: matching-core/src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -158,7 +158,9 @@ private void start(CmdArgs args) {
             System.out.println("Usage: Do an import once, then do the matching\n"
                     + "./map-matching action=import datasource=your.pbf\n"
                     + "./map-matching action=match gpx=your.gpx\n"
-                    + "./map-matching action=match gpx=.*gpx\n\n");
+                    + "./map-matching action=match gpx=.*gpx\n\n"
+                    + "Or start in-built matching web service\n"
+                    + "./map-matching action=start-server\n\n");
         }
     }
 

File: matching-web/src/main/java/com/graphhopper/matching/http/MatchServlet.java
Patch:
@@ -31,7 +31,6 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.Translation;
 import com.graphhopper.util.TranslationMap;

File: src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -71,7 +71,7 @@ private void start(CmdArgs args) {
                     (LocationIndexTree) hopper.getLocationIndex(), gpxAccuracy);
             MapMatching mapMatching = new MapMatching(graph, locationIndex, firstEncoder);
             mapMatching.setSeparatedSearchDistance(args.getInt("separatedSearchDistance", 500));
-            mapMatching.setMaxSearchMultiplier(args.getInt("maxSearchMultiplier", 100));
+            mapMatching.setMaxNodesToVisit(args.getInt("maxNodesToVisit", 1000));
             mapMatching.setForceRepair(args.getBool("forceRepair", false));
 
             // do the actual matching, get the GPX entries from a file or via stream

File: core/src/main/java/com/graphhopper/util/PMap.java
Patch:
@@ -77,7 +77,7 @@ public PMap put( String key, Object str )
 
     public PMap remove( String key )
     {
-        map.remove(key);
+        map.remove(key.toLowerCase());
         return this;
     }
 

File: core/src/test/java/com/graphhopper/util/PMapTest.java
Patch:
@@ -35,6 +35,9 @@ public void keyCanHaveAnyCasing()
         assertEquals("valueA", subject.get("foo", ""));
         assertEquals("valueA", subject.get("FOO", ""));
         assertEquals("valueA", subject.get("Foo", ""));
+        
+        subject.remove("FoO");        
+        assertEquals("", subject.get("foo", ""));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/reader/dem/HeightTile.java
Patch:
@@ -142,7 +142,7 @@ protected BufferedImage makeARGB()
         int height = width;
         BufferedImage argbImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
         Graphics g = argbImage.getGraphics();
-        long len = heights.getCapacity() / 2;
+        long len = width * width;
         for (int i = 0; i < len; i++)
         {
             int lonSimilar = i % width;

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -97,7 +97,7 @@ public PrepareContractionHierarchies( Directory dir, GraphHopperStorage ghStorag
         levelFilter = new LevelEdgeFilter(prepareGraph);
 
         prepareWeighting = new PreparationWeighting(weighting);
-        originalEdges = dir.find("original_edges_" + CHGraphImpl.weightingToFileName(weighting));
+        originalEdges = dir.find("original_edges_" + AbstractWeighting.weightingToFileName(weighting));
         originalEdges.create(1000);
     }
 
@@ -1004,6 +1004,6 @@ public String toString()
     @Override
     public String toString()
     {
-        return "PREPARE|CH|dijkstrabi";
+        return "prepare|CH|dijkstrabi";
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/CurvatureWeighting.java
Patch:
@@ -63,8 +63,8 @@ protected double getRoadSpeed( EdgeIteratorState edge, boolean reverse )
     }
 
     @Override
-    public String toString()
+    public String getName()
     {
-        return "CURVATURE|" + flagEncoder;
+        return "curvature";
     }
 }

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -124,7 +124,7 @@ public static void loadProperties( Map<String, String> map, Reader tmpReader ) t
 
                 String field = line.substring(0, index);
                 String value = line.substring(index + 1);
-                map.put(field, value);
+                map.put(field.trim(), value.trim());
             }
         } finally
         {

File: core/src/main/java/com/graphhopper/routing/util/Weighting.java
Patch:
@@ -44,5 +44,5 @@ public interface Weighting
      */
     double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId );
 
-    FlagEncoder getFlagEncoder();        
+    FlagEncoder getFlagEncoder();
 }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -580,7 +580,7 @@ public GraphHopper init( CmdArgs args )
         removeZipped = args.getBool("graph.removeZipped", removeZipped);
         int bytesForFlags = args.getInt("graph.bytesForFlags", 4);
         String flagEncoders = args.get("graph.flagEncoders", "");
-        if (!flagEncoders.isEmpty())
+        if (!flagEncoders.isEmpty())            
             setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
 
         if (args.get("graph.locktype", "native").equals("simple"))

File: web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
Patch:
@@ -178,7 +178,7 @@ public void testGraphHopperWebRealExceptions()
     public void testGPX() throws Exception
     {
         String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx", 200);
-        // For backward compatibility we currently export route and track. But maybe this should be change to export of track only ???
+        // For backward compatibility we currently export route and track.
         assertTrue(str.contains("<gh:distance>115.1</gh:distance>"));
         assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"));
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
@@ -187,7 +187,7 @@ public void testGPX() throws Exception
     @Test
     public void testGPXWithExcludedRouteSelection() throws Exception
     {
-        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&route=false&waypoints=false", 200);
+        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&gpx.route=false&gpx.waypoints=false", 200);
         assertFalse(str.contains("<gh:distance>115.1</gh:distance>"));
         assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"));        
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
@@ -196,7 +196,7 @@ public void testGPXWithExcludedRouteSelection() throws Exception
     @Test
     public void testGPXWithTrackAndWaypointsSelection() throws Exception
     {
-        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&track=true&route=false&waypoints=true", 200);
+        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&gpx.track=true&gpx.route=false&gpx.waypoints=true", 200);
         assertFalse(str.contains("<gh:distance>115.1</gh:distance>"));
         assertTrue(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"));
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1029,7 +1029,7 @@ protected List<Path> getPaths( GHRequest request, GHResponse rsp )
         List<GHPoint> points = request.getPoints();
         if (points.size() < 2)
         {
-            rsp.addError(new IllegalStateException("At least 2 points has to be specified, but was:" + points.size()));
+            rsp.addError(new IllegalStateException("At least 2 points have to be specified, but was:" + points.size()));
             return Collections.emptyList();
         }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -484,7 +484,7 @@ protected int handlePriority( OSMWay way, int priorityFromRelation )
     }
 
     // Conversion of class value to priority. See http://wiki.openstreetmap.org/wiki/Class:bicycle
-    private PriorityCode convertCallValueToPriority( String tagvalue )
+    private PriorityCode convertClassValueToPriority( String tagvalue )
     {
         int classvalue;
         try
@@ -566,12 +566,12 @@ void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
         if (classBicycleSpecific != null)
         {
             // We assume that humans are better in classifying preferences compared to our algorithm above -> weight = 100
-            weightToPrioMap.put(100d, convertCallValueToPriority(classBicycleSpecific).getValue());
+            weightToPrioMap.put(100d, convertClassValueToPriority(classBicycleSpecific).getValue());
         } else
         {
             String classBicycle = way.getTag("class:bicycle");
             if (classBicycle != null)
-                weightToPrioMap.put(100d, convertCallValueToPriority(classBicycle).getValue());
+                weightToPrioMap.put(100d, convertClassValueToPriority(classBicycle).getValue());
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -484,7 +484,7 @@ protected int handlePriority( OSMWay way, int priorityFromRelation )
     }
 
     // Conversion of class value to priority. See http://wiki.openstreetmap.org/wiki/Class:bicycle
-    private PriorityCode convertCallValueToPriority( String tagvalue )
+    private PriorityCode convertClassValueToPriority( String tagvalue )
     {
         int classvalue;
         try
@@ -566,12 +566,12 @@ void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
         if (classBicycleSpecific != null)
         {
             // We assume that humans are better in classifying preferences compared to our algorithm above -> weight = 100
-            weightToPrioMap.put(100d, convertCallValueToPriority(classBicycleSpecific).getValue());
+            weightToPrioMap.put(100d, convertClassValueToPriority(classBicycleSpecific).getValue());
         } else
         {
             String classBicycle = way.getTag("class:bicycle");
             if (classBicycle != null)
-                weightToPrioMap.put(100d, convertCallValueToPriority(classBicycle).getValue());
+                weightToPrioMap.put(100d, convertClassValueToPriority(classBicycle).getValue());
         }
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -101,7 +101,7 @@ public class GraphHopper implements GraphHopperAPI
     private ElevationProvider eleProvider = ElevationProvider.NOOP;
 
     public GraphHopper()
-    {
+    {       
         setCHPrepareThreads(1);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -76,6 +76,7 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         restrictedValues.add("restricted");
         restrictedValues.add("delivery");
         restrictedValues.add("military");
+        restrictedValues.add("emergency");
 
         intendedValues.add("yes");
         intendedValues.add("permissive");

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -128,7 +128,7 @@ public int defineWayBits( int index, int shift )
         shift += reverseSpeedEncoder.getBits();
 
         priorityWayEncoder = new EncodedValue("PreferWay", shift, 3, 1, 3, 7);
-        shift += reverseSpeedEncoder.getBits();
+        shift += priorityWayEncoder.getBits();
 
         return shift;
     }

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -128,7 +128,7 @@ public int defineWayBits( int index, int shift )
         shift += reverseSpeedEncoder.getBits();
 
         priorityWayEncoder = new EncodedValue("PreferWay", shift, 3, 1, 3, 7);
-        shift += reverseSpeedEncoder.getBits();
+        shift += priorityWayEncoder.getBits();
 
         return shift;
     }

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -352,7 +352,8 @@ public void testRailway()
         way.setTag("route", "shuttle_train");
         way.setTag("motorcar", "yes");
         way.setTag("bicycle", "no");
-        way.setTag("duration", "35");
+        // Provide the duration value in seconds:
+        way.setTag("duration:seconds", Long.toString(35*60));
         way.setTag("estimated_distance", 50000);
         // accept
         assertTrue(encoder.acceptWay(way) > 0);

File: web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
Patch:
@@ -85,6 +85,9 @@ public Map<String, Object> toJSON( GHResponse rsp,
                     InstructionList instructions = rsp.getInstructions();
                     jsonPath.put("instructions", instructions.createJson());
                 }
+
+                jsonPath.put("ascend", rsp.getAscend());
+                jsonPath.put("descend", rsp.getDescend());
             }
             json.put("paths", Collections.singletonList(jsonPath));
         }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -316,7 +316,7 @@ public String getCHWeighting()
     public GraphHopper setCHPrepareThreads( int prepareThreads )
     {
         this.chPrepareThreads = prepareThreads;
-        this.chPreparePool = java.util.concurrent.Executors.newSingleThreadExecutor();
+        this.chPreparePool = java.util.concurrent.Executors.newFixedThreadPool(chPrepareThreads);
         return this;
     }
 

File: core/src/main/java/com/graphhopper/reader/OSMElement.java
Patch:
@@ -127,7 +127,7 @@ public void setTag( String name, Object value )
     }
 
     /**
-     * Chaeck that the object has a given tag with a given value.
+     * Check that the object has a given tag with a given value.
      */
     public boolean hasTag( String key, Object value )
     {

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -352,8 +352,8 @@ void processWay( OSMWay way )
         long relationFlags = getRelFlagsMap().get(way.getId());
 
         // TODO move this after we have created the edge and know the coordinates => encodingManager.applyWayTags
-        // estimate length of the track e.g. for ferry speed calculation
         TLongList osmNodeIds = way.getNodes();
+        // Estimate length of ways containing a route tag e.g. for ferry speed calculation
         if (osmNodeIds.size() > 1)
         {
             int first = getNodeMap().get(osmNodeIds.get(0));
@@ -363,6 +363,7 @@ void processWay( OSMWay way )
             if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon))
             {
                 double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
+                // Add artificial tag for the estamated distance and center
                 way.setTag("estimated_distance", estimatedDist);
                 way.setTag("estimated_center", new GHPoint((firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
             }

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -46,9 +46,6 @@ public class CarFlagEncoder extends AbstractFlagEncoder
      */
     protected final Map<String, Integer> defaultSpeedMap = new HashMap<String, Integer>();
 
-    /**
-     * Should be only instantied via EncodingManager
-     */
     public CarFlagEncoder()
     {
         this(5, 5, 0);

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -367,7 +367,7 @@ void setSegmentSize( int bytes )
         extStorage.setSegmentSize(bytes);
     }
 
-    void freeze()
+    synchronized void freeze()
     {
         if (isFrozen())
             throw new IllegalStateException("base graph already frozen");
@@ -376,7 +376,7 @@ void freeze()
         listener.freeze();
     }
 
-    boolean isFrozen()
+    synchronized boolean isFrozen()
     {
         return frozen;
     }

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -64,7 +64,7 @@ public class CHGraphImpl implements CHGraph, Storable<CHGraph>
 
         this.weighting = w;
         this.baseGraph = baseGraph;
-        final String name = weightingToFileName(w);
+        final String name = CHGraphImpl.weightingToFileName(w);
         this.nodesCH = dir.find("nodes_ch_" + name);
         this.shortcuts = dir.find("shortcuts_" + name);
         this.chEdgeAccess = new EdgeAccess(shortcuts, baseGraph.bitUtil)
@@ -139,7 +139,7 @@ public final Weighting getWeighting()
     /**
      * Replaces all characters which are not numbers, characters or underscores with underscores
      */
-    public String weightingToFileName( Weighting w )
+    public static String weightingToFileName( Weighting w )
     {
         return w.toString().toLowerCase().replaceAll("\\W+", "_");
     }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -335,7 +335,7 @@ public long getCapacity()
      * Avoid that edges and nodes of the base graph are further modified. Necessary as hook for e.g.
      * ch graphs on top to initilize themself
      */
-    public void freeze()
+    public synchronized void freeze()
     {
         if (!baseGraph.isFrozen())
             baseGraph.freeze();

File: core/src/test/java/com/graphhopper/routing/util/AbstractFlagEncoderTest.java
Patch:
@@ -55,7 +55,7 @@ public void testParseDuration()
         assertEquals(0, AbstractFlagEncoder.parseDuration("oh"));
         assertEquals(0, AbstractFlagEncoder.parseDuration(null));
         assertEquals(60 * 20, AbstractFlagEncoder.parseDuration("20:00"));
-        assertEquals(60 * 20, AbstractFlagEncoder.parseDuration("0:20:00"));
-        assertEquals(60 * 24 * 2 + 60 * 20 + 2, AbstractFlagEncoder.parseDuration("02:20:02"));
+        assertEquals(20, AbstractFlagEncoder.parseDuration("0:20:00"));
+        assertEquals(60 * 2 + 20, AbstractFlagEncoder.parseDuration("02:20:02"));
     }
 }

File: core/src/test/java/com/graphhopper/routing/util/AbstractFlagEncoderTest.java
Patch:
@@ -55,7 +55,7 @@ public void testParseDuration()
         assertEquals(0, AbstractFlagEncoder.parseDuration("oh"));
         assertEquals(0, AbstractFlagEncoder.parseDuration(null));
         assertEquals(60 * 20, AbstractFlagEncoder.parseDuration("20:00"));
-        assertEquals(60 * 20, AbstractFlagEncoder.parseDuration("0:20:00"));
-        assertEquals(60 * 24 * 2 + 60 * 20 + 2, AbstractFlagEncoder.parseDuration("02:20:02"));
+        assertEquals(20, AbstractFlagEncoder.parseDuration("0:20:00"));
+        assertEquals(60 * 2 + 20, AbstractFlagEncoder.parseDuration("02:20:02"));
     }
 }

File: src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -363,7 +363,8 @@ public boolean execute(int edge, List<GPXExtension> list) {
 
         if (pathEdgeList.isEmpty()) {
             throw new RuntimeException("Cannot extract path - no edges returned? "
-                    + gpxList.size() + ", " + startQRList + ", " + endQRList);
+                    + " from:" + startQRList + ", to:" + endQRList + ", for input list of size:"
+                    + gpxList.size() + " [" + gpxList.get(0) + " ... " + gpxList.get(gpxList.size() - 1) + "]");
         }
 
         // only in the first run of doWork firstQueryResults.clear() won't clear 'startQRList' too:

File: src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -47,11 +47,11 @@ private void start(CmdArgs args) {
             String vehicle = args.get("vehicle", "car").toLowerCase();
             args.put("graph.flagEncoders", vehicle);
             args.put("osmreader.osm", args.get("datasource", ""));
-            
+
             // standard should be to remove disconnected islands
             args.put("prepare.minNetworkSize", 200);
-            args.put("prepare.minOneWayNetworkSize", 200);            
-            GraphHopper hopper = new GraphHopper().init(args);
+            args.put("prepare.minOneWayNetworkSize", 200);
+            GraphHopper hopper = new GraphHopper().init(args);            
             hopper.setCHEnable(false);
             hopper.importOrLoad();
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -894,7 +894,7 @@ public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder
 
     public Weighting getWeightingForCH( WeightingMap weightingMap, FlagEncoder encoder )
     {
-        String encoderStr = encoder.toString();
+        String encoderStr = encoder.toString().toLowerCase();
         String weightingStr = weightingMap.getWeighting().toLowerCase();
         for (Weighting w : algoFactories.keySet())
         {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1023,6 +1023,7 @@ protected List<Path> getPaths( GHRequest request, GHResponse rsp )
         String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request.getAlgorithm();
         AlgorithmOptions algoOpts = AlgorithmOptions.start().
                 algorithm(algoStr).traversalMode(tMode).flagEncoder(encoder).weighting(weighting).
+                hints(request.getHints()).
                 build();
 
         boolean viaTurnPenalty = request.getHints().getBool("pass_through", false);

File: src/main/java/com/graphhopper/matching/MapMatching.java
Patch:
@@ -59,7 +59,8 @@
  * if not the full but only partial routes are calculated this will also improve
  * accuracy as currently all loops in a GPX trail are automatically removed.
  * <p>
- * @see http://en.wikipedia.org/wiki/Map_matching
+ * See http://en.wikipedia.org/wiki/Map_matching
+ *
  * @author Peter Karich
  */
 public class MapMatching {

File: core/src/main/java/com/graphhopper/routing/util/PriorityCode.java
Patch:
@@ -29,9 +29,9 @@ public enum PriorityCode
     AVOID_AT_ALL_COSTS(1),
     REACH_DEST(2),
     AVOID_IF_POSSIBLE(3),
-    UNCHANGED(5),
-    PREFER(6),
-    VERY_NICE(7),
+    UNCHANGED(4),
+    PREFER(5),
+    VERY_NICE(6),
     BEST(7);
     private final int value;
 

File: core/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -201,8 +201,8 @@ public void testMonacoEnforcedDirection()
         req.getHints().put("heading_penalty", "300");
         GHResponse rsp = hopper.route(req);
 
-        assertEquals(921., rsp.getDistance(), 10.);
-        assertEquals(38, rsp.getPoints().getSize());
+        assertEquals(874., rsp.getDistance(), 10.);
+        assertEquals(33, rsp.getPoints().getSize());
     }
 
     @Test

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.Instruction;
 import com.graphhopper.util.shapes.GHPoint;
@@ -516,7 +517,7 @@ public void testFootOnly()
         // A to E only for foot
         GHResponse res = instance.route(new GHRequest(11.1, 50, 11.2, 52).setVehicle(EncodingManager.FOOT));
         assertFalse(res.hasErrors());
-        assertEquals(3, res.getPoints().getSize());
+        assertEquals(Helper.createPointList(11.1, 50, 10, 51, 11.2, 52, 11.2, 52), res.getPoints());
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/PriorityCode.java
Patch:
@@ -25,6 +25,7 @@
  */
 public enum PriorityCode
 {
+    WORST(0),
     AVOID_AT_ALL_COSTS(1),
     REACH_DEST(2),
     AVOID_IF_POSSIBLE(3),

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -388,10 +388,10 @@ public void testAvoidMotorway()
     @Test
     public void testPriority()
     {
-        long flags = encoder.setLong(0L, PriorityWeighting.KEY, PriorityCode.BEST.getValue());
+        long flags = encoder.priorityWayEncoder.setValue(0, PriorityCode.BEST.getValue());
         assertEquals(1, encoder.getDouble(flags, PriorityWeighting.KEY), 1e-3);
 
-        flags = encoder.setLong(0L, PriorityWeighting.KEY, PriorityCode.AVOID_IF_POSSIBLE.getValue());
+        flags = encoder.priorityWayEncoder.setValue(0, PriorityCode.AVOID_IF_POSSIBLE.getValue());
         assertEquals(3d / 7d, encoder.getDouble(flags, PriorityWeighting.KEY), 1e-3);
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -747,8 +747,8 @@ public boolean load( String graphHopperFolder )
                 ? new TurnCostExtension() : new GraphExtension.NoOpExtension();
         if (chEnabled)
         {
-            initCHAlgoFactories();
-            ghStorage = new GraphHopperStorage(algoFactories.keySet(), dir, encodingManager, hasElevation(), ext);
+            initCHAlgoFactories();            
+            ghStorage = new GraphHopperStorage(new ArrayList<Weighting>(algoFactories.keySet()), dir, encodingManager, hasElevation(), ext);
         } else
             ghStorage = new GraphHopperStorage(dir, encodingManager, hasElevation(), ext);
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -46,7 +46,7 @@ protected CHGraph getGraph( GraphHopperStorage ghStorage )
     @Override
     public GraphHopperStorage newGHStorage( Directory dir, boolean is3D )
     {
-        return new GraphHopperStorage(Collections.singleton(new FastestWeighting(carEncoder)), dir, encodingManager, is3D, new GraphExtension.NoOpExtension());
+        return new GraphHopperStorage(Arrays.asList(new FastestWeighting(carEncoder)), dir, encodingManager, is3D, new GraphExtension.NoOpExtension());
     }
 
     @Test

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeCHTest.java
Patch:
@@ -30,6 +30,7 @@
 import gnu.trove.set.hash.TIntHashSet;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.Comparator;
 
@@ -62,7 +63,7 @@ public LocationIndexTree createIndexNoPrepare( Graph g, int resolution )
     @Override
     GraphHopperStorage createGHStorage( Directory dir, EncodingManager encodingManager, boolean is3D )
     {
-        return new GraphHopperStorage(Collections.singleton(new FastestWeighting(encodingManager.getEncoder("car"))), dir, encodingManager, is3D, new GraphExtension.NoOpExtension()).
+        return new GraphHopperStorage(Arrays.asList(new FastestWeighting(encodingManager.getEncoder("car"))), dir, encodingManager, is3D, new GraphExtension.NoOpExtension()).
                 create(100);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -115,6 +115,7 @@ protected AbstractFlagEncoder( int speedBits, double speedFactor, int maxTurnCos
 
         acceptedRailways.add("tram");
         acceptedRailways.add("abandoned");
+        acceptedRailways.add("abandoned_tram");        
         acceptedRailways.add("disused");
 
         // http://wiki.openstreetmap.org/wiki/Demolished_Railway

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * GraphHopper request wrapper to simplify requesting GraphHopper.
- * <p/>
+ * <p>
  *
  * @author Peter Karich
  * @author ratrun

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Wrapper to simplify output of GraphHopper.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHResponse
@@ -113,7 +113,7 @@ public GHResponse setDistance( double distance )
     /**
      * This method returns the distance of the path. Always prefer this method over
      * getPoints().calcDistance
-     * <p/>
+     * <p>
      * @return distance in meter
      */
     public double getDistance()

File: core/src/main/java/com/graphhopper/GraphHopperAPI.java
Patch:
@@ -19,22 +19,22 @@
 
 /**
  * Wrapper of the graphhopper online or offline API. Provides read only access.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface GraphHopperAPI
 {
     /**
      * Connects to the specified service (graphhopper URL) or loads a graph from the graphhopper
      * folder.
-     * <p/>
+     * <p>
      * @return true if successfully connected or loaded
      */
     boolean load( String urlOrFile );
 
     /**
      * Calculates the path from specified request visiting the specified locations.
-     * <p/>
+     * <p>
      * @return the response with the route and possible errors
      */
     GHResponse route( GHRequest request );

File: core/src/main/java/com/graphhopper/coll/BigLongIntMap.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Segmented HashMap to make it possible to store more than Integer.MAX values.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class BigLongIntMap implements LongIntMap

File: core/src/main/java/com/graphhopper/coll/CompressedArray.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Stores the entries in compressed segments. The methods de(compress) are taken from lucene
  * CompressionTools. Before accessing the stored values be sure you called flush.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class CompressedArray

File: core/src/main/java/com/graphhopper/coll/GHBitSet.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Wrapper interface of an integer container for different implementations like OpenBitset, BitSet,
  * ...
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface GHBitSet
@@ -35,7 +35,7 @@ public interface GHBitSet
 
     /**
      * Searches for a greater or equal entry and returns it.
-     * <p/>
+     * <p>
      * @return -1 if nothing found
      */
     int next( int index );

File: core/src/main/java/com/graphhopper/coll/GHLongIntBTree.java
Patch:
@@ -27,7 +27,7 @@
 /**
  * An in-memory simple B-Tree. Later we'll use DataAccess to allow on-disc storage for very large
  * data sets. Delete not supported.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHLongIntBTree implements LongIntMap

File: core/src/main/java/com/graphhopper/coll/GHSortedCollection.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * A priority queue implemented by a treemap to allow fast key update. Or should we use a standard
  * b-tree?
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHSortedCollection

File: core/src/main/java/com/graphhopper/coll/GHTBitSet.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Implements the bitset interface via a trove THashSet. More efficient for a few entries.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHTBitSet implements GHBitSet

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A priority queue implemented by a TreeMap. As the tree map does not allow duplicated we compose
  * the key via priority | nodeId.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHTreeMapComposed

File: core/src/main/java/com/graphhopper/coll/MapEntry.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Simple impl of Map.Entry. So that we can have ordered maps.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class MapEntry<K, V> implements Map.Entry<K, V>, Serializable

File: core/src/main/java/com/graphhopper/coll/OSMIDMap.java
Patch:
@@ -24,8 +24,8 @@
 
 /**
  * This is a special purpose map for writing increasing OSM IDs with consecutive values. It stores
- * long->int in a memory friendly way and but does NOT provide O(1) access.
- * <p/>
+ * a map from long to int in a memory friendly way and but does NOT provide O(1) access.
+ * <p>
  * @author Peter Karich
  */
 public class OSMIDMap implements LongIntMap

File: core/src/main/java/com/graphhopper/coll/OSMIDSegmentedMap.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * This is a special purpose map for writing increasing OSM IDs with consecutive values. It stores
  * the keys in vlong format and values are determined by the resulting index.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class OSMIDSegmentedMap implements LongIntMap

File: core/src/main/java/com/graphhopper/coll/SparseArray.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Copied from Android project: android.util.SparseArray.java
- * <p/>
+ * <p>
  * SparseArrays map integers to Objects. Unlike a normal array of Objects, there can be gaps in the
  * indices. It is intended to be more efficient than using a HashMap to map Integers to Objects.
  */

File: core/src/main/java/com/graphhopper/coll/SparseIntIntArray.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Copied from Android project. android.util.SparseArray.java
- * <p/>
+ * <p>
  * SparseArrays map ints to ints. Unlike a normal array of ints, there can be gaps in the indices.
  */
 public class SparseIntIntArray
@@ -67,7 +67,7 @@ private int[] getKeys()
 
     /**
      * Sets all supplied keys to the given unique value.
-     * <p/>
+     * <p>
      * @param keys Keys to set
      * @param uniqueValue Value to set all supplied keys to
      */

File: core/src/main/java/com/graphhopper/coll/SparseLongLongArray.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Copied from Android project. android.util.LongSparseArray.java
- * <p/>
+ * <p>
  * SparseArrays map longs to longs. Unlike a normal array of longs, there can be gaps in the
  * indices.
  */
@@ -68,7 +68,7 @@ private long[] getKeys()
 
     /**
      * Sets all supplied keys to the given unique value.
-     * <p/>
+     * <p>
      * @param keys Keys to set
      * @param uniqueValue Value to set all supplied keys to
      */

File: core/src/main/java/com/graphhopper/geohash/KeyAlgo.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Defines the mapping between a one dimensional 'number' and a point (lat, lon) which is limited to
  * a defined bounds.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface KeyAlgo

File: core/src/main/java/com/graphhopper/geohash/LinearKeyAlgo.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This class maps lat,lon to a (tile)number unlike SpatialKeyAlgo.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 // A 4*3 precision linear key will look like
@@ -78,7 +78,7 @@ public long encode( GHPoint coord )
 
     /**
      * Take latitude and longitude as input.
-     * <p/>
+     * <p>
      * @return the linear key
      */
     @Override
@@ -94,7 +94,7 @@ public final long encode( double lat, double lon )
 
     /**
      * This method returns latitude and longitude via latLon - calculated from specified linearKey
-     * <p/>
+     * <p>
      * @param linearKey is the input
      */
     @Override

File: core/src/main/java/com/graphhopper/reader/OSMElement.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Base class for all OSM objects
- * <p/>
+ * <p>
  * @author Nop
  * @author Peter
  */

File: core/src/main/java/com/graphhopper/reader/OSMInputFile.java
Patch:
@@ -34,7 +34,7 @@
 
 /**
  * A readable OSM file.
- * <p/>
+ * <p>
  * @author Nop
  */
 public class OSMInputFile implements Sink, Closeable

File: core/src/main/java/com/graphhopper/reader/OSMNode.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Represents an OSM Node
- * <p/>
+ * <p>
  * @author Nop
  */
 public class OSMNode extends OSMElement

File: core/src/main/java/com/graphhopper/reader/OSMRelation.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Represents an OSM Relation
- * <p/>
+ * <p>
  * @author Nop
  */
 public class OSMRelation extends OSMElement

File: core/src/main/java/com/graphhopper/reader/OSMTurnRelation.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  * Helper object which gives node cost entries for a given OSM-relation of type "restriction"
- * <p/>
+ * <p>
  * @author Karl Hübner
  */
 public class OSMTurnRelation
@@ -70,7 +70,7 @@ long getOsmIdTo()
 
     /**
      * Transforms this relation into a collection of turn cost entries
-     * <p/>
+     * <p>
      * @param edgeOutExplorer an edge filter which only allows outgoing edges
      * @param edgeInExplorer an edge filter which only allows incoming edges
      * @return a collection of node cost entries which can be added to the graph later

File: core/src/main/java/com/graphhopper/reader/OSMWay.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Represents an OSM Way
- * <p/>
+ * <p>
  * @author Nop
  */
 public class OSMWay extends OSMElement

File: core/src/main/java/com/graphhopper/reader/PillarInfo.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * This class helps to store lat,lon,ele for every node parsed in OSMReader
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PillarInfo implements PointAccess

File: core/src/main/java/com/graphhopper/reader/PrinctonReader.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Data taken from here http://algs4.cs.princeton.edu/44sp/
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PrinctonReader

File: core/src/main/java/com/graphhopper/reader/dem/CGIARProvider.java
Patch:
@@ -43,14 +43,14 @@
  * Elevation data from CGIAR project http://srtm.csi.cgiar.org/ 'PROCESSED SRTM DATA VERSION 4.1'.
  * Every file covers a region of 5x5 degree. License granted for all people using GraphHopper:
  * http://graphhopper.com/public/license/CGIAR.txt
- * <p/>
+ * <p>
  * Every zip contains readme.txt with the necessary information e.g.:
  * <ol>
  * <li>
  * All GeoTiffs with 6000 x 6000 pixels.
  * </li>
  * </ol>
- * <p/>
+ * <p>
  * @author NopMap
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/reader/dem/HeightTile.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * One rectangle of height data from Shuttle Radar Topography Mission.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class HeightTile

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -33,12 +33,12 @@
 
 /**
  * Elevation data from NASA (SRTM).
- * <p/>
+ * <p>
  * Important information about SRTM: the coordinates of the lower-left corner of tile N40W118 are 40
  * degrees north latitude and 118 degrees west longitude. To be more exact, these coordinates refer
  * to the geometric center of the lower left sample, which in the case of SRTM3 data will be about
  * 90 meters in extent.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class SRTMProvider implements ElevationProvider

File: core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * Converts PBF block data into decoded entities ready to be passed into an Osmosis pipeline. This
  * class is designed to be passed into a pool of worker threads to allow multi-threaded decoding.
- * <p/>
+ * <p>
  * @author Brett Henderson
  */
 public class PbfBlobDecoder implements Runnable
@@ -35,7 +35,7 @@ public class PbfBlobDecoder implements Runnable
 
     /**
      * Creates a new instance.
-     * <p/>
+     * <p>
      * @param blobType The type of blob.
      * @param rawBlob The raw data of the blob.
      * @param listener The listener for receiving decoding results.

File: core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoderListener.java
Patch:
@@ -7,14 +7,14 @@
 
 /**
  * Instances of this interface are used to receive results from PBFBlobDecoder.
- * <p/>
+ * <p>
  * @author Brett Henderson
  */
 public interface PbfBlobDecoderListener
 {
     /**
      * Provides the listener with the list of decoded entities.
-     * <p/>
+     * <p>
      * @param decodedEntities The decoded entities.
      */
     void complete( List<OSMElement> decodedEntities );

File: core/src/main/java/com/graphhopper/reader/pbf/PbfDecoder.java
Patch:
@@ -16,7 +16,7 @@
 /**
  * Decodes all blocks from a PBF stream using worker threads, and passes the results to the
  * downstream sink.
- * <p/>
+ * <p>
  * @author Brett Henderson
  */
 public class PbfDecoder implements Runnable
@@ -31,7 +31,7 @@ public class PbfDecoder implements Runnable
 
     /**
      * Creates a new instance.
-     * <p/>
+     * <p>
      * @param streamSplitter The PBF stream splitter providing the source of blobs to be decoded.
      * @param executorService The executor service managing the thread pool.
      * @param maxPendingBlobs The maximum number of blobs to have in progress at any point in time.

File: core/src/main/java/com/graphhopper/reader/pbf/PbfReader.java
Patch:
@@ -8,7 +8,7 @@
 
 /**
  * An OSM data source reading from a PBF file. The entire contents of the file are read.
- * <p/>
+ * <p>
  * @author Brett Henderson
  */
 public class PbfReader implements Runnable
@@ -19,7 +19,7 @@ public class PbfReader implements Runnable
 
     /**
      * Creates a new instance.
-     * <p/>
+     * <p>
      * @param in The file to read.
      * @param workers The number of worker threads for decoding PBF blocks.
      */

File: core/src/main/java/com/graphhopper/reader/pbf/PbfStreamSplitter.java
Patch:
@@ -13,7 +13,7 @@
 /**
  * Parses a PBF data stream and extracts the raw data of each blob in sequence until the end of the
  * stream is reached.
- * <p/>
+ * <p>
  * @author Brett Henderson
  */
 public class PbfStreamSplitter implements Iterator<PbfRawBlob>
@@ -26,7 +26,7 @@ public class PbfStreamSplitter implements Iterator<PbfRawBlob>
 
     /**
      * Creates a new instance.
-     * <p/>
+     * <p>
      * @param pbfStream The PBF data stream to be parsed.
      */
     public PbfStreamSplitter( DataInputStream pbfStream )

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -36,9 +36,9 @@
 /**
  * This class implements the A* algorithm according to
  * http://en.wikipedia.org/wiki/A*_search_algorithm
- * <p/>
+ * <p>
  * Different distance calculations can be used via setApproximation.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class AStar extends AbstractRoutingAlgorithm

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Common subclass for bidirectional algorithms.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public abstract class AbstractBidirAlgo extends AbstractRoutingAlgorithm

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -98,15 +98,15 @@ protected EdgeEntry createEdgeEntry( int node, double weight )
     /**
      * To be overwritten from extending class. Should we make this available in RoutingAlgorithm
      * interface?
-     * <p/>
+     * <p>
      * @return true if finished.
      */
     protected abstract boolean finished();
 
     /**
      * To be overwritten from extending class. Should we make this available in RoutingAlgorithm
      * interface?
-     * <p/>
+     * <p>
      * @return true if finished.
      */
     protected abstract Path extractPath();

File: core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
Patch:
@@ -30,7 +30,7 @@
  *        weighting(weighting).
  *        build();
  * </pre>
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class AlgorithmOptions

File: core/src/main/java/com/graphhopper/routing/Dijkstra.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * Implements a single source shortest path algorithm
  * http://en.wikipedia.org/wiki/Dijkstra's_algorithm
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class Dijkstra extends AbstractRoutingAlgorithm

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -34,9 +34,9 @@
 
 /**
  * Calculates best path in bidirectional way.
- * <p/>
+ * <p>
  * 'Ref' stands for reference implementation and is using the normal Java-'reference'-way.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DijkstraBidirectionRef extends AbstractBidirAlgo

File: core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
Patch:
@@ -31,7 +31,7 @@
 /**
  * A simple dijkstra tuned to perform one to many queries more efficient than Dijkstra. Old data
  * structures are cached between requests and potentially reused. Useful for CH preparation.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DijkstraOneToMany extends AbstractRoutingAlgorithm

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -33,7 +33,7 @@
  * Stores the nodes for the found path of an algorithm. It additionally needs the edgeIds to make
  * edge determination faster and less complex as there could be several edges (u,v) especially for
  * graphs with shortcuts.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @author Ottavio Campana
  * @author jan soe
@@ -260,7 +260,7 @@ private static interface EdgeVisitor
     /**
      * Iterates over all edges in this path sorted from start to end and calls the visitor callback
      * for every edge.
-     * <p/>
+     * <p>
      * @param visitor callback to handle every edge. The edge is decoupled from the iterator and can
      * be stored.
      */
@@ -332,7 +332,7 @@ public void next( EdgeIteratorState eb, int i )
 
     /**
      * This method calculated a list of points for this path
-     * <p/>
+     * <p>
      * @return this path its geometry
      */
     public PointList calcPoints()

File: core/src/main/java/com/graphhopper/routing/PathBidir.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * This class creates a Path from two Edge's resulting from a BidirectionalDijkstra
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PathBidir extends Path

File: core/src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * This class creates a DijkstraPath from two Edge's resulting from a BidirectionalDijkstra
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PathBidirRef extends Path

File: core/src/main/java/com/graphhopper/routing/PathNative.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * This class creates a Path from a DijkstraOneToMany node
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PathNative extends Path

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -38,7 +38,7 @@
  * A class which is used to query the underlying graph with real GPS points. It does so by
  * introducing virtual nodes and edges. It is lightweight in order to be created every time a new
  * query comes in, which makes the behaviour thread safe.
- * <p/>
+ * <p>
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
Patch:
@@ -21,15 +21,15 @@
 
 /**
  * Calculates the shortest path from the specified node ids. Can be used only once.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 @NotThreadSafe
 public interface RoutingAlgorithm
 {
     /**
      * Calculates the best path between the specified nodes.
-     * <p/>
+     * <p>
      * @return the path. Call the method found() to make sure that the path is valid.
      */
     Path calcPath( int from, int to );

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * A simple factory creating normal algorithms (RoutingAlgorithm) without preparation.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class RoutingAlgorithmFactorySimple implements RoutingAlgorithmFactory

File: core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * Creates an edge state decoupled from a graph where nodes, pointList, etc are kept in memory.
- * <p/>
+ * <p>
  * Note, this class is not suited for public use and can change with minor releases unexpectedly or
  * even gets removed.
  */
@@ -53,7 +53,7 @@ public VirtualEdgeIteratorState( int originalTraversalKey, int edgeId, int baseN
     /**
      * This method returns the original edge via its traversal key. I.e. also the direction is
      * already correctly encoded.
-     * <p/>
+     * <p>
      * @see GHUtility#createEdgeKey(int, int, int, boolean)
      */
     public int getOriginalTraversalKey()

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * Recursivly unpack shortcuts.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see PrepareContractionHierarchies
  */

File: core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * Used in CH preparation and therefor assumed that all edges are of type CHEdgeIteratorState
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see PrepareContractionHierarchies
  */

File: core/src/main/java/com/graphhopper/routing/ch/PrepareEncoder.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * The flags are stored differently for shortcuts: just one weight and the direction flags.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PrepareEncoder
@@ -48,7 +48,7 @@ public static final long getScBwdDir()
     /**
      * Returns true if flags1 can be overwritten in the edge by flags2 without restricting or
      * changing the directions of flags1.
-     * <p/>
+     * <p>
      * @return true if flags2 is enabled in both directions or if both flags are pointing into the
      * same direction.
      */

File: core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
Patch:
@@ -8,7 +8,7 @@
 /**
  * Approximates the distance to the goal node by weighting the beeline distance according to the
  * distance weighting
- * <p/>
+ * <p>
  * @author jansoe
  */
 public class BeelineWeightApproximator implements WeightApproximator

File: core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Stores two speed values into an edge to support avoiding too much incline
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class Bike2WeightFlagEncoder extends BikeFlagEncoder

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * Defines bit layout of bicycles (not motorcycles) for speed, access and relations (network).
- * <p/>
+ * <p>
  * @author Peter Karich
  * @author Nop
  * @author ratrun
@@ -465,7 +465,7 @@ String getWayName( int pavementType, int wayType, Translation tr )
     /**
      * In this method we prefer cycleways or roads with designated bike access and avoid big roads
      * or roads with trams or pedestrian.
-     * <p/>
+     * <p>
      * @return new priority based on priorityFromRelation and on the tags in OSMWay.
      */
     protected int handlePriority( OSMWay way, int priorityFromRelation )

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Specifies the settings for cycletouring/trekking
- * <p/>
+ * <p>
  * @author ratrun
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -31,7 +31,7 @@
 
 /**
  * Defines bit layout for cars. (speed, access, ferries, ...)
- * <p/>
+ * <p>
  * @author Peter Karich
  * @author Nop
  */

File: core/src/main/java/com/graphhopper/routing/util/ConsistentWeightApproximator.java
Patch:
@@ -2,11 +2,11 @@
 
 /**
  * Turns an unidirectional weight Approximation into a bidirectional consistent one.
- * <p/>
+ * <p>
  * Ikeda, T., Hsu, M.-Y., Imai, H., Nishimura, S., Shimoura, H., Hashimoto, T., Tenmoku, K., and
  * Mitoh, K. (1994). A fast algorithm for finding better routes by ai search techniques. In VNIS,
  * pages 291–296.
- * <p/>
+ * <p>
  * @author jansoe
  */
 public class ConsistentWeightApproximator

File: core/src/main/java/com/graphhopper/routing/util/EdgeFilter.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Class used to traverse a graph.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface EdgeFilter

File: core/src/main/java/com/graphhopper/routing/util/EncodedDoubleValue.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Encapsulates a bit-encoded value.
- * <p/>
+ * <p>
  * @author Nop
  */
 public class EncodedDoubleValue extends EncodedValue
@@ -80,7 +80,7 @@ public double getDoubleValue( long flags )
 
     /**
      * Swap the contents controlled by this value encoder with the given value.
-     * <p/>
+     * <p>
      * @return the new flags
      */
     public long swap( long flags, EncodedDoubleValue otherEncoder )

File: core/src/main/java/com/graphhopper/routing/util/EncodedValue.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Encapsulates a bit-encoded value.
- * <p/>
+ * <p>
  * @author Nop
  */
 public class EncodedValue
@@ -35,7 +35,7 @@ public class EncodedValue
 
     /**
      * Define a bit-encoded value
-     * <p/>
+     * <p>
      * @param name Description for debugging
      * @param shift bit index of this value
      * @param bits number of bits reserved
@@ -113,7 +113,7 @@ public long getMaxValue()
 
     /**
      * Swap the contents controlled by this value encoder with the given value.
-     * <p/>
+     * <p>
      * @return the new flags
      */
     public long swap( long flags, EncodedValue otherEncoder )

File: core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Calculates the fastest route with the specified vehicle (VehicleEncoder). Calculates the weight
  * in seconds.
- * <p/>
+ * <p>
  *
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Only certain nodes are accepted and therefor the others are ignored.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class LevelEdgeFilter implements EdgeFilter

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Defines bit layout for motorbikes
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class MotorcycleFlagEncoder extends CarFlagEncoder

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  * Specifies the settings for mountain biking
- * <p/>
+ * <p>
  * @author ratrun
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -35,7 +35,7 @@
  * Removes nodes which are not part of the largest network. Ie. mostly nodes with no edges at all
  * but also small subnetworks which are nearly always bugs in OSM data or indicate otherwise
  * disconnected areas e.g. via barriers - see #86.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PrepareRoutingSubnetworks
@@ -215,7 +215,7 @@ String toString( FlagEncoder encoder, EdgeIterator iter )
      * example, small areas like parking lots are sometimes connected to the whole network through a
      * one-way road. This is clearly an error - but is causes the routing to fail when a point gets
      * connected to this small area. This routine removes all these networks from the graph.
-     * <p/>
+     * <p>
      * @return number of removed edges
      */
     int removeDeadEndUnvisitedNetworks( final PrepEdgeFilter bothFilter )

File: core/src/main/java/com/graphhopper/routing/util/PriorityCode.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Used to store a priority value in the way flags of an edge. Used in combination with
  * PriorityWeighting
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public enum PriorityCode

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Special weighting for (motor)bike
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PriorityWeighting extends FastestWeighting

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * Specifies the settings for racebikeing
- * <p/>
+ * <p>
  * @author ratrun
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/util/ShortestWeighting.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Calculates the shortest route - independent of a vehicle as the calculation is based on the
  * distance only.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class ShortestWeighting implements Weighting

File: core/src/main/java/com/graphhopper/routing/util/TarjansStronglyConnectedComponentsAlgorithm.java
Patch:
@@ -15,8 +15,8 @@
  * runs into stack overflow pretty quickly. Used for finding strongly connected components to detect
  * dead-ends.
  * <p>
- * @see http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm
- * @see http://www.timl.id.au/?p=327 and http://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf
+ * See http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm. See
+ * http://www.timl.id.au/?p=327 and http://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf
  */
 public class TarjansStronglyConnectedComponentsAlgorithm
 {
@@ -122,7 +122,7 @@ private void strongConnect( int firstNode )
                     component.add(node);
                     onStack.clear(node);
                 }
-                component.add(start);                
+                component.add(start);
                 component.trimToSize();
                 onStack.clear(start);
 

File: core/src/main/java/com/graphhopper/routing/util/TraversalMode.java
Patch:
@@ -28,7 +28,7 @@
  * Different options define how precise turn restrictions and costs are taken into account, but
  * still all are without via-way support. BTW: this would not be done at runtime, this would be a
  * pre-processing step to avoid performance penalities.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public enum TraversalMode
@@ -74,7 +74,7 @@ public enum TraversalMode
      * Returns the identifier to access the map of the shortest path tree according to the traversal
      * mode. E.g. returning the adjacent node id in node-based behavior whilst returning the edge id
      * in edge-based behavior
-     * <p/>
+     * <p>
      * @param iterState the current {@link EdgeIteratorState}
      * @param reverse <code>true</code>, if traversal in backward direction. Will be true only for
      * backward searches in bidirectional algorithms.

File: core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Encodes and decodes a turn restriction and turn costs within a integer flag
- * <p/>
+ * <p>
  * @author Karl Hübner
  */
 public interface TurnCostEncoder

File: core/src/main/java/com/graphhopper/routing/util/TurnWeighting.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Provides methods to retrieve turn costs for a specific turn.
- * <p/>
+ * <p>
  * @author Karl Hübner
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/routing/util/WeightApproximator.java
Patch:
@@ -2,7 +2,7 @@
 
 /**
  * Specifies a weight approximation between an node and the goalNode according to the specified weighting.
- * <p/>
+ * <p>
  * @author jansoe
  */
 public interface WeightApproximator

File: core/src/main/java/com/graphhopper/routing/util/Weighting.java
Patch:
@@ -21,14 +21,14 @@
 
 /**
  * Specifies how the best route is calculated. E.g. the fastest or shortest route.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface Weighting
 {
     /**
      * Used only for the heuristical estimation in A
-     * <p/>
+     * <p>
      * @return minimal weight. E.g. if you calculate the fastest way it is distance/maxVelocity
      */
     double getMinWeight( double distance );

File: core/src/main/java/com/graphhopper/routing/util/WeightingMap.java
Patch:
@@ -30,7 +30,7 @@ public WeightingMap()
 
     /**
      * Convenient constructor if only one parameter is provided
-     * <p/>
+     * <p>
      */
     public WeightingMap( String weighting )
     {

File: core/src/main/java/com/graphhopper/search/Geocoding.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Interface to convert from place names to points.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface Geocoding

File: core/src/main/java/com/graphhopper/search/ReverseGeocoding.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Interface to convert from points to place names or node ids.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface ReverseGeocoding

File: core/src/main/java/com/graphhopper/storage/CHGraph.java
Patch:
@@ -26,7 +26,7 @@
  * Extended graph interface which supports Contraction Hierarchies. Ie. storing and retrieving the
  * levels for a node and creating shortcuts, which are additional 'artificial' edges to speedup
  * traversal in certain cases.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface CHGraph extends Graph

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * A Graph implementation necessary for Contraction Hierarchies. This class enables the storage to
  * hold the level of a node and shortcut edges per edge.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class CHGraphImpl implements CHGraph, Storable<CHGraph>
@@ -440,9 +440,9 @@ public boolean canBeOverwritten( long flags )
     }
 
     /**
-     * Disconnects the edges (higher->lower node) via the specified edgeState pointing from lower to
+     * Disconnects the edges (higher to lower node) via the specified edgeState pointing from lower to
      * higher node.
-     * <p/>
+     * <p>
      * @param edgeState the edge from lower to higher
      */
     public void disconnect( CHEdgeExplorer explorer, EdgeIteratorState edgeState )

File: core/src/main/java/com/graphhopper/storage/DAType.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Defines how a DataAccess object is created.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DAType

File: core/src/main/java/com/graphhopper/storage/Directory.java
Patch:
@@ -24,7 +24,7 @@
  * Maintains a collection of DataAccess objects stored at the same location. One GraphStorage per
  * Directory as we need one to maintain one DataAccess object for nodes, edges and location2id
  * index.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface Directory

File: core/src/main/java/com/graphhopper/storage/EdgeAccess.java
Patch:
@@ -205,7 +205,7 @@ final long writeEdge( int edgeId, int nodeThis, int nodeOther, int nextEdge, int
     /**
      * This method disconnects the specified edge from the list of edges of the specified node. It
      * does not release the freed space to be reused.
-     * <p/>
+     * <p>
      * @param edgeToUpdatePointer if it is negative then the nextEdgeId will be saved to refToEdges
      * of nodes
      */

File: core/src/main/java/com/graphhopper/storage/EdgeEntry.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * This class is used to create the shortest-path-tree from linked entities.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class EdgeEntry implements Cloneable, Comparable<EdgeEntry>

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Implements some common methods for the subclasses.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHDirectory implements Directory

File: core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * A helper class for GraphHopperStorage for its node access.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 class GHNodeAccess implements NodeAccess

File: core/src/main/java/com/graphhopper/storage/GraphBuilder.java
Patch:
@@ -24,7 +24,7 @@
 
 /**
  * For now this is just a helper class to quickly create a GraphStorage.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GraphBuilder

File: core/src/main/java/com/graphhopper/storage/Lock.java
Patch:
@@ -20,7 +20,7 @@
 
 /**
  * A write lock. Influenced by Lucene code
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface Lock

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * This is a data structure which uses the operating system to synchronize between disc and memory.
  * Use {@link SynchedDAWrapper} if you intent to use this from multiple threads!
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 @NotThreadSafe
@@ -394,7 +394,7 @@ public int getSegments()
     /**
      * Cleans up MappedByteBuffers. Be sure you bring the segments list in a consistent state
      * afterwards.
-     * <p/>
+     * <p>
      * @param from inclusive
      * @param to exclusive
      */

File: core/src/main/java/com/graphhopper/storage/MMapDirectory.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Manages memory mapped DataAccess objects.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see MMapDataAccess
  */

File: core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Creates a write lock file. Influenced by Lucene code
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class NativeFSLockFactory implements LockFactory

File: core/src/main/java/com/graphhopper/storage/NodeAccess.java
Patch:
@@ -24,7 +24,7 @@
  * This interface specifies how to access properties of the nodes in the graph. Similar to
  * EdgeExplorer as it needs multiple instances for different threads or loops but without the need
  * for an additional iterator.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface NodeAccess extends PointAccess
@@ -38,7 +38,7 @@ public interface NodeAccess extends PointAccess
 
     /**
      * Sets the additional value at the specified node index
-     * <p/>
+     * <p>
      * @throws AssertionError if, and only if, the extendedStorage does not require an additional
      * node field
      */

File: core/src/main/java/com/graphhopper/storage/RAMDataAccess.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * This is an in-memory byte-based data structure with the possibility to be stored on flush().
  * Thread safe.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class RAMDataAccess extends AbstractDataAccess

File: core/src/main/java/com/graphhopper/storage/RAMDirectory.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Manages in-memory DataAccess objects.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see RAMDataAccess
  * @see RAMIntDataAccess

File: core/src/main/java/com/graphhopper/storage/RAMIntDataAccess.java
Patch:
@@ -26,7 +26,7 @@
 /**
  * This is an in-memory data structure based on an integer array. With the possibility to be stored
  * on flush().
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 class RAMIntDataAccess extends AbstractDataAccess

File: core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
Patch:
@@ -23,7 +23,7 @@
 
 /**
  * Creates a write lock file. Influenced by Lucene code
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class SimpleFSLockFactory implements LockFactory

File: core/src/main/java/com/graphhopper/storage/Storable.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Interface for a storage abstraction. Currently is serves just the purpose to ensure the same
  * methods and names through all kind of 'storable' things in graphhopper.
- * <p/>
+ * <p>
  * Then the lifecycle is identical for all such objects:
  * <ol>
  * <li>object creation via new</li>
@@ -33,7 +33,7 @@
  * could require a call to increase memory while usage. E.g. DataAccess.ensureCapacity()</li>
  * <li>Finally do close() which does no flush()</li>
  * </ol>
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface Storable<T> extends Closeable

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Writes an in-memory HashMap into a file on flush.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class StorableProperties implements Storable<StorableProperties>

File: core/src/main/java/com/graphhopper/storage/SynchedDAWrapper.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * A simple wrapper to synchronize every DataAccess object.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 class SynchedDAWrapper implements DataAccess

File: core/src/main/java/com/graphhopper/storage/TurnCostExtension.java
Patch:
@@ -23,7 +23,7 @@
  * Holds turn cost tables for each node. The additional field of a node will be used to point
  * towards the first entry within a node cost table to identify turn restrictions, or later, turn
  * getCosts.
- * <p/>
+ * <p>
  * @author Karl Hübner
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/storage/index/BresenhamLine.java
Patch:
@@ -21,11 +21,11 @@
  * We need the supercover line. The best algorithm is a 'voxel grid traversal algorithm' and
  * described in "A Fast Voxel Traversal Algorithm for Ray Tracing" by John Amanatides and Andrew Woo
  * (1987): http://www.cse.yorku.ca/~amana/research/grid.pdf
- * <p/>
+ * <p>
  * Other methods we used are Bresenham (only integer start and end values) and Xiaolin Wu (anti
  * aliasing). See some discussion here: http://stackoverflow.com/a/3234074/194609 and here
  * http://stackoverflow.com/q/24679963/194609
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class BresenhamLine

File: core/src/main/java/com/graphhopper/storage/index/Location2IDFullIndex.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  * Very slow O(n) LocationIndex but no RAM/disc required.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class Location2IDFullIndex implements LocationIndex

File: core/src/main/java/com/graphhopper/storage/index/Location2IDFullWithEdgesIndex.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Same as full index but calculates distance to all edges too
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class Location2IDFullWithEdgesIndex implements LocationIndex

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -37,11 +37,11 @@
  * This class implements map matching and returns a node index from lat,lon coordinate. This
  * implementation is the a very memory efficient representation for areas with lots of node and
  * edges, but lacks precision. No edge distances are measured.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see LocationIndexTree which is more precise but more complicated and also slightly slower
  * implementation of LocationIndex.
- * <p/>
+ * <p>
  */
 class Location2IDQuadtree implements LocationIndex
 {
@@ -83,7 +83,7 @@ public long getCapacity()
     /**
      * Loads the index from disc if exists. Make sure you are using the identical graph which was
      * used while flusing this index.
-     * <p/>
+     * <p>
      * @return if loading from file was successfully.
      */
     @Override

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -41,11 +41,11 @@
 
 /**
  * This implementation implements an n-tree to get the closest node or edge from GPS coordinates.
- * <p/>
+ * <p>
  * All leafs are at the same depth, otherwise it is quite complicated to calculate the bresenham
  * line for different resolutions, especially if a leaf node could be split into a tree-node and
  * resolution changes.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class LocationIndexTree implements LocationIndex
@@ -629,7 +629,7 @@ final long createReverseKey( long key )
     /**
      * calculate the distance to the nearest tile border for a given lat/lon coordinate in the
      * context of a spatial key tile.
-     * <p/>
+     * <p>
      */
     final double calculateRMin( double lat, double lon )
     {

File: core/src/main/java/com/graphhopper/storage/index/QueryResult.java
Patch:
@@ -31,7 +31,7 @@
  * |
  * T--S----N
  * </pre>
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class QueryResult
@@ -49,7 +49,7 @@ public class QueryResult
      * like TOWER or PILLAR or if it is more "on-edge" (EDGE). The default mechanism is to prefer
      * "on-edge" even if it could be 90°. To prefer "on-node" you could use e.g. GHPoint.equals with
      * a default precision of 1e-6.
-     * <p/>
+     * <p>
      * @see DistanceCalc#validEdgeDistance
      */
     public static enum Position

File: core/src/main/java/com/graphhopper/util/AngleCalc.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * Calculates the angle of a turn, defined by three points. The fast atan2 method is from Jim Shima,
  * 1999, http://www.dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization
- * <p/>
+ * <p>
  * @author Johannes Pelzer
  * @author Peter Karich
  */
@@ -58,7 +58,7 @@ static final double atan2( double y, double x )
 
     /**
      * Return orientation of line relative to east.
-     * <p/>
+     * <p>
      * @return Orientation in interval -pi to +pi where 0 is east
      */
     public double calcOrientation( double lat1, double lon1, double lat2, double lon2 )

File: core/src/main/java/com/graphhopper/util/BitUtilBig.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Conversion between "the memory" (integer/long/float/double/string) to bytes via BIG endianess.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class BitUtilBig extends BitUtil

File: core/src/main/java/com/graphhopper/util/BitUtilLittle.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Conversion between "the memory" (integer/long/float/double/string) to bytes via little endianess.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class BitUtilLittle extends BitUtil

File: core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Implementattion of breadth first search (BFS)
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class BreadthFirstSearch extends XFirstSearch

File: core/src/main/java/com/graphhopper/util/CHEdgeExplorer.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * The edge explorer for CHGraph
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see CHGraph
  */

File: core/src/main/java/com/graphhopper/util/CHEdgeIterator.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Support for CH edges
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see CHGraph
  */

File: core/src/main/java/com/graphhopper/util/CmdArgs.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Stores command line options in a map. The capitalization of the key is ignored.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class CmdArgs extends PMap
@@ -115,7 +115,7 @@ public static CmdArgs read( String[] args )
 
     /**
      * Command line configuration overwrites the ones in the config file.
-     * <p/>
+     * <p>
      * @return a new CmdArgs object if necessary.
      */
     public static CmdArgs readFromConfigAndMerge( CmdArgs args, String configKey, String configSysAttr )

File: core/src/main/java/com/graphhopper/util/DepthFirstSearch.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * Implementation of depth first search (DFS) by LIFO queue
- * <p/>
+ * <p>
  * @author Peter Karich
  * @author Jan Sölter
  */

File: core/src/main/java/com/graphhopper/util/DistanceCalc2D.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Calculates the distance of two points or one point and an edge in euclidean space.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DistanceCalc2D extends DistanceCalcEarth

File: core/src/main/java/com/graphhopper/util/DistanceCalc3D.java
Patch:
@@ -22,7 +22,7 @@
  * geometry mixed with Haversine formula used for the on earth distance. The haversine formula makes
  * not so much sense as it is only important for large distances where then the rather smallish
  * heights would becomes neglectable.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DistanceCalc3D extends DistanceCalcEarth

File: core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
Patch:
@@ -43,7 +43,7 @@ public class DistanceCalcEarth implements DistanceCalc
 
     /**
      * Calculates distance of (from, to) in meter.
-     * <p/>
+     * <p>
      * http://en.wikipedia.org/wiki/Haversine_formula a = sin²(Δlat/2) +
      * cos(lat1).cos(lat2).sin²(Δlong/2) c = 2.atan2(√a, √(1−a)) d = R.c
      */
@@ -120,7 +120,7 @@ public double calcNormalizedEdgeDistance( double r_lat_deg, double r_lon_deg,
 
     /**
      * New edge distance calculation where no validEdgeDistance check would be necessary
-     * <p/>
+     * <p>
      * @return the normalized distance of the query point "r" to the project point "c" onto the line
      * segment a-b
      */

File: core/src/main/java/com/graphhopper/util/DouglasPeucker.java
Patch:
@@ -20,9 +20,9 @@
 /**
  * Simplyfies a list of 2D points which are not too far away.
  * http://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm
- * <p/>
+ * <p>
  * Calling simplify is thread safe.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DouglasPeucker
@@ -58,7 +58,7 @@ public DouglasPeucker setMaxDistance( double dist )
 
     /**
      * This method removes points which are close to the line (defined by maxDist).
-     * <p/>
+     * <p>
      * @return removed nodes
      */
     public int simplify( PointList points )

File: core/src/main/java/com/graphhopper/util/EdgeExplorer.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Class to get an EdgeIterator. Create it via graph.createEdgeExplorer() use one instance per
  * thread.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see EdgeIterator
  * @see EdgeIteratorState
@@ -29,7 +29,7 @@ public interface EdgeExplorer
 {
     /**
      * This method sets the base node for iteration through neighboring edges (EdgeIteratorStates).
-     * <p/>
+     * <p>
      * @return EdgeIterator around the specified baseNode. The resulting iterator can be a new
      * instance or a reused instance returned in a previous call. So be sure you do not use the
      * EdgeExplorer from multiple threads or in a nested loop.

File: core/src/main/java/com/graphhopper/util/EdgeWrapper.java
Patch:
@@ -25,7 +25,7 @@
 /**
  * This class acts as a HashMap (nodes to weights) and is used to implement references from one edge
  * to its parent.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see PathBidir
  */

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -33,13 +33,13 @@
 /**
  * A helper class to avoid cluttering the Graph interface with all the common methods. Most of the
  * methods are useful for unit tests or debugging only.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHUtility
 {
     /**
-     * @throws could throw exception if uncatched problems like index out of bounds etc
+     * This method could throw exception if uncatched problems like index out of bounds etc
      */
     public static List<String> getProblems( Graph g )
     {

File: core/src/main/java/com/graphhopper/util/GPXEntry.java
Patch:
@@ -64,7 +64,7 @@ public void setTime( long time )
 
     /**
      * The time relative to the start time in milli seconds.
-     * <p/>
+     * <p>
      * @deprecated use getTime instead
      */
     public long getMillis()

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * Several utility classes which are compatible with Java6 on Android.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @see Helper7 for none-Android compatible methods.
  */
@@ -357,7 +357,7 @@ public static PointList createPointList3D( double... list )
      * Converts into an integer to be compatible with the still limited DataAccess class (accepts
      * only integer values). But this conversion also reduces memory consumption where the precision
      * loss is accceptable. As +- 180° and +-90° are assumed as maximum values.
-     * <p/>
+     * <p>
      * @return the integer of the specified degree
      */
     public static final int degreeToInt( double deg )
@@ -371,7 +371,7 @@ public static final int degreeToInt( double deg )
 
     /**
      * Converts back the integer value.
-     * <p/>
+     * <p>
      * @return the degree value of the specified integer
      */
     public static final double intToDegree( int storedInt )

File: core/src/main/java/com/graphhopper/util/Helper7.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Put the usage of proprietary "sun" classes and after jdk6 classes into this class. To use Helper
  * class under Android as well.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class Helper7

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -156,7 +156,7 @@ public PointList getPoints()
     /**
      * This method returns a list of gpx entries where the time (in time) is relative to the first
      * which is 0. It does NOT contain the last point which is the first of the next instruction.
-     * <p/>
+     * <p>
      * @return the time offset to add for the next instruction
      */
     long fillGPXList( List<GPXEntry> list, long time,

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -132,7 +132,7 @@ public String toString()
     /**
      * @return This method returns a list of gpx entries where the time (in millis) is relative to
      * the first which is 0.
-     * <p/>
+     * <p>
      */
     public List<GPXEntry> createGPXList()
     {
@@ -162,7 +162,7 @@ public List<GPXEntry> createGPXList()
     /**
      * Creates the standard GPX string out of the points according to the schema found here:
      * https://graphhopper.com/public/schema/gpx-1.1.xsd
-     * <p/>
+     * <p>
      * @return string to be stored as gpx file
      */
     public String createGPX()
@@ -271,7 +271,7 @@ List<List<Double>> createStartPoints()
     /**
      * This method is useful for navigation devices to find the next instruction for the specified
      * coordinate (e.g. the current position).
-     * <p/>
+     * <p>
      * @param maxDistance the maximum acceptable distance to the instruction (in meter)
      * @return the next Instruction or null if too far away.
      */

File: core/src/main/java/com/graphhopper/util/NotThreadSafe.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Marks classes or methods as none thread-safe
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public @interface NotThreadSafe

File: core/src/main/java/com/graphhopper/util/PMap.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * A properties map with convenient accessors
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PMap

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -25,7 +25,7 @@
 
 /**
  * This class merges a list of points into one point recognizing the specified places.
- * <p/>
+ * <p>
  * @author Peter Karich
  * @author ratrun
  */

File: core/src/main/java/com/graphhopper/util/PointAccess.java
Patch:
@@ -42,15 +42,15 @@ public interface PointAccess
     /**
      * This method ensures that the node with the specified index exists and prepares access to it.
      * The index goes from 0 (inclusive) to graph.getNodes() (exclusive)
-     * <p/>
+     * <p>
      * This methods sets the latitude, longitude and elevation to the specified value.
      */
     void setNode( int nodeId, double lat, double lon );
 
     /**
      * This method ensures that the node with the specified index exists and prepares access to it.
      * The index goes from 0 (inclusive) to graph.getNodes() (exclusive)
-     * <p/>
+     * <p>
      * This methods sets the latitude, longitude and elevation to the specified value.
      */
     void setNode( int nodeId, double lat, double lon, double ele );

File: core/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -28,7 +28,7 @@
 
 /**
  * Slim list to store several points (without the need for a point object).
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class PointList implements Iterable<GHPoint3D>, PointAccess

File: core/src/main/java/com/graphhopper/util/SimpleIntDeque.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * push to end, pop from beginning
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class SimpleIntDeque

File: core/src/main/java/com/graphhopper/util/StopWatch.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * Make simple speed measurements possible.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class StopWatch

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * A class which manages the translations in-memory. See here for more information:
  * ./docs/core/translations.md
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class TranslationMap

File: core/src/main/java/com/graphhopper/util/XFirstSearch.java
Patch:
@@ -22,7 +22,7 @@
 
 /**
  * This abstract class defines commonalities for BFS and DFS
- * <p/>
+ * <p>
  * @author Jan Sölter
  */
 public abstract class XFirstSearch

File: core/src/main/java/com/graphhopper/util/shapes/BBox.java
Patch:
@@ -27,10 +27,10 @@
  * A simple bounding box defined as follows: minLon, maxLon followed by minLat which is south(!) and
  * maxLat. Equally to EX_GeographicBoundingBox in the ISO 19115 standard see
  * http://osgeo-org.1560.n6.nabble.com/Boundingbox-issue-for-discussion-td3875533.html
- * <p/>
+ * <p>
  * Nice German overview:
  * http://www.geoinf.uni-jena.de/fileadmin/Geoinformatik/Lehre/Diplomarbeiten/DA_Andres.pdf
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class BBox implements Shape, Cloneable

File: core/src/main/java/com/graphhopper/util/shapes/GHPlace.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * Specifies a place by its coordinates or name
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHPlace extends GHPoint

File: core/src/main/java/com/graphhopper/util/shapes/Shape.java
Patch:
@@ -19,7 +19,7 @@
 
 /**
  * A shape interface to implement circles or rectangles.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public interface Shape
@@ -36,7 +36,7 @@ public interface Shape
 
     /**
      * @return true if the specified shape is fully contained in this shape. Only iff
-     * s1.contains(s2) && && s2.contains(s1) then s1 is equal to s2
+     * <pre> s1.contains(s2) &amp;&amp; s2.contains(s1) </pre> then s1 is equal to s2
      */
     boolean contains( Shape s );
 

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -51,7 +51,7 @@
 
 /**
  * Tests the OSMReader with the normal helper initialized.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class OSMReaderTest

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -47,7 +47,7 @@
 
 /**
  * Try algorithms, indices and graph storages with real data
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class RoutingAlgorithmIT
@@ -694,7 +694,7 @@ public void run()
 
     static List<AlgoHelperEntry> createAlgos( GraphHopperStorage ghStorage,
                                               LocationIndex idx, final FlagEncoder encoder, boolean withCh,
-                                              final TraversalMode tMode, final Weighting weighting, 
+                                              final TraversalMode tMode, final Weighting weighting,
                                               final EncodingManager manager )
     {
         List<AlgoHelperEntry> prepare = new ArrayList<AlgoHelperEntry>();
@@ -713,7 +713,7 @@ static List<AlgoHelperEntry> createAlgos( GraphHopperStorage ghStorage,
             GraphHopperStorage storageCopy = new GraphBuilder(manager).
                     set3D(ghStorage.getNodeAccess().is3D()).setCHGraph(weighting).
                     create();
-            ghStorage.copyTo(storageCopy);            
+            ghStorage.copyTo(storageCopy);
             storageCopy.freeze();
             final CHGraph graphCH = storageCopy.getGraph(CHGraph.class, weighting);
             final PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies(

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * Tests if a graph optimized by contraction hierarchies returns the same results as a none
  * optimized one. Additionally fine grained path unpacking is tested.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class DijkstraBidirectionCHTest extends AbstractRoutingAlgorithmTester

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -37,7 +37,7 @@
 /**
  * Abstract test class to be extended for implementations of the Graph interface. Graphs
  * implementing GraphStorage should extend GraphStorageTest instead.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public abstract class AbstractGraphStorageTester
@@ -283,7 +283,7 @@ public void testGetLocations()
         graph.edge(0, 2, 10, true);
         assertEquals(3, graph.getNodes());
         Helper.close((Closeable) graph);
-        
+
         graph = createGHStorage();
         assertEquals(0, graph.getNodes());
     }

File: tools/src/main/java/com/graphhopper/tools/QueryTorture.java
Patch:
@@ -38,7 +38,7 @@
 
 /**
  * Reads log files and queries the live service
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class QueryTorture

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -41,10 +41,10 @@
 /**
  * A rough graphical user interface for visualizing the OSM graph. Mainly for debugging algorithms
  * and spatial datastructures.
- * <p/>
+ * <p>
  * Use the project at https://github.com/graphhopper/graphhopper-web for a
  * better/faster/userfriendly/... alternative!
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class MiniGraphUI

File: tools/src/test/java/com/graphhopper/bzip2plugin/AppTest.java
Patch:
@@ -12,7 +12,7 @@ public class AppTest
 {
     /**
      * Create the test case
-     * <p/>
+     * <p>
      * @param testName name of the test case
      */
     public AppTest( String testName )

File: web/src/main/java/com/graphhopper/http/GHGZIPHook.java
Patch:
@@ -29,7 +29,7 @@
 
 /**
  * Just to check if response is really gzipped
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GHGZIPHook extends GzipFilter

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -49,7 +49,7 @@
  * Servlet to use GraphHopper in a remote client application like mobile or browser. Note: If type
  * is json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
  * used otherwise. See the full API response format in docs/web/api-doc.md
- * <p/>
+ * <p>
  *
  * @author Peter Karich
  */

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -32,7 +32,7 @@
 
 /**
  * Main wrapper of the GraphHopper Directions API for a simple and efficient usage.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GraphHopperWeb implements GraphHopperAPI

File: web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
Patch:
@@ -25,9 +25,9 @@
 
 /**
  * Replacement of web.xml used only for container deployment. Preferred method is to use GHServer.
- * <p/>
+ * <p>
  * http://code.google.com/p/google-guice/wiki/ServletModule
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class GuiceServletConfig extends GuiceServletContextListener

File: web/src/main/java/com/graphhopper/http/IPFilter.java
Patch:
@@ -11,11 +11,11 @@
 
 /**
  * This IP filter class accepts a list of IPs for blacklisting OR for whitelisting (but not both).
- * <p/>
+ * <p>
  * Additionally to exact match a simple wildcard expression ala 1.2.3* or 1.*.3.4 is allowed.
- * <p/>
+ * <p>
  * The internal ip filter from jetty did not work (NP exceptions)
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class IPFilter implements Filter

File: web/src/main/java/com/graphhopper/http/NominatimGeocoder.java
Patch:
@@ -35,7 +35,7 @@
 
 /**
  * Online request for (reverse) geocoding.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class NominatimGeocoder implements Geocoding, ReverseGeocoding

File: web/src/main/java/com/graphhopper/http/WebHelper.java
Patch:
@@ -27,11 +27,11 @@
 
 /**
  * Code which handles polyline encoding and other web stuff.
- * <p/>
+ * <p>
  * The necessary information for polyline encoding is in this answer:
  * http://stackoverflow.com/a/24510799/194609 with a link to official Java sources as well as to a
  * good explanation.
- * <p/>
+ * <p>
  * @author Peter Karich
  */
 public class WebHelper

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -796,9 +796,7 @@ public Collection<RoutingAlgorithmFactory> getAlgorithmFactories()
 
     public GraphHopper putAlgorithmFactory( Weighting weighting, RoutingAlgorithmFactory algoFactory )
     {
-        RoutingAlgorithmFactory old = this.algoFactories.put(weighting, algoFactory);
-        if (old != null)
-            throw new IllegalStateException("Cannot overwrite old routing factory: " + old);
+        algoFactories.put(weighting, algoFactory);        
         return this;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -46,8 +46,7 @@ public DefaultEdgeFilter( FlagEncoder encoder, boolean in, boolean out )
     @Override
     public final boolean accept( EdgeIteratorState iter )
     {
-        long flags = iter.getFlags();
-        return out && encoder.isForward(flags) || in && encoder.isBackward(flags);
+        return out && iter.isForward(encoder) || in && iter.isBackward(encoder);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -73,7 +73,7 @@ public interface FlagEncoder extends TurnCostEncoder
      * @return created flags
      */
     long setProperties( double speed, boolean forward, boolean backward );
-
+    
     /**
      * Reports wether the edge is available in forward direction for a certain vehicle
      */

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -49,6 +49,6 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         double weight = super.calcWeight(edgeState, reverse, prevOrNextEdgeId);
         if (Double.isInfinite(weight))
             return Double.POSITIVE_INFINITY;
-        return weight / (0.5 + encoder.getDouble(edgeState.getFlags(), KEY));
+        return weight / (0.5 + flagEncoder.getDouble(edgeState.getFlags(), KEY));
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/Weighting.java
Patch:
@@ -43,4 +43,6 @@ public interface Weighting
      * +Infinity. Make sure your method does not return NaN which can e.g. occur for 0/0.
      */
     double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId );
+
+    FlagEncoder getFlagEncoder();
 }

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -95,7 +95,7 @@ public void testInitFromAndTo()
 
         final AtomicReference<AStar.AStarEdge> fromRef = new AtomicReference<AStar.AStarEdge>();
         final AtomicReference<AStar.AStarEdge> toRef = new AtomicReference<AStar.AStarEdge>();
-        AStarBidirection astar = new AStarBidirection(g, carEncoder, new ShortestWeighting(), traversalMode)
+        AStarBidirection astar = new AStarBidirection(g, carEncoder, new ShortestWeighting(carEncoder), traversalMode)
         {
             @Override
             public void initFrom( int from, double weight )

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -166,7 +166,7 @@ public void testUseCache()
     @Test
     public void testDifferentEdgeFilter()
     {
-        GraphHopperStorage g = new GraphBuilder(encodingManager).setCHGraph(true).create();
+        GraphHopperStorage g = new GraphBuilder(encodingManager).setCHGraph(new FastestWeighting(carEncoder)).create();
         g.edge(4, 3, 10, true);
         g.edge(3, 6, 10, true);
 

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -42,7 +42,7 @@ protected BikeCommonFlagEncoder createBikeEncoder()
 
     private Graph initExampleGraph()
     {
-        GraphHopperStorage gs = new GraphHopperStorage(new RAMDirectory(), em, true).create(1000);
+        GraphHopperStorage gs = new GraphHopperStorage(new RAMDirectory(), em, true, new GraphExtension.NoOpExtension()).create(1000);
         NodeAccess na = gs.getNodeAccess();
         // 50--(0.0001)-->49--(0.0004)-->55--(0.0005)-->60
         na.setNode(0, 51.1, 12.001, 50);

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -38,7 +38,7 @@ public class GraphHopperStorageWithTurnCostsTest extends GraphHopperStorageTest
     protected GraphHopperStorage newGHStorage( Directory dir, boolean is3D )
     {
         turnCostStorage = new TurnCostExtension();
-        return new GraphHopperStorage(false, dir, encodingManager, is3D, turnCostStorage);
+        return new GraphHopperStorage(dir, encodingManager, is3D, turnCostStorage);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeCHTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIteratorState;
@@ -61,7 +62,7 @@ public LocationIndexTree createIndexNoPrepare( Graph g, int resolution )
     @Override
     GraphHopperStorage createGHStorage( Directory dir, EncodingManager encodingManager, boolean is3D )
     {
-        return new GraphHopperStorage(true, dir, encodingManager, is3D, new GraphExtension.NoOpExtension()).
+        return new GraphHopperStorage(Collections.singleton(new FastestWeighting(encodingManager.getEncoder("car"))), dir, encodingManager, is3D, new GraphExtension.NoOpExtension()).
                 create(100);
     }
 

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -37,7 +37,7 @@
  */
 public class LocationIndexTreeTest extends AbstractLocationIndexTester
 {
-    protected final EncodingManager encodingManager = new EncodingManager("CAR");
+    protected final EncodingManager encodingManager = new EncodingManager("car");
 
     @Override
     public LocationIndexTree createIndex( Graph g, int resolution )

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -78,9 +78,9 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
     {
         this.graph = hopper.getGraphHopperStorage();
         this.na = graph.getNodeAccess();
-        algoFactory = hopper.getAlgorithmFactory();
         encoder = hopper.getEncodingManager().getEncoder("car");
         weighting = hopper.createWeighting(new WeightingMap("fastest"), encoder);
+        algoFactory = hopper.getAlgorithmFactory(weighting);
         algoOpts = new AlgorithmOptions(AlgorithmOptions.DIJKSTRA_BI, encoder, weighting);
 
         logger.info("locations:" + graph.getNodes() + ", debug:" + debug + ", algoOpts:" + algoOpts);

File: core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
Patch:
@@ -40,7 +40,7 @@ public class FastestWeighting implements Weighting
     private final double maxSpeed;
 
     public FastestWeighting( FlagEncoder encoder, PMap pMap )
-    {
+    {        
         this.flagEncoder = encoder;
         heading_penalty = pMap.getDouble("heading_penalty", DEFAULT_HEADING_PENALTY);
         maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -84,8 +84,7 @@ public void tearDown()
 
     GraphHopperStorage newGraph( String directory, EncodingManager encodingManager, boolean is3D, boolean turnRestrictionsImport )
     {
-        boolean ch = false;
-        return new GraphHopperStorage(ch, new RAMDirectory(directory, false), encodingManager, is3D,
+        return new GraphHopperStorage(new RAMDirectory(directory, false), encodingManager, is3D,
                 turnRestrictionsImport ? new TurnCostExtension() : new GraphExtension.NoOpExtension());
     }
 
@@ -486,7 +485,7 @@ public void testBarriersOnTowerNodes()
     public void testRelation()
     {
         EncodingManager manager = new EncodingManager("bike");
-        GraphHopperStorage ghStorage = new GraphHopperStorage(new RAMDirectory(), manager, false);
+        GraphHopperStorage ghStorage = new GraphHopperStorage(new RAMDirectory(), manager, false, new GraphExtension.NoOpExtension());
         OSMReader reader = new OSMReader(ghStorage).
                 setEncodingManager(manager);
         OSMRelation osmRel = new OSMRelation(1);

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -166,7 +166,7 @@ public void testUseCache()
     @Test
     public void testDifferentEdgeFilter()
     {
-        GraphHopperStorage g = new GraphBuilder(encodingManager).setCHGraph(true).create();
+        GraphHopperStorage g = new GraphBuilder(encodingManager).setCHGraph(new FastestWeighting(carEncoder)).create();
         g.edge(4, 3, 10, true);
         g.edge(3, 6, 10, true);
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -711,11 +711,11 @@ static List<AlgoHelperEntry> createAlgos( GraphHopperStorage ghStorage,
         if (withCh)
         {
             GraphHopperStorage storageCopy = new GraphBuilder(manager).
-                    set3D(ghStorage.getNodeAccess().is3D()).setCHGraph(true).
+                    set3D(ghStorage.getNodeAccess().is3D()).setCHGraph(weighting).
                     create();
             ghStorage.copyTo(storageCopy);            
             storageCopy.freeze();
-            final CHGraph graphCH = storageCopy.getGraph(CHGraph.class);
+            final CHGraph graphCH = storageCopy.getGraph(CHGraph.class, weighting);
             final PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies(
                     new GHDirectory("", DAType.RAM_INT), storageCopy, graphCH, encoder, weighting, tMode);
             prepareCH.doWork();

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -47,7 +47,7 @@ public class PrepareContractionHierarchiesTest
 
     GraphHopperStorage createGHStorage()
     {
-        return new GraphBuilder(encodingManager).setCHGraph(true).create();
+        return new GraphBuilder(encodingManager).setCHGraph(weighting).create();
     }
 
     GraphHopperStorage createExampleGraph()

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -42,7 +42,7 @@ protected BikeCommonFlagEncoder createBikeEncoder()
 
     private Graph initExampleGraph()
     {
-        GraphHopperStorage gs = new GraphHopperStorage(new RAMDirectory(), em, true).create(1000);
+        GraphHopperStorage gs = new GraphHopperStorage(new RAMDirectory(), em, true, new GraphExtension.NoOpExtension()).create(1000);
         NodeAccess na = gs.getNodeAccess();
         // 50--(0.0001)-->49--(0.0004)-->55--(0.0005)-->60
         na.setNode(0, 51.1, 12.001, 50);

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -68,7 +68,7 @@ protected GraphHopperStorage createGHStorage()
 
     protected final GraphHopperStorage newRAMGHStorage()
     {
-        return new GraphHopperStorage(new RAMDirectory(), encodingManager, false);
+        return new GraphHopperStorage(new RAMDirectory(), encodingManager, false, new GraphExtension.NoOpExtension());
     }
 
     @Before
@@ -1032,15 +1032,15 @@ public void test8BytesFlags()
         list.add(new TmpCarFlagEncoder(29, 0.001, 0));
         list.add(new TmpCarFlagEncoder(29, 0.001, 0));
         EncodingManager manager = new EncodingManager(list, 8);
-        graph = new GraphHopperStorage(dir, manager, false).create(defaultSize);
+        graph = new GraphHopperStorage(dir, manager, false, new GraphExtension.NoOpExtension()).create(defaultSize);
 
         EdgeIteratorState edge = graph.edge(0, 1);
         edge.setFlags(Long.MAX_VALUE / 3);
         // System.out.println(BitUtil.LITTLE.toBitString(Long.MAX_VALUE / 3) + "\n" + BitUtil.LITTLE.toBitString(edge.getFlags()));
         assertEquals(Long.MAX_VALUE / 3, edge.getFlags());
         graph.close();
 
-        graph = new GraphHopperStorage(dir, manager, false).create(defaultSize);
+        graph = new GraphHopperStorage(dir, manager, false, new GraphExtension.NoOpExtension()).create(defaultSize);
 
         edge = graph.edge(0, 1);
         edge.setFlags(list.get(0).setProperties(99.123, true, true));

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -38,7 +38,7 @@ public class GraphHopperStorageWithTurnCostsTest extends GraphHopperStorageTest
     protected GraphHopperStorage newGHStorage( Directory dir, boolean is3D )
     {
         turnCostStorage = new TurnCostExtension();
-        return new GraphHopperStorage(false, dir, encodingManager, is3D, turnCostStorage);
+        return new GraphHopperStorage(dir, encodingManager, is3D, turnCostStorage);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeCHTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.storage.index;
 
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIteratorState;
@@ -60,7 +61,7 @@ public LocationIndexTree createIndexNoPrepare( Graph g, int resolution )
     @Override
     GraphHopperStorage createGHStorage( Directory dir, EncodingManager encodingManager, boolean is3D )
     {
-        return new GraphHopperStorage(true, dir, encodingManager, is3D, new GraphExtension.NoOpExtension()).
+        return new GraphHopperStorage(Collections.singleton(new FastestWeighting(encodingManager.getEncoder("car"))), dir, encodingManager, is3D, new GraphExtension.NoOpExtension()).
                 create(100);
     }
 

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -38,8 +38,7 @@
  */
 public class LocationIndexTreeTest extends AbstractLocationIndexTester
 {
-
-    protected final EncodingManager encodingManager = new EncodingManager("CAR");
+    protected final EncodingManager encodingManager = new EncodingManager("car");
 
     @Override
     public LocationIndexTree createIndex( Graph g, int resolution )

File: core/src/test/java/com/graphhopper/util/GHUtilityTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.*;
 
@@ -116,7 +117,7 @@ public void testCopyWithSelfRef()
         Graph g = initUnsorted(createGraph());
         EdgeIteratorState eb = g.edge(0, 0, 11, true);
 
-        CHGraph lg = new GraphBuilder(encodingManager).chGraphCreate();
+        CHGraph lg = new GraphBuilder(encodingManager).chGraphCreate(new FastestWeighting(carEncoder));
         GHUtility.copyTo(g, lg);
 
         assertEquals(g.getAllEdges().getMaxId(), lg.getAllEdges().getMaxId());
@@ -129,7 +130,7 @@ public void testCopy()
         EdgeIteratorState edgeState = g.edge(6, 5, 11, true);
         edgeState.setWayGeometry(Helper.createPointList(12, 10, -1, 3));
 
-        GraphHopperStorage newStore = new GraphBuilder(encodingManager).setCHGraph(true).create();
+        GraphHopperStorage newStore = new GraphBuilder(encodingManager).setCHGraph(new FastestWeighting(carEncoder)).create();
         CHGraph lg = newStore.getGraph(CHGraph.class);
         GHUtility.copyTo(g, lg);
         newStore.freeze();

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -593,8 +593,6 @@ public void testGetPathsDirectionEnforcement2()
     @Test
     public void testGetPathsDirectionEnforcement3()
     {
-        // Test enforce via direction
-
         GraphHopper instance = initSquareGraphInstance(false);
 
         // Start in middle of edge 4-5 

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -29,7 +29,7 @@
 public class PriorityWeighting extends FastestWeighting
 {
     /**
-     * For now used only in BikeCommonFlagEncoder and MotorcycleFlagEncoder
+     * For now used only in BikeCommonFlagEncoder, FootEncoder and MotorcycleFlagEncoder
      */
     public static final int KEY = 101;
 

File: core/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -200,8 +200,8 @@ public void testMonacoEnforcedDirection()
         req.getHints().put("heading_penalty", "300");
         GHResponse rsp = hopper.route(req);
 
-        assertEquals(873., rsp.getDistance(), 10.);
-        assertEquals(33, rsp.getPoints().getSize());
+        assertEquals(921., rsp.getDistance(), 10.);
+        assertEquals(38, rsp.getPoints().getSize());
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -308,7 +308,7 @@ public void testNorthBayreuthFootFastestAnd3D()
         // prefer hiking route 'Teufelsloch Unterwaiz' and 'Rotmain-Wanderweg'        
         list.add(new OneRun(49.974972, 11.515657, 49.991022, 11.512299, 2365, 66));
         // prefer hiking route 'Markgrafenweg Bayreuth Kulmbach'
-        list.add(new OneRun(49.986111, 11.550407, 50.023182, 11.555386, 5165, 133));
+        list.add(new OneRun(49.986111, 11.550407, 50.023182, 11.555386, 6429, 122));
         runAlgo(testCollector, "files/north-bayreuth.osm.gz", "target/north-bayreuth-gh",
                 list, "FOOT", true, "FOOT", "fastest", true);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());

File: core/src/test/java/com/graphhopper/GraphHopperIT.java
Patch:
@@ -200,8 +200,8 @@ public void testMonacoEnforcedDirection()
         req.getHints().put("heading_penalty", "300");
         GHResponse rsp = hopper.route(req);
 
-        assertEquals(873., rsp.getDistance(), 10.);
-        assertEquals(33, rsp.getPoints().getSize());
+        assertEquals(921., rsp.getDistance(), 10.);
+        assertEquals(38, rsp.getPoints().getSize());
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/TarjansStronglyConnectedComponentsAlgorithm.java
Patch:
@@ -45,7 +45,6 @@ public TarjansStronglyConnectedComponentsAlgorithm( GraphHopperStorage graph, fi
      */
     public List<TIntArrayList> findComponents()
     {
-
         int nodes = graph.getNodes();
         for (int start = 0; start < nodes; start++)
         {

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -425,7 +425,7 @@ public void next( EdgeIteratorState edge, int index )
                 double latitude, longitude;
 
                 PointList wayGeo = edge.fetchWayGeometry(3);
-                boolean isRoundabout = encoder.isBool(flags, encoder.K_ROUNDABOUT);
+                boolean isRoundabout = encoder.isBool(flags, FlagEncoder.K_ROUNDABOUT);
 
                 if (wayGeo.getSize() <= 2)
                 {
@@ -499,7 +499,7 @@ public void next( EdgeIteratorState edge, int index )
                         EdgeIterator edgeIter = outEdgeExplorer.setBaseNode(adjNode);
                         while (edgeIter.next())
                         {
-                            if (!encoder.isBool(edgeIter.getFlags(), encoder.K_ROUNDABOUT))
+                            if (!encoder.isBool(edgeIter.getFlags(), FlagEncoder.K_ROUNDABOUT))
                             {
                                 ((RoundaboutInstruction) prevInstruction).increaseExitNumber();
                                 break;

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -29,7 +29,7 @@
 public class PriorityWeighting extends FastestWeighting
 {
     /**
-     * For now used only in BikeCommonFlagEncoder and MotorcycleFlagEncoder
+     * For now used only in BikeCommonFlagEncoder, FootEncoder and MotorcycleFlagEncoder
      */
     public static final int KEY = 101;
 

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -450,8 +450,8 @@ void loadExisting( String dim )
             throw new IllegalStateException("Cannot load nodes. corrupt file or directory? " + dir);
 
         if (!dim.equalsIgnoreCase("" + nodeAccess.getDimension()))
-            throw new IllegalStateException("Configured dimension (" + dim + ") is not equal "
-                    + "to dimension of loaded graph (" + nodeAccess.getDimension() + ")");
+            throw new IllegalStateException("Configured dimension (" + nodeAccess.getDimension() + ") is not equal "
+                    + "to dimension of loaded graph (" + dim + ")");
 
         if (!edges.loadExisting())
             throw new IllegalStateException("Cannot load edges. corrupt file or directory? " + dir);

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -673,8 +673,8 @@ int addShortcuts( int v )
                                 + ", skipEdge1:" + sc.skippedEdge1 + ", skipEdge2:" + sc.skippedEdge2
                                 + ", edge " + iter + ":" + getCoords(iter, prepareGraph)
                                 + ", sc:" + sc
-                                + ", skippedEdge1: " + getCoords(prepareGraph.getEdgeProps(sc.skippedEdge1, sc.from), prepareGraph)
-                                + ", skippedEdge2: " + getCoords(prepareGraph.getEdgeProps(sc.skippedEdge2, sc.to), prepareGraph)
+                                + ", skippedEdge1: " + getCoords(prepareGraph.getEdgeIteratorState(sc.skippedEdge1, sc.from), prepareGraph)
+                                + ", skippedEdge2: " + getCoords(prepareGraph.getEdgeIteratorState(sc.skippedEdge2, sc.to), prepareGraph)
                                 + ", neighbors:" + GHUtility.getNeighbors(iter));
                     }
 

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -800,7 +800,7 @@ protected int nextEdgeId()
     }
 
     @Override
-    public EdgeIteratorState getEdgeProps( int edgeId, int adjNode )
+    public EdgeIteratorState getEdgeIteratorState( int edgeId, int adjNode )
     {
         if (!edgeAccess.isInBounds(edgeId))
             throw new IllegalStateException("edgeId " + edgeId + " out of bounds");

File: core/src/main/java/com/graphhopper/storage/CHGraph.java
Patch:
@@ -50,7 +50,7 @@ public interface CHGraph extends Graph
     CHEdgeIteratorState shortcut( int a, int b );
 
     @Override
-    CHEdgeIteratorState getEdgeProps( int edgeId, int endNode );
+    CHEdgeIteratorState getEdgeIteratorState( int edgeId, int endNode );
 
     @Override
     CHEdgeExplorer createEdgeExplorer();

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -206,7 +206,7 @@ public CHEdgeExplorer createEdgeExplorer( EdgeFilter filter )
     }
 
     @Override
-    public final CHEdgeIteratorState getEdgeProps( int edgeId, int endNode )
+    public final CHEdgeIteratorState getEdgeIteratorState( int edgeId, int endNode )
     {
         if (isShortcut(edgeId))
         {

File: core/src/main/java/com/graphhopper/storage/Graph.java
Patch:
@@ -76,7 +76,7 @@ public interface Graph
      * @return an edge iterator state or potentially null if adjNode does not match
      * @throws IllegalStateException if edgeId is not valid
      */
-    EdgeIteratorState getEdgeProps( int edgeId, int adjNode );
+    EdgeIteratorState getEdgeIteratorState( int edgeId, int adjNode );
 
     /**
      * @return all edges in this graph, where baseNode will be the smaller node.

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -357,9 +357,9 @@ public final EdgeIteratorState edge( int a, int b, double distance, boolean both
     }
 
     @Override
-    public final EdgeIteratorState getEdgeProps( int edgeId, int adjNode )
+    public final EdgeIteratorState getEdgeIteratorState( int edgeId, int adjNode )
     {
-        return baseGraph.getEdgeProps(edgeId, adjNode);
+        return baseGraph.getEdgeIteratorState(edgeId, adjNode);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -330,7 +330,7 @@ public static int getAdjNode( Graph g, int edge, int adjNode )
     {
         if (EdgeIterator.Edge.isValid(edge))
         {
-            EdgeIteratorState iterTo = g.getEdgeProps(edge, adjNode);
+            EdgeIteratorState iterTo = g.getEdgeIteratorState(edge, adjNode);
             return iterTo.getAdjNode();
         }
         return adjNode;

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -216,8 +216,8 @@ public void testGetWeightIfAdvancedEncoder()
         sc1.setFlags(flags);
         sc1.setWeight(100.123);
 
-        assertEquals(100.123, lg.getEdgeProps(sc1.getEdge(), sc1.getAdjNode()).getWeight(), 1e-3);
-        assertEquals(100.123, lg.getEdgeProps(sc1.getEdge(), sc1.getBaseNode()).getWeight(), 1e-3);
+        assertEquals(100.123, lg.getEdgeIteratorState(sc1.getEdge(), sc1.getAdjNode()).getWeight(), 1e-3);
+        assertEquals(100.123, lg.getEdgeIteratorState(sc1.getEdge(), sc1.getBaseNode()).getWeight(), 1e-3);
         assertEquals(100.123, ((CHEdgeIteratorState) GHUtility.getEdge(lg, sc1.getBaseNode(), sc1.getAdjNode())).getWeight(), 1e-3);
         assertEquals(100.123, ((CHEdgeIteratorState) GHUtility.getEdge(lg, sc1.getAdjNode(), sc1.getBaseNode())).getWeight(), 1e-3);
 

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java
Patch:
@@ -97,8 +97,8 @@ public void testSave_and_fileFormat() throws IOException
         assertEquals(12, graph.getNodes());
         checkGraph(graph);
 
-        assertEquals("named street1", graph.getEdgeProps(iter1.getEdge(), iter1.getAdjNode()).getName());
-        assertEquals("named street2", graph.getEdgeProps(iter2.getEdge(), iter2.getAdjNode()).getName());
+        assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName());
+        assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName());
         graph.edge(3, 4, 123, true).setWayGeometry(Helper.createPointList3D(4.4, 5.5, 0, 6.6, 7.7, 0));
         checkGraph(graph);
     }

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -77,8 +77,8 @@ public void testSave_and_fileFormat() throws IOException
         assertEquals(12, graph.getNodes());
         checkGraph(graph);
 
-        assertEquals("named street1", graph.getEdgeProps(iter1.getEdge(), iter1.getAdjNode()).getName());
-        assertEquals("named street2", graph.getEdgeProps(iter2.getEdge(), iter2.getAdjNode()).getName());
+        assertEquals("named street1", graph.getEdgeIteratorState(iter1.getEdge(), iter1.getAdjNode()).getName());
+        assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName());
 
         assertEquals(1337, turnCostStorage.getTurnCostFlags(iter1.getEdge(), 0, iter2.getEdge()));
         assertEquals(666, turnCostStorage.getTurnCostFlags(iter2.getEdge(), 0, iter1.getEdge()));

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -288,7 +288,7 @@ public int doCalc( boolean warmup, int run )
                 {
                     int edgeId = rand.nextInt(maxEdgesId);
                     if (allowedEdges.contains(edgeId))
-                        return graph.getEdgeProps(edgeId, Integer.MIN_VALUE).getEdge();
+                        return graph.getEdgeIteratorState(edgeId, Integer.MIN_VALUE).getEdge();
                 }
             }
         }.setIterations(count).start();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1085,7 +1085,7 @@ protected void cleanUp()
         preparation.doWork();
         int currNodeCount = ghStorage.getNodes();
         int remainingSubnetworks = preparation.findSubnetworks().size();
-        logger.info("edges: " + ghStorage.getAllEdges().getCount() + ", nodes " + currNodeCount
+        logger.info("edges: " + ghStorage.getAllEdges().getMaxId() + ", nodes " + currNodeCount
                 + ", there were " + preparation.getSubNetworks()
                 + " subnetworks. removed them => " + (prevNodeCount - currNodeCount)
                 + " less nodes. Remaining subnetworks:" + remainingSubnetworks);

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -70,7 +70,7 @@ public QueryGraph( Graph graph )
         mainGraph = graph;
         mainNodeAccess = graph.getNodeAccess();
         mainNodes = graph.getNodes();
-        mainEdges = graph.getAllEdges().getCount();
+        mainEdges = graph.getAllEdges().getMaxId();
 
         if (mainGraph.getExtension() instanceof TurnCostExtension)
             wrappedExtension = new QueryGraphTurnExt(this);

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -229,7 +229,7 @@ boolean prepareNodes()
 
     void contractNodes()
     {
-        meanDegree = prepareGraph.getAllEdges().getCount() / prepareGraph.getNodes();
+        meanDegree = prepareGraph.getAllEdges().getMaxId() / prepareGraph.getNodes();
         int level = 1;
         counter = 0;
         int initSize = sortedNodes.getSize();
@@ -716,7 +716,7 @@ String getCoords( EdgeIteratorState e, Graph g )
     PrepareContractionHierarchies initFromGraph()
     {
         ghStorage.freeze();
-        maxEdgesCount = ghStorage.getAllEdges().getCount();
+        maxEdgesCount = ghStorage.getAllEdges().getMaxId();
         vehicleInExplorer = prepareGraph.createEdgeExplorer(new DefaultEdgeFilter(prepareFlagEncoder, true, false));
         vehicleOutExplorer = prepareGraph.createEdgeExplorer(new DefaultEdgeFilter(prepareFlagEncoder, false, true));
         final EdgeFilter allFilter = new DefaultEdgeFilter(prepareFlagEncoder, true, true);
@@ -791,7 +791,7 @@ private void setOrigEdgeCount( int edgeId, int value )
             // ignore setting as every normal edge has original edge count of 1            
             if (value != 1)
                 throw new IllegalStateException("Trying to set original edge count for normal edge to a value = " + value
-                        + ", edge:" + (edgeId + maxEdgesCount) + ", max:" + maxEdgesCount + ", graph.max:" + ghStorage.getAllEdges().getCount());
+                        + ", edge:" + (edgeId + maxEdgesCount) + ", max:" + maxEdgesCount + ", graph.max:" + ghStorage.getAllEdges().getMaxId());
             return;
         }
 

File: core/src/main/java/com/graphhopper/routing/util/AllEdgesIterator.java
Patch:
@@ -25,7 +25,7 @@
 public interface AllEdgesIterator extends EdgeIterator
 {
     /**
-     * @return the number of edges
+     * @return the maximum edgeId in the graph which is roughly the number of edges.
      */
-    int getCount();
+    int getMaxId();
 }

File: core/src/main/java/com/graphhopper/storage/BaseGraph.java
Patch:
@@ -1268,7 +1268,7 @@ private AllEdgeIterator( BaseGraph baseGraph, EdgeAccess edgeAccess )
         }
 
         @Override
-        public int getCount()
+        public int getMaxId()
         {
             return baseGraph.edgeCount;
         }

File: core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
Patch:
@@ -430,9 +430,9 @@ protected final boolean checkRange()
         }
 
         @Override
-        public int getCount()
+        public int getMaxId()
         {
-            return super.getCount() + shortcutCount;
+            return super.getMaxId() + shortcutCount;
         }
 
         @Override

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -130,7 +130,7 @@ public static List<Integer> getEdgeIds( EdgeIterator iter )
 
     public static void printEdgeInfo( final Graph g, FlagEncoder encoder )
     {
-        System.out.println("-- Graph n:" + g.getNodes() + " e:" + g.getAllEdges().getCount() + " ---");
+        System.out.println("-- Graph n:" + g.getNodes() + " e:" + g.getAllEdges().getMaxId() + " ---");
         AllEdgesIterator iter = g.getAllEdges();
         while (iter.next())
         {

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -282,7 +282,7 @@ public void testFootAndCar()
         instance.importOrLoad();
 
         assertEquals(5, instance.getGraphHopperStorage().getNodes());
-        assertEquals(8, instance.getGraphHopperStorage().getAllEdges().getCount());
+        assertEquals(8, instance.getGraphHopperStorage().getAllEdges().getMaxId());
 
         // A to D
         GHResponse rsp = instance.route(new GHRequest(11.1, 50, 11.3, 51).setVehicle(EncodingManager.CAR));
@@ -459,7 +459,7 @@ public void testFootOnly()
         instance.importOrLoad();
 
         assertEquals(2, instance.getGraphHopperStorage().getNodes());
-        assertEquals(2, instance.getGraphHopperStorage().getAllEdges().getCount());
+        assertEquals(2, instance.getGraphHopperStorage().getAllEdges().getMaxId());
 
         // A to E only for foot
         GHResponse res = instance.route(new GHRequest(11.1, 50, 11.2, 52).setVehicle(EncodingManager.FOOT));

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -950,14 +950,14 @@ public void testGetAllEdgesWithDelete()
         graph.edge(2, 3, 1, true);
         AllEdgesIterator iter = graph.getAllEdges();
         assertEquals(4, GHUtility.count(iter));
-        assertEquals(4, iter.getCount());
+        assertEquals(4, iter.getMaxId());
 
         // delete
         graph.markNodeRemoved(1);
         graph.optimize();
         iter = graph.getAllEdges();
         assertEquals(2, GHUtility.count(iter));
-        assertEquals(4, iter.getCount());
+        assertEquals(4, iter.getMaxId());
 
         iter = graph.getAllEdges();
         assertTrue(iter.next());

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageCHTest.java
Patch:
@@ -310,8 +310,8 @@ public void testSave_and_Freeze() throws IOException
 
         chGraph = getGraph(graph);
         assertEquals(10, chGraph.getNodes());
-        assertEquals(2, graph.getAllEdges().getCount());
-        assertEquals(3, chGraph.getAllEdges().getCount());
+        assertEquals(2, graph.getAllEdges().getMaxId());
+        assertEquals(3, chGraph.getAllEdges().getMaxId());
         assertEquals(1, GHUtility.count(chGraph.createEdgeExplorer().setBaseNode(2)));
 
         AllEdgesSkipIterator iter = chGraph.getAllEdges();

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageTest.java
Patch:
@@ -235,7 +235,7 @@ public void testIdentical()
     {
         GraphHopperStorage store = new GraphHopperStorage(new RAMDirectory(), encodingManager, true);
         assertEquals(store.getNodes(), store.getGraph(Graph.class).getNodes());
-        assertEquals(store.getAllEdges().getCount(), store.getGraph(Graph.class).getAllEdges().getCount());
+        assertEquals(store.getAllEdges().getMaxId(), store.getGraph(Graph.class).getAllEdges().getMaxId());
     }
 
     public void testAdditionalEdgeField()

File: core/src/test/java/com/graphhopper/util/GHUtilityTest.java
Patch:
@@ -109,7 +109,7 @@ public void testCopyWithSelfRef()
         CHGraph lg = new GraphBuilder(encodingManager).chGraphCreate();
         GHUtility.copyTo(g, lg);
 
-        assertEquals(g.getAllEdges().getCount(), lg.getAllEdges().getCount());
+        assertEquals(g.getAllEdges().getMaxId(), lg.getAllEdges().getMaxId());
     }
 
     @Test

File: android/app/src/main/java/com/graphhopper/android/MainActivity.java
Patch:
@@ -439,7 +439,7 @@ protected Path saveDoInBackground( Void... v ) throws Exception
             {
                 GraphHopper tmpHopp = new GraphHopper().forMobile();
                 tmpHopp.load(new File(mapsFolder, currentArea).getAbsolutePath());
-                log("found graph " + tmpHopp.getGraph().toString() + ", nodes:" + tmpHopp.getGraph().getNodes());
+                log("found graph " + tmpHopp.getGraphHopperStorage().toString() + ", nodes:" + tmpHopp.getGraphHopperStorage().getNodes());
                 hopper = tmpHopp;
                 return null;
             }

File: src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -51,8 +51,8 @@
  */
 public class MapMatchingTest {
 
-    // enable turn cost in encoder:
-    private static final CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 3);
+    // enable turn restrictions in encoder:
+    private static final CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 1);
     private static final TestGraphHopper hopper = new TestGraphHopper();
 
     @BeforeClass

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -42,7 +42,7 @@ public BikeFlagEncoder( PMap properties )
     {
         this((int) properties.getLong("speedBits", 4),
                 properties.getLong("speedFactor", 2),
-                properties.getBool("turnCosts", false) ? 3 : 0);
+                properties.getBool("turnCosts", false) ? 1 : 0);
         this.properties = properties;
         this.setBlockFords(properties.getBool("blockFords", true));
     }

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -58,7 +58,7 @@ public CarFlagEncoder( PMap properties )
     {
         this((int) properties.getLong("speedBits", 5),
                 properties.getDouble("speedFactor", 5),
-                properties.getBool("turnCosts", false) ? 3 : 0);
+                properties.getBool("turnCosts", false) ? 1 : 0);
         this.properties = properties;
         this.setBlockFords(properties.getBool("blockFords", true));
     }

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -42,7 +42,7 @@ public MotorcycleFlagEncoder( PMap properties )
         this(
                 (int) properties.getLong("speedBits", 5),
                 properties.getDouble("speedFactor", 5),
-                properties.getBool("turnCosts", false) ? 3 : 0
+                properties.getBool("turnCosts", false) ? 1 : 0
         );
         this.properties = properties;
         this.setBlockFords(properties.getBool("blockFords", true));

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -46,7 +46,7 @@ public MountainBikeFlagEncoder( PMap properties )
         this(
                 (int) properties.getLong("speedBits", 4),
                 properties.getDouble("speedFactor", 2),
-                properties.getBool("turnCosts", false) ? 3 : 0
+                properties.getBool("turnCosts", false) ? 1 : 0
         );
         this.properties = properties;
         this.setBlockFords(properties.getBool("blockFords", true));

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -42,7 +42,7 @@ public RacingBikeFlagEncoder( PMap properties )
         this(
                 (int) properties.getLong("speedBits", 4),
                 properties.getDouble("speedFactor", 2),
-                properties.getBool("turnCosts", false) ? 3 : 0
+                properties.getBool("turnCosts", false) ? 1 : 0
         );
         this.properties = properties;
         this.setBlockFords(properties.getBool("blockFords", true));

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -106,8 +106,8 @@ public GraphHopperTest( String osmFile, boolean turnCosts )
 
             if (turnCosts)
             {
-                carEncoder = new CarFlagEncoder(5, 5, 3);
-                bikeEncoder = new BikeFlagEncoder(4, 2, 3);
+                carEncoder = new CarFlagEncoder(5, 5, 1);
+                bikeEncoder = new BikeFlagEncoder(4, 2, 1);
             } else
             {
                 carEncoder = new CarFlagEncoder();

File: core/src/test/java/com/graphhopper/reader/OSMTurnRelationTest.java
Patch:
@@ -43,7 +43,7 @@ public class OSMTurnRelationTest
     @Test
     public void testGetRestrictionAsEntries()
     {
-        CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 3);
+        CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 1);
         final Map<Long, Integer> osmNodeToInternal = new HashMap<Long, Integer>();
         final Map<Integer, Long> internalToOSMEdge = new HashMap<Integer, Long>();
 

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1512,7 +1512,7 @@ protected int loadNodesHeader()
             bounds.maxEle = Helper.intToEle(nodes.getHeader(8 * 4));
         }
 
-        return 7;
+        return 9;
     }
 
     protected int setNodesHeader()
@@ -1530,7 +1530,7 @@ protected int setNodesHeader()
             nodes.setHeader(8 * 4, Helper.eleToInt(bounds.maxEle));
         }
 
-        return 7;
+        return 9;
     }
 
     protected int loadEdgesHeader()

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -273,8 +273,6 @@ final void ensureNodeIndex( int nodeIndex )
         {
             long newBytesCapacity = nodes.getCapacity();
             initNodeRefs(oldNodes * nodeEntryBytes, newBytesCapacity);
-            if (removedNodes != null)
-                getRemovedNodes().ensureCapacity((int) (newBytesCapacity / nodeEntryBytes));
         }
 
     }
@@ -1135,7 +1133,7 @@ Graph _copyTo( GraphHopperStorage clonedG )
     private GHBitSet getRemovedNodes()
     {
         if (removedNodes == null)
-            removedNodes = new GHBitSetImpl((int) (nodes.getCapacity() / 4));
+            removedNodes = new GHBitSetImpl((int) getNodes());
 
         return removedNodes;
     }

File: core/src/test/java/com/graphhopper/coll/AbstractMyBitSetTest.java
Patch:
@@ -89,7 +89,7 @@ public void testEnsureCapacity()
         } catch (Throwable ex)
         {
         }
-        bs.ensureCapacity(16);
+        
         bs.add(8);
         bs.add(9);
         assertFalse(bs.contains(6));

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -494,6 +494,6 @@ public static final double round4( double value )
 
     public static final double round2( double value )
     {
-        return Math.round(value * 100) / 100;
+        return Math.round(value * 100) / 100d;
     }
 }

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -494,6 +494,6 @@ public static final double round4( double value )
 
     public static final double round2( double value )
     {
-        return Math.round(value * 100) / 100;
+        return Math.round(value * 100) / 100d;
     }
 }

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -79,12 +79,13 @@ public void doPostProcessing()
         {
             // re-create index to avoid bug as pickNode in locationIndex.prepare could be wrong while indexing if level is not taken into account and assumed to be 0 for pre-initialized graph            
             StopWatch sw = new StopWatch().start();
-            int edges = getGraphHopperStorage().getAllEdges().getCount();
             setAlgorithmFactory(createPrepare());
             super.prepare();
             setLocationIndex(createLocationIndex(new RAMDirectory()));
             put("prepare.time", sw.stop().getTime());
-            put("prepare.shortcuts", getGraphHopperStorage().getAllEdges().getCount() - edges);
+            int edges = getGraphHopperStorage().getAllEdges().getCount();
+            int edgesAndShortcuts = getGraphHopperStorage().getGraph(CHGraph.class).getAllEdges().getCount();
+            put("prepare.shortcuts", edgesAndShortcuts - edges);
         }
     }
 

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * This is a data structure which uses the operating system to synchronize between disc and memory.
- * Use SynchDAWrapper if you intent to use this from multiple threads!
+ * Use {@link SynchedDAWrapper} if you intent to use this from multiple threads!
  * <p/>
  * @author Peter Karich
  */

File: android/app/src/main/java/com/graphhopper/android/MainActivity.java
Patch:
@@ -249,7 +249,7 @@ private void chooseAreaFromRemote()
             protected List<String> saveDoInBackground( Void... params )
                     throws Exception
             {
-                String[] lines = new AndroidDownloader().downloadAsString(fileListURL).split("\n");
+                String[] lines = new AndroidDownloader().downloadAsString(fileListURL, false).split("\n");
                 List<String> res = new ArrayList<String>();
                 for (String str : lines)
                 {

File: android/app/src/main/java/com/graphhopper/android/MainActivity.java
Patch:
@@ -249,7 +249,7 @@ private void chooseAreaFromRemote()
             protected List<String> saveDoInBackground( Void... params )
                     throws Exception
             {
-                String[] lines = new AndroidDownloader().downloadAsString(fileListURL).split("\n");
+                String[] lines = new AndroidDownloader().downloadAsString(fileListURL, false).split("\n");
                 List<String> res = new ArrayList<String>();
                 for (String str : lines)
                 {

File: android/app/src/main/java/com/graphhopper/android/AndroidDownloader.java
Patch:
@@ -17,12 +17,12 @@
 
 public class AndroidDownloader extends Downloader
 {
-
     public AndroidDownloader()
     {
         super("GraphHopper Android");
     }
 
+    @Override
     public void downloadAndUnzip( String url, String toFolder, final ProgressListener progressListener ) throws IOException
     {
         HttpEntity entity = getEntity(url);
@@ -60,7 +60,7 @@ private HttpEntity getEntity( String url )
     }
 
     @Override
-    public String downloadAsString( String url ) throws IOException
+    public String downloadAsString( String url, boolean readErrorStreamNoException ) throws IOException
     {
         return Helper.isToString(getEntity(url).getContent());
     }

File: tools/src/main/java/com/graphhopper/tools/QueryTorture.java
Patch:
@@ -179,7 +179,7 @@ void execute( int workerNo ) throws InterruptedException
         try
         {
             String url = baseUrl + query.createQueryString();
-            String res = new Downloader("QueryTorture!").setTimeout(timeout).downloadAsString(url);
+            String res = new Downloader("QueryTorture!").setTimeout(timeout).downloadAsString(url, false);
             if (res.contains("errors"))
                 routingErrorCounter.incrementAndGet();
             else

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -128,7 +128,7 @@ public GHResponse route( GHRequest request )
             if (!tmpKey.isEmpty())
                 url += "&key=" + tmpKey;
 
-            String str = downloader.downloadAsString(url);
+            String str = downloader.downloadAsString(url, true);
             JSONObject json = new JSONObject(str);
 
             GHResponse res = new GHResponse();

File: web/src/test/java/com/graphhopper/http/BaseServletTester.java
Patch:
@@ -130,7 +130,7 @@ protected String queryString( String query, int code ) throws Exception
         HttpURLConnection conn = downloader.createConnection(url);
         conn.connect();
         assertEquals(code, conn.getResponseCode());
-        return Helper.isToString(downloader.fetch(conn));
+        return Helper.isToString(downloader.fetch(conn, true));
     }
 
     protected JSONObject query( String query, int code ) throws Exception
@@ -153,6 +153,6 @@ protected JSONObject nearestQuery( String query ) throws Exception
         }
         String url = getTestNearestAPIUrl() + "?" + resQuery;
         Downloader downloader = new Downloader("web integration tester");
-        return new JSONObject(downloader.downloadAsString(url));
+        return new JSONObject(downloader.downloadAsString(url, true));
     }
 }

File: web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.io.IOException;
 import java.io.InputStream;
+import java.net.HttpURLConnection;
 
 import org.junit.Test;
 
@@ -41,7 +42,7 @@ public void testReadEncoded() throws Exception
         Downloader downloader = new Downloader("GraphHopper Test")
         {
             @Override
-            public InputStream fetch( String url ) throws IOException
+            public InputStream fetch( HttpURLConnection conn, boolean readErrorStreamNoException ) throws IOException
             {
                 return getClass().getResourceAsStream("test_encoded.json");
             }

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -731,9 +731,7 @@ public int getValue()
         {
             return value;
         }
-    }
-
-    ;
+    };
 
     protected void setHighwaySpeed( String highway, int speed )
     {

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -313,6 +313,8 @@ public Instruction find( double lat, double lon, double maxDistance )
                         } else
                         {
                             distance = distCalc.calcNormalizedDist(lat, lon, currLat, currLon);
+                            if (pointIndex > 0)
+                                index++;
                         }
 
                         if (distance < foundMinDistance)
@@ -321,7 +323,6 @@ public Instruction find( double lat, double lon, double maxDistance )
                             foundInstruction = index;
                         }
                     }
-
                     prevLat = currLat;
                     prevLon = currLon;
                 }

File: core/src/main/java/com/graphhopper/search/NameIndex.java
Patch:
@@ -56,7 +56,7 @@ public boolean loadExisting()
     {
         if (names.loadExisting())
         {
-            bytePointer = BitUtil.LITTLE.combineIntsToLong(names.getHeader(0), names.getHeader(1));
+            bytePointer = BitUtil.LITTLE.combineIntsToLong(names.getHeader(0), names.getHeader(4));
             return true;
         }
 

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -313,6 +313,8 @@ public Instruction find( double lat, double lon, double maxDistance )
                         } else
                         {
                             distance = distCalc.calcNormalizedDist(lat, lon, currLat, currLon);
+                            if (pointIndex > 0)
+                                index++;
                         }
 
                         if (distance < foundMinDistance)
@@ -321,7 +323,6 @@ public Instruction find( double lat, double lon, double maxDistance )
                             foundInstruction = index;
                         }
                     }
-
                     prevLat = currLat;
                     prevLon = currLon;
                 }

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -313,6 +313,8 @@ public Instruction find( double lat, double lon, double maxDistance )
                         } else
                         {
                             distance = distCalc.calcNormalizedDist(lat, lon, currLat, currLon);
+                            if (pointIndex > 0)
+                                index++;
                         }
 
                         if (distance < foundMinDistance)
@@ -321,7 +323,6 @@ public Instruction find( double lat, double lon, double maxDistance )
                             foundInstruction = index;
                         }
                     }
-
                     prevLat = currLat;
                     prevLon = currLon;
                 }

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -177,7 +177,7 @@ else if (entry.equals(MOTORCYCLE))
     }
 
     private static final String ERR = "Encoders are requesting more than %s bits of %s flags. ";
-    private static final String WAY_ERR = "Decrease the number of vehicles or increase the flags to take long via osmreader.bytesForFlags=8";
+    private static final String WAY_ERR = "Decrease the number of vehicles or increase the flags to take long via graph.bytesForFlags=8";
 
     private void registerEncoder( AbstractFlagEncoder encoder )
     {

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -291,8 +291,8 @@ public long setAccess( long flags, boolean forward, boolean backward )
     @Override
     public long setSpeed( long flags, double speed )
     {
-        if (speed < 0)
-            throw new IllegalArgumentException("Speed cannot be negative: " + speed
+        if (speed < 0 || Double.isNaN(speed))
+            throw new IllegalArgumentException("Speed cannot be negative or NaN: " + speed
                     + ", flags:" + BitUtil.LITTLE.toBitString(flags));
 
         if (speed < speedEncoder.factor / 2)

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -300,6 +300,7 @@ public long setSpeed( long flags, double speed )
 
         if (speed > getMaxSpeed())
             speed = getMaxSpeed();
+
         return speedEncoder.setDoubleValue(flags, speed);
     }
 
@@ -586,7 +587,7 @@ public int defineTurnBits( int index, int shift )
         if (maxTurnCosts == 0)
             return shift;
 
-            // optimization for turn restrictions only
+        // optimization for turn restrictions only
         else if (maxTurnCosts == 1)
         {
             turnRestrictionBit = 1L << shift;

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -192,8 +192,8 @@ public BBox calcRouteBBox( BBox _fallback )
     @Override
     public String toString()
     {
-        String str = "nodes:" + list.getSize() + ": " + list.toString();
-        if (!instructions.isEmpty())
+        String str = "nodes:" + list.getSize() + "; " + list.toString();
+        if (instructions != null && !instructions.isEmpty())
             str += ", " + instructions.toString();
 
         if (hasErrors())

File: web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
Patch:
@@ -59,7 +59,7 @@ public void setUp()
     @Test
     public void testElevation() throws Exception
     {
-        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true");
+        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true", 200);
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         JSONObject path = json.getJSONArray("paths").getJSONObject(0);
@@ -79,7 +79,7 @@ public void testElevation() throws Exception
     public void testNoElevation() throws Exception
     {
         // default is elevation=false
-        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false");
+        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false", 200);
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         JSONObject path = json.getJSONArray("paths").getJSONObject(0);
@@ -90,7 +90,7 @@ public void testNoElevation() throws Exception
         assertTrue("Elevation should not be included!", cson.toString().contains("[7.421392,43.7307]"));
 
         // disable elevation
-        json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false");
+        json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false", 200);
         infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         path = json.getJSONArray("paths").getJSONObject(0);

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -281,10 +281,10 @@ public boolean loadExisting()
             return false;
 
         if (dataAccess.getHeader(0) != MAGIC_INT)
-            throw new IllegalStateException("incorrect location2id index version, expected:" + MAGIC_INT);
+            throw new IllegalStateException("incorrect location index version, expected:" + MAGIC_INT);
 
         if (dataAccess.getHeader(1 * 4) != calcChecksum())
-            throw new IllegalStateException("location2id index was opened with incorrect graph: "
+            throw new IllegalStateException("location index was opened with incorrect graph: "
                     + dataAccess.getHeader(1 * 4) + " vs. " + calcChecksum());
 
         setMinResolutionInMeter(dataAccess.getHeader(2 * 4));
@@ -296,7 +296,7 @@ public boolean loadExisting()
     @Override
     public void flush()
     {
-        dataAccess.setHeader(0, MAGIC_INT);        
+        dataAccess.setHeader(0, MAGIC_INT);
         dataAccess.setHeader(1 * 4, calcChecksum());
         dataAccess.setHeader(2 * 4, minResolutionInMeter);
 

File: core/src/test/java/com/graphhopper/routing/util/AbstractFlagEncoderTest.java
Patch:
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMRelation;
-import com.graphhopper.reader.OSMWay;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -31,7 +29,6 @@ public class AbstractFlagEncoderTest
     @Test
     public void testAcceptsCar()
     {
-
         CarFlagEncoder encoder = new CarFlagEncoder(5, 5, 0);
         assertEquals(40, encoder.parseSpeed("40 km/h"), 1e-3);
         assertEquals(40, encoder.parseSpeed("40km/h"), 1e-3);

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -73,7 +73,7 @@ public MotorcycleFlagEncoder( int speedBits, double speedFactor, int maxTurnCost
         preferSet.add("primary");
         preferSet.add("secondary");
         
-        maxPossibleSpeed = 100;
+        maxPossibleSpeed = 120;
 
         // autobahn
         defaultSpeedMap.put("motorway", 100);

File: core/src/test/java/com/graphhopper/routing/util/EncodedDoubleValueTest.java
Patch:
@@ -53,7 +53,7 @@ public void testMaxValueAndSwap()
         long swappedFlags = instance1.swap(flags, instance2);
         assertEquals(expectedFlags, swappedFlags);
 
-        CarFlagEncoder carEncoder = new CarFlagEncoder(8, 0.5, 0);
+        CarFlagEncoder carEncoder = new CarFlagEncoder(10, 0.5, 0);
         new EncodingManager(carEncoder);
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "motorway_link");
@@ -62,7 +62,7 @@ public void testMaxValueAndSwap()
 
         // double speed = AbstractFlagEncoder.parseSpeed("70 mph");
         flags = carEncoder.reverseFlags(flags);
-        assertEquals(100, carEncoder.getSpeed(flags), 1e-1);
+        assertEquals(101.5, carEncoder.getSpeed(flags), 1e-1);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -159,9 +159,9 @@ protected Path extractPath()
     }
 
     @Override
-    protected AStarEdge createEdgeEntry( int node, double dist )
+    protected AStarEdge createEdgeEntry( int node, double weight )
     {
-        return new AStarEdge(EdgeIterator.NO_EDGE, node, dist, dist);
+        return new AStarEdge(EdgeIterator.NO_EDGE, node, weight, weight);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -90,9 +90,9 @@ protected void checkAlreadyRun()
         alreadyRun = true;
     }
 
-    protected EdgeEntry createEdgeEntry( int node, double dist )
+    protected EdgeEntry createEdgeEntry( int node, double weight )
     {
-        return new EdgeEntry(EdgeIterator.NO_EDGE, node, dist);
+        return new EdgeEntry(EdgeIterator.NO_EDGE, node, weight);
     }
 
     /**

File: core/src/main/java/com/graphhopper/coll/GHLongIntBTree.java
Patch:
@@ -472,6 +472,7 @@ static int binarySearch( long keys[], int start, int len, long key )
         int high = start + len, low = start - 1, guess;
         while (high - low > 1)
         {
+            // use >>> for average or we could get an integer overflow. 
             guess = (high + low) >>> 1;
             long guessedKey = keys[guess];
             if (guessedKey < key)

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -67,7 +67,7 @@ public void insert( int key, int value )
     public int peekValue()
     {
         long key = map.firstEntry().getKey();
-        return (int) (key >>> 32);
+        return (int) (key >> 32);
     }
 
     public int peekKey()

File: core/src/main/java/com/graphhopper/coll/OSMIDMap.java
Patch:
@@ -104,6 +104,7 @@ static long binarySearch( DataAccess da, long start, long len, long key )
         byte[] longBytes = new byte[8];
         while (high - low > 1)
         {
+            // use >>> for average or we could get an integer overflow. 
             guess = (high + low) >>> 1;
             long tmp = guess << 3;
             da.getBytes(tmp, longBytes, 8);

File: core/src/main/java/com/graphhopper/coll/SparseArray.java
Patch:
@@ -373,7 +373,8 @@ private static int binarySearch( int[] a, int start, int len, int key )
         int high = start + len, low = start - 1, guess;
         while (high - low > 1)
         {
-            guess = (high + low) / 2;
+            // use >>> for average or we could get an integer overflow. 
+            guess = (high + low) >>> 1;
 
             if (a[guess] < key)
             {

File: core/src/main/java/com/graphhopper/coll/SparseIntIntArray.java
Patch:
@@ -396,7 +396,8 @@ static int binarySearch( int[] a, int start, int len, int key )
         int high = start + len, low = start - 1, guess;
         while (high - low > 1)
         {
-            guess = (high + low) / 2;
+            // use >>> for average or we could get an integer overflow. 
+            guess = (high + low) >>> 1;
 
             if (a[guess] < key)
             {

File: core/src/main/java/com/graphhopper/coll/SparseLongLongArray.java
Patch:
@@ -400,7 +400,8 @@ static int binarySearch( long[] a, int start, int len, long key )
         int high = start + len, low = start - 1, guess;
         while (high - low > 1)
         {
-            guess = (high + low) / 2;
+            // use >>> for average or we could get an integer overflow. 
+            guess = (high + low) >>> 1;
 
             if (a[guess] < key)
             {

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -580,7 +580,7 @@ public final long getValue( long flags )
             {
                 // find value
                 flags &= mask;
-                flags >>= shift;
+                flags >>>= shift;
                 return flags;
             }
         };

File: core/src/main/java/com/graphhopper/routing/util/EncodedDoubleValue.java
Patch:
@@ -71,7 +71,7 @@ public double getDoubleValue( long flags )
     {
         // find value
         flags &= mask;
-        flags >>= shift;
+        flags >>>= shift;
         return flags * factor;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/EncodedValue.java
Patch:
@@ -92,7 +92,7 @@ public long getValue( long flags )
     {
         // find value
         flags &= mask;
-        flags >>= shift;
+        flags >>>= shift;
         return Math.round(flags * factor);
     }
 

File: core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -417,7 +417,7 @@ final double getWeight( EdgeSkipIterState edge )
         if (!edge.isShortcut())
             throw new IllegalStateException("getWeight is only available for shortcuts");
 
-        double weight = (edge.getFlags() >> 2) / WEIGHT_FACTOR;
+        double weight = (edge.getFlags() >>> 2) / WEIGHT_FACTOR;
         if (weight >= MAX_WEIGHT)
             return Double.POSITIVE_INFINITY;
 

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -299,15 +299,15 @@ void close( boolean forceClean )
     @Override
     public final void setInt( long bytePos, int value )
     {
-        int bufferIndex = (int) (bytePos >>> segmentSizePower);
+        int bufferIndex = (int) (bytePos >> segmentSizePower);
         int index = (int) (bytePos & indexDivisor);
         segments.get(bufferIndex).putInt(index, value);
     }
 
     @Override
     public final int getInt( long bytePos )
     {
-        int bufferIndex = (int) (bytePos >>> segmentSizePower);
+        int bufferIndex = (int) (bytePos >> segmentSizePower);
         int index = (int) (bytePos & indexDivisor);
         return segments.get(bufferIndex).getInt(index);
     }

File: core/src/main/java/com/graphhopper/storage/RAMIntDataAccess.java
Patch:
@@ -266,8 +266,8 @@ public final short getShort( long bytePos )
         if (bytePos % 4 != 0 && bytePos % 4 != 2)
             throw new IllegalMonitorStateException("bytePos of wrong multiple for RAMInt " + bytePos);
 
-        long tmpIndex = bytePos >>> 1;
-        int bufferIndex = (int) (tmpIndex >>> segmentSizeIntsPower);
+        long tmpIndex = bytePos >> 1;
+        int bufferIndex = (int) (tmpIndex >> segmentSizeIntsPower);
         int index = (int) (tmpIndex & indexDivisor);
         if (tmpIndex * 2 == bytePos)
             return (short) segments[bufferIndex][index];

File: core/src/main/java/com/graphhopper/util/BitUtil.java
Patch:
@@ -254,7 +254,7 @@ public String toBitString( long value, int bits )
     public final long reverse( long value, int maxBits )
     {
         long res = 0;
-        for (; maxBits > 0; value >>= 1)
+        for (; maxBits > 0; value >>>= 1)
         {
             res <<= 1;
             res |= value & 1;

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -70,6 +70,7 @@ public BikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         preferHighwayTags.add("unclassified");
 
         absoluteBarriers.add("kissing_gate");
+        setSpecificBicycleClass("touring");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -143,6 +143,7 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
         preferHighwayTags.add("unclassified");
 
         potentialBarriers.add("kissing_gate");
+        setSpecificBicycleClass("mtb");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -129,6 +129,7 @@ public RacingBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCost
         absoluteBarriers.add("kissing_gate");
 
         setAvoidSpeedLimit(81);
+        setSpecificBicycleClass("roadcycling");
 
     }
 

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -159,7 +159,7 @@ public void testBaseGraph()
         // use base graph for solving normal Dijkstra
         Path p1 = new RoutingAlgorithmFactorySimple().createAlgo(g, defaultOpts).calcPath(0, 3);
         assertEquals(Helper.createTList(0, 1, 5, 2, 3), p1.calcNodes());
-        assertEquals(p1.toString(), 402.293, p1.getDistance(), 1e-6);
+        assertEquals(p1.toString(), 402.29, p1.getDistance(), 1e-2);
         assertEquals(p1.toString(), 144823, p1.getTime());
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -81,7 +81,6 @@ protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnC
         // potentialBarriers.add("lift_gate");
         potentialBarriers.add("swing_gate");
 
-        absoluteBarriers.add("kissing_gate");
         absoluteBarriers.add("stile");
         absoluteBarriers.add("turnstile");
 

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -68,6 +68,8 @@ public BikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         preferHighwayTags.add("tertiary_link");
         preferHighwayTags.add("residential");
         preferHighwayTags.add("unclassified");
+
+        absoluteBarriers.add("kissing_gate");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -141,6 +141,8 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
         preferHighwayTags.add("tertiary_link");
         preferHighwayTags.add("residential");
         preferHighwayTags.add("unclassified");
+
+        potentialBarriers.add("kissing_gate");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -125,6 +125,8 @@ public RacingBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCost
         setCyclingNetworkPreference("rcn", PriorityCode.VERY_NICE.getValue());
         setCyclingNetworkPreference("lcn", PriorityCode.UNCHANGED.getValue());
         setCyclingNetworkPreference("mtb", PriorityCode.UNCHANGED.getValue());
+
+        absoluteBarriers.add("kissing_gate");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -81,7 +81,6 @@ protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnC
         // potentialBarriers.add("lift_gate");
         potentialBarriers.add("swing_gate");
 
-        absoluteBarriers.add("kissing_gate");
         absoluteBarriers.add("stile");
         absoluteBarriers.add("turnstile");
 

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -68,6 +68,8 @@ public BikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         preferHighwayTags.add("tertiary_link");
         preferHighwayTags.add("residential");
         preferHighwayTags.add("unclassified");
+
+        absoluteBarriers.add("kissing_gate");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -141,6 +141,8 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
         preferHighwayTags.add("tertiary_link");
         preferHighwayTags.add("residential");
         preferHighwayTags.add("unclassified");
+
+        potentialBarriers.add("kissing_gate");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -125,6 +125,8 @@ public RacingBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCost
         setCyclingNetworkPreference("rcn", PriorityCode.VERY_NICE.getValue());
         setCyclingNetworkPreference("lcn", PriorityCode.UNCHANGED.getValue());
         setCyclingNetworkPreference("mtb", PriorityCode.UNCHANGED.getValue());
+
+        absoluteBarriers.add("kissing_gate");
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -110,7 +110,7 @@ public interface FlagEncoder extends TurnCostEncoder
     long setLong( long flags, int key, long value );
 
     /**
-     * Returns arbitrary long value identified by the specified key. E.g. can be used to return the
+     * Returns arbitrary double value identified by the specified key. E.g. can be used to return the
      * maximum width or height allowed for an edge.
      */
     double getDouble( long flags, int key );

File: core/src/test/java/com/graphhopper/util/HelperTest.java
Patch:
@@ -69,6 +69,7 @@ public void testGetLocale() throws Exception
         assertEquals(Locale.GERMANY, Helper.getLocale("de-DE"));
         assertEquals(Locale.ENGLISH, Helper.getLocale("en"));
         assertEquals(Locale.US, Helper.getLocale("en_US"));
+        assertEquals(Locale.US, Helper.getLocale("en_US.UTF-8"));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -84,8 +84,7 @@ public void testWrongEncoders()
             assertTrue(false);
         } catch (Exception ex)
         {
-            assertEquals("Encoders are requesting more than 32 bits of way flags. Decrease the number of vehicles or increase the flags to take long.",
-                    ex.getMessage());
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Encoders are requesting more than 32 bits of way flags. Decrease the"));
         }
     }
 

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -167,7 +167,7 @@ else if (entry.equals(MOTORCYCLE))
     }
 
     private static final String ERR = "Encoders are requesting more than %s bits of %s flags. ";
-    private static final String WAY_ERR = "Decrease the number of vehicles or increase the flags to take long.";
+    private static final String WAY_ERR = "Decrease the number of vehicles or increase the flags to take long via osmreader.bytesForFlags=8";
 
     private void registerEncoder( AbstractFlagEncoder encoder )
     {

File: web/src/main/java/com/graphhopper/http/GHServletModule.java
Patch:
@@ -64,5 +64,8 @@ protected void configureServlets()
 
         serve("/route*").with(GraphHopperServlet.class);
         bind(GraphHopperServlet.class).in(Singleton.class);
+        
+        serve("/nearest*").with(NearestServlet.class);
+        bind(NearestServlet.class).in(Singleton.class);
     }
 }

File: web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
Patch:
@@ -89,7 +89,7 @@ public void testFailIfElevationRequestedButNotIncluded() throws Exception
     public void testGraphHopperWeb() throws Exception
     {
         GraphHopperAPI hopper = new GraphHopperWeb();
-        assertTrue(hopper.load(getTestAPIUrl()));
+        assertTrue(hopper.load(getTestRouteAPIUrl()));
         GHResponse rsp = hopper.route(new GHRequest(42.554851, 1.536198, 42.510071, 1.548128));
         assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() > 9000);
@@ -116,7 +116,7 @@ public void testGraphHopperWebRealExceptions()
         Throwable ex;
 
         GraphHopperAPI hopper = new GraphHopperWeb();
-        assertTrue(hopper.load(getTestAPIUrl()));
+        assertTrue(hopper.load(getTestRouteAPIUrl()));
 
         // IllegalStateException (Wrong Request)
         rsp = hopper.route(new GHRequest());

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -40,8 +40,6 @@ public abstract class AbstractBidirAlgo extends AbstractRoutingAlgorithm
 
     protected abstract Path createAndInitPath();
 
-    protected abstract boolean isWeightLimitReached();
-
     abstract void checkState( int fromBase, int fromAdj, int toBase, int toAdj );
 
     abstract boolean fillEdgesFrom();
@@ -66,7 +64,7 @@ public Path calcPath( int from, int to )
 
     protected void runAlgo()
     {
-        while (!finished() && !isWeightLimitReached())
+        while (!finished() && !isWeightLimitExceeded())
         {
             if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -63,7 +63,7 @@ public void setWeightLimit( double weight )
     {
         this.weightLimit = weight;
     }
-       
+
     public RoutingAlgorithm setEdgeFilter( EdgeFilter additionalEdgeFilter )
     {
         this.additionalEdgeFilter = additionalEdgeFilter;
@@ -111,6 +111,8 @@ protected EdgeEntry createEdgeEntry( int node, double dist )
      */
     protected abstract Path extractPath();
 
+    protected abstract boolean isWeightLimitExceeded();
+
     protected Path createEmptyPath()
     {
         return new Path(graph, flagEncoder);

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -136,7 +136,7 @@ public void testMoreComplexGraph()
         int old = g.getAllEdges().getCount();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(dir, g, carEncoder, weighting, tMode);
         prepare.doWork();
-        assertEquals(old + 10, g.getAllEdges().getCount());
+        assertEquals(old + 7, g.getAllEdges().getCount());
     }
 
     @Test
@@ -286,7 +286,7 @@ public void testRoundaboutUnpacking()
         int old = g.getAllEdges().getCount();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(dir, g, carEncoder, weighting, tMode);
         prepare.doWork();
-        assertEquals(old + 22, g.getAllEdges().getCount());
+        assertEquals(old + 23, g.getAllEdges().getCount());
         RoutingAlgorithm algo = prepare.createAlgo(g, new AlgorithmOptions(AlgorithmOptions.DIJKSTRA_BI, carEncoder, weighting, tMode));
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -40,8 +40,6 @@ public abstract class AbstractBidirAlgo extends AbstractRoutingAlgorithm
 
     protected abstract Path createAndInitPath();
 
-    protected abstract boolean isWeightLimitReached();
-
     abstract void checkState( int fromBase, int fromAdj, int toBase, int toAdj );
 
     abstract boolean fillEdgesFrom();
@@ -66,7 +64,7 @@ public Path calcPath( int from, int to )
 
     protected void runAlgo()
     {
-        while (!finished() && !isWeightLimitReached())
+        while (!finished() && !isWeightLimitExceeded())
         {
             if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -63,7 +63,7 @@ public void setWeightLimit( double weight )
     {
         this.weightLimit = weight;
     }
-       
+
     public RoutingAlgorithm setEdgeFilter( EdgeFilter additionalEdgeFilter )
     {
         this.additionalEdgeFilter = additionalEdgeFilter;
@@ -111,6 +111,8 @@ protected EdgeEntry createEdgeEntry( int node, double dist )
      */
     protected abstract Path extractPath();
 
+    protected abstract boolean isWeightLimitExceeded();
+
     protected Path createEmptyPath()
     {
         return new Path(graph, flagEncoder);

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -132,7 +132,7 @@ public void testMoreComplexGraph()
         int old = g.getAllEdges().getCount();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(g, carEncoder, weighting, tMode);
         prepare.doWork();
-        assertEquals(old + 10, g.getAllEdges().getCount());
+        assertEquals(old + 7, g.getAllEdges().getCount());
     }
 
     @Test
@@ -282,7 +282,7 @@ public void testRoundaboutUnpacking()
         int old = g.getAllEdges().getCount();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(g, carEncoder, weighting, tMode);
         prepare.doWork();
-        assertEquals(old + 22, g.getAllEdges().getCount());
+        assertEquals(old + 23, g.getAllEdges().getCount());
         RoutingAlgorithm algo = prepare.createAlgo(g, new AlgorithmOptions(AlgorithmOptions.DIJKSTRA_BI, carEncoder, weighting, tMode));
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -18,7 +18,6 @@
 package com.graphhopper.util;
 
 import java.text.SimpleDateFormat;
-
 import java.util.*;
 
 /**
@@ -168,7 +167,7 @@ public List<GPXEntry> createGPXList()
      */
     public String createGPX()
     {
-        return createGPX("GraphHopper", 0);
+        return createGPX("GraphHopper", new Date().getTime());
     }
 
     public String createGPX( String trackName, long startTimeMillis )

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -37,6 +37,7 @@ public BikeFlagEncoder( String propertiesStr )
         this((int) parseLong(propertiesStr, "speedBits", 4),
                 parseDouble(propertiesStr, "speedFactor", 2),
                 parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+        this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
     public BikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -57,6 +57,7 @@ public CarFlagEncoder( String propertiesStr )
         this((int) parseLong(propertiesStr, "speedBits", 5),
                 parseDouble(propertiesStr, "speedFactor", 5),
                 parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+        this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
     public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -58,6 +58,7 @@ public FootFlagEncoder( String propertiesStr )
     {
         this((int) parseLong(propertiesStr, "speedBits", 4),
                 parseDouble(propertiesStr, "speedFactor", 1));
+        this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
     public FootFlagEncoder( int speedBits, double speedFactor )

File: core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
Patch:
@@ -39,6 +39,7 @@ public MotorcycleFlagEncoder( String propertiesStr )
         this((int) parseLong(propertiesStr, "speedBits", 5),
                 parseDouble(propertiesStr, "speedFactor", 5),
                 parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+        this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
     public MotorcycleFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -39,6 +39,7 @@ public RacingBikeFlagEncoder( String propertiesStr )
         this((int) parseLong(propertiesStr, "speedBits", 4),
                 parseDouble(propertiesStr, "speedFactor", 2),
                 parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+        this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
     public RacingBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -327,10 +327,10 @@ public void testInstructionsWithTimeAndPlace()
         assertEquals(15.2, wayList.get(3).getFirstLat(), 1e-3);
         assertEquals(9.9, wayList.get(3).getFirstLon(), 1e-3);
 
-        String gpxStr = wayList.createGPX("test", 0, "GMT+1");
+        String gpxStr = wayList.createGPX("test", 0, "GMT");
         verifyGPX(gpxStr);
 
-        assertTrue(gpxStr, gpxStr.contains("<trkpt lat=\"15.0\" lon=\"10.0\"><time>1970-01-01T01:00:00+01:00</time>"));
+        assertTrue(gpxStr, gpxStr.contains("<trkpt lat=\"15.0\" lon=\"10.0\"><time>1970-01-01T00:00:00Z</time>"));
         assertTrue(gpxStr, gpxStr.contains("<extensions>") && gpxStr.contains("</extensions>"));
         assertTrue(gpxStr, gpxStr.contains("<rtept lat=\"15.1\" lon=\"10.0\">"));
         assertTrue(gpxStr, gpxStr.contains("<gh:distance>8000.0</gh:distance>"));

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -66,7 +66,6 @@ public class GraphHopper implements GraphHopperAPI
     private double defaultWeightLimit = Double.MAX_VALUE;
     private boolean simplifyResponse = true;
     private TraversalMode traversalMode = TraversalMode.NODE_BASED;
-    private String defaultVehicleStr;
     private RoutingAlgorithmFactory algoFactory;
     // for index
     private LocationIndex locationIndex;

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -219,8 +219,9 @@ String calcDirection( Instruction nextI )
     }
 
     /**
-     * Return the azimuth in degree based on the first tracksegment of the instruction. If
-     * Instruction does not contain enough coordinate points, an empty string will be returned.
+     * Return the azimuth in degree based on the first tracksegment of this instruction. If this
+     * instruction contains less than 2 points then NaN will be returned or the specified
+     * instruction will be used if that is the finish instruction.
      */
     public double calcAzimuth( Instruction nextI )
     {

File: core/src/test/java/com/graphhopper/util/InstructionTest.java
Patch:
@@ -46,7 +46,7 @@ public void testCalcAzimuthAndGetDirection()
         p2.add(49.944, 11.582);
         Instruction i2 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p2);
 
-        assertEquals(45, i2.calcAzimuth(null), .1);
+        assertEquals(32.76, i2.calcAzimuth(null), .1);
         assertEquals("NE", i2.calcDirection(null));
 
         PointList p3 = new PointList();

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1495,7 +1495,7 @@ protected int loadNodesHeader()
         {
             bounds.minEle = Helper.intToEle(nodes.getHeader(7 * 4));
             bounds.maxEle = Helper.intToEle(nodes.getHeader(8 * 4));
-        }        
+        }
 
         return 7;
     }
@@ -1579,7 +1579,7 @@ public boolean isClosed()
     }
 
     @Override
-    public GraphExtension getExtension()    
+    public GraphExtension getExtension()
     {
         return extStorage;
     }

File: core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -95,7 +95,7 @@ public EdgeSkipIterState shortcut( int a, int b )
     public EdgeSkipIterState edge( int a, int b )
     {
         if (lastEdgeIndex + 1 < edgeCount)
-            throw new IllegalStateException("Cannot create after shortcut was created");
+            throw new IllegalStateException("Cannot create edge after first shortcut was created");
 
         lastEdgeIndex = edgeCount;
         return createEdge(a, b);

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -68,6 +68,7 @@ boolean isPushingSection( OSMWay way )
         String highway = way.getTag("highway");
         String trackType = way.getTag("tracktype");
         return way.hasTag("highway", pushingSections)
+                || way.hasTag("railway", "platform")
                 || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -141,6 +141,7 @@ boolean isPushingSection( OSMWay way )
         String highway = way.getTag("highway");
         String trackType = way.getTag("tracktype");
         return way.hasTag("highway", pushingSections)
+                || way.hasTag("railway", "platform")
                 || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
     }
 

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -286,6 +286,7 @@ public void testUnchangedRelationShouldNotInfluencePriority()
     }
 
     @Test
+    @Override
     public void testSacScale()
     {
         OSMWay way = new OSMWay(1);

File: core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
Patch:
@@ -138,7 +138,7 @@ public int findEndNode( int from, int to )
         {
             // Cached! Re-use existing data structures
             int parentNode = parents[to];
-            if (parentNode != EMPTY_PARENT && weights[to] < weights[currNode])
+            if (parentNode != EMPTY_PARENT && weights[to] <= weights[currNode])
                 return to;
 
             if (heap.isEmpty() || visitedNodes >= limitVisitedNodes)

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -81,8 +81,9 @@ public void doWork( GHResponse rsp, List<Path> paths, Translation tr )
                     // if not yet reached finish replace with 'reached via'
                     if (pathIndex + 1 < paths.size())
                     {
-                        FinishInstruction fi = (FinishInstruction) fullInstructions.get(fullInstructions.size() - 1);
-                        fi.setVia(pathIndex + 1);
+                        ViaInstruction newInstr = new ViaInstruction(fullInstructions.get(fullInstructions.size() - 1));
+                        newInstr.setViaCount(pathIndex + 1);
+                        fullInstructions.replaceLast(newInstr);
                     }
                 }
 

File: web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
Patch:
@@ -31,7 +31,8 @@
  */
 public class GraphHopperWebTest
 {
-
+    // see also GraphHopperServletIT.testGraphHopperWeb for real routes against local jetty service
+    
     @Test
     public void testReadUnencoded() throws Exception
     {

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -51,7 +51,7 @@ public class Constants
     public static final String OS_VERSION = System.getProperty("os.version");
     public static final String JAVA_VENDOR = System.getProperty("java.vendor");
     public static final int VERSION_NODE = 4;
-    public static final int VERSION_EDGE = 11;
+    public static final int VERSION_EDGE = 12;
     public static final int VERSION_GEOMETRY = 3;
     public static final int VERSION_LOCATION_IDX = 2;
     public static final int VERSION_NAME_IDX = 2;

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -36,8 +36,7 @@
  * Calculates best path in bidirectional way.
  * <p/>
  * 'Ref' stands for reference implementation and is using the normal Java-'reference'-way.
- * <p/>
- * @see DijkstraBidirection for an array based but more complicated version
+ * <p>
  * @author Peter Karich
  */
 public class DijkstraBidirectionRef extends AbstractBidirAlgo

File: core/src/main/java/com/graphhopper/storage/VLongStorage.java
Patch:
@@ -77,7 +77,7 @@ void writeByte( byte b )
      * Writes an long in a variable-length format. Writes between one and nine bytes. Smaller values
      * take fewer bytes. Negative numbers are not supported.
      * <p>
-     * The format is described further in {@link DataOutput#writeVInt(int)}.
+     * The format is described further in Lucene its DataOutput#writeVInt(int)
      * <p/>
      * See DataInput readVLong of Lucene
      */

File: core/src/main/java/com/graphhopper/util/EdgeWrapper.java
Patch:
@@ -17,14 +17,15 @@
  */
 package com.graphhopper.util;
 
+import com.graphhopper.routing.PathBidir;
 import gnu.trove.map.hash.TIntIntHashMap;
 import java.util.Arrays;
 
 /**
  * This class acts as a HashMap (nodes to weights) and is used to implement references from one edge
  * to its parent.
  * <p/>
- * @see DijkstraBidirection
+ * @see PathBidir
  * @author Peter Karich
  */
 @NotThreadSafe

File: tools/src/main/java/com/graphhopper/tools/QueryTorture.java
Patch:
@@ -33,7 +33,6 @@
 import java.util.zip.GZIPInputStream;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import sun.security.x509.CRLDistributionPointsExtension;
 
 /**
  * Reads log files and queries the live service

File: core/src/main/java/com/graphhopper/reader/OSMWay.java
Patch:
@@ -23,7 +23,6 @@
 import javax.xml.stream.XMLStreamConstants;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
-import java.util.Map;
 
 /**
  * Represents an OSM Way
@@ -75,6 +74,6 @@ public TLongList getNodes()
     @Override
     public String toString()
     {
-        return "Way (" + getId() + ", " + nodes.size() + " nodes)";
+        return "Way id:" + getId() + ", nodes:" + nodes.size() + ", tags:" + super.toString();
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -259,7 +259,7 @@ public long acceptWay( OSMWay way )
         {
             if ((way.hasTag("highway", "cycleway"))
                     && (way.hasTag("sac_scale", "hiking")))
-                return 1;  // This combination is fine with every kind of bike, including a racingbike
+                return acceptBit;
             if (!allowedSacScale(sacScale))
                 return 0;
         }

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -145,7 +145,7 @@ protected double getSpeed( OSMWay way )
         String highwayValue = way.getTag("highway");
         Integer speed = defaultSpeedMap.get(highwayValue);
         if (speed == null)
-            throw new IllegalStateException(toString() + ", no speed found for:" + highwayValue);
+            throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
 
         if (highwayValue.equals("track"))
         {

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -26,6 +26,7 @@
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.storage.StorableProperties;
+import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
 import java.util.*;

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -191,8 +191,7 @@ public void testOneway()
         way.setTag("bicycle:backward", "no");
         flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
         assertTrue(encoder.isForward(flags));
-        assertTrue(encoder.isBackward(flags));
-        way.clearTags();
+        assertTrue(encoder.isBackward(flags));        
 
         way.setTag("bicycle:backward", "yes");
         flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);

File: core/src/main/java/com/graphhopper/reader/dem/CGIARProvider.java
Patch:
@@ -59,8 +59,8 @@ public class CGIARProvider implements ElevationProvider
     private final Logger logger = LoggerFactory.getLogger(getClass());
     private final Map<String, HeightTile> cacheData = new HashMap<String, HeightTile>();
     private File cacheDir = new File("/tmp/cgiar");
-    // String baseUrl = "http://srtm.csi.cgiar.org/SRT-ZIP/SRTM_V41/SRTM_Data_GeoTiff";
-    private String baseUrl = "http://droppr.org/srtm/v4.1/6_5x5_TIFs";
+    // for alternatives see #346
+    private String baseUrl = "http://srtm.csi.cgiar.org/SRT-ZIP/SRTM_V41/SRTM_Data_GeoTiff";    
     private Directory dir;
     private DAType daType = DAType.MMAP;
     final double precision = 1e7;

File: core/src/main/java/com/graphhopper/GHResponse.java
Patch:
@@ -130,6 +130,7 @@ public GHResponse setMillis( long timeInMillis )
      */
     public long getMillis()
     {
+        check("getMillis");
         return time;
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -287,12 +287,13 @@ private GraphHopper setUnsafeMemory()
      * This method sets the default vehicle to use if no vehicle is specified in the GHRequest
      * object. Per default the lexicographically first vehicle is used.
      */
-    public void setDefaultVehicle( String defaultVehicleStr )
+    public GraphHopper setDefaultVehicle( String defaultVehicleStr )
     {
         if (this.defaultVehicleStr != null)
             throw new RuntimeException("Cannot change default vehicle " + this.defaultVehicleStr + " to " + defaultVehicleStr);
 
         this.defaultVehicleStr = defaultVehicleStr;
+        return this;
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -95,8 +95,7 @@ public PrepareContractionHierarchies( LevelGraph g, FlagEncoder encoder, Weighti
 
         // shortcuts store weight in flags where we assume bit 1 and 2 are used for access restriction
         if ((scFwdDir & PrepareEncoder.getScFwdDir()) == 0)
-            throw new IllegalArgumentException("Currently only one vehicle is supported if you enable CH. "
-                    + "It seems that you have imported more than one.");
+            throw new IllegalArgumentException("Enabling the speed-up mode is currently only supported for the first vehicle.");
 
         prepareWeighting = new PreparationWeighting(weighting);
         originalEdges = new GHDirectory("", DAType.RAM_INT).find("original_edges");
@@ -705,7 +704,7 @@ public final boolean accept( EdgeIteratorState edgeState )
                 return allFilter.accept(edgeState);
             }
         };
-        
+
         maxLevel = prepareGraph.getNodes() + 1;
         ignoreNodeFilter = new IgnoreNodeFilter(prepareGraph, maxLevel);
         vehicleAllExplorer = prepareGraph.createEdgeExplorer(allFilter);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -974,7 +974,7 @@ protected List<Path> getPaths( GHRequest request, GHResponse rsp )
 
         QueryGraph queryGraph;
         RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory();
-        if (chEnabled && !vehicle.equals(getDefaultVehicle()))
+        if (chEnabled && !vehicle.equalsIgnoreCase(getDefaultVehicle()))
         {
             // fall back to normal traversing
             tmpAlgoFactory = new RoutingAlgorithmFactorySimple();
@@ -1164,7 +1164,7 @@ protected void ensureWriteAccess()
      * Returns the current sum of the visited nodes while routing. Mainly for statistic and
      * debugging purposes.
      */
-    public long getVisitedSum()
+    long getVisitedSum()
     {
         return visitedSum.get();
     }

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -60,7 +60,7 @@ public class PrepareContractionHierarchies extends AbstractAlgoPreparation imple
     private EdgeSkipExplorer vehicleAllExplorer;
     private EdgeSkipExplorer vehicleAllTmpExplorer;
     private EdgeSkipExplorer calcPrioAllExplorer;
-    private LevelEdgeFilter levelFilter;
+    private final LevelEdgeFilter levelFilter;
     private int maxLevel;
     private final LevelGraph prepareGraph;
 
@@ -91,6 +91,7 @@ public PrepareContractionHierarchies( LevelGraph g, FlagEncoder encoder, Weighti
         this.traversalMode = traversalMode;
         this.prepareFlagEncoder = encoder;
         long scFwdDir = encoder.setAccess(0, true, false);
+        levelFilter = new LevelEdgeFilter(prepareGraph);
 
         // shortcuts store weight in flags where we assume bit 1 and 2 are used for access restriction
         if ((scFwdDir & PrepareEncoder.getScFwdDir()) == 0)
@@ -704,8 +705,7 @@ public final boolean accept( EdgeIteratorState edgeState )
                 return allFilter.accept(edgeState);
             }
         };
-
-        levelFilter = new LevelEdgeFilter(prepareGraph);
+        
         maxLevel = prepareGraph.getNodes() + 1;
         ignoreNodeFilter = new IgnoreNodeFilter(prepareGraph, maxLevel);
         vehicleAllExplorer = prepareGraph.createEdgeExplorer(allFilter);

File: core/src/main/java/com/graphhopper/routing/util/EdgeFilter.java
Patch:
@@ -29,12 +29,12 @@ public interface EdgeFilter
     /**
      * @return true if the current edge should be processed and false otherwise.
      */
-    boolean accept( EdgeIteratorState edgeIterState );
+    boolean accept( EdgeIteratorState edgeState );
 
     static final EdgeFilter ALL_EDGES = new EdgeFilter()
     {
         @Override
-        public final boolean accept( EdgeIteratorState edgeIterState )
+        public final boolean accept( EdgeIteratorState edgeState )
         {
             return true;
         }

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -121,7 +121,7 @@ void start( CmdArgs args )
         try
         {
             maxNode = g.getNodes();
-            printGraphDetails(g);
+            printGraphDetails(g, vehicleStr);
             printLocationIndexQuery(g, hopper.getLocationIndex(), count);
 
             // Route via dijkstrabi. Normal routing takes a lot of time => smaller query number than CH
@@ -161,13 +161,13 @@ void start( CmdArgs args )
         }
     }
 
-    private void printGraphDetails( GraphStorage g )
+    private void printGraphDetails( GraphStorage g, String vehicleStr )
     {
         // graph size (edge, node and storage size)
         put("graph.nodes", g.getNodes());
         put("graph.edges", g.getAllEdges().getCount());
         put("graph.sizeInMB", g.getCapacity() / Helper.MB);
-        put("graph.encoder", g.getEncodingManager().getSingle().toString());
+        put("graph.encoder", vehicleStr);
     }
 
     private void printLocationIndexQuery( Graph g, final LocationIndex idx, int count )

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -76,7 +76,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         this.graph = hopper.getGraph();
         this.na = graph.getNodeAccess();
         algoFactory = hopper.getAlgorithmFactory();
-        encoder = hopper.getEncodingManager().getSingle();
+        encoder = hopper.getEncodingManager().getEncoder("car");
         weighting = hopper.createWeighting(new WeightingMap("fastest"), encoder);
         algoOpts = new AlgorithmOptions(AlgorithmOptions.DIJKSTRA_BI, encoder, weighting);
 

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -142,7 +142,7 @@ protected final int nextEdgeEntryIndex( int sizeInBytes )
     protected final int nextNodeEntryIndex( int sizeInBytes )
     {
         int tmp = nodeEntryIndex;
-        nodeEntryIndex += 4;
+        nodeEntryIndex += sizeInBytes;
         return tmp;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -65,6 +65,7 @@ protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnC
         restrictedValues.add("private");
         restrictedValues.add("no");
         restrictedValues.add("restricted");
+        restrictedValues.add("military");
 
         intendedValues.add("yes");
         intendedValues.add("designated");

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -69,6 +69,7 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         restrictedValues.add("no");
         restrictedValues.add("restricted");
         restrictedValues.add("delivery");
+        restrictedValues.add("military");
 
         intendedValues.add("yes");
         intendedValues.add("permissive");

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -67,6 +67,7 @@ public FootFlagEncoder( int speedBits, double speedFactor )
         restrictedValues.add("private");
         restrictedValues.add("no");
         restrictedValues.add("restricted");
+        restrictedValues.add("military");
 
         intendedValues.add("yes");
         intendedValues.add("designated");

File: core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
Patch:
@@ -27,8 +27,8 @@
  */
 public class MotorcycleFlagEncoderTest
 {
-    private final EncodingManager em = new EncodingManager("CAR,BIKE,FOOT");
-    private final CarFlagEncoder encoder = (CarFlagEncoder) em.getEncoder("CAR");
+    private final EncodingManager em = new EncodingManager("motorcycle,foot");
+    private final MotorcycleFlagEncoder encoder = (MotorcycleFlagEncoder) em.getEncoder("motorcycle");
 
     @Test
     public void testHandleWayTags()

File: core/src/main/java/com/graphhopper/geohash/LinearKeyAlgo.java
Patch:
@@ -61,7 +61,7 @@ public LinearKeyAlgo setBounds( double minLonInit, double maxLonInit, double min
 
     public LinearKeyAlgo setBounds( BBox bounds )
     {
-        setBounds(bounds.minLon, bounds.maxLat, bounds.minLat, bounds.maxLat);
+        setBounds(bounds.minLon, bounds.maxLon, bounds.minLat, bounds.maxLat);
         return this;
     }
 
@@ -115,4 +115,5 @@ public double getLonDelta()
     {
         return lonDelta;
     }
+
 }

File: core/src/main/java/com/graphhopper/geohash/LinearKeyAlgo.java
Patch:
@@ -61,7 +61,7 @@ public LinearKeyAlgo setBounds( double minLonInit, double maxLonInit, double min
 
     public LinearKeyAlgo setBounds( BBox bounds )
     {
-        setBounds(bounds.minLon, bounds.maxLat, bounds.minLat, bounds.maxLat);
+        setBounds(bounds.minLon, bounds.maxLon, bounds.minLat, bounds.maxLat);
         return this;
     }
 
@@ -115,4 +115,5 @@ public double getLonDelta()
     {
         return lonDelta;
     }
+
 }

File: src/main/java/com/graphhopper/matching/MapMatchingMain.java
Patch:
@@ -106,6 +106,8 @@ public boolean accept(File dir, String name) {
                     System.out.println("\texport results to:" + outFile);
                     new GPXFile(mr).doExport(outFile);
                 } catch (Exception ex) {
+                    importSW.stop();
+                    matchSW.stop();
                     logger.error("Problem with file " + gpxFile + " Error: " + ex.getMessage());
                 }
             }

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -468,7 +468,7 @@ public void next( EdgeIteratorState edge, int index )
                         // This could lead to problems if there are non-complete roundabouts!
                         EdgeIterator edgeIter = outEdgeExplorer.setBaseNode(adjNode);
                         edgeIter.next();
-                        if (edgeIter.next()) {((RoundaboutInstruction) prevInstruction).increaseExitNr();}
+                        if (edgeIter.next()) {((RoundaboutInstruction) prevInstruction).increaseExitNumber();}
 
                     } else if (prevInRoundabout) //previously in roundabout but not anymore
                     {
@@ -488,9 +488,8 @@ public void next( EdgeIteratorState edge, int index )
 
                         prevInstruction = ((RoundaboutInstruction) prevInstruction)
                             .setRadian(deltaInOut)
-                            .setContinuedStreet(!Helper.isEmpty(name) && (prevName.equals(name)))
                             .setDirOfRotation(deltaOut)
-                            .setFinished();
+                            .setExited();
 
                         prevName = name;
                         prevAnnotation = annotation;

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -85,6 +85,7 @@ public List<Map<String, Object>> createJson()
             instrJson.put("time", instruction.getTime());
             instrJson.put("distance", Helper.round(instruction.getDistance(), 3));
             instrJson.put("sign", instruction.getSign());
+            instrJson.putAll(instruction.getExtraInfoJSON());
 
             int tmpIndex = pointsIndex + instruction.getPoints().size();
             // the last instruction should not point to the next instruction

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -40,6 +40,8 @@ public abstract class AbstractBidirAlgo extends AbstractRoutingAlgorithm
 
     protected abstract Path createAndInitPath();
 
+    protected abstract boolean isWeightLimitReached();
+
     abstract void checkState( int fromBase, int fromAdj, int toBase, int toAdj );
 
     abstract boolean fillEdgesFrom();
@@ -64,7 +66,7 @@ public Path calcPath( int from, int to )
 
     protected void runAlgo()
     {
-        while (!finished())
+        while (!finished() && !isWeightLimitReached())
         {
             if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
Patch:
@@ -32,7 +32,7 @@ public class RoutingAlgorithmFactorySimple implements RoutingAlgorithmFactory
 {
     @Override
     public RoutingAlgorithm createAlgo( Graph g, AlgorithmOptions opts )
-    {
+    {        
         AbstractRoutingAlgorithm algo;
         String algoStr = opts.getAlgorithm();
         if (AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr))

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -37,7 +37,7 @@ public class AStarBidirectionTest extends AbstractRoutingAlgorithmTester
     /**
      * Runs the same test with each of the supported traversal modes
      */
-    @Parameters
+    @Parameters(name = "{0}")
     public static Collection<Object[]> configs()
     {
         return Arrays.asList(new Object[][]

File: core/src/test/java/com/graphhopper/routing/AStarTest.java
Patch:
@@ -36,7 +36,7 @@ public class AStarTest extends AbstractRoutingAlgorithmTester
     /**
      * Runs the same test with each of the supported traversal modes
      */
-    @Parameters
+    @Parameters(name = "{0}")
     public static Collection<Object[]> configs()
     {
         return Arrays.asList(new Object[][]

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -37,7 +37,7 @@ public class DijkstraBidirectionRefTest extends AbstractRoutingAlgorithmTester
     /**
      * Runs the same test with each of the supported traversal modes
      */
-    @Parameters
+    @Parameters(name = "{0}")
     public static Collection<Object[]> configs()
     {
         return Arrays.asList(new Object[][]

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -28,6 +28,7 @@
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.Parameterized;
+import org.junit.runners.Parameterized.Parameters;
 
 /**
  *
@@ -39,7 +40,7 @@ public class DijkstraOneToManyTest extends AbstractRoutingAlgorithmTester
     /**
      * Runs the same test with each of the supported traversal modes
      */
-    @Parameterized.Parameters
+    @Parameters(name = "{0}")
     public static Collection<Object[]> configs()
     {
         return Arrays.asList(new Object[][]

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -37,7 +37,7 @@ public class DijkstraTest extends AbstractRoutingAlgorithmTester
     /**
      * Runs the same test with each of the supported traversal modes
      */
-    @Parameters
+    @Parameters(name = "{0}")
     public static Collection<Object[]> configs()
     {
         return Arrays.asList(new Object[][]

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -42,7 +42,7 @@
  */
 public class DijkstraBidirectionCHTest extends AbstractRoutingAlgorithmTester
 {
-    // graph is expensive to create and to prepare!
+    // matrix graph is expensive to create and to prepare!
     private static Graph preparedMatrixGraph;
 
     @Override

File: src/test/java/com/graphhopper/matching/MapMatchingTest.java
Patch:
@@ -114,7 +114,7 @@ public void testDoWork() {
     List<String> fetchStreets(List<EdgeMatch> emList) {
         List<String> list = new ArrayList<String>();
         for (EdgeMatch em : emList) {
-            list.add(em.edgeState.getName());
+            list.add(em.getEdgeState().getName());
         }
         return list;
     }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1139,7 +1139,7 @@ public void optimize()
         if (delNodes <= 0)
             return;
 
-        // Deletes only nodes. 
+        // Deletes only nodes.
         // It reduces the fragmentation of the node space but introduces new unused edges.
         inPlaceNodeRemove(delNodes);
 
@@ -1289,7 +1289,7 @@ private void inPlaceNodeRemove( int removeNodeCount )
         }
 
         // *rewrites* all edges connected to moved nodes
-        // go through all edges and pick the necessary <- this is easier to implement then
+        // go through all edges and pick the necessary <- this is easier to implement than
         // a more efficient (?) breadth-first search
         EdgeIterator iter = getAllEdges();
         while (iter.next())

File: core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
Patch:
@@ -38,7 +38,7 @@ public class FastestWeighting implements Weighting
     public FastestWeighting( FlagEncoder encoder )
     {
         this.encoder = encoder;
-        maxSpeed = encoder.getMaxSpeed() * SPEED_CONV;
+        maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;
     }
 
     @Override
@@ -53,7 +53,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
         double speed = reverse ? encoder.getReverseSpeed(edge.getFlags()) : encoder.getSpeed(edge.getFlags());
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
-        return edge.getDistance() / (speed * SPEED_CONV);
+        return edge.getDistance() / speed * SPEED_CONV;
     }
 
     @Override

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -662,7 +662,7 @@ public void testTwoWeightsPerEdge()
 //        assertEquals(Helper.createTList(13, 0, 1, 2, 11, 7, 10, 12), p.calcNodes());
         assertEquals(85124371, p.getMillis());
         assertEquals(425622, p.getDistance(), 1);
-        assertEquals(6568, p.getWeight(), 1);
+        assertEquals(85124.4, p.getWeight(), 1);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -28,7 +28,6 @@
 import com.graphhopper.storage.*;
 import com.graphhopper.storage.index.*;
 import com.graphhopper.util.*;
-import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 
 import java.io.File;

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -31,9 +31,9 @@
 public class PathMerger
 {
     private boolean enableInstructions = true;
-    private boolean simplifyResponse = false;
+    private boolean simplifyResponse = true;
     private DouglasPeucker douglasPeucker;
-    private boolean calcPoints;
+    private boolean calcPoints = true;
 
     public void doWork( GHResponse rsp, List<Path> paths, Translation tr )
     {

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -74,8 +74,9 @@ public void testLoadOSM()
         assertEquals(3, rsp.getPoints().getSize());
 
         closableInstance.close();
-        closableInstance = new GraphHopper().setStoreOnFlush(true).
-                setEncodingManager(new EncodingManager("CAR"));
+        
+        // no encoding manager necessary
+        closableInstance = new GraphHopper().setStoreOnFlush(true);
         assertTrue(closableInstance.load(ghLoc));
         rsp = closableInstance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -624,7 +624,7 @@ public AllEdgesIterator getAllEdges()
     public int getLevel( int nodeId )
     {
         if (isVirtualNode(nodeId))
-            return 0;
+            throw new IllegalStateException("LevelEdgeFilter should prevent fetching level for virtual nodes: " + nodeId + ", See #288");
 
         return ((LevelGraph) mainGraph).getLevel(nodeId);
     }

File: core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -80,7 +80,7 @@ public final int getLevel( int nodeIndex )
     {
         // automatically allocate new nodes only via creating edges or setting node properties
         if (nodeIndex >= getNodes())
-            return 0;
+            throw new IllegalStateException("node " + nodeIndex + " is invalid. Not in [0," + getNodes() + ")");
 
         return nodes.getInt((long) nodeIndex * nodeEntryBytes + I_LEVEL);
     }

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -499,7 +499,7 @@ public void testVia()
                 init(new CmdArgs().
                         put("osmreader.osm", testOsm3).
                         put("prepare.minNetworkSize", "1").
-                        put("graph.acceptWay", "CAR")).
+                        put("graph.flagEncoders", "CAR")).
                 setGraphHopperLocation(ghLoc);
         instance.importOrLoad();
 

File: core/src/test/java/com/graphhopper/storage/index/Location2IDQuadtreeTest.java
Patch:
@@ -42,7 +42,7 @@ public LocationIndex createIndex( Graph g, int resolution )
     @Test
     public void testNormedDist()
     {
-        Location2IDQuadtree index = new Location2IDQuadtree(createGraph(new EncodingManager()), new RAMDirectory());
+        Location2IDQuadtree index = new Location2IDQuadtree(createGraph(new EncodingManager("car")), new RAMDirectory());
         index.initAlgo(5, 6);
         assertEquals(1, index.getNormedDist(0, 1), 1e-6);
         assertEquals(2, index.getNormedDist(0, 7), 1e-6);

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -121,7 +121,7 @@ void start( CmdArgs args )
         try
         {
             maxNode = g.getNodes();
-            printGraphDetails(g);
+            printGraphDetails(g, vehicleStr);
             printLocationIndexQuery(g, hopper.getLocationIndex(), count);
 
             // Route via dijkstrabi. Normal routing takes a lot of time => smaller query number than CH
@@ -161,13 +161,13 @@ void start( CmdArgs args )
         }
     }
 
-    private void printGraphDetails( GraphStorage g )
+    private void printGraphDetails( GraphStorage g, String vehicleStr )
     {
         // graph size (edge, node and storage size)
         put("graph.nodes", g.getNodes());
         put("graph.edges", g.getAllEdges().getCount());
         put("graph.sizeInMB", g.getCapacity() / Helper.MB);
-        put("graph.encoder", g.getEncodingManager().getSingle().toString());
+        put("graph.encoder", vehicleStr);
     }
 
     private void printLocationIndexQuery( Graph g, final LocationIndex idx, int count )

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -76,7 +76,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         this.graph = hopper.getGraph();
         this.na = graph.getNodeAccess();
         algoFactory = hopper.getAlgorithmFactory();
-        encoder = hopper.getEncodingManager().getSingle();
+        encoder = hopper.getEncodingManager().getEncoder("car");
         weighting = hopper.createWeighting(new WeightingMap("fastest"), encoder);
         algoOpts = new AlgorithmOptions(AlgorithmOptions.DIJKSTRA_BI, encoder, weighting);
 

File: core/src/main/java/com/graphhopper/storage/OriginalGraph.java
Patch:
@@ -204,6 +204,9 @@ public EdgeIteratorState detach( boolean reverse )
     @Override
     public EdgeExplorer createEdgeExplorer( final EdgeFilter filter )
     {
+        if (filter == EdgeFilter.ALL_EDGES)
+            return createEdgeExplorer();
+
         return lg.createEdgeExplorer(new EdgeFilter()
         {
             @Override

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -70,10 +70,10 @@ public TestAlgoCollector assertDistance( AlgoHelperEntry algoEntry, List<QueryRe
         GHResponse rsp = new GHResponse();
         pathMerger.doWork(rsp, viaPaths, trMap.getWithFallBack(Locale.US));
 
-        if (!rsp.isFound())
+        if (rsp.hasErrors())
         {
-            errors.add(algoEntry + " returns no path! expected distance: " + rsp.getDistance()
-                    + ", expected points: " + oneRun + ". " + queryList);
+            errors.add(algoEntry + " response contains errors. Expected distance: " + rsp.getDistance()
+                    + ", expected points: " + oneRun + ". " + queryList + ", errors:" + rsp.getErrors());
             return this;
         }
 

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -223,6 +223,9 @@ protected long calcMillis( double distance, long flags, boolean revert )
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
             throw new IllegalStateException("Invalid speed stored in edge! " + speed);
 
+        if (speed == 0)
+            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.");
+
         return (long) (distance * 3600 / speed);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/TurnWeighting.java
Patch:
@@ -89,7 +89,7 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
 
     public double calcTurnWeight( int edgeFrom, int nodeVia, int edgeTo )
     {
-        long turnFlags = turnCostExt.getTurnCostFlags(nodeVia, edgeFrom, edgeTo);
+        long turnFlags = turnCostExt.getTurnCostFlags(edgeFrom, nodeVia, edgeTo);
         if (turnCostEncoder.isTurnRestricted(turnFlags))
             return Double.POSITIVE_INFINITY;
 

File: core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.util.AngleCalc;
 import static java.lang.Math.*;
 
 /**

File: core/src/test/java/com/graphhopper/util/DistanceCalcEarthTest.java
Patch:
@@ -130,6 +130,9 @@ public void testValidEdgeDistance()
         assertFalse(dc.validEdgeDistance(49.944482, 11.555446, 49.937964, 11.541824, 49.942272, 11.555643));
         // right bottom of the edge
         assertFalse(dc.validEdgeDistance(49.94085, 11.557356, 49.937964, 11.541824, 49.942272, 11.555643));
+
+        // rounding error
+        // assertFalse(dc.validEdgeDistance(0.001, 0.001, 0.001, 0.002, 0.00099987, 0.00099987));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -53,7 +53,7 @@ public AbstractRoutingAlgorithm( Graph graph, FlagEncoder encoder, Weighting wei
     {
         this.weighting = weighting;
         this.flagEncoder = encoder;
-        this.traversalMode = traversalMode;
+        this.traversalMode = traversalMode;        
         setGraph(graph);
     }
 
@@ -66,7 +66,7 @@ protected RoutingAlgorithm setGraph( Graph graph )
         this.graph = graph;
         this.nodeAccess = graph.getNodeAccess();
         outEdgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(flagEncoder, false, true));
-        inEdgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(flagEncoder, true, false));
+        inEdgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(flagEncoder, true, false));        
         return this;
     }
 

File: core/src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -66,8 +66,6 @@ public Path extract()
         if (edgeEntry == null || edgeTo == null)
             return this;
 
-//        int from = GHUtility.getAdjNode(graph, edgeEntry.edge, );
-//        int to = GHUtility.getAdjNode(graph, edgeTo.edge, );
         if (edgeEntry.adjNode != edgeTo.adjNode)
             throw new IllegalStateException("Locations of the 'to'- and 'from'-Edge has to be the same." + toString() + ", fromEntry:" + edgeEntry + ", toEntry:" + edgeTo);
 

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -144,12 +144,12 @@ long fillGPXList( List<GPXEntry> list, long time,
 
         for (int i = 0; i < len; i++)
         {
+            list.add(new GPXEntry(lat, lon, ele, prevTime));
+            
             boolean last = i + 1 == len;
             double nextLat = last ? nextInstr.getFirstLat() : points.getLatitude(i + 1);
             double nextLon = last ? nextInstr.getFirstLon() : points.getLongitude(i + 1);
             double nextEle = is3D ? (last ? nextInstr.getFirstEle() : points.getElevation(i + 1)) : Double.NaN;
-
-            list.add(new GPXEntry(lat, lon, ele, prevTime));
             if (is3D)
                 prevTime = Math.round(prevTime + this.time * distanceCalc.calcDist(nextLat, nextLon, nextEle, lat, lon, ele) / distance);
             else

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -289,12 +289,12 @@ public void testFootAndCar()
         // A to E only for foot
         res = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.FOOT));
         assertTrue(res.isFound());
-        assertEquals(3, res.getPoints().size());
+        assertEquals(2, res.getPoints().size());
 
         // A D E for car
         res = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.CAR));
         assertTrue(res.isFound());
-        assertEquals(4, res.getPoints().getSize());
+        assertEquals(3, res.getPoints().getSize());
     }
 
     @Test
@@ -499,7 +499,7 @@ public void testVia()
         GHPoint third = new GHPoint(11.2, 51.9);
         GHResponse rsp12 = instance.route(new GHRequest().addPoint(first).addPoint(second));
         assertTrue("should find 1->2", rsp12.isFound());
-        assertEquals(147931.5, rsp12.getDistance(), .1);
+        assertEquals(147930.5, rsp12.getDistance(), .1);
         GHResponse rsp23 = instance.route(new GHRequest().addPoint(second).addPoint(third));
         assertTrue("should find 2->3", rsp23.isFound());
         assertEquals(176608.9, rsp23.getDistance(), .1);

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -49,7 +49,7 @@ public static Collection<Object[]> configs()
         });
     }
 
-    private TraversalMode traversalMode;
+    private final TraversalMode traversalMode;
 
     public DijkstraTest( TraversalMode tMode )
     {

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -294,6 +294,7 @@ public String getCHWeighting()
     public GraphHopper setCHEnable( boolean enable )
     {
         ensureNotLoaded();
+        algoFactory = null;
         chEnabled = enable;
         return this;
     }

File: web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
Patch:
@@ -65,7 +65,7 @@ public void testElevation() throws Exception
         assertTrue("distance wasn't correct:" + distance, distance < 2700);
 
         JSONObject cson = path.getJSONObject("points");
-        assertTrue("no elevation?", cson.toString().indexOf("[7.421392,43.7307,66]") >= 0);
+        assertTrue("no elevation?", cson.toString().contains("[7.421392,43.7307,66]"));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -1050,7 +1050,7 @@ public void close()
             lockFactory.forceRemove(fileLockName, true);
         } catch (Exception ex)
         {
-            // silently fail
+            // silently fail e.g. on Windows where we cannot remove an unreleased native lock
         }
     }
 

File: core/src/main/java/com/graphhopper/storage/LockFactory.java
Patch:
@@ -35,7 +35,8 @@ public interface LockFactory
     Lock create( String fileName, boolean writeAccess );
 
     /**
-     * Removes the specified lock.
+     * Removes the specified lock. Note: on windows we cannot forcefully remove an unreleased native
+     * lock
      */
     void forceRemove( String fileName, boolean writeAccess );
 }

File: core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java
Patch:
@@ -65,7 +65,7 @@ public synchronized void forceRemove( String fileName, boolean writeAccess )
         {
             create(fileName, writeAccess).release();
             File lockFile = new File(lockDir, fileName);
-            if (!lockFile.delete())
+            if (lockFile.exists() && !lockFile.delete())
                 throw new RuntimeException("Cannot delete " + lockFile);
         }
     }

File: core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
Patch:
@@ -113,7 +113,7 @@ public synchronized boolean isLocked()
         @Override
         public synchronized void release()
         {
-            if (isLocked() && !lockFile.delete())
+            if (isLocked() && lockFile.exists() && !lockFile.delete())
                 throw new RuntimeException("Cannot release lock file: " + lockFile);
         }
 

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -150,7 +150,7 @@ public void clear()
             removeDA(da, da.getName(), false);
         }
         if (mmapDA != null)
-            mmapDA.cleanHack();
+            Helper.cleanHack();
         map.clear();
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -690,6 +690,9 @@ public boolean load( String graphHopperFolder )
         if (encodingManager == null)
             encodingManager = EncodingManager.create(ghLocation);
 
+        if (!allowWrites && dataAccessType.isMMap())
+            dataAccessType = DAType.MMAP_RO;
+
         GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
         if (chEnabled)
             graph = new LevelGraphStorage(dir, encodingManager, hasElevation());

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -120,8 +120,8 @@ public DataAccess find( String name, DAType type )
                     da = new RAMDataAccess(name, location, false, byteOrder);
             }
         } else if (type.isMMap())
-        {
-            da = new MMapDataAccess(name, location, byteOrder);
+        {            
+            da = new MMapDataAccess(name, location, byteOrder, type.isAllowWrites());
         } else
         {
             da = new UnsafeDataAccess(name, location, byteOrder);

File: core/src/test/java/com/graphhopper/storage/MMapDataAccessTest.java
Patch:
@@ -28,7 +28,7 @@ public class MMapDataAccessTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new MMapDataAccess(name, directory, defaultOrder).setSegmentSize(128);
+        return new MMapDataAccess(name, directory, defaultOrder, true).setSegmentSize(128);
     }
 
     @Test

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -777,7 +777,7 @@ public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
             result = new ShortestWeighting();
         } else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty())
         {
-            if (encoder instanceof BikeCommonFlagEncoder || encoder instanceof MotorcycleFlagEncoder)
+            if (encoder.supports(PriorityWeighting.class))
                 result = new PriorityWeighting(encoder);
             else
                 result = new FastestWeighting(encoder);
@@ -786,7 +786,7 @@ public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
             throw new UnsupportedOperationException("weighting " + weighting + " not supported");
         }
 
-        if (encoder.supportsTurnCosts())
+        if (encoder.supports(TurnWeighting.class))
         {
             result = new TurnWeighting(result, encoder, (TurnCostStorage) graph.getExtendedStorage());
         }

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -166,7 +166,7 @@ else if (entry.equals(MOUNTAINBIKE))
 
             else if (entry.equals(FOOT))
                 fe = new FootFlagEncoder(entryVal);
-            
+
             else if (entry.equals(MOTORCYCLE))
                 fe = new MotorcycleFlagEncoder(entryVal);
 
@@ -469,7 +469,7 @@ public boolean needsTurnCostsSupport()
     {
         for (FlagEncoder encoder : edgeEncoders)
         {
-            if (encoder.supportsTurnCosts())
+            if (encoder.supports(TurnWeighting.class))
                 return true;
         }
         return false;

File: web/src/main/java/com/graphhopper/http/DefaultModule.java
Patch:
@@ -73,6 +73,9 @@ protected void configure()
             long timeout = args.getLong("web.timeout", 3000);
             bind(Long.class).annotatedWith(Names.named("timeout")).toInstance(timeout);
             boolean jsonpAllowed = args.getBool("web.jsonpAllowed", false);
+            if (!jsonpAllowed)
+                logger.info("jsonp disabled");
+
             bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(jsonpAllowed);
         } catch (Exception ex)
         {

File: web/src/main/java/com/graphhopper/http/GHBaseServlet.java
Patch:
@@ -17,8 +17,8 @@
  */
 package com.graphhopper.http;
 
-import com.google.inject.name.Named;
 import java.io.IOException;
+import javax.inject.Named;
 import javax.inject.Inject;
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
@@ -49,7 +49,7 @@ protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONO
             res.setContentType("application/javascript");
             if (!jsonpAllowed)
             {
-                res.sendError(SC_INTERNAL_SERVER_ERROR, "Server is not configured to allow jsonp!");
+                res.sendError(SC_BAD_REQUEST, "Server is not configured to allow jsonp!");
                 return;
             }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -530,7 +530,7 @@ public GraphHopper init( CmdArgs args )
 
         // osm import
         wayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", wayPointMaxDistance);
-        String flagEncoders = args.get("osmreader.acceptWay", "CAR");
+        String flagEncoders = args.get("graph.flagEncoders", "CAR");
         encodingManager = new EncodingManager(flagEncoders, bytesForFlags);
         workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
         enableInstructions = args.getBool("osmreader.instructions", enableInstructions);

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -485,7 +485,7 @@ public static EncodingManager create( String ghLoc )
 
         // check encoding for compatiblity
         properties.checkVersions(false);
-        String acceptStr = properties.get("osmreader.acceptWay");
+        String acceptStr = properties.get("graph.flagEncoders");
 
         if (acceptStr.isEmpty())
             throw new IllegalStateException("EncodingManager was not configured. And no one was found in the graph: "

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -183,7 +183,7 @@ public GraphStorage create( long byteCount )
         extStorage.create(initSize);
 
         properties.put("graph.bytesForFlags", encodingManager.getBytesForFlags());
-        properties.put("osmreader.acceptWay", encodingManager.toDetailsString());
+        properties.put("graph.flagEncoders", encodingManager.toDetailsString());
 
         properties.put("graph.byteOrder", dir.getByteOrder());
         properties.put("graph.dimension", nodeAccess.getDimension());
@@ -1370,7 +1370,7 @@ public boolean loadExisting()
             {
                 properties.checkVersions(false);
                 // check encoding for compatiblity
-                acceptStr = properties.get("osmreader.acceptWay");
+                acceptStr = properties.get("graph.flagEncoders");
             } else
                 throw new IllegalStateException("cannot load properties. corrupt file or directory? " + dir);
 

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -301,7 +301,7 @@ public void testFailsForWrongConfig() throws IOException
                 new CmdArgs().
                 put("osmreader.osm", testOsm3).
                 put("osmreader.dataaccess", "RAM").
-                put("osmreader.acceptWay", "FOOT,CAR").
+                put("graph.flagEncoders", "FOOT,CAR").
                 put("prepare.chWeighting", "no")).
                 setGraphHopperLocation(ghLoc);
         instance.importOrLoad();
@@ -312,7 +312,7 @@ public void testFailsForWrongConfig() throws IOException
                 new CmdArgs().
                 put("osmreader.osm", testOsm3).
                 put("osmreader.dataaccess", "RAM").
-                put("osmreader.acceptWay", "FOOT").
+                put("graph.flagEncoders", "FOOT").
                 put("prepare.chWeighting", "no")).
                 setOSMFile(testOsm3);
         try
@@ -329,7 +329,7 @@ public void testFailsForWrongConfig() throws IOException
                 put("osmreader.osm", testOsm3).
                 put("osmreader.dataaccess", "RAM").
                 put("prepare.chWeighting", "no").
-                put("osmreader.acceptWay", "CAR,FOOT")).
+                put("graph.flagEncoders", "CAR,FOOT")).
                 setOSMFile(testOsm3);
         assertTrue(instance.load(ghLoc));
         assertEquals(5, instance.getGraph().getNodes());

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -183,7 +183,7 @@ public GraphStorage create( long byteCount )
         extStorage.create(initSize);
 
         properties.put("graph.bytesForFlags", encodingManager.getBytesForFlags());
-        properties.put("graph.flagEncoders", encodingManager.toDetailsString());
+        properties.put("osmreader.acceptWay", encodingManager.toDetailsString());
 
         properties.put("graph.byteOrder", dir.getByteOrder());
         properties.put("graph.dimension", nodeAccess.getDimension());
@@ -1370,7 +1370,7 @@ public boolean loadExisting()
             {
                 properties.checkVersions(false);
                 // check encoding for compatiblity
-                acceptStr = properties.get("graph.flagEncoders");
+                acceptStr = properties.get("osmreader.acceptWay");
             } else
                 throw new IllegalStateException("cannot load properties. corrupt file or directory? " + dir);
 

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -486,7 +486,7 @@ public void testVia()
                 init(new CmdArgs().
                         put("osmreader.osm", testOsm3).
                         put("prepare.minNetworkSize", "1").
-                        put("graph.flagEncoders", "CAR")).
+                        put("graph.acceptWay", "CAR")).
                 setGraphHopperLocation(ghLoc);
         instance.importOrLoad();
 

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -127,11 +127,11 @@ public void testIssue239()
         g.edge(0, 1, 1, true);
         g.edge(1, 2, 1, true);
         g.edge(2, 0, 1, true);
-        
+
         g.edge(4, 5, 1, true);
         g.edge(5, 6, 1, true);
         g.edge(6, 4, 1, true);
-        
+
         AlgorithmPreparation prep = prepareGraph(g);
         DijkstraOneToMany algo = (DijkstraOneToMany) prep.createAlgo();
         assertEquals(-1, algo.findEndNode(0, 4));

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -301,7 +301,7 @@ public void testFailsForWrongConfig() throws IOException
                 new CmdArgs().
                 put("osmreader.osm", testOsm3).
                 put("osmreader.dataaccess", "RAM").
-                put("graph.flagEncoders", "FOOT,CAR").
+                put("osmreader.acceptWay", "FOOT,CAR").
                 put("prepare.chWeighting", "no")).
                 setGraphHopperLocation(ghLoc);
         instance.importOrLoad();
@@ -312,7 +312,7 @@ public void testFailsForWrongConfig() throws IOException
                 new CmdArgs().
                 put("osmreader.osm", testOsm3).
                 put("osmreader.dataaccess", "RAM").
-                put("graph.flagEncoders", "FOOT").
+                put("osmreader.acceptWay", "FOOT").
                 put("prepare.chWeighting", "no")).
                 setOSMFile(testOsm3);
         try
@@ -329,7 +329,7 @@ public void testFailsForWrongConfig() throws IOException
                 put("osmreader.osm", testOsm3).
                 put("osmreader.dataaccess", "RAM").
                 put("prepare.chWeighting", "no").
-                put("graph.flagEncoders", "CAR,FOOT")).
+                put("osmreader.acceptWay", "CAR,FOOT")).
                 setOSMFile(testOsm3);
         assertTrue(instance.load(ghLoc));
         assertEquals(5, instance.getGraph().getNodes());

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -195,7 +195,7 @@ public void testCalcIfEmptyWay()
     {
         Graph graph = createTestGraph();
         Path p = prepareGraph(graph).createAlgo().calcPath(0, 0);
-        assertEquals(p.toString(), 0, p.calcNodes().size());
+        assertEquals(p.calcNodes().toString(), 0, p.calcNodes().size());
         assertEquals(p.toString(), 0, p.getDistance(), 1e-4);
     }
 
@@ -637,7 +637,7 @@ public double getMinWeight( double distance )
             }
 
             @Override
-            public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId)
+            public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
             {
                 int adj = edgeState.getAdjNode();
                 int base = edgeState.getBaseNode();

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -55,7 +55,7 @@ public class QueryGraph implements Graph
     private List<QueryResult> queryResults;
     /**
      * Virtual edges are created between existing graph and new virtual tower nodes. For every
-     * virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap
+     * virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap.
      */
     private List<EdgeIteratorState> virtualEdges;
     private final static int VE_BASE = 0, VE_BASE_REV = 1, VE_ADJ = 2, VE_ADJ_REV = 3;
@@ -242,9 +242,9 @@ private void createEdges( GHPoint3D prevSnapped, int prevWayIndex, GHPoint3D cur
         int virtEdgeId = virtualEdges.size() + mainEdges;
 
         // edges between base and snapped point
-        VirtualEdgeIState baseEdge = new VirtualEdgeIState(virtEdgeId + VE_BASE, prevNodeId, nodeId,
+        VirtualEdgeIState baseEdge = new VirtualEdgeIState(virtEdgeId, prevNodeId, nodeId,
                 baseDistance, closestEdge.getFlags(), closestEdge.getName(), basePoints);
-        VirtualEdgeIState baseReverseEdge = new VirtualEdgeIState(virtEdgeId + VE_BASE_REV, nodeId, prevNodeId,
+        VirtualEdgeIState baseReverseEdge = new VirtualEdgeIState(virtEdgeId, nodeId, prevNodeId,
                 baseDistance, reverseFlags, closestEdge.getName(), baseReversePoints);
 
         virtualEdges.add(baseEdge);

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -97,9 +97,8 @@ public List<GHPoint> getPoints()
     }
 
     /**
-     * Possible values: astar (A* algorithm, default), astarbi (bidirectional A*) dijkstra
-     * (Dijkstra), dijkstrabi and dijkstraNativebi (a bit faster bidirectional Dijkstra). Or specify
-     * empty to use default.
+     * Possible values: astar (A* algorithm, default), astarbi (bidirectional A*), dijkstra
+     * (Dijkstra) or dijkstrabi. Or specify empty to use default.
      */
     public GHRequest setAlgorithm( String algo )
     {

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -881,7 +881,7 @@ OSMTurnRelation createTurnRelation( OSMRelation relation )
                     viaNodeID = member.ref();
                 }
             }
-            if (type != OSMTurnRelation.Type.UNSUPPORTED && fromWayID >= 0 && toWayID >= 0 && viaNodeID >= 0)
+            if (fromWayID >= 0 && toWayID >= 0 && viaNodeID >= 0)
             {
                 return new OSMTurnRelation(fromWayID, viaNodeID, toWayID, type);
             }

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -32,8 +32,7 @@ public NoOpAlgorithmPreparation()
 
     /**
      * Creates a preparation wrapper for the specified algorithm. Possible values for algorithmStr:
-     * astar (A* algorithm), astarbi (bidirectional A*) dijkstra (Dijkstra), dijkstrabi and
-     * dijkstraNativebi (a bit faster bidirectional Dijkstra).
+     * astar (A* algorithm), astarbi (bidirectional A*), dijkstra (Dijkstra) or dijkstrabi.
      */
     public static AlgorithmPreparation createAlgoPrepare( Graph g, final String algorithmStr,
             FlagEncoder encoder, Weighting weighting, boolean edgeBased )

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -121,7 +121,6 @@ public static Collection<Entry<AlgorithmPreparation, LocationIndex>> createAlgos
         prepare.add(new ME(createAlgoPrepare(g, "astar", encoder, weighting, edgeBased), idx));
         // prepare.add(new ME(createAlgoPrepare(g, "dijkstraOneToMany", encoder, weighting, edgeBased), idx));
         prepare.add(new ME(createAlgoPrepare(g, "astarbi", encoder, weighting, edgeBased), idx));
-        prepare.add(new ME(createAlgoPrepare(g, "dijkstraNativebi", encoder, weighting, edgeBased), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstrabi", encoder, weighting, edgeBased), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstra", encoder, weighting, edgeBased), idx));
 

File: core/src/main/java/com/graphhopper/util/EdgeWrapper.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.routing.DijkstraBidirection;
 import gnu.trove.map.hash.TIntIntHashMap;
 import java.util.Arrays;
 

File: core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
Patch:
@@ -71,15 +71,15 @@ public AlgorithmPreparation prepareGraph( Graph defaultGraph, final FlagEncoder
 
     protected GraphStorage createGraph( EncodingManager em )
     {
-        return new GraphBuilder(em).setTurnCosts(true).create();
+        return new GraphBuilder(em).create();
     }
 
     // 0---1
     // |   /
     // 2--3--4
     // |  |  |
     // 5--6--7
-    private void initGraph( Graph g )
+    public static void initGraph( Graph g )
     {
         g.edge(0, 1, 3, true);
         g.edge(0, 2, 1, true);

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -82,7 +82,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         encoder = hopper.getEncodingManager().getSingle();
         weighting = hopper.createWeighting(Weighting.Params.create("fastest"), encoder);
         if (prepare == null)
-            prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting, hopper.hasTurnCosts());
+            prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting, encoder.supportsTurnCosts());
 
         logger.info("locations:" + graph.getNodes() + ", debug:" + debug + ", algo:" + prepare.createAlgo().getName());
         mg = new GraphicsWrapper(graph);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -751,7 +751,7 @@ protected void initCHPrepare()
     {
         FlagEncoder encoder = encodingManager.getSingle();
         PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(encoder,
-                createWeighting(Weighting.Params.create(chWeighting), encoder));
+                createWeighting(Weighting.Params.create(chWeighting), encoder), turnCosts);
         tmpPrepareCH.setPeriodicUpdates(periodicUpdates).
                 setLazyUpdates(lazyUpdates).
                 setNeighborUpdates(neighborUpdates).
@@ -793,7 +793,7 @@ public Weighting createWeighting( Map<String, Object> weightingParameters, FlagE
 
         if (hasTurnCosts())
         {
-            result = new TurnWeighting(result, encoder);
+            result = new TurnWeighting(result, encoder, (TurnCostStorage) graph.getExtendedStorage());
         }
         return result;
     }
@@ -896,7 +896,7 @@ else if (algoStr.equals("astarbi"))
             } else
             {
                 Weighting weighting = createWeighting(request.getHints(), encoder);
-                prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, algoStr, encoder, weighting);
+                prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, algoStr, encoder, weighting, turnCosts);
                 algo = prepare.createAlgo();
             }
 

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -45,9 +45,9 @@ public abstract class AbstractBidirAlgo extends AbstractRoutingAlgorithm
 
     abstract boolean fillEdgesTo();
 
-    public AbstractBidirAlgo( Graph graph, FlagEncoder encoder, Weighting weighting )
+    public AbstractBidirAlgo( Graph graph, FlagEncoder encoder, Weighting weighting, boolean edgeBased )
     {
-        super(graph, encoder, weighting);
+        super(graph, encoder, weighting, edgeBased);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirection.java
Patch:
@@ -56,9 +56,9 @@ public class DijkstraBidirection extends AbstractBidirAlgo
     private EdgeWrapper parentRefTo;
     private PathBidir nativeBestPath;
 
-    public DijkstraBidirection( Graph graph, FlagEncoder encoder, Weighting weighting )
+    public DijkstraBidirection( Graph graph, FlagEncoder encoder, Weighting weighting, boolean edgeBased )
     {
-        super(graph, encoder, weighting);
+        super(graph, encoder, weighting, edgeBased);
         initCollections(1000);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -58,12 +58,12 @@ public class BikeCommonFlagEncoder extends AbstractFlagEncoder
      */
     protected BikeCommonFlagEncoder()
     {
-        this(4, 2);
+        this(4, 2, 0);
     }
 
-    protected BikeCommonFlagEncoder( int speedBits, double speedFactor )
+    protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
     {
-        super(speedBits, speedFactor);
+        super(speedBits, speedFactor, maxTurnCosts);
         // strict set, usually vehicle and agricultural/forestry are ignored by cyclists
         restrictions = new ArrayList<String>(Arrays.asList("bicycle", "access"));
         restrictedValues.add("private");

File: core/src/main/java/com/graphhopper/routing/util/EncodedDoubleValue.java
Patch:
@@ -69,7 +69,7 @@ public long setDoubleValue( long flags, double value )
 
     public double getDoubleValue( long flags )
     {
-        // find value        
+        // find value
         flags &= mask;
         flags >>= shift;
         return flags * factor;

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder
 {
-    MountainBikeFlagEncoder()
+    public MountainBikeFlagEncoder()
     {
         setTrackTypeSpeed("grade1", 18); // paved
         setTrackTypeSpeed("grade2", 16); // now unpaved ...

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -36,9 +36,9 @@ public NoOpAlgorithmPreparation()
      * dijkstraNativebi (a bit faster bidirectional Dijkstra).
      */
     public static AlgorithmPreparation createAlgoPrepare( Graph g, final String algorithmStr,
-            FlagEncoder encoder, Weighting weighting )
+            FlagEncoder encoder, Weighting weighting, boolean edgeBased )
     {
-        return p(new RoutingAlgorithmFactory(algorithmStr, false), encoder, weighting).setGraph(g);
+        return p(new RoutingAlgorithmFactory(algorithmStr, false, edgeBased), encoder, weighting).setGraph(g);
     }
 
     private static AlgorithmPreparation p( final RoutingAlgorithmFactory factory,

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class RacingBikeFlagEncoder extends BikeCommonFlagEncoder
 {
-    RacingBikeFlagEncoder()
+    public RacingBikeFlagEncoder()
     {
         preferHighwayTags.add("road");
         preferHighwayTags.add("secondary");

File: core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
Patch:
@@ -73,7 +73,7 @@ public final void setNode( int index, double lat, double lon, double ele )
         if (lon < that.bounds.minLon)
             that.bounds.minLon = lon;
 
-        //set the default value for the additional field of this node
+        // set the default value for the additional field of this node
         if (that.extStorage.isRequireNodeField())
             that.nodes.setInt(tmp + that.N_ADDITIONAL, that.extStorage.getDefaultNodeFieldValue());
     }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1370,6 +1370,7 @@ public boolean loadExisting()
         checkInit();
         if (edges.loadExisting())
         {
+            // edges loaded properly so the other storages have to load or the file is corrupt.
             if (!nodes.loadExisting())
                 throw new IllegalStateException("cannot load nodes. corrupt file or directory? " + dir);
 

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -116,7 +116,7 @@ public static Set<Integer> getNeighbors( EdgeIterator iter )
         }
         return list;
     }
-    
+
     public static List<Integer> getEdgeIds( EdgeIterator iter )
     {
         List<Integer> list = new ArrayList<Integer>();

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionTest.java
Patch:
@@ -33,7 +33,7 @@ public AlgorithmPreparation prepareGraph( Graph defaultGraph, final FlagEncoder
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new DijkstraBidirection(_graph, encoder, w);
+                return new DijkstraBidirection(_graph, encoder, w, false);
             }
         }.setGraph(defaultGraph);
     }

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -68,7 +68,7 @@ protected LevelGraph createGraph( EncodingManager em, boolean is3D )
     @Override
     public PrepareContractionHierarchies prepareGraph( Graph g, FlagEncoder encoder, Weighting w )
     {
-        PrepareContractionHierarchies ch = new PrepareContractionHierarchies(encoder, w).setGraph(g);
+        PrepareContractionHierarchies ch = new PrepareContractionHierarchies(encoder, w, false).setGraph(g);
         // hack: prepare matrixgraph only once
         if (g != preparedMatrixGraph)
             ch.doWork();
@@ -114,7 +114,7 @@ public void testPathRecursiveUnpacking()
         g2.setLevel(7, 6);
         g2.setLevel(0, 7);
 
-        Path p = new PrepareContractionHierarchies(encoder, new ShortestWeighting()).
+        Path p = new PrepareContractionHierarchies(encoder, new ShortestWeighting(), false).
                 setGraph(g2).createAlgo().calcPath(0, 7);
 
         assertEquals(Helper.createTList(0, 2, 5, 7), p.calcNodes());

File: core/src/test/java/com/graphhopper/routing/util/EncodedDoubleValueTest.java
Patch:
@@ -53,7 +53,7 @@ public void testMaxValueAndSwap()
         long swappedFlags = instance1.swap(flags, instance2);
         assertEquals(expectedFlags, swappedFlags);
 
-        CarFlagEncoder carEncoder = new CarFlagEncoder(8, 0.5);
+        CarFlagEncoder carEncoder = new CarFlagEncoder(8, 0.5, 0);
         new EncodingManager(carEncoder);
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "motorway_link");

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -65,9 +65,9 @@ public void testSave_and_fileFormat_withTurnCostEntries() throws IOException
         graph.edge(9, 11, 200, true);
         graph.edge(1, 2, 120, false);
 
-        turnCostStorage.setTurnCosts(0, iter1.getEdge(), iter2.getEdge(), 1337);
-        turnCostStorage.setTurnCosts(0, iter2.getEdge(), iter1.getEdge(), 666);
-        turnCostStorage.setTurnCosts(1, iter1.getEdge(), iter2.getEdge(), 815);
+        turnCostStorage.addTurnInfo(0, iter1.getEdge(), iter2.getEdge(), 1337);
+        turnCostStorage.addTurnInfo(0, iter2.getEdge(), iter1.getEdge(), 666);
+        turnCostStorage.addTurnInfo(1, iter1.getEdge(), iter2.getEdge(), 815);
 
         iter1.setName("named street1");
         iter2.setName("named street2");

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -444,7 +444,7 @@ public void processRelation( OSMRelation relation ) throws XMLStreamException
             OSMTurnRelation turnRelation = createTurnRelation(relation);
             if (turnRelation != null)
             {
-                ExtendedStorage extendedStorage = ((GraphHopperStorage) graphStorage).getExtendedStorage();
+                ExtendedStorage extendedStorage = graphStorage.getExtendedStorage();
                 if (extendedStorage instanceof TurnCostStorage)
                 {
                     Collection<TurnCostTableEntry> entries = encodingManager.analyzeTurnRelation(turnRelation, this);

File: core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
Patch:
@@ -48,7 +48,7 @@ public double getMinWeight( double distance )
     }
 
     @Override
-    public double calcWeight( EdgeIteratorState edge, boolean reverse )
+    public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId )
     {        
         double speed = reverse ? encoder.getReverseSpeed(edge.getFlags()) : encoder.getSpeed(edge.getFlags());
         if (speed == 0)

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -26,7 +26,7 @@
  * <p/>
  * @author Peter Karich
  */
-public interface FlagEncoder
+public interface FlagEncoder extends TurnCostEncoder
 {
     /**
      * @return the maximum speed in km/h

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -33,11 +33,11 @@ public PriorityWeighting( FlagEncoder encoder )
     }
 
     @Override
-    public double calcWeight( EdgeIteratorState edge, boolean reverse )
+    public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
     {
-        double weight = super.calcWeight(edge, reverse);
+        double weight = super.calcWeight(edgeState, reverse, prevOrNextEdgeId);
         if (Double.isInfinite(weight))
             return Double.POSITIVE_INFINITY;
-        return weight / (0.5 + encoder.getDouble(edge.getFlags(), BikeCommonFlagEncoder.K_PRIORITY));
+        return weight / (0.5 + encoder.getDouble(edgeState.getFlags(), BikeCommonFlagEncoder.K_PRIORITY));
     }
 }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -96,7 +96,8 @@ public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boole
         this(dir, encodingManager, withElevation, new ExtendedStorage.NoExtendedStorage());
     }
 
-    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean withElevation, ExtendedStorage extendedStorage )
+    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean withElevation, 
+            ExtendedStorage extendedStorage )
     {
         // here encoding manager can be null e.g. if we want to load existing graph
         this.encodingManager = encodingManager;
@@ -1551,6 +1552,7 @@ public boolean isClosed()
         return nodes.isClosed();
     }
 
+    @Override
     public ExtendedStorage getExtendedStorage()
     {
         return extStorage;

File: core/src/main/java/com/graphhopper/storage/TurnCostStorage.java
Patch:
@@ -177,7 +177,7 @@ public void setTurnCosts( int nodeIndex, int from, int to, int flags )
     /**
      * @return turn flags of the specified node and edge properties.
      */
-    public int getTurnCosts( int node, int edgeFrom, int edgeTo )
+    public int getTurnCostsFlags( int node, int edgeFrom, int edgeTo )
     {
         if (edgeFrom != EdgeIterator.NO_EDGE && edgeTo != EdgeIterator.NO_EDGE)
         {

File: core/src/test/java/com/graphhopper/routing/util/FastestWeightingTest.java
Patch:
@@ -34,18 +34,18 @@ public void testMinWeightHasSameUnitAs_getWeight()
     {
         FastestWeighting instance = new FastestWeighting(encoder);
         long flags = encoder.setProperties(encoder.getMaxSpeed(), true, true);
-        assertEquals(instance.getMinWeight(10), instance.calcWeight(createEdge(10, flags), false), 1e-8);
+        assertEquals(instance.getMinWeight(10), instance.calcWeight(createEdge(10, flags), false, EdgeIterator.NO_EDGE), 1e-8);
     }
 
     @Test
     public void testSpeed0()
     {
         FastestWeighting instance = new FastestWeighting(encoder);
 
-        assertEquals(1.0 / 0, instance.calcWeight(createEdge(10, encoder.setProperties(0, true, true)), false), 1e-8);
+        assertEquals(1.0 / 0, instance.calcWeight(createEdge(10, encoder.setProperties(0, true, true)), false, EdgeIterator.NO_EDGE), 1e-8);
 
         // 0 / 0 returns NaN but calcWeight should not return NaN!
-        assertEquals(1.0 / 0, instance.calcWeight(createEdge(0, encoder.setProperties(0, true, true)), false), 1e-8);
+        assertEquals(1.0 / 0, instance.calcWeight(createEdge(0, encoder.setProperties(0, true, true)), false, EdgeIterator.NO_EDGE), 1e-8);
     }
 
     EdgeIterator createEdge( final double distance, final long flags )

File: core/src/main/java/com/graphhopper/storage/TurnCostStorage.java
Patch:
@@ -174,6 +174,9 @@ public void setTurnCosts( int nodeIndex, int from, int to, int flags )
         turnCosts.setInt(costsBase + TC_NEXT, NO_COST_ENTRY);
     }
 
+    /**
+     * @return turn flags of the specified node and edge properties.
+     */
     public int getTurnCosts( int node, int edgeFrom, int edgeTo )
     {
         if (edgeFrom != EdgeIterator.NO_EDGE && edgeTo != EdgeIterator.NO_EDGE)

File: core/src/main/java/com/graphhopper/storage/GraphBuilder.java
Patch:
@@ -44,7 +44,7 @@ public GraphBuilder( EncodingManager encodingManager )
      * <p/>
      * @see LevelGraph
      */
-    GraphBuilder setLevelGraph( boolean level )
+    public GraphBuilder setLevelGraph( boolean level )
     {
         this.level = level;
         return this;
@@ -103,7 +103,7 @@ public LevelGraphStorage levelGraphCreate()
      * Afterwards you'll need to call GraphStorage.create to have a useable object. Better use
      * create.
      */
-    GraphStorage build()
+    public GraphStorage build()
     {
         Directory dir;
         if (mmap)

File: tools/src/main/java/com/graphhopper/tools/Measurement.java
Patch:
@@ -116,7 +116,7 @@ void start( CmdArgs args )
         if ("true".equals(g.getProperties().get("prepare.done")))
             throw new IllegalStateException("Graph has to be unprepared but wasn't!");
 
-        String vehicleStr = args.get("osmreader.flagEncoders", "");
+        String vehicleStr = args.get("graph.flagEncoders", "");
         StopWatch sw = new StopWatch().start();
         try
         {

File: tools/src/test/java/com/graphhopper/tools/QueryTortureTest.java
Patch:
@@ -15,9 +15,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.util;
+package com.graphhopper.tools;
 
-import com.graphhopper.util.QueryTorture.Query;
+import com.graphhopper.tools.QueryTorture.Query;
 import org.junit.Test;
 import static org.junit.Assert.*;
 

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -80,7 +80,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         this.na = graph.getNodeAccess();
         prepare = hopper.getPreparation();
         encoder = hopper.getEncodingManager().getSingle();
-        weighting = hopper.createWeighting("fastest", encoder); //new PriorityWeighting(encoder);
+        weighting = hopper.createWeighting(Weighting.Params.create("fastest"), encoder);
         if (prepare == null)
             prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting);
 

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -28,7 +28,7 @@
 import com.graphhopper.util.DistanceCalcEarth;
 import com.graphhopper.util.DistancePlaneProjection;
 import com.graphhopper.util.StopWatch;
-import com.graphhopper.util.XFirstSearch;
+import com.graphhopper.util.BreadthFirstSearch;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 import java.util.Arrays;
@@ -350,7 +350,7 @@ public QueryResult findClosest( final double queryLat, final double queryLon,
         res.setClosestNode(id);
         res.setQueryDistance(distCalc.calcNormalizedDist(queryLat, queryLon, mainLat, mainLon));
         goFurtherHook(id);
-        new XFirstSearch()
+        new BreadthFirstSearch()
         {
             @Override
             protected GHBitSet createBitSet()
@@ -377,7 +377,7 @@ protected boolean goFurther( int baseNode )
 
                 return currNormedDist < maxRasterWidth2InMeterNormed;
             }
-        }.start(graph.createEdgeExplorer(), id, false);
+        }.start(graph.createEdgeExplorer(), id);
 
         // denormalize distance
         res.setQueryDistance(distCalc.calcDenormalizedDist(res.getQueryDistance()));

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -812,7 +812,7 @@ protected boolean check( int node, double normedDist, int wayIndex, EdgeIterator
                         }
                         return false;
                     }
-                }.start(explorer, networkEntryNodeId, false);
+                }.start(explorer, networkEntryNodeId);
                 return true;
             }
         });
@@ -830,7 +830,7 @@ protected boolean check( int node, double normedDist, int wayIndex, EdgeIterator
     /**
      * Make it possible to collect nearby location also for other purposes.
      */
-    protected abstract class XFirstSearchCheck extends XFirstSearch
+    protected abstract class XFirstSearchCheck extends BreadthFirstSearch
     {
         boolean goFurther = true;
         double currNormedDist;

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -28,7 +28,7 @@
 import com.graphhopper.util.DistanceCalcEarth;
 import com.graphhopper.util.DistancePlaneProjection;
 import com.graphhopper.util.StopWatch;
-import com.graphhopper.util.XFirstSearch;
+import com.graphhopper.util.BreadthFirstSearch;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 import java.util.Arrays;
@@ -350,7 +350,7 @@ public QueryResult findClosest( final double queryLat, final double queryLon,
         res.setClosestNode(id);
         res.setQueryDistance(distCalc.calcNormalizedDist(queryLat, queryLon, mainLat, mainLon));
         goFurtherHook(id);
-        new XFirstSearch()
+        new BreadthFirstSearch()
         {
             @Override
             protected GHBitSet createBitSet()
@@ -377,7 +377,7 @@ protected boolean goFurther( int baseNode )
 
                 return currNormedDist < maxRasterWidth2InMeterNormed;
             }
-        }.start(graph.createEdgeExplorer(), id, false);
+        }.start(graph.createEdgeExplorer(), id);
 
         // denormalize distance
         res.setQueryDistance(distCalc.calcDenormalizedDist(res.getQueryDistance()));

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -812,7 +812,7 @@ protected boolean check( int node, double normedDist, int wayIndex, EdgeIterator
                         }
                         return false;
                     }
-                }.start(explorer, networkEntryNodeId, false);
+                }.start(explorer, networkEntryNodeId);
                 return true;
             }
         });
@@ -830,7 +830,7 @@ protected boolean check( int node, double normedDist, int wayIndex, EdgeIterator
     /**
      * Make it possible to collect nearby location also for other purposes.
      */
-    protected abstract class XFirstSearchCheck extends XFirstSearch
+    protected abstract class XFirstSearchCheck extends BreadthFirstSearch
     {
         boolean goFurther = true;
         double currNormedDist;

File: core/src/main/java/com/graphhopper/util/Measurement.java
Patch:
@@ -70,12 +70,12 @@ protected void ensureNotLoaded()
 
         public void doPostProcessing()
         {
-            // re-create index to avoid bug as pickNode in locationIndex.prepare could be wrong while indexing if level is not taken into account and assumed to be 0 for pre-initialized graph
-            setLocationIndex(createLocationIndex(new RAMDirectory()));
+            // re-create index to avoid bug as pickNode in locationIndex.prepare could be wrong while indexing if level is not taken into account and assumed to be 0 for pre-initialized graph            
             StopWatch sw = new StopWatch().start();
             int edges = getGraph().getAllEdges().getMaxId();
             initCHPrepare();
             super.prepare();
+            setLocationIndex(createLocationIndex(new RAMDirectory()));
             put("prepare.time", sw.stop().getTime());
             put("prepare.shortcuts", getGraph().getAllEdges().getMaxId() - edges);
         }

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -425,8 +425,7 @@ void loadGraphStorage()
         {
             protected Path saveDoInBackground( Void... v ) throws Exception
             {
-                GraphHopper tmpHopp = new GraphHopper().forMobile();
-                tmpHopp.setCHWeighting("fastest");
+                GraphHopper tmpHopp = new GraphHopper().forMobile();                
                 tmpHopp.load(new File(mapsFolder, currentArea).getAbsolutePath());
                 log("found graph " + tmpHopp.getGraph().toString() + ", nodes:" + tmpHopp.getGraph().getNodes());
                 hopper = tmpHopp;

File: core/src/main/java/com/graphhopper/util/Measurement.java
Patch:
@@ -119,13 +119,13 @@ void start( CmdArgs args )
 
             // Route via dijkstrabi. Normal routing takes a lot of time => smaller query number than CH
             // => values are not really comparable to routingCH as e.g. the mean distance etc is different            
-            hopper.disableCH();
+            hopper.setCHEnable(false);
             printTimeOfRouteQuery(hopper, count / 20, "routing", vehicleStr);
 
             System.gc();
 
             // route via CH. do preparation before                        
-            hopper.setCHWeighting("fastest");
+            hopper.setCHEnable(true);
             hopper.doPostProcessing();
             printTimeOfRouteQuery(hopper, count, "routingCH", vehicleStr);
             logger.info("store into " + propLocation);

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -99,7 +99,7 @@ public GraphHopperTest( String osmFile )
             setOSMFile(osmFile);
             setGraphHopperLocation(dir);
             setEncodingManager(new EncodingManager("CAR,FOOT"));
-            disableCH();
+            setCHEnable(false);
 
             carEncoder = (CarFlagEncoder) getEncodingManager().getEncoder("CAR");
             footEncoder = (FootFlagEncoder) getEncodingManager().getEncoder("FOOT");

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -25,9 +25,8 @@
  * A class which manages the translations in-memory. Translations are managed here:
  * https://docs.google.com/spreadsheet/ccc?key=0AmukcXek0JP6dGM4R1VTV2d3TkRSUFVQakhVeVBQRHc#gid=0
  * <p/>
- * and can be easily converted to a language file via: ./core/files/update_translations.sh
- * GraphHopper.csv
- * <p/>
+ * See here for more information: ./docs/core/translations.md
+ * <p>
  * @author Peter Karich
  */
 public class TranslationMap

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -169,7 +169,9 @@ protected void onCreate( Bundle savedInstanceState )
     protected void onDestroy()
     {
         super.onDestroy();
-        hopper.close();
+        if(hopper != null)
+            hopper.close();
+        
         hopper = null;
         // necessary?
         System.gc();

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -186,8 +186,9 @@ public List<GPXEntry> createGPXList()
         Instruction lastI = get(size() - 1);
         if (lastI.points.size() != 1)
             throw new IllegalStateException("Last instruction must have exactly one point but was " + lastI.points.size());
-        double lastLat = lastI.getFirstLat(), lastLon = lastI.getFirstLon();
-        gpxList.add(new GPXEntry(lastLat, lastLon, timeOffset));
+        double lastLat = lastI.getFirstLat(), lastLon = lastI.getFirstLon(), 
+                lastEle = lastI.getPoints().is3D() ? lastI.getFirstEle() : Double.NaN;
+        gpxList.add(new GPXEntry(lastLat, lastLon, lastEle, timeOffset));
         return gpxList;
     }
 

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -222,8 +222,8 @@ protected long calcMillis( double distance, long flags, boolean revert )
                     + "Reverse:" + revert + ", fwd:" + encoder.isBool(flags, FlagEncoder.K_FORWARD) + ", bwd:" + encoder.isBool(flags, FlagEncoder.K_BACKWARD));
 
         double speed = revert ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
-        if (Double.isInfinite(speed) || Double.isNaN(speed))
-            throw new IllegalStateException("Invalid speed stored in edge!");
+        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
+            throw new IllegalStateException("Invalid speed stored in edge! " + speed);
 
         return (long) (distance * 3600 / speed);
     }
@@ -465,7 +465,7 @@ public void next( EdgeIteratorState edge, int index )
                 else
                 {
                     int beforeLast = wayGeo.getSize() - 2;
-                    prevOrientation = ac.calcOrientation(wayGeo.getLatitude(beforeLast), wayGeo.getLongitude(beforeLast), 
+                    prevOrientation = ac.calcOrientation(wayGeo.getLatitude(beforeLast), wayGeo.getLongitude(beforeLast),
                             adjLat, adjLon);
                 }
 

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -195,7 +195,7 @@ public void testCalcIfEmptyWay()
     {
         Graph graph = createTestGraph();
         Path p = prepareGraph(graph).createAlgo().calcPath(0, 0);
-        assertEquals(p.toString(), 0, p.calcNodes().size());
+        assertEquals(p.calcNodes().toString(), 0, p.calcNodes().size());
         assertEquals(p.toString(), 0, p.getDistance(), 1e-4);
     }
 
@@ -637,7 +637,7 @@ public double getMinWeight( double distance )
             }
 
             @Override
-            public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId)
+            public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
             {
                 int adj = edgeState.getAdjNode();
                 int base = edgeState.getBaseNode();

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -55,7 +55,7 @@ public class QueryGraph implements Graph
     private List<QueryResult> queryResults;
     /**
      * Virtual edges are created between existing graph and new virtual tower nodes. For every
-     * virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap
+     * virtual node there are 4 edges: base-snap, snap-base, snap-adj, adj-snap.
      */
     private List<EdgeIteratorState> virtualEdges;
     private final static int VE_BASE = 0, VE_BASE_REV = 1, VE_ADJ = 2, VE_ADJ_REV = 3;
@@ -242,9 +242,9 @@ private void createEdges( GHPoint3D prevSnapped, int prevWayIndex, GHPoint3D cur
         int virtEdgeId = virtualEdges.size() + mainEdges;
 
         // edges between base and snapped point
-        VirtualEdgeIState baseEdge = new VirtualEdgeIState(virtEdgeId + VE_BASE, prevNodeId, nodeId,
+        VirtualEdgeIState baseEdge = new VirtualEdgeIState(virtEdgeId, prevNodeId, nodeId,
                 baseDistance, closestEdge.getFlags(), closestEdge.getName(), basePoints);
-        VirtualEdgeIState baseReverseEdge = new VirtualEdgeIState(virtEdgeId + VE_BASE_REV, nodeId, prevNodeId,
+        VirtualEdgeIState baseReverseEdge = new VirtualEdgeIState(virtEdgeId, nodeId, prevNodeId,
                 baseDistance, reverseFlags, closestEdge.getName(), baseReversePoints);
 
         virtualEdges.add(baseEdge);

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -98,9 +98,8 @@ public List<GHPoint> getPoints()
     }
 
     /**
-     * Possible values: astar (A* algorithm, default), astarbi (bidirectional A*) dijkstra
-     * (Dijkstra), dijkstrabi and dijkstraNativebi (a bit faster bidirectional Dijkstra). Or specify
-     * empty to use default.
+     * Possible values: astar (A* algorithm, default), astarbi (bidirectional A*), dijkstra
+     * (Dijkstra) or dijkstrabi. Or specify empty to use default.
      */
     public GHRequest setAlgorithm( String algo )
     {

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -881,7 +881,7 @@ OSMTurnRelation createTurnRelation( OSMRelation relation )
                     viaNodeID = member.ref();
                 }
             }
-            if (type != OSMTurnRelation.Type.UNSUPPORTED && fromWayID >= 0 && toWayID >= 0 && viaNodeID >= 0)
+            if (fromWayID >= 0 && toWayID >= 0 && viaNodeID >= 0)
             {
                 return new OSMTurnRelation(fromWayID, viaNodeID, toWayID, type);
             }

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -32,8 +32,7 @@ public NoOpAlgorithmPreparation()
 
     /**
      * Creates a preparation wrapper for the specified algorithm. Possible values for algorithmStr:
-     * astar (A* algorithm), astarbi (bidirectional A*) dijkstra (Dijkstra), dijkstrabi and
-     * dijkstraNativebi (a bit faster bidirectional Dijkstra).
+     * astar (A* algorithm), astarbi (bidirectional A*), dijkstra (Dijkstra) or dijkstrabi.
      */
     public static AlgorithmPreparation createAlgoPrepare( Graph g, final String algorithmStr,
             FlagEncoder encoder, Weighting weighting, boolean edgeBased )

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -120,7 +120,6 @@ public static Collection<Entry<AlgorithmPreparation, LocationIndex>> createAlgos
         prepare.add(new ME(createAlgoPrepare(g, "astar", encoder, weighting, edgeBased), idx));
         // prepare.add(new ME(createAlgoPrepare(g, "dijkstraOneToMany", encoder, weighting, edgeBased), idx));
         prepare.add(new ME(createAlgoPrepare(g, "astarbi", encoder, weighting, edgeBased), idx));
-        prepare.add(new ME(createAlgoPrepare(g, "dijkstraNativebi", encoder, weighting, edgeBased), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstrabi", encoder, weighting, edgeBased), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstra", encoder, weighting, edgeBased), idx));
 

File: core/src/main/java/com/graphhopper/util/EdgeWrapper.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.routing.DijkstraBidirection;
 import gnu.trove.map.hash.TIntIntHashMap;
 import java.util.Arrays;
 

File: core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
Patch:
@@ -71,15 +71,15 @@ public AlgorithmPreparation prepareGraph( Graph defaultGraph, final FlagEncoder
 
     protected GraphStorage createGraph( EncodingManager em )
     {
-        return new GraphBuilder(em).setTurnCosts(true).create();
+        return new GraphBuilder(em).create();
     }
 
     // 0---1
     // |   /
     // 2--3--4
     // |  |  |
     // 5--6--7
-    private void initGraph( Graph g )
+    public static void initGraph( Graph g )
     {
         g.edge(0, 1, 3, true);
         g.edge(0, 2, 1, true);

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -82,7 +82,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         encoder = hopper.getEncodingManager().getSingle();
         weighting = hopper.createWeighting("fastest", encoder); //new PriorityWeighting(encoder);
         if (prepare == null)
-            prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting, hopper.hasTurnCosts());
+            prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting, encoder.supportsTurnCosts());
 
         logger.info("locations:" + graph.getNodes() + ", debug:" + debug + ", algo:" + prepare.createAlgo().getName());
         mg = new GraphicsWrapper(graph);

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -45,9 +45,9 @@ public abstract class AbstractBidirAlgo extends AbstractRoutingAlgorithm
 
     abstract boolean fillEdgesTo();
 
-    public AbstractBidirAlgo( Graph graph, FlagEncoder encoder, Weighting weighting )
+    public AbstractBidirAlgo( Graph graph, FlagEncoder encoder, Weighting weighting, boolean edgeBased )
     {
-        super(graph, encoder, weighting);
+        super(graph, encoder, weighting, edgeBased);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirection.java
Patch:
@@ -56,9 +56,9 @@ public class DijkstraBidirection extends AbstractBidirAlgo
     private EdgeWrapper parentRefTo;
     private PathBidir nativeBestPath;
 
-    public DijkstraBidirection( Graph graph, FlagEncoder encoder, Weighting weighting )
+    public DijkstraBidirection( Graph graph, FlagEncoder encoder, Weighting weighting, boolean edgeBased )
     {
-        super(graph, encoder, weighting);
+        super(graph, encoder, weighting, edgeBased);
         initCollections(1000);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -58,12 +58,12 @@ public class BikeCommonFlagEncoder extends AbstractFlagEncoder
      */
     protected BikeCommonFlagEncoder()
     {
-        this(4, 2);
+        this(4, 2, 0);
     }
 
-    protected BikeCommonFlagEncoder( int speedBits, double speedFactor )
+    protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
     {
-        super(speedBits, speedFactor);
+        super(speedBits, speedFactor, maxTurnCosts);
         // strict set, usually vehicle and agricultural/forestry are ignored by cyclists
         restrictions = new ArrayList<String>(Arrays.asList("bicycle", "access"));
         restrictedValues.add("private");

File: core/src/main/java/com/graphhopper/routing/util/EncodedDoubleValue.java
Patch:
@@ -69,7 +69,7 @@ public long setDoubleValue( long flags, double value )
 
     public double getDoubleValue( long flags )
     {
-        // find value        
+        // find value
         flags &= mask;
         flags >>= shift;
         return flags * factor;

File: core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder
 {
-    MountainBikeFlagEncoder()
+    public MountainBikeFlagEncoder()
     {
         setTrackTypeSpeed("grade1", 18); // paved
         setTrackTypeSpeed("grade2", 16); // now unpaved ...

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -36,9 +36,9 @@ public NoOpAlgorithmPreparation()
      * dijkstraNativebi (a bit faster bidirectional Dijkstra).
      */
     public static AlgorithmPreparation createAlgoPrepare( Graph g, final String algorithmStr,
-            FlagEncoder encoder, Weighting weighting )
+            FlagEncoder encoder, Weighting weighting, boolean edgeBased )
     {
-        return p(new RoutingAlgorithmFactory(algorithmStr, false), encoder, weighting).setGraph(g);
+        return p(new RoutingAlgorithmFactory(algorithmStr, false, edgeBased), encoder, weighting).setGraph(g);
     }
 
     private static AlgorithmPreparation p( final RoutingAlgorithmFactory factory,

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -29,7 +29,7 @@
  */
 public class RacingBikeFlagEncoder extends BikeCommonFlagEncoder
 {
-    RacingBikeFlagEncoder()
+    public RacingBikeFlagEncoder()
     {
         preferHighwayTags.add("road");
         preferHighwayTags.add("secondary");

File: core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
Patch:
@@ -73,7 +73,7 @@ public final void setNode( int index, double lat, double lon, double ele )
         if (lon < that.bounds.minLon)
             that.bounds.minLon = lon;
 
-        //set the default value for the additional field of this node
+        // set the default value for the additional field of this node
         if (that.extStorage.isRequireNodeField())
             that.nodes.setInt(tmp + that.N_ADDITIONAL, that.extStorage.getDefaultNodeFieldValue());
     }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1355,6 +1355,7 @@ public boolean loadExisting()
         checkInit();
         if (edges.loadExisting())
         {
+            // edges loaded properly so the other storages have to load or the file is corrupt.
             if (!nodes.loadExisting())
                 throw new IllegalStateException("cannot load nodes. corrupt file or directory? " + dir);
 

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -51,7 +51,7 @@ public class Constants
     public static final String OS_VERSION = System.getProperty("os.version");
     public static final String JAVA_VENDOR = System.getProperty("java.vendor");
     public static final int VERSION_NODE = 3;
-    public static final int VERSION_EDGE = 6;
+    public static final int VERSION_EDGE = 7;
     public static final int VERSION_GEOMETRY = 3;
     public static final int VERSION_LOCATION_IDX = 2;
     public static final int VERSION_NAME_IDX = 2;

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -115,7 +115,7 @@ public static Set<Integer> getNeighbors( EdgeIterator iter )
         }
         return list;
     }
-    
+
     public static List<Integer> getEdgeIds( EdgeIterator iter )
     {
         List<Integer> list = new ArrayList<Integer>();

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionTest.java
Patch:
@@ -33,7 +33,7 @@ public AlgorithmPreparation prepareGraph( Graph defaultGraph, final FlagEncoder
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new DijkstraBidirection(_graph, encoder, w);
+                return new DijkstraBidirection(_graph, encoder, w, false);
             }
         }.setGraph(defaultGraph);
     }

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -68,7 +68,7 @@ protected LevelGraph createGraph( EncodingManager em, boolean is3D )
     @Override
     public PrepareContractionHierarchies prepareGraph( Graph g, FlagEncoder encoder, Weighting w )
     {
-        PrepareContractionHierarchies ch = new PrepareContractionHierarchies(encoder, w).setGraph(g);
+        PrepareContractionHierarchies ch = new PrepareContractionHierarchies(encoder, w, false).setGraph(g);
         // hack: prepare matrixgraph only once
         if (g != preparedMatrixGraph)
             ch.doWork();
@@ -114,7 +114,7 @@ public void testPathRecursiveUnpacking()
         g2.setLevel(7, 6);
         g2.setLevel(0, 7);
 
-        Path p = new PrepareContractionHierarchies(encoder, new ShortestWeighting()).
+        Path p = new PrepareContractionHierarchies(encoder, new ShortestWeighting(), false).
                 setGraph(g2).createAlgo().calcPath(0, 7);
 
         assertEquals(Helper.createTList(0, 2, 5, 7), p.calcNodes());

File: core/src/test/java/com/graphhopper/routing/util/EncodedDoubleValueTest.java
Patch:
@@ -53,7 +53,7 @@ public void testMaxValueAndSwap()
         long swappedFlags = instance1.swap(flags, instance2);
         assertEquals(expectedFlags, swappedFlags);
 
-        CarFlagEncoder carEncoder = new CarFlagEncoder(8, 0.5);
+        CarFlagEncoder carEncoder = new CarFlagEncoder(8, 0.5, 0);
         new EncodingManager(carEncoder);
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "motorway_link");

File: core/src/test/java/com/graphhopper/storage/GraphHopperStorageWithTurnCostsTest.java
Patch:
@@ -65,9 +65,9 @@ public void testSave_and_fileFormat_withTurnCostEntries() throws IOException
         graph.edge(9, 11, 200, true);
         graph.edge(1, 2, 120, false);
 
-        turnCostStorage.setTurnCosts(0, iter1.getEdge(), iter2.getEdge(), 1337);
-        turnCostStorage.setTurnCosts(0, iter2.getEdge(), iter1.getEdge(), 666);
-        turnCostStorage.setTurnCosts(1, iter1.getEdge(), iter2.getEdge(), 815);
+        turnCostStorage.addTurnInfo(0, iter1.getEdge(), iter2.getEdge(), 1337);
+        turnCostStorage.addTurnInfo(0, iter2.getEdge(), iter1.getEdge(), 666);
+        turnCostStorage.addTurnInfo(1, iter1.getEdge(), iter2.getEdge(), 815);
 
         iter1.setName("named street1");
         iter2.setName("named street2");

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -444,7 +444,7 @@ public void processRelation( OSMRelation relation ) throws XMLStreamException
             OSMTurnRelation turnRelation = createTurnRelation(relation);
             if (turnRelation != null)
             {
-                ExtendedStorage extendedStorage = ((GraphHopperStorage) graphStorage).getExtendedStorage();
+                ExtendedStorage extendedStorage = graphStorage.getExtendedStorage();
                 if (extendedStorage instanceof TurnCostStorage)
                 {
                     Collection<TurnCostTableEntry> entries = encodingManager.analyzeTurnRelation(turnRelation, this);

File: core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
Patch:
@@ -42,12 +42,12 @@ public double getMinWeight( double distance )
     }
 
     @Override
-    public double calcWeight( EdgeIteratorState edge, boolean reverse )
+    public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId)
     {
-        double speed = reverse ? encoder.getReverseSpeed(edge.getFlags()) : encoder.getSpeed(edge.getFlags());
+        double speed = reverse ? encoder.getReverseSpeed(edgeState.getFlags()) : encoder.getSpeed(edgeState.getFlags());
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
-        return edge.getDistance() / speed;
+        return edgeState.getDistance() / speed;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -26,7 +26,7 @@
  * <p/>
  * @author Peter Karich
  */
-public interface FlagEncoder
+public interface FlagEncoder extends TurnCostEncoder
 {
     /**
      * @return the maximum speed in km/h

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -33,11 +33,11 @@ public PriorityWeighting( FlagEncoder encoder )
     }
 
     @Override
-    public double calcWeight( EdgeIteratorState edge, boolean reverse )
+    public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
     {
-        double weight = super.calcWeight(edge, reverse);
+        double weight = super.calcWeight(edgeState, reverse, prevOrNextEdgeId);
         if (Double.isInfinite(weight))
             return Double.POSITIVE_INFINITY;
-        return weight / (0.5 + encoder.getDouble(edge.getFlags(), BikeCommonFlagEncoder.K_PRIORITY));
+        return weight / (0.5 + encoder.getDouble(edgeState.getFlags(), BikeCommonFlagEncoder.K_PRIORITY));
     }
 }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -96,7 +96,8 @@ public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boole
         this(dir, encodingManager, withElevation, new ExtendedStorage.NoExtendedStorage());
     }
 
-    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean withElevation, ExtendedStorage extendedStorage )
+    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean withElevation, 
+            ExtendedStorage extendedStorage )
     {
         // here encoding manager can be null e.g. if we want to load existing graph
         this.encodingManager = encodingManager;
@@ -1536,6 +1537,7 @@ public boolean isClosed()
         return nodes.isClosed();
     }
     
+    @Override
     public ExtendedStorage getExtendedStorage()
     {
         return extStorage;

File: core/src/main/java/com/graphhopper/storage/TurnCostStorage.java
Patch:
@@ -177,7 +177,7 @@ public void setTurnCosts( int nodeIndex, int from, int to, int flags )
     /**
      * @return turn flags of the specified node and edge properties.
      */
-    public int getTurnCosts( int node, int edgeFrom, int edgeTo )
+    public int getTurnCostsFlags( int node, int edgeFrom, int edgeTo )
     {
         if (edgeFrom != EdgeIterator.NO_EDGE && edgeTo != EdgeIterator.NO_EDGE)
         {

File: core/src/test/java/com/graphhopper/routing/util/FastestWeightingTest.java
Patch:
@@ -34,18 +34,18 @@ public void testMinWeightHasSameUnitAs_getWeight()
     {
         FastestWeighting instance = new FastestWeighting(encoder);
         long flags = encoder.setProperties(encoder.getMaxSpeed(), true, true);
-        assertEquals(instance.getMinWeight(10), instance.calcWeight(createEdge(10, flags), false), 1e-8);
+        assertEquals(instance.getMinWeight(10), instance.calcWeight(createEdge(10, flags), false, EdgeIterator.NO_EDGE), 1e-8);
     }
 
     @Test
     public void testSpeed0()
     {
         FastestWeighting instance = new FastestWeighting(encoder);
 
-        assertEquals(1.0 / 0, instance.calcWeight(createEdge(10, encoder.setProperties(0, true, true)), false), 1e-8);
+        assertEquals(1.0 / 0, instance.calcWeight(createEdge(10, encoder.setProperties(0, true, true)), false, EdgeIterator.NO_EDGE), 1e-8);
 
         // 0 / 0 returns NaN but calcWeight should not return NaN!
-        assertEquals(1.0 / 0, instance.calcWeight(createEdge(0, encoder.setProperties(0, true, true)), false), 1e-8);
+        assertEquals(1.0 / 0, instance.calcWeight(createEdge(0, encoder.setProperties(0, true, true)), false, EdgeIterator.NO_EDGE), 1e-8);
     }
 
     EdgeIterator createEdge( final double distance, final long flags )

File: core/src/main/java/com/graphhopper/storage/TurnCostStorage.java
Patch:
@@ -174,6 +174,9 @@ public void setTurnCosts( int nodeIndex, int from, int to, int flags )
         turnCosts.setInt(costsBase + TC_NEXT, NO_COST_ENTRY);
     }
 
+    /**
+     * @return turn flags of the specified node and edge properties.
+     */
     public int getTurnCosts( int node, int edgeFrom, int edgeTo )
     {
         if (edgeFrom != EdgeIterator.NO_EDGE && edgeTo != EdgeIterator.NO_EDGE)

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -192,9 +192,9 @@ public void setDistance( int index, double dist )
         public List<QueryResult> getList( LocationIndex idx, EdgeFilter edgeFilter )
         {
             List<QueryResult> qr = new ArrayList<QueryResult>();
-            for (AssumptionPerPath or : assumptions)
+            for (AssumptionPerPath p : assumptions)
             {
-                qr.add(idx.findClosest(or.lat, or.lon, edgeFilter));
+                qr.add(idx.findClosest(p.lat, p.lon, edgeFilter));
             }
             return qr;
         }

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -45,7 +45,7 @@
  * <p/>
  * @author Peter Karich
  */
-public class Location2IDQuadtree implements LocationIndex
+class Location2IDQuadtree implements LocationIndex
 {
     private final static int MAGIC_INT = Integer.MAX_VALUE / 12306;
     private final Logger logger = LoggerFactory.getLogger(getClass());

File: core/src/main/java/com/graphhopper/storage/index/QueryResult.java
Patch:
@@ -119,7 +119,6 @@ public Position getSnappedPosition()
      */
     public boolean isValid()
     {
-        // Location2IDQuadtree does not support edges
         return closestNode >= 0;
     }
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -254,7 +254,7 @@ public void testMonacoRacingBike()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
-                list, "CAR,BIKE,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
+                list, "BIKE,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -271,7 +271,7 @@ public void testKremsBikeRelation()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
-                list, "CAR,BIKE,MTB", false, "BIKE", "fastest", false);
+                list, "BIKE,MTB", false, "BIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -288,7 +288,7 @@ public void testKremsMountainBikeRelation()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
-                list, "CAR,BIKE,MTB", false, "MTB", "fastest", false);
+                list, "BIKE,MTB", false, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeSCTest.java
Patch:
@@ -151,7 +151,7 @@ public void testLevelGraphBug()
         index.setResolution(100000);
         index.prepareIndex();
         // very close to 2, but should match the edge 0--1
-        TIntHashSet set = index.findNetworkEntries(0.51, 0.2);
+        TIntHashSet set = index.findNetworkEntries(0.51, 0.2, index.maxRegionSearch);
         TIntSet expectedSet = new TIntHashSet();
         expectedSet.add(1);
         expectedSet.add(2);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -84,6 +84,7 @@ public static void main( String[] strs ) throws Exception
     private boolean searchRegion = true;
     // for prepare
     private int minNetworkSize = 200;
+    private int minOnewayNetworkSize = 0;
     // for CH prepare
     private AlgorithmPreparation prepare;
     private boolean doPrepare = true;
@@ -540,6 +541,7 @@ else if (eleProviderStr.equalsIgnoreCase("cgiar"))
 
         // optimizable prepare
         minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
+        minOnewayNetworkSize = args.getInt("prepare.minOnewayNetworkSize", minOnewayNetworkSize);
 
         // prepare CH
         doPrepare = args.getBool("prepare.doPrepare", doPrepare);
@@ -1007,6 +1009,7 @@ protected void cleanUp()
         int prev = graph.getNodes();
         PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph, encodingManager);
         preparation.setMinNetworkSize(minNetworkSize);
+        preparation.setMinOnewayNetworkSize(this.minOnewayNetworkSize);
         logger.info("start finding subnetworks, " + Helper.getMemInfo());
         preparation.doWork();
         int n = graph.getNodes();

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -232,7 +232,7 @@ void checkOne()
             throw new IllegalStateException("Instruction must contain at least one point " + toString());
     }
 
-    String getTurnDescription( Translation tr )
+    public String getTurnDescription( Translation tr )
     {
         String str;
         String n = getName();

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -37,7 +37,7 @@
 public class BikeCommonFlagEncoder extends AbstractFlagEncoder
 {
     protected static final int PUSHING_SECTION_SPEED = 4;
-    private int unpavedBit = 0;
+    private long unpavedBit = 0;
     // Pushing section heighways are parts where you need to get off your bike and push it (German: Schiebestrecke)
     protected final HashSet<String> pushingSections = new HashSet<String>();
     protected final HashSet<String> oppositeLanes = new HashSet<String>();
@@ -199,7 +199,7 @@ public int defineWayBits( int index, int shift )
         speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, highwaySpeed.get("cycleway"), 30);
         shift += speedEncoder.getBits();
 
-        unpavedBit = 1 << shift++;
+        unpavedBit = 1L << shift++;
         // 2 bits
         wayTypeEncoder = new EncodedValue("WayType", shift, 2, 1, 0, 3, true);
         shift += wayTypeEncoder.getBits();

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -37,7 +37,7 @@ public class FootFlagEncoder extends AbstractFlagEncoder
     static final int SLOW_SPEED = 2;
     static final int MEAN_SPEED = 5;
     static final int FERRY_SPEED = 10;
-    private int safeWayBit = 0;
+    private long safeWayBit = 0;
     protected HashSet<String> sidewalks = new HashSet<String>();
     private final Set<String> safeHighwayTags = new HashSet<String>();
     private final Set<String> allowedHighwayTags = new HashSet<String>();
@@ -108,7 +108,7 @@ public int defineWayBits( int index, int shift )
         speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, MEAN_SPEED, FERRY_SPEED);
         shift += speedBits;
 
-        safeWayBit = 1 << shift++;
+        safeWayBit = 1L << shift++;
         return shift;
     }
 

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -201,7 +201,7 @@ private byte getShift( int entries )
 
     private long getBitmask( int shift )
     {
-        long bm = (1 << shift) - 1;
+        long bm = (1L << shift) - 1;
         if (bm <= 0)
         {
             throw new IllegalStateException("invalid bitmask:" + bm);

File: core/src/main/java/com/graphhopper/util/BitUtilBig.java
Patch:
@@ -134,7 +134,7 @@ public String toBitString( byte[] bytes )
      */
     final long reversePart( long v, int maxBits )
     {
-        long rest = v & (~((1 << maxBits) - 1));
+        long rest = v & (~((1L << maxBits) - 1));
         return rest | reverse(v, maxBits);
     }
 

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -19,7 +19,6 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.routing.AbstractRoutingAlgorithmTester;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -140,7 +140,7 @@ long fillGPXList( List<GPXEntry> list, long time,
         double ele = Double.NaN;
         boolean is3D = points.is3D();
         if (is3D)
-            ele = points.getLongitude(0);
+            ele = points.getElevation(0);
 
         for (int i = 0; i < len; i++)
         {

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -254,7 +254,7 @@ public void testMonacoRacingBike()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
-                list, "CAR,BIKE,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
+                list, "CAR,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -271,7 +271,7 @@ public void testKremsBikeRelation()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
-                list, "CAR,BIKE,MTB", false, "BIKE", "fastest", false);
+                list, "CAR,BIKE", false, "BIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -288,7 +288,7 @@ public void testKremsMountainBikeRelation()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
-                list, "CAR,BIKE,MTB", false, "MTB", "fastest", false);
+                list, "CAR,MTB", false, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -479,7 +479,7 @@ private Marker createMarker( LatLong p, int resource )
     {
         Drawable drawable = getResources().getDrawable(resource);
         Bitmap bitmap = AndroidGraphicFactory.convertToBitmap(drawable);
-        return new Marker(p, bitmap, -bitmap.getHeight(), -bitmap.getWidth() / 2);
+        return new Marker(p, bitmap, 0, -bitmap.getHeight() / 2);
     }
 
     public void calcPath( final double fromLat, final double fromLon,

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -174,9 +174,9 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo()
             List<Map<String, Object>> resultJson = il.createJson();
 
             assertEquals("Continue onto Obere Landstraße", resultJson.get(0).get("text"));
-            assertEquals("Pushing section", resultJson.get(0).get("annotationText"));
+            assertEquals("get off the bike", resultJson.get(0).get("annotationText"));
             assertEquals("Turn sharp left onto Kirchengasse", resultJson.get(1).get("text"));
-            assertEquals("Pushing section", resultJson.get(1).get("annotationText"));
+            assertEquals("get off the bike", resultJson.get(1).get("annotationText"));
 
             assertEquals("Turn sharp right onto Pfarrplatz", resultJson.get(2).get("text"));
             assertEquals("Turn right onto Margarethenstraße", resultJson.get(3).get("text"));
@@ -189,7 +189,7 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo()
             assertEquals("Turn slight left onto Rechte Kremszeile", resultJson.get(10).get("text"));
             //..
             assertEquals("Turn right onto Treppelweg", resultJson.get(15).get("text"));
-            assertEquals("Cycleway", resultJson.get(15).get("annotationText"));
+            assertEquals("cycleway", resultJson.get(15).get("annotationText"));
 
         } catch (Exception ex)
         {

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -86,7 +86,7 @@ void testAlgos()
 
             OneRun or = new OneRun(50.0314, 10.5105, 50.0303, 10.5070, 571, 22);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(49.51451, 9.967346, 50.2920, 10.4650, 107545, 1946);
+            or = new OneRun(49.51451, 9.967346, 50.2920, 10.4650, 107584, 1952);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
             or = new OneRun(50.0780, 9.1570, 49.5860, 9.9750, 91715, 1413);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -360,7 +360,7 @@ public EdgeIteratorState getEdgeProps( int origEdgeId, int adjNode )
 
         int edgeId = origEdgeId - mainEdges;
         EdgeIteratorState eis = virtualEdges.get(edgeId);
-        if (eis.getAdjNode() == adjNode)
+        if (eis.getAdjNode() == adjNode || adjNode == Integer.MIN_VALUE)
             return eis;
 
         // find reverse edge via convention. see virtualEdges comment above

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -83,7 +83,7 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
         if (!hopper.getEncodingManager().supports(vehicleStr))
         {
             rsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
-        } else if (elevation && !hopper.is3D())
+        } else if (elevation && !hopper.hasElevation())
         {
             rsp = new GHResponse().addError(new IllegalArgumentException("Elevation not supported!"));
         } else
@@ -174,8 +174,7 @@ private void writeJson( HttpServletRequest req, HttpServletResponse res,
                 if (points.getSize() >= 2)
                     jsonPath.put("bbox", rsp.calcRouteBBox(hopper.getGraph().getBounds()).toGeoJson());
 
-                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
-                jsonPath.put("points_dimension", includeElevation ? 3 : 2);
+                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));                
 
                 if (enableInstructions)
                 {

File: web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
Patch:
@@ -63,7 +63,6 @@ public void testBasicQuery() throws Exception
         double distance = path.getDouble("distance");
         assertTrue("distance wasn't correct:" + distance, distance > 9000);
         assertTrue("distance wasn't correct:" + distance, distance < 9500);
-        assertEquals(2, path.getInt("points_dimension"));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
Patch:
@@ -507,7 +507,7 @@ long handleBikeRelated( OSMWay way, long encoded, boolean partOfCycleRelation )
         if (isPusingSection && !partOfCycleRelation || way.hasTag("highway", "steps"))
             wayType = WayType.PUSHING_SECTION;
 
-        if ("track".equals(highway) && trackType != null && !"grade1".equals(trackType)
+        if ("track".equals(highway) && (trackType == null || !"grade1".equals(trackType))
                 || (surfaceTag == null && way.hasTag("highway", "path"))
                 || unpavedSurfaceTags.contains(surfaceTag))
         {

File: core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
Patch:
@@ -39,7 +39,7 @@ public class RacingBikeFlagEncoder extends BikeCommonFlagEncoder
         preferHighwayTags.add("residential");
 
         setTrackTypeSpeed("grade1", 20); // paved
-        setTrackTypeSpeed("grade2", 12); // now unpaved ...
+        setTrackTypeSpeed("grade2", 10); // now unpaved ...
         setTrackTypeSpeed("grade3", PUSHING_SECTION_SPEED);
         setTrackTypeSpeed("grade4", PUSHING_SECTION_SPEED);
         setTrackTypeSpeed("grade5", PUSHING_SECTION_SPEED);

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -170,7 +170,7 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo()
             assertEquals(110, rsp.getPoints().getSize());
 
             InstructionList il = rsp.getInstructions();
-            assertEquals(18, il.size());
+            assertEquals(19, il.size());
             List<Map<String, Object>> resultJson = il.createJson();
 
             assertEquals("Continue onto Obere Landstraße", resultJson.get(0).get("text"));

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -101,7 +101,7 @@ public void testHandleWayTags()
         String wayType;
         way.setTag("highway", "track");
         wayType = getWayTypeFromFlags(way);
-        assertEquals("", wayType);
+        assertEquals("way, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
@@ -149,7 +149,7 @@ public void testHandleWayTagsInfluencedByRelation()
         // unchanged
         long flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(18, encoder.getSpeed(flags), 1e-1);
-        assertEquals("", getWayTypeFromFlags(osmWay));
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay, relFlags));
         assertPriority(UNCHANGED.getValue(), osmWay, relFlags);
 
         // relation code is PREFER
@@ -159,7 +159,7 @@ public void testHandleWayTagsInfluencedByRelation()
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(18, encoder.getSpeed(flags), 1e-1);
         assertPriority(PREFER.getValue(), osmWay, relFlags);
-        assertEquals("", getWayTypeFromFlags(osmWay));
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay, relFlags));
 
         // relation code is VERY_NICE
         osmRel.setTag("network", "rcn");

File: core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
Patch:
@@ -90,7 +90,7 @@ public void testHandleWayTags()
 
         way.setTag("highway", "track");
         wayType = getWayTypeFromFlags(way);
-        assertEquals("", wayType);
+        assertEquals("way, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
@@ -144,7 +144,7 @@ public void testHandleWayTagsInfluencedByRelation()
         long flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(18, encoder.getSpeed(flags), 1e-1);
         assertPriority(PriorityCode.PREFER.getValue(), osmWay);
-        assertEquals("", getWayTypeFromFlags(osmWay));
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay));
 
         // relation code is PREFER
         osmRel.setTag("route", "bicycle");
@@ -153,7 +153,7 @@ public void testHandleWayTagsInfluencedByRelation()
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(18, encoder.getSpeed(flags), 1e-1);
         assertPriority(PriorityCode.PREFER.getValue(), osmWay);
-        assertEquals("", getWayTypeFromFlags(osmWay));
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay));
 
         // relation code is PREFER
         osmRel.setTag("network", "rcn");

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -58,7 +58,7 @@ public void testApplyWayTags()
 
         long flags = edge.getFlags();
         // decrease speed
-        assertEquals(6, instance.getSpeed(flags), 1e-1);
+        assertEquals(8, instance.getSpeed(flags), 1e-1);
         // increase speed but use maximum speed (calculated was 24)
         assertEquals(18, instance.getReverseSpeed(flags), 1e-1);
     }

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -84,7 +84,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         this.graph = hopper.getGraph();
         this.na = graph.getNodeAccess();
         prepare = hopper.getPreparation();
-        encoder = (BikeCommonFlagEncoder) hopper.getEncodingManager().getEncoder("bike");
+        encoder = (BikeCommonFlagEncoder) hopper.getEncodingManager().getEncoder("bike2");
         weighting = new PriorityWeighting(encoder);
         if (prepare == null)
             prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting);
@@ -181,6 +181,8 @@ public void paintComponent( Graphics2D g2 )
                         double lat2 = na.getLatitude(nodeId);
                         double lon2 = na.getLongitude(nodeId);
 
+                        // mg.plotText(g2, lat * 0.9 + lat2 * 0.1, lon * 0.9 + lon2 * 0.1, "s:" + (int) encoder.getSpeed(iter.getFlags()));
+
                         double prio = encoder.getPriority(iter.getFlags());
                         if (prio < 0.2)
                             g2.setColor(Color.RED.darker());

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -228,7 +228,7 @@ public String createGPX()
 
     public String createGPX( String trackName, long startTimeMillis, String timeZoneId )
     {
-        boolean includeElevation = instructions.size() > 0 ? instructions.get(0).getPoints().is3D() : false;
+        boolean includeElevation = getSize() > 0 ? get(0).getPoints().is3D() : false;
         return createGPX(trackName, startTimeMillis, timeZoneId, includeElevation);
     }
 

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -345,7 +345,7 @@ public List<GPXEntry> createGPXList()
         fakeList.clear();
         fakeList.add(new GPXEntry(12, 13, 11, 0));
         fakeList.add(new GPXEntry(12.5, 13, 10, 1000));
-        gpxStr = il.createGPX("test", 0, "GMT");
+        gpxStr = il.createGPX("test", 0, "GMT", true);
 
         assertTrue(gpxStr, gpxStr.contains("<ele>11.0</ele>"));
         assertFalse(gpxStr, gpxStr.contains("NaN"));

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -121,13 +121,14 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
 
     private void writeGPX( HttpServletRequest req, HttpServletResponse res, GHResponse rsp )
     {
+        boolean includeElevation = getBooleanParam(req, "elevation", false);
         res.setCharacterEncoding("UTF-8");
         res.setContentType("application/xml");
         String trackName = getParam(req, "track", "GraphHopper Track");
         res.setHeader("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
         String timeZone = getParam(req, "timezone", "GMT");
         long time = getLongParam(req, "millis", System.currentTimeMillis());
-        writeResponse(res, rsp.getInstructions().createGPX(trackName, time, timeZone));
+        writeResponse(res, rsp.getInstructions().createGPX(trackName, time, timeZone, includeElevation));
     }
 
     private void writeJson( HttpServletRequest req, HttpServletResponse res,

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -109,8 +109,9 @@ public GHResponse route( GHRequest request )
             JSONObject firstPath = paths.getJSONObject(0);
 
             boolean is3D = false;
-            if (firstPath.has("points_dim"))
-                is3D = "3".equals(firstPath.getString("points_dim"));
+            if (firstPath.has("points_dimension"))
+                is3D = 3 == firstPath.getInt("points_dimension");
+            
             double distance = firstPath.getDouble("distance");
             int time = firstPath.getInt("time");
             PointList pointList;

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -726,8 +726,8 @@ public Weighting createWeighting( String weighting, FlagEncoder encoder )
         weighting = weighting.toLowerCase();
         if ("fastest".equals(weighting))
         {
-            if (encoder instanceof BikeFlagCommonEncoder)
-                return new PriorityWeighting((BikeFlagCommonEncoder) encoder);
+            if (encoder instanceof BikeCommonFlagEncoder)
+                return new PriorityWeighting((BikeCommonFlagEncoder) encoder);
             else
                 return new FastestWeighting(encoder);
         }

File: core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
Patch:
@@ -27,9 +27,9 @@
  */
 public class PriorityWeighting extends FastestWeighting
 {
-    private final BikeFlagCommonEncoder encoder;
+    private final BikeCommonFlagEncoder encoder;
 
-    public PriorityWeighting( BikeFlagCommonEncoder encoder )
+    public PriorityWeighting( BikeCommonFlagEncoder encoder )
     {
         super(encoder);
         this.encoder = encoder;
@@ -41,6 +41,6 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse )
         double weight = super.calcWeight(edge, reverse);
         if (Double.isInfinite(weight))
             return Double.POSITIVE_INFINITY;
-        return weight * (0.6 + 0.4 * encoder.getPriority(edge.getFlags()));
+        return weight / (0.5 + 4 * encoder.getPriority(edge.getFlags()));
     }
 }

File: core/src/main/java/com/graphhopper/util/PathMerger.java
Patch:
@@ -21,7 +21,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.routing.Path;
 import java.util.List;
-import java.util.Locale;
 
 /**
  * This class merges a list of points into one point recognizing the specified places.
@@ -44,7 +43,6 @@ public void doWork( GHResponse rsp, List<Path> paths, Translation tr )
         double fullDistance = 0;
         boolean allFound = true;
 
-        
         InstructionList fullInstructions = new InstructionList(tr);
         PointList fullPoints = PointList.EMPTY;
         for (int pathIndex = 0; pathIndex < paths.size(); pathIndex++)

File: core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
Patch:
@@ -185,7 +185,7 @@ public void applyWayTags( OSMWay way, EdgeIteratorState edge )
             {
                 double speedReverse = getReverseSpeed(flags);
                 double bwFaster = keepIn(11.1 * fwdInc * fwdInc + 1, 1, 2);
-                double bwSlower = keepIn(-8.3 * fwdDec * fwdDec + 1, 1 / 4, 1);
+                double bwSlower = keepIn(-8.3 * fwdDec * fwdDec + 1, 0.25, 1);
                 speedReverse = speedReverse * (bwFaster * incDist2DSum + bwSlower * decDist2DSum + 1 * restDist2D) / fullDist2D;
                 flags = this.setReverseSpeed(flags, keepIn(speedReverse, PUSHING_SECTION_SPEED, maxSpeed));
             }

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -50,6 +50,7 @@ public TestAlgoCollector assertDistance( AlgorithmPreparation prepare, List<Quer
         for (int i = 0; i < queryList.size() - 1; i++)
         {
             Path path = prepare.createAlgo().calcPath(queryList.get(i), queryList.get(i + 1));
+            // System.out.println(path.calcInstructions().createGPX("temp", 0, "GMT"));
             viaPaths.add(path);
         }
         PathMerger pathMerger = new PathMerger().

File: core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
Patch:
@@ -30,7 +30,7 @@
  *
  * @author Peter Karich
  */
-public class Bike2WeightFlagEncoderTest
+public class Bike2WeightFlagEncoderTest extends BikeFlagEncoderTest
 {
     private Graph initExampleGraph( FlagEncoder instance )
     {

File: core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
Patch:
@@ -123,7 +123,7 @@ public long handleRelationTags( OSMRelation relation, long oldRelFlags )
             }
 
             @Override
-            int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
+            double relationWeightCodeToSpeed( double highwaySpeed, int relationCode )
             {
                 return highwaySpeed;
             }
@@ -167,9 +167,9 @@ public void testMixBikeTypesAndRelationCombination()
         long allow = bikeEncoder.acceptBit | mtbEncoder.acceptBit;
         long flags = manager.handleWayTags(osmWay, allow, relFlags);
 
-        // uninfluenced speed for grade1 bikeencoder = 4 (pushing section) -> smaller than 15 -> VERYNICE -> 22
+        // uninfluenced speed for grade but via network => VERY_NICE
         assertEquals(24, bikeEncoder.getSpeed(flags), 1e-1);
-        // uninfluenced speed for grade1 bikeencoder = 12 -> smaller than 15 -> PREFER -> 18
+        // uninfluenced speed but PREFER
         assertEquals(20, mtbEncoder.getSpeed(flags), 1e-1);
     }
 

File: web/src/main/java/com/graphhopper/http/GHServletModule.java
Patch:
@@ -46,6 +46,9 @@ protected void configureServlets()
     {
         filter("*").through(GHGZIPHook.class, params);
         bind(GHGZIPHook.class).in(Singleton.class);
+        
+        filter("*").through(CORSFilter.class, params);
+        bind(CORSFilter.class).in(Singleton.class);
 
         serve("/i18n*").with(I18NServlet.class);
         bind(I18NServlet.class).in(Singleton.class);

File: core/src/test/java/com/graphhopper/util/PointListTest.java
Patch:
@@ -80,7 +80,7 @@ public void testAddPL()
         instance.add(toAdd);
 
         assertEquals(12, instance.getSize());
-        assertEquals(20, instance.getCapacity());
+        assertEquals(24, instance.getCapacity());
 
         for (int i = 0; i < toAdd.size(); i++)
         {

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -44,7 +44,7 @@ public DefaultEdgeFilter( FlagEncoder encoder, boolean in, boolean out )
     }
 
     @Override
-    public boolean accept( EdgeIteratorState iter )
+    public final boolean accept( EdgeIteratorState iter )
     {
         long flags = iter.getFlags();
         return out && encoder.isForward(flags) || in && encoder.isBackward(flags);

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -93,6 +93,7 @@ public AbstractFlagEncoder( int speedBits, double speedFactor )
         ferries.add("ferry");
 
         acceptedRailways.add("tram");
+        acceptedRailways.add("abandoned");
     }
 
     /**

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -728,6 +728,9 @@ public GHResponse route( GHRequest request )
         if (graph == null || !fullyLoaded)
             throw new IllegalStateException("Call load or importOrLoad before routing");
 
+        if (graph.isClosed())
+            throw new IllegalStateException("You need to create a new GraphHopper instance as it is already closed");
+
         GHResponse response = new GHResponse();
         List<Path> paths = getPaths(request, response);
         if (response.hasErrors())

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -56,6 +56,7 @@ public static void main( String[] strs ) throws Exception
         hopper.importOrLoad();
         if (args.getBool("graph.testIT", false))
         {
+            // important: use osmreader.wayPointMaxDistance=0
             RoutingAlgorithmSpecialAreaTests tests = new RoutingAlgorithmSpecialAreaTests(hopper);
             tests.start();
         }

File: core/src/main/java/com/graphhopper/util/DouglasPeucker.java
Patch:
@@ -171,4 +171,6 @@ int simplify( PointList points, int fromIndex, int lastIndex )
         }
         return counter;
     }
+
+    
 }

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -37,6 +37,7 @@
  */
 public class Path
 {
+    private static final AngleCalc2D ac = new AngleCalc2D();
     protected Graph graph;
     private FlagEncoder encoder;
     protected double distance;
@@ -376,7 +377,6 @@ public InstructionList calcInstructions()
             private String name = null;
             private int pavementType;
             private int wayType;
-            private final AngleCalc2D ac = new AngleCalc2D();
 
             @Override
             public void next( EdgeIteratorState edge, int index )

File: core/src/main/java/com/graphhopper/util/Instruction.java
Patch:
@@ -22,6 +22,7 @@
 
 public class Instruction
 {
+    private static final AngleCalc2D ac = new AngleCalc2D();
     private static final DistanceCalc distanceCalc = new DistanceCalcEarth();
     public static final int TURN_SHARP_LEFT = -3;
     public static final int TURN_LEFT = -2;
@@ -178,7 +179,6 @@ public String toString()
      */
     String getDirection( Instruction nextI )
     {
-        AngleCalc2D ac = new AngleCalc2D();
         double azimuth = calcAzimuth(nextI);
         if (Double.isNaN(azimuth))
             return null;
@@ -224,8 +224,6 @@ private double calcAzimuth( Instruction nextI )
         double lat = points.getLatitude(0);
         double lon = points.getLongitude(0);
 
-        AngleCalc2D ac = new AngleCalc2D();
-
         double azimuth = ac.calcAzimuth(lat, lon, nextLat, nextLon);
         return azimuth;
     }

File: core/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -291,12 +291,12 @@ public List<Double[]> toGeoJson()
             if (is3D)
                 points.add(new Double[]
                 {
-                    getLongitude(i), getLatitude(i), getElevation(i)
+                    Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i)), Helper.round2(getElevation(i))
                 });
             else
                 points.add(new Double[]
                 {
-                    getLongitude(i), getLatitude(i)
+                    Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i))
                 });
         }
         return points;

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -86,7 +86,7 @@ public void testMonacoWithInstructions() throws Exception
         assertEquals("Continue onto Avenue des Guelfes", resultJson.get(0).get("text"));
         assertEquals("Turn slight left onto Avenue des Papalins", resultJson.get(1).get("text"));
         assertEquals("Turn sharp right onto Quai Jean-Charles Rey", resultJson.get(2).get("text"));
-        assertEquals("Turn left onto road", resultJson.get(3).get("text"));
+        assertEquals("Turn left", resultJson.get(3).get("text"));
         assertEquals("Turn right onto Avenue Albert II", resultJson.get(4).get("text"));
 
         assertEquals(11, (Double) resultJson.get(0).get("distance"), 1);
@@ -172,13 +172,13 @@ public void testMonacoVia()
         assertEquals("Continue onto Avenue des Guelfes", resultJson.get(0).get("text"));
         assertEquals("Turn slight left onto Avenue des Papalins", resultJson.get(1).get("text"));
         assertEquals("Turn sharp right onto Quai Jean-Charles Rey", resultJson.get(2).get("text"));
-        assertEquals("Turn left onto road", resultJson.get(3).get("text"));
+        assertEquals("Turn left", resultJson.get(3).get("text"));
         assertEquals("Turn right onto Avenue Albert II", resultJson.get(4).get("text"));
 
         assertEquals("Stopover 1", resultJson.get(12).get("text"));
 
         assertEquals("Continue onto Avenue Albert II", resultJson.get(20).get("text"));
-        assertEquals("Turn left onto road", resultJson.get(21).get("text"));
+        assertEquals("Turn left", resultJson.get(21).get("text"));
         assertEquals("Turn right onto Quai Jean-Charles Rey", resultJson.get(22).get("text"));
         assertEquals("Turn sharp left onto Avenue des Papalins", resultJson.get(23).get("text"));
         assertEquals("Turn slight right onto Avenue des Guelfes", resultJson.get(24).get("text"));

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -712,7 +712,7 @@ EdgeIteratorState addEdge( int fromIndex, int toIndex, PointList pointList, long
         int nodes = pointList.getSize();
         for (int i = 1; i < nodes; i++)
         {
-            // we could save some lines if we would use pointList.calculateDistance(distCalc);
+            // we could save some lines if we would use pointList.calcDistance(distCalc);
             lat = pointList.getLatitude(i);
             lon = pointList.getLongitude(i);
             if (pointList.is3D())

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -51,7 +51,7 @@ public TestAlgoCollector assertDistance( AlgorithmPreparation prepare, List<Quer
         for (int i = 0; i < queryList.size() - 1; i++)
         {
             Path path = prepare.createAlgo().calcPath(queryList.get(i), queryList.get(i + 1));
-            viaPaths.add(path);path.calcPoints().size();
+            viaPaths.add(path);
         }
         PathMerger pathMerger = new PathMerger().
                 setCalcPoints(true).
@@ -69,7 +69,7 @@ public TestAlgoCollector assertDistance( AlgorithmPreparation prepare, List<Quer
 
         PointList pointList = rsp.getPoints();
         double tmpDist = pointList.calcDistance(distCalc);
-        if (Math.abs(rsp.getDistance() - tmpDist) > 5)
+        if (Math.abs(rsp.getDistance() - tmpDist) > 8)
         {
             errors.add(prepare + " path.getDistance was  " + rsp.getDistance()
                     + "\t pointList.calcDistance was " + tmpDist + "\t (expected points " + oneRun.getLocs()

File: core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
Patch:
@@ -141,7 +141,7 @@ public int findEndNode( int from, int to )
         {
             // Cached! Re-use existing data structures
             int parentNode = parents[to];
-            if (parentNode >= 0 || heap.isEmpty())
+            if (parentNode >= 0 && weights[to] < weights[currNode] || heap.isEmpty())
                 return to;
 
             currNode = heap.poll_element();

File: web/src/main/java/com/graphhopper/http/DefaultModule.java
Patch:
@@ -53,9 +53,6 @@ protected void configure()
 
             bind(GraphHopper.class).toInstance(hopper);
 
-            String algo = args.get("routing.defaultAlgorithm", "dijkstrabi");
-            bind(String.class).annotatedWith(Names.named("defaultAlgorithm")).toInstance(algo);
-
             long timeout = args.getLong("web.timeout", 3000);
             bind(Long.class).annotatedWith(Names.named("timeout")).toInstance(timeout);
             bind(TranslationMap.class).toInstance(new TranslationMap().doImport());

File: core/src/main/java/com/graphhopper/storage/Edge.java
Patch:
@@ -31,11 +31,11 @@ public class Edge implements Comparable<Edge>
     public int adjNode;
     public double weight;
 
-    public Edge( int edgeId, int adjNode, double distance )
+    public Edge( int edgeId, int adjNode, double weight )
     {
         this.edge = edgeId;
         this.adjNode = adjNode;
-        this.weight = distance;
+        this.weight = weight;
     }
 
     @Override

File: core/src/main/java/com/graphhopper/storage/EdgeEntry.java
Patch:
@@ -26,9 +26,9 @@ public class EdgeEntry extends Edge implements Cloneable
 {
     public EdgeEntry parent;
 
-    public EdgeEntry( int edgeId, int adjNode, double distance )
+    public EdgeEntry( int edgeId, int adjNode, double weight )
     {
-        super(edgeId, adjNode, distance);
+        super(edgeId, adjNode, weight);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/PathBidir.java
Patch:
@@ -84,9 +84,9 @@ public Path extract()
             if (edgeId < 0)
                 break;
 
-            processEdge(edgeId, nodeTo);
             int tmpRef = edgeWTo.getParent(currRef);
             nodeTo = edgeWTo.getNode(tmpRef);
+            processEdge(edgeId, nodeTo);
             currRef = tmpRef;
         }
         setEndNode(nodeTo);

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -62,7 +62,7 @@ public void testTime()
         FlagEncoder tmpEnc = new Bike2WeightFlagEncoder();
         GraphStorage g = new GraphBuilder(new EncodingManager(tmpEnc)).create();
         Path p = new Path(g, tmpEnc);
-        long flags = tmpEnc.setSpeed(tmpEnc.setReverseSpeed(0, 10), 15);
+        long flags = tmpEnc.setSpeed(tmpEnc.setReverseSpeed(tmpEnc.setAccess(0, true, true), 10), 15);
         assertEquals(375 * 60 * 1000, p.calcMillis(100000, flags, false));
         assertEquals(600 * 60 * 1000, p.calcMillis(100000, flags, true));
 

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -440,7 +440,7 @@ protected static int parseDuration( String str )
             }
         } catch (Exception ex)
         {
-            logger.error("Cannot parse " + str + " using 0 minutes");
+            logger.warn("Cannot parse " + str + " using 0 minutes");
         }
         return 0;
     }

File: core/src/main/java/com/graphhopper/util/Downloader.java
Patch:
@@ -91,6 +91,7 @@ public HttpURLConnection createConnection( String urlStr ) throws IOException
         URL url = new URL(urlStr);
         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
         // conn.setDoInput(true); // Will yield in a POST request
+        conn.setDoOutput(true);
         conn.setUseCaches(true);
         conn.setRequestProperty("Referrer", referrer);
         conn.setRequestProperty("User-Agent", userAgent);

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -271,9 +271,7 @@ public static String pruneFileEnd( String file )
     {
         int index = file.lastIndexOf(".");
         if (index < 0)
-        {
             return file;
-        }
         return file.substring(0, index);
     }
 

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -483,8 +483,7 @@ protected GHResponse doInBackground( Void... v )
                 StopWatch sw = new StopWatch().start();
                 GHRequest req = new GHRequest(fromLat, fromLon, toLat, toLon).
                         setAlgorithm("dijkstrabi").
-                        putHint("instructions", false).
-                        putHint("douglas.minprecision", 1);
+                        putHint("instructions", false);
                 GHResponse resp = hopper.route(req);
                 time = sw.stop().getSeconds();
                 return resp;

File: core/src/main/java/com/graphhopper/util/Downloader.java
Patch:
@@ -90,7 +90,7 @@ public HttpURLConnection createConnection( String urlStr ) throws IOException
     {
         URL url = new URL(urlStr);
         HttpURLConnection conn = (HttpURLConnection) url.openConnection();
-        conn.setDoOutput(true);
+        conn.setDoInput(true);
         conn.setUseCaches(true);
         conn.setRequestProperty("Referrer", referrer);
         conn.setRequestProperty("User-Agent", userAgent);

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -33,7 +33,7 @@ public class GHRequest
     private GHPlace to;
     private Map<String, Object> hints = new HashMap<String, Object>(5);
     private String vehicle = "CAR";
-    private String weighting = "shortest";
+    private String weighting = "fastest";
 
     /**
      * Calculate the path from specified startPoint (fromLat, fromLon) to endPoint (toLat, toLon).

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -95,6 +95,7 @@ class GraphHopperTest extends GraphHopper
     {
         public GraphHopperTest( String osmFile )
         {
+            setInMemory(false);
             setOSMFile(osmFile);
             setGraphHopperLocation(dir);
             setEncodingManager(new EncodingManager("CAR,FOOT"));

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -442,7 +442,9 @@ public void testMonacoParallel() throws IOException
         String graphFile = "target/graph-monaco";
         Helper.removeDir(new File(graphFile));
         final EncodingManager encodingManager = new EncodingManager("CAR");
-        GraphHopper hopper = new GraphHopper().setInMemory(true).setEncodingManager(encodingManager).
+        GraphHopper hopper = new GraphHopper().
+                setInMemory(true).
+                setEncodingManager(encodingManager).
                 disableCHShortcuts().
                 setWayPointMaxDistance(0.1).
                 setOSMFile("files/monaco.osm.gz").setGraphHopperLocation(graphFile).

File: core/src/test/java/com/graphhopper/storage/DataAccessTest.java
Patch:
@@ -368,5 +368,6 @@ public void testSet_Get_Short_Long()
             // should be overwritten
             assertNotEquals(Short.MAX_VALUE / 3, da.getShort(8));
         }
+        da.close();
     }
 }

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -277,7 +277,8 @@ public void release()
         cacheData.clear();
 
         // for memory mapped type we create temporary unpacked files which should be removed
-        dir.clear();
+        if (dir != null)
+            dir.clear();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/storage/Directory.java
Patch:
@@ -49,7 +49,7 @@ public interface Directory
     /**
      * Renames the specified DataAccess object into one.
      */
-    DataAccess rename( DataAccess da, String newName );
+    // DataAccess rename( DataAccess da, String newName );
 
     /**
      * Removes the specified object from the directory.

File: web/src/main/java/com/graphhopper/http/GHServletModule.java
Patch:
@@ -28,13 +28,13 @@ protected void configureServlets()
                 + "application/javascript,"
                 + "image/svg+xml");
 
-        filter("/*").through(GHGZIPHook.class, params);
+        filter("*").through(GHGZIPHook.class, params);
         bind(GHGZIPHook.class).in(Singleton.class);
 
-        serve("/api/i18n*").with(I18NServlet.class);
+        serve("/i18n*").with(I18NServlet.class);
         bind(I18NServlet.class).in(Singleton.class);
 
-        serve("/api*").with(GraphHopperServlet.class);
+        serve("*").with(GraphHopperServlet.class);
         bind(GraphHopperServlet.class).in(Singleton.class);
     }
 }

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -40,7 +40,7 @@ public class GraphHopperWeb implements GraphHopperAPI
     public static void main( String[] args )
     {
         GraphHopperAPI gh = new GraphHopperWeb();
-        gh.load("http://localhost:8989/api/route");
+        gh.load("http://localhost:8989/route");
         //GHResponse ph = gh.route(new GHRequest(53.080827, 9.074707, 50.597186, 11.184082));
         GHResponse ph = gh.route(new GHRequest(49.6724, 11.3494, 49.6550, 11.4180));
         System.out.println(ph);
@@ -61,7 +61,7 @@ public void setDownloader( Downloader downloader )
     }
 
     /**
-     * Example url: http://localhost:8989/api or http://217.92.216.224:8080/api
+     * Example url: http://localhost:8989 or http://217.92.216.224:8080
      */
     @Override
     public boolean load( String url )

File: web/src/test/java/com/graphhopper/http/BaseServletTest.java
Patch:
@@ -107,7 +107,7 @@ public void shutdownJetty( boolean force )
     protected String getTestAPIUrl()
     {
         String host = "localhost";
-        return "http://" + host + ":" + port + "/api/route";
+        return "http://" + host + ":" + port + "/route";
     }
 
     protected JSONObject query( String query ) throws Exception

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -504,7 +504,7 @@ public GraphHopper init( CmdArgs args ) throws IOException
         String eleProviderStr = args.get("graph.elevation.provider", "noop").toLowerCase();
         String cacheDirStr = args.get("graph.elevation.cachedir", "");
         String baseURL = args.get("graph.elevation.baseurl", "");
-        DAType elevationDAType = DAType.fromString(args.get("graph.elevation.dataaccess", "RAM"));
+        DAType elevationDAType = DAType.fromString(args.get("graph.elevation.dataaccess", "MMAP"));
         ElevationProvider tmpProvider = ElevationProvider.NOOP;
         if (eleProviderStr.equalsIgnoreCase("srtm"))
             tmpProvider = new SRTMProvider();

File: core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
Patch:
@@ -49,7 +49,7 @@ public static void main( String[] args ) throws IOException
     private final Logger logger = LoggerFactory.getLogger(getClass());
     private final int WIDTH = 1201;
     private Directory dir;
-    private DAType daType = DAType.RAM;
+    private DAType daType = DAType.MMAP;
     private Downloader downloader = new Downloader("GraphHopper SRTMReader").setTimeout(10000);
     private File cacheDir = new File("/tmp/srtm");
     // use a map as an array is not quite useful if we want to hold only parts of the world

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -210,7 +210,7 @@ public int compare( QueryResult o1, QueryResult o2 )
                 }
 
                 // two edges between last result and adjacent node are still missing
-                createEdges(prevPoint, prevWayIndex, fullPL.toGHPoint(fullPL.getSize() - 1), fullPL.getSize() - 1,
+                createEdges(prevPoint, prevWayIndex, fullPL.toGHPoint(fullPL.getSize() - 1), fullPL.getSize() - 2,
                         fullPL, closestEdge, virtNodeId - 1, adjNode, reverseFlags);
 
                 return true;
@@ -229,7 +229,7 @@ private void createEdges( GHPoint prevSnapped, int prevWayIndex, GHPoint currSna
         for (int i = prevWayIndex; i < max; i++)
         {
             basePoints.add(fullPL.getLatitude(i), fullPL.getLongitude(i));
-        }       
+        }
         basePoints.add(currSnapped.lat, currSnapped.lon);
         
         PointList baseReversePoints = basePoints.clone(true);

File: web/src/main/java/com/graphhopper/http/GHServer.java
Patch:
@@ -70,7 +70,7 @@ public void start( Injector injector ) throws Exception
         {
             "index.html"
         });
-        resHandler.setResourceBase(args.get("jetty.resourcebase", "./web/src/main/webapp"));
+        resHandler.setResourceBase(args.get("jetty.resourcebase", "./src/main/webapp"));
 
         server = new Server();
         // getSessionHandler and getSecurityHandler should always return null

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -141,12 +141,12 @@ public void testFootAndCar()
         // A to E only for foot
         res = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.FOOT));
         assertTrue(res.isFound());
-        assertEquals(2, res.getPoints().getSize());
+        assertEquals(3, res.getPoints().size());
 
         // A D E for car
         res = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.CAR));
         assertTrue(res.isFound());
-        assertEquals(3, res.getPoints().getSize());
+        assertEquals(4, res.getPoints().getSize());
     }
 
     @Test

File: web/src/main/java/com/graphhopper/http/GHGZIPHook.java
Patch:
@@ -31,7 +31,7 @@
  * <p/>
  * @author Peter Karich
  */
-public class MyGZIPHook extends GzipFilter
+public class GHGZIPHook extends GzipFilter
 {
     private Logger logger = LoggerFactory.getLogger(getClass());
 

File: web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
Patch:
@@ -40,7 +40,7 @@ public void testBasicQuery() throws Exception {
         JSONObject json = query("point=42.554851,1.536198&point=42.510071,1.548128");
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
-        double distance = json.getJSONObject("route").getDouble("distance");
+        double distance = json.getJSONArray("paths").getJSONObject(0).getDouble("distance");
         assertTrue("distance wasn't correct:" + distance, distance > 9000);
         assertTrue("distance wasn't correct:" + distance, distance < 9500);
     }

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -577,7 +577,7 @@ boolean addNode( OSMNode node )
             addTowerNode(node.getId(), lat, lon);
         } else if (nodeType == PILLAR_NODE)
         {
-            int tmp = nextPillarId * 4;
+            long tmp = (long) nextPillarId * 4;
             pillarLats.incCapacity(tmp + 4);
             pillarLats.setInt(tmp, Helper.degreeToInt(lat));
             pillarLons.incCapacity(tmp + 4);

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -966,7 +966,7 @@ public void setAdditionalEdgeField( long edgePointer, int value )
     {
         if (extStorage.isRequireEdgeField() && E_ADDITIONAL >= 0)
         {
-            nodes.setInt(edgePointer + E_ADDITIONAL, value);
+            edges.setInt(edgePointer + E_ADDITIONAL, value);
         } else
         {
             throw new AssertionError("This graph does not support an additional edge field.");

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -290,7 +290,7 @@ public void testInstructionsWithTimeAndPlace()
         assertTrue(gpxStr, gpxStr.contains("<extensions>") && gpxStr.contains("</extensions>"));
         assertTrue(gpxStr, gpxStr.contains("<rtept lat=\"15.1\" lon=\"10.0\">"));
         assertTrue(gpxStr, gpxStr.contains("<distance>8000</distance>"));
-        assertTrue(gpxStr, gpxStr.contains("<desc>turn left 2-3</desc>"));
+        assertTrue(gpxStr, gpxStr.contains("<desc>left 2-3</desc>"));
         
         // assertTrue(gpxStr, gpxStr.contains("<direction>W</direction>"));
         // assertTrue(gpxStr, gpxStr.contains("<turn-angle>-90</turn-angle>"));

File: core/src/main/java/com/graphhopper/util/InstructionList.java
Patch:
@@ -307,7 +307,7 @@ private String createExtensionsBlock( GPXEntry entry )
             {
                 sbEx.append("<").append(exEntry.getKey()).append(">");
                 sbEx.append(exEntry.getValue());
-                sbEx.append("<").append(exEntry.getKey()).append("/>");
+                sbEx.append("</").append(exEntry.getKey()).append(">");
             }
 
             sbEx.append("</extensions>");

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -114,7 +114,7 @@ public void testWayList()
         assertEquals(1.16, gpxes.get(5).getLon(), 1e-6);
         assertEquals(1.16, gpxes.get(5).getLon(), 1e-6);
         // List<List<Double>> tmpList = createList(p.calcPoints(), wayList.createPointIndices());
-        compare(Arrays.asList(asL(1.2d, 1.0d), asL(1.2d, 1.1), asL(1.1d, 1.1), asL(1.0, 1.1), 
+        compare(Arrays.asList(asL(1.2d, 1.0d), asL(1.2d, 1.1), asL(1.1d, 1.1), asL(1.0, 1.1),
                 asL(1.0, 1.2), asL(1.1, 1.3), asL(1.1, 1.4)),
                 wayList.createLatLngs());
 
@@ -286,7 +286,8 @@ public void testInstructionsWithTimeAndPlace()
         assertEquals(9.9, wayList.get(3).getFirstLon(), 1e-3);
 
         String gpxStr = wayList.createGPX("test", 0, "GMT+1");
-        assertTrue(gpxStr, gpxStr.contains("<trkpt lat=\"15.0\" lon=\"10.0\"><time>1970-01-01T01:00:00+01:00</time></trkpt>"));
+        assertTrue(gpxStr, gpxStr.contains("<trkpt lat=\"15.0\" lon=\"10.0\"><time>1970-01-01T01:00:00+01:00</time>"));
+        assertTrue(gpxStr, gpxStr.contains("<extensions><distance>10736<distance/><direction>W<direction/><turn-angle>-90<turn-angle/><azimuth>270<azimuth/></extensions></trkpt>"));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/util/FinishInstruction.java
Patch:
@@ -25,8 +25,7 @@ public class FinishInstruction extends Instruction
     public FinishInstruction( final double lat, final double lon )
     {
         super(FINISH, "", 0, 0, new PointList()
-        {
-            
+        {            
             {
                 add(lat, lon);
             }

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -61,7 +61,7 @@ List<OneRun> createMonacoCar()
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(new OneRun(43.730729, 7.42135, 43.727697, 7.419199, 2581, 91));
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3586, 126));
-        list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.4277, 2560, 102));
+        list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.4277, 2561, 107));
         list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 2227, 105));
         list.add(new OneRun(43.730949, 7.412338, 43.739643, 7.424542, 2101, 100));
         list.add(new OneRun(43.727592, 7.419333, 43.727712, 7.419333, 0, 1));
@@ -141,7 +141,7 @@ public void testMonacoMixed()
         List<OneRun> list = createMonacoCar();
         list.get(0).locs = 101;
         list.get(1).locs = 135;
-        list.get(2).locs = 105;
+        list.get(2).locs = 110;
         list.get(3).locs = 117;
         list.get(4).locs = 106;
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -524,7 +524,7 @@ protected OSMReader importOSM() throws IOException
         OSMReader reader = new OSMReader(graph, expectedCapacity).setWorkerThreads(workerThreads).setEncodingManager(encodingManager)
                 .setWayPointMaxDistance(wayPointMaxDistance).setEnableInstructions(enableInstructions);
         logger.info("using " + graph.toString() + ", memory:" + Helper.getMemInfo());
-        reader.doOSM2Graph(osmTmpFile);        
+        reader.doOSM2Graph(osmTmpFile);
         return reader;
     }
 
@@ -688,7 +688,7 @@ else if (request.getAlgorithm().equals("astarbi"))
 
         debug += ", algoInit:" + sw.stop().getSeconds() + "s";
         sw = new StopWatch().start();
-
+        
         Path path = algo.calcPath(fromRes, toRes);
         debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s, " + path.getDebugInfo();
 

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -132,7 +132,7 @@ public static Collection<Entry<AlgorithmPreparation, LocationIndex>> createAlgos
                     setGraph(graphCH);
             prepareCH.doWork();
             LocationIndex idxCH = new LocationIndexTreeSC(graphCH, new RAMDirectory()).prepareIndex();
-            prepare.add(new ME(prepareCH, idxCH));
+            prepare.add(new ME(prepareCH, idxCH));           
 
             // still one failing test regardless of the approx factor
 //            PrepareContractionHierarchies prepareCHAStar = new PrepareContractionHierarchies(encoder, weighting) {

File: core/src/main/java/com/graphhopper/storage/index/Location2IDFullIndex.java
Patch:
@@ -96,7 +96,7 @@ public QueryResult findClosest( double queryLat, double queryLon, EdgeFilter edg
                 double dist = calc.calcDist(tmpLat, tmpLon, queryLat, queryLon);
                 if (circle == null || dist < calc.calcDist(circle.getLat(), circle.getLon(), queryLat, queryLon))
                 {
-                    res.setClosestEdge(iter.detach());
+                    res.setClosestEdge(iter.detach(false));
                     res.setClosestNode(node);
                     res.setQueryDistance(dist);
                     if (dist <= 0)

File: core/src/main/java/com/graphhopper/storage/index/Location2IDFullWithEdgesIndex.java
Patch:
@@ -107,7 +107,7 @@ public QueryResult findClosest( double queryLat, double queryLon, EdgeFilter fil
                 if (fromDist < foundDist)
                 {
                     res.setQueryDistance(fromDist);
-                    res.setClosestEdge(iter.detach());
+                    res.setClosestEdge(iter.detach(false));
                     res.setClosestNode(node);
                     foundDist = fromDist;
                 }

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -648,7 +648,7 @@ protected boolean check( int node, double normedDist, int wayIndex, EdgeIterator
                         {
                             closestMatch.setQueryDistance(normedDist);
                             closestMatch.setClosestNode(node);
-                            closestMatch.setClosestEdge(edge.detach());
+                            closestMatch.setClosestEdge(edge.detach(false));
                             closestMatch.setWayIndex(wayIndex);
                             closestMatch.setSnappedPosition(pos);
                             return true;

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -597,7 +597,6 @@ QueryResult newQR( Graph graph, int node1, int node2 )
     @Test
     public void testTwoWeightsPerEdge()
     {
-
         // other direction should be different!
         Graph graph = createEleGraph();
         Path p = prepareGraph(graph, carEncoder, new ShortestWeighting()).createAlgo().calcPath(0, 10);

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -114,7 +114,7 @@ public void testWayList()
         assertEquals(1.16, gpxes.get(5).getLon(), 1e-6);
         assertEquals(1.16, gpxes.get(5).getLon(), 1e-6);
         // List<List<Double>> tmpList = createList(p.calcPoints(), wayList.createPointIndices());
-        compare(Arrays.asList(asL(1.2d, 1.0d), asL(1.2d, 1.1), asL(1.1d, 1.1), asL(1.0, 1.1), 
+        compare(Arrays.asList(asL(1.2d, 1.0d), asL(1.2d, 1.1), asL(1.1d, 1.1), asL(1.0, 1.1),
                 asL(1.0, 1.2), asL(1.1, 1.3), asL(1.1, 1.4)),
                 wayList.createLatLngs());
 
@@ -287,8 +287,7 @@ public void testInstructionsWithTimeAndPlace()
 
         String gpxStr = wayList.createGPX("test", 0, "GMT+1");
         assertTrue(gpxStr, gpxStr.contains("<trkpt lat=\"15.0\" lon=\"10.0\"><time>1970-01-01T01:00:00+01:00</time>"));
-        assertTrue(gpxStr, gpxStr.contains("<extensions><distance>10736<distance/><direction>W<direction/><turn-angle>-90<turn-angle/><azimuth>270<azimuth/></extensions></trkpt>"));
-        
+        assertTrue(gpxStr, gpxStr.contains("<extensions><distance>10736<distance/><direction>W<direction/><turn-angle>90<turn-angle/><azimuth>270<azimuth/></extensions></trkpt>"));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1451,8 +1451,8 @@ protected int loadNodesHeader()
     {
         int hash = nodes.getHeader(0);
         if (hash != getClass().getName().hashCode())
-            throw new IllegalStateException("Cannot load the graph - use instance "
-                    + getClass().getName() + " to load it! " + dir);
+            throw new IllegalStateException("Cannot load the graph when using instance of "
+                    + getClass().getName() + " and location: " + dir);
         
         nodeEntryBytes = nodes.getHeader(1 * 4);
         nodeCount = nodes.getHeader(2 * 4);

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -67,7 +67,7 @@ public Path( Graph graph, FlagEncoder encoder )
     {
         this(p.graph, p.encoder);
         weight = p.weight;
-        edgeIds = new TIntArrayList(edgeIds);
+        edgeIds = new TIntArrayList(p.edgeIds);
         edgeEntry = p.edgeEntry;
     }
 

File: core/src/main/java/com/graphhopper/storage/Edge.java
Patch:
@@ -47,6 +47,6 @@ public int compareTo( Edge o )
     @Override
     public String toString()
     {
-        return adjNode + " (" + edge + ") distance is " + weight;
+        return adjNode + " (" + edge + ") weight: " + weight;
     }
 }

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -699,7 +699,7 @@ protected SingleEdge createSingleEdge( int edgeId, int nodeId )
         return new SingleEdge(edgeId, nodeId);
     }
 
-    private long getFlags( long edgePointer, boolean swap )
+    long getFlags( long edgePointer, boolean swap )
     {
         int low = edges.getInt(edgePointer + E_FLAGS);
         long res = low;

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -298,10 +298,10 @@ public void testFindShortcuts_Roundabout()
 
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         EdgeSkipIterState tmp = g.shortcut(1, 4);
-        tmp.setFlags(prepare.getScBothDir());
+        tmp.setFlags(PrepareEncoder.getScDirMask());
         tmp.setWeight(2);        
         tmp.setSkippedEdges(iter1_1.getEdge(), iter1_2.getEdge());
-        long f = prepare.getScFwdDir();
+        long f = PrepareEncoder.getScFwdDir();
         tmp = g.shortcut(4, 6);
         tmp.setFlags(f);
         tmp.setWeight(2);        
@@ -329,7 +329,7 @@ void initUnpackingGraph( LevelGraphStorage g, Weighting w )
         EdgeIteratorState iter4 = g.edge(3, 4).setDistance(dist).setFlags(flags);
         EdgeIteratorState iter5 = g.edge(4, 5).setDistance(dist).setFlags(flags);
         EdgeIteratorState iter6 = g.edge(5, 6).setDistance(dist).setFlags(flags);
-        long oneDirFlags = new PrepareContractionHierarchies(carEncoder, w).getScFwdDir();
+        long oneDirFlags = PrepareEncoder.getScFwdDir();
 
         int tmp = iterTmp1.getEdge();
         EdgeSkipIterState sc1 = g.shortcut(0, 2);

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -322,7 +322,7 @@ public void testMaxValue()
 
         // double speed = AbstractFlagEncoder.parseSpeed("70 mph");
         // => 112.654 * 0.9 => 101
-        instance.swapDirection(flags);
+        flags = instance.swapDirection(flags);
         assertEquals(100, instance.getSpeed(flags), 1e-1);
     }
 

File: core/src/test/java/com/graphhopper/routing/util/EncodedDoubleValueTest.java
Patch:
@@ -61,7 +61,7 @@ public void testMaxValueAndSwap()
         flags = carEncoder.handleWayTags(way, 1, 0);
 
         // double speed = AbstractFlagEncoder.parseSpeed("70 mph");
-        carEncoder.swapDirection(flags);
+        flags = carEncoder.swapDirection(flags);
         assertEquals(100, carEncoder.getSpeed(flags), 1e-1);
     }
 }

File: core/src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java
Patch:
@@ -161,9 +161,9 @@ public void testGetWeight()
         LevelGraphStorage g = (LevelGraphStorage) createGraph();
         assertFalse(g.edge(0, 1).isShortcut());
         assertFalse(g.edge(1, 2).isShortcut());
-        
+
         // only remove edges
-        long flags = carEncoder.setProperties(0, true, true);
+        long flags = carEncoder.setProperties(10, true, true);
         EdgeSkipIterState sc1 = g.shortcut(0, 1);
         assertTrue(sc1.isShortcut());
         sc1.setWeight(2.001);
@@ -179,7 +179,7 @@ public void testGetWeight()
         assertTrue(carEncoder.isBackward(sc1.getFlags()));
         assertTrue(carEncoder.isForward(sc1.getFlags()));
 
-        flags = carEncoder.setProperties(0, false, true);
+        flags = carEncoder.setProperties(10, false, true);
         sc1.setFlags(flags);
         sc1.setWeight(100.123);
         assertEquals(100.123, sc1.getWeight(), 1e-3);

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -363,7 +363,7 @@ void processWay( OSMWay way )
             int last = getNodeMap().get(osmNodeIds.get(osmNodeIds.size() - 1));
             double firstLat = getTmpLatitude(first), firstLon = getTmpLongitude(first);
             double lastLat = getTmpLatitude(last), lastLon = getTmpLongitude(last);
-            if (firstLat != Double.NaN && firstLon != Double.NaN && lastLat != Double.NaN && lastLon != Double.NaN)
+            if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon))
             {
                 double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
                 way.setInternalTag("estimated_distance", estimatedDist);

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -81,6 +81,9 @@ public int peekKey()
      */
     public int pollKey()
     {
+        if (map.isEmpty())
+            throw new IllegalStateException("Cannot poll collection is empty!");
+
         long key = map.pollFirstEntry().getKey();
         return (int) (key & 0xFFFFFFFFL);
     }

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -309,6 +309,8 @@ void contractNodes()
                 }
                 periodSW.stop();
                 updateCounter++;
+                if (sortedNodes.isEmpty())
+                    throw new IllegalStateException("Cannot prepare as no unprepared nodes where found. Called preparation twice?");
             }
 
             if (counter % logSize == 0)

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -1395,7 +1395,8 @@ public boolean loadExisting()
                 encodingManager = new EncodingManager(acceptStr, bytesForFlags);
             } else if (!acceptStr.isEmpty() && !encodingManager.toDetailsString().equalsIgnoreCase(acceptStr))
             {
-                throw new IllegalStateException("Encoding does not match:\nGraphhopper config: " + encodingManager.toDetailsString() + "\nGraph: " + acceptStr);
+                throw new IllegalStateException("Encoding does not match:\nGraphhopper config: " + encodingManager.toDetailsString() 
+                        + "\nGraph: " + acceptStr + ", dir:" + dir.getLocation());
             }
 
             // first define header indices of this storage

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -123,8 +123,7 @@ public boolean onSingleTapConfirmed( MotionEvent motionEvent )
             return true;
         }
     };
-    private GestureDetector gestureDetector = new GestureDetector(
-            gestureListener);
+    private GestureDetector gestureDetector = new GestureDetector(gestureListener);
 
     @Override
     protected void onCreate( Bundle savedInstanceState )
@@ -195,7 +194,7 @@ private boolean initFiles( String area )
     private void chooseAreaFromLocal()
     {
         List<String> nameList = new ArrayList<String>();
-        String[] files = new File(mapsFolder).list(new FilenameFilter()
+        String[] files = mapsFolder.list(new FilenameFilter()
         {
             @Override
             public boolean accept( File dir, String filename )

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -289,7 +289,7 @@ public static void initBiGraph( Graph graph )
 
     private static final DistanceCalc distCalc = new DistanceCalcEarth();
 
-    private static void updateDistancesFor( Graph g, int node, double lat, double lon )
+    public static void updateDistancesFor( Graph g, int node, double lat, double lon )
     {
         g.setNode(node, lat, lon);
         EdgeIterator iter = g.createEdgeExplorer().setBaseNode(node);

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -73,7 +73,7 @@ public GHPlace getTo()
 
     /**
      * Possible values: astar (A* algorithm, default), astarbi (bidirectional A*) dijkstra
-     * (Dijkstra), dijkstrabi and dijkstraNative (a bit faster bidirectional Dijkstra).
+     * (Dijkstra), dijkstrabi and dijkstraNativebi (a bit faster bidirectional Dijkstra).
      */
     public GHRequest setAlgorithm( String algo )
     {

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactory.java
Patch:
@@ -31,7 +31,7 @@ public class RoutingAlgorithmFactory
 
     /**
      * @param algo possible values are astar (A* algorithm), astarbi (bidirectional A*) dijkstra
-     * (Dijkstra), dijkstrabi and dijkstraNative (a bit faster bidirectional Dijkstra).
+     * (Dijkstra), dijkstrabi and dijkstraNativebi (a bit faster bidirectional Dijkstra).
      */
     public RoutingAlgorithmFactory( String algo, boolean approx )
     {
@@ -44,7 +44,7 @@ public RoutingAlgorithm createAlgo( Graph g, FlagEncoder encoder, Weighting weig
         if ("dijkstrabi".equalsIgnoreCase(algoStr))
         {
             return new DijkstraBidirectionRef(g, encoder, weighting);
-        } else if ("dijkstraNative".equalsIgnoreCase(algoStr))
+        } else if ("dijkstraNativebi".equalsIgnoreCase(algoStr))
         {
             return new DijkstraBidirection(g, encoder, weighting);
         } else if ("dijkstra".equalsIgnoreCase(algoStr))

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -33,7 +33,7 @@ public NoOpAlgorithmPreparation()
     /**
      * Creates a preparation wrapper for the specified algorithm. Possible values for algorithmStr:
      * astar (A* algorithm), astarbi (bidirectional A*) dijkstra (Dijkstra), dijkstrabi and
-     * dijkstraNative (a bit faster bidirectional Dijkstra).
+     * dijkstraNativebi (a bit faster bidirectional Dijkstra).
      */
     public static AlgorithmPreparation createAlgoPrepare( Graph g, final String algorithmStr,
             FlagEncoder encoder, Weighting weighting )

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -121,7 +121,7 @@ public static Collection<Entry<AlgorithmPreparation, LocationIndex>> createAlgos
         prepare.add(new ME(createAlgoPrepare(g, "astar", encoder, weighting), idx));
         // prepare.add(new ME(createAlgoPrepare(g, "dijkstraOneToMany", encoder, weighting), idx));
         prepare.add(new ME(createAlgoPrepare(g, "astarbi", encoder, weighting), idx));
-        prepare.add(new ME(createAlgoPrepare(g, "dijkstraNative", encoder, weighting), idx));
+        prepare.add(new ME(createAlgoPrepare(g, "dijkstraNativebi", encoder, weighting), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstrabi", encoder, weighting), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstra", encoder, weighting), idx));
 

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -46,7 +46,6 @@
  */
 public class QueryGraph implements Graph
 {
-
     private final Graph mainGraph;
     private final int mainNodes;
     private final int mainEdges;

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -81,8 +81,6 @@ public int defineWayBits( int index, int shift )
         // first two bits are reserved for route handling in superclass
         shift = super.defineWayBits(index, shift);
         speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, SPEED.get("secondary"), SPEED.get("motorway"));
-
-        // speed used 5 bits
         return shift + speedBits;
     }
 
@@ -266,7 +264,7 @@ public String toString()
     }
 
     private static final Map<String, Integer> TRACKTYPE_SPEED = new HashMap<String, Integer>();
-    private static final Set<String> BAD_SURFACE = new HashSet<String>();
+    protected static final Set<String> BAD_SURFACE = new HashSet<String>();
     /**
      * A map which associates string to speed. Get some impression:
      * http://www.itoworld.com/map/124#fullscreen

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
 
 /**

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -41,7 +41,7 @@ public class FootFlagEncoder extends AbstractFlagEncoder
     private final Set<String> allowedHighwayTags = new HashSet<String>();
 
     /**
-     * Should be only instantied via EncodingManager
+     * Should be only instantiated via EncodingManager
      */
     protected FootFlagEncoder()
     {

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -24,8 +24,6 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;
 import com.graphhopper.util.TranslationMap.Translation;
-import gnu.trove.list.TDoubleList;
-import gnu.trove.list.TLongList;
 
 import java.io.File;
 import java.util.List;

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -216,7 +216,7 @@ public void testKremsBikeRelation()
     public void testKremsMountainBikeRelation()
     {
         List<OneRun> list = new ArrayList<OneRun>();
-        list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12563, 148));
+        list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12479, 141));
         list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3164, 83));
         list.add(new OneRun(48.412294, 15.62007, 48.398306, 15.609667, 3965, 86));
 
@@ -368,7 +368,7 @@ public void testPerformance() throws IOException
             float perRun = sw.stop().getSeconds() / ((float) (N - noJvmWarming));
             System.out.println("# " + getClass().getSimpleName() + " " + prepare.createAlgo().getName()
                     + ":" + sw.stop().getSeconds() + ", per run:" + perRun);
-            assertTrue("speed to low!? " + perRun + " per run", perRun < 0.07);
+            assertTrue("speed to low!? " + perRun + " per run", perRun < 0.08);
         }
     }
 

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -36,8 +36,8 @@
  */
 public class FootFlagEncoderTest
 {
-    private EncodingManager encodingManager = new EncodingManager("CAR,BIKE,FOOT");
-    private FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("FOOT");
+    private final EncodingManager encodingManager = new EncodingManager("CAR,BIKE,FOOT");
+    private final FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("FOOT");
 
     @Test
     public void testGetSpeed()

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -208,7 +208,7 @@ public void testFailsForMissingParameters() throws IOException
         instance = new GraphHopper();
         try
         {
-            instance.importOSM(testOsm);
+            instance.setOSMFile(testOsm).importOSM();
             assertTrue(false);
         } catch (IllegalStateException ex)
         {
@@ -235,7 +235,8 @@ public void testFailsForMissingParameters() throws IOException
             assertTrue(false);
         } catch (IllegalStateException ex)
         {
-            assertEquals("No encodingManager was specified", ex.getMessage());
+            assertEquals("Couldn't load from existing folder: " + ghLoc 
+                    + " but also cannot import from OSM file as it wasn't specified!", ex.getMessage());
         }
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -479,7 +479,7 @@ public GraphHopper importOrLoad()
     {
         if (!load(ghLocation))
         {
-            if (!new File(osmFile).exists())
+            if (osmFile == null || !new File(osmFile).exists())
                 throw new IllegalStateException("Couldn't load from existing folder: " + ghLocation
                         + " but also cannot import from OSM file as it does not exist: " + osmFile);
             printInfo();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -479,6 +479,9 @@ public GraphHopper importOrLoad()
     {
         if (!load(ghLocation))
         {
+            if (!new File(osmFile).exists())
+                throw new IllegalStateException("Couldn't load from existing folder: " + ghLocation
+                        + " but also cannot import from OSM file as it does not exist: " + osmFile);
             printInfo();
             process(ghLocation, osmFile);
         } else

File: core/src/main/java/com/graphhopper/storage/GHDirectory.java
Patch:
@@ -156,7 +156,8 @@ void removeByName( String name )
         if (da == null)
             throw new IllegalStateException("Couldn't remove dataAccess object:" + name);
         da.close();
-        Helper.removeDir(new File(location + name));
+        if (da.getType().isStoring())
+            Helper.removeDir(new File(location + name));
     }
 
     @Override

File: core/src/main/java/com/graphhopper/util/Measurement.java
Patch:
@@ -111,7 +111,7 @@ void start( CmdArgs args )
         {
             maxNode = g.getNodes();
             printGraphDetails(g);
-            printLocation2IDQuery(g, hopper.getLocationIndex(), count);
+            printLocationIndexQuery(g, hopper.getLocationIndex(), count);
 
             // Route via dijkstrabi. Normal routing takes a lot of time => smaller query number than CH
             // => values are not really comparable to routingCH as e.g. the mean distance etc is different            
@@ -158,7 +158,7 @@ private void printGraphDetails( GraphStorage g )
         put("graph.encoder", g.getEncodingManager().getSingle().toString());
     }
 
-    private void printLocation2IDQuery( Graph g, final LocationIndex idx, int count )
+    private void printLocationIndexQuery( Graph g, final LocationIndex idx, int count )
     {
         count *= 2;
         final BBox bbox = g.getBounds();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -454,7 +454,8 @@ public GraphHopper init( CmdArgs args ) throws IOException
         // osm import
         wayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", wayPointMaxDistance);
         String flagEncoders = args.get("osmreader.acceptWay", "CAR");
-        encodingManager = new EncodingManager(flagEncoders);
+        int bytesForFlags = args.getInt("osmreader.bytesForFlags", 4);
+        encodingManager = new EncodingManager(flagEncoders, bytesForFlags);
         workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
         enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
 

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -71,7 +71,7 @@ void testAlgos()
         }
 
         TestAlgoCollector testCollector = new TestAlgoCollector("testAlgos");
-        final EncodingManager encodingManager = new EncodingManager("CAR");
+        final EncodingManager encodingManager = new EncodingManager("CAR", 4);
         CarFlagEncoder carEncoder = (CarFlagEncoder) encodingManager.getEncoder("CAR");
         boolean ch = true;
         Collection<Entry<AlgorithmPreparation, LocationIndex>> prepares = createAlgos(unterfrankenGraph, idx,

File: core/src/main/java/com/graphhopper/storage/ExtendedStorage.java
Patch:
@@ -23,7 +23,6 @@
  */
 public interface ExtendedStorage
 {
-
     /**
      * @return true, if and only if, if an additional field at the graphs node storage is required
      */

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import static com.graphhopper.routing.util.BikeFlagCommonEncoder.PUSHING_SECTION_SPEED;
+import java.util.Collections;
 import org.junit.Test;
 
 import java.util.HashMap;
@@ -206,7 +206,7 @@ int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
             }
         };
         // call necessary register
-        new EncodingManager().registerEncoder(fakeEncoder);
+        new EncodingManager(fakeEncoder);
         allowed = fakeEncoder.acceptBit;
 
         flags = fakeEncoder.handleWayTags(osmWay, allowed, 1);

File: core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
Patch:
@@ -106,7 +106,7 @@ public void testSpeed()
         map.put("maxspeed", "110");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(95, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
 
         map.clear();
         map.put("highway", "residential");

File: core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
Patch:
@@ -186,7 +186,7 @@ int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
             }
         };
         // call necessary register
-        new EncodingManager().registerEncoder(fakeEncoder);
+        new EncodingManager(fakeEncoder);
         allowed = fakeEncoder.acceptBit;
 
         flags = fakeEncoder.handleWayTags(osmWay, allowed, 1);

File: core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
Patch:
@@ -97,7 +97,5 @@ public void testHandleWayTagsInfluencedByRelation()
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(30, encoder.getSpeed(flags), 1e-1);
-
     }
-
 }

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -225,8 +225,8 @@ public void testInstructionsWithTimeAndPlace()
         assertEquals(34000, p.getDistance(), 1e-1);
         assertEquals(34000, sum(wayList.createDistances()), 1e-1);
         assertEquals(5, gpxList.size());
-        assertEquals(1636428, p.getMillis());
-        assertEquals(2148878, gpxList.get(gpxList.size() - 1).getMillis());
+        assertEquals(1604120, p.getMillis());
+        assertEquals(2097557, gpxList.get(gpxList.size() - 1).getMillis());
 
         assertEquals(Instruction.CONTINUE_ON_STREET, wayList.get(0).getIndication());
         assertEquals(15, wayList.get(0).getFirstLat(), 1e-3);

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -126,7 +126,7 @@ public void testCalcFootPath()
         carEncoder = new CarFlagEncoder()
         {            
             @Override
-            public long setProperties( int speed, boolean forward, boolean backward )
+            public long setProperties( double speed, boolean forward, boolean backward )
             {
                 return 0;
             }                        

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -932,7 +932,7 @@ public EdgeIteratorState setName( String name )
         }
 
         @Override
-        public EdgeIterator detach()
+        public EdgeIteratorState detach()
         {
             if (edgeId == nextEdge)
                 throw new IllegalStateException("call next before detaching");

File: core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -178,7 +178,7 @@ public final double getWeight()
         }
 
         @Override
-        public final EdgeIterator detach()
+        public final EdgeIteratorState detach()
         {
             if (edgeId == nextEdge)
                 throw new IllegalStateException("call next before detaching");
@@ -323,7 +323,7 @@ public final EdgeSkipIterState setWeight( double weight )
         public final double getWeight()
         {
             return LevelGraphStorage.this.getWeight(this);
-        }
+        }       
     }
 
     final void setWeight( EdgeSkipIterState edge, double weight )

File: core/src/main/java/com/graphhopper/util/StopWatch.java
Patch:
@@ -60,7 +60,7 @@ public StopWatch stop()
     }
 
     /**
-     * @return the delta nanoTime in milliseconds
+     * @return the time delta in milliseconds
      */
     public long getTime()
     {

File: core/src/main/java/com/graphhopper/util/shapes/CoordTrig.java
Patch:
@@ -51,7 +51,7 @@ public double getLat()
 
     public boolean isValid()
     {
-        return lat != Double.NaN && lon != Double.NaN;
+        return !Double.isNaN(lat) && !Double.isNaN(lon);
     }
 
     public void setValue( T t )

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -21,10 +21,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.LevelGraph;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.EdgeSkipExplorer;
-import com.graphhopper.util.EdgeSkipIterator;
 import com.graphhopper.util.EdgeSkipIterState;
 
 /**

File: core/src/main/java/com/graphhopper/util/FinishInstruction.java
Patch:
@@ -24,7 +24,7 @@ public class FinishInstruction extends Instruction
 {
     public FinishInstruction( final double lat, final double lon )
     {
-        super(FINISH, "", 0, 0, 0, 0, new PointList()
+        super(FINISH, "", 0, 0, new PointList()
         {
             
             {

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -35,10 +35,9 @@
 public class BikeFlagEncoderTest extends AbstractBikeFlagEncoderTester
 {
     @Override
-    BikeFlagCommonEncoder createBikeEncoder(String encoderlist, String encoder)
+    BikeFlagCommonEncoder createBikeEncoder()
     {
-        BikeFlagCommonEncoder bikeencoder = (BikeFlagEncoder) new EncodingManager("BIKE,MTB,RACINGBIKE").getEncoder("BIKE");
-        return bikeencoder;
+        return (BikeFlagCommonEncoder) new EncodingManager("BIKE,MTB,RACINGBIKE").getEncoder("BIKE");
     }
 
     @Test

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -245,15 +245,15 @@ public void testCreateGPX()
         PointList pl = new PointList();
         pl.add(49.942576, 11.580384);
         pl.add(49.941858, 11.582422);
-        instructions.add(new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, 240, 15000, pl));
+        instructions.add(new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, pl).setDistance(240).setMillis(15000));
 
         pl = new PointList();
         pl.add(49.941575, 11.583501);
-        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", 0, 0, 25, 4000, pl));
+        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", 0, 0, pl).setDistance(25).setMillis(4000));
 
         pl = new PointList();
         pl.add(49.941389, 11.584311);
-        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", 0, 0, 25, 3000, pl));
+        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", 0, 0, pl).setDistance(25).setMillis(3000));
         instructions.add(new FinishInstruction(49.941029, 11.584514));
 
         List<GPXEntry> result = instructions.createGPXList();

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -39,8 +39,6 @@
  */
 public class CarFlagEncoder extends AbstractFlagEncoder
 {
-    private final HashSet<String> intended = new HashSet<String>();
-
     /**
      * Should be only instantied via EncodingManager
      */

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -61,7 +61,7 @@ public class LocationIndexTree implements LocationIndex
     // convert spatial key to index for subentry of current depth
     private long[] bitmasks;
     SpatialKeyAlgo keyAlgo;
-    private int minResolutionInMeter;
+    private int minResolutionInMeter = 500;
     private double deltaLat;
     private double deltaLon;
     private int initSizeLeafEntries = 4;
@@ -80,7 +80,6 @@ public LocationIndexTree( Graph g, Directory dir )
         MAGIC_INT = Integer.MAX_VALUE / 22316;
         this.graph = g;
         dataAccess = dir.find("locationIndex");
-        setMinResolutionInMeter(500);
     }
 
     public int getMinResolutionInMeter()

File: core/src/main/java/com/graphhopper/storage/index/QueryResult.java
Patch:
@@ -142,8 +142,8 @@ public CoordTrig getQueryPoint()
     }
 
     /**
-     * Calculates the position of the query point 'snapped' to a close road segment or node. Can be
-     * null if no result found. Call calcSnappedPoint before.
+     * Calculates the position of the query point 'snapped' to a close road segment or node. Call
+     * calcSnappedPoint before, if not, an IllegalStateException is thrown.
      */
     public GHPoint getSnappedPoint()
     {

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -61,7 +61,7 @@ public class LocationIndexTree implements LocationIndex
     // convert spatial key to index for subentry of current depth
     private long[] bitmasks;
     SpatialKeyAlgo keyAlgo;
-    private int minResolutionInMeter;
+    private int minResolutionInMeter = 500;
     private double deltaLat;
     private double deltaLon;
     private int initSizeLeafEntries = 4;
@@ -80,7 +80,6 @@ public LocationIndexTree( Graph g, Directory dir )
         MAGIC_INT = Integer.MAX_VALUE / 22316;
         this.graph = g;
         dataAccess = dir.find("locationIndex");
-        setMinResolutionInMeter(500);
     }
 
     public int getMinResolutionInMeter()

File: core/src/main/java/com/graphhopper/storage/index/QueryResult.java
Patch:
@@ -142,8 +142,8 @@ public CoordTrig getQueryPoint()
     }
 
     /**
-     * Calculates the position of the query point 'snapped' to a close road segment or node. Can be
-     * null if no result found. Call calcSnappedPoint before.
+     * Calculates the position of the query point 'snapped' to a close road segment or node. Call
+     * calcSnappedPoint before, if not, an IllegalStateException is thrown.
      */
     public GHPoint getSnappedPoint()
     {

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -25,12 +25,9 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import gnu.trove.list.TDoubleList;
-import gnu.trove.list.array.TDoubleArrayList;
-import gnu.trove.list.array.TLongArrayList;
 import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
-import java.util.TimeZone;
 import org.junit.Test;
 import static org.junit.Assert.*;
 

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -126,7 +126,7 @@ public void testMoreComplexGraph()
         int old = g.getAllEdges().getMaxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         prepare.doWork();
-        assertEquals(old + 8, g.getAllEdges().getMaxId());
+        assertEquals(old + 10, g.getAllEdges().getMaxId());
     }
 
     @Test
@@ -159,7 +159,7 @@ public void testDirectedGraph2()
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         prepare.doWork();
         // PrepareTowerNodesShortcutsTest.printEdges(g);
-        assertEquals(old + 17, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 9, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(0, 10);
         assertEquals(10, p.getDistance(), 1e-6);
@@ -276,7 +276,7 @@ public void testRoundaboutUnpacking()
         int old = g.getAllEdges().getMaxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         prepare.doWork();
-        assertEquals(old + 26, g.getAllEdges().getMaxId());
+        assertEquals(old + 23, g.getAllEdges().getMaxId());
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.EdgeIterator;
-import gnu.trove.list.TIntList;
 import gnu.trove.list.array.TIntArrayList;
 import java.util.Arrays;
 
@@ -36,7 +35,7 @@
 public class DijkstraOneToMany extends AbstractRoutingAlgorithm
 {
     protected double[] weights;
-    private final TIntList changedNodes;
+    private final TIntArrayList changedNodes;
     private int[] parents;
     private int[] edgeIds;
     private IntDoubleBinHeap heap;
@@ -130,7 +129,7 @@ public int findEndNode( int from, int to )
             }
 
             heap.clear();
-            changedNodes.clear();
+            changedNodes.reset();
 
             currNode = from;
             weights[currNode] = 0;

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -126,7 +126,7 @@ public void testMoreComplexGraph()
         int old = g.getAllEdges().getMaxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         prepare.doWork();
-        assertEquals(old + 8, g.getAllEdges().getMaxId());
+        assertEquals(old + 10, g.getAllEdges().getMaxId());
     }
 
     @Test
@@ -159,7 +159,7 @@ public void testDirectedGraph2()
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         prepare.doWork();
         // PrepareTowerNodesShortcutsTest.printEdges(g);
-        assertEquals(old + 17, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 9, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(0, 10);
         assertEquals(10, p.getDistance(), 1e-6);
@@ -276,7 +276,7 @@ public void testRoundaboutUnpacking()
         int old = g.getAllEdges().getMaxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(carEncoder, weighting).setGraph(g);
         prepare.doWork();
-        assertEquals(old + 26, g.getAllEdges().getMaxId());
+        assertEquals(old + 23, g.getAllEdges().getMaxId());
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -77,5 +77,5 @@ public class BikeFlagEncoder extends BikeFlagCommonEncoder
     public String toString()
     {
         return "bike";
-    }    
+    }
 }

File: core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
Patch:
@@ -36,7 +36,7 @@
 public abstract class AbstractBikeFlagEncoderTester
 {
     protected  BikeFlagCommonEncoder encoder;
-    String defaultencoderlist = "BIKE,MTB,RACINGBIKE";
+    String defaultencoderlist = "BIKE";
     String defaultencoder = "BIKE";
     
     AbstractBikeFlagEncoderTester () {

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -36,7 +36,7 @@ public class BikeFlagEncoderTest extends AbstractBikeFlagEncoderTester
     @Override
     BikeFlagCommonEncoder createBikeEncoder(String encoderlist, String encoder)
     {
-        BikeFlagCommonEncoder bikeencoder = (BikeFlagEncoder) new EncodingManager("BIKE,MTB").getEncoder("BIKE");
+        BikeFlagCommonEncoder bikeencoder = (BikeFlagEncoder) new EncodingManager("BIKE,MTB,RACINGBIKE").getEncoder("BIKE");
         return bikeencoder;
     }
 

File: core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
Patch:
@@ -23,7 +23,6 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.EdgeIterator;
-import gnu.trove.list.TIntList;
 import gnu.trove.list.array.TIntArrayList;
 import java.util.Arrays;
 
@@ -36,7 +35,7 @@
 public class DijkstraOneToMany extends AbstractRoutingAlgorithm
 {
     protected double[] weights;
-    private final TIntList changedNodes;
+    private final TIntArrayList changedNodes;
     private int[] parents;
     private int[] edgeIds;
     private IntDoubleBinHeap heap;
@@ -130,7 +129,7 @@ public int findEndNode( int from, int to )
             }
 
             heap.clear();
-            changedNodes.clear();
+            changedNodes.reset();
 
             currNode = from;
             weights[currNode] = 0;

File: core/src/main/java/com/graphhopper/routing/util/EdgeFilter.java
Patch:
@@ -31,6 +31,7 @@ public interface EdgeFilter
      * @return true if the current edge should be processed and false otherwise.
      */
     boolean accept( EdgeIteratorState edgeIterState );
+    
     static final EdgeFilter ALL_EDGES = new EdgeFilter()
     {
         @Override

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -48,7 +48,7 @@ public abstract class AbstractGraphStorageTester
     EdgeExplorer carOutExplorer;
     EdgeExplorer carInExplorer;
     EdgeExplorer carAllExplorer;
-    private GraphStorage graph;
+    protected GraphStorage graph;
 
     protected GraphStorage createGraph()
     {

File: core/src/main/java/com/graphhopper/routing/util/EncodedValue.java
Patch:
@@ -63,9 +63,7 @@ public EncodedValue( String name, int shift, int bits, int factor, int defaultVa
     public long setValue( long flags, long value )
     {
         if (value > maxValue)
-        {
-            throw new IllegalArgumentException(name + " value too large for encoding: " + value);
-        }
+            throw new IllegalArgumentException(name + " value too large for encoding: " + value);        
 
         // scale down value
         value /= factor;

File: core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.XFirstSearch;
 import java.util.*;
 import java.util.Map.Entry;
@@ -112,7 +113,7 @@ protected final boolean goFurther( int nodeId )
                 }
 
                 @Override
-                protected final boolean checkAdjacent( EdgeIterator iter )
+                protected final boolean checkAdjacent( EdgeIteratorState iter )
                 {
                     tmpCounter++;
                     return true;

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -180,7 +180,7 @@ public GraphStorage create( long byteCount )
         wayGeometry.create(initSize);
         nameIndex.create(1000);
         properties.create(100);
-        properties.put("osmreader.acceptWay", encodingManager.encoderList());
+        properties.put("osmreader.acceptWay", encodingManager.getEncoderList());
         properties.putCurrentVersions();
         initialized = true;
         return this;
@@ -1255,9 +1255,9 @@ public boolean loadExisting()
                     throw new IllegalStateException("No EncodingManager was configured. And no one was found in the graph: " + dir.getLocation());
 
                 encodingManager = new EncodingManager(acceptStr);
-            } else if (!acceptStr.isEmpty() && !encodingManager.encoderList().equalsIgnoreCase(acceptStr))
+            } else if (!acceptStr.isEmpty() && !encodingManager.getEncoderList().equalsIgnoreCase(acceptStr))
             {
-                throw new IllegalStateException("Encoding does not match:\nGraphhopper config: " + encodingManager.encoderList() + "\nGraph: " + acceptStr);
+                throw new IllegalStateException("Encoding does not match:\nGraphhopper config: " + encodingManager.getEncoderList() + "\nGraph: " + acceptStr);
             }
 
             // nodes

File: core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
Patch:
@@ -663,7 +663,7 @@ protected boolean goFurther( int baseNode )
                     }
 
                     @Override
-                    protected boolean checkAdjacent( EdgeIterator currEdge )
+                    protected boolean checkAdjacent( EdgeIteratorState currEdge )
                     {
                         goFurther = false;
                         if (!edgeFilter.accept(currEdge))
@@ -723,13 +723,13 @@ protected boolean checkAdjacent( EdgeIterator currEdge )
                         return closestMatch.getQueryDistance() > equalNormedDelta;
                     }
 
-                    boolean check( int node, double normedDist, int wayIndex, EdgeIterator iter, QueryResult.Position pos )
+                    boolean check( int node, double normedDist, int wayIndex, EdgeIteratorState edge, QueryResult.Position pos )
                     {
                         if (normedDist < closestMatch.getQueryDistance())
                         {
                             closestMatch.setQueryDistance(normedDist);
                             closestMatch.setClosestNode(node);
-                            closestMatch.setClosestEdge(iter.detach());
+                            closestMatch.setClosestEdge(edge.detach());
                             closestMatch.setWayIndex(wayIndex);
                             closestMatch.setSnappedPosition(pos);
                             return true;

File: core/src/main/java/com/graphhopper/util/XFirstSearch.java
Patch:
@@ -84,7 +84,7 @@ protected boolean goFurther( int nodeId )
         return true;
     }
 
-    protected boolean checkAdjacent( EdgeIterator iter )
+    protected boolean checkAdjacent( EdgeIteratorState edge )
     {
         return true;
     }

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -274,6 +274,6 @@ private long flagsForSpeed( EncodingManager encodingManager, int speedKmPerHour
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "motorway");
         way.setTag("maxspeed", String.format("%d km/h", speedKmPerHour));
-        return encodingManager.handleWayTags(1, way, 0);
+        return encodingManager.handleWayTags(way, 1, 0);
     }
 }

File: core/src/main/java/com/graphhopper/util/FinishInstruction.java
Patch:
@@ -35,7 +35,7 @@ public class FinishInstruction extends Instruction
 
     public FinishInstruction( final double lat, final double lon )
     {
-        super(FINISH, "", DISTANCES, TIMES, new PointList()
+        super(FINISH, "", 0, 0, DISTANCES, TIMES, new PointList()
         {   
             {
                 add(lat, lon);

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -18,8 +18,8 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.util.InstructionUtil;
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.TranslationMap;
 import com.graphhopper.util.TranslationMap.Translation;
 import static com.graphhopper.util.TranslationMapTest.SINGLETON;
@@ -196,14 +196,14 @@ public void testTramStations()
     
     private String encodeDecodeWayType(String name, OSMWay way)
     {
-        
+        InstructionList instructions = new InstructionList();
         long allowed=1;
         long flags=encoder.handleWayTags( allowed,  way, 0 );
         int pavement=encoder.getPavementCode(flags);
         int wayType=encoder.getWayTypeCode(flags);
         
         Translation enMap = SINGLETON.getWithFallBack(Locale.UK);
-        return InstructionUtil.getWayName (name, pavement, wayType,  enMap);
+        return instructions.getWayName (name, pavement, wayType,  enMap);
 
     }
     

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -488,7 +488,7 @@ protected void onPostExecute( GHResponse resp )
                             / 1000f + ", nodes:" + resp.getPoints().getSize() + ", time:"
                             + time + " " + resp.getDebugInfo());
                     logUser("the route is " + (int) (resp.getDistance() / 100) / 10f
-                            + "km long, time:" + resp.getTime() / 60f + "min, debug:" + time);
+                            + "km long, time:" + resp.getMillis() / 60000f + "min, debug:" + time);
 
                     pathOverlay.getOverlayItems().add(createPolyline(resp));
                     mapView.redraw();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -647,7 +647,7 @@ else if (request.getAlgorithm().equals("astarbi"))
         } else
             rsp.setFound(path.isFound());
 
-        return rsp.setDistance(path.getDistance()).setTime(path.getTime()).setDebugInfo(debug);
+        return rsp.setDistance(path.getDistance()).setMillis(path.getMillis()).setDebugInfo(debug);
     }
 
     protected LocationIndex createLocationIndex( Directory dir )

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -640,7 +640,7 @@ public PointList fetchWayGeometry( int mode )
 
             // due to API we need to create a new instance per call!
             if (mode == 3)
-                return pointList.clone(true);
+                return pointList.clone(false);
             else if (mode == 1)
                 return pointList.copy(0, pointList.getSize() - 1);
             else if (mode == 2)

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -64,7 +64,7 @@ private void expandEdge( EdgeSkipIterator mainIter, boolean revert )
             double dist = calcDistance(mainIter);
             distance += dist;
             long flags = mainIter.getFlags();
-            time += calcTime(dist, flags);
+            millis += calcMillis(dist, flags);
             addEdge(mainIter.getEdge());
             return;
         }

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -63,7 +63,7 @@ public interface EdgeIteratorState
 
     /**
      * @param list is a sorted collection of nodes between the baseNode and the current adjacent
-     * node
+     * node. Specify the list without the adjacent and base nodes.
      */
     EdgeIteratorState setWayGeometry( PointList list );
 

File: core/src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.util;
 
+import com.graphhopper.storage.Graph;
 import com.graphhopper.util.shapes.BBox;
 import gnu.trove.list.TIntList;
 import gnu.trove.list.array.TIntArrayList;
@@ -230,7 +231,7 @@ public static void close( Closeable cl )
         {
             throw new RuntimeException("Couldn't close resource", ex);
         }
-    }
+    }    
 
     public static boolean isEmpty( String str )
     {
@@ -388,4 +389,4 @@ public static String firstBig( String sayText )
 
         return Character.toUpperCase(sayText.charAt(0)) + sayText.substring(1);
     }
-}
+}
\ No newline at end of file

File: core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -74,14 +74,14 @@ public void testCalcFastestPath()
         Path p1 = prepareGraph(graphShortest, carEncoder, new ShortestWeighting()).createAlgo().calcPath(0, 3);
         assertEquals(Helper.createTList(0, 1, 5, 2, 3), p1.calcNodes());
         assertEquals(p1.toString(), 24000, p1.getDistance(), 1e-6);
-        assertEquals(p1.toString(), 8640, p1.getTime());
+        assertEquals(p1.toString(), 8640 * 1000, p1.getMillis());
 
         Graph graphFastest = createGraph();
         initDirectedAndDiffSpeed(graphFastest);
         Path p2 = prepareGraph(graphFastest, carEncoder, new FastestWeighting(carEncoder)).createAlgo().calcPath(0, 3);
         assertEquals(Helper.createTList(0, 4, 6, 7, 5, 3), p2.calcNodes());
         assertEquals(p2.toString(), 31000, p2.getDistance(), 1e-6);
-        assertEquals(p2.toString(), 5580, p2.getTime());
+        assertEquals(p2.toString(), 5580 * 1000, p2.getMillis());
     }
 
     // 0-1-2-3
@@ -120,7 +120,7 @@ public void testCalcFootPath()
         initFootVsCar(graphShortest);
         Path p1 = prepareGraph(graphShortest, footEncoder, new ShortestWeighting()).createAlgo().calcPath(0, 7);
         assertEquals(p1.toString(), 17000, p1.getDistance(), 1e-6);
-        assertEquals(p1.toString(), 12240, p1.getTime());
+        assertEquals(p1.toString(), 12240 * 1000, p1.getMillis());
         assertEquals(Helper.createTList(0, 4, 5, 7), p1.calcNodes());
     }
 

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -62,9 +62,9 @@ public void testMonacoWithInstructions()
             assertEquals(3437.6, rsp.getDistance(), .1);
             assertEquals(87, rsp.getPoints().getSize());
 
-            List<Instruction> il = rsp.getInstructions();
-            assertEquals(12, il.size());
-            List<String> iList = InstructionUtil.createDescription(il, trMap.getWithFallBack(Locale.US));
+            InstructionList il = rsp.getInstructions();
+            assertEquals(13, il.size());
+            List<String> iList = il.createDescription(trMap.getWithFallBack(Locale.US));
             // TODO roundabout fine tuning -> enter + leave roundabout (+ two rounabouts -> is it necessary if we do not leave the street?)
             assertEquals("Continue onto Avenue des Guelfes", iList.get(0));
             assertEquals("Turn slight left onto Avenue des Papalins", iList.get(1));

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -48,7 +48,7 @@ public void testTime()
     {
         FlagEncoder encoder = new EncodingManager("CAR").getEncoder("CAR");
         Path p = new Path(null, encoder);
-        assertEquals(60 * 60, p.calcTime(100000, encoder.setProperties(100, true, true)));
+        assertEquals(60 * 60 * 1000, p.calcMillis(100000, encoder.setProperties(100, true, true)));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
Patch:
@@ -141,9 +141,9 @@ public void testMultipleVirtualNodes()
         assertEquals(3, res1.getClosestNode());
         assertEquals(3, getPoints(queryGraph, 0, 3).getSize());
         PointList pl = getPoints(queryGraph, 3, 1);
-        assertEquals(2, pl.getSize());
-        assertEquals(new GHPoint(1, 2.5), pl.toGHPoint(0));
-        assertEquals(new GHPoint(1.5, 1.5), pl.toGHPoint(1));
+        assertEquals(2, pl.getSize());        
+        assertEquals(new GHPoint(1.5, 1.5), pl.toGHPoint(0));
+        assertEquals(new GHPoint(1, 2.5), pl.toGHPoint(1));
 
         EdgeIteratorState edge = GHUtility.getEdge(queryGraph, 3, 1);
         assertNotNull(queryGraph.getEdgeProps(edge.getEdge(), 3));

File: core/src/test/java/com/graphhopper/storage/index/Location2IDFullIndexTest.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author Peter Karich
  */
-public class Location2IDFullIndexTest extends AbstractLocation2IDIndexTester
+public class Location2IDFullIndexTest extends AbstractLocationIndexTester
 {
     @Override
     public LocationIndex createIndex( Graph g, int resolution )

File: core/src/test/java/com/graphhopper/storage/index/Location2IDFullWithEdgesIndexTest.java
Patch:
@@ -26,7 +26,7 @@
  *
  * @author Peter Karich
  */
-public class Location2IDFullWithEdgesIndexTest extends AbstractLocation2IDIndexTester
+public class Location2IDFullWithEdgesIndexTest extends AbstractLocationIndexTester
 {
     @Override
     public LocationIndex createIndex( Graph g, int resolution )

File: core/src/test/java/com/graphhopper/storage/index/Location2IDQuadtreeTest.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @author Peter Karich
  */
-public class Location2IDQuadtreeTest extends AbstractLocation2IDIndexTester
+public class Location2IDQuadtreeTest extends AbstractLocationIndexTester
 {
     @Override
     public LocationIndex createIndex( Graph g, int resolution )

File: core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeTest.java
Patch:
@@ -35,7 +35,7 @@
  *
  * @author Peter Karich
  */
-public class LocationIndexTreeTest extends AbstractLocation2IDIndexTester {
+public class LocationIndexTreeTest extends AbstractLocationIndexTester {
 
     protected final EncodingManager encodingManager = new EncodingManager("CAR");
 

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -93,7 +93,7 @@ public GHResponse route( GHRequest request )
             took = json.getJSONObject("info").getDouble("took");
             JSONObject route = json.getJSONObject("route");
             double distance = route.getDouble("distance");
-            int timeInSeconds = route.getInt("time");
+            int millis = route.getInt("time");
             PointList list;
             if (encodePolyline)
             {
@@ -110,7 +110,7 @@ public GHResponse route( GHRequest request )
                     list.add(lat, lon);
                 }
             }
-            return new GHResponse().setPoints(list).setDistance(distance).setTime(timeInSeconds);
+            return new GHResponse().setPoints(list).setDistance(distance).setMillis(millis);
         } catch (Exception ex)
         {
             throw new RuntimeException("Problem while fetching path " + request.getFrom() + "->" + request.getTo(), ex);

File: web/src/main/java/com/graphhopper/http/I18NServlet.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * @author Peter Karich
  */
-public class I18NServlet extends GHServlet
+public class I18NServlet extends GHBaseServlet
 {
     @Inject
     private TranslationMap map;

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -278,7 +278,7 @@ public long handleWayTags( long allowed, OSMWay way, int relationweightcode)
             // Populate bits at wayTypemask with wayType            
             wayType ourwayType = wayType.OTHERSMALLWAY;
             if (way.hasTag("highway", pushing_sections))
-               ourwayType=wayType.WHEELER;
+               ourwayType=wayType.PUSHING_SECTION;
             if ( (way.hasTag("bicycle", intended) && way.hasTag("highway", pushing_sections)) ||
                  (way.getTag("highway") == "cycleway") )
                 ourwayType=wayType.CYCLEWAY;
@@ -516,7 +516,7 @@ public int getValue() {
     private enum wayType
     {
         ROAD(0),
-        WHEELER(1),
+        PUSHING_SECTION(1),
         CYCLEWAY(2),
         OTHERSMALLWAY(3);
        

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -40,7 +40,7 @@ public class BikeFlagEncoder extends AbstractFlagEncoder
     private int unpavedBit = 0;
     private int wayTypeStartBit = 0;
     private final static int unspecifiedRelationWeight = 4;
-    //Wheeler heighways are parts where you need to get off your bike and wheel (German: Schiebestrecke)
+    //Pushing section heighways are parts where you need to get off your bike and push it (German: Schiebestrecke)
     private HashSet<String> pushing_sections = new HashSet<String>();
     private HashSet<String> intended = new HashSet<String>();
     private HashSet<String> oppositeLanes = new HashSet<String>();

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -11,7 +11,7 @@
  * 
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either exkrepress or implied.
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -152,7 +152,7 @@ public void testMonacoFoot()
     public void testMonacoBike()
     {
         List<OneRun> list = new ArrayList<OneRun>();
-        list.add(new OneRun(43.730729, 7.421288, 43.727687, 7.418737, 1671, 84));
+        list.add(new OneRun(43.730864,7.420771, 43.727687, 7.418737, 1641, 76));
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3580, 133));
         list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2323, 100));
         list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1434, 80));

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -198,7 +198,7 @@ public int handleRelationTags( OSMRelation relation )
     }
 
     // In case that the way belongs to a relation for which we do have a relation triggered weight change.    
-    // FIXME: Re-write in case that there is a more geneic way to influence the weighting.
+    // FIXME: Re-write in case that there is a more geneic way to influence the weighting (issue #124).
     // Here we boost or reduce the speed according to the relationweightcode:
     private int relationWeightCodeToSpeed(int highwayspeed, int relationweightcode)
     {
@@ -230,7 +230,7 @@ public long handleWayTags( long allowed, OSMWay way, int relationweightcode)
         {
             
             // set speed
-            // FIXME Rewrite necessary after decision for other weighting than speed!
+            // FIXME Rewrite necessary after decision #124 for other weighting than speed!
             // Currently there is only speed, so we increase it.
             int speed;
             // relationcode = 0 : This happens for e.g. ways with a bus or hiking relation

File: core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
Patch:
@@ -71,4 +71,7 @@ public interface FlagEncoder
     // <-         f | t  | t
     // <->        f | f  | t
     boolean canBeOverwritten( long flags1, long flags2 );
+    
+    int getPavementCode(long flags);
+    int getWayTypeCode(long flags);
 }

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -229,7 +229,7 @@ void runAlgo( TestAlgoCollector testCollector, String osmFile,
                     setGraphHopperLocation(graphFile).setEncodingManager(new EncodingManager(importVehicles)).
                     importOrLoad();
 
-            final AbstractFlagEncoder encoder = hopper.getEncodingManager().getEncoder(vehicle);
+            FlagEncoder encoder = hopper.getEncodingManager().getEncoder(vehicle);
             Weighting weighting = new ShortestWeighting();
             if ("fastest".equalsIgnoreCase(weightCalcStr))
                 weighting = new FastestWeighting(encoder);

File: core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
Patch:
@@ -662,12 +662,12 @@ public void testBounds()
     public void testFlags()
     {
         graph = createGraph();
-        graph.edge(0, 1).setDistance(10).setFlags(carEncoder.setProperties(120, true, true));
+        graph.edge(0, 1).setDistance(10).setFlags(carEncoder.setProperties(100, true, true));
         graph.edge(2, 3).setDistance(10).setFlags(carEncoder.setProperties(10, true, false));
 
         EdgeIterator iter = carAllExplorer.setBaseNode(0);
         assertTrue(iter.next());
-        assertEquals(carEncoder.setProperties(120, true, true), iter.getFlags());
+        assertEquals(carEncoder.setProperties(100, true, true), iter.getFlags());
 
         iter = carAllExplorer.setBaseNode(2);
         assertTrue(iter.next());

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -640,7 +640,7 @@ public PointList fetchWayGeometry( int mode )
 
             // due to API we need to create a new instance per call!
             if (mode == 3)
-                return pointList.clone(true);
+                return pointList.clone(false);
             else if (mode == 1)
                 return pointList.copy(0, pointList.getSize() - 1);
             else if (mode == 2)

File: core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
Patch:
@@ -141,9 +141,9 @@ public void testMultipleVirtualNodes()
         assertEquals(3, res1.getClosestNode());
         assertEquals(3, getPoints(queryGraph, 0, 3).getSize());
         PointList pl = getPoints(queryGraph, 3, 1);
-        assertEquals(2, pl.getSize());
-        assertEquals(new GHPoint(1, 2.5), pl.toGHPoint(0));
-        assertEquals(new GHPoint(1.5, 1.5), pl.toGHPoint(1));
+        assertEquals(2, pl.getSize());        
+        assertEquals(new GHPoint(1.5, 1.5), pl.toGHPoint(0));
+        assertEquals(new GHPoint(1, 2.5), pl.toGHPoint(1));
 
         EdgeIteratorState edge = GHUtility.getEdge(queryGraph, 3, 1);
         assertNotNull(queryGraph.getEdgeProps(edge.getEdge(), 3));

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -455,6 +455,7 @@ public void next( EdgeIteratorState edge, int index )
             private void add( EdgeIteratorState edge )
             {
                 // add points in opposite direction as adj node is previous
+                // skip base point => 'i > 0'
                 PointList pl = edge.fetchWayGeometry(3);
                 int len = pl.size() - 1;
                 for (int i = len; i > 0; i--)

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -63,7 +63,7 @@ public interface EdgeIteratorState
 
     /**
      * @param list is a sorted collection of nodes between the baseNode and the current adjacent
-     * node
+     * node. Specify the list without the adjacent and base nodes.
      */
     EdgeIteratorState setWayGeometry( PointList list );
 

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -63,7 +63,7 @@ public void testMonacoWithInstructions()
             assertEquals(87, rsp.getPoints().getSize());
 
             InstructionList il = rsp.getInstructions();
-            assertEquals(12, il.size());
+            assertEquals(13, il.size());
             List<String> iList = il.createDescription(trMap.getWithFallBack(Locale.US));
             // TODO roundabout fine tuning -> enter + leave roundabout (+ two rounabouts -> is it necessary if we do not leave the street?)
             assertEquals("Continue onto Avenue des Guelfes", iList.get(0));

File: core/src/main/java/com/graphhopper/util/InstructionUtil.java
Patch:
@@ -176,7 +176,6 @@ public static List<String> createDescription(List<Instruction> instructions, Tra
      */
     public static void updateLastDistanceAndTime(List<Instruction> instructions, double prevDist, long prevTime)
     {
-        System.out.printf("updating at index %d with dist %f and time %d\n", instructions.size()-1, prevDist, prevTime);
         if (instructions.isEmpty())
             throw new IllegalStateException("Cannot update last distance with:" + prevDist);
         instructions.get(instructions.size() - 1).setDistance(prevDist);

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -167,9 +167,9 @@ public int accept( OSMWay way )
      * <p/>
      * @return the encoded flags
      */
-    public int handleWayTags( int includeWay, OSMWay way )
+    public long handleWayTags( int includeWay, OSMWay way )
     {
-        int flags = 0;
+        long flags = 0;
         for (int i = 0; i < encoderCount; i++)
         {
             flags |= encoders.get(i).handleWayTags(includeWay, way);

File: core/src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -196,12 +196,12 @@ public void rename( String newName )
             {
                 if (!file.renameTo(new File(location + newName)))
                 {
-                    throw new IllegalStateException("Couldn't rename this RAMDataAccess object to " + newName);
+                    throw new IllegalStateException("Couldn't rename this " + getType() + " object to " + newName);
                 }
                 name = newName;
             } catch (Exception ex)
             {
-                throw new IllegalStateException("Couldn't rename this RAMDataAccess object!", ex);
+                throw new IllegalStateException("Couldn't rename this " + getType() + " object!", ex);
             }
         } else
         {

File: core/src/test/java/com/graphhopper/storage/DataAccessTest.java
Patch:
@@ -258,7 +258,8 @@ public void testBoundsCheck()
         } catch (Exception ex)
         {
         }
-
+        da.close();
+        
         da = createDataAccess(name);
         da.create(128);
         da.setInt(31 * 4, 200);
@@ -270,6 +271,7 @@ public void testBoundsCheck()
         } catch (Exception ex)
         {
         }
+        da.close();
     }
 
     @Test

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -296,7 +296,7 @@ public void cleanUp()
         int n80 = AbstractGraphStorageTester.getIdOf(graph, 54.1);
         EdgeIterator iter = carOutExplorer.setBaseNode(n80);
         iter.next();
-        assertEquals(10, carEncoder.getSpeed(iter.getFlags()));
+        assertEquals(5, carEncoder.getSpeed(iter.getFlags()));
 
         // more precise speed calculation! ~150km (from 54.0,10.1 to 55.0,10.1) in duration=70 minutes -> wow ;)
         // => 130km/h => / 1.4 => 92km/h        

File: core/src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -53,7 +53,7 @@ public AStar( Graph g, FlagEncoder encoder, Weighting weighting )
     }
 
     /**
-     * @param fast if true it enables an approximative distance calculation from lat,lon values
+     * @param approx if true it enables an approximative distance calculation from lat,lon values
      */
     public AStar setApproximation( boolean approx )
     {

File: core/src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -94,7 +94,7 @@ protected void initCollections( int size )
     }
 
     /**
-     * @param fast if true it enables approximative distance calculation from lat,lon values
+     * @param approx if true it enables approximative distance calculation from lat,lon values
      */
     public AStarBidirection setApproximation( boolean approx )
     {

File: core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -32,7 +32,7 @@
  * <p/>
  * 'Ref' stands for reference implementation and is using the normal Java-'reference'-way.
  * <p/>
- * @see DijkstraBidirectionforanoptimized but more complicated version
+ * @see DijkstraBidirection for an array based but more complicated version
  * @author Peter Karich
  */
 public class DijkstraBidirectionRef extends AbstractBidirAlgo

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -157,9 +157,6 @@ public int defineBits( int index, int shift )
 
     /**
      * Parse tags on nodes, looking for barriers.
-     * <p/>
-     * @param node
-     * @return
      */
     public abstract long analyzeNodeTags( OSMNode node );
 

File: core/src/main/java/com/graphhopper/storage/GraphBuilder.java
Patch:
@@ -27,7 +27,7 @@
  */
 public class GraphBuilder
 {
-    private EncodingManager encodingManager;
+    private final EncodingManager encodingManager;
     private String location;
     private boolean mmap;
     private boolean store;

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -40,7 +40,7 @@
  * Life cycle: (1) object creation, (2) configuration via setters & getters, (3) create or
  * loadExisting, (4) usage, (5) flush, (6) close
  * <p/>
- * @see GraphBuilderUsetheGraphBuilder class to create a (Level)GraphStorage easier.
+ * @see GraphBuilder Use the GraphBuilder class to create a (Level)GraphStorage easier.
  * @see LevelGraphStorage
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -43,7 +43,7 @@
  * implementation is the a very memory efficient representation for areas with lots of node and
  * edges, but lacks precision. No edge distances are measured.
  * <p/>
- * @see Location2NodesNtreefora more precise but more complicated and also slightly slower
+ * @see LocationIndexTree which is more precise but more complicated and also slightly slower
  * implementation of LocationIndex.
  * <p/>
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/util/BitUtil.java
Patch:
@@ -216,10 +216,10 @@ public String toBitString( long value, int bits )
     public abstract String toBitString( byte[] bytes );
 
     /**
-     * Reverses the bits in the specified long value and it removes the remaining higher bits.
+     * Reverses the bits in the specified long value and it removes the remaining higher bits. See
+     * also http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious
      * <p/>
      * @param maxBits the maximum number of recognized bits for reversal
-     * @see also http://graphics.stanford.edu/~seander/bithacks.html#BitReverseObvious
      */
     public final long reverse( long value, int maxBits )
     {

File: core/src/main/java/com/graphhopper/util/DistanceCalc.java
Patch:
@@ -24,7 +24,7 @@
  * Calculates the distance of two points or one point and an edge on earth via haversine formula.
  * Allows subclasses to implement less or more precise calculations.
  * <p/>
- * @see http://en.wikipedia.org/wiki/Haversine_formula
+ * See http://en.wikipedia.org/wiki/Haversine_formula
  * <p/>
  * @author Peter Karich
  */

File: core/src/main/java/com/graphhopper/util/EdgeExplorer.java
Patch:
@@ -21,7 +21,7 @@
  * Class to get EdgeIterator create it via graph.createEdgeExplorer(). Use one instance per thread.
  * <p/>
  * @see EdgeIterator
- * @see EdgeIteratorBase
+ * @see EdgeIteratorState
  * @author Peter Karich
  */
 public interface EdgeExplorer

File: core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
Patch:
@@ -584,7 +584,7 @@ public String toString()
     @Override
     public EdgeIteratorState getEdgeProps( int edgeId, int adjNode )
     {
-        if (edgeId <= EdgeIterator.NO_EDGE || edgeId > edgeCount)
+        if (edgeId <= EdgeIterator.NO_EDGE || edgeId >= edgeCount)
             throw new IllegalStateException("edgeId " + edgeId + " out of bounds [0," + nf(edgeCount) + "]");
 
         if (adjNode < 0 && adjNode != Integer.MIN_VALUE)

File: core/src/main/java/com/graphhopper/storage/Graph.java
Patch:
@@ -75,7 +75,9 @@ public interface Graph
     /**
      * Returns a wrapper over the specified edgeId.
      * <p/>
-     * @param adjNode is the node that will be returned via adjNode()
+     * @param adjNode is the node that will be returned via adjNode(). If adjNode is
+     * Integer.MIN_VALUE then the edge with undefined values for adjNode and baseNode will be
+     * returned.
      * @return an edge iterator over one element where the method next() will always return false.
      * @throws IllegalStateException if edgeId is not valid
      */

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -56,14 +56,14 @@ public TestAlgoCollector assertDistance( RoutingAlgorithm algo,
 
         PointList pointList = path.calcPoints();
         double tmpDist = pointList.calcDistance(distCalc);
-        if (Math.abs(path.getDistance() - tmpDist) > 3)
+        if (Math.abs(path.getDistance() - tmpDist) > 5)
         {
             errors.add(algo + " path.getDistance was  " + path.getDistance()
                     + "\t pointList.calcDistance was " + tmpDist + "\t (expected points " + pointCount
                     + ", expected distance " + distance + ") from:" + from + ", to:" + to);
         }
 
-        if (Math.abs(path.getDistance() - distance) > 5)
+        if (Math.abs(path.getDistance() - distance) > 4)
         {
             errors.add(algo + " returns path not matching the expected distance of " + distance
                     + "\t Returned was " + path.getDistance() + "\t (expected points " + pointCount

File: core/src/main/java/com/graphhopper/util/shapes/GHPlace.java
Patch:
@@ -39,8 +39,8 @@ public GHPlace( String name )
 
     public GHPlace( double lat, double lon )
     {
-        this.lat = lat;
-        this.lon = lon;
+        this.lat = GHPoint.makeValidLat(lat);
+        this.lon = GHPoint.makeValidLon(lon);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -75,7 +75,7 @@ protected QueryGraph createQueryGraph()
     public Path calcPath( QueryResult fromRes, QueryResult toRes )
     {
         QueryGraph queryGraph = createQueryGraph();
-        List<QueryResult> results = new ArrayList(2);
+        List<QueryResult> results = new ArrayList<QueryResult>(2);
         results.add(fromRes);
         results.add(toRes);
         queryGraph.lookup(results);

File: core/src/main/java/com/graphhopper/routing/QueryGraph.java
Patch:
@@ -79,7 +79,7 @@ public void lookup( List<QueryResult> resList )
 
         virtualEdges = new ArrayList<EdgeIteratorState>(resList.size() * 2);
         virtualNodes = new PointList(resList.size());
-        queryResults = new ArrayList(resList.size());
+        queryResults = new ArrayList<QueryResult>(resList.size());
 
         TIntObjectMap<List<QueryResult>> edge2res = new TIntObjectHashMap<List<QueryResult>>(resList.size());
 

File: core/src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -210,7 +210,7 @@ protected double calcDistance( EdgeIteratorState iter )
     /**
      * Calculates the time in seconds for the specified distance in meter and speed (via setProperties)
      */
-    protected long calcTime( double distance, int flags )
+    protected long calcTime( double distance, long flags )
     {
         return (long) (distance * 3.6 / encoder.getSpeed(flags));
     }

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -63,7 +63,7 @@ private void expandEdge( EdgeSkipIterator mainIter, boolean revert )
         {
             double dist = calcDistance(mainIter);
             distance += dist;
-            int flags = mainIter.getFlags();
+            long flags = mainIter.getFlags();
             time += calcTime(dist, flags);
             addEdge(mainIter.getEdge());
             return;

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -48,7 +48,7 @@ public DefaultEdgeFilter( FlagEncoder encoder, boolean in, boolean out )
     @Override
     public boolean accept( EdgeIteratorState iter )
     {
-        int flags = iter.getFlags();
+        long flags = iter.getFlags();
         return out && encoder.isForward(flags) || in && encoder.isBackward(flags);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -247,7 +247,7 @@ public int flagsDefault( boolean forward, boolean backward )
     /**
      * Swap direction for all encoders
      */
-    public int swapDirection( int flags )
+    public long swapDirection( long flags )
     {
         for (int i = 0; i < encoderCount; i++)
         {

File: core/src/main/java/com/graphhopper/storage/index/Location2NodesNtreeLG.java
Patch:
@@ -142,13 +142,13 @@ public EdgeIteratorState setDistance( double dist )
             }
 
             @Override
-            public int getFlags()
+            public long getFlags()
             {
                 return tmpIter.getFlags();
             }
 
             @Override
-            public EdgeIteratorState setFlags( int flags )
+            public EdgeIteratorState setFlags( long flags )
             {
                 return tmpIter.setFlags(flags);
             }

File: core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
Patch:
@@ -74,9 +74,9 @@ public interface EdgeIteratorState
 
     EdgeIteratorState setDistance( double dist );
 
-    int getFlags();
+    long getFlags();
 
-    EdgeIteratorState setFlags( int flags );
+    EdgeIteratorState setFlags( long flags );
 
     String getName();
 

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -355,7 +355,7 @@ public EdgeIteratorState setDistance( double dist )
         }
 
         @Override
-        public EdgeIteratorState setFlags( int flags )
+        public EdgeIteratorState setFlags( long flags )
         {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
@@ -391,7 +391,7 @@ public double getDistance()
         }
 
         @Override
-        public int getFlags()
+        public long getFlags()
         {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }

File: core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
Patch:
@@ -37,7 +37,7 @@ public class BikeFlagEncoderTest
     @Test
     public void testGetSpeed()
     {
-        int result = encoder.setProperties(10, true, true);
+        long result = encoder.setProperties(10, true, true);
         assertEquals(10, encoder.getSpeed(result));
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "primary");

File: core/src/test/java/com/graphhopper/routing/util/FastestWeightingTest.java
Patch:
@@ -34,7 +34,7 @@ public class FastestWeightingTest
     public void testMinWeightHasSameUnitAs_getWeight()
     {
         FastestWeighting instance = new FastestWeighting(encoder);
-        int flags = encoder.setProperties(encoder.getMaxSpeed(), true, true);
+        long flags = encoder.setProperties(encoder.getMaxSpeed(), true, true);
         assertEquals(instance.getMinWeight(10), instance.calcWeight(createEdge(10, flags)), 1e-8);
     }
 
@@ -45,7 +45,7 @@ public void testSpeed0()
         assertEquals(1.0 / 0, instance.calcWeight(createEdge(10, encoder.setProperties(0, true, true))), 1e-8);
     }
 
-    EdgeIterator createEdge( final double distance, final int flags )
+    EdgeIterator createEdge( final double distance, final long flags )
     {
         return new GHUtility.DisabledEdgeIterator()
         {
@@ -56,7 +56,7 @@ public double getDistance()
             }
 
             @Override
-            public int getFlags()
+            public long getFlags()
             {
                 return flags;
             }

File: core/src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java
Patch:
@@ -123,8 +123,8 @@ public void testDisconnectEdge()
     {
         LevelGraphStorage g = (LevelGraphStorage) createGraph();
         // only remove edges
-        int flags = carEncoder.setProperties(60, true, true);
-        int flags2 = carEncoder.setProperties(60, true, false);
+        long flags = carEncoder.setProperties(60, true, true);
+        long flags2 = carEncoder.setProperties(60, true, false);
         g.edge(4, 1, 30, true);
         EdgeSkipExplorer tmp = g.shortcut(1, 2);
         tmp.setDistance(10).setFlags(flags);

File: core/src/test/java/com/graphhopper/storage/index/Location2NodesNtreeLGTest.java
Patch:
@@ -82,7 +82,7 @@ public void testLevelGraph()
 
         // create shortcuts
         FlagEncoder car = encodingManager.getEncoder("CAR");
-        int flags = car.setProperties(60, true, true);
+        long flags = car.setProperties(60, true, true);
         EdgeSkipExplorer iter5 = g.shortcut(0, 2);
         iter5.setDistance(20).setFlags(flags);
         iter5.setSkippedEdges(iter1.getEdge(), iter2.getEdge());

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -188,7 +188,7 @@ public String getLanguage()
         @Override
         public String tr( String key, Object... params )
         {
-            String val = map.get(key);
+            String val = map.get(key.toLowerCase());
             if (Helper.isEmpty(val))
                 return key;
 
@@ -197,7 +197,7 @@ public String tr( String key, Object... params )
 
         public TranslationHashMap put( String key, String val )
         {
-            String existing = map.put(key, val);
+            String existing = map.put(key.toLowerCase(), val);
             if (existing != null)
                 throw new IllegalStateException("Cannot overwrite key " + key + " with " + val + ", was: " + existing);
             return this;

File: core/src/main/java/com/graphhopper/geohash/SpatialKeyAlgo.java
Patch:
@@ -172,6 +172,7 @@ public final long encode( double lat, double lon )
                 }
             }
             i++;
+
             if (i < allBits)
                 hash <<= 1;
             else

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -595,15 +595,14 @@ EdgeIteratorState addEdge( int fromIndex, int toIndex, PointList pointList, int
         int nodes = pointList.getSize();
         for (int i = 1; i < nodes; i++)
         {
+            // we could save some lines if we would use pointListIncludingTowerNodes.calculateDistance(distCalc);
             lat = pointList.getLatitude(i);
             lon = pointList.getLongitude(i);
             towerNodeDistance += distCalc.calcDist(prevLat, prevLon, lat, lon);
             prevLat = lat;
             prevLon = lon;
             if (nodes > 2 && i < nodes - 1)
-            {
-                pillarNodes.add(lat, lon);
-            }
+                pillarNodes.add(lat, lon);            
         }
         if (towerNodeDistance == 0)
         {

File: core/src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -82,7 +82,7 @@ public Path extract()
         EdgeEntry currEdge = edgeEntry;
         while (EdgeIterator.Edge.isValid(currEdge.edge))
         {
-            processDistance(currEdge.edge, currEdge.endNode);
+            processEdge(currEdge.edge, currEdge.endNode);
             currEdge = currEdge.parent;
         }
         setFromNode(currEdge.endNode);
@@ -92,7 +92,7 @@ public Path extract()
         while (EdgeIterator.Edge.isValid(tmpEdge))
         {
             currEdge = currEdge.parent;
-            processDistance(tmpEdge, currEdge.endNode);
+            processEdge(tmpEdge, currEdge.endNode);
             tmpEdge = currEdge.edge;
         }
         setEndNode(currEdge.endNode);

File: core/src/main/java/com/graphhopper/routing/util/AbstractAlgoPreparation.java
Patch:
@@ -39,11 +39,10 @@ public AlgorithmPreparation setGraph( Graph g )
     public T doWork()
     {
         if (prepared)
-        {
             throw new IllegalStateException("Call doWork only once!");
-        }
+
         prepared = true;
-        // no operation
+        // no operation        
         return (T) this;
     }
 

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -309,8 +309,7 @@ protected static int parseDuration( String str )
     }
 
     /**
-     * TODO we just need the distance to calculate the real speed and then add 'duration' for
-     * waiting
+     * Special handling for ferry ways.
      */
     protected int handleFerry( OSMWay way, int unknownSpeed, int shortTripsSpeed, int longTripsSpeed )
     {

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -19,6 +19,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
 
 /**
  * @author Peter Karich
@@ -45,7 +46,7 @@ public DefaultEdgeFilter( FlagEncoder encoder, boolean in, boolean out )
     }
 
     @Override
-    public boolean accept( EdgeIterator iter )
+    public boolean accept( EdgeIteratorState iter )
     {
         int flags = iter.getFlags();
         return out && encoder.isForward(flags) || in && encoder.isBackward(flags);

File: core/src/main/java/com/graphhopper/routing/util/EdgeFilter.java
Patch:
@@ -19,6 +19,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
 
 /**
  * Class used to traverse a graph.
@@ -30,11 +31,11 @@ public interface EdgeFilter
     /**
      * @return true if the current edge should be processed and false otherwise.
      */
-    boolean accept( EdgeIterator iter );
+    boolean accept( EdgeIteratorState edgeIterState );
     static final EdgeFilter ALL_EDGES = new EdgeFilter()
     {
         @Override
-        public boolean accept( EdgeIterator iter )
+        public final boolean accept( EdgeIteratorState edgeIterState )
         {
             return true;
         }

File: core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
Patch:
@@ -18,7 +18,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.storage.LevelGraph;
-import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
 
 /**
  * Only certain nodes are accepted and therefor the others are ignored.
@@ -35,7 +35,7 @@ public LevelEdgeFilter( LevelGraph g )
     }
 
     @Override
-    public boolean accept( EdgeIterator edgeIter )
+    public boolean accept( EdgeIteratorState edgeIter )
     {
         return graph.getLevel(edgeIter.getBaseNode()) <= graph.getLevel(edgeIter.getAdjNode());
     }

File: core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -199,8 +199,8 @@ int removeZeroDegreeNodes()
         EdgeExplorer explorer = g.createEdgeExplorer();
         for (int start = 0; start < locs; start++)
         {
-            explorer.setBaseNode(start);
-            if (!explorer.next())
+            EdgeIterator iter = explorer.setBaseNode(start);
+            if (!iter.next())
             {
                 removed++;
                 g.markNodeRemoved(start);

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -90,7 +90,7 @@ public MMapDataAccess create( long bytes )
     public DataAccess copyTo( DataAccess da )
     {
         // if(da instanceof MMapDataAccess) {
-        // TODO make copying into mmap a lot faster via bytebuffer
+        // TODO PERFORMANCE make copying into mmap a lot faster via bytebuffer
         // also copying into RAMDataAccess could be faster via bytebuffer
         // is a flush necessary then?
         // }

File: core/src/main/java/com/graphhopper/storage/RAMDataAccess.java
Patch:
@@ -64,7 +64,7 @@ public DataAccess copyTo( DataAccess da )
         if (da instanceof RAMDataAccess)
         {
             RAMDataAccess rda = (RAMDataAccess) da;
-            // TODO we could reuse rda segments!
+            // TODO PERFORMANCE we could reuse rda segments!
             rda.segments = new byte[segments.length][];
             for (int i = 0; i < segments.length; i++)
             {

File: core/src/main/java/com/graphhopper/storage/RAMIntDataAccess.java
Patch:
@@ -63,7 +63,7 @@ public DataAccess copyTo( DataAccess da )
         if (da instanceof RAMIntDataAccess)
         {
             RAMIntDataAccess rda = (RAMIntDataAccess) da;
-            // TODO we could reuse rda segments!
+            // TODO PERFORMANCE we could reuse rda segments!
             rda.segments = new int[segments.length][];
             for (int i = 0; i < segments.length; i++)
             {

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -33,8 +33,8 @@
  */
 public class StorableProperties implements Storable<StorableProperties>
 {
-    private Map<String, String> map = new LinkedHashMap<String, String>();
-    private DataAccess da;
+    private final Map<String, String> map = new LinkedHashMap<String, String>();
+    private final DataAccess da;
 
     public StorableProperties( Directory dir )
     {

File: core/src/main/java/com/graphhopper/storage/index/Location2IDIndex.java
Patch:
@@ -42,7 +42,7 @@ public interface Location2IDIndex extends Storable<Location2IDIndex>
     Location2IDIndex prepareIndex();
 
     /**
-     * @return the node id for the specified geo location (latitude,longitude)
+     * @return the closest node id for the specified geo location (latitude,longitude)
      */
     int findID( double lat, double lon );
 
@@ -51,14 +51,15 @@ public interface Location2IDIndex extends Storable<Location2IDIndex>
      * node into the graph is accessible from a selected vehicle. E.g. if you have a FOOT-query do:      <pre>
      *   new DefaultEdgeFilter(new FootFlagEncoder());
      * </pre>
+     * <p>
      * @return An object containing the closest node and edge for the specfied location. The node id
      * has at least one edge which is accepted from the specified edgeFilter. If nothing is found it
      * returns null.
      */
     LocationIDResult findClosest( double lat, double lon, EdgeFilter edgeFilter );
 
     /**
-     * @param approx if false this makes initialization and querying faster but less precise.
+     * @param approxDist false if initialization and querying should be faster but less precise.
      */
     Location2IDIndex setApproximation( boolean approxDist );
 

File: core/src/main/java/com/graphhopper/trees/QTDataNode.java
Patch:
@@ -18,8 +18,8 @@
 package com.graphhopper.trees;
 
 import com.graphhopper.geohash.SpatialKeyAlgo;
-import com.graphhopper.util.shapes.CoordTrig;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.shapes.GHPoint;
 
 /**
  * @author Peter Karich
@@ -204,7 +204,7 @@ public String toString()
     public String toString( SpatialKeyAlgo algo )
     {
         StringBuilder sb = new StringBuilder("dn:").append(count()).append(" ");
-        CoordTrig obj = new CoordTrig();
+        GHPoint obj = new GHPoint();
         for (int i = 0; i < values.length; i++)
         {
             if (values[i] == null)

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.List;
 
 /**
- * Taken from Lucene
+ * Defining several important constants for GraphHopper. Partially taken from Lucene.
  */
 public class Constants
 {
@@ -80,7 +80,6 @@ public static String getVersions()
             System.err.println("GraphHopper Initialization ERROR: cannot read version!? " + ex.getMessage());
         }
         int indexM = version.indexOf("-");
-        int indexP = version.indexOf(".");
         if ("${project.version}".equals(version))
         {
             VERSION = "0.0";

File: core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java
Patch:
@@ -27,7 +27,7 @@
  * <p/>
  * http://stackoverflow.com/q/1006654
  * <p/>
- * TODO http://en.wikipedia.org/wiki/Mercator_projection#Mathematics_of_the_Mercator_projection
+ * http://en.wikipedia.org/wiki/Mercator_projection#Mathematics_of_the_Mercator_projection
  * http://gis.stackexchange.com/questions/4906/why-is-law-of-cosines-more-preferable-than-haversine-when-calculating-distance-b
  * <p/>
  * @author Peter Karich

File: core/src/main/java/com/graphhopper/util/EdgeSkipExplorer.java
Patch:
@@ -27,4 +27,6 @@
  */
 public interface EdgeSkipExplorer extends EdgeSkipIterator, EdgeExplorer
 {
+    @Override
+    public EdgeSkipIterator setBaseNode( int baseNode );
 }

File: core/src/main/java/com/graphhopper/util/MiniPerfTest.java
Patch:
@@ -57,7 +57,7 @@ public MiniPerfTest start()
         return this;
     }
 
-    public MiniPerfTest count( int counts )
+    public MiniPerfTest setIterations( int counts )
     {
         this.counts = counts;
         return this;
@@ -87,7 +87,7 @@ public double getMean()
         return getSum() / counts;
     }
 
-    public String report()
+    public String getReport()
     {
         return "sum:" + nf(getSum() / 1000f) + "s, time/call:" + nf(getMean() / 1000f) + "s";
     }

File: core/src/test/java/com/graphhopper/geohash/LinearKeyAlgoTest.java
Patch:
@@ -18,6 +18,7 @@
 package com.graphhopper.geohash;
 
 import com.graphhopper.util.shapes.CoordTrig;
+import com.graphhopper.util.shapes.GHPoint;
 import static org.junit.Assert.*;
 import org.junit.Test;
 
@@ -48,7 +49,7 @@ public void testEncode()
     public void testDecode()
     {
         KeyAlgo algo = new LinearKeyAlgo(3, 4).setBounds(-1, 9, -2, 20);
-        CoordTrig latLon = new CoordTrig();
+        GHPoint latLon = new GHPoint();
 
         // decode that we get the center of the grid cell!
         algo.decode(5, latLon);

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -30,7 +30,7 @@
 public class DijkstraTest extends AbstractRoutingAlgorithmTester
 {
     @Override
-    public AlgorithmPreparation prepareGraph( Graph g, final FlagEncoder encoder, final WeightCalculation calc)
+    public AlgorithmPreparation prepareGraph( Graph defaultGraph, final FlagEncoder encoder, final WeightCalculation calc )
     {
         return new NoOpAlgorithmPreparation()
         {
@@ -39,6 +39,6 @@ public RoutingAlgorithm createAlgo()
             {
                 return new Dijkstra(_graph, encoder, calc);
             }
-        }.setGraph(g);
+        }.setGraph(defaultGraph);
     }
 }

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -61,8 +61,8 @@ public void testMonacoWithInstructions()
             GHResponse rsp = hopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
                     setAlgorithm("astar").setVehicle(vehicle).setType(weightCalcStr));
 
-            assertEquals(3455, rsp.getDistance(), .1);
-            assertEquals(88, rsp.getPoints().getSize());
+            assertEquals(3437.6, rsp.getDistance(), .1);
+            assertEquals(87, rsp.getPoints().getSize());
 
             InstructionList il = rsp.getInstructions();
             assertEquals(12, il.size());

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -66,10 +66,9 @@ public PrepareContractionHierarchies prepareGraph( Graph g, FlagEncoder encoder,
     {
         PrepareContractionHierarchies ch = new PrepareContractionHierarchies(encoder, calc).setGraph(g);
         // hack: prepare matrixgraph only once
-        if (g != preparedMatrixGraph)
-        {
+        if (g != preparedMatrixGraph)       
             ch.doWork();
-        }
+        
         return ch;
     }
 

File: core/src/test/java/com/graphhopper/util/EdgeSkipIteratorTest.java
Patch:
@@ -50,7 +50,7 @@ public void testUpdateFlags()
 
         assertEquals(2, GHUtility.count(g.getAllEdges()));
         assertEquals(1, GHUtility.count(g.createEdgeExplorer(carOutFilter).setBaseNode(1)));
-        EdgeIterator iter = GHUtility.getEdge(g, 0, 1);
+        EdgeIteratorState iter = GHUtility.getEdge(g, 0, 1);
         assertEquals(1, iter.getAdjNode());
         assertEquals(carFlagsEncoder.flags(10, true), iter.getFlags());
 

File: core/src/test/java/com/graphhopper/util/GHUtilityTest.java
Patch:
@@ -105,8 +105,10 @@ public void testCopy()
         eb.setWayGeometry(Helper.createPointList(12, 10, -1, 3));
         LevelGraph lg = new GraphBuilder(encodingManager).levelGraphCreate();
         GHUtility.copyTo(g, lg);
+        
         eb = GHUtility.getEdge(lg, 5, 6);
-        assertEquals(Helper.createPointList(-1, 3, 12, 10), eb.getWayGeometry());
+        assertEquals(Helper.createPointList(-1, 3, 12, 10), eb.fetchWayGeometry(0));
+
         assertEquals(0, lg.getLevel(0));
         assertEquals(0, lg.getLevel(1));
         assertEquals(0, lg.getLatitude(0), 1e-6);

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -110,10 +110,10 @@ public boolean execute( double value )
         });
         assertEquals(p.getDistance(), dr.val, 1e-7);
 
-        List<String> distStrings = wayList.createDistances(trMap.get("de"));
+        List<String> distStrings = wayList.createDistances(trMap.get("de"), false);
         assertEquals(Arrays.asList("100 m", "100 m", "100 m", "100 m", "100 m", "100 m"), distStrings);
 
-        distStrings = wayList.createDistances(trMap.get("en_US"));
+        distStrings = wayList.createDistances(trMap.get("en_US"), true);
         assertEquals(Arrays.asList("328 ft", "328 ft", "328 ft", "328 ft", "328 ft", "328 ft"), distStrings);
 
         p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestCalc()).calcPath(6, 2);

File: web/src/test/java/com/graphhopper/http/WebHelperTest.java
Patch:
@@ -52,7 +52,7 @@ public void testEncode() throws Exception
     public void testBoth() throws Exception
     {
         PointList list = Helper.createPointList(38.5, -120.2, 43.252, -126.453,
-                40.7, -120.95, 50.3139, 10.612793, 50.04303, 9.497681);
+                40.7, -120.95, 50.3139, 10.61279, 50.04303, 9.49768);
         String str = WebHelper.encodePolyline(list);
         assertEquals(list, WebHelper.decodePolyline(str, list.getSize()));
 

File: core/src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class Path4CH extends PathBidirRef
 {
-    private WeightCalculation calc;
+    private final WeightCalculation calc;
 
     public Path4CH( Graph g, FlagEncoder encoder, WeightCalculation calc )
     {

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -136,7 +136,7 @@ public static Collection<Entry<AlgorithmPreparation, Location2IDIndex>> createAl
             prepareCH.doWork();
             Location2IDIndex idxCH = new Location2NodesNtreeLG(graphCH, new RAMDirectory()).prepareIndex();
             prepare.add(new ME(prepareCH, idxCH));
-            
+
             // still one failing test regardless of the approx factor
 //            PrepareContractionHierarchies prepareCHAStar = new PrepareContractionHierarchies(encoder, weightCalc) {
 //

File: core/src/main/java/com/graphhopper/storage/index/LocationIDResult.java
Patch:
@@ -157,6 +157,8 @@ public GHPoint getSnappedPoint()
      */
     public void calcSnappedPoint( DistanceCalc distCalc )
     {
+        if (closestEdge == null)
+            throw new IllegalStateException("No closest edge?");
         if (snappedPoint != null)
             throw new IllegalStateException("Calculate snapped point only once");
 

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -110,8 +110,8 @@ public void testFootAndCar() throws IOException
         assertTrue(res.isFound());
         assertEquals(2, res.getPoints().getSize());
         // => found a point on edge A-B        
-        assertEquals(11.687, res.getPoints().getLatitude(1), 1e-3);
-        assertEquals(50.652, res.getPoints().getLongitude(1), 1e-3);
+        assertEquals(11.680, res.getPoints().getLatitude(1), 1e-3);
+        assertEquals(50.644, res.getPoints().getLongitude(1), 1e-3);
 
         // A to E only for foot
         res = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.FOOT));

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -61,8 +61,8 @@ public void testMonacoWithInstructions()
             GHResponse rsp = hopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
                     setAlgorithm("astar").setVehicle(vehicle).setType(weightCalcStr));
 
-            assertEquals(3435.5, rsp.getDistance(), .1);
-            assertEquals(88, rsp.getPoints().getSize());
+            assertEquals(3437.6, rsp.getDistance(), .1);
+            assertEquals(87, rsp.getPoints().getSize());
 
             InstructionList il = rsp.getInstructions();
             assertEquals(12, il.size());

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -555,7 +555,7 @@ public GHResponse route( GHRequest request )
         EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);        
         LocationIDResult fromRes = locationIndex.findClosest(request.getFrom().lat, request.getFrom().lon, edgeFilter);
         LocationIDResult toRes = locationIndex.findClosest(request.getTo().lat, request.getTo().lon, edgeFilter);       
-
+        
         String debug = "idLookup:" + sw.stop().getSeconds() + "s";
 
         if (!fromRes.isValid())

File: core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.index.LocationIDResult;
 
 /**
  * Common subclass for bidirectional algorithms.

File: core/src/main/java/com/graphhopper/routing/util/EdgeFilter.java
Patch:
@@ -35,7 +35,7 @@ public interface EdgeFilter
     static final EdgeFilter ALL_EDGES = new EdgeFilter()
     {
         @Override
-        public boolean accept( EdgeIteratorState edgeIterState )
+        public final boolean accept( EdgeIteratorState edgeIterState )
         {
             return true;
         }

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -20,6 +20,8 @@
 
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.DistanceCalc;
+import com.graphhopper.util.DistancePlaneProjection;
 import com.graphhopper.util.Helper;
 import java.io.File;
 import java.io.IOException;

File: tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -78,7 +78,7 @@ public MiniGraphUI( GraphHopper hopper, boolean debug )
         prepare = hopper.getPreparation();
         if (prepare == null)
             prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph,
-                    "dijkstra", hopper.getEncodingManager().getEncoder("CAR"), wCalc);
+                    "dijkstra", hopper.getEncodingManager().getEncoder("foot"), wCalc);
 
         logger.info("locations:" + graph.getNodes() + ", debug:" + debug + ", algo:" + prepare.createAlgo().getName());
         mg = new GraphicsWrapper(graph);

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -625,7 +625,7 @@ int addShortcuts( int v )
 
             if (!updatedInGraph)
             {
-                iter = g.edge(sc.from, sc.to, sc.distance, sc.flags);
+                iter = g.shortcut(sc.from, sc.to, sc.distance, sc.flags);
                 iter.setSkippedEdges(sc.skippedEdge1, sc.skippedEdge2);
                 setOrigEdgeCount(iter.getEdge(), sc.originalEdges);
                 tmpNewShortcuts++;

File: core/src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -59,7 +59,7 @@ public class GraphStorage implements Graph, Storable<GraphStorage>
     /**
      * Specified how many entries (integers) are used per edge. interval [0,n)
      */
-    private int edgeCount = 0;
+    protected int edgeCount = 0;
     // node memory layout: edgeRef,lat,lon
     protected final int N_EDGE_REF, N_LAT, N_LON;
     /**
@@ -585,7 +585,7 @@ public String toString()
     @Override
     public EdgeIterator getEdgeProps( int edgeId, int adjNode )
     {
-        if (edgeId <= EdgeIterator.NO_EDGE || edgeId > edgeCount)
+        if (edgeId <= EdgeIterator.NO_EDGE || edgeId >= edgeCount)
             throw new IllegalStateException("edgeId " + edgeId + " out of bounds [0," + nf(edgeCount) + "]");
 
         if (adjNode < 0 && adjNode != -1)

File: core/src/main/java/com/graphhopper/storage/LevelGraph.java
Patch:
@@ -33,6 +33,8 @@ public interface LevelGraph extends Graph
 
     int getLevel( int index );
 
+    EdgeSkipExplorer shortcut( int a, int b, double distance, int flags );
+
     @Override
     EdgeSkipExplorer edge( int a, int b, double distance, int flags );
 

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -80,9 +80,9 @@ public void testGraph()
         g.edge(0, 2, 10, footEncoder.flags(5, true));
         g.edge(1, 3, 10, footEncoder.flags(10, true));
         EdgeExplorer out = g.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
-        assertEquals(Arrays.asList(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)));
-        assertEquals(Arrays.asList(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)));
-        assertEquals(Arrays.asList(0), GHUtility.getNeighbors(out.setBaseNode(2)));
+        assertEquals(GHUtility.asSet(1, 2), GHUtility.getNeighbors(out.setBaseNode(0)));
+        assertEquals(GHUtility.asSet(0, 3), GHUtility.getNeighbors(out.setBaseNode(1)));
+        assertEquals(GHUtility.asSet(0), GHUtility.getNeighbors(out.setBaseNode(2)));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
Patch:
@@ -129,7 +129,7 @@ public void testRemoveSubnetworkIfOnlyOneVehicle()
         assertEquals(4, g.getNodes());
         assertEquals(Arrays.<String>asList(), GHUtility.getProblems(g));
         EdgeExplorer explorer = g.createEdgeExplorer();
-        assertEquals(Arrays.asList(1, 2), GHUtility.getNeighbors(explorer.setBaseNode(3)));
+        assertEquals(GHUtility.asSet(2, 1), GHUtility.getNeighbors(explorer.setBaseNode(3)));
 
         // do not remove because small network is big enough
         g = createSubnetworkTestGraph2(em);

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -62,13 +62,13 @@ public void testWayList()
         g.setNode(7, 1.0, 1.1);
         g.setNode(8, 1.0, 1.2);
         g.edge(0, 1, 100, true).setName("0-1");
-        g.edge(1, 2, 110, true);
+        g.edge(1, 2, 110, true).setName("1-2");
 
         g.edge(0, 3, 110, true);
         g.edge(1, 4, 100, true).setName("1-4");
         g.edge(2, 5, 110, true).setName("5-2");
 
-        g.edge(3, 6, 100, true);
+        g.edge(3, 6, 110, true).setName("3-6");
         g.edge(4, 7, 100, true).setName("4-7");
         g.edge(5, 8, 100, true).setName("5-8");
 
@@ -117,6 +117,7 @@ public boolean execute( double value )
         assertEquals(Arrays.asList("328 ft", "328 ft", "328 ft", "328 ft", "328 ft", "328 ft"), distStrings);
 
         p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestCalc()).calcPath(6, 2);
+        assertEquals(420, p.getDistance(), 1e-2);
         wayList = p.calcInstructions();
         assertEquals(Arrays.asList("Continue onto 6-7", "Continue onto 7-8", "Turn left onto 5-8", "Continue onto 5-2"),
                 wayList.createDescription(trMap.getWithFallBack(Locale.CANADA)));

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -73,7 +73,7 @@ public class PrepareContractionHierarchies extends AbstractAlgoPreparation<Prepa
     private final Map<Shortcut, Shortcut> shortcuts = new HashMap<Shortcut, Shortcut>();
     private IgnoreNodeFilter levelEdgeFilter;
     private DijkstraOneToMany algo;
-    private boolean removesHigher2LowerEdges = false;
+    private boolean removesHigher2LowerEdges = true;
     private long counter;
     private int newShortcuts;
     private long dijkstraCount;

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -126,7 +126,7 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
                 FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
                 rsp = hopper.route(new GHRequest(start, end).
                         setVehicle(algoVehicle.toString()).
-                        setType(vehicleStr).
+                        setType(algoTypeStr).
                         setAlgorithm(algoStr).
                         putHint("calcPoints", calcPoints).
                         putHint("instructions", enableInstructions).

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -107,9 +107,9 @@ public void testFootAndCar() throws IOException
         res = instance.route(new GHRequest(11.1, 50, 11.3, 51).setVehicle(EncodingManager.FOOT));
         assertTrue(res.isFound());
         assertEquals(2, res.getPoints().getSize());
-        // => found B
-        assertEquals(51, res.getPoints().getLongitude(1), 1e-3);
-        assertEquals(12, res.getPoints().getLatitude(1), 1e-3);
+        // => found a point on edge A-B        
+        assertEquals(11.687, res.getPoints().getLatitude(1), 1e-3);
+        assertEquals(50.652, res.getPoints().getLongitude(1), 1e-3);
 
         // A to E only for foot
         res = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.FOOT));

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -208,8 +208,8 @@ void runAlgo( TestAlgoCollector testCollector, String osmFile,
             {
                 for (OneRun oneRun : forEveryAlgo)
                 {
-                    int from = idx.findClosest(g, oneRun.fromLat, oneRun.fromLon, edgeFilter).getClosestNode();
-                    int to = idx.findClosest(g, oneRun.toLat, oneRun.toLon, edgeFilter).getClosestNode();
+                    int from = idx.findClosest(oneRun.fromLat, oneRun.fromLon, edgeFilter).getClosestNode();
+                    int to = idx.findClosest(oneRun.toLat, oneRun.toLon, edgeFilter).getClosestNode();
                     testCollector.assertDistance(prepare.createAlgo(), from, to, oneRun.dist, oneRun.locs);
                 }
             }

File: core/src/test/java/com/graphhopper/storage/index/AbstractLocation2IDIndexTester.java
Patch:
@@ -355,6 +355,6 @@ public void testDifferentVehicles()
 
         idx = createIndex(g, 32);
         FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("FOOT");
-        assertEquals(2, idx.findClosest(g, 1, -1, new DefaultEdgeFilter(footEncoder)).getClosestNode());
+        assertEquals(2, idx.findClosest(1, -1, new DefaultEdgeFilter(footEncoder)).getClosestNode());
     }
 }

File: core/src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -132,7 +132,7 @@ public static String getNodeInfo( LevelGraph g, int nodeId, EdgeFilter filter )
         while (iter.next())
         {
             str += "  ->" + iter.getAdjNode() + "(" + iter.getSkippedEdge1() + "," + iter.getSkippedEdge2() + ") "
-                    + iter.getEdge() + " \t" + BitUtil.toBitString(iter.getFlags(), 8) + "\n";
+                    + iter.getEdge() + " \t" + BitUtil.BIG.toBitString(iter.getFlags(), 8) + "\n";
         }
         return str;
     }
@@ -145,7 +145,7 @@ public static String getNodeInfo( Graph g, int nodeId, EdgeFilter filter )
         {
             str += "  ->" + iter.getAdjNode() + " (" + iter.getDistance() + ") pillars:"
                     + iter.getWayGeometry().getSize() + ", edgeId:" + iter.getEdge()
-                    + "\t" + BitUtil.toBitString(iter.getFlags(), 8) + "\n";
+                    + "\t" + BitUtil.BIG.toBitString(iter.getFlags(), 8) + "\n";
         }
         return str;
     }

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -501,7 +501,7 @@ public void testBits()
         int endNode = Integer.MAX_VALUE / 37 * 17;
 
         long edgeId = (long) fromNode << 32 | endNode;
-        assertEquals((BitUtil.toBitString(edgeId)),
-                BitUtil.toBitString(fromNode, 32) + BitUtil.toBitString(endNode, 32));
+        assertEquals((BitUtil.BIG.toBitString(edgeId)),
+                BitUtil.BIG.toLastBitString(fromNode, 32) + BitUtil.BIG.toLastBitString(endNode, 32));
     }
 }

File: core/src/test/java/com/graphhopper/storage/RAMDataAccessTest.java
Patch:
@@ -26,6 +26,6 @@ public class RAMDataAccessTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new RAMDataAccess(name, directory, true).setSegmentSize(128);
+        return new RAMDataAccess(name, directory, true, defaultOrder).setSegmentSize(128);
     }
 }

File: core/src/test/java/com/graphhopper/storage/RAMIntDataAccessTest.java
Patch:
@@ -26,7 +26,7 @@ public class RAMIntDataAccessTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new RAMIntDataAccess(name, directory, true).setSegmentSize(128);
+        return new RAMIntDataAccess(name, directory, true, defaultOrder).setSegmentSize(128);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/storage/SynchedDAWrapperTest.java
Patch:
@@ -26,6 +26,6 @@ public class SynchedDAWrapperTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new SynchedDAWrapper(new RAMDataAccess(name, directory, true)).setSegmentSize(128);
+        return new SynchedDAWrapper(new RAMDataAccess(name, directory, true, defaultOrder)).setSegmentSize(128);
     }
 }

File: core/src/test/java/com/graphhopper/storage/index/Location2NodesNtreeTest.java
Patch:
@@ -187,7 +187,8 @@ public void testReverseSpatialKey()
         assertEquals(Helper.createTList(64, 64, 64, 4), index.getEntries());
 
         // 10111110111110101010
-        assertEquals("01010101111101111101", BitUtil.toBitString(index.createReverseKey(1.7, 0.099), 20));
+        String str44 = "00000000000000000000000000000000000000000000";
+        assertEquals(str44 + "01010101111101111101", BitUtil.BIG.toBitString(index.createReverseKey(1.7, 0.099)));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/util/PointList.java
Patch:
@@ -196,8 +196,8 @@ public int hashCode()
         int hash = 5;
         for (int i = 0; i < latitudes.length; i++)
         {
-            hash = 73 * hash + (int) Math.round(latitudes[i] * 10000000);
-            hash = 73 * hash + (int) Math.round(longitudes[i] * 10000000);
+            hash = 73 * hash + (int) Math.round(latitudes[i] * 1000000);
+            hash = 73 * hash + (int) Math.round(longitudes[i] * 1000000);
         }
         hash = 73 * hash + this.size;
         return hash;

File: web/src/test/java/com/graphhopper/http/WebHelperTest.java
Patch:
@@ -52,7 +52,7 @@ public void testEncode() throws Exception
     public void testBoth() throws Exception
     {
         PointList list = Helper.createPointList(38.5, -120.2, 43.252, -126.453,
-                40.7, -120.95, 50.3139, 10.612793, 50.04303, 9.497681);
+                40.7, -120.95, 50.3139, 10.61279, 50.04303, 9.49768);
         String str = WebHelper.encodePolyline(list);
         assertEquals(list, WebHelper.decodePolyline(str, list.getSize()));
 

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -401,7 +401,7 @@ void loadGraphStorage()
             protected Path saveDoInBackground( Void... v ) throws Exception
             {
                 GraphHopper tmpHopp = new GraphHopper().forMobile();
-                tmpHopp.setCHShortcuts(true, true);
+                tmpHopp.setCHShortcuts("fastest");
                 tmpHopp.load(mapsFolder + currentArea);
                 log("found graph " + tmpHopp.getGraph().toString() + ", nodes:" + tmpHopp.getGraph().getNodes());
                 hopper = tmpHopp;

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -401,7 +401,7 @@ void loadGraphStorage()
             protected Path saveDoInBackground( Void... v ) throws Exception
             {
                 GraphHopper tmpHopp = new GraphHopper().forMobile();
-                tmpHopp.setCHShortcuts(true, true);
+                tmpHopp.setCHShortcuts("fastest");
                 tmpHopp.load(mapsFolder + currentArea);
                 log("found graph " + tmpHopp.getGraph().toString() + ", nodes:" + tmpHopp.getGraph().getNodes());
                 hopper = tmpHopp;

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -81,6 +81,7 @@ public GraphHopperTest( String file )
             this.testFile = file;
             setGraphHopperLocation(dir);
             setEncodingManager(new EncodingManager("CAR,FOOT"));
+            disableCHShortcuts();
 
             carEncoder = (CarFlagEncoder) getEncodingManager().getEncoder("CAR");
             footEncoder = (FootFlagEncoder) getEncodingManager().getEncoder("FOOT");

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -53,6 +53,7 @@ public void testMonacoWithInstructions()
             // make sure we are using fresh graphhopper files with correct vehicle
             Helper.removeDir(new File(graphFile));
             GraphHopper hopper = new GraphHopper().setInMemory(true, true).setOSMFile(osmFile).
+                    disableCHShortcuts().
                     setGraphHopperLocation(graphFile).setEncodingManager(new EncodingManager(importVehicles)).
                     importOrLoad();
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -190,6 +190,7 @@ void runAlgo( TestAlgoCollector testCollector, String osmFile,
             // make sure we are using fresh graphhopper files with correct vehicle
             Helper.removeDir(new File(graphFile));
             GraphHopper hopper = new GraphHopper().setInMemory(true, true).setOSMFile(osmFile).
+                    disableCHShortcuts().
                     setGraphHopperLocation(graphFile).setEncodingManager(new EncodingManager(importVehicles)).
                     importOrLoad();
 
@@ -273,6 +274,7 @@ public void testMonacoParallel() throws IOException
         Helper.removeDir(new File(graphFile));
         final EncodingManager encodingManager = new EncodingManager("CAR");
         GraphHopper hopper = new GraphHopper().setInMemory(true, true).setEncodingManager(encodingManager).
+                disableCHShortcuts().
                 setOSMFile("files/monaco.osm.gz").setGraphHopperLocation(graphFile).
                 importOrLoad();
         final Graph g = hopper.getGraph();

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -81,6 +81,7 @@ public GraphHopperTest( String file )
             this.testFile = file;
             setGraphHopperLocation(dir);
             setEncodingManager(new EncodingManager("CAR,FOOT"));
+            disableCHShortcuts();
 
             carEncoder = (CarFlagEncoder) getEncodingManager().getEncoder("CAR");
             footEncoder = (FootFlagEncoder) getEncodingManager().getEncoder("FOOT");

File: core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
Patch:
@@ -53,6 +53,7 @@ public void testMonacoWithInstructions()
             // make sure we are using fresh graphhopper files with correct vehicle
             Helper.removeDir(new File(graphFile));
             GraphHopper hopper = new GraphHopper().setInMemory(true, true).setOSMFile(osmFile).
+                    disableCHShortcuts().
                     setGraphHopperLocation(graphFile).setEncodingManager(new EncodingManager(importVehicles)).
                     importOrLoad();
 

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -190,6 +190,7 @@ void runAlgo( TestAlgoCollector testCollector, String osmFile,
             // make sure we are using fresh graphhopper files with correct vehicle
             Helper.removeDir(new File(graphFile));
             GraphHopper hopper = new GraphHopper().setInMemory(true, true).setOSMFile(osmFile).
+                    disableCHShortcuts().
                     setGraphHopperLocation(graphFile).setEncodingManager(new EncodingManager(importVehicles)).
                     importOrLoad();
 
@@ -273,6 +274,7 @@ public void testMonacoParallel() throws IOException
         Helper.removeDir(new File(graphFile));
         final EncodingManager encodingManager = new EncodingManager("CAR");
         GraphHopper hopper = new GraphHopper().setInMemory(true, true).setEncodingManager(encodingManager).
+                disableCHShortcuts().
                 setOSMFile("files/monaco.osm.gz").setGraphHopperLocation(graphFile).
                 importOrLoad();
         final Graph g = hopper.getGraph();

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -73,7 +73,7 @@ public static void main( String[] strs ) throws Exception
     // for CH prepare
     private AlgorithmPreparation prepare;
     private boolean doPrepare = true;
-    private boolean chEnabled = false;
+    private boolean chEnabled = true;
     private String chType = "fastest";
     private int periodicUpdates = 3;
     private int lazyUpdates = 10;

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -88,7 +88,7 @@ int getSpeed( String string )
         Integer speed = SPEED.get(string);
         if (speed == null)
             throw new IllegalStateException("car, no speed found for:" + string);
-        
+
         return speed;
     }
 
@@ -104,7 +104,8 @@ public int isAllowed( OSMWay way )
                 if (motorcarTag == null)
                     motorcarTag = way.getTag("motor_vehicle");
 
-                if (motorcarTag == null || "yes".equals(motorcarTag))
+                if (motorcarTag == null && !way.hasTag("foot") && !way.hasTag("bicycle")
+                        || "yes".equals(motorcarTag))
                     return acceptBit | ferryBit;
             }
             return 0;

File: core/src/test/java/com/graphhopper/GHResponseTest.java
Patch:
@@ -36,6 +36,6 @@ public void testCreateGPX()
         points.add(51.416338, 13.540649);
         instance.setPoints(points);
         String result = instance.createGPX("Test", System.currentTimeMillis());
-        assertEquals("swdfsdf", result);
+        assertEquals(5, result.split("trkpt").length);
     }
 }

File: core/src/main/java/com/graphhopper/GHRequest.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class GHRequest
 {
-    private String algo = "astar";
+    private String algo = "dijkstrabi";
     private GHPlace from;
     private GHPlace to;
     private Map<String, Object> hints = new HashMap<String, Object>(5);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -327,7 +327,7 @@ public GraphHopper init( CmdArgs args ) throws IOException
 
         // prepare
         doPrepare = args.getBool("prepare.doPrepare", doPrepare);
-        String chShortcuts = args.get("prepare.chShortcuts", "no");
+        String chShortcuts = args.get("prepare.chShortcuts", "fastest");
         boolean levelGraph = "true".equals(chShortcuts)
                 || "fastest".equals(chShortcuts) || "shortest".equals(chShortcuts);
         if (levelGraph)

File: core/src/main/java/com/graphhopper/reader/OSMInputFile.java
Patch:
@@ -171,7 +171,7 @@ public OSMElement getNext() throws XMLStreamException
         if (item != null)
             return item;
 
-        eof = true;
+        eof = true;        
         return null;
     }
 

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -73,8 +73,8 @@ public void doOSM2Graph( File osmFile ) throws IOException
 
         StopWatch sw1 = new StopWatch().start();
         preProcess(osmFile);
-
         sw1.stop();
+        
         StopWatch sw2 = new StopWatch().start();
         writeOsm2Graph(osmFile);
         sw2.stop();

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -28,6 +28,8 @@
 import java.util.Set;
 
 /**
+ * Use this FlagEncoder for bicycle support (not motorbikes).
+ * <p/>
  * @author Peter Karich
  * @author Nop
  */

File: core/src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -216,7 +216,7 @@ private ByteBuffer newByteBuffer( long offset, long byteCount ) throws IOExcepti
         {
             if (ioex == null)
             {
-                throw new AssertionError("internal problem as ioex shouldn't be null");
+                throw new AssertionError("internal problem as the exception 'ioex' shouldn't be null");
             }
             throw ioex;
         }

File: core/src/main/java/com/graphhopper/storage/RAMDataAccess.java
Patch:
@@ -26,6 +26,7 @@
 
 /**
  * This is an in-memory byte-based data structure with the possibility to be stored on flush().
+ * Thread safe.
  * <p/>
  * @author Peter Karich
  */

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
Patch:
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing;
 
+import com.graphhopper.routing.util.TestAlgoCollector;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.PrinctonReader;
 import com.graphhopper.routing.util.*;

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
Patch:
@@ -38,7 +38,7 @@ public interface RoutingAlgorithm
     /**
      * Changes the used weight calculation (e.g. fastest, shortest). Default is shortest.
      */
-    RoutingAlgorithm setType( WeightCalculation calc );
+//    RoutingAlgorithm setType( WeightCalculation calc );
 
     /**
      * @return name of this algorithm

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -52,7 +52,7 @@ public RoutingAlgorithm createAlgo()
             {
                 try
                 {
-                    return factory.createAlgo(_graph, encoder).setType(weightCalc);
+                    return factory.createAlgo(_graph, encoder, weightCalc);
                 } catch (Exception ex)
                 {
                     throw new RuntimeException(ex);

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -106,7 +106,7 @@ public static Collection<AlgorithmPreparation> createAlgos( Graph g,
         if (withCh)
         {
             LevelGraph graphCH = (LevelGraphStorage) g.copyTo(new GraphBuilder(manager).levelGraphCreate());
-            PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies().setGraph(graphCH).setVehicle(encoder).setType(weightCalc);
+            PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies(encoder, weightCalc).setGraph(graphCH);
             prepareCH.doWork();
             prepare.add(prepareCH);
             // TODO prepare.add(prepareCH.createAStar().approximation(true).approximationFactor(.9));

File: core/src/main/java/com/graphhopper/storage/index/Location2IDQuadtree.java
Patch:
@@ -365,7 +365,7 @@ public LocationIDResult findClosest( final double queryLat, final double queryLo
         new XFirstSearch()
         {
             @Override
-            protected GHBitSet createBitSet( int size )
+            protected GHBitSet createBitSet()
             {
                 return new GHTBitSet(10);
             }
@@ -391,7 +391,7 @@ protected boolean goFurther( int baseNode )
 
                 return currDist < maxRasterWidth2InMeterNormed;
             }
-        }.start(graph, id, false);
+        }.start(graph.createEdgeExplorer(), id, false);
         return res;
     }
 

File: core/src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -18,6 +18,8 @@
 package com.graphhopper;
 
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestCalc;
+import com.graphhopper.routing.util.ShortestCalc;
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.GraphBuilder;
 import org.junit.Test;

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -30,14 +30,14 @@
 public class AStarBidirectionTest extends AbstractRoutingAlgorithmTester
 {
     @Override
-    public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc, final FlagEncoder encoder )
+    public AlgorithmPreparation prepareGraph( Graph g, final FlagEncoder encoder, final WeightCalculation calc)
     {
         return new NoOpAlgorithmPreparation()
         {
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new AStarBidirection(_graph, encoder).setType(calc);
+                return new AStarBidirection(_graph, encoder, calc);
             }
         }.setGraph(g);
     }

File: core/src/test/java/com/graphhopper/routing/AStarTest.java
Patch:
@@ -29,14 +29,14 @@
 public class AStarTest extends AbstractRoutingAlgorithmTester
 {
     @Override
-    public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc, final FlagEncoder encoder )
+    public AlgorithmPreparation prepareGraph( Graph g, final FlagEncoder encoder, final WeightCalculation calc )
     {
         return new NoOpAlgorithmPreparation()
         {
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new AStar(_graph, encoder).setType(calc);
+                return new AStar(_graph, encoder, calc);
             }
         }.setGraph(g);
     }

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -36,14 +36,14 @@
 public class DijkstraOneToManyTest extends AbstractRoutingAlgorithmTester
 {
     @Override
-    public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc, final FlagEncoder encoder )
+    public AlgorithmPreparation prepareGraph( Graph g, final FlagEncoder encoder, final WeightCalculation calc)
     {
         return new NoOpAlgorithmPreparation()
         {
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new DijkstraOneToMany(_graph, encoder).setType(calc);
+                return new DijkstraOneToMany(_graph, encoder, calc);
             }
         }.setGraph(g);
     }

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -30,14 +30,14 @@
 public class DijkstraTest extends AbstractRoutingAlgorithmTester
 {
     @Override
-    public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc, final FlagEncoder encoder )
+    public AlgorithmPreparation prepareGraph( Graph g, final FlagEncoder encoder, final WeightCalculation calc)
     {
         return new NoOpAlgorithmPreparation()
         {
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new Dijkstra(_graph, encoder).setType(calc);
+                return new Dijkstra(_graph, encoder, calc);
             }
         }.setGraph(g);
     }

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -236,14 +236,15 @@ public void testMonacoParallel() throws IOException
         // testing if algorithms are independent. should be. so test only two algorithms. 
         // also the preparing is too costly to be called for every thread
         int algosLength = 2;
+        WeightCalculation type = new ShortestCalc();
         for (int no = 0; no < MAX; no++)
         {
             for (int instanceNo = 0; instanceNo < instances.size(); instanceNo++)
             {
                 RoutingAlgorithm[] algos = new RoutingAlgorithm[]
                 {
-                    new AStar(g, carEncoder),
-                    new DijkstraBidirectionRef(g, carEncoder)
+                    new AStar(g, carEncoder, type),
+                    new DijkstraBidirectionRef(g, carEncoder, type)
                 };
                 for (final RoutingAlgorithm algo : algos)
                 {

File: core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.GHUtility;
 import java.util.Arrays;
 import java.util.Map;
@@ -127,7 +128,8 @@ public void testRemoveSubnetworkIfOnlyOneVehicle()
         g.optimize();
         assertEquals(4, g.getNodes());
         assertEquals(Arrays.<String>asList(), GHUtility.getProblems(g));
-        assertEquals(Arrays.asList(1, 2), GHUtility.getNeighbors(g.getEdges(3)));
+        EdgeExplorer explorer = g.createEdgeExplorer();
+        assertEquals(Arrays.asList(1, 2), GHUtility.getNeighbors(explorer.setBaseNode(3)));
 
         // do not remove because small network is big enough
         g = createSubnetworkTestGraph2(em);

File: core/src/test/java/com/graphhopper/storage/GraphStorage3DTest.java
Patch:
@@ -20,6 +20,7 @@
 import com.graphhopper.routing.DijkstraBidirection;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.ShortestCalc;
 import com.graphhopper.util.DistanceCalc3D;
 import com.graphhopper.util.Helper;
 import static org.junit.Assert.*;
@@ -52,7 +53,7 @@ public void testGetHeight()
         edge(g, dist, 1, 3);
         edge(g, dist, 1, 4);
 
-        Path p = new DijkstraBidirection(g, encodingManager.getEncoder("CAR")).calcPath(0, 1);
+        Path p = new DijkstraBidirection(g, encodingManager.getEncoder("CAR"), new ShortestCalc()).calcPath(0, 1);
         assertEquals(Helper.createTList(0, 3, 1), p.calcNodes());
         assertEquals(100, p.getDistance(), .1);
     }

File: core/src/test/java/com/graphhopper/storage/index/AbstractLocation2IDIndexTester.java
Patch:
@@ -349,7 +349,7 @@ public void testDifferentVehicles()
         assertEquals(1, idx.findID(1, -1));
 
         // now make all edges from node 1 accessible for CAR only
-        EdgeIterator iter = g.getEdges(1);
+        EdgeIterator iter = g.createEdgeExplorer().setBaseNode(1);
         CarFlagEncoder carEncoder = (CarFlagEncoder) encodingManager.getEncoder("CAR");
         while (iter.next())
         {

File: core/src/test/java/com/graphhopper/storage/index/Location2NodesNtreeLGTest.java
Patch:
@@ -25,7 +25,7 @@
 import com.graphhopper.storage.LevelGraphStorage;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.util.EdgeIterator;
-import com.graphhopper.util.EdgeSkipIterator;
+import com.graphhopper.util.EdgeSkipExplorer;
 import com.graphhopper.util.Helper;
 import gnu.trove.list.TIntList;
 import gnu.trove.set.TIntSet;
@@ -77,9 +77,9 @@ public void testLevelGraph()
         EdgeIterator iter4 = g.edge(3, 4, 14, true);
 
         // create shortcuts
-        EdgeSkipIterator iter5 = g.edge(0, 2, 20, true);
+        EdgeSkipExplorer iter5 = g.edge(0, 2, 20, true);
         iter5.setSkippedEdges(iter1.getEdge(), iter2.getEdge());
-        EdgeSkipIterator iter6 = g.edge(2, 4, 28, true);
+        EdgeSkipExplorer iter6 = g.edge(2, 4, 28, true);
         iter6.setSkippedEdges(iter3.getEdge(), iter4.getEdge());
         g.edge(0, 4, 40, true).setSkippedEdges(iter5.getEdge(), iter6.getEdge());
 

File: core/src/test/java/com/graphhopper/util/XFirstSearchTest.java
Patch:
@@ -69,7 +69,7 @@ public boolean goFurther( int v )
         g.edge(9, 10, 8, true);
         g.edge(5, 10, 1, true);
 
-        bfs.start(g, 0, false);
+        bfs.start(g.createEdgeExplorer(), 0, false);
 
         assertTrue(counter > 0);
         assertEquals(g.getNodes(), counter);

File: tools/src/main/java/com/graphhopper/ui/DebugAStar.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.AStar;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import java.awt.Color;
@@ -32,9 +33,9 @@ public class DebugAStar extends AStar implements DebugAlgo
     private GraphicsWrapper mg;
     private Graphics2D g2;
 
-    public DebugAStar( Graph graph, FlagEncoder encoder, GraphicsWrapper mg )
+    public DebugAStar( Graph graph, FlagEncoder encoder, WeightCalculation type, GraphicsWrapper mg )
     {
-        super(graph, encoder);
+        super(graph, encoder, type);
         this.mg = mg;
     }
 

File: tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.AStarBidirection;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import java.awt.Color;
@@ -32,9 +33,9 @@ public class DebugAStarBi extends AStarBidirection implements DebugAlgo
     private GraphicsWrapper mg;
     private Graphics2D g2;
 
-    public DebugAStarBi( Graph graph, FlagEncoder encoder, GraphicsWrapper mg )
+    public DebugAStarBi( Graph graph, FlagEncoder encoder, WeightCalculation type, GraphicsWrapper mg )
     {
-        super(graph, encoder);
+        super(graph, encoder, type);
         this.mg = mg;
     }
 

File: tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.DijkstraBidirectionRef;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import java.awt.Color;
@@ -32,9 +33,9 @@ public class DebugDijkstraBidirection extends DijkstraBidirectionRef implements
     private GraphicsWrapper mg;
     private Graphics2D g2;
 
-    public DebugDijkstraBidirection( Graph graph, FlagEncoder encoder, GraphicsWrapper mg )
+    public DebugDijkstraBidirection( Graph graph, FlagEncoder encoder, WeightCalculation type, GraphicsWrapper mg )
     {
-        super(graph, encoder);
+        super(graph, encoder, type);
         this.mg = mg;
     }
 

File: tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
Patch:
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.Dijkstra;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.EdgeEntry;
 import java.awt.Color;
@@ -32,9 +33,9 @@ public class DebugDijkstraSimple extends Dijkstra implements DebugAlgo
     private GraphicsWrapper mg;
     private Graphics2D g2;
 
-    public DebugDijkstraSimple( Graph graph, FlagEncoder encoder, GraphicsWrapper mg )
+    public DebugDijkstraSimple( Graph graph, FlagEncoder encoder, WeightCalculation type, GraphicsWrapper mg )
     {
-        super(graph, encoder);
+        super(graph, encoder, type);
         this.mg = mg;
     }
 

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -237,9 +237,8 @@ public String getGraphHopperLocation()
     public GraphHopper setOSMFile( String osmFileStr )
     {
         if (Helper.isEmpty(osmFileStr))
-        {
             throw new IllegalArgumentException("OSM file cannot be empty.");
-        }
+        
         osmFile = osmFileStr;
         return this;
     }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -614,6 +614,7 @@ private void initIndex()
             index = new Location2IDQuadtree(graph, dir);
             index.setResolution(Helper.calcIndexSize(graph.getBounds()));
         }
+        index.setSegmentSize(defaultSegmentSize);
         if (!index.loadExisting())
         {
             index.prepareIndex();

File: core/src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -30,7 +30,7 @@ public abstract class AbstractDataAccess implements DataAccess
 {
     protected static final int SEGMENT_SIZE_MIN = 1 << 7;
     private static final int SEGMENT_SIZE_DEFAULT = 1 << 20;
-    // reserve some space for downstream usage (in classes using/exting this)
+    // reserve some space for downstream usage (in classes using/extending this)
     protected static final int HEADER_OFFSET = 20 * 4 + 20;
     protected static final byte[] EMPTY = new byte[1024];
     protected int header[] = new int[(HEADER_OFFSET - 20) / 4];

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -39,15 +39,15 @@ public class StorableProperties implements Storable<StorableProperties>
     public StorableProperties( Directory dir )
     {
         this.da = dir.find("properties");
+        // reduce size
+        da.setSegmentSize(1 << 15);
     }
 
     @Override
     public boolean loadExisting()
     {
         if (!da.loadExisting())
-        {
             return false;
-        }
 
         int len = (int) da.getCapacity();
         byte[] bytes = new byte[len];

File: core/src/main/java/com/graphhopper/storage/index/Location2IDIndex.java
Patch:
@@ -60,4 +60,6 @@ public interface Location2IDIndex extends Storable<Location2IDIndex>
      * @param approx if false this makes initialization and querying faster but less precise.
      */
     Location2IDIndex setApproximation( boolean approxDist );
+
+    void setSegmentSize( int bytes );
 }

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -197,6 +197,9 @@ public int handleWayTags( int allowed, OSMWay way )
 
     static int parseDuration( String str )
     {
+        if (str == null)
+            return 0;
+
         int index = str.indexOf(":");
         if (index > 0)
         {

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -174,6 +174,7 @@ public void testParseDuration()
         assertEquals(10, FootFlagEncoder.parseDuration("00:10"));
         assertEquals(70, FootFlagEncoder.parseDuration("01:10"));
         assertEquals(0, FootFlagEncoder.parseDuration("oh"));
+        assertEquals(0, FootFlagEncoder.parseDuration(null));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -21,9 +21,7 @@
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
 
-import java.util.HashMap;
 import java.util.HashSet;
-import java.util.Map;
 import java.util.Set;
 
 /**
@@ -100,7 +98,8 @@ public int isAllowed( OSMWay way )
         {
             if (way.hasTag("route", ferries))
             {
-                if (!way.hasTag("foot", "no"))
+                String footTag = way.getTag("foot");
+                if (footTag == null || "yes".equals(footTag))
                     return acceptBit | ferryBit;
             }
             return 0;

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -61,7 +61,7 @@ public AbstractFlagEncoder()
         ferries.add("shuttle_train");
         ferries.add("ferry");
 
-        acceptedRailways.add("level_crossing");
+        acceptedRailways.add("tram");
     }
 
     /**

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -123,7 +123,7 @@ public int isAllowed( OSMWay way )
         if (way.hasTag(restrictions, restrictedValues))
             return 0;
 
-        // do not drive street cars over railways (sometimes incorrectly mapped!)
+        // do not drive cars over railways (sometimes incorrectly mapped!)
         if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
             return 0;
 

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -140,7 +140,6 @@ public void testAccess()
         assertFalse(footEncoder.isAllowed(way) > 0);
         map.put("foot", "yes");
         assertTrue(footEncoder.isAllowed(way) > 0);
-
     }
 
     @Test

File: core/src/main/java/com/graphhopper/search/NameIndex.java
Patch:
@@ -138,7 +138,7 @@ public String get( int pointer )
         }
         byte[] sizeBytes = new byte[1];
         names.getBytes(pointer, sizeBytes, 1);
-        int size = sizeBytes[0];
+        int size = sizeBytes[0] & 0xFF;
         byte[] bytes = new byte[size];
         names.getBytes(pointer + sizeBytes.length, bytes, size);
         try

File: core/src/main/java/com/graphhopper/reader/OSMInputFile.java
Patch:
@@ -106,7 +106,8 @@ private InputStream decode( File file ) throws IOException
             ips.reset();
             return new GZIPInputStream(ips, 50000);
         } else if (header[0] == 0 && header[1] == 0 && header[2] == 0
-                && header[3] == 13 && header[4] == 10 && header[5] == 9)
+                && header[4] == 10 && header[5] == 9
+                && (header[3] == 13 || header[3] == 14))
         {
             ips.reset();
             binary = true;

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -38,7 +38,7 @@ public class GraphHopperWeb implements GraphHopperAPI
     public static void main( String[] args )
     {
         GraphHopperAPI gh = new GraphHopperWeb();
-        gh.load("http://localhost:8989/api");
+        gh.load("http://localhost:8989/api/route");
         //GHResponse ph = gh.route(new GHRequest(53.080827, 9.074707, 50.597186, 11.184082));
         GHResponse ph = gh.route(new GHRequest(49.6724, 11.3494, 49.6550, 11.4180));
         System.out.println(ph);

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -221,10 +221,9 @@ private void chooseAreaFromRemote()
             protected List<String> saveDoInBackground( Void... params )
                     throws Exception
             {
-                String filesList = mapsFolder + "files.txt";
-                new Downloader().downloadAndUnzip(fileListURL, filesList, null);
+                String[] lines = new Downloader().downloadAsString(fileListURL).split("\n");
                 List<String> res = new ArrayList<String>();
-                for (String str : AndroidHelper.readFile(new FileReader(filesList)))
+                for (String str : lines)
                 {
                     int index = str.indexOf("href=\"");
                     if (index >= 0)

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -658,7 +658,7 @@ public void prepare()
     protected void cleanUp()
     {
         int prev = graph.getNodes();
-        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph);
+        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph, encodingManager);
         logger.info("start finding subnetworks, " + Helper.getMemInfo());
         preparation.doWork();
         int n = graph.getNodes();

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -521,7 +521,7 @@ protected GHResponse doInBackground( Void... v )
 
             protected void onPostExecute( GHResponse resp )
             {
-                if (!resp.hasError())
+                if (!resp.hasErrors())
                 {
                     log("from:" + fromLat + "," + fromLon + " to:" + toLat + ","
                             + toLon + " found path with distance:" + resp.getDistance()

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -535,7 +535,7 @@ private void postProcessing()
 
     private boolean setSupportsVehicle( String encoder )
     {
-        return encodingManager.accepts(encoder);
+        return encodingManager.supports(encoder);
     }
 
     @Override
@@ -592,7 +592,7 @@ public GHResponse route( GHRequest request )
             algo = prepare.createAlgo();
         }
 
-        if (rsp.hasError())
+        if (rsp.hasErrors())
         {
             return rsp;
         }

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -308,7 +308,7 @@ public void cleanUp()
         int n60 = AbstractGraphTester.getIdOf(graph, 56.0);
         EdgeIterator iter = graph.getEdges(n60);
         iter.next();
-        assertEquals(40, carEncoder.getSpeed(iter.getFlags()));
+        assertEquals(35, carEncoder.getSpeed(iter.getFlags()));
     }
 
     @Test

File: core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
Patch:
@@ -149,10 +149,10 @@ public int handleWayTags( int allowed, OSMWay way )
         {
             String highwayValue = way.getTag("highway");
             // get assumed speed from highway type
-            Integer speed = getSpeed(highwayValue);
-            // apply speed limit
+            Integer speed = getSpeed(highwayValue);            
             int maxspeed = parseSpeed(way.getTag("maxspeed"));
-            if (maxspeed > 0 && speed > maxspeed)
+            // apply speed limit no matter of the road type
+            if (maxspeed > 0)
             {
                 speed = maxspeed;
             }

File: core/src/test/java/com/graphhopper/search/NameIndexTest.java
Patch:
@@ -64,7 +64,7 @@ public void testCreate()
     @Test
     public void testTooLongNameNoError() {
         NameIndex index = new NameIndex(new RAMDirectory()).create(1000);
-        // WTH are the doing in OSM?
+        // WTH are they doing in OSM? There are exactly two names in the full planet export which violates this limitation!
         index.put("Бухарестская улица (http://ru.wikipedia.org/wiki/%D0%91%D1%83%D1%85%D0%B0%D1%80%D0%B5%D1%81%D1%82%D1%81%D0%BA%D0%B0%D1%8F_%D1%83%D0%BB%D0%B8%D1%86%D0%B0_(%D0%A1%D0%B0%D0%BD%D0%BA%D1%82-%D0%9F%D0%B5%D1%82%D0%B5%D1%80%D0%B1%D1%83%D1%80%D0%B3))");
         
         String str = "sdfsdfds";

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -33,8 +33,8 @@ public class TranslationMap
         translations.put("de", de);
         de.put("left", "links");
         de.put("right", "rechts");
-        de.put("continue", "Weiter");
-        de.put("continue onto %s", "Weiter auf %s");
+        de.put("continue", "geradeaus");
+        de.put("continue onto %s", "geradeaus auf %s");
         de.put("turn %s", "%s abbiegen");
         de.put("turn %s onto %s", "%s abbiegen auf %s");
 

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -90,8 +90,8 @@ public void testWayList()
                 "Turn left onto 7-8", "Continue onto 8-9", "Turn right"),
                 wayList.createDescription(Locale.CANADA));
 
-        assertEquals(Arrays.asList("Weiter auf 0-1", "Rechts abbiegen auf 1-4", "Weiter auf 4-7",
-                "Links abbiegen auf 7-8", "Weiter auf 8-9", "Rechts abbiegen"),
+        assertEquals(Arrays.asList("Geradeaus auf 0-1", "Rechts abbiegen auf 1-4", "Geradeaus auf 4-7",
+                "Links abbiegen auf 7-8", "Geradeaus auf 8-9", "Rechts abbiegen"),
                 wayList.createDescription(Locale.GERMAN));
 
         TDoubleList distList = wayList.getDistances();

File: web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
Patch:
@@ -113,7 +113,7 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
         GHPlace end = infoPoints.get(1);
         // we can reduce the path length based on the maximum differences to the original coordinates
         double minPathPrecision = getDoubleParam(req, "minPathPrecision", 1d);
-        boolean enableInstructions = getBooleanParam(req, "instructions", false);
+        boolean enableInstructions = getBooleanParam(req, "instructions", true);
         String vehicleStr = getParam(req, "vehicle", "CAR");
         Locale locale = Helper.getLocale(getParam(req, "locale", "en"));
         FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr.toUpperCase());
@@ -238,7 +238,7 @@ protected boolean getBooleanParam( HttpServletRequest req, String string, boolea
     {
         try
         {
-            return Boolean.parseBoolean(getParam(req, string, null));
+            return Boolean.parseBoolean(getParam(req, string, "" + _default));
         } catch (Exception ex)
         {
             return _default;
@@ -249,7 +249,7 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
     {
         try
         {
-            return Double.parseDouble(getParam(req, string, null));
+            return Double.parseDouble(getParam(req, string, "" + _default));
         } catch (Exception ex)
         {
             return _default;

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -606,7 +606,9 @@ public GHResponse route( GHRequest request )
         boolean instructions = request.getHint("instructions", false);
         if (instructions)
         {
+            sw = new StopWatch().start();
             rsp.setInstructions(path.calcInstructions());
+            debug += ", instructions:" + sw.stop().getSeconds() + "s";
         }
         return rsp.setPoints(points).setDistance(path.getDistance()).setTime(path.getTime()).setDebugInfo(debug);
     }

File: core/src/main/java/com/graphhopper/util/TranslationMap.java
Patch:
@@ -33,10 +33,10 @@ public class TranslationMap
         translations.put("de", de);
         de.put("left", "links");
         de.put("right", "rechts");
-        de.put("continue", "Folgen Sie");
-        de.put("continue onto %s", "Folgen Sie der %s");
+        de.put("continue", "Weiter");
+        de.put("continue onto %s", "Weiter auf %s");
         de.put("turn %s", "%s abbiegen");
-        de.put("turn %s onto %s", "%s abbiegen auf die %s");
+        de.put("turn %s onto %s", "%s abbiegen auf %s");
 
         TranslationHashMap en = new TranslationHashMap()
         {

File: core/src/test/java/com/graphhopper/util/InstructionListTest.java
Patch:
@@ -90,8 +90,8 @@ public void testWayList()
                 "Turn left onto 7-8", "Continue onto 8-9", "Turn right"),
                 wayList.createDescription(Locale.CANADA));
 
-        assertEquals(Arrays.asList("Folgen Sie der 0-1", "Rechts abbiegen auf die 1-4", "Folgen Sie der 4-7",
-                "Links abbiegen auf die 7-8", "Folgen Sie der 8-9", "Rechts abbiegen"),
+        assertEquals(Arrays.asList("Weiter auf 0-1", "Rechts abbiegen auf 1-4", "Weiter auf 4-7",
+                "Links abbiegen auf 7-8", "Weiter auf 8-9", "Rechts abbiegen"),
                 wayList.createDescription(Locale.GERMAN));
 
         TDoubleList distList = wayList.getDistances();

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -54,6 +54,7 @@ public class Constants
     public static final int VERSION_EDGE = 2;
     public static final int VERSION_GEOMETRY = 1;
     public static final int VERSION_LOCATION_IDX = 1;
+    public static final int VERSION_NAME_IDX = 1;
     /**
      * The version without the snapshot string
      */
@@ -63,7 +64,8 @@ public class Constants
 
     public static String getVersions()
     {
-        return VERSION_NODE + "," + VERSION_EDGE + "," + VERSION_GEOMETRY + "," + VERSION_LOCATION_IDX;
+        return VERSION_NODE + "," + VERSION_EDGE + "," + VERSION_GEOMETRY + "," + VERSION_LOCATION_IDX
+                + "," + VERSION_NAME_IDX;
     }
 
     static

File: core/src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -1340,7 +1340,7 @@ public String toDetailsString()
     public String toString()
     {
         return getClass().getSimpleName()
-                + "|" + encodingManager.toString()
+                + "|" + encodingManager
                 + "|" + getDirectory().getDefaultType()
                 + "|" + getProperties().versionsToString();
     }

File: core/src/main/java/com/graphhopper/coll/BinHeapWrapper.java
Patch:
@@ -28,7 +28,7 @@ public interface BinHeapWrapper<K, E>
 
     boolean isEmpty();
 
-    int size();
+    int getSize();
 
     E peekElement();
 

File: core/src/main/java/com/graphhopper/coll/CompressedArray.java
Patch:
@@ -108,8 +108,8 @@ public CoordTrig get( long index )
             }
             byte[] bytes = segments.get(segmentNo);
             VLongStorage store = new VLongStorage(decompress(bytes));
-            long len = store.length();
-            for (int i = 0; store.position() < len; i++)
+            long len = store.getLength();
+            for (int i = 0; store.getPosition() < len; i++)
             {
                 long latlon = store.readVLong();
                 if (i == entry)
@@ -139,7 +139,7 @@ public void flush()
         try
         {
             currentWriter.trimToSize();
-            byte[] input = currentWriter.bytes();
+            byte[] input = currentWriter.getBytes();
             segments.add(compress(input, 0, input.length, compressionLevel));
             currentWriter = null;
             currentEntry = 0;

File: core/src/main/java/com/graphhopper/coll/GHBitSet.java
Patch:
@@ -29,7 +29,7 @@ public interface GHBitSet
 
     void add( int index );
 
-    int cardinality();
+    int getCardinality();
 
     void clear();
 

File: core/src/main/java/com/graphhopper/coll/GHBitSetImpl.java
Patch:
@@ -46,7 +46,7 @@ public void add( int index )
     }
 
     @Override
-    public int cardinality()
+    public int getCardinality()
     {
         return super.cardinality();
     }

File: core/src/main/java/com/graphhopper/coll/GHSortedCollection.java
Patch:
@@ -142,7 +142,7 @@ public int pollKey()
         return val;
     }
 
-    public int size()
+    public int getSize()
     {
         return size;
     }

File: core/src/main/java/com/graphhopper/coll/GHTBitSet.java
Patch:
@@ -63,7 +63,7 @@ public String toString()
     }
 
     @Override
-    public int cardinality()
+    public int getCardinality()
     {
         return tHash.size();
     }

File: core/src/main/java/com/graphhopper/coll/GHTreeMapComposed.java
Patch:
@@ -84,7 +84,7 @@ public int pollKey()
         return (int) (key & 0xFFFFFFFFL);
     }
 
-    public int size()
+    public int getSize()
     {
         return map.size();
     }

File: core/src/main/java/com/graphhopper/coll/IntDoubleBinHeap.java
Patch:
@@ -46,7 +46,7 @@ public IntDoubleBinHeap( int capacity )
     }
 
     @Override
-    public int size()
+    public int getSize()
     {
         return size;
     }

File: core/src/main/java/com/graphhopper/coll/IntIntBinHeap.java
Patch:
@@ -46,7 +46,7 @@ public IntIntBinHeap( int capacity )
     }
 
     @Override
-    public int size()
+    public int getSize()
     {
         return size;
     }

File: core/src/main/java/com/graphhopper/coll/LongIntMap.java
Patch:
@@ -27,9 +27,9 @@ public interface LongIntMap
 
     int get( long key );
 
-    long size();
+    long getSize();
 
     void optimize();
 
-    int memoryUsage();
+    int getMemoryUsage();
 }

File: core/src/main/java/com/graphhopper/coll/SparseArray.java
Patch:
@@ -217,7 +217,7 @@ public void put( int key, E value )
     /**
      * Returns the number of key-value mappings that this SparseArray currently stores.
      */
-    public int size()
+    public int getSize()
     {
         if (mGarbage)
         {

File: core/src/main/java/com/graphhopper/coll/SparseIntIntArray.java
Patch:
@@ -207,7 +207,7 @@ public int put( int key, int value )
     /**
      * Returns the number of key-value mappings that this SparseIntIntArray currently stores.
      */
-    public int size()
+    public int getSize()
     {
         if (mGarbage)
         {
@@ -372,7 +372,7 @@ public int append( int key, int value )
     public String toString()
     {
         StringBuilder sb = new StringBuilder();
-        for (int i = 0; i < size(); i++)
+        for (int i = 0; i < getSize(); i++)
         {
             int k = mKeys[i];
             int v = mValues[i];

File: core/src/main/java/com/graphhopper/coll/SparseLongLongArray.java
Patch:
@@ -210,7 +210,7 @@ public int put( long key, long value )
     /**
      * Returns the number of key-value mappings that this SparseLongLongArray currently stores.
      */
-    public int size()
+    public int getSize()
     {
         if (mGarbage)
         {

File: core/src/main/java/com/graphhopper/geohash/KeyAlgo.java
Patch:
@@ -30,7 +30,7 @@ public interface KeyAlgo
     /**
      * Sets the bounds of the underlying key algorithm.
      */
-    KeyAlgo bounds( double minLonInit, double maxLonInit, double minLatInit, double maxLatInit );
+    KeyAlgo setBounds( double minLonInit, double maxLonInit, double minLatInit, double maxLatInit );
 
     long encode( CoordTrig coord );
 

File: core/src/main/java/com/graphhopper/reader/OSMElement.java
Patch:
@@ -72,12 +72,12 @@ public OSMElement( OSMElement src )
         // no use case where tags need to be copied yet
     }
 
-    public long id()
+    public long getId()
     {
         return id;
     }
 
-    public void id( long id )
+    public void setId( long id )
     {
         if (this.id != 0)
         {
@@ -288,7 +288,7 @@ protected void createId()
         id = nextID++;
     }
 
-    public int type()
+    public int getType()
     {
         return type;
     }

File: core/src/main/java/com/graphhopper/reader/OSMInputFile.java
Patch:
@@ -19,7 +19,6 @@
 
 import com.graphhopper.reader.pbf.Sink;
 import com.graphhopper.reader.pbf.PbfReader;
-import com.graphhopper.routing.util.AbstractFlagEncoder;
 
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamConstants;
@@ -70,7 +69,7 @@ public OSMInputFile open() throws XMLStreamException
     /**
      * Currently on for pbf format. Default is number of cores.
      */
-    public OSMInputFile workerThreads( int num )
+    public OSMInputFile setWorkerThreads( int num )
     {
         workerThreads = num;
         return this;
@@ -216,7 +215,7 @@ private OSMElement getNextXML() throws XMLStreamException
         return null;
     }
 
-    public boolean eof()
+    public boolean isEOF()
     {
         return eof;
     }

File: core/src/main/java/com/graphhopper/reader/OSMNode.java
Patch:
@@ -63,16 +63,17 @@ public OSMNode()
         super(NODE);
     }
 
-    public double lat()
+    public double getLat()
     {
         return lat;
     }
 
-    public double lon()
+    public double getLon()
     {
         return lon;
     }
 
+    @Override
     public String toString()
     {
         if (tags == null)

File: core/src/main/java/com/graphhopper/reader/OSMRelation.java
Patch:
@@ -70,6 +70,7 @@ protected void readMembers( XMLStreamReader parser ) throws XMLStreamException
         }
     }
 
+    @Override
     public String toString()
     {
         return "Relation (" + id + ", " + members.size() + " members)";

File: core/src/main/java/com/graphhopper/reader/PrinctonReader.java
Patch:
@@ -38,7 +38,7 @@ public PrinctonReader( Graph graph )
         g = graph;
     }
 
-    public PrinctonReader stream( InputStream is )
+    public PrinctonReader setStream( InputStream is )
     {
         this.is = is;
         return this;

File: core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
Patch:
@@ -282,7 +282,7 @@ private void processWays( List<Osmformat.Way> ways, PbfFieldDecoder fieldDecoder
             // delta encoded meaning that each id is stored as a delta against
             // the previous one.
             long nodeId = 0;
-            TLongList wayNodes = osmWay.nodes();
+            TLongList wayNodes = osmWay.getNodes();
             for (long nodeIdOffset : way.getRefsList())
             {
                 nodeId += nodeIdOffset;

File: core/src/main/java/com/graphhopper/routing/PathBidir.java
Patch:
@@ -79,7 +79,7 @@ public Path extract()
             currRef = edgeWFrom.getParent(currRef);
             nodeFrom = edgeWFrom.getNode(currRef);
         }
-        fromNode(nodeFrom);
+        setFromNode(nodeFrom);
         reverseOrder();
 
         // skip node of toRef (equal to fromRef)
@@ -96,6 +96,6 @@ public Path extract()
             nodeTo = edgeWTo.getNode(tmpRef);
             currRef = tmpRef;
         }
-        return found(true);
+        return setFound(true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/PathNative.java
Patch:
@@ -39,7 +39,7 @@ public PathNative( Graph g, FlagEncoder encoder, int[] parents, int[] pathEdgeId
         this.pathEdgeIds = pathEdgeIds;
     }
 
-    public PathNative found( int end )
+    public PathNative setEndNode( int end )
     {
         endNode = end;
         return this;
@@ -67,6 +67,6 @@ public Path extract()
             endNode = parents[endNode];
         }
         reverseOrder();
-        return found(true);
+        return setFound(true);
     }
 }

File: core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
Patch:
@@ -38,15 +38,15 @@ public interface RoutingAlgorithm
     /**
      * Changes the used weight calculation (e.g. fastest, shortest). Default is shortest.
      */
-    RoutingAlgorithm type( WeightCalculation calc );
+    RoutingAlgorithm setType( WeightCalculation calc );
 
     /**
      * @return name of this algorithm
      */
-    String name();
+    String getName();
 
     /**
      * Returns the visited nodes after searching. Useful for debugging.
      */
-    int visitedNodes();
+    int getVisitedNodes();
 }

File: core/src/main/java/com/graphhopper/routing/util/AbstractAlgoPreparation.java
Patch:
@@ -28,7 +28,7 @@ public abstract class AbstractAlgoPreparation<T extends AlgorithmPreparation> im
     private boolean prepared = false;
 
     @Override
-    public AlgorithmPreparation graph( Graph g )
+    public AlgorithmPreparation setGraph( Graph g )
     {
         _graph = g;
         return this;

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -224,7 +224,7 @@ public int flags( int speed, boolean bothDirections )
     @Override
     public int getMaxSpeed()
     {
-        return speedEncoder.maxValue();
+        return speedEncoder.getMaxValue();
     }
 
     @Override

File: core/src/main/java/com/graphhopper/routing/util/AlgorithmPreparation.java
Patch:
@@ -37,7 +37,7 @@ public interface AlgorithmPreparation
      */
     boolean isPrepared();
 
-    AlgorithmPreparation graph( Graph g );
+    AlgorithmPreparation setGraph( Graph g );
 
     RoutingAlgorithm createAlgo();
 }

File: core/src/main/java/com/graphhopper/routing/util/AllEdgesIterator.java
Patch:
@@ -25,5 +25,5 @@
  */
 public interface AllEdgesIterator extends EdgeIterator
 {
-    int maxId();
+    int getMaxId();
 }

File: core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -47,7 +47,7 @@ public DefaultEdgeFilter( FlagEncoder encoder, boolean in, boolean out )
     @Override
     public boolean accept( EdgeIterator iter )
     {
-        int flags = iter.flags();
+        int flags = iter.getFlags();
         return out && encoder.isForward(flags) || in && encoder.isBackward(flags);
     }
 

File: core/src/main/java/com/graphhopper/routing/util/EncodedValue.java
Patch:
@@ -91,7 +91,7 @@ public int setDefaultValue( int flags )
         return setValue(flags, defaultValue);
     }
 
-    public int maxValue()
+    public int getMaxValue()
     {
         return defaultMax;
     }

File: core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
Patch:
@@ -176,7 +176,7 @@ public int encodeTags( int includeWay, OSMWay way )
         return flags;
     }
 
-    public int countVehicles()
+    public int getVehicleCount()
     {
         return encoderCount;
     }
@@ -216,7 +216,7 @@ public String encoderList()
 
     public FlagEncoder getSingle()
     {
-        if (countVehicles() > 1)
+        if (getVehicleCount() > 1)
         {
             throw new IllegalStateException("multiple encoders are active. cannot return one:" + toString());
         }
@@ -225,7 +225,7 @@ public FlagEncoder getSingle()
 
     private FlagEncoder getFirst()
     {
-        if (countVehicles() == 0)
+        if (getVehicleCount() == 0)
         {
             throw new IllegalStateException("no encoder is active!");
         }

File: core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
Patch:
@@ -37,6 +37,6 @@ public LevelEdgeFilter( LevelGraph g )
     @Override
     public boolean accept( EdgeIterator edgeIter )
     {
-        return graph.getLevel(edgeIter.baseNode()) <= graph.getLevel(edgeIter.adjNode());
+        return graph.getLevel(edgeIter.getBaseNode()) <= graph.getLevel(edgeIter.getAdjNode());
     }
 }

File: core/src/main/java/com/graphhopper/routing/util/NoOpAlgorithmPreparation.java
Patch:
@@ -20,7 +20,6 @@
 import com.graphhopper.routing.RoutingAlgorithm;
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.util.Helper;
 
 /**
  * @author Peter Karich
@@ -40,7 +39,7 @@ public NoOpAlgorithmPreparation()
     public static AlgorithmPreparation createAlgoPrepare( Graph g, final String algorithmStr,
             FlagEncoder encoder, WeightCalculation weightCalc )
     {
-        return p(new RoutingAlgorithmFactory(algorithmStr, false), encoder, weightCalc).graph(g);
+        return p(new RoutingAlgorithmFactory(algorithmStr, false), encoder, weightCalc).setGraph(g);
     }
 
     private static AlgorithmPreparation p( final RoutingAlgorithmFactory factory,
@@ -53,7 +52,7 @@ public RoutingAlgorithm createAlgo()
             {
                 try
                 {
-                    return factory.createAlgo(_graph, encoder).type(weightCalc);
+                    return factory.createAlgo(_graph, encoder).setType(weightCalc);
                 } catch (Exception ex)
                 {
                     throw new RuntimeException(ex);

File: core/src/main/java/com/graphhopper/storage/Directory.java
Patch:
@@ -34,7 +34,7 @@ public static enum DAType
     /**
      * @return an id or location in the local filesystem.
      */
-    String location();
+    String getLocation();
 
     /**
      * Tries to find the object with that name if not existent it creates one and associates the

File: core/src/main/java/com/graphhopper/storage/Graph.java
Patch:
@@ -33,7 +33,7 @@ public interface Graph
     /**
      * @return the number of created locations - via setNode() or edge()
      */
-    int nodes();
+    int getNodes();
 
     /**
      * This method ensures that the node with the specified index exists and sets the lat+lon to the
@@ -51,7 +51,7 @@ public interface Graph
     /**
      * Returns the implicit bounds of this graph calculated from the lat,lon input of setNode
      */
-    BBox bounds();
+    BBox getBounds();
 
     /**
      * Creates an edge between the nodes a and b.

File: core/src/main/java/com/graphhopper/storage/IntIterator.java
Patch:
@@ -24,7 +24,7 @@ public interface IntIterator
 {
     boolean next();
 
-    int value();
+    int getValue();
 
     void remove();
 

File: core/src/main/java/com/graphhopper/storage/Storable.java
Patch:
@@ -34,7 +34,7 @@ public interface Storable<T> extends Closeable
     /**
      * Creates the underlying storage. First operation if it cannot be loaded.
      */
-    T create( long size );
+    T create( long byteCount );
 
     /**
      * This method makes sure that the underlying data is written to the storage. Keep in mind that
@@ -53,5 +53,5 @@ public interface Storable<T> extends Closeable
     /**
      * @return the allocated storage size in bytes
      */
-    long capacity();
+    long getCapacity();
 }

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -49,7 +49,7 @@ public boolean loadExisting()
             return false;
         }
 
-        int len = (int) da.capacity();
+        int len = (int) da.getCapacity();
         byte[] bytes = new byte[len];
         da.getBytes(0, bytes, len);
         try
@@ -115,9 +115,9 @@ public StorableProperties create( long size )
     }
 
     @Override
-    public long capacity()
+    public long getCapacity()
     {
-        return da.capacity();
+        return da.getCapacity();
     }
 
     public void putCurrentVersions()

File: core/src/main/java/com/graphhopper/storage/VLongStorage.java
Patch:
@@ -45,12 +45,12 @@ public void seek( long pos )
         pointer = (int) pos;
     }
 
-    public long position()
+    public long getPosition()
     {
         return pointer;
     }
 
-    public long length()
+    public long getLength()
     {
         return bytes.length;
     }
@@ -178,7 +178,7 @@ public void trimToSize()
         }
     }
 
-    public byte[] bytes()
+    public byte[] getBytes()
     {
         return bytes;
     }

File: core/src/main/java/com/graphhopper/storage/index/Location2IDIndex.java
Patch:
@@ -34,7 +34,7 @@ public interface Location2IDIndex extends Storable<Location2IDIndex>
      * Integer value to specify the resolution of this location index. The higher the better the
      * resolution.
      */
-    Location2IDIndex resolution( int resolution );
+    Location2IDIndex setResolution( int resolution );
 
     /**
      * Creates this index - to be called once before findID.
@@ -57,7 +57,7 @@ public interface Location2IDIndex extends Storable<Location2IDIndex>
     LocationIDResult findClosest( double lat, double lon, EdgeFilter edgeFilter );
 
     /**
-     * @param approxDist If false this makes initialization and querying faster but less precise.
+     * @param approx if false this makes initialization and querying faster but less precise.
      */
-    Location2IDIndex precision( boolean approxDist );
+    Location2IDIndex setApproximation( boolean approxDist );
 }

File: core/src/main/java/com/graphhopper/trees/QTBranchNode.java
Patch:
@@ -85,7 +85,7 @@ public String toString()
     public long getMemoryUsageInBytes( int factor )
     {
         // recursivly fetch the results
-        long all = 4 * Helper.sizeOfObjectRef(factor);
+        long all = 4 * Helper.getSizeOfObjectRef(factor);
         if (node0 != null)
         {
             all += node0.getMemoryUsageInBytes(factor);

File: core/src/main/java/com/graphhopper/trees/QTDataNode.java
Patch:
@@ -220,7 +220,7 @@ public String toString( SpatialKeyAlgo algo )
     @Override
     public long getMemoryUsageInBytes( int factor )
     {
-        return Helper.sizeOfLongArray(keys.length, factor) + Helper.sizeOfLongArray(values.length, factor);
+        return Helper.getSizeOfLongArray(keys.length, factor) + Helper.getSizeOfLongArray(values.length, factor);
     }
 
     @Override

File: core/src/main/java/com/graphhopper/trees/QuadTree.java
Patch:
@@ -38,7 +38,7 @@ public interface QuadTree<V>
      */
     QuadTree init( long maxItemsHint );
 
-    long size();
+    long getSize();
 
     boolean isEmpty();
 
@@ -77,7 +77,7 @@ class Util
     {
         public static void fill( QuadTree<Long> quadTree, Graph graph )
         {
-            int locs = graph.nodes();
+            int locs = graph.getNodes();
             for (int i = 0; i < locs; i++)
             {
                 double lat = graph.getLatitude(i);

File: core/src/main/java/com/graphhopper/util/BitUtil.java
Patch:
@@ -27,7 +27,7 @@ public class BitUtil
     public static void main( String[] args )
     {
         final byte[] bytes = BitUtil.fromInt(123);
-        System.out.println(new Measurement.MiniPerfTest()
+        System.out.println(new MiniPerfTest()
         {
             @Override
             public int doCalc( boolean warmup, int run )

File: core/src/main/java/com/graphhopper/util/EdgeSkipIterator.java
Patch:
@@ -27,11 +27,11 @@
  */
 public interface EdgeSkipIterator extends EdgeIterator
 {
-    int skippedEdge1();
+    int getSkippedEdge1();
 
-    int skippedEdge2();
+    int getSkippedEdge2();
 
-    void skippedEdges( int edge1, int edge2 );
+    void setSkippedEdges( int edge1, int edge2 );
 
     boolean isShortcut();
 }

File: core/src/main/java/com/graphhopper/util/SimpleIntDeque.java
Patch:
@@ -76,7 +76,7 @@ public int pop()
         int smallerSize = (int) (arr.length / growFactor);
         if (frontIndex > smallerSize)
         {
-            endIndexPlusOne = size();
+            endIndexPlusOne = getSize();
             // ensure that there are at least 10 entries
             int[] newArr = new int[endIndexPlusOne + 10];
             System.arraycopy(arr, frontIndex, newArr, 0, endIndexPlusOne);
@@ -87,7 +87,7 @@ public int pop()
         return tmp;
     }
 
-    public int size()
+    public int getSize()
     {
         return endIndexPlusOne - frontIndex;
     }

File: core/src/main/java/com/graphhopper/util/XFirstSearch.java
Patch:
@@ -57,7 +57,7 @@ public void start( Graph g, int startNode, boolean depthFirst )
             coll = new MyHelperIntQueue();
         }
 
-        GHBitSet visited = createBitSet(g.nodes());
+        GHBitSet visited = createBitSet(g.getNodes());
         visited.add(startNode);
         coll.push(startNode);
         int current;
@@ -69,7 +69,7 @@ public void start( Graph g, int startNode, boolean depthFirst )
                 EdgeIterator iter = getEdges(g, current);
                 while (iter.next())
                 {
-                    int connectedId = iter.adjNode();
+                    int connectedId = iter.getAdjNode();
                     if (checkAdjacent(iter) && !visited.contains(connectedId))
                     {
                         visited.add(connectedId);

File: core/src/main/java/com/graphhopper/util/shapes/BBox.java
Patch:
@@ -144,7 +144,7 @@ public boolean contains( BBox b )
 
     public boolean contains( Circle c )
     {
-        return contains(c.boundingBox());
+        return contains(c.getBounds());
     }
 
     @Override
@@ -159,7 +159,7 @@ public String toLessPrecisionString()
     }
 
     @Override
-    public BBox boundingBox()
+    public BBox getBounds()
     {
         return this;
     }

File: core/src/main/java/com/graphhopper/util/shapes/Shape.java
Patch:
@@ -43,5 +43,5 @@ public interface Shape
     /**
      * @return the minimal rectangular bounding box of this shape
      */
-    BBox boundingBox();
+    BBox getBounds();
 }

File: core/src/test/java/com/graphhopper/coll/AbstractMyBitSetTest.java
Patch:
@@ -110,7 +110,7 @@ public void testClear()
         assertFalse(bs.contains(1));
         assertFalse(bs.contains(2));
         assertFalse(bs.contains(12));
-        assertEquals(0, bs.cardinality());
+        assertEquals(0, bs.getCardinality());
         bs.add(12);
         bs.add(1);
         assertTrue(bs.contains(1));

File: core/src/test/java/com/graphhopper/coll/BigLongIntMapTest.java
Patch:
@@ -34,14 +34,14 @@ public void testPut()
         BigLongIntMap instance = new BigLongIntMap(1000, segments, -1);
         assertEquals(-1, instance.put(Long.MAX_VALUE / 2, 123));
         assertEquals(123, instance.get(Long.MAX_VALUE / 2));
-        assertEquals(1, instance.size());
+        assertEquals(1, instance.getSize());
         instance.clear();
 
         for (int i = 0; i < segments; i++)
         {
             assertEquals(-1, instance.put(Integer.MAX_VALUE * i, 123));
         }
-        assertEquals(segments, instance.size());
+        assertEquals(segments, instance.getSize());
         // assertEquals("1, 2, 0, ...", instance.toString());
     }
 }

File: core/src/test/java/com/graphhopper/coll/GHDijkstraHeap2Test.java
Patch:
@@ -42,7 +42,7 @@ public void testDups()
         heap.insert(3, 5);
         heap.insert(3, 6);
         heap.insert(4, 7);
-        assertEquals(4, heap.size());
+        assertEquals(4, heap.getSize());
         List<Integer> list = Arrays.asList(6, 5, 4);
         assertTrue(list.contains(heap.pollElement()));
         assertTrue(list.contains(heap.pollElement()));

File: core/src/test/java/com/graphhopper/coll/OSMIDMapTest.java
Patch:
@@ -40,7 +40,7 @@ public void testGet()
         map.put(21, 5);
         map.put(31, 2);
 
-        assertEquals(7, map.size());
+        assertEquals(7, map.getSize());
         assertEquals(-1, map.get(8));
         assertEquals(0, map.get(9));
         assertEquals(-50, map.get(10));
@@ -57,7 +57,7 @@ public void testGet()
         {
             map.put(i + 50, i + 7);
         }
-        assertEquals(57, map.size());
+        assertEquals(57, map.getSize());
     }
 
     @Test
@@ -116,7 +116,7 @@ public void testGet2()
         map.put(18, 7);
         map.put(19, 8);
 
-        assertEquals(9, map.size());
+        assertEquals(9, map.getSize());
         assertEquals(-1, map.get(8));
         assertEquals(0, map.get(9));
         assertEquals(1, map.get(10));

File: core/src/test/java/com/graphhopper/geohash/LinearKeyAlgoTest.java
Patch:
@@ -29,7 +29,7 @@ public class LinearKeyAlgoTest
     @Test
     public void testEncode()
     {
-        KeyAlgo algo = new LinearKeyAlgo(3, 4).bounds(-1, 9, -2, 20);
+        KeyAlgo algo = new LinearKeyAlgo(3, 4).setBounds(-1, 9, -2, 20);
         assertEquals(2L, algo.encode(-1, 5));
         assertEquals(11L, algo.encode(14, 7));
 
@@ -47,7 +47,7 @@ public void testEncode()
     @Test
     public void testDecode()
     {
-        KeyAlgo algo = new LinearKeyAlgo(3, 4).bounds(-1, 9, -2, 20);
+        KeyAlgo algo = new LinearKeyAlgo(3, 4).setBounds(-1, 9, -2, 20);
         CoordTrig latLon = new CoordTrig();
 
         // decode that we get the center of the grid cell!

File: core/src/test/java/com/graphhopper/geohash/SpatialKeyAlgoTest.java
Patch:
@@ -193,7 +193,7 @@ public void testBijection( int bits )
     @Test
     public void testNoFurtherIterationIfBitsIs1()
     {
-        SpatialKeyAlgo algo = new SpatialKeyAlgo(4).bounds(0, 5, 0, 5);
+        SpatialKeyAlgo algo = new SpatialKeyAlgo(4).setBounds(0, 5, 0, 5);
         // 1001
         CoordTrig coord = new CoordTrig();
         algo.decode(9, coord);
@@ -224,7 +224,7 @@ public void testOddBits()
     @Test
     public void testDifferentInitialBounds()
     {
-        SpatialKeyAlgo algo = new SpatialKeyAlgo(8).bounds(0, 5, 0, 5);
+        SpatialKeyAlgo algo = new SpatialKeyAlgo(8).setBounds(0, 5, 0, 5);
         assertEquals(1, algo.encode(0, 0.5));
         assertEquals(5, algo.encode(0, 1));
 

File: core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -37,8 +37,8 @@ public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc,
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new AStarBidirection(_graph, encoder).type(calc);
+                return new AStarBidirection(_graph, encoder).setType(calc);
             }
-        }.graph(g);
+        }.setGraph(g);
     }
 }
\ No newline at end of file

File: core/src/test/java/com/graphhopper/routing/AStarTest.java
Patch:
@@ -36,8 +36,8 @@ public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc,
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new AStar(_graph, encoder).type(calc);
+                return new AStar(_graph, encoder).setType(calc);
             }
-        }.graph(g);
+        }.setGraph(g);
     }
 }

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -40,9 +40,9 @@ public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc,
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new DijkstraBidirectionRef(_graph, encoder).type(calc);
+                return new DijkstraBidirectionRef(_graph, encoder).setType(calc);
             }
-        }.graph(g);
+        }.setGraph(g);
     }
 
     @Test
@@ -51,6 +51,6 @@ public void testCannotCalculateSP2()
         Graph g = createGraph();
         DijkstraBidirectionRef db = new DijkstraBidirectionRef(g, carEncoder);
         Path p = db.calcPath(0, 2);
-        assertFalse(p.found());
+        assertFalse(p.isFound());
     }
 }

File: core/src/test/java/com/graphhopper/routing/DijkstraBidirectionTest.java
Patch:
@@ -39,9 +39,9 @@ public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc,
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new DijkstraBidirection(_graph, encoder).type(calc);
+                return new DijkstraBidirection(_graph, encoder).setType(calc);
             }
-        }.graph(g);
+        }.setGraph(g);
     }
 
     @Test
@@ -50,6 +50,6 @@ public void testCannotCalculateSP2()
         Graph g = createGraph();
         DijkstraBidirection algo = new DijkstraBidirection(g, carEncoder);
         Path p = algo.calcPath(0, 2);
-        assertFalse(p.found());
+        assertFalse(p.isFound());
     }
 }

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -37,8 +37,8 @@ public AlgorithmPreparation prepareGraph( Graph g, final WeightCalculation calc,
             @Override
             public RoutingAlgorithm createAlgo()
             {
-                return new Dijkstra(_graph, encoder).type(calc);
+                return new Dijkstra(_graph, encoder).setType(calc);
             }
-        }.graph(g);
+        }.setGraph(g);
     }
 }

File: core/src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -33,8 +33,8 @@ public class PathTest
     public void testFound()
     {
         Path p = new Path(null, null);
-        assertFalse(p.found());
-        assertEquals(0, p.distance(), 1e-7);
+        assertFalse(p.isFound());
+        assertEquals(0, p.getDistance(), 1e-7);
         assertEquals(0, p.calcNodes().size());
     }
 
@@ -44,6 +44,6 @@ public void testTime()
         FlagEncoder encoder = new EncodingManager("CAR").getEncoder("CAR");
         Path p = new Path(null, encoder);
         p.calcTime(100000, encoder.flags(100, true));
-        assertEquals(60 * 60, p.time());
+        assertEquals(60 * 60, p.getTime());
     }
 }

File: core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -79,9 +79,9 @@ public void testGraph()
         g.edge(0, 2, 10, footEncoder.flags(5, true));
         g.edge(1, 3, 10, footEncoder.flags(10, true));
         EdgeFilter out = new DefaultEdgeFilter(footEncoder, false, true);
-        assertEquals(Arrays.asList(1, 2), GHUtility.neighbors(g.getEdges(0, out)));
-        assertEquals(Arrays.asList(0, 3), GHUtility.neighbors(g.getEdges(1, out)));
-        assertEquals(Arrays.asList(0), GHUtility.neighbors(g.getEdges(2, out)));
+        assertEquals(Arrays.asList(1, 2), GHUtility.getNeighbors(g.getEdges(0, out)));
+        assertEquals(Arrays.asList(0, 3), GHUtility.getNeighbors(g.getEdges(1, out)));
+        assertEquals(Arrays.asList(0), GHUtility.getNeighbors(g.getEdges(2, out)));
     }
 
     @Test

File: core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
Patch:
@@ -87,7 +87,7 @@ public void testKeepLargestNetworks()
         instance.keepLargeNetworks(map);
         g.optimize();
 
-        assertEquals(7, g.nodes());
+        assertEquals(7, g.getNodes());
         assertEquals(Arrays.<String>asList(), GHUtility.getProblems(g));
         map = instance.findSubnetworks();
         assertEquals(1, map.size());

File: core/src/test/java/com/graphhopper/storage/GraphStorage3DTest.java
Patch:
@@ -54,7 +54,7 @@ public void testGetHeight()
 
         Path p = new DijkstraBidirection(g, encodingManager.getEncoder("CAR")).calcPath(0, 1);
         assertEquals(Helper.createTList(0, 3, 1), p.calcNodes());
-        assertEquals(100, p.distance(), .1);
+        assertEquals(100, p.getDistance(), .1);
     }
 
     public static void edge( GraphStorage3D g, DistanceCalc3D dist, int from, int to )

File: core/src/test/java/com/graphhopper/storage/GraphStorageViaMMapTest.java
Patch:
@@ -25,6 +25,6 @@ public class GraphStorageViaMMapTest extends AbstractGraphTester
     @Override
     public GraphStorage createGraph( String location, int size )
     {
-        return new GraphBuilder(encodingManager).location(location).mmap(true).build().segmentSize(size / 2).create(size);
+        return new GraphBuilder(encodingManager).setLocation(location).setMmap(true).build().setSegmentSize(size / 2).create(size);
     }
 }

File: core/src/test/java/com/graphhopper/storage/MMapDataAccessTest.java
Patch:
@@ -28,7 +28,7 @@ public class MMapDataAccessTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new MMapDataAccess(name, directory).segmentSize(128);
+        return new MMapDataAccess(name, directory).setSegmentSize(128);
     }
 
     @Test

File: core/src/test/java/com/graphhopper/storage/RAMDataAccessTest.java
Patch:
@@ -26,6 +26,6 @@ public class RAMDataAccessTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new RAMDataAccess(name, directory, true).segmentSize(128);
+        return new RAMDataAccess(name, directory, true).setSegmentSize(128);
     }
 }

File: core/src/test/java/com/graphhopper/storage/RAMIntDataAccessTest.java
Patch:
@@ -26,7 +26,7 @@ public class RAMIntDataAccessTest extends DataAccessTest
     @Override
     public DataAccess createDataAccess( String name )
     {
-        return new RAMIntDataAccess(name, directory, true).segmentSize(128);
+        return new RAMIntDataAccess(name, directory, true).setSegmentSize(128);
     }
 
     @Override

File: core/src/test/java/com/graphhopper/storage/index/AbstractLocation2IDIndexTester.java
Patch:
@@ -143,7 +143,7 @@ public void testSimpleGraph2()
     public void testGrid()
     {
         Graph g = createSampleGraph(new EncodingManager("CAR"));
-        int locs = g.nodes();
+        int locs = g.getNodes();
 
         Location2IDIndex index = createIndex(g, 120);
         // if we would use less array entries then some points gets the same key so avoid that for this test
@@ -353,11 +353,11 @@ public void testDifferentVehicles()
         CarFlagEncoder carEncoder = (CarFlagEncoder) encodingManager.getEncoder("CAR");
         while (iter.next())
         {
-            iter.flags(carEncoder.flags(50, true));
+            iter.setFlags(carEncoder.flags(50, true));
         }
 
         idx = createIndex(g, 32);
         FootFlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("FOOT");
-        assertEquals(2, idx.findClosest(1, -1, new DefaultEdgeFilter(footEncoder)).closestNode());
+        assertEquals(2, idx.findClosest(1, -1, new DefaultEdgeFilter(footEncoder)).getClosestNode());
     }
 }

File: core/src/test/java/com/graphhopper/storage/index/BresenhamLineTest.java
Patch:
@@ -95,7 +95,7 @@ public void testRealBresenham()
         int bits = (int) (Math.log(parts * parts) / Math.log(2));
         double minLon = -1, maxLon = 1.6;
         double minLat = -1, maxLat = 0.5;
-        final KeyAlgo keyAlgo = new SpatialKeyAlgo(bits).bounds(minLon, maxLon, minLat, maxLat);
+        final KeyAlgo keyAlgo = new SpatialKeyAlgo(bits).setBounds(minLon, maxLon, minLat, maxLat);
         double deltaLat = (maxLat - minLat) / parts;
         double deltaLon = (maxLon - minLon) / parts;
         final ArrayList<Long> keys = new ArrayList<Long>();
@@ -120,6 +120,6 @@ public void testBresenhamToLeft()
         BresenhamLine.calcPoints(
                 47.57383, 9.61984,
                 47.57382, 9.61890, emitter, 47, 9, 0.00647, 0.00964);
-        assertEquals(points.toString(), 1, points.size());
+        assertEquals(points.toString(), 1, points.getSize());
     }
 }

File: core/src/test/java/com/graphhopper/util/PointListTest.java
Patch:
@@ -32,13 +32,13 @@ public void testReverse()
         PointList instance = new PointList();
         instance.add(1, 1);
         instance.reverse();
-        assertEquals(1, instance.longitude(0), 1e-7);
+        assertEquals(1, instance.getLongitude(0), 1e-7);
 
         instance = new PointList();
         instance.add(1, 1);
         instance.add(2, 2);
         instance.reverse();
-        assertEquals(2, instance.longitude(0), 1e-7);
-        assertEquals(1, instance.longitude(1), 1e-7);
+        assertEquals(2, instance.getLongitude(0), 1e-7);
+        assertEquals(1, instance.getLongitude(1), 1e-7);
     }
 }

File: core/src/test/java/com/graphhopper/util/XFirstSearchTest.java
Patch:
@@ -72,6 +72,6 @@ public boolean goFurther( int v )
         bfs.start(g, 0, false);
 
         assertTrue(counter > 0);
-        assertEquals(g.nodes(), counter);
+        assertEquals(g.getNodes(), counter);
     }
 }

File: core/src/test/java/com/graphhopper/util/shapes/BBoxTest.java
Patch:
@@ -54,7 +54,7 @@ public void testContains()
         assertFalse(new BBox(1, 2, 0, 0.5).contains(new BBox(1.5, 2, 0.5, 1)));
 
         Circle c = new Circle(10, 10, 120000);
-        assertTrue(c.boundingBox().contains(c));
+        assertTrue(c.getBounds().contains(c));
         assertFalse(new BBox(8.9, 11.09, 8.9, 11.2).contains(c));
     }
 

File: tools/src/main/java/com/graphhopper/ui/GraphicsWrapper.java
Patch:
@@ -40,7 +40,7 @@ public class GraphicsWrapper
     public GraphicsWrapper( Graph g )
     {
         this.g = g;
-        BBox b = g.bounds();
+        BBox b = g.getBounds();
         scaleX = scaleY = 0.002 * (b.maxLat - b.minLat);
         offsetY = b.maxLat - 90;
         offsetX = -b.minLon;

File: web/src/main/java/com/graphhopper/http/GHThreadPool.java
Patch:
@@ -180,12 +180,12 @@ private boolean isTimedOut()
             return (System.currentTimeMillis() - startTime) > maxLiveTimeInMillis;
         }
 
-        public abstract String name();
+        public abstract String getName();
 
         @Override
         public String toString()
         {
-            return name();
+            return getName();
         }
 
         private void finish()

File: web/src/main/java/com/graphhopper/http/WebHelper.java
Patch:
@@ -78,15 +78,15 @@ public static PointList decodePolyline( String encoded, int initCap )
     public static String encodePolyline( PointList poly )
     {
         StringBuilder sb = new StringBuilder();
-        int size = poly.size();
+        int size = poly.getSize();
         int prevLat = 0;
         int prevLon = 0;
         for (int i = 0; i < size; i++)
         {
-            int num = (int) Math.floor(poly.latitude(i) * 1e5);
+            int num = (int) Math.floor(poly.getLatitude(i) * 1e5);
             encodeNumber(sb, num - prevLat);
             prevLat = num;
-            num = (int) Math.floor(poly.longitude(i) * 1e5);
+            num = (int) Math.floor(poly.getLongitude(i) * 1e5);
             encodeNumber(sb, num - prevLon);
             prevLon = num;
         }

File: web/src/test/java/com/graphhopper/http/WebHelperTest.java
Patch:
@@ -54,11 +54,11 @@ public void testBoth() throws Exception
         PointList list = Helper.createPointList(38.5, -120.2, 43.252, -126.453,
                 40.7, -120.95, 50.3139, 10.612793, 50.04303, 9.497681);
         String str = WebHelper.encodePolyline(list);
-        assertEquals(list, WebHelper.decodePolyline(str, list.size()));
+        assertEquals(list, WebHelper.decodePolyline(str, list.getSize()));
 
         list = Helper.createPointList(38.5, -120.2, 43.252, -126.453,
                 40.7, -120.95, 40.70001, -120.95001);
         str = WebHelper.encodePolyline(list);
-        assertEquals(list, WebHelper.decodePolyline(str, list.size()));
+        assertEquals(list, WebHelper.decodePolyline(str, list.getSize()));
     }
 }

File: core/src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -108,15 +108,15 @@ public DataAccess copyTo(DataAccess da) {
         }
         da.ensureCapacity(capacity());
         long cap = capacity();
-        // currently get/setBytes do not support copying more bytes then segmentSize
+        // currently get/setBytes does not support copying more bytes then segmentSize
         int segSize = Math.min(da.segmentSize(), segmentSize());
         byte[] bytes = new byte[segSize];
         boolean externalIntBased = ((AbstractDataAccess) da).isIntBased();
         for (long bytePos = 0; bytePos < cap; bytePos += segSize) {
             // read
             if (isIntBased()) {
                 for (int offset = 0; offset < segSize; offset += 4) {
-                    BitUtil.fromInt(bytes, da.getInt(bytePos + offset), offset);
+                    BitUtil.fromInt(bytes, getInt(bytePos + offset), offset);
                 }
             } else
                 getBytes(bytePos, bytes, segSize);

File: core/src/test/java/com/graphhopper/storage/AbstractGraphTester.java
Patch:
@@ -242,7 +242,8 @@ public void testCopyTo() {
             assertTrue(ex.toString(), false);
         }
 
-        try {            
+        try {
+            close(graph);
             graph = createGraph();
             gs.copyTo(graph);
             checkExampleGraph(graph);

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -121,19 +121,18 @@ public EncodingManager encodingManager() {
     public GraphHopper forServer() {
         // simplify to reduce network IO
         simplifyRequest(true);
-        preciseIndexResolution(1000);
+        preciseIndexResolution(500);
         return setInMemory(true, true);
     }
 
     public GraphHopper forDesktop() {
         simplifyRequest(false);
-        preciseIndexResolution(1000);
+        preciseIndexResolution(500);
         return setInMemory(true, true);
     }
 
     public GraphHopper forMobile() {
         simplifyRequest(false);
-        // make new index faster (but unprecise) and disable searchRegion
         preciseIndexResolution(500);
         return memoryMapped();
     }

File: core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -51,7 +51,7 @@ public PrepareRoutingSubnetworks minNetworkSize(int minNetworkSize) {
         return this;
     }
 
-    public void doWork() {
+    public void doWork() {        
         logger.info("removeZeroDegreeNodes");
         int del = removeZeroDegreeNodes();
         logger.info("findSubnetworks");

File: core/src/main/java/com/graphhopper/storage/RAMDataAccess.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.Arrays;
 
 /**
- * This is an in-memory data structure but with the possibility to be stored on
+ * This is an in-memory data structure with the possibility to be stored on
  * flush().
  *
  * @author Peter Karich
@@ -173,7 +173,7 @@ public void flush() {
                 raFile.close();
             }
         } catch (Exception ex) {
-            throw new RuntimeException("Couldn't store integers to " + toString(), ex);
+            throw new RuntimeException("Couldn't store bytes to " + toString(), ex);
         }
     }
 

File: core/src/test/java/com/graphhopper/storage/AbstractGraphTester.java
Patch:
@@ -588,6 +588,7 @@ public void testCopyTo() {
         try {
             graph.copyTo(gs);
         } catch (Exception ex) {
+            ex.printStackTrace();
             assertTrue(ex.toString(), false);
         }
 

File: core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
Patch:
@@ -81,7 +81,7 @@ public void testKeepLargestNetworks() {
         Graph g = createSubnetworkTestGraph();
         PrepareRoutingSubnetworks instance = new PrepareRoutingSubnetworks(g);
         Map<Integer, Integer> map = instance.findSubnetworks();
-        instance.keepLargeNetwork(map);
+        instance.keepLargeNetworks(map);
         g.optimize();
 
         assertEquals(7, g.nodes());

File: core/src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -662,7 +662,7 @@ private void wayGeometry(PointList pillarNodes, long edgePointer, boolean revers
             int len = pillarNodes.size();
             int tmpRef = nextGeoRef(len * 2);
             edges.setInt(edgePointer + E_GEO, tmpRef);
-            long geoRef = tmpRef * 4;
+            long geoRef = (long) tmpRef * 4;
             ensureGeometry(geoRef, len * 8 + 4);
             byte[] bytes = new byte[len * 2 * 4 + 4];
             BitUtil.fromInt(bytes, len, 0);
@@ -698,9 +698,9 @@ private PointList wayGeometry(long edgePointer, boolean reverse) {
             int index = bytes.length;
             for (int i = count - 1; i >= 0; i--) {
                 index -= 4;
-                double lon = Helper.intToDegree(BitUtil.toInt(bytes, index));                
+                double lon = Helper.intToDegree(BitUtil.toInt(bytes, index));
                 index -= 4;
-                double lat = Helper.intToDegree(BitUtil.toInt(bytes, index));                
+                double lat = Helper.intToDegree(BitUtil.toInt(bytes, index));
                 pillarNodes.add(lat, lon);
             }
         } else {

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -80,7 +80,7 @@ void testAlgos() {
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.2800, 9.7190), idx.findID(49.8960, 10.3890), 77238, 1278);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.8020, 9.2470), idx.findID(50.4940, 10.1970), 125876, 2221);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.72449, 9.23482), idx.findID(50.4140, 10.2750), 137191, 2330);
-            testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.1100, 10.7530), idx.findID(49.6500, 10.3410), 73538, 1426);
+            testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.1100, 10.7530), idx.findID(49.6500, 10.3410), 74181, 1371);
 
             System.out.println("unterfranken " + prepare.createAlgo() + ": " + (testCollector.errors.size() - failed) + " failed");
         }

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -27,7 +27,6 @@
 import com.graphhopper.storage.LevelGraphStorage;
 import com.graphhopper.util.StopWatch;
 import static com.graphhopper.routing.util.NoOpAlgorithmPreparation.*;
-import com.graphhopper.storage.GraphStorage;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -80,8 +79,8 @@ void testAlgos() {
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.0780, 9.1570), idx.findID(49.5860, 9.9750), 93122, 1292);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.2800, 9.7190), idx.findID(49.8960, 10.3890), 77238, 1278);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.8020, 9.2470), idx.findID(50.4940, 10.1970), 125876, 2221);
-            testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.7260, 9.2550), idx.findID(50.4140, 10.2750), 136581, 2287);
-            testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.1100, 10.7530), idx.findID(49.6500, 10.3410), 74175, 1370);
+            testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.72449, 9.23482), idx.findID(50.4140, 10.2750), 137191, 2330);
+            testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.1100, 10.7530), idx.findID(49.6500, 10.3410), 73538, 1426);
 
             System.out.println("unterfranken " + prepare.createAlgo() + ": " + (testCollector.errors.size() - failed) + " failed");
         }

File: core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -43,7 +43,8 @@ public TestAlgoCollector assertDistance(RoutingAlgorithm algo,
             int from, int to, double distance, int pointCount) {
         Path path = algo.calcPath(from, to);
         if (!path.found()) {
-            errors.add(algo + " returns no path. from:" + from + ", to:" + to);
+            errors.add(algo + " returns no path! expected distance: " + distance
+                    + ", expected locations: " + pointCount + ". from:" + from + ", to:" + to);
             return this;
         }
 

File: core/src/main/java/com/graphhopper/util/Measurement.java
Patch:
@@ -63,6 +63,9 @@ public static void main(String[] strs) {
     // creates properties file in the format key=value
     // Every value is one y-value in a separate diagram with an identical x-value for every Measurement.start call
     void start(CmdArgs args) {
+        long importTook = args.getLong("graph.importTime", -1);
+        put("graph.importTime", importTook);
+
         String graphLocation = args.get("graph.location", "");
         if (Helper.isEmpty(graphLocation))
             throw new IllegalStateException("no graph.location specified");

File: core/src/main/java/com/graphhopper/routing/rideshare/DijkstraTwoDrivers.java
Patch:
@@ -22,7 +22,6 @@
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.EdgeEntry;
 
@@ -40,9 +39,9 @@ public class DijkstraTwoDrivers {
     private double overallDistance = Double.MAX_VALUE;
     private FlagEncoder carEncoder;
 
-    public DijkstraTwoDrivers(Graph graph) {
+    public DijkstraTwoDrivers(Graph graph, CarFlagEncoder encoder) {
         this.graph = graph;
-        this.carEncoder = EncodingManager.instance().getEncoder("CAR");
+        this.carEncoder = encoder;
     }
 
     public void setDriverA(int fromA, int toA) {

File: core/src/test/java/com/graphhopper/routing/rideshare/DijkstraTwoDriversTest.java
Patch:
@@ -43,7 +43,7 @@ Graph getGraph() {
 
     @Test public void testFindMeetingPointWhenNotCrossing() {
         Graph g = getGraph();
-        DijkstraTwoDrivers d = new DijkstraTwoDrivers(g);
+        DijkstraTwoDrivers d = new DijkstraTwoDrivers(g, carEncoder);
 
         d.setDriverA(12, 36);
         d.setDriverB(30, 45);
@@ -71,7 +71,7 @@ Graph getGraph() {
 
     @Test public void testFindMeetingPointWhenCrossing() {
         Graph g = getGraph();
-        DijkstraTwoDrivers d = new DijkstraTwoDrivers(g);
+        DijkstraTwoDrivers d = new DijkstraTwoDrivers(g, carEncoder);
         d.setDriverA(12, 36);
         d.setDriverB(30, 15);
         d.calcPath();

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -95,7 +95,6 @@ public class PrepareContractionHierarchies extends AbstractAlgoPreparation<Prepa
 
     public PrepareContractionHierarchies() {
         type(new ShortestCalc());
-        //vehicle(new CarFlagEncoder());
         originalEdges = new RAMDirectory().findCreate("originalEdges");
         originalEdges.create(1000);
     }

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -428,7 +428,7 @@ else if (graphHopperFolder.endsWith(".osm") || graphHopperFolder.endsWith(".xml"
         // check encoding for compatiblity
         String acceptStr = properties.get("osmreader.acceptWay");
         if (!acceptStr.isEmpty() && !encodingManager.encoderList().equals(acceptStr))
-            throw new IllegalStateException("Encoding does not match:\nGraphhopper: " + encodingManager.encoderList() + "\nGraph: " + acceptStr);
+            throw new IllegalStateException("Encoding does not match:\nGraphhopper config: " + encodingManager.encoderList() + "\nGraph: " + acceptStr);
         properties.checkVersions(false);
         if ("false".equals(properties.get("prepare.done")))
             prepare();

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -77,7 +77,7 @@ void testAlgos() {
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.0780, 9.1570), idx.findID(49.5860, 9.9750), 93122, 1292);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.2800, 9.7190), idx.findID(49.8960, 10.3890), 77238, 1278);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.8020, 9.2470), idx.findID(50.4940, 10.1970), 125876, 2221);
-            testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.7260, 9.2550), idx.findID(50.4140, 10.2750), 136449, 2271);
+            testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.7260, 9.2550), idx.findID(50.4140, 10.2750), 136581, 2287);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.1100, 10.7530), idx.findID(49.6500, 10.3410), 74175, 1370);
 
             System.out.println("unterfranken " + prepare.createAlgo() + ": " + (testCollector.errors.size() - failed) + " failed");

File: core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -86,7 +86,7 @@ public void testMonacoFoot() {
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(new OneRun(43.730729, 7.421288, 43.727687, 7.418737, 1536, 80));
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3455, 123));
-        list.add(new OneRun(43.72915, 7.410572, 43.739213, 7.427806, 2243, 99));
+        list.add(new OneRun(43.72915, 7.410572, 43.739213, 7.427806, 2018, 89));
         runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
                 list, "FOOT", true, "FOOT");
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
@@ -97,7 +97,7 @@ public void testMonacoBike() {
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(new OneRun(43.730729, 7.421288, 43.727687, 7.418737, 2543, 86));
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3604, 125));
-        list.add(new OneRun(43.72915, 7.410572, 43.739213, 7.427806, 2797, 124));
+        list.add(new OneRun(43.72915, 7.410572, 43.739213, 7.427806, 2490, 102));
         runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
                 list, "BIKE", true, "BIKE");
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());

File: core/src/main/java/com/graphhopper/reader/OSMInputFile.java
Patch:
@@ -191,8 +191,8 @@ public void close() throws XMLStreamException, IOException {
     private void openPBFReader(InputStream stream) {
         incomingData = true;
 
-        if (workerThreads < 0)
-            workerThreads = Runtime.getRuntime().availableProcessors();
+        if (workerThreads <= 0)
+            workerThreads = 2;
         PbfReader reader = new PbfReader(stream, this, workerThreads);
         new Thread(reader, "PBF Reader").start();
     }

File: core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -67,7 +67,6 @@ public AbstractFlagEncoder(int shift, int factor, int defaultSpeed, int maxSpeed
         oneways.add("true");
         oneways.add("1");
         oneways.add("-1");
-        oneways.add("roundabout");
 
         ferries.add("shuttle_train");
         ferries.add("ferry");

File: core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
Patch:
@@ -130,7 +130,7 @@ public int handleWayTags(int allowed, OSMWay way) {
             // http://wiki.openstreetmap.org/wiki/Map_Features#Cycleway
             String highwayValue = way.getTag("highway");
             int speed = getSpeed(highwayValue);
-            if (way.hasTag("oneway", oneways)
+            if ((way.hasTag("oneway", oneways) || way.hasTag("junction","roundabout"))
                     && !way.hasTag("oneway:bicycle", "no")
                     && !way.hasTag("cycleway", oppositeLanes)) {
 

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -134,11 +134,10 @@ void writeOsm2Graph(File osmFile) {
 
             OSMElement item;
             while ((item = in.getNext()) != null) {
-
                 switch (item.type()) {
                     case OSMElement.NODE:
                         processNode((OSMNode) item);
-                        if (counter % 10000000 == 0) {
+                        if (counter % 1000000 == 0) {
                             logger.info(nf(counter) + ", locs:" + nf(locations)
                                     + " (" + skippedLocations + ") " + Helper.memInfo());
                         }
@@ -163,6 +162,7 @@ void writeOsm2Graph(File osmFile) {
                         }
                         break;
                 }
+                counter++;
             }
             in.close();
             // logger.info("storage nodes:" + storage.nodes() + " vs. graph nodes:" + storage.getGraph().nodes());

File: core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -76,7 +76,7 @@ void testAlgos() {
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.0780, 9.1570), idx.findID(49.5860, 9.9750), 93122, 1292);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.2800, 9.7190), idx.findID(49.8960, 10.3890), 77238, 1278);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.8020, 9.2470), idx.findID(50.4940, 10.1970), 125876, 2221);
-            testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.7260, 9.2550), idx.findID(50.4140, 10.2750), 136057, 2255);
+            testCollector.assertDistance(prepare.createAlgo(), idx.findID(49.7260, 9.2550), idx.findID(50.4140, 10.2750), 136449, 2271);
             testCollector.assertDistance(prepare.createAlgo(), idx.findID(50.1100, 10.7530), idx.findID(49.6500, 10.3410), 74175, 1370);
 
             System.out.println("unterfranken " + prepare.createAlgo() + ": " + (testCollector.errors.size() - failed) + " failed");

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -73,7 +73,7 @@ public void testPrepare() throws IOException {
     public void testFootAndCar() throws IOException {
         // now all ways are imported
         GraphHopper instance = new GraphHopper().setInMemory(true, false).
-                acceptWay(new AcceptWay(true, false, true)).
+                acceptWay(new AcceptWay("CAR,FOOT")).
                 graphHopperLocation(ghLoc).osmFile(testOsm3);
         instance.importOrLoad();
 
@@ -114,7 +114,7 @@ public void testFootAndCar() throws IOException {
     public void testFootOnly() throws IOException {
         // now only footable ways are imported => no A D C and B D E => the other both ways have pillar nodes!
         GraphHopper instance = new GraphHopper().setInMemory(true, false).
-                acceptWay(new AcceptWay(false, false, true)).
+                acceptWay(new AcceptWay("FOOT")).
                 graphHopperLocation(ghLoc).osmFile(testOsm3);
         instance.importOrLoad();
 

File: core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -257,7 +257,7 @@ InputStream getResource(String file) {
 
     @Test public void testWayReferencesNotExistingAdjNode() {
         GraphHopper hopper = new GraphHopperTest(file4).
-                acceptWay(new AcceptWay(true, false, true)).
+                acceptWay(new AcceptWay("CAR,FOOT")).
                 importOrLoad();
         Graph graph = hopper.graph();
 
@@ -270,7 +270,7 @@ InputStream getResource(String file) {
 
     @Test public void testFoot() {
         GraphHopper hopper = new GraphHopperTest(file3).
-                acceptWay(new AcceptWay(true, false, true)).
+                acceptWay(new AcceptWay("CAR,FOOT")).
                 importOrLoad();
         Graph graph = hopper.graph();
 
@@ -300,7 +300,7 @@ InputStream getResource(String file) {
 
     @Test public void testNegativeIds() {
         GraphHopper hopper = new GraphHopperTest(file5).
-                acceptWay(new AcceptWay(true, false, false)).
+                acceptWay(new AcceptWay("CAR")).
                 importOrLoad();
         Graph graph = hopper.graph();
         assertEquals(4, graph.nodes());

File: core/src/test/java/com/graphhopper/routing/util/CarFlagsEncoderTest.java
Patch:
@@ -75,9 +75,7 @@ public void testSwapDir() {
 
     @Test
     public void testService() {
-        Map<String, Object> properties = new HashMap<String, Object>();
-        properties.put("car", encoder.getSpeed("service"));
-        int flags = new AcceptWay(true, false, false).toFlags(properties);
+        int flags = encoder.flags( encoder.getSpeed("service"), true );
         assertTrue(encoder.isForward(flags));
         assertTrue(encoder.isBackward(flags));
         assertTrue(encoder.isService(flags));

File: web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
Patch:
@@ -44,7 +44,8 @@ public class GraphHopperWeb implements GraphHopperAPI {
     public static void main(String[] args) {
         GraphHopperAPI gh = new GraphHopperWeb();
         gh.load("http://localhost:8989/api");
-        GHResponse ph = gh.route(new GHRequest(53.080827, 9.074707, 50.597186, 11.184082));
+        //GHResponse ph = gh.route(new GHRequest(53.080827, 9.074707, 50.597186, 11.184082));
+        GHResponse ph = gh.route(new GHRequest( 49.6724, 11.3494, 49.6550, 11.4180));
         System.out.println(ph);
     }
     private Logger logger = LoggerFactory.getLogger(getClass());

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -560,8 +560,7 @@ protected void cleanUp() {
     }
 
     private void flush() {
-        logger.info("flushing graph with " + graph.nodes() + " nodes, bounds:"
-                + graph.bounds() + ", " + Helper.memInfo() + ")");
+        logger.info("flushing graph " + graph.toString() + ", " + Helper.memInfo() + ")");
         graph.flush();
         properties.flush();
     }

File: core/src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -956,7 +956,7 @@ public boolean loadExisting() {
             edgeCount = edges.getHeader(1);
 
             // geometry
-            maxGeoRef = edges.getHeader(0);
+            maxGeoRef = wayGeometry.getHeader(0);
             initialized = true;
             return true;
         }

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -148,7 +148,7 @@ public void testDirectedGraph2() {
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
         // PrepareTowerNodesShortcutsTest.printEdges(g);
-        assertEquals(old + 13, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 21, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(0, 10);
         assertEquals(10, p.distance(), 1e-6);
@@ -250,7 +250,7 @@ public void testRoundaboutUnpacking() {
         int old = g.getAllEdges().maxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
-        assertEquals(old + 33, g.getAllEdges().maxId());
+        assertEquals(old + 25, g.getAllEdges().maxId());
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: core/src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -455,6 +455,8 @@ public GHResponse route(GHRequest request) {
             rsp.addError(new IllegalArgumentException("Cannot find point 1: " + request.from()));
         if (to < 0)
             rsp.addError(new IllegalArgumentException("Cannot find point 2: " + request.to()));
+        if(from == to)
+            rsp.addError(new IllegalArgumentException("Point 1 is equal to point 2"));
 
         sw = new StopWatch().start();
         RoutingAlgorithm algo = null;

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -101,7 +101,7 @@ public String get(String key) {
 
     public void putCurrentVersions() {
         put("nodes.version", Constants.VERSION_NODE);
-        put("edges.version", Constants.VERSION_NODE);
+        put("edges.version", Constants.VERSION_EDGE);
         put("geometry.version", Constants.VERSION_GEOMETRY);
         put("locationIndex.version", Constants.VERSION_LOCATION_IDX);
     }
@@ -114,10 +114,10 @@ public String versionsToString() {
     }
 
     public boolean checkVersions(boolean silent) {
-        if (!check("edges", Constants.VERSION_EDGE, silent))
-            return false;
         if (!check("nodes", Constants.VERSION_NODE, silent))
             return false;
+        if (!check("edges", Constants.VERSION_EDGE, silent))
+            return false;
         if (!check("geometry", Constants.VERSION_GEOMETRY, silent))
             return false;
         if (!check("locationIndex", Constants.VERSION_LOCATION_IDX, silent))

File: core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -117,7 +117,7 @@ public void testMoreComplexGraph() {
         int old = g.getAllEdges().maxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
-        assertEquals(old + 8, g.getAllEdges().maxId());
+        assertEquals(old + 9, g.getAllEdges().maxId());
     }
 
     @Test
@@ -148,7 +148,7 @@ public void testDirectedGraph2() {
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
         // PrepareTowerNodesShortcutsTest.printEdges(g);
-        assertEquals(old + 15, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 19, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
 
         Path p = algo.calcPath(0, 10);
@@ -251,7 +251,7 @@ public void testRoundaboutUnpacking() {
         int old = g.getAllEdges().maxId();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
-        assertEquals(old + 25, g.getAllEdges().maxId());
+        assertEquals(old + 24, g.getAllEdges().maxId());
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: core/src/main/java/com/graphhopper/coll/GHSortedCollection.java
Patch:
@@ -45,6 +45,7 @@ public GHSortedCollection(int size) {
     }
 
     public void clear() {
+        size = 0;
         map.clear();
     }
 

File: android/src/com/graphhopper/android/MainActivity.java
Patch:
@@ -373,14 +373,13 @@ void loadMap() {
     }
 
     void prepareGraph() {
-        logUser("loading graph (" + Constants.VERSION + "|" + Constants.VERSION_FILE
-                + ") ... ");
+        logUser("loading graph (" + Constants.VERSION + "|" + Constants.VERSION + ") ... ");
         new GHAsyncTask<Void, Void, Path>() {
             protected Path saveDoInBackground(Void... v) throws Exception {
                 GraphHopper tmpHopp = new GraphHopper().forMobile();
                 tmpHopp.chShortcuts(true, true);
                 tmpHopp.load(mapsFolder + currentArea);
-                log("found graph with " + tmpHopp.graph().nodes() + " nodes");
+                log("found graph with " + tmpHopp.graph().nodes() + " nodes.");
                 hopper = tmpHopp;
                 return null;
             }

File: core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -39,7 +39,6 @@
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeSkipIterator;
-import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.StopWatch;
 import java.util.HashMap;

File: core/src/main/java/com/graphhopper/storage/StorableProperties.java
Patch:
@@ -99,7 +99,7 @@ public String get(String key) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 
-    public void saveCurrentVersions() {
+    public void putCurrentVersions() {
         put("nodes.version", Constants.VERSION_NODE);
         put("edges.version", Constants.VERSION_NODE);
         put("geometry.version", Constants.VERSION_GEOMETRY);

File: core/src/test/java/com/graphhopper/storage/StorablePropertiesTest.java
Patch:
@@ -30,7 +30,7 @@ public class StorablePropertiesTest {
     @Test
     public void testVersionCheck() {
         StorableProperties instance = new StorableProperties(new RAMDirectory("", false), "prop");
-        instance.saveCurrentVersions();
+        instance.putCurrentVersions();
         assertTrue(instance.checkVersions(true));
 
         instance.put("nodes.version", 0);

File: core/src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -68,9 +68,7 @@ else if (file.getAbsolutePath().endsWith(".zip"))
         return fi;
     }
 
-    public void osm2Graph(File osmXmlFile) throws IOException {
-        logger.info("using " + helper.getStorageInfo(graphStorage) + ", accepts:"
-                + helper.acceptWay() + ", memory:" + Helper.memInfo());
+    public void osm2Graph(File osmXmlFile) throws IOException {        
         helper.preProcess(createInputStream(osmXmlFile));
         writeOsm2Graph(createInputStream(osmXmlFile));
     }

File: core/src/main/java/com/graphhopper/storage/index/Location2NodesNtree.java
Patch:
@@ -85,7 +85,7 @@ public class Location2NodesNtree implements Location2IDIndex {
     public Location2NodesNtree(Graph g, Directory dir) {
         MAGIC_INT = Integer.MAX_VALUE / 22316;
         this.graph = g;
-        dataAccess = dir.findCreate("spatialNIndex");
+        dataAccess = dir.findCreate("locationIndex");
         minResolutionInMeter(500);
     }
 

File: core/src/test/java/com/graphhopper/GraphHopperTest.java
Patch:
@@ -82,7 +82,7 @@ public void testFootAndCar() throws IOException {
 
         FootFlagEncoder footEnc = new FootFlagEncoder();
         EdgePropertyEncoder carEnc = new CarFlagEncoder();
-        
+
         // A to D
         GHResponse res = instance.route(new GHRequest(11.1, 50, 11.3, 51).vehicle(carEnc));
         assertTrue(res.found());

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -27,7 +27,7 @@
  * @author Peter Karich
  */
 public class FootFlagEncoder extends AbstractFlagEncoder {
-
+    
     private final Set<String> saveHighwayTags = new HashSet<String>() {
         {
             add("footway");

File: core/src/test/java/com/graphhopper/routing/DijkstraTest.java
Patch:
@@ -28,7 +28,7 @@
  *
  * @author Peter Karich
  */
-public class DijkstraSimpleTest extends AbstractRoutingAlgorithmTester {
+public class DijkstraTest extends AbstractRoutingAlgorithmTester {
 
     @Override
     public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final EdgePropertyEncoder encoder) {

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -18,15 +18,13 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.ch.PrepareContractionHierarchies;
 import com.graphhopper.routing.util.AlgorithmPreparation;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EdgePropertyEncoder;
 import com.graphhopper.routing.util.NoOpAlgorithmPreparation;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
-import com.graphhopper.storage.LevelGraph;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.Helper;
 import static org.junit.Assert.*;

File: core/src/main/java/com/graphhopper/util/Constants.java
Patch:
@@ -56,7 +56,7 @@ public class Constants {
      * The file version is independent of the real world version. E.g. to make
      * major version jumps without the need to change the file version.
      */
-    public static final int VERSION_FILE = 6;
+    public static final int VERSION_FILE = 7;
     /**
      * The version without the snapshot string
      */

File: core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -20,7 +20,6 @@
 
 import com.graphhopper.routing.AbstractRoutingAlgorithmTester;
 import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;

File: core/src/main/java/com/graphhopper/util/Measurement.java
Patch:
@@ -64,7 +64,7 @@ void start(CmdArgs args) {
 
         String propLocation = args.get("measurement.location", "");
         if (Helper.isEmpty(propLocation))
-            propLocation = "measurement" + new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss").format(new Date()) + ".properties";
+            propLocation = "measurement" + new SimpleDateFormat("yyyy-MM-dd_HH_mm_ss").format(new Date()) + ".properties";
 
         long seed = args.getLong("measurement.seed", 123);
         Random rand = new Random(seed);

File: core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
Patch:
@@ -18,13 +18,15 @@
  */
 package com.graphhopper.routing;
 
+import com.graphhopper.routing.ch.PrepareContractionHierarchies;
 import com.graphhopper.routing.util.AlgorithmPreparation;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.NoOpAlgorithmPreparation;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
+import com.graphhopper.storage.LevelGraph;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.Helper;
 import static org.junit.Assert.*;
@@ -89,5 +91,5 @@ public void testDifferentEdgeFilter() {
         });        
         p = algo.calcPath(4, 6);
         assertEquals(Helper.createTList(4, 5, 6), p.calcNodes());
-    }
+    }       
 }

File: core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
Patch:
@@ -35,7 +35,7 @@ public class FootFlagEncoder extends AbstractFlagEncoder {
             add("steps");
             add("pedestrian");
             add("foot");
-            add("living_street");            
+            add("living_street");
             add("track");
         }
     };
@@ -66,14 +66,14 @@ public Integer getSpeed(String string) {
     }
 
     /**
-     * Separate ways for pedestrians.
+     * Some ways are okay but not separate for pedestrians.
      */
     public boolean isAllowedHighway(String highwayValue) {
         return allowedHighwayTags.contains(highwayValue);
     }
 
     /**
-     * Some ways are okay but not separate for pedestrians.
+     * Separate ways for pedestrians.
      */
     public boolean isSaveHighway(String highwayValue) {
         return saveHighwayTags.contains(highwayValue);

File: src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -152,9 +152,9 @@ public void testDirectedGraph() {
         // PrepareTowerNodesShortcutsTest.printEdges(g);
         assertEquals(old + 2, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
-        Path p = algo.calcPath(4, 2);
+        Path p = algo.calcPath(4, 2);        
         assertEquals(3, p.distance(), 1e-6);
-        assertEquals(Helper.createTList(4, 3, 5, 2), p.calcNodes());
+        assertEquals(Helper.createTList(4, 3, 5, 2), p.calcNodes());        
     }
 
     @Test

File: src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -268,7 +268,7 @@ public void testRoundaboutUnpacking() {
         int old = GHUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
-        assertEquals(old + 20, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 21, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -31,7 +31,6 @@
 import com.graphhopper.routing.util.ShortestCalc;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.index.Location2IDIndex;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.EdgeIterator;
@@ -157,8 +156,6 @@ public MiniGraphUI(OSMReader reader, boolean debug) {
                         }
                         double lat2 = graph.getLatitude(nodeId);
                         double lon2 = graph.getLongitude(nodeId);
-                        if (lat2 <= 0 || lon2 <= 0)
-                            logger.info("ERROR " + nodeId + " " + iter.distance() + " " + lat2 + "," + lon2);
                         mg.plotEdge(g2, lat, lon, lat2, lon2);
                     }
                 }

File: src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -148,16 +148,16 @@ void fillEdges(EdgeEntry curr, PriorityQueue<EdgeEntry> prioQueue,
     }
 
     @Override
-    protected void updateShortest(EdgeEntry shortestDE, int currLoc) {
+    protected void updateShortest(EdgeEntry shortestEE, int currLoc) {
         EdgeEntry entryOther = shortestWeightMapOther.get(currLoc);
         if (entryOther == null)
             return;
 
         // update μ
-        double newShortest = shortestDE.weight + entryOther.weight;
+        double newShortest = shortestEE.weight + entryOther.weight;
         if (newShortest < shortest.weight()) {
             shortest.switchToFrom(shortestWeightMapFrom == shortestWeightMapOther);
-            shortest.edgeEntry = shortestDE;
+            shortest.edgeEntry(shortestEE);
             shortest.edgeTo = entryOther;
             shortest.weight(newShortest);
         }

File: src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -184,11 +184,11 @@ protected Graph createTestGraph() {
         assertEquals(p.toString(), 4, p.calcNodes().size());
     }
 
-    @Test public void testCalcIfNoWay() {
+    @Test public void testCalcIfEmptyWay() {
         Graph graph = createTestGraph();
         Path p = prepareGraph(graph).createAlgo().calcPath(0, 0);
-        assertEquals(p.toString(), 0, p.distance(), 1e-4);
         assertEquals(p.toString(), 0, p.calcNodes().size());
+        assertEquals(p.toString(), 0, p.distance(), 1e-4);        
     }
 
     @Test public void testCalcIf1EdgeAway() {

File: src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -268,7 +268,7 @@ public void testRoundaboutUnpacking() {
         int old = GHUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
-        assertEquals(old + 21, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 20, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -237,7 +237,6 @@ else if (new File(graphHopperFile + ".osm").exists())
             }
 
             args.put("osmreader.type", acceptWay.toString());
-
             if (chUsage) {
                 args.put("osmreader.levelgraph", "true");
                 args.put("osmreader.chShortcuts", chFast ? "fastest" : "shortest");

File: src/main/java/com/graphhopper/routing/util/FastestCalc.java
Patch:
@@ -24,7 +24,7 @@
  * @author Peter Karich
  */
 public class FastestCalc implements WeightCalculation {
-    
+
     private final VehicleEncoder encoder;
     private final double maxSpeed;
 
@@ -35,7 +35,7 @@ public FastestCalc(VehicleEncoder encoder) {
 
     @Override
     public double getMinWeight(double distance) {
-        return distance * 3.6 / maxSpeed;
+        return distance / maxSpeed;
     }
 
     @Override

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -247,7 +247,7 @@ private void cleanUp() {
         preparation.doWork();
         int n = graphStorage.nodes();
         logger.info("edges: " + graphStorage.getAllEdges().maxId()
-                + "nodes " + n + ", there were " + preparation.subNetworks()
+                + ", nodes " + n + ", there were " + preparation.subNetworks()
                 + " subnetworks. removed them => " + (prev - n)
                 + " less nodes. Remaining subnetworks:" + preparation.findSubnetworks().size());
     }

File: src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -261,7 +261,7 @@ void contractNodes() {
                     sortedNodes.update(nn, tmpOld, neighborWn.priority);
 
                 if (removesHigher2LowerEdges)
-                    ((LevelGraphStorage) g).disconnect(iter, EdgeSkipIterator.NO_EDGE, false);
+                    ((LevelGraphStorage) g).disconnect(iter, EdgeIterator.NO_EDGE, false);
             }
         }
         logger.info("new shortcuts " + newShortcuts + ", " + prepareWeightCalc

File: src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -126,7 +126,7 @@ public int disconnect(EdgeIterator iter, long prevEdgePointer, boolean sameDirec
         if (sameDirection)
             internalEdgeDisconnect(iter.edge(), prevEdgePointer, iter.baseNode(), iter.adjNode());
         else {
-            // prevEdgePointer belongs to baseNode ... but now we need it for node()!
+            // prevEdgePointer belongs to baseNode ... but now we need it for adjNode()!
             EdgeSkipIterator tmpIter = getEdges(iter.adjNode());
             int tmpPrevEdge = EdgeIterator.NO_EDGE;
             boolean found = false;

File: src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java
Patch:
@@ -119,20 +119,20 @@ public void testDisconnectEdge() {
         iter.next();
         assertEquals(2, iter.adjNode());
         assertEquals(1, GHUtility.count(g.getEdges(2, carOutFilter)));
-        g.disconnect(iter, EdgeSkipIterator.NO_EDGE, false);
+        g.disconnect(iter, EdgeIterator.NO_EDGE, false);
         assertEquals(0, GHUtility.count(g.getEdges(2, carOutFilter)));
 
         // even directed ways change!
         assertTrue(iter.next());
         assertEquals(0, iter.adjNode());
         assertEquals(1, GHUtility.count(g.getEdges(0, carInFilter)));
-        g.disconnect(iter, EdgeSkipIterator.NO_EDGE, false);
+        g.disconnect(iter, EdgeIterator.NO_EDGE, false);
         assertEquals(0, GHUtility.count(g.getEdges(0, carInFilter)));
 
         iter.next();
         assertEquals(3, iter.adjNode());
         assertEquals(1, GHUtility.count(g.getEdges(3, carOutFilter)));
-        g.disconnect(iter, EdgeSkipIterator.NO_EDGE, false);
+        g.disconnect(iter, EdgeIterator.NO_EDGE, false);
         assertEquals(0, GHUtility.count(g.getEdges(3, carOutFilter)));
     }
 }

File: src/main/java/com/graphhopper/coll/BigLongIntMap.java
Patch:
@@ -97,7 +97,7 @@ public void clear() {
      */
     @Override
     public int memoryUsage() {
-        return Math.round(capacity() * (12f + 1) / Helper.MB);
+        return Math.round(capacity() * (8 + 4 + 1) / Helper.MB);
     }
 
     @Override

File: src/main/java/com/graphhopper/search/NameIndex.java
Patch:
@@ -29,7 +29,8 @@
  */
 public class NameIndex implements Storable<NameIndex> {
 
-    private int nameCount;
+    private static final int START_POINTER = 1;
+    private int nameCount = START_POINTER;
     private DataAccess names;
 
     public NameIndex(Directory dir) {
@@ -62,7 +63,7 @@ public int put(String name) {
             throw new RuntimeException(ex);
         }
 
-        int offset = 0;
+        int offset = START_POINTER;
         for (int i = 0; i < nameCount; i++) {
             int size = names.getInt(offset);
             byte[] bytes = new byte[4 * size];

File: src/main/java/com/graphhopper/util/EdgeIterator.java
Patch:
@@ -68,9 +68,9 @@ public interface EdgeIterator {
     int adjNode();
 
     /**
-     * For OSM a way is often a curve not just a straight line and so nodes
-     * between tower nodes are necessary to have a more exact geometry (for
-     * drawing). Those nodes are called pillar nodes
+     * For OSM a way is often a curve not just a straight line and nodes between
+     * tower nodes are necessary to have a more exact geometry. Those nodes are
+     * called pillar nodes and will be returned in this method.
      *
      * @return pillar nodes
      */

File: src/main/java/com/graphhopper/util/WayList.java
Patch:
@@ -30,8 +30,8 @@
 public class WayList {
 
     public static final int CONTINUE_ON_STREET = 0;
-    public static final int TURN_LEFT = 1;
-    public static final int TURN_RIGHT = 2;
+    public static final int TURN_LEFT = -1;
+    public static final int TURN_RIGHT = 1;
     private int[] indications;
     private String[] names;
     private int size = 0;

File: src/test/java/com/graphhopper/search/NameIndexTest.java
Patch:
@@ -39,5 +39,7 @@ public void testPut() {
 
         result = instance.put("testing");
         assertEquals("testing", instance.get(result));
+        
+        assertEquals("", instance.get(0));
     }
 }

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -26,7 +26,6 @@
 import com.graphhopper.storage.index.Location2IDIndex;
 import com.graphhopper.storage.LevelGraph;
 import com.graphhopper.storage.LevelGraphStorage;
-import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.shapes.BBox;
 import static com.graphhopper.routing.util.NoOpAlgorithmPreparation.*;
@@ -147,8 +146,8 @@ public void runShortestPathPerf(int runs, AlgorithmPreparation prepare) throws E
 
     void testIndex() {
         TestAlgoCollector testCollector = new TestAlgoCollector("testIndex");
-
-        testCollector.queryIndex(unterfrankenGraph, idx, 50.081241, 10.124366, 2.2);
+        testCollector.queryIndex(unterfrankenGraph, idx, 50.081241, 10.124366, 14.0);
+        testCollector.queryIndex(unterfrankenGraph, idx, 50.081146, 10.124496, 0.0);
         testCollector.queryIndex(unterfrankenGraph, idx, 49.682000, 9.943000, 602.2);
         testCollector.queryIndex(unterfrankenGraph, idx, 50.079341, 10.167925, 122.6);
 

File: src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -73,7 +73,7 @@ void queryIndex(Graph g, Location2IDIndex idx, double lat, double lon, double ex
         double dist = new DistanceCalc().calcDist(lat, lon, foundLat, foundLon);
         if (Math.abs(dist - expectedDist) > .1)
             errors.add("queried lat,lon=" + (float) lat + "," + (float) lon
-                    + ", but was " + (float) foundLat + "," + (float) foundLon
+                    + " (found: " + (float) foundLat + "," + (float) foundLon + ")"
                     + "\n   expected distance:" + expectedDist + ", but was:" + dist);
     }
 

File: src/main/java/com/graphhopper/geohash/LinearKeyAlgo.java
Patch:
@@ -21,7 +21,7 @@
 import com.graphhopper.util.shapes.CoordTrig;
 
 /**
- * This class maps lat,lon in an array fashion unlike SpatialKeyAlgo.
+ * This class maps lat,lon to a (tile)number unlike SpatialKeyAlgo.
  *
  * @author Peter Karich,
  */
@@ -93,7 +93,8 @@ public final long encode(double lat, double lon) {
     }
 
     /**
-     * This method returns latitude and longitude via latLon - calculated from specified linearKey
+     * This method returns latitude and longitude via latLon - calculated from
+     * specified linearKey
      *
      * @param linearKey is the input
      */

File: src/main/java/com/graphhopper/storage/index/Location2IDFullWithEdgesIndex.java
Patch:
@@ -93,6 +93,7 @@ public Location2IDIndex prepareIndex() {
                     double distEdge = calc.calcDenormalizedDist(calc.calcNormalizedEdgeDistance(queryLat, queryLon,
                             fromLat, fromLon, toLat, toLon));
                     if (distEdge < foundDist) {
+                        id = fromNode;
                         if (fromDist > calc.calcDist(toLat, toLon, queryLat, queryLon))
                             id = toNode;
                         foundDist = distEdge;

File: src/main/java/com/graphhopper/storage/index/Location2NodesNtreeLG.java
Patch:
@@ -28,6 +28,8 @@
 import com.graphhopper.util.PointList;
 
 /**
+ * As the graph is filled and prepared before the index is created we need to
+ * ignore the introduced shortcuts e.g. for calculating closest edges.
  *
  * @author Peter Karich
  */

File: src/main/java/com/graphhopper/storage/index/Location2NodesNtreeLG.java
Patch:
@@ -40,6 +40,7 @@ public class Location2NodesNtreeLG extends Location2NodesNtree {
 
     public Location2NodesNtreeLG(LevelGraph g, Directory dir) {
         super(g, dir);
+        lg = g;
     }
 
     @Override

File: src/main/java/com/graphhopper/util/DistancePlaneProjection.java
Patch:
@@ -41,8 +41,8 @@ public class DistancePlaneProjection extends DistanceCalc {
     public double calcDist(double fromLat, double fromLon, double toLat, double toLon) {
         double dLat = toRadians(toLat - fromLat);
         double dLon = toRadians(toLon - fromLon);
-        double left = cos(toRadians((fromLat + toLat) / 2)) * dLon;
-        double normedDist = dLat * dLat + left * left;
+        double tmp = cos(toRadians((fromLat + toLat) / 2)) * dLon;
+        double normedDist = dLat * dLat + tmp * tmp;
         return R * sqrt(normedDist);
     }
 
@@ -67,6 +67,6 @@ public double calcNormalizedDist(double fromLat, double fromLon, double toLat, d
 
     @Override
     public String toString() {
-        return "APPROX";
+        return "PLANE_PROJ";
     }
 }

File: src/test/java/com/graphhopper/util/HelperTest.java
Patch:
@@ -43,7 +43,7 @@ public void tearDown() {
     @Test
     public void testVERSION() throws Exception {
         // assertTrue(Helper.SNAPSHOT);
-        assertNotSame("0.0", Helper.VERSION);
+        assertNotSame("0.0", Helper.VERSION);        
     }
 
     @Test

File: src/main/java/com/graphhopper/coll/MyBitSet.java
Patch:
@@ -41,6 +41,7 @@ public interface MyBitSet {
 
     /**
      * Searches for a greater or equal entry and returns it.
+     *
      * @return -1 if nothing found
      */
     int next(int index);

File: src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -117,7 +117,7 @@ public EdgeSkipIteratorImpl(int edge, int node, EdgeFilter filter) {
     public int disconnect(EdgeIterator iter, long prevEdgePointer, boolean sameDirection) {
         // open up package protected API for now ...
         if (sameDirection)
-            internalEdgeDisconnect(iter.edge(), prevEdgePointer, iter.baseNode(), iter.adjNode(), false);
+            internalEdgeDisconnect(iter.edge(), prevEdgePointer, iter.baseNode(), iter.adjNode());
         else {
             // prevEdgePointer belongs to baseNode ... but now we need it for node()!
             EdgeSkipIterator tmpIter = getEdges(iter.adjNode());
@@ -132,7 +132,7 @@ public int disconnect(EdgeIterator iter, long prevEdgePointer, boolean sameDirec
                 tmpPrevEdge = tmpIter.edge();
             }
             if (found) 
-                internalEdgeDisconnect(iter.edge(), (long) tmpPrevEdge * edgeEntrySize, iter.adjNode(), iter.baseNode(), false);
+                internalEdgeDisconnect(iter.edge(), (long) tmpPrevEdge * edgeEntrySize, iter.adjNode(), iter.baseNode());
         }
         return iter.edge();
     }

File: src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -139,7 +139,6 @@ public static Graph shuffle(Graph g, Graph sortedGraph) {
         return createSortedGraph(g, sortedGraph, list);
     }
 
-
     /**
      * Sorts the graph according to depth-first search traversal. Other
      * traversals have either no significant difference (bfs) for querying or
@@ -151,7 +150,7 @@ public static Graph sortDFS(Graph g, Graph sortedGraph) {
         list.fill(0, nodes, -1);
         final MyBitSetImpl bitset = new MyBitSetImpl(nodes);
         final IntRef ref = new IntRef(0);
-        for (int startNode = 0; startNode >= 0 && startNode < nodes; 
+        for (int startNode = 0; startNode >= 0 && startNode < nodes;
                 startNode = bitset.nextClear(startNode + 1)) {
             new XFirstSearch() {
                 @Override protected MyBitSet createBitSet(int size) {
@@ -269,6 +268,7 @@ public static int getToNode(Graph g, int edge, int endNode) {
         }
         return endNode;
     }
+
     public static final EdgeSkipIterator EMPTY = new EdgeSkipIterator() {
         @Override public boolean isShortcut() {
             return false;

File: src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -19,7 +19,6 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.reader.OSMReader;
-import com.graphhopper.routing.util.AcceptWay;
 import com.graphhopper.routing.util.AlgorithmPreparation;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.RoutingAlgorithmSpecialAreaTests;

File: src/test/java/com/graphhopper/storage/AbstractGraphTester.java
Patch:
@@ -543,7 +543,7 @@ public void testSimpleDelete3() {
         assertEquals(1, GHUtility.count(g.getEdges(getIdOf(g, 8))));
         assertEquals(1, GHUtility.count(g.getEdges(getIdOf(g, 11))));
     }
-
+        
     @Test
     public void testDeleteAndOptimize() {
         Graph g = createGraph();

File: src/test/java/com/graphhopper/storage/GraphStorageTest.java
Patch:
@@ -116,7 +116,7 @@ public void internalDisconnect() {
         assertEquals(Arrays.asList(1, 3), GHUtility.neighbors(g.getEdges(0)));
         assertEquals(Arrays.asList(0, 2), GHUtility.neighbors(g.getEdges(1)));
         // remove edge "1-2" but only from 1
-        g.internalEdgeDisconnect(iter1.edge(), (long) iter0.edge() * g.edgeEntrySize, iter1.baseNode(), iter1.adjNode(), true);
+        g.internalEdgeDisconnect(iter1.edge(), (long) iter0.edge() * g.edgeEntrySize, iter1.baseNode(), iter1.adjNode());
         assertEquals(Arrays.asList(0), GHUtility.neighbors(g.getEdges(1)));
         // let 0 unchanged -> no side effects
         assertEquals(Arrays.asList(1, 3), GHUtility.neighbors(g.getEdges(0)));

File: src/main/java/com/graphhopper/util/XFirstSearch.java
Patch:
@@ -63,7 +63,7 @@ public void start(Graph g, int startNode, boolean depthFirst) {
                 EdgeIterator iter = getEdges(g, current);
                 while (iter.next()) {
                     int connectedId = iter.adjNode();
-                    if (checkConnected(iter) && !visited.contains(connectedId)) {
+                    if (checkAdjacent(iter) && !visited.contains(connectedId)) {
                         visited.add(connectedId);
                         coll.push(connectedId);
                     }
@@ -80,7 +80,7 @@ protected boolean goFurther(int nodeId) {
         return true;
     }
 
-    protected boolean checkConnected(EdgeIterator iter) {
+    protected boolean checkAdjacent(EdgeIterator iter) {
         return true;
     }
 

File: src/test/java/com/graphhopper/storage/index/AbstractLocation2IDIndexTester.java
Patch:
@@ -56,7 +56,7 @@ public void testSimpleGraph() {
         Graph g = createGraph();
         initSimpleGraph(g);
 
-        Location2IDIndex idx = createIndex(g, 8);        
+        Location2IDIndex idx = createIndex(g, 8);
         assertEquals(4, idx.findID(5, 2));
         assertEquals(3, idx.findID(1.5, 2));
         assertEquals(0, idx.findID(-1, -1));

File: src/main/java/com/graphhopper/routing/util/AllEdgesIterator.java
Patch:
@@ -25,5 +25,5 @@
  */
 public interface AllEdgesIterator extends EdgeIterator {
 
-    int count();
+    int maxId();
 }

File: src/main/java/com/graphhopper/routing/util/EdgesFilterAcceptAll.java
Patch:
@@ -21,9 +21,11 @@
 import com.graphhopper.util.EdgeIterator;
 
 /**
+ * Accepts every edge.
+ *
  * @author Peter Karich
  */
-public class AllEdgesFilter implements EdgeFilter {
+public class EdgesFilterAcceptAll implements EdgeFilter {
 
     @Override public boolean accept(EdgeIterator iter) {
         return true;

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -251,7 +251,7 @@ void flush() {
 
     void createIndex() {
         // int precisionInMeter = 500 * 500;
-        int precisionInMeter = 2000;
+        int precisionInMeter = 1000;
         location2IDIndex().prepareIndex(precisionInMeter);
     }
 

File: src/main/java/com/graphhopper/reader/OSMReaderHelperDoubleParse.java
Patch:
@@ -188,7 +188,7 @@ private int handlePillarNode(int tmpNode, long osmId, PointList pointList, boole
     @Override
     void startWayProcessing() {
         LoggerFactory.getLogger(getClass()).info("finished node processing. osmIdMap:"
-                + osmIdToIndexMap.capacity() * (12f + 1) / Helper.MB + ", " + Helper.getMemInfo());
+                + (int) (osmIdToIndexMap.capacity() * (12f + 1) / Helper.MB) + "MB, " + Helper.getMemInfo());
     }
 
     @Override

File: src/test/java/com/graphhopper/storage/index/AbstractLocation2IDIndexTester.java
Patch:
@@ -56,7 +56,7 @@ public void testSimpleGraph() {
         Graph g = createGraph();
         initSimpleGraph(g);
 
-        Location2IDIndex idx = createIndex(g, 8);
+        Location2IDIndex idx = createIndex(g, 8);        
         assertEquals(4, idx.findID(5, 2));
         assertEquals(3, idx.findID(1.5, 2));
         assertEquals(0, idx.findID(-1, -1));
@@ -70,7 +70,7 @@ public void testSimpleGraph() {
 
     public void initSimpleGraph(Graph g) {
         //  6 |       4
-        //  5 |     
+        //  5 |           
         //    |     6
         //  4 |              5
         //  3 |

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -193,7 +193,7 @@ else if (new File(graphHopperFile + ".osm").exists())
             graph = storage;
             initIndex(dir);
         } else if (tmpGHFile.endsWith(".osm") || tmpGHFile.endsWith(".xml")) {
-            if (ghLocation.isEmpty())
+            if (Helper.isEmpty(ghLocation))
                 ghLocation = Helper.pruneFileEnd(graphHopperFile) + "-gh";
             CmdArgs args = new CmdArgs().put("osmreader.osm", graphHopperFile).
                     put("osmreader.graph-location", ghLocation);

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -97,7 +97,7 @@ public static void main(String[] strs) throws Exception {
      * reallocation (default is 5mio)
      */
     public static OSMReader osm2Graph(final CmdArgs args) throws IOException {
-        if (!args.get("config", "").isEmpty()) {
+        if (!Helper.isEmpty(args.get("config", ""))) {
             CmdArgs tmp = CmdArgs.readFromConfig(args.get("config", ""));
             // overwrite command line configuration
             args.merge(tmp);
@@ -375,7 +375,7 @@ public AlgorithmPreparation preparation() {
      * @param chShortcuts fastest, shortest or false
      */
     public OSMReader setCHShortcuts(String chShortcuts) {
-        if (chShortcuts.isEmpty() || "no".equals(chShortcuts) || "false".equals(chShortcuts))
+        if (Helper.isEmpty(chShortcuts) || "no".equals(chShortcuts) || "false".equals(chShortcuts))
             return this;
 
         VehicleEncoder encoder = new CarFlagEncoder();

File: src/main/java/com/graphhopper/reader/OSMReaderHelper.java
Patch:
@@ -23,6 +23,7 @@
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.Helper;
 import com.graphhopper.util.PointList;
 import gnu.trove.list.TLongList;
 import gnu.trove.list.array.TLongArrayList;
@@ -164,7 +165,7 @@ boolean parseWay(XMLStreamReader sReader) throws XMLStreamException {
                     }
                 } else if ("tag".equals(sReader.getLocalName())) {
                     String tagKey = sReader.getAttributeValue(null, "k");
-                    if (tagKey != null && !tagKey.isEmpty()) {
+                    if (tagKey != null && !Helper.isEmpty(tagKey)) {
                         String tagValue = sReader.getAttributeValue(null, "v");
                         osmProperties.put(tagKey, tagValue);
                     }

File: src/main/java/com/graphhopper/reader/PrinctonReader.java
Patch:
@@ -60,7 +60,7 @@ public void read() {
                 double dist = -1;
                 int counter = 0;
                 for (int j = 0; j < args.length; j++) {
-                    if (args[j].isEmpty())
+                    if (Helper.isEmpty(args[j]))
                         continue;
 
                     if (counter == 0)

File: src/main/java/com/graphhopper/routing/util/AcceptWay.java
Patch:
@@ -18,6 +18,7 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.util.Helper;
 import gnu.trove.list.array.TLongArrayList;
 import java.util.Map;
 
@@ -162,7 +163,7 @@ public boolean handleTags(Map<String, Object> outProperties, Map<String, Object>
      * @return the speed in km/h
      */
     static int parseSpeed(String str) {
-        if (str == null || str.isEmpty())
+        if (Helper.isEmpty(str))
             return -1;
         int kmInteger = str.indexOf("km");
         if (kmInteger > 0)

File: src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -40,7 +40,7 @@ public abstract class AbstractDataAccess implements DataAccess {
 
     public AbstractDataAccess(String name, String location) {
         this.name = name;
-        if (!location.isEmpty() && !location.endsWith("/"))
+        if (!Helper.isEmpty(location) && !location.endsWith("/"))
             throw new IllegalArgumentException("Create DataAccess object via its corresponding Directory!");
         this.location = location;
     }
@@ -157,7 +157,7 @@ public void rename(String newName) {
     }
 
     protected boolean checkBeforeRename(String newName) {
-        if (newName == null || newName.isEmpty())
+        if (Helper.isEmpty(newName))
             throw new IllegalArgumentException("newName mustn't be empty!");
         if (newName.equals(name))
             return false;

File: src/main/java/com/graphhopper/storage/AbstractDirectory.java
Patch:
@@ -35,7 +35,7 @@ public abstract class AbstractDirectory implements Directory {
     protected final String location;
 
     public AbstractDirectory(String _location) {
-        if (_location == null || _location.isEmpty())
+        if (Helper.isEmpty(_location))
             _location = new File("").getAbsolutePath();
         if (!_location.endsWith("/"))
             _location += "/";

File: src/main/java/com/graphhopper/util/StopWatch.java
Patch:
@@ -64,7 +64,7 @@ public long getTime() {
     @Override
     public String toString() {
         String str = "";
-        if (!name.isEmpty())
+        if (!Helper.isEmpty(name))
             str += name + " ";
 
         return str + "time:" + getSeconds();

File: src/main/java/com/graphhopper/util/shapes/GHPlace.java
Patch:
@@ -18,6 +18,8 @@
  */
 package com.graphhopper.util.shapes;
 
+import com.graphhopper.util.Helper;
+
 /**
  * Specifies a place by its coordinates, name and/or node id.
  *
@@ -69,7 +71,7 @@ public boolean isValidNodeId() {
     }
 
     public boolean isValidName() {
-        return !name.isEmpty();
+        return !Helper.isEmpty(name);
     }
 
     public boolean isValidPoint() {

File: src/test/java/com/graphhopper/util/DouglasPeuckerTest.java
Patch:
@@ -38,7 +38,7 @@ public class DouglasPeuckerTest {
 
     void parse(PointList list, String str) {
         for (String latlon : str.split("\\[")) {
-            if (latlon.trim().isEmpty())
+            if (latlon.trim().length() == 0)
                 continue;
 
             String ll[] = latlon.split(",");

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -260,7 +260,7 @@ else if (request.algorithm().equals("astarbi"))
         if (simplify) {
             sw = new StopWatch().start();
             int orig = points.size();
-            int minPathPrecision = request.getHint("douglas.minprecision", 1);
+            double minPathPrecision = request.getHint("douglas.minprecision", 1d);
             new DouglasPeucker().maxDistance(minPathPrecision).simplify(points);
             debug += ", simplify (" + orig + "->" + points.size() + "):" + sw.stop().getSeconds() + "s";
         }

File: src/test/java/com/graphhopper/storage/index/AbstractLocation2IDIndexTester.java
Patch:
@@ -77,7 +77,7 @@ public void initSimpleGraph(Graph g) {
         //  2 |    1  
         //  1 |          3
         //  0 |    2      
-        // -1 | 0
+        // -1 | 0   
         // ---|-------------------
         //    |-2 -1 0 1 2 3 4
         //

File: src/main/java/com/graphhopper/coll/MyBitSet.java
Patch:
@@ -40,7 +40,8 @@ public interface MyBitSet {
     void ensureCapacity(int index);
 
     /**
-     * Searches for a bigger or equal entry and returns it.
+     * Searches for a greater or equal entry and returns it.
+     * @return -1 if nothing found
      */
     int next(int index);
 

File: src/main/java/com/graphhopper/routing/util/AllEdgesIterator.java
Patch:
@@ -16,7 +16,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.util;
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIterator;
 
 /**
  * @author Peter Karich

File: src/main/java/com/graphhopper/storage/Graph.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.storage;
 
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.util.AllEdgesIterator;
+import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.shapes.BBox;
 

File: src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -24,7 +24,7 @@
 import com.graphhopper.routing.util.AllEdgesFilter;
 import com.graphhopper.routing.util.CombinedEncoder;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.util.AllEdgesIterator;
+import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;

File: src/main/java/com/graphhopper/storage/LevelGraph.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.storage;
 
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.util.AllEdgesIterator;
+import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.util.EdgeSkipIterator;
 
 /**

File: src/main/java/com/graphhopper/util/XFirstSearch.java
Patch:
@@ -63,7 +63,7 @@ public void start(Graph g, int startNode, boolean depthFirst) {
                 EdgeIterator iter = getEdges(g, current);
                 while (iter.next()) {
                     int connectedId = iter.node();
-                    if (checkConnected(connectedId) && !visited.contains(connectedId)) {
+                    if (checkConnected(iter.edge()) && !visited.contains(connectedId)) {
                         visited.add(connectedId);
                         coll.push(connectedId);
                     }
@@ -80,7 +80,7 @@ protected boolean goFurther(int nodeId) {
         return true;
     }
 
-    protected boolean checkConnected(int to) {
+    protected boolean checkConnected(int edgeId) {
         return true;
     }
 

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -260,7 +260,8 @@ else if (request.algorithm().equals("astarbi"))
         if (simplify) {
             sw = new StopWatch().start();
             int orig = points.size();
-            new DouglasPeucker().maxDistance(request.minPathPrecision()).simplify(points);
+            int minPathPrecision = request.getHint("douglas.minprecision", 1);
+            new DouglasPeucker().maxDistance(minPathPrecision).simplify(points);
             debug += ", simplify (" + orig + "->" + points.size() + "):" + sw.stop().getSeconds() + "s";
         }
         return new GHResponse(points).distance(path.distance()).time(path.time()).debugInfo(debug);

File: src/test/java/com/graphhopper/reader/OSMReaderTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
 import java.io.File;
+import java.util.ArrayList;
 import java.util.Arrays;
 import org.junit.After;
 import static org.junit.Assert.*;
@@ -235,7 +236,7 @@ OSMReader preProcess(OSMReader osmreader, String file) {
 
         assertEquals(Arrays.asList(b, d), GHUtility.neighbors(graph.getEdges(a,
                 new DefaultEdgeFilter(carEncoder))));
-        assertEquals(Arrays.asList(), GHUtility.neighbors(graph.getEdges(c,
+        assertEquals(new ArrayList<Integer>(), GHUtility.neighbors(graph.getEdges(c,
                 carOutFilter)));
         assertEquals(Arrays.asList(a, c, d), GHUtility.neighbors(graph.getEdges(b,
                 new DefaultEdgeFilter(carEncoder))));

File: src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -62,7 +62,7 @@ public AStar approximation(boolean approx) {
 
     @Override public Path calcPath(int from, int to) {
         if (alreadyRun)
-            throw new IllegalStateException("Call clear before! But this class is not thread safe!");
+            throw new IllegalStateException("Create a new instance per call");
         alreadyRun = true;
         closedSet = new MyBitSetImpl(graph.nodes());
         TIntObjectMap<AStarEdge> map = new TIntObjectHashMap<AStarEdge>();

File: src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -153,8 +153,7 @@ public void initPath() {
 
     @Override public Path calcPath(int from, int to) {
         if (alreadyRun)
-            throw new IllegalStateException("Call clear before! But this class is not thread safe!");
-
+            throw new IllegalStateException("Create a new instance per call");
         alreadyRun = true;
         initFrom(from);
         initTo(to);

File: src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -37,7 +37,7 @@ public abstract class AbstractRoutingAlgorithm implements RoutingAlgorithm {
     protected WeightCalculation weightCalc;
     protected final EdgeFilter outEdgeFilter;
     protected final EdgeFilter inEdgeFilter;
-    protected final VehicleEncoder flagEncoder;    
+    protected final VehicleEncoder flagEncoder;
 
     public AbstractRoutingAlgorithm(Graph graph, VehicleEncoder encoder) {
         this.graph = graph;

File: src/main/java/com/graphhopper/routing/DijkstraBidirection.java
Patch:
@@ -96,8 +96,7 @@ DijkstraBidirection initTo(int to) {
 
     @Override public Path calcPath(int from, int to) {
         if (alreadyRun)
-            throw new IllegalStateException("Call clear before! But this class is not thread safe!");
-
+            throw new IllegalStateException("Create a new instance per call");
         alreadyRun = true;
         initPath();
         initFrom(from);

File: src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -91,8 +91,7 @@ public DijkstraBidirectionRef initTo(int to) {
 
     @Override public Path calcPath(int from, int to) {
         if (alreadyRun)
-            throw new IllegalStateException("Call clear before! But this class is not thread safe!");
-
+            throw new IllegalStateException("Create a new instance per call");
         alreadyRun = true;
         initPath();
         initFrom(from);

File: src/main/java/com/graphhopper/routing/AStar.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.graphhopper.coll.MyBitSet;
 import com.graphhopper.coll.MyBitSetImpl;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.DistanceCalc;
@@ -43,8 +44,8 @@ public class AStar extends AbstractRoutingAlgorithm {
     private boolean alreadyRun;
     private MyBitSet closedSet;
 
-    public AStar(Graph g) {
-        super(g);
+    public AStar(Graph g, VehicleEncoder encoder) {
+        super(g, encoder);
     }
 
     /**

File: src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.coll.MyBitSetImpl;
 import com.graphhopper.routing.AStar.AStarEdge;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistancePlaneProjection;
@@ -78,8 +79,8 @@ public class AStarBidirection extends AbstractRoutingAlgorithm {
     private CoordTrig toCoord;
     protected double approximationFactor;
 
-    public AStarBidirection(Graph graph) {
-        super(graph);
+    public AStarBidirection(Graph graph, VehicleEncoder encoder) {
+        super(graph, encoder);
         int nodes = Math.max(20, graph.nodes());
         initCollections(nodes);
         approximation(false);

File: src/main/java/com/graphhopper/routing/DijkstraBidirection.java
Patch:
@@ -22,6 +22,7 @@
 import com.graphhopper.coll.MyBitSet;
 import com.graphhopper.coll.MyBitSetImpl;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeWrapper;
@@ -60,8 +61,8 @@ public class DijkstraBidirection extends AbstractRoutingAlgorithm {
     private EdgeWrapper wrapperTo;
     private boolean alreadyRun;
 
-    public DijkstraBidirection(Graph graph) {
-        super(graph);
+    public DijkstraBidirection(Graph graph, VehicleEncoder encoder) {
+        super(graph, encoder);
         int locs = Math.max(20, graph.nodes());
         visitedFrom = new MyBitSetImpl(locs);
         openSetFrom = new IntDoubleBinHeap(locs / 10);

File: src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
Patch:
@@ -21,6 +21,7 @@
 import com.graphhopper.coll.MyBitSet;
 import com.graphhopper.coll.MyBitSetImpl;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
@@ -52,8 +53,8 @@ public class DijkstraBidirectionRef extends AbstractRoutingAlgorithm {
     protected TIntObjectMap<EdgeEntry> shortestWeightMapOther;
     public PathBidirRef shortest;
 
-    public DijkstraBidirectionRef(Graph graph) {
-        super(graph);
+    public DijkstraBidirectionRef(Graph graph, VehicleEncoder encoder) {
+        super(graph, encoder);
         initCollections(Math.max(20, graph.nodes()));
     }
 

File: src/main/java/com/graphhopper/routing/DijkstraSimple.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.graphhopper.coll.MyBitSet;
 import com.graphhopper.coll.MyTBitSet;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
@@ -39,8 +40,8 @@ public class DijkstraSimple extends AbstractRoutingAlgorithm {
     private TIntObjectMap<EdgeEntry> map = new TIntObjectHashMap<EdgeEntry>();
     private PriorityQueue<EdgeEntry> heap = new PriorityQueue<EdgeEntry>();
 
-    public DijkstraSimple(Graph graph) {
-        super(graph);
+    public DijkstraSimple(Graph graph, VehicleEncoder encoder) {
+        super(graph, encoder);
     }
 
     @Override

File: src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -18,7 +18,7 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
@@ -41,7 +41,7 @@
 public class Path {
 
     protected Graph graph;
-    protected VehicleFlagEncoder encoder;
+    protected VehicleEncoder encoder;
     protected double distance;
     // we go upwards (via EdgeEntry.parent) from the goal node to the origin node
     protected boolean reverseOrder = true;
@@ -54,7 +54,7 @@ public class Path {
     private PointList cachedPoints;
     private double weight;
 
-    public Path(Graph graph, VehicleFlagEncoder encoder) {
+    public Path(Graph graph, VehicleEncoder encoder) {
         this.weight = Double.MAX_VALUE;
         this.graph = graph;
         this.encoder = encoder;

File: src/main/java/com/graphhopper/routing/PathBidir.java
Patch:
@@ -18,7 +18,7 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeWrapper;
 
@@ -36,7 +36,7 @@ public class PathBidir extends Path {
     private EdgeWrapper edgeWFrom;
     private EdgeWrapper edgeWTo;
 
-    public PathBidir(Graph g, VehicleFlagEncoder encoder,
+    public PathBidir(Graph g, VehicleEncoder encoder,
             EdgeWrapper edgesFrom, EdgeWrapper edgesTo) {
         super(g, encoder);
         this.edgeWFrom = edgesFrom;

File: src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -18,7 +18,7 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
@@ -35,7 +35,7 @@ public class PathBidirRef extends Path {
     protected EdgeEntry edgeTo;
     private boolean switchWrapper = false;
 
-    public PathBidirRef(Graph g, VehicleFlagEncoder encoder) {
+    public PathBidirRef(Graph g, VehicleEncoder encoder) {
         super(g, encoder);
     }
 

File: src/main/java/com/graphhopper/routing/ch/Path4CH.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.routing.ch;
 
 import com.graphhopper.routing.PathBidirRef;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
@@ -35,7 +35,7 @@ public class Path4CH extends PathBidirRef {
 
     private WeightCalculation calc;
 
-    public Path4CH(Graph g, VehicleFlagEncoder encoder, WeightCalculation calc) {
+    public Path4CH(Graph g, VehicleEncoder encoder, WeightCalculation calc) {
         super(g, encoder);
         this.calc = calc;
     }

File: src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
Patch:
@@ -21,7 +21,7 @@
 /**
  * @author Peter Karich
  */
-public class AbstractFlagEncoder implements VehicleFlagEncoder {
+public class AbstractFlagEncoder implements VehicleEncoder {
 
     /**
      * This variable converts the stored value to the speed in km/h or does the

File: src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
Patch:
@@ -27,17 +27,17 @@ public class DefaultEdgeFilter implements EdgeFilter {
 
     private final boolean in;
     private final boolean out;
-    private VehicleFlagEncoder encoder;
+    private VehicleEncoder encoder;
 
     /**
      * Creates an edges filter which accepts both direction of the specified
      * vehicle type.
      */
-    public DefaultEdgeFilter(VehicleFlagEncoder encoder) {
+    public DefaultEdgeFilter(VehicleEncoder encoder) {
         this(encoder, true, true);
     }
 
-    public DefaultEdgeFilter(VehicleFlagEncoder encoder, boolean in, boolean out) {
+    public DefaultEdgeFilter(VehicleEncoder encoder, boolean in, boolean out) {
         this.encoder = encoder;
         this.in = in;
         this.out = out;

File: src/main/java/com/graphhopper/routing/util/FastestCalc.java
Patch:
@@ -19,16 +19,16 @@
 package com.graphhopper.routing.util;
 
 /**
- * Calculates the fastest route with the specified vehicle (VehicleFlagEncoder).
+ * Calculates the fastest route with the specified vehicle (VehicleEncoder).
  *
  * @author Peter Karich
  */
 public class FastestCalc implements WeightCalculation {
     
-    private final VehicleFlagEncoder encoder;
+    private final VehicleEncoder encoder;
     private final double maxSpeed;
 
-    public FastestCalc(VehicleFlagEncoder encoder) {
+    public FastestCalc(VehicleEncoder encoder) {
         this.encoder = encoder;
         maxSpeed = encoder.getMaxSpeed();
     }

File: src/main/java/com/graphhopper/routing/util/VehicleEncoder.java
Patch:
@@ -24,7 +24,7 @@
  *
  * @author Peter Karich
  */
-public interface VehicleFlagEncoder {
+public interface VehicleEncoder {
 
     /**
      * @param speed the speed in km/h

File: src/main/java/com/graphhopper/ui/DebugAStar.java
Patch:
@@ -19,6 +19,7 @@
 package com.graphhopper.ui;
 
 import com.graphhopper.routing.AStar;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import java.awt.Color;
@@ -32,8 +33,8 @@ public class DebugAStar extends AStar implements DebugAlgo {
     private MyGraphics mg;
     private Graphics2D g2;
 
-    public DebugAStar(Graph graph, MyGraphics mg) {
-        super(graph);
+    public DebugAStar(Graph graph, VehicleEncoder encoder, MyGraphics mg) {
+        super(graph, encoder);
         this.mg = mg;
     }
 

File: src/main/java/com/graphhopper/ui/DebugAStarBi.java
Patch:
@@ -18,8 +18,8 @@
  */
 package com.graphhopper.ui;
 
-import com.graphhopper.routing.AStar;
 import com.graphhopper.routing.AStarBidirection;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import java.awt.Color;
@@ -33,8 +33,8 @@ public class DebugAStarBi extends AStarBidirection implements DebugAlgo {
     private MyGraphics mg;
     private Graphics2D g2;
 
-    public DebugAStarBi(Graph graph, MyGraphics mg) {
-        super(graph);
+    public DebugAStarBi(Graph graph, VehicleEncoder encoder, MyGraphics mg) {
+        super(graph, encoder);
         this.mg = mg;
     }
 

File: src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
Patch:
@@ -19,6 +19,7 @@
 package com.graphhopper.ui;
 
 import com.graphhopper.routing.DijkstraBidirectionRef;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import java.awt.Color;
@@ -32,8 +33,8 @@ public class DebugDijkstraBidirection extends DijkstraBidirectionRef implements
     private MyGraphics mg;
     private Graphics2D g2;
 
-    public DebugDijkstraBidirection(Graph graph, MyGraphics mg) {
-        super(graph);
+    public DebugDijkstraBidirection(Graph graph, VehicleEncoder encoder, MyGraphics mg) {
+        super(graph, encoder);
         this.mg = mg;
     }
 

File: src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.graphhopper.routing.AStar;
 import com.graphhopper.routing.DijkstraSimple;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.EdgeEntry;
 import java.awt.Color;
@@ -33,8 +34,8 @@ public class DebugDijkstraSimple extends DijkstraSimple implements DebugAlgo {
     private MyGraphics mg;
     private Graphics2D g2;
 
-    public DebugDijkstraSimple(Graph graph, MyGraphics mg) {
-        super(graph);
+    public DebugDijkstraSimple(Graph graph, VehicleEncoder encoder, MyGraphics mg) {
+        super(graph, encoder);
         this.mg = mg;
     }
 

File: src/main/java/com/graphhopper/util/GHUtility.java
Patch:
@@ -25,7 +25,7 @@
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphStorage;
@@ -52,7 +52,7 @@
 public class GHUtility {
 
     private static Logger logger = LoggerFactory.getLogger(GHUtility.class);
-    private static final VehicleFlagEncoder carEncoder = new CarFlagEncoder();
+    private static final VehicleEncoder carEncoder = new CarFlagEncoder();
     private static final EdgeFilter edgesOutFilter = new DefaultEdgeFilter(carEncoder, false, true);
     private static final EdgeFilter edgesInFilter = new DefaultEdgeFilter(carEncoder, true, false);
 

File: src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.AlgorithmPreparation;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.NoOpAlgorithmPreparation;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
@@ -31,10 +31,10 @@
 public class AStarBidirectionTest extends AbstractRoutingAlgorithmTester {
 
     @Override
-    public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final VehicleFlagEncoder encoder) {
+    public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final VehicleEncoder encoder) {
         return new NoOpAlgorithmPreparation() {
             @Override public RoutingAlgorithm createAlgo() {
-                return new AStarBidirection(_graph).type(calc).vehicle(encoder);
+                return new AStarBidirection(_graph, encoder).type(calc);
             }
         }.graph(g);
     }

File: src/test/java/com/graphhopper/routing/AStarTest.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.AlgorithmPreparation;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.NoOpAlgorithmPreparation;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
@@ -30,10 +30,10 @@
 public class AStarTest extends AbstractRoutingAlgorithmTester {
 
     @Override
-    public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final VehicleFlagEncoder encoder) {
+    public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final VehicleEncoder encoder) {
         return new NoOpAlgorithmPreparation() {
             @Override public RoutingAlgorithm createAlgo() {
-                return new AStar(_graph).type(calc).vehicle(encoder);               
+                return new AStar(_graph, encoder).type(calc);
             }
         }.graph(g);
     }

File: src/test/java/com/graphhopper/routing/DijkstraSimpleTest.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.AlgorithmPreparation;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.NoOpAlgorithmPreparation;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
@@ -31,10 +31,10 @@
 public class DijkstraSimpleTest extends AbstractRoutingAlgorithmTester {
 
     @Override
-    public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final VehicleFlagEncoder encoder) {
+    public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc, final VehicleEncoder encoder) {
         return new NoOpAlgorithmPreparation() {
             @Override public RoutingAlgorithm createAlgo() {
-                return new DijkstraSimple(_graph).type(calc).vehicle(encoder);
+                return new DijkstraSimple(_graph, encoder).type(calc);
             }
         }.graph(g);
     }

File: src/test/java/com/graphhopper/routing/PathBidirRefTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
@@ -35,7 +35,7 @@
  */
 public class PathBidirRefTest {
 
-    private VehicleFlagEncoder carEncoder = new CarFlagEncoder();
+    private VehicleEncoder carEncoder = new CarFlagEncoder();
     private EdgeFilter carOutEdges = new DefaultEdgeFilter(carEncoder, false, true);
 
     Graph createGraph() {

File: src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -19,7 +19,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.CarFlagEncoder;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -38,7 +38,7 @@ public class PathTest {
 
     @Test
     public void testTime() {
-        VehicleFlagEncoder encoder = new CarFlagEncoder();
+        VehicleEncoder encoder = new CarFlagEncoder();
         Path p = new Path(null, encoder);
         p.calcTime(100000, encoder.flags(100, true));
         assertEquals(60 * 60, p.time());

File: src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -21,7 +21,7 @@
 import com.graphhopper.routing.AbstractRoutingAlgorithmTester;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.CarFlagEncoder;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.routing.util.WeightCalculation;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.LevelGraph;
@@ -61,7 +61,7 @@ protected LevelGraph createGraph() {
     }
 
     @Override
-    public PrepareContractionHierarchies prepareGraph(Graph g, WeightCalculation calc, VehicleFlagEncoder encoder) {
+    public PrepareContractionHierarchies prepareGraph(Graph g, WeightCalculation calc, VehicleEncoder encoder) {
         PrepareContractionHierarchies ch = new PrepareContractionHierarchies().graph(g).
                 type(calc).vehicle(encoder);
         // hack: prepare matrixgraph only once
@@ -92,7 +92,7 @@ public void testPathRecursiveUnpacking() {
         g2.edge(5, 7, 1.4, true);
         g2.edge(6, 7, 1, true);
 
-        VehicleFlagEncoder carEncoder = new CarFlagEncoder();
+        VehicleEncoder carEncoder = new CarFlagEncoder();
         // simulate preparation
         EdgeSkipIterator iter2_1 = g2.edge(0, 5, 2.8, carEncoder.flags(0, true));
         iter2_1.skippedEdges(iter1_1.edge(), iter1_2.edge());

File: src/test/java/com/graphhopper/routing/util/FastestCalcTest.java
Patch:
@@ -28,7 +28,7 @@ public class FastestCalcTest {
 
     @Test
     public void testSpeed0() {
-        VehicleFlagEncoder encoder = new CarFlagEncoder();
+        VehicleEncoder encoder = new CarFlagEncoder();
         FastestCalc instance = new FastestCalc(encoder);
         assertEquals(1.0 / 0, instance.getWeight(10, encoder.flags(0, true)), 1e-8);
     }

File: src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
Patch:
@@ -51,7 +51,7 @@ public void testBasics() {
 
     @Test
     public void testCombined() {
-        VehicleFlagEncoder carEncoder = new CarFlagEncoder();
+        VehicleEncoder carEncoder = new CarFlagEncoder();
         int fl = footEncoder.flags(10, true) | carEncoder.flags(100, false);
         assertEquals(10, footEncoder.getSpeed(fl));
         assertTrue(footEncoder.isForward(fl));

File: src/test/java/com/graphhopper/storage/AbstractGraphTester.java
Patch:
@@ -22,7 +22,7 @@
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.FootFlagEncoder;
-import com.graphhopper.routing.util.VehicleFlagEncoder;
+import com.graphhopper.routing.util.VehicleEncoder;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.GHUtility;
 import static com.graphhopper.util.GHUtility.*;
@@ -747,7 +747,7 @@ public void testPillarNodes() {
     @Test
     public void footMix() {
         Graph g = createGraph();
-        VehicleFlagEncoder footEncoder = new FootFlagEncoder();
+        VehicleEncoder footEncoder = new FootFlagEncoder();
         g.edge(0, 1, 10, footEncoder.flags(10, true));
         g.edge(0, 2, 10, carEncoder.flags(10, true));
         g.edge(0, 3, 10, footEncoder.flags(10, true) | carEncoder.flags(10, true));

File: src/test/java/com/graphhopper/storage/GraphStorage3DTest.java
Patch:
@@ -20,6 +20,7 @@
 
 import com.graphhopper.routing.DijkstraBidirection;
 import com.graphhopper.routing.Path;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.util.DistanceCalc3D;
 import com.graphhopper.util.Helper;
 import static org.junit.Assert.*;
@@ -49,7 +50,7 @@ public void testGetHeight() {
         edge(g, dist, 1, 3);
         edge(g, dist, 1, 4);
 
-        Path p = new DijkstraBidirection(g).calcPath(0, 1);
+        Path p = new DijkstraBidirection(g, new CarFlagEncoder()).calcPath(0, 1);
         assertEquals(Helper.createTList(0, 3, 1), p.calcNodes());
         assertEquals(100, p.distance(), .1);
     }

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -254,7 +254,7 @@ else if (request.algorithm().equals("astarbi"))
 
         sw = new StopWatch().start();
         Path path = algo.calcPath(from, to);
-        debug += ", routing (" + algo.name() + "):" + sw.stop().getSeconds() + "s"
+        debug += ", " + algo.name() + "-routing:" + sw.stop().getSeconds() + "s"
                 + ", " + path.debugInfo();
         PointList points = path.calcPoints();
         if (simplify) {

File: src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -34,7 +34,7 @@ public class TestAlgoCollector {
     public TestAlgoCollector assertDistance(RoutingAlgorithm algo,
             int from, int to, double distance, int pointCount) {
         Path path = algo.calcPath(from, to);
-        if (!path.found()) {
+        if (!path.found()) {            
             list.add(algo + " returns no path. from:" + from + ", to:" + to);
             return this;
         }

File: src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -180,11 +180,11 @@ public static Class<? extends RoutingAlgorithm> getAlgoFromString(String algorit
     }
 
     public static VehicleFlagEncoder getEncoder(String str) {
-        if ("CAR".equalsIgnoreCase(str))
+        if ("car".equalsIgnoreCase(str))
             return new CarFlagEncoder();
-        else if ("FOOT".equalsIgnoreCase(str))
+        else if ("foot".equalsIgnoreCase(str))
             return new FootFlagEncoder();
-        else if ("BIKE".equalsIgnoreCase(str))
+        else if ("bike".equalsIgnoreCase(str))
             return new BikeFlagEncoder();
         throw new RuntimeException("Not found " + str);
     }

File: src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -118,7 +118,7 @@ void initFastVsShort(Graph graph) {
         initFootVsCar(graphShortest);
         Path p1 = prepareGraph(graphShortest, new ShortestCalc(), footEncoder).createAlgo().calcPath(0, 7);
         assertEquals(p1.toString(), 17000, p1.distance(), 1e-6);
-        assertEquals(p1.toString(), 15300, p1.time());
+        assertEquals(p1.toString(), 12240, p1.time());
         assertEquals(Helper.createTList(0, 4, 5, 7), p1.calcNodes());
     }
 

File: src/main/java/com/graphhopper/routing/util/AcceptWay.java
Patch:
@@ -232,11 +232,11 @@ public int toFlags(Map<String, Object> properties) {
     public String toString() {
         String str = "";
         if (acceptsCar())
-            str += "CAR,";
+            str += "CAR ";
         if (acceptsBike())
-            str += "BIKE,";
+            str += "BIKE ";
         if (acceptsFoot())
             str += "FOOT";
-        return str;
+        return str.trim().replaceAll("\\ ", ",");
     }
 }

File: src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
Patch:
@@ -265,7 +265,7 @@ public void testRoundaboutUnpacking() {
         int old = GHUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().graph(g);
         prepare.doWork();
-        assertEquals(old + 19, GHUtility.count(g.getAllEdges()));
+        assertEquals(old + 20, GHUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());

File: src/main/java/com/graphhopper/routing/util/CarStreetType.java
Patch:
@@ -66,7 +66,7 @@ public int getSpeedPart() {
     }
 
     public int getSpeed() {
-        return getSpeedPart() * 10;
+        return getSpeedPart() * FACTOR;
     }
 
     @Override

File: src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -69,9 +69,9 @@ public void testMonaco() {
     @Test
     public void testAndorra() {
         List<OneRun> list = new ArrayList<OneRun>();
-// TODO        list.add(new OneRun(42.56819, 1.603231, 42.571034, 1.520662, 21265, 922));
+        list.add(new OneRun(42.56819, 1.603231, 42.571034, 1.520662, 21233, 918));
         // if id2location is created a bit different: list.add(new OneRun(42.56819, 1.603231, 42.571034, 1.520662, 24.101, 992));
-        list.add(new OneRun(42.529176, 1.571302, 42.571034, 1.520662, 16256, 604));
+        list.add(new OneRun(42.529176, 1.571302, 42.571034, 1.520662, 16201, 591));
         // if we would use double for lat+lon we would get path length 16.466 instead of 16.452
         runAlgo(testCollector, "files/andorra.osm.gz", "target/graph-andorra", list, true);
         assertEquals(testCollector.toString(), 0, testCollector.list.size());

File: src/test/java/com/graphhopper/routing/util/CarStreetTypeTest.java
Patch:
@@ -58,7 +58,7 @@ public void testSwapDir() {
     public void testService() {
         Map<String, Object> p = new HashMap<String, Object>();
         p.put("car", CarStreetType.SPEED.get("service"));
-        CarStreetType fl = new CarStreetType(new AcceptStreet(true, false, false, false).toFlags(p));
+        CarStreetType fl = new CarStreetType(new AcceptWay(true, false, false, false).toFlags(p));
         assertTrue(fl.isForward());
         assertTrue(fl.isBackward());
         assertTrue(fl.isService());

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -108,7 +108,7 @@ public static Collection<RoutingAlgorithm> createAlgos(Graph g, boolean withCh)
             PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies().graph(graphCH);
             prepareCH.doWork();
             algos.add(prepareCH.createAlgo());
-            algos.add(prepareCH.createAStar().setApproximation(true).setApproximationFactor(0.1));
+            algos.add(prepareCH.createAStar().setApproximation(true).setApproximationFactor(.9));
         }
         return algos;
     }

File: src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -287,7 +287,8 @@ public EdgeLevelFilterCH setAvoidNode(int node) {
 
         @Override public boolean accept() {
             // ignore if it is skipNode or a endNode already contracted
-            return avoidNode != node() && graph.getLevel(node()) == 0;
+            int node = node();
+            return avoidNode != node && graph.getLevel(node) == 0;
         }
     }
 
@@ -601,7 +602,7 @@ Path calcPath(int from, Collection<NodeCH> goals) {
         }
 
         @Override public String name() {
-            return "dijkstra12Many";
+            return "dijkstraOne2Many";
         }
     }
 

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -218,6 +218,7 @@ public GHResponse route(GHRequest request) {
         sw = new StopWatch().start();
         RoutingAlgorithm algo;
         if (chUsage) {
+            prepare.graph(graph);
             if (request.algorithm().equals("dijkstrabi"))
                 algo = prepare.createAlgo();
             else if (request.algorithm().equals("astarbi"))

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -72,7 +72,7 @@ void testAlgos() {
                     + "Or use osmreader.chShortcuts=shortest and avoid the preparation");
 
         TestAlgoCollector testCollector = new TestAlgoCollector();
-        Collection<RoutingAlgorithm> algos = createAlgos(unterfrankenGraph, false);
+        Collection<RoutingAlgorithm> algos = createAlgos(unterfrankenGraph, true);
         for (RoutingAlgorithm algo : algos) {
             int failed = testCollector.list.size();
             testCollector.assertDistance(algo, idx.findID(50.0315, 10.5105), idx.findID(50.0303, 10.5070), 561.3, 20);

File: src/main/java/com/graphhopper/util/GraphUtility.java
Patch:
@@ -284,7 +284,7 @@ public static Graph sort(Graph g, Graph sortedGraph, int capacity) {
     }
 
     static Graph createSortedGraph(Graph g, Graph sortedGraph, final TIntList oldToNewNodeList) {
-        int len = oldToNewNodeList.size();
+        int len = oldToNewNodeList.size();        
         // important to avoid creating two edges for edges with both directions
         MyBitSet bitset = new MyBitSetImpl(len);
         for (int old = 0; old < len; old++) {
@@ -301,7 +301,8 @@ static Graph createSortedGraph(Graph g, Graph sortedGraph, final TIntList oldToN
                     throw new IllegalStateException("empty entries should be connected to the others");
                 if (bitset.contains(newNodeIndex))
                     continue;
-                sortedGraph.edge(newIndex, newNodeIndex, eIter.distance(), eIter.flags());
+                sortedGraph.edge(newIndex, newNodeIndex, eIter.distance(), eIter.flags()).
+                        wayGeometry(eIter.wayGeometry());
             }
         }
         return sortedGraph;

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -226,7 +226,8 @@ public GHResponse route(GHRequest request) {
         prepare.graph(graph);
         RoutingAlgorithm algo = prepare.createAlgo();
         Path path = algo.calcPath(from, to);
-        debug += ", routing (" + algo.name() + "):" + sw.stop().getSeconds() + "s";
+        debug += ", routing (" + algo.name() + "):" + sw.stop().getSeconds() + "s" 
+                + ", " + path.debugInfo();
         PointList points = path.calcPoints();
         if (simplify) {
             sw = new StopWatch().start();

File: src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -70,6 +70,7 @@ public Path extract() {
         if (from != to)
             throw new IllegalStateException("Locations of the 'to'- and 'from'-Edge has to be the same." + toString());
 
+        sw.start();
         if (switchWrapper) {
             EdgeEntry ee = edgeEntry;
             edgeEntry = edgeTo;
@@ -90,6 +91,7 @@ public Path extract() {
             processWeight(tmpEdge, currEdge.endNode);
             tmpEdge = currEdge.edge;
         }
+        sw.stop();
         return found(true);
     }
 }

File: src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -34,7 +34,6 @@
 import java.security.AccessController;
 import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
-import java.text.DecimalFormat;
 import java.text.NumberFormat;
 import java.util.*;
 import java.util.zip.ZipEntry;

File: src/main/java/com/graphhopper/util/EdgeIterator.java
Patch:
@@ -44,9 +44,9 @@ public interface EdgeIterator {
     boolean next();
 
     /**
-     * @return the edge id of the current edge. Although the current
-     * implementation uses an index starting from 1, do not make any assumptions
-     * about it.
+     * @return the edge id of the current edge. Do not make any assumptions
+     * about the concrete values, except that for an implemention it is
+     * recommended that they'll be contiguous.
      */
     int edge();
 

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -251,7 +251,7 @@ void flush() {
 
         if (indexCapacity < 0)
             indexCapacity = Helper.calcIndexSize(graphStorage.bounds());
-        logger.info("initializing and flushing location index with " + indexCapacity);
+        logger.info("initializing and flushing location index with " + indexCapacity + " bounds:" + graphStorage.bounds());
         location2IDIndex().prepareIndex(indexCapacity);
         index.flush();
     }

File: src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -278,7 +278,7 @@ public int segments() {
     private void clean(int from, int to) {
         for (int i = from; i < to; i++) {
             ByteBuffer bb = segments.get(i);
-            Helper7.cleanMappedByteBuffer(bb);
+            Helper.cleanMappedByteBuffer(bb);
             segments.set(i, null);
         }
         cleanHack();
@@ -309,7 +309,7 @@ boolean releaseSegment(int segNumber) {
         if (segment instanceof MappedByteBuffer)
             ((MappedByteBuffer) segment).force();
 
-        Helper7.cleanMappedByteBuffer(segment);
+        Helper.cleanMappedByteBuffer(segment);
         segments.set(segNumber, null);
         cleanHack();
         return true;

File: src/test/java/com/graphhopper/storage/AbstractGraphTester.java
Patch:
@@ -539,7 +539,7 @@ public void testDeleteAndOptimize() {
     public void testBounds() {
         Graph graph = createGraph(4);
         BBox b = graph.bounds();
-        assertEquals(0, b.maxLat, 1e-6);
+        assertEquals(BBox.INVERSE.maxLat, b.maxLat, 1e-6);
 
         graph.setNode(0, 10, 20);
         assertEquals(10, b.maxLat, 1e-6);

File: src/main/java/com/graphhopper/GraphHopper.java
Patch:
@@ -80,6 +80,8 @@ public GraphHopper forServer() {
     }
 
     public GraphHopper forAndroid() {
+        // no need to simplify as no IO and simplifying costs a bit CPU
+        simplify = false;
         return memoryMapped();
     }
 
@@ -213,7 +215,7 @@ public GHResponse route(GHRequest request) {
         RoutingAlgorithm algo = prepare.createAlgo();
         Path path = algo.calcPath(from, to);
         debug += " routing (" + algo.name() + "):" + sw.stop().getSeconds() + "s";
-        PointList points = path.points();
+        PointList points = path.calcPoints();
         if (simplify) {
             sw = new StopWatch().start();
             int del = new DouglasPeucker().setMaxDist(request.minPathPrecision()).simplify(points);

File: src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
Patch:
@@ -46,12 +46,12 @@ public TestAlgoCollector assertDistance(RoutingAlgorithm algo,
         } else if (Math.abs(path.distance() - distance) > 10)
             list.add(algo + " returns path not matching the expected distance of " + distance
                     + "\t Returned was " + path.distance() + "\t (expected points " + points
-                    + ", was " + path.points().size() + ") from:" + from + ", to:" + to);
+                    + ", was " + path.calcPoints().size() + ") from:" + from + ", to:" + to);
         // Yes, there are indeed real world instances where A-B-C is identical to A-C (in meter precision).
         // And for from:501620, to:155552 the node difference of astar to bi-dijkstra gets even bigger (7!).
-        if (Math.abs(path.points().size() - points) > 7)
+        if (Math.abs(path.calcPoints().size() - points) > 7)
             list.add(algo + " returns path not matching the expected points of " + points
-                    + "\t Returned was " + path.points().size() + "\t (expected distance " + distance
+                    + "\t Returned was " + path.calcPoints().size() + "\t (expected distance " + distance
                     + ", was " + path.distance() + ") from:" + from + ", to:" + to);
         return this;
     }

File: src/test/java/com/graphhopper/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -43,13 +43,13 @@ public void testAddSkipNodes() {
         Graph g = createWikipediaTestGraph();
         Path p = prepareGraph(g).createAlgo().calcPath(0, 4);
         assertEquals(p.toString(), 20, p.weight(), 1e-6);
-        assertTrue(p.toString(), p.nodes().contains(5));
+        assertTrue(p.toString(), p.calcNodes().contains(5));
 
         DijkstraBidirectionRef db = new DijkstraBidirectionRef(g);
         db.addSkipNode(5);
         p = db.calcPath(0, 4);
-        assertFalse(p.toString(), p.nodes().contains(5));
-        assertEquals(Helper.createTList(0, 2, 3, 4), p.nodes());
+        assertFalse(p.toString(), p.calcNodes().contains(5));
+        assertEquals(Helper.createTList(0, 2, 3, 4), p.calcNodes());
     }
 
     @Test

File: src/test/java/com/graphhopper/routing/DijkstraBidirectionTest.java
Patch:
@@ -41,14 +41,14 @@ public AlgorithmPreparation prepareGraph(Graph g, final WeightCalculation calc)
     public void testAddSkipNodes() {
         Graph g = createWikipediaTestGraph();
         Path p = prepareGraph(g).createAlgo().calcPath(0, 4);
-        assertEquals(Helper.createTList(0, 2, 5, 4), p.nodes());
+        assertEquals(Helper.createTList(0, 2, 5, 4), p.calcNodes());
         assertEquals(p.toString(), 20, p.weight(), 1e-6);
-        assertTrue(p.toString(), p.nodes().contains(5));
+        assertTrue(p.toString(), p.calcNodes().contains(5));
 
         DijkstraBidirection algo = new DijkstraBidirection(g);
         algo.addSkipNode(5);
         p = algo.calcPath(0, 4);
-        assertFalse(p.toString(), p.nodes().contains(5));
+        assertFalse(p.toString(), p.calcNodes().contains(5));
     }
 
     @Test

File: src/test/java/com/graphhopper/routing/PathBidirRefTest.java
Patch:
@@ -45,7 +45,7 @@ public void testExtract() {
         pw.edgeEntry.parent = new EdgeEntry(EdgeIterator.NO_EDGE, 1, 10);
         pw.edgeTo = new EdgeEntry(EdgeIterator.NO_EDGE, 2, 0);
         Path p = pw.extract();
-        assertEquals(Helper.createTList(1, 2), p.nodes());
+        assertEquals(Helper.createTList(1, 2), p.calcNodes());
         assertEquals(10, p.weight(), 1e-4);
     }
 
@@ -65,7 +65,7 @@ public void testExtract2() {
         pw.edgeTo = new EdgeEntry(iter.edge(), 2, 20);
         pw.edgeTo.parent = new EdgeEntry(EdgeIterator.NO_EDGE, 3, 0);
         Path p = pw.extract();
-        assertEquals(Helper.createTList(1, 2, 3), p.nodes());
+        assertEquals(Helper.createTList(1, 2, 3), p.calcNodes());
         assertEquals(30, p.weight(), 1e-4);
     }
 }

File: src/test/java/com/graphhopper/routing/PathTest.java
Patch:
@@ -28,6 +28,6 @@ public class PathTest {
         Path p = new Path();
         assertFalse(p.found());
         assertEquals(0, p.distance(), 1e-7);
-        assertEquals(0, p.nodes().size());
+        assertEquals(0, p.calcNodes().size());
     }
 }

File: src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
Patch:
@@ -73,7 +73,7 @@ public void testShortcutUnpacking() {
         AbstractRoutingAlgorithmTester.initBiGraph(g2);
         Path p = prepareGraph(g2).createAlgo().calcPath(0, 4);
         assertEquals(p.toString(), 51, p.weight(), 1e-4);
-        assertEquals(p.toString(), 6, p.nodes().size());
+        assertEquals(p.toString(), 6, p.calcNodes().size());
     }
 
     @Test @Override public void testPerformance() throws IOException {
@@ -111,8 +111,8 @@ public void testPathRecursiveUnpacking() {
         g2.setLevel(0, 7);
 
         Path p = new PrepareContractionHierarchies().setGraph(g2).createAlgo().calcPath(0, 7);
-        assertEquals(Helper.createTList(0, 2, 5, 7), p.nodes());
-        assertEquals(4, p.nodes().size());
+        assertEquals(Helper.createTList(0, 2, 5, 7), p.calcNodes());
+        assertEquals(4, p.calcNodes().size());
         assertEquals(4.2, p.distance(), 1e-5);
     }
 }

File: src/test/java/com/graphhopper/routing/rideshare/DijkstraShortestOf2ToPubTest.java
Patch:
@@ -97,7 +97,7 @@ private void assertWithBiDijkstra(int[] points, Path path, int from, int to, Gra
             }
         }
 
-        assertEquals(bestManualPathFrom.nodes().size() + bestManualPathTo.nodes().size() - 1, path.nodes().size());
+        assertEquals(bestManualPathFrom.calcNodes().size() + bestManualPathTo.calcNodes().size() - 1, path.calcNodes().size());
         assertEquals(bestManualPathFrom.weight() + bestManualPathTo.weight(), path.weight(), 1e-3);
     }
 }

File: src/test/java/com/graphhopper/routing/rideshare/DijkstraWhichToOneTest.java
Patch:
@@ -87,6 +87,6 @@ private void assertWithBiDijkstra(int[] points, Path path, int dest) {
         }
 
         assertEquals(bestManualPath.weight(), path.weight(), 1e-3);
-        assertEquals(bestManualPath.nodes(), path.nodes());
+        assertEquals(bestManualPath.calcNodes(), path.calcNodes());
     }
 }

File: src/test/java/com/graphhopper/storage/GraphStorage3DTest.java
Patch:
@@ -51,7 +51,7 @@ public void testGetHeight() {
         edge(g, dist, 1, 4);
 
         Path p = new DijkstraBidirection(g).calcPath(0, 1);
-        assertEquals(Helper.createTList(0, 3, 1), p.nodes());
+        assertEquals(Helper.createTList(0, 3, 1), p.calcNodes());
         assertEquals(100, p.distance(), .1);
     }
 

File: src/main/java/com/graphhopper/reader/OSMReaderHelperDoubleParse.java
Patch:
@@ -51,7 +51,7 @@ public class OSMReaderHelperDoubleParse extends OSMReaderHelper {
     private final Logger logger = LoggerFactory.getLogger(getClass());
     private TLongIntHashMap osmIdToIndexMap;
     // very slow: private SparseLongLongArray osmIdToIndexMap;
-    // not applicable as ways introduces the nodes in 'wrong' order: new OSMIDSegmentedMap        
+    // not applicable as ways introduces the nodes in 'wrong' order: private OSMIDSegmentedMap
     private int towerId = 0;
     private int pillarId = 0;
     private final TLongArrayList tmpLocs = new TLongArrayList(10);
@@ -76,7 +76,7 @@ public boolean addNode(long osmId, double lat, double lon) {
         if (nodeType == TOWER_NODE) {
             addTowerNode(osmId, lat, lon);
         } else if (nodeType == PILLAR_NODE) {
-            int tmp = (nodeType + 1) * 4;
+            int tmp = (pillarId + 1) * 4;
             pillarLats.ensureCapacity(tmp);
             pillarLats.setInt(pillarId, Helper.degreeToInt(lat));
             pillarLons.ensureCapacity(tmp);

File: src/main/java/com/graphhopper/routing/AStarBidirection.java
Patch:
@@ -163,7 +163,6 @@ protected PathBidirRef createPath() {
 
     public void initPath() {
         shortest = createPath();
-        shortest.initWeight();
         // pi_r_of_t = dist.calcDist(fromCoord.lat, fromCoord.lon, toCoord.lat, toCoord.lon);
     }
 

File: src/main/java/com/graphhopper/routing/PathBidir.java
Patch:
@@ -39,7 +39,7 @@ public PathBidir(Graph g, WeightCalculation weightCalculation,
         this.edgeWFrom = edgesFrom;
         this.edgeWTo = edgesTo;
     }
-
+    
     /**
      * Extracts path from two shortest-path-tree
      */

File: src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -46,7 +46,7 @@ public void doWork() {
         int del = deleteZeroDegreeNodes();
         Map<Integer, Integer> map = findSubnetworks();
         keepLargestNetwork(map);
-        logger.info("optimize to delete: subnetworks(" + map.size() + "), 0degreeNodes(" + del + ")");
+        logger.info("optimize to delete: subnetworks(" + map.size() + "), zero-degree-nodes(" + del + ")");
         g.optimize();
         subNetworks = map.size();
     }

File: src/main/java/com/graphhopper/util/GraphUtility.java
Patch:
@@ -199,7 +199,9 @@ public static String getNodeInfo(Graph g, int nodeId) {
         EdgeIterator iter = g.getOutgoing(nodeId);
         String str = nodeId + ":" + g.getLatitude(nodeId) + "," + g.getLongitude(nodeId) + "\n";
         while (iter.next()) {
-            str += "  ->" + iter.node() + "\t" + BitUtil.toBitString(iter.flags(), 8) + "\n";
+            str += "  ->" + iter.node() + " (" + iter.distance() + ") pillars:"
+                    + iter.pillarNodes().size() + ", edgeId:" + iter.edge()
+                    + "\t" + BitUtil.toBitString(iter.flags(), 8) + "\n";
         }
         return str;
     }

File: src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -25,6 +25,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 import java.util.concurrent.atomic.AtomicInteger;
 import static org.junit.Assert.*;
@@ -84,7 +85,7 @@ void runAlgo(TestAlgoCollector testCollector, String osmFile,
             Graph g = osm.getGraph();
             // System.out.println("nodes:" + g.getNodes());
             Location2IDIndex idx = osm.getLocation2IDIndex();
-            RoutingAlgorithm[] algos = RoutingAlgorithmSpecialAreaTests.createAlgos(g);
+            Collection<RoutingAlgorithm> algos = RoutingAlgorithmSpecialAreaTests.createAlgos(g, true);
             for (RoutingAlgorithm algo : algos) {
                 for (OneRun or : forEveryAlgo) {
                     int from = idx.findID(or.fromLat, or.fromLon);

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -85,8 +85,8 @@ void testAlgos() {
             System.out.println("SUCCESS!");
     }
 
-    public static RoutingAlgorithm[] createAlgos(final Graph g) {
-        LevelGraph graphTowerNodesSC = (LevelGraphStorage) g.copyTo(new LevelGraphStorage(new RAMDirectory()).createNew(10));
+    public static RoutingAlgorithm[] createAlgos(Graph g) {
+        LevelGraph graphTowerNodesSC = (LevelGraph) g.copyTo(new LevelGraphStorage(new RAMDirectory()).createNew(10));
         PrepareTowerNodesShortcuts prepare = new PrepareTowerNodesShortcuts().setGraph(graphTowerNodesSC);
         prepare.doWork();
         AStarBidirection astarSimpleSC = (AStarBidirection) prepare.createAStar();

File: src/main/java/com/graphhopper/storage/LevelGraphStorage.java
Patch:
@@ -18,6 +18,9 @@
 import com.graphhopper.util.EdgeSkipIterator;
 
 /**
+ * A Graph necessary for shortcut algorithms like Contraction Hierarchies (stores level of nodes and
+ * shortcut edge per edge).
+ *
  * @author Peter Karich
  */
 public class LevelGraphStorage extends GraphStorage implements LevelGraph {

File: src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -568,7 +568,7 @@ long edgePointer() {
                 }
 
                 @Override public boolean hasNext() {
-                    return count > 0 && offset <= count;
+                    return count > 0 && offset < count;
                 }
 
                 @Override public void remove() {

File: src/test/java/com/graphhopper/storage/AbstractGraphTester.java
Patch:
@@ -654,10 +654,10 @@ public int getIdOf(Graph g, double latitude) {
         assertEquals(Arrays.asList(1, 2, 3), Helper.toList(iter.pillarNodes()));
         assertFalse(iter.next());
 
-        iter = g.getIncoming(4);
+        iter = g.getIncoming(10);
         assertTrue(iter.next());
-        assertEquals(10, iter.node());
-        assertEquals(Arrays.asList(13, 12, 11), Helper.toList(iter.pillarNodes()));
+        assertEquals(4, iter.node());
+        assertEquals(Arrays.asList(5, 6, 7, 8, 9), Helper.toList(iter.pillarNodes()));
         assertFalse(iter.next());
     }
 }

File: src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -114,7 +114,7 @@ public DataAccess copyTo(DataAccess da) {
         long max = capacity() / 4;
         for (long l = 0; l < max; l++) {
             da.setInt(l, getInt(l));
-        }
+        }        
         return da;
     }
 

File: src/main/java/com/graphhopper/storage/Graph.java
Patch:
@@ -18,6 +18,7 @@
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeWriteIterator;
 import com.graphhopper.util.shapes.BBox;
+import gnu.trove.list.TIntList;
 
 /**
  * An interface to represent a (geo) graph - suited for efficient storage as it can be requested via

File: src/test/java/com/graphhopper/GraphHopperAPITest.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.RAMDirectory;
-import com.graphhopper.util.shapes.GHPoint;
 import org.junit.Test;
 import static org.junit.Assert.*;
 

File: src/main/java/com/graphhopper/coll/MapEntry.java
Patch:
@@ -55,6 +55,7 @@ public String toString() {
         return getKey() + ", " + getValue();
     }
 
+    @SuppressWarnings("unchecked")
     @Override
     public boolean equals(Object obj) {
         if (obj == null)

File: src/main/java/com/graphhopper/coll/MyDijkstraHeap.java
Patch:
@@ -268,7 +268,7 @@ static IntDoubleBinHeap move(int capacity, IntDoubleBinHeap from, IntDoubleBinHe
         List<Entry<Double, Integer>> sortedList = new ArrayList<Entry<Double, Integer>>();
         int len = from.size();
         for (int i = 1; i <= len; i++) {
-            sortedList.add(new MapEntry((double) from.getKey(i), from.getElement(i)));
+            sortedList.add(new MapEntry<Double, Integer>((double) from.getKey(i), from.getElement(i)));
         }
 
         Collections.sort(sortedList, comparator);

File: src/main/java/com/graphhopper/util/Helper.java
Patch:
@@ -94,7 +94,7 @@ public static List<String> readFile(String file) throws IOException {
     public static List<String> readFile(Reader simpleReader) throws IOException {
         BufferedReader reader = new BufferedReader(simpleReader);
         try {
-            List<String> res = new ArrayList();
+            List<String> res = new ArrayList<String>();
             String line;
             while ((line = reader.readLine()) != null) {
                 res.add(line);

File: src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
Patch:
@@ -83,7 +83,7 @@ public void testKeepLargestNetworks() {
         g.optimize();
 
         assertEquals(7, g.getNodes());
-        assertEquals(Arrays.asList(), GraphUtility.getProblems(g));
+        assertEquals(Arrays.<String>asList(), GraphUtility.getProblems(g));
         map = instance.findSubnetworks();
         assertEquals(1, map.size());
         assertEquals(7, (int) map.get(0));

File: src/test/java/com/graphhopper/trees/QTDataNodeTest.java
Patch:
@@ -28,7 +28,7 @@ public class QTDataNodeTest {
     public void testGetMemoryUsageInBytes() {
         QTDataNode<Integer> dn = new QTDataNode<Integer>(8);
         dn.keys[1] = 111;
-        dn.values[1] = 222;
+        // dn.values[1] = (Integer) 222;
         assertEquals(0, dn.count());
         dn.add(1, 1);
         assertEquals(1, dn.count());

File: src/main/java/com/graphhopper/coll/MyList.java
Patch:
@@ -31,10 +31,12 @@ public MyList() {
         this(10);
     }
 
+    @SuppressWarnings("unchecked")
     public MyList(int cap) {
         arr = (T[]) new Object[cap];
     }
 
+    @SuppressWarnings("unchecked")
     void ensureCapacity(int minSize) {
         if (minSize <= arr.length)
             return;

File: src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
Patch:
@@ -37,4 +37,6 @@ public interface RoutingAlgorithm {
     RoutingAlgorithm setType(WeightCalculation calc);
 
     RoutingAlgorithm clear();
+    
+    String name();
 }

File: src/main/java/com/graphhopper/routing/util/AbstractAlgoPreparation.java
Patch:
@@ -30,6 +30,7 @@ public abstract class AbstractAlgoPreparation<T extends AlgorithmPreparation> im
         return this;
     }
 
+    @SuppressWarnings("unchecked")
     @Override public T doWork() {
         if (prepared)
             throw new IllegalStateException("Call doWork only once!");

File: src/main/java/com/graphhopper/ui/MiniGraphUI.java
Patch:
@@ -72,7 +72,7 @@ public MiniGraphUI(OSMReader reader, boolean debug) {
         this.graph = reader.getGraph();
         AlgorithmPreparation prepare = reader.getPreparation();
         this.algo = prepare.createAlgo();
-        logger.info("locations:" + graph.getNodes() + ", debug:" + debug + ", algo:" + algo.getClass().getSimpleName());
+        logger.info("locations:" + graph.getNodes() + ", debug:" + debug + ", algo:" + algo.name());
         mg = new MyGraphics(graph);
 
         // prepare node quadtree to 'enter' the graph. create a 313*313 grid => <3km

File: src/test/java/com/graphhopper/coll/MyListTest.java
Patch:
@@ -26,19 +26,19 @@ public class MyListTest {
 
     @Test
     public void testAdd() {
-        MyList instance = new MyList();
+        MyList<Integer> instance = new MyList<Integer>();
         instance.add(0);
         instance.add(2);
         instance.add(1, 10);
         assertEquals("0,10,2", instance.toString());
-        assertEquals(10, instance.remove(1));
+        assertEquals(10, instance.remove(1).intValue());
 
         assertEquals("0,2", instance.toString());
     }
 
     @Test
     public void testBinSearch() {
-        MyList instance = new MyList();
+        MyList<Integer> instance = new MyList<Integer>();
         instance.add(0);
         instance.add(2);
         instance.add(7);

File: src/test/java/com/graphhopper/trees/QuadTreeSimpleTest.java
Patch:
@@ -26,7 +26,7 @@ public class QuadTreeSimpleTest extends QuadTreeTester {
 
     @Override
     protected QuadTree createQuadTree(long items) {
-        return new QuadTreeSimple().init(items);
+        return new QuadTreeSimple<Integer>().init(items);
     }
 
     @Test

File: src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -28,11 +28,11 @@ public abstract class AbstractDataAccess implements DataAccess {
     private static final int SEGMENT_SIZE_DEFAULT = 8 * 1 << 20;
     // reserve some space for downstream usage (in classes using/exting this)
     protected static final int HEADER_OFFSET = 20 * 4 + 20;
+    protected static final byte[] EMPTY = new byte[1024];
     protected int header[] = new int[(HEADER_OFFSET - 20) / 4];
-    final static byte[] EMPTY = new byte[1024];
+    private final String location;
     protected int segmentSizeInBytes = SEGMENT_SIZE_DEFAULT;
     protected final String id;
-    private final String location;
 
     public AbstractDataAccess(String id, String location) {
         this.id = id;

File: src/main/java/com/graphhopper/GraphHopperAPI.java
Patch:
@@ -61,8 +61,8 @@ public interface GraphHopperAPI {
     GraphHopperAPI minPathPrecision(double precision);
 
     /**
-     * Possible values: astar (A* algorithm), dijkstra (Dijkstra), dijkstrabi (bidirectional
-     * Dijkstra) and dijkstraNative (a bit faster bidirectional Dijkstra).
+     * Possible values: astar (A* algorithm), astarbi (bidirectional A*) dijkstra (Dijkstra),
+     * dijkstrabi and dijkstraNative (a bit faster bidirectional Dijkstra).
      */
     GraphHopperAPI algorithm(String algo);
 

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -175,7 +175,7 @@ public OSMReader(String storageLocation, int size) {
     public OSMReader(GraphStorage storage, int expectedNodes) {
         this.graphStorage = storage;
         this.expectedNodes = expectedNodes;
-        this.helper = new OSMReaderHelperDoubleParse(graphStorage, expectedNodes);
+        this.helper = createDoubleParseHelper();
         logger.info("using " + helper.getStorageInfo(storage) + ", memory:" + Helper.getMemInfo());
     }
 

File: src/main/java/com/graphhopper/reader/OSMReaderHelperSingleParse.java
Patch:
@@ -28,7 +28,7 @@
  * (and also slower!?) as it stores all occuring nodes and its lat,lon. Only useful for smaller
  * (&lt; 150km) graphs.
  *
- * @deprecated too slow and too much memory is used
+ * @deprecated until we fix the memory and speed problem
  * @author Peter Karich
  */
 public class OSMReaderHelperSingleParse extends OSMReaderHelper {

File: src/main/java/com/graphhopper/GraphHopperAPI.java
Patch:
@@ -18,7 +18,7 @@
 import com.graphhopper.util.shapes.GeoPoint;
 
 /**
- * Wrapper of the graphhopper online or offline API.
+ * Wrapper of the graphhopper online or offline API. Provides read only access.
  *
  * Usage:
  * <pre>

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -75,7 +75,7 @@ public static void main(String[] strs) throws Exception {
         if (args.getBool("osmreader.test", false)) {
             tests.start();
         }
-
+        
         if (args.getBool("osmreader.runshortestpath", false)) {
             RoutingAlgorithm algo = AbstractRoutingAlgorithm.createAlgoFromString(g, args.get("osmreader.algo", "dijkstra"));
             int iters = args.getInt("osmreader.algoIterations", 50);

File: src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -53,7 +53,7 @@ public static RoutingAlgorithm createAlgoFromString(Graph g, String algoStr) {
         RoutingAlgorithm algo;
         if ("dijkstrabi".equalsIgnoreCase(algoStr))
             algo = new DijkstraBidirectionRef(g);
-        else if ("dijkstraNative".equalsIgnoreCase(algoStr))
+        else if ("dijkstraNative".equalsIgnoreCase(algoStr))                  
             algo = new DijkstraBidirection(g);
         else if ("dijkstra".equalsIgnoreCase(algoStr))
             algo = new DijkstraSimple(g);

File: src/main/java/com/graphhopper/util/EdgeWrapper.java
Patch:
@@ -111,6 +111,7 @@ private void resize(int cap) {
     }
 
     public void clear() {
+        refCounter = 0;
         Arrays.fill(weights, 0);
         Arrays.fill(nodes, 0);
         Arrays.fill(parents, 0);

File: src/main/java/com/graphhopper/routing/DijkstraSimple.java
Patch:
@@ -16,6 +16,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.coll.MyBitSet;
+import com.graphhopper.coll.MyDijkstraHeap;
 import com.graphhopper.coll.MyTBitSet;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
@@ -32,6 +33,7 @@ public class DijkstraSimple extends AbstractRoutingAlgorithm {
     protected MyBitSet visited = new MyTBitSet();
     private TIntObjectMap<EdgeEntry> map = new TIntObjectHashMap<EdgeEntry>();
     private PriorityQueue<EdgeEntry> heap = new PriorityQueue<EdgeEntry>();
+    ;
     private int from;
 
     public DijkstraSimple(Graph graph) {

File: src/main/java/com/graphhopper/reader/OSMReaderHelper.java
Patch:
@@ -93,7 +93,7 @@ public String getStorageInfo(GraphStorage storage) {
                 + "|" + storage.getVersion();
     }
 
-    public void freeNodeMap() {
+    public void cleanup() {
     }
 
     public void startWayProcessing() {

File: src/main/java/com/graphhopper/reader/OSMReaderHelperDoubleParse.java
Patch:
@@ -93,7 +93,7 @@ public void startWayProcessing() {
     }
 
     @Override
-    public void freeNodeMap() {
+    public void cleanup() {
         osmIdToIndexMap = null;
     }
 

File: src/main/java/com/graphhopper/reader/OSMReaderHelperSingleParse.java
Patch:
@@ -77,7 +77,7 @@ public boolean addEdge(long nodeIdFrom, long nodeIdTo, int flags, DistanceCalc c
     }
 
     @Override
-    public void freeNodeMap() {
+    public void cleanup() {
         osmIdToIndexMap = null;
     }
 }

File: src/main/java/com/graphhopper/storage/Location2IDQuadtree.java
Patch:
@@ -129,7 +129,6 @@ void initAlgo(int lat, int lon) {
         this.latSize = lat;
         this.lonSize = lon;
         BBox b = g.getBounds();
-        logger.info("bounds:" + b + ", latSize:" + lat + ", lonSize:" + lon + ", calc:" + dist.toString());
         algo = new LinearKeyAlgo(lat, lon).setInitialBounds(b.minLon, b.maxLon, b.minLat, b.maxLat);
         maxNormRasterWidthKm = dist.normalizeDist(Math.max(dist.calcDist(b.minLat, b.minLon, b.minLat, b.maxLon),
                 dist.calcDist(b.minLat, b.minLon, b.maxLat, b.minLon)) / Math.sqrt(getCapacity()));

File: src/main/java/com/graphhopper/util/DistanceCalc.java
Patch:
@@ -17,7 +17,6 @@
 
 import com.graphhopper.util.shapes.BBox;
 import static java.lang.Math.*;
-import java.util.Arrays;
 
 /**
  * Calculates the distance of two points on earth.

File: src/main/java/com/graphhopper/util/DouglasPeucker.java
Patch:
@@ -67,8 +67,8 @@ public int simplify(TIntArrayList points, int fromIndex, int lastIndex) {
             int tmpIndex = points.get(i);
             if (tmpIndex == EMPTY)
                 continue;
-            double lat = g.getLatitude(i);
-            double lon = g.getLongitude(i);
+            double lat = g.getLatitude(tmpIndex);
+            double lon = g.getLongitude(tmpIndex);
             double dist = calc.calcNormalizedEdgeDistance(lat, lon, firstLat, firstLon, lastLat, lastLon);
             if (maxDist < dist) {
                 indexWithMaxDist = i;

File: src/main/java/com/graphhopper/coll/OSMIDSegmentedMap.java
Patch:
@@ -30,7 +30,7 @@ public class OSMIDSegmentedMap {
     private int bucketSize;
     private long[] keys;
     private VLongStorage[] buckets;
-    private long lastKey = 1;
+    private long lastKey = -1;
     private long lastValue = -1;
     private int currentBucket = 0;
     private int currentIndex = -1;

File: src/main/java/com/graphhopper/storage/DefaultStorage.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.graphhopper.storage;
 
-import com.graphhopper.coll.OSMIDMap;
 import com.graphhopper.coll.OSMIDSegmentedMap;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.EdgeIterator;

File: src/main/java/com/graphhopper/coll/OSMIDSegmentedMap.java
Patch:
@@ -92,7 +92,7 @@ public long get(long key) {
 
             long storedKey = keys[retBucket];
             if (storedKey == key)
-                return retBucket * bucketSize;
+                return (long) retBucket * bucketSize;
 
             VLongStorage buck = buckets[retBucket];
             long tmp = buck.getPosition();
@@ -102,7 +102,7 @@ public long get(long key) {
             for (int i = 1; i < max; i++) {
                 storedKey += buck.readVLong();
                 if (storedKey == key) {
-                    ret = retBucket * bucketSize + i;
+                    ret = (long) retBucket * bucketSize + i;
                     break;
                 } else if (storedKey > key)
                     break;
@@ -111,7 +111,7 @@ public long get(long key) {
             return ret;
         }
 
-        return retBucket * bucketSize;
+        return (long) retBucket * bucketSize;
     }
 
     public long getNoEntryValue() {

File: src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -82,7 +82,7 @@ protected EdgeIterator getEdges(Graph g, int current) {
                     return ret;
                 }
             }.start(g, start, true);
-
+            // System.out.println(start + " MAP "+map.size());
             map.put(start, integ.get());
             integ.set(0);
         }

File: src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -216,6 +216,8 @@ public int getSegments() {
 
     @Override
     public void trimTo(long capacity) {
+        if (capacity < segmentSize)
+            capacity = segmentSize;
         int remainingSegNo = (int) (capacity / segmentSize);
         if (capacity % segmentSize != 0)
             remainingSegNo++;

File: src/test/java/com/graphhopper/storage/GraphStorageTest.java
Patch:
@@ -33,7 +33,8 @@ public class GraphStorageTest extends AbstractGraphTester {
 
     @Override
     public Graph createGraph(int size) {
-        return new GraphStorage(new RAMDirectory("graphstorage")).createNew(size);
+        // reduce segment size in order to test the case where multiple segments come into the game        
+        return new GraphStorage(new RAMDirectory("graphstorage")).setSegmentSize(size / 2).createNew(size);
     }
 
     @Test
@@ -50,7 +51,7 @@ public void testCreateDuplicateEdges() {
             graph.getEdgeProps(4, 3);
             assertFalse(true);
         } catch (Exception ex) {
-        }        
+        }
         try {
             graph.getEdgeProps(0, 3);
             assertFalse(true);

File: src/main/java/com/graphhopper/storage/GraphStorageWrapper.java
Patch:
@@ -29,7 +29,7 @@ public GraphStorageWrapper(GraphStorage gs, int expectedNodes) {
 
     @Override
     public void createNew() {
-        tmp.createNew(osmIdToIndexMap.size());
+        tmp.createNew(getExpectedNodes());
     }
 
     @Override

File: src/main/java/com/graphhopper/util/GraphUtility.java
Patch:
@@ -309,7 +309,7 @@ public static int getToNode(Graph g, int edge, int endNode) {
         return endNode;        
     }
         
-    public static EdgeSkipIterator EMPTY = new EdgeSkipIterator() {
+    public static final EdgeSkipIterator EMPTY = new EdgeSkipIterator() {
 
         @Override public int skippedEdge() {
             throw new UnsupportedOperationException("Not supported yet.");

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -132,7 +132,7 @@ else if (algo instanceof AStarBidirection)
         Random rand = new Random(123);
         StopWatch sw = new StopWatch();
 
-        System.out.println("cap:" + ((GraphStorage) unterfrankenGraph).capacity());
+        // System.out.println("cap:" + ((GraphStorage) unterfrankenGraph).capacity());
         for (int i = 0; i < runs; i++) {
             double fromLat = rand.nextDouble() * (maxLat - minLat) + minLat;
             double fromLon = rand.nextDouble() * (maxLon - minLon) + minLon;

File: src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
Patch:
@@ -19,7 +19,6 @@
 import com.graphhopper.routing.DijkstraBidirectionRef;
 import com.graphhopper.routing.DijkstraSimple;
 import com.graphhopper.routing.Path;
-import com.graphhopper.routing.ch.Path4CH;
 import com.graphhopper.routing.PathBidirRef;
 import com.graphhopper.routing.RoutingAlgorithm;
 import com.graphhopper.routing.util.AlgorithmPreparation;

File: src/main/java/com/graphhopper/reader/PrinctonReader.java
Patch:
@@ -15,7 +15,6 @@
  */
 package com.graphhopper.reader;
 
-import com.graphhopper.routing.util.CarStreetType;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.Helper;
 import java.io.BufferedReader;

File: src/main/java/com/graphhopper/routing/Path.java
Patch:
@@ -34,7 +34,7 @@
  */
 public class Path {
 
-    protected static double INIT_VALUE = Double.MAX_VALUE;
+    protected final static double INIT_VALUE = Double.MAX_VALUE;
     protected Graph g;
     protected WeightCalculation weightCalculation;
     protected double weight;

File: src/main/java/com/graphhopper/routing/util/FastestCalc.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class FastestCalc implements WeightCalculation {
 
-    public static FastestCalc DEFAULT = new FastestCalc();
+    public final static FastestCalc DEFAULT = new FastestCalc();
 
     private FastestCalc() {
     }

File: src/main/java/com/graphhopper/routing/util/PrepareContractionHierarchies.java
Patch:
@@ -28,6 +28,7 @@
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeSkipIterator;
 import com.graphhopper.util.GraphUtility;
+import com.graphhopper.util.NumHelper;
 import com.graphhopper.util.StopWatch;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -333,7 +334,7 @@ void internalFindShortcuts(List<NodeCH> goalNodes, int u, int uOrigEdge) {
             // minor improvement: if (shortcuts.containsKey((long) n.endNode * refs.length + u)) 
             // then two shortcuts with the same nodes (u<->n.endNode) exists => check current shortcut against both
 
-            if (sc == null || sc.distance != n.distance) {
+            if (sc == null || !NumHelper.equals(sc.distance, n.distance)) {
                 sc = new Shortcut(u, n.endNode, n.distance);
                 shortcuts.put(edgeId, sc);
                 sc.originalEdges = uOrigEdge + n.originalEdges;

File: src/main/java/com/graphhopper/routing/util/ShortestCalc.java
Patch:
@@ -22,7 +22,7 @@
  */
 public class ShortestCalc implements WeightCalculation {
 
-    public static ShortestCalc DEFAULT = new ShortestCalc();
+    public final static ShortestCalc DEFAULT = new ShortestCalc();
 
     @Override public double getWeight(EdgeIterator iter) {
         return iter.distance();

File: src/main/java/com/graphhopper/storage/AbstractDataAccess.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractDataAccess implements DataAccess {
     // reserve some space for downstream usage (in classes using/exting this)
     protected static final int HEADER_OFFSET = 20 * 4 + 20;
     protected int header[] = new int[(HEADER_OFFSET - 20) / 4];
-    protected static byte[] EMPTY = new byte[1024];
+    final static byte[] EMPTY = new byte[1024];
     protected int segmentSize = SEGMENT_SIZE_DEFAULT;
 
     @Override

File: src/main/java/com/graphhopper/storage/GraphStorage.java
Patch:
@@ -402,7 +402,7 @@ public EdgeIterable(int edge) {
 
         public EdgeIterable(int node, boolean in, boolean out) {
             this.fromNode = node;
-            this.nextEdge = nodes.getInt(node * nodeEntrySize);
+            this.nextEdge = nodes.getInt((long) node * nodeEntrySize);
             this.in = in;
             this.out = out;
         }
@@ -521,7 +521,7 @@ void internalEdgeRemove(long edgeToDeletePointer, long edgeToUpdatePointer, int
         long linkPos = getLinkPosInEdgeArea(node, otherNode, edgeToDeletePointer);
         int nextEdge = edges.getInt(linkPos);
         if (edgeToUpdatePointer < 0) {
-            nodes.setInt(node * nodeEntrySize, nextEdge);
+            nodes.setInt((long) node * nodeEntrySize, nextEdge);
         } else {
             long link = getLinkPosInEdgeArea(node, otherNode, edgeToUpdatePointer);
             edges.setInt(link, nextEdge);

File: src/main/java/com/graphhopper/storage/ListOfArrays.java
Patch:
@@ -42,8 +42,8 @@ public boolean loadExisting() {
     }
 
     public ListOfArrays createNew(int integers) {
-        refs.createNew(integers * 4);
-        entries.createNew(integers * 4);
+        refs.createNew((long) integers * 4);
+        entries.createNew((long) integers * 4);
         return this;
     }
 

File: src/main/java/com/graphhopper/storage/Location2IDPreciseIndex.java
Patch:
@@ -23,6 +23,7 @@
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCosProjection;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.NumHelper;
 import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.XFirstSearch;
 import com.graphhopper.util.shapes.BBox;
@@ -49,7 +50,6 @@
  */
 public class Location2IDPreciseIndex implements Location2IDIndex {
 
-    private Logger logger = LoggerFactory.getLogger(getClass());
     private static final String LIST_NAME = "loc2idIndex";
     private ListOfArrays index;
     private Graph g;
@@ -196,7 +196,8 @@ void initIndex() {
                         // TODO use bresenhamLine
                         for (double tryLat = tmpLat; tryLat < connLat + latWidth; tryLat += latWidth) {
                             for (double tryLon = tmpLon; tryLon < connLon + lonWidth; tryLon += lonWidth) {
-                                if (tryLon == tmpLon && tryLat == tmpLat || tryLon == connLon && tryLat == connLat)
+                                if (NumHelper.equals(tryLon, tmpLon) && NumHelper.equals(tryLat, tmpLat)
+                                        || NumHelper.equals(tryLon, connLon) && NumHelper.equals(tryLat, connLat))
                                     continue;
                                 added++;
                                 add((int) algo.encode(tryLat, tryLon), connNode);

File: src/main/java/com/graphhopper/storage/MMapDirectory.java
Patch:
@@ -33,7 +33,7 @@ private MMapDirectory() {
 
     public MMapDirectory(String _location) {
         this.location = _location;
-        if (location.isEmpty() || location == null)
+        if (location == null || location.isEmpty())
             location = new File("").getAbsolutePath();
         if (!location.endsWith("/"))
             location += "/";

File: src/main/java/com/graphhopper/util/CmdArgs.java
Patch:
@@ -15,8 +15,10 @@
  */
 package com.graphhopper.util;
 
+import java.io.FileInputStream;
 import java.io.FileReader;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -102,7 +104,7 @@ String get(String key) {
 
     public static CmdArgs readFromConfig(String fileStr) throws IOException {
         Map<String, String> map = new LinkedHashMap<String, String>();
-        Helper.loadProperties(map, new FileReader(fileStr));
+        Helper.loadProperties(map, new InputStreamReader(new FileInputStream(fileStr), "UTF-8"));
         CmdArgs args = new CmdArgs();
         args.merge(map);
         return args;

File: src/test/java/com/graphhopper/routing/util/PrepareContractionHierarchiesTest.java
Patch:
@@ -244,7 +244,7 @@ public void testFindShortcuts_Roundabout() {
         g.shortcut(4, 6, 2, CarStreetType.flagsDefault(false), 5);
         g.shortcut(6, 4, 3, CarStreetType.flagsDefault(false), 8);
 
-        PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().setGraph(g);
+        PrepareContractionHierarchies prepare = new PrepareContractionHierarchies().setGraph(g).initFromGraph();
         // there should be two different shortcuts for both directions!
         Collection<Shortcut> sc = prepare.findShortcuts(4);
         assertEquals(2, sc.size());

File: src/main/java/com/graphhopper/storage/MMapDataAccess.java
Patch:
@@ -155,10 +155,9 @@ public boolean loadExisting() {
 
     @Override
     public void flush() {
+        if (closed)
+            throw new IllegalStateException("already closed");
         try {
-            if (closed)
-                throw new IllegalStateException("already closed");
-
             if (!segments.isEmpty() && segments.get(0) instanceof MappedByteBuffer) {
                 for (ByteBuffer bb : segments) {
                     ((MappedByteBuffer) bb).force();

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -106,8 +106,9 @@ public static RoutingAlgorithm[] createAlgos(final Graph g) {
         PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies(graphCH);
         prepareCH.doWork();
         return new RoutingAlgorithm[]{
-            new AStar(g), new AStarBidirection(g), new DijkstraBidirectionRef(g), new DijkstraBidirection(g),
-            new DijkstraSimple(g), prepare.createAlgo(), astarSimpleSC, prepareCH.createAlgo()};
+                    new AStar(g), new AStarBidirection(g), new DijkstraBidirectionRef(g), new DijkstraBidirection(g),
+                    new DijkstraSimple(g), prepare.createAlgo(), astarSimpleSC,
+                    prepareCH.createAlgo()};
     }
     private Logger logger = LoggerFactory.getLogger(getClass());
 

File: src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -16,7 +16,6 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.reader.OSMReader;
-import com.graphhopper.routing.util.AlgorithmPreparation;
 import com.graphhopper.routing.util.RoutingAlgorithmSpecialAreaTests;
 import com.graphhopper.routing.util.TestAlgoCollector;
 import com.graphhopper.storage.Graph;
@@ -83,8 +82,7 @@ void runAlgo(TestAlgoCollector testCollector, String osmFile,
             Helper.deleteDir(new File(graphFile));
             Graph g = OSMReader.osm2Graph(new CmdArgs().put("osmreader.osm", osmFile).
                     put("osmreader.graph-location", graphFile).
-                    put("osmreader.dataaccess", "inmemory").
-                    put("osmreader.levelgraph", "true"));
+                    put("osmreader.dataaccess", "inmemory"));
 
             Location2IDIndex idx = new Location2IDQuadtree(g, new RAMDirectory("loc2idIndex")).prepareIndex(2000);
             RoutingAlgorithm[] algos = RoutingAlgorithmSpecialAreaTests.createAlgos(g);

File: src/main/java/com/graphhopper/routing/Path4CH.java
Patch:
@@ -38,7 +38,8 @@ protected void handleSkippedNode(EdgeSkipIterator mainIter) {
     }
 
     private void expand(int from, int to, int skippedNode) {
-        if (skippedNode <= 0)
+        // TODO smaller or equal to 0
+        if (skippedNode < 0)
             return;
 
         if (reverse) {

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
Patch:
@@ -128,7 +128,7 @@ public static AlgorithmPreparation[] createAlgos(final Graph g) {
                             return ((AStarBidirection) this.createAStar()).setApproximation(false);
                         }
                     },
-//  TODO NOW new PrepareContractionHierarchies((LevelGraphStorage) g.copyTo(new LevelGraphStorage(new RAMDirectory()).createNew(10)))
+                    new PrepareContractionHierarchies((LevelGraphStorage) g.copyTo(new LevelGraphStorage(new RAMDirectory()).createNew(10)))
                 };
     }
     private Logger logger = LoggerFactory.getLogger(getClass());

File: src/main/java/com/graphhopper/util/GraphUtility.java
Patch:
@@ -176,7 +176,7 @@ public static String getNodeInfo(LevelGraph g, int nodeId) {
         EdgeSkipIterator iter = g.getOutgoing(nodeId);
         String str = nodeId + ":" + g.getLatitude(nodeId) + "," + g.getLongitude(nodeId) + "\n";
         while (iter.next()) {
-            str += "  ->" + iter.node() + "(" + iter.skippedNode() + ") \t" + BitUtil.toBitString(iter.flags(), 8) + "\n";
+            str += "  ->" + iter.node() + "(" + iter.skippedNode() + " " + iter.edge() + ") \t" + BitUtil.toBitString(iter.flags(), 8) + "\n";
         }
         return str;
     }

File: src/test/java/com/graphhopper/routing/util/PrepareContractionHierarchiesTest.java
Patch:
@@ -139,7 +139,7 @@ public void testDirectedGraph() {
         int old = GraphUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(g);
         prepare.doWork();
-        PrepareLongishPathShortcutsTest.printEdges(g);
+        // PrepareLongishPathShortcutsTest.printEdges(g);
         assertEquals(old + 2, GraphUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.clear().calcPath(4, 2);

File: src/main/java/com/graphhopper/routing/Path4Shortcuts.java
Patch:
@@ -62,9 +62,7 @@ protected void handleSkippedNode(EdgeSkipIterator iter) {
             int tmp = from;
             from = to;
             to = tmp;
-        } 
-        else
-            flags = CarStreetType.swapDirection(flags);
+        }
 
         // find edge 'from'-skippedNode
         boolean success = expand(from, to, iter.skippedNode(), flags, false);

File: src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -67,8 +67,8 @@ public Path extract() {
         currEdge = edgeTo;
         int tmpEdge = currEdge.edge;
         while (tmpEdge != EdgeIterator.NO_EDGE) {
-            calcWeight(g.getEdgeProps(tmpEdge, currEdge.endNode));
             currEdge = currEdge.parent;
+            calcWeight(g.getEdgeProps(tmpEdge, currEdge.endNode));
             add(currEdge.endNode);
             tmpEdge = currEdge.edge;
         }

File: src/main/java/com/graphhopper/routing/util/PrepareContractionHierarchies.java
Patch:
@@ -318,7 +318,7 @@ void internalFindShortcuts(List<NodeCH> goalNodes, int u, int uOrigEdge) {
                 sc = new Shortcut(u, n.endNode, n.distance);
                 shortcuts.put(edgeId, sc);
                 sc.originalEdges = uOrigEdge + n.originalEdges;
-            } else {                
+            } else {
                 // the shortcut already exists in the current collection (different direction)
                 // but has identical length so change the flags!
                 sc.flags = scBothDir;

File: src/test/java/com/graphhopper/routing/util/PrepareLongishPathShortcutsTest.java
Patch:
@@ -287,7 +287,7 @@ public void testIntroduceShortcuts() {
     public static void printEdges(LevelGraph g) {
         EdgeSkipIterator iter = g.getAllEdges();
         while (iter.next()) {
-            System.out.println(iter.fromNode() + "->" + iter.node()
+            System.out.println(iter.fromNode() + "<->" + iter.node()
                     + ", dist: " + (float) iter.distance() + ", skip:" + iter.skippedNode()
                     + ", level:" + g.getLevel(iter.fromNode()) + "->" + g.getLevel(iter.node())
                     + ", origEdges:" + iter.originalEdges() + ", bothDir:" + CarStreetType.isBoth(iter.flags()));

File: src/main/java/com/graphhopper/routing/PathBidir.java
Patch:
@@ -46,9 +46,6 @@ public PathBidir(Graph g, EdgeWrapper edgesFrom, EdgeWrapper edgesTo,
      */
     @Override
     public Path extract() {
-        if (weight == INIT_VALUE)
-            return null;
-
         weight = 0;
         if (fromRef < 0 || toRef < 0)
             return null;

File: src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -41,9 +41,6 @@ public PathBidirRef(Graph g, WeightCalculation weightCalculation) {
      */
     @Override
     public Path extract() {
-        if (weight == INIT_VALUE)
-            return null;
-
         weight = 0;
         if (edgeFrom == null || edgeTo == null)
             return null;

File: src/main/java/com/graphhopper/util/EdgeWrapper.java
Patch:
@@ -91,7 +91,7 @@ public int getParent(int ref) {
         return parents[ref];
     }
     
-    public int getEdgeId_(int ref) {
+    public int getEdgeId(int ref) {
         return edgeIds[ref];
     }
 

File: src/test/java/com/graphhopper/routing/RoutingAlgorithmIntegrationTest.java
Patch:
@@ -90,9 +90,8 @@ public void testMonacoParallel() throws IOException {
         List<Thread> threads = new ArrayList<Thread>();
         final AtomicInteger integ = new AtomicInteger(0);
         int MAX = 100;
-        int algosLength = -1;
         AlgorithmPreparation[] preparations = RoutingAlgorithmSpecialAreaTests.createAlgos(g);
-        algosLength = preparations.length;
+        int algosLength = preparations.length;
         for (final AlgorithmPreparation prepare : preparations) {
             prepare.doWork();
             for (int no = 0; no < MAX; no++) {

File: src/test/java/com/graphhopper/routing/util/PrepareContractionHierarchiesTest.java
Patch:
@@ -105,7 +105,7 @@ public void testAddShortcuts() {
         int old = GraphUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(g);
         prepare.doWork();
-        PrepareLongishPathShortcutsTest.printEdges(g);
+        // PrepareLongishPathShortcutsTest.printEdges(g);
         assertEquals(old, GraphUtility.count(g.getAllEdges()));
 //        assertEquals(3, GraphUtility.count(g.getEdges(5)));
 //        assertEquals(4, GraphUtility.count(g.getEdges(0)));

File: src/main/java/com/graphhopper/routing/util/PrepareContractionHierarchies.java
Patch:
@@ -288,8 +288,7 @@ Collection<Shortcut> findShortcuts(int v) {
                 long edgeId = (long) u * refs.length + n.node;
                 Shortcut sc = shortcuts.get(edgeId);
                 if (sc == null) {
-                    edgeId = (long) n.node * refs.length + u;
-                    sc = shortcuts.get(edgeId);
+                    sc = shortcuts.get((long) n.node * refs.length + u);
                 } else if (shortcuts.containsKey((long) n.node * refs.length + u))
                     throw new IllegalStateException("duplicate edge should be overwritten: " + u + "->" + n.node);
 

File: src/test/java/com/graphhopper/routing/util/PrepareLongishPathShortcutsTest.java
Patch:
@@ -290,7 +290,7 @@ public static void printEdges(LevelGraph g) {
             System.out.println(iter.fromNode() + "->" + iter.node()
                     + ", dist: " + (float) iter.distance() + ", skip:" + iter.skippedNode()
                     + ", level:" + g.getLevel(iter.fromNode()) + "->" + g.getLevel(iter.node())
-                    + ", origEdges:" + iter.originalEdges() + ", bothDir:" + CarStreetType.isBackward(iter.flags()));
+                    + ", origEdges:" + iter.originalEdges() + ", flags:" + CarStreetType.isBoth(iter.flags()));
         }
         System.out.println("---");
     }

File: src/test/java/com/graphhopper/routing/DijkstraBidirectionSimpleShortcutsTest.java
Patch:
@@ -100,7 +100,7 @@ public void testDirected() {
             }
         }.calcPath(17, 23);
         assertEquals(6, p.locations());
-        assertEquals(Arrays.asList(17, 19, 21, 20, 22, 23), p.toNodeList());
+        assertEquals(Arrays.asList(17, 19, 20, 21, 22, 23), p.toNodeList());
     }
 
     @Test
@@ -124,7 +124,7 @@ public void testDirected2() {
         PrepareLongishPathShortcuts prepare = new PrepareLongishPathShortcuts(g);
         prepare.doWork();
         assertEquals(1, prepare.getShortcuts());
-        PrepareLongishPathShortcutsTest.printEdges(g);
+//        PrepareLongishPathShortcutsTest.printEdges(g);
         RoutingAlgorithm algo = prepare.createAlgo();
         Path p = algo.calcPath(0, 10);
         assertEquals(10, p.distance(), 1e-6);
@@ -163,6 +163,6 @@ public void testTwoEdgesWithDifferentSpeed() {
             }
         }.calcPath(1, 4);
         assertEquals(4, p.locations());
-        assertEquals(Arrays.asList(1, 3, 2, 4), p.toNodeList());
+        assertEquals(Arrays.asList(1, 2, 3, 4), p.toNodeList());
     }
 }

File: src/test/java/com/graphhopper/routing/Path4ShortcutsTest.java
Patch:
@@ -97,6 +97,6 @@ public void testExpandMultipleSkippedNodes() {
         path.edgeTo.prevEntry = new EdgeEntry(4, 0);
         Path p = path.extract();
         assertEquals(5, p.locations());
-        assertEquals(Arrays.asList(0, 2, 1, 3, 4), p.toNodeList());
+        assertEquals(Arrays.asList(0, 1, 2, 3, 4), p.toNodeList());
     }
 }

File: src/test/java/com/graphhopper/routing/util/PrepareContractionHierarchiesTest.java
Patch:
@@ -149,7 +149,7 @@ public void testDirectedGraph2() {
         int old = GraphUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(g);
         prepare.doWork();
-        PrepareLongishPathShortcutsTest.printEdges(g);
+        // PrepareLongishPathShortcutsTest.printEdges(g);
         assertEquals(old + 14, GraphUtility.count(g.getAllEdges()));
         RoutingAlgorithm algo = prepare.createAlgo();
 

File: src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -26,6 +26,7 @@
 public abstract class AbstractRoutingAlgorithm implements RoutingAlgorithm {
 
     protected Graph graph;
+    protected static double INIT_VALUE = Double.MAX_VALUE;
     protected WeightCalculation weightCalc = ShortestCalc.DEFAULT;
 
     public AbstractRoutingAlgorithm(Graph graph) {

File: src/main/java/com/graphhopper/routing/DijkstraBidirection.java
Patch:
@@ -112,10 +112,8 @@ public DijkstraBidirection initTo(int to) {
         if (p != null)
             return p;
 
-        int counter = 0;
         int finish = 0;
         while (finish < 2) {
-            counter++;
             finish = 0;
             if (!fillEdgesFrom())
                 finish++;

File: src/main/java/com/graphhopper/routing/util/PrepareLongishPathShortcuts.java
Patch:
@@ -51,6 +51,7 @@ public int getShortcuts() {
     /**
      * Create short cuts to skip 2 degree nodes and make graph traversal for routing more efficient
      */
+    @Override
     public void doWork() {
         newShortcuts = 0;
         int locs = g.getNodes();

File: src/main/java/com/graphhopper/util/GraphUtility.java
Patch:
@@ -24,7 +24,6 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.Location2IDPreciseIndex;
-import com.graphhopper.storage.MMapGraph;
 import com.graphhopper.storage.LevelGraphStorage;
 import com.graphhopper.storage.RAMDirectory;
 import gnu.trove.list.TIntList;

File: src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -18,9 +18,12 @@
 import com.graphhopper.reader.PrinctonReader;
 import com.graphhopper.routing.util.CarStreetType;
 import com.graphhopper.routing.util.FastestCalc;
+import com.graphhopper.routing.util.PrepareLongishPathShortcuts;
+import com.graphhopper.routing.util.PrepareLongishPathShortcutsTest;
 import com.graphhopper.routing.util.ShortestCalc;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.storage.LevelGraph;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.util.StopWatch;
 import java.io.IOException;

File: src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -286,8 +286,6 @@ public void testDirectedGraphBug2() {
         Graph graph = createGraph(10000);
 
         String bigFile = "10000EWD.txt.gz";
-
-//        String bigFile = "largeEWD.txt.gz";
         new PrinctonReader(graph).setStream(new GZIPInputStream(PrinctonReader.class.getResourceAsStream(bigFile), 8 * (1 << 10))).read();
         graph = prepareGraph(graph);
         StopWatch sw = new StopWatch();

File: src/main/java/com/graphhopper/reader/OSMReader.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.graphhopper.routing.util.AcceptStreet;
 import com.graphhopper.routing.util.PrepareContractionHierarchies;
-import com.graphhopper.routing.util.PrepareRoutingShortcuts;
+import com.graphhopper.routing.util.PrepareLongishPathShortcuts;
 import com.graphhopper.routing.util.PrepareRoutingSubnetworks;
 import com.graphhopper.routing.util.RoutingAlgorithmIntegrationTests;
 import com.graphhopper.storage.Directory;
@@ -182,7 +182,7 @@ public void optimize() {
         Graph g = storage.getGraph();
         if (g instanceof LevelGraph) {
             if (simpleShortcuts)
-                new PrepareRoutingShortcuts((LevelGraph) g).doWork();
+                new PrepareLongishPathShortcuts((LevelGraph) g).doWork();
             if (chShortcuts)
                 new PrepareContractionHierarchies((LevelGraph) g).doWork();
         }

File: src/main/java/com/graphhopper/routing/PathBidirRef.java
Patch:
@@ -67,8 +67,8 @@ public Path extract() {
         while (currEdge.prevEntry != null) {
             int tmpTo = currEdge.node;
             currEdge = currEdge.prevEntry;
-            add(currEdge.node);
             calcWeight(g.getOutgoing(tmpTo), currEdge.node);
+            add(currEdge.node);
         }
 
         return this;

File: src/main/java/com/graphhopper/routing/util/PrepareLongishPathShortcuts.java
Patch:
@@ -29,13 +29,13 @@
  *
  * @author Peter Karich
  */
-public class PrepareRoutingShortcuts {
+public class PrepareLongishPathShortcuts {
 
     private Logger logger = LoggerFactory.getLogger(getClass());
     private final LevelGraph g;
     private int newShortcuts;
 
-    public PrepareRoutingShortcuts(LevelGraph g) {
+    public PrepareLongishPathShortcuts(LevelGraph g) {
         this.g = g;
     }
 

File: src/main/java/com/graphhopper/routing/util/RoutingAlgorithmIntegrationTests.java
Patch:
@@ -22,7 +22,7 @@
 import com.graphhopper.routing.DijkstraSimple;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.PathBidirRef;
-import com.graphhopper.routing.Path4Level;
+import com.graphhopper.routing.Path4Shortcuts;
 import com.graphhopper.routing.RoutingAlgorithm;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.Graph;
@@ -115,7 +115,7 @@ static RoutingAlgorithm createLevelDijkstraBi(LevelGraph g) {
 //
 //            @Override protected PathBidirRef createPath() {
 //                // expand skipped nodes
-//                return new Path4Level(graph, weightCalc);
+//                return new Path4Shortcuts(graph, weightCalc);
 //            }
 //        };
 //        dijkstraBi.setEdgeFilter(new EdgeLevelFilter(g));
@@ -131,7 +131,7 @@ public String toString() {
 
             @Override protected PathBidirRef createPath() {
                 // expand skipped nodes
-                return new Path4Level(graph, weightCalc);
+                return new Path4Shortcuts(graph, weightCalc);
             }
         }.setApproximation(true);
         astar.setEdgeFilter(new EdgeLevelFilter(g));

File: src/main/java/com/graphhopper/routing/util/WeightCalculation.java
Patch:
@@ -29,4 +29,6 @@ public interface WeightCalculation {
     double apply(double currDistToGoal);
 
     double apply(double currDistToGoal, int flags);
+
+    double revert(double weight, int flags);
 }

File: src/test/java/com/graphhopper/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -16,7 +16,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.MemoryGraphSafe;
+import java.util.Arrays;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -41,11 +41,12 @@ public void testAddSkipNodes() {
         db.addSkipNode(5);
         p = db.calcPath(0, 4);
         assertFalse(p.toString(), p.contains(5));
+        assertEquals(Arrays.asList(0, 2, 3, 4), p.toNodeList());        
     }
 
     @Test
     public void testCannotCalculateSP2() {
-        Graph g = new MemoryGraphSafe(10);
+        Graph g = createGraph(10);
         g.edge(0, 1, 1, false);
         g.edge(1, 2, 1, false);
 

File: src/test/java/com/graphhopper/routing/PathBidirRefTest.java
Patch:
@@ -43,8 +43,8 @@ public void testExtract() {
     @Test
     public void testExtract2() {
         Graph g = new MemoryGraphSafe(10);
-        g.edge(1, 2, 10, true);
-        g.edge(2, 3, 20, true);
+        g.edge(1, 2, 10, false);
+        g.edge(2, 3, 20, false);
         PathBidirRef pw = new PathBidirRef(g, ShortestCalc.DEFAULT);
         pw.edgeFrom = new EdgeEntry(2, 10);
         pw.edgeFrom.prevEntry = new EdgeEntry(1, 0);

File: src/test/java/com/graphhopper/routing/util/PrepareContractionHierarchiesTest.java
Patch:
@@ -111,7 +111,7 @@ public void testAddShortcuts() {
 
     @Test
     public void testMoreComplexGraph() {
-        LevelGraph g = PrepareRoutingShortcutsTest.createShortcutsGraph();
+        LevelGraph g = PrepareLongishPathShortcutsTest.createShortcutsGraph();
         int old = GraphUtility.count(g.getAllEdges());
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(g);
         prepare.doWork();

File: src/main/java/com/graphhopper/storage/Location2IDQuadtree.java
Patch:
@@ -175,6 +175,7 @@ private MyBitSet fillQuadtree(int size) {
     private int fillEmptyIndices(MyBitSet filledIndices) {
         int len = latSize * lonSize;
         DataAccess indexCopy = new RAMDataAccess();
+        indexCopy.createNew(index.capacity());
         MyBitSet indicesCopy = new MyBitSetImpl(len);
         int initializedCounter = filledIndices.getCardinality();
         // fan out initialized entries to avoid "nose-artifacts"
@@ -185,6 +186,8 @@ private int fillEmptyIndices(MyBitSet filledIndices) {
         for (int i = filledIndices.next(0); i >= 0; i = filledIndices.next(i + 1)) {
             takenFrom[i] = i;
         }
+        if (initializedCounter == 0)
+            throw new IllegalStateException("at least one entry has to be != null, which should have happened in initIndex");
         int tmp = initializedCounter;
         while (initializedCounter < len) {
             index.copyTo(indexCopy);
@@ -229,9 +232,6 @@ private int fillEmptyIndices(MyBitSet filledIndices) {
                     initializedCounter++;
                 }
             }
-
-            if (initializedCounter == 0)
-                throw new IllegalStateException("at least one entry has to be != null, which should have happened in initIndex");
         }
 
         return initializedCounter - tmp;

File: src/main/java/de/jetsli/graph/storage/Location2IDFullIndex.java
Patch:
@@ -15,8 +15,8 @@
  */
 package de.jetsli.graph.storage;
 
-import de.jetsli.graph.util.DistanceCosProjection;
 import de.jetsli.graph.util.DistanceCalc;
+import de.jetsli.graph.util.DistanceCosProjection;
 import de.jetsli.graph.util.shapes.Circle;
 
 /**

File: src/main/java/de/jetsli/graph/storage/MMapDirectory.java
Patch:
@@ -15,7 +15,6 @@
  */
 package de.jetsli.graph.storage;
 
-import de.jetsli.graph.util.Helper;
 import java.io.File;
 import java.util.HashMap;
 import java.util.Map;
@@ -28,7 +27,8 @@ public class MMapDirectory implements Directory {
     private Map<String, MMapDataAccess> map = new HashMap<String, MMapDataAccess>();
     private String location;
 
-    public MMapDirectory() {
+    // reserve the empty constructor for direct mapped memory
+    private MMapDirectory() {
     }
 
     public MMapDirectory(String _location) {
@@ -55,7 +55,6 @@ public DataAccess createDataAccess(String name) {
     public String getLocation() {
         return location;
     }
-
 //    @Override
 //    public void clear() {
 //        Helper.deleteDir(new File(location));

File: src/test/java/de/jetsli/graph/routing/RoutingAlgorithmRealTest.java
Patch:
@@ -19,6 +19,7 @@
 import de.jetsli.graph.routing.util.RoutingAlgorithmIntegrationTests;
 import de.jetsli.graph.routing.util.TestAlgoCollector;
 import de.jetsli.graph.storage.Graph;
+import de.jetsli.graph.storage.Location2IDFullIndex;
 import de.jetsli.graph.storage.Location2IDIndex;
 import de.jetsli.graph.storage.Location2IDQuadtree;
 import de.jetsli.graph.storage.RAMDirectory;
@@ -68,7 +69,7 @@ public void testMonaco() {
     @Test
     public void testAndorra() {
         List<OneRun> list = new ArrayList<OneRun>();
-        list.add(new OneRun(42.56819, 1.603231, 42.571034, 1.520662, 19.240, 814));
+        list.add(new OneRun(42.56819, 1.603231, 42.571034, 1.520662, 24.0626, 991));
         list.add(new OneRun(42.529176, 1.571302, 42.571034, 1.520662, 16.452, 603));
         // if we would use double for lat+lon we would get path length 16.466 instead of 16.452
         runAlgo(testCollector, "files/andorra.osm.gz", "target/graph-andorra", list);
@@ -81,7 +82,6 @@ public void testMonacoParallel() throws IOException {
         String graphFile = "target/graph-monaco";
         Helper.deleteDir(new File(graphFile));
         Graph g = OSMReader.osm2Graph(new CmdArgs().put("osm", "files/monaco.osm.gz").put("graph", graphFile));
-        // final Location2IDIndex idx = new Location2IDQuadtree(g).prepareIndex(2000);
         final Location2IDIndex idx = new Location2IDQuadtree(g, new RAMDirectory("loc2idIndex")).prepareIndex(2000);
         final List<OneRun> instances = createMonacoInstances();
         List<Thread> threads = new ArrayList<Thread>();

File: src/main/java/de/jetsli/graph/util/EdgeWrapper.java
Patch:
@@ -93,7 +93,7 @@ private void resize(int cap) {
         weights = Arrays.copyOf(weights, cap);
         nodes = Arrays.copyOf(nodes, cap);
         links = Arrays.copyOf(links, cap);
-        // node2edge.ensureCapacity(cap);
+        node2edge.ensureCapacity(cap);
     }
 
     public void clear() {

File: src/main/java/de/jetsli/graph/storage/Directory.java
Patch:
@@ -23,4 +23,6 @@ public interface Directory {
     String getLocation();
     
     DataAccess createDataAccess(String name);
+    
+    void clear();
 }

File: src/main/java/de/jetsli/graph/storage/GraphStorageWrapper.java
Patch:
@@ -39,7 +39,6 @@ public GraphStorageWrapper(String file, int expectedNodes, boolean mmap) {
 
     @Override
     public void createNew() {
-        Helper.deleteDir(new File(folder));
         tmp.createNew(osmIdToIndexMap.size());
     }
 
@@ -49,7 +48,7 @@ public boolean loadExisting() {
     }
 
     @Override
-    public void flush() {
+    public void flush() {        
         tmp.flush();
         super.flush();
     }

File: src/test/java/de/jetsli/graph/storage/DataAccessTest.java
Patch:
@@ -140,18 +140,18 @@ public void testCopy() {
         da.setInt(123, 321);
         da.setInt(1000, 1111);
 
-        DataAccess da2 = createDataAccess(location);
+        DataAccess da2 = createDataAccess(location + "2");
         da2.createNew(10);
         da.copyTo(da2);
         assertEquals(1, da2.getInt(1));
         assertEquals(321, da2.getInt(123));
         assertEquals(1111, da2.getInt(1000));
-        
+
         da2.setInt(1, 2);
         assertEquals(2, da2.getInt(1));
         da2.flush();
         da.flush();
-        // make sure this is independent!
+        // make sure they are independent!
         assertEquals(1, da.getInt(1));
     }
 }

File: src/test/java/de/jetsli/graph/storage/GraphStorageTest.java
Patch:
@@ -60,7 +60,7 @@ public void testIdenticalNodes() {
     }
 
     @Test
-    public void testSave() throws IOException {
+    public void testSave_and_fileFormat() throws IOException {
         String tmpDir = "./target/tmp/";
         Helper.deleteDir(new File(tmpDir));
         GraphStorage graph = new GraphStorage(new RAMDirectory(tmpDir, true)).createNew(10);
@@ -75,7 +75,7 @@ public void testSave() throws IOException {
         checkGraph(graph);
         graph.flush();
 
-        graph = new GraphStorage(new RAMDirectory(tmpDir, true));
+        graph = new GraphStorage(new MMapDirectory(tmpDir));
         assertTrue(graph.loadExisting());
         assertEquals(3, graph.getNodes());
         assertEquals(3, graph.getNodes());

File: src/test/java/de/jetsli/graph/storage/MMapDataAccessTest.java
Patch:
@@ -35,6 +35,7 @@ public void textMix() {
         assertFalse(da.loadExisting());
         da.createNew(300);
         da.setInt(7, 123);
+        da.flush();
         da.close();
         da = createDataAccess(location);
         assertTrue(da.loadExisting());

File: src/main/java/de/jetsli/graph/storage/MMapGraph.java
Patch:
@@ -462,7 +462,7 @@ public boolean hasNext() {
         }
 
         @Override public int flags() {
-            return flags;
+            return flags & 0xFF;
         }
 
         @Override public int fromNode() {

File: src/main/java/de/jetsli/graph/storage/Location2IDPreciseIndex.java
Patch:
@@ -27,7 +27,6 @@
 import de.jetsli.graph.util.XFirstSearch;
 import de.jetsli.graph.util.shapes.BBox;
 import gnu.trove.list.array.TIntArrayList;
-import gnu.trove.set.hash.TIntHashSet;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 

File: src/main/java/de/jetsli/graph/storage/MMapDataAccess.java
Patch:
@@ -98,7 +98,7 @@ protected boolean mapIt(long start, long bytes, boolean clearNew) {
                 }
                 int len = (int) (bytes % EMPTY.length);
                 if (len > 0)
-                    bBuffer.put(EMPTY, count * EMPTY.length, len);
+                    bBuffer.put(EMPTY, 0, len);
             }
             return true;
         } catch (Exception ex) {

File: src/main/java/de/jetsli/graph/storage/MMapDirectory.java
Patch:
@@ -30,12 +30,13 @@ public class MMapDirectory implements Directory {
     public MMapDirectory() {
     }
 
-    public MMapDirectory(String location) {
-        this.location = location;
+    public MMapDirectory(String _location) {
+        this.location = _location;
         if (location.isEmpty() || location == null)
             location = new File("").getAbsolutePath();
         if (!location.endsWith("/"))
             location += "/";
+        new File(location).mkdirs();
     }
 
     @Override

File: src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -52,8 +52,8 @@ public static void main(String[] strs) throws Exception {
         } else if (args.getBool("shortestpath", false)) {
             String algo = args.get("algo", "dijkstra");
             //warmup
-            tests.runShortestPathPerf(50, algo);
-            tests.runShortestPathPerf(500, algo);
+            tests.runShortestPathPerf(590, algo);
+            tests.runShortestPathPerf(5000, algo);
         }
     }
     private int expectedLocs;

File: src/test/java/de/jetsli/graph/storage/ListOfArraysTest.java
Patch:
@@ -30,7 +30,7 @@ public class ListOfArraysTest {
 
     ListOfArrays createLA() {
         RAMDirectory dir = new RAMDirectory("test");
-        return new ListOfArrays(dir, "la", 10);
+        return new ListOfArrays(dir, "la").createNew(10);
     }
 
     @Before

File: src/test/java/de/jetsli/graph/storage/MMapDataAccessTest.java
Patch:
@@ -31,9 +31,9 @@ public DataAccess createDataAccess(String location) {
     
     @Test
     public void textMix() {
-        DataAccess da = new RAMDataAccess(location);
+        DataAccess da = new RAMDataAccess(location, true);
         assertFalse(da.loadExisting());
-        da.ensureCapacity(300);
+        da.createNew(300);
         da.setInt(7, 123);
         da.close();
         da = createDataAccess(location);

File: src/test/java/de/jetsli/graph/storage/RAMDataAccessTest.java
Patch:
@@ -23,6 +23,6 @@ public class RAMDataAccessTest extends DataAccessTest {
 
     @Override
     public DataAccess createDataAccess(String location) {
-        return new RAMDataAccess(location);
+        return new RAMDataAccess(location, true);
     }    
 }

File: core/src/main/java/de/jetsli/graph/routing/AStar.java
Patch:
@@ -111,7 +111,7 @@ public AStar setFast(boolean fast) {
             int tmpFrom = currEdge.node;
             path.add(tmpFrom);
             currEdge = (AStarEdge) currEdge.prevEntry;
-            path.updateProperties(graph.getIncoming(tmpFrom), currEdge.node);
+            path.calcWeight(graph.getIncoming(tmpFrom), currEdge.node);
         }
         path.add(fromEntry.node);
         path.reverseOrder();

File: core/src/main/java/de/jetsli/graph/routing/AbstractRoutingAlgorithm.java
Patch:
@@ -15,6 +15,7 @@
  */
 package de.jetsli.graph.routing;
 
+import de.jetsli.graph.routing.util.ShortestCalc;
 import de.jetsli.graph.routing.util.WeightCalculation;
 import de.jetsli.graph.storage.EdgeEntry;
 import de.jetsli.graph.storage.Graph;
@@ -25,7 +26,7 @@
 public abstract class AbstractRoutingAlgorithm implements RoutingAlgorithm {
 
     protected Graph graph;
-    protected WeightCalculation weightCalc = new WeightCalculation();
+    protected WeightCalculation weightCalc = ShortestCalc.DEFAULT;
 
     public AbstractRoutingAlgorithm(Graph graph) {
         this.graph = graph;

File: core/src/main/java/de/jetsli/graph/routing/DijkstraSimple.java
Patch:
@@ -80,7 +80,7 @@ public DijkstraSimple(Graph graph) {
             int tmpFrom = currEdge.node;
             path.add(tmpFrom);
             currEdge = currEdge.prevEntry;
-            path.updateProperties(graph.getIncoming(tmpFrom), currEdge.node);
+            path.calcWeight(graph.getIncoming(tmpFrom), currEdge.node);
         }
         path.add(fromEntry.node);
         path.reverseOrder();

File: core/src/main/java/de/jetsli/graph/routing/util/TestAlgoCollector.java
Patch:
@@ -42,12 +42,12 @@ public TestAlgoCollector assertDistance(RoutingAlgorithm algo, int from, int to,
         if (p == null) {
             list.add(algo + " returns no path for " + "from:" + from + ", to:" + to);
             return this;
-        } else if (Math.abs(p.distance() - distance) > 1e-2)
-            list.add(algo + " returns path not matching the expected " + "distance of " + distance + "\t Returned was " + p.distance() + "\t (expected locations " + locations + ", was " + p.locations() + ") " + "from:" + from + ", to:" + to);
+        } else if (Math.abs(p.weight() - distance) > 1e-2)
+            list.add(algo + " returns path not matching the expected " + "distance of " + distance + "\t Returned was " + p.weight() + "\t (expected locations " + locations + ", was " + p.locations() + ") " + "from:" + from + ", to:" + to);
         // Yes, there are indeed real world instances where A-B-C is identical to A-C (in meter precision).
         // And for from:501620, to:155552 the location difference of astar to bi-dijkstra gets even bigger (7!).
         if (Math.abs(p.locations() - locations) > 7)
-            list.add(algo + " returns path not matching the expected " + "locations of " + locations + "\t Returned was " + p.locations() + "\t (expected distance " + distance + ", was " + p.distance() + ") " + "from:" + from + ", to:" + to);
+            list.add(algo + " returns path not matching the expected " + "locations of " + locations + "\t Returned was " + p.locations() + "\t (expected distance " + distance + ", was " + p.weight() + ") " + "from:" + from + ", to:" + to);
         return this;
     }
 

File: core/src/test/java/de/jetsli/graph/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -34,7 +34,7 @@ public class DijkstraBidirectionRefTest extends AbstractRoutingAlgorithmTester {
     public void testAddSkipNodes() {
         Graph g = createWikipediaTestGraph();
         Path p = createAlgo(g).calcPath(0, 4);
-        assertEquals(p.toString(), 20, p.distance(), 1e-6);
+        assertEquals(p.toString(), 20, p.weight(), 1e-6);
         assertTrue(p.toString(), p.contains(5));
 
         DijkstraBidirectionRef db = new DijkstraBidirectionRef(g);

File: core/src/test/java/de/jetsli/graph/routing/DijkstraBidirectionTest.java
Patch:
@@ -34,7 +34,7 @@ public class DijkstraBidirectionTest extends AbstractRoutingAlgorithmTester {
     public void testAddSkipNodes() {
         Graph g = createWikipediaTestGraph();
         Path p = createAlgo(g).calcPath(0, 4);
-        assertEquals(p.toString(), 20, p.distance(), 1e-6);
+        assertEquals(p.toString(), 20, p.weight(), 1e-6);
         assertTrue(p.toString(), p.contains(5));
 
         DijkstraBidirection algo = new DijkstraBidirection(g);

File: core/src/test/java/de/jetsli/graph/routing/rideshare/DijkstraWhichToOneTest.java
Patch:
@@ -70,11 +70,11 @@ private void assertWithBiDijkstra(int[] points, Path path, int dest) {
         Path bestManualPath = null;
         for (int i = 0; i < points.length; i++) {
             Path manualPath = new DijkstraBidirection(matrixGraph).calcPath(points[i], dest);
-            if (bestManualPath == null || manualPath.distance() < bestManualPath.distance())
+            if (bestManualPath == null || manualPath.weight() < bestManualPath.weight())
                 bestManualPath = manualPath;
         }
 
-        assertEquals(bestManualPath.distance(), path.distance(), 1e-3);
+        assertEquals(bestManualPath.weight(), path.weight(), 1e-3);
         assertEquals(bestManualPath.locations(), path.locations());
     }
 }

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -15,6 +15,9 @@
  */
 package de.jetsli.graph.reader;
 
+import de.jetsli.graph.routing.util.PrepareRoutingSubnetworks;
+import de.jetsli.graph.routing.util.EdgeFlags;
+import de.jetsli.graph.routing.util.RoutingAlgorithmIntegrationTests;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.MemoryGraphSafeStorage;
 import de.jetsli.graph.storage.Storage;

File: core/src/main/java/de/jetsli/graph/reader/PrinctonReader.java
Patch:
@@ -15,6 +15,7 @@
  */
 package de.jetsli.graph.reader;
 
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.util.Helper;
 import java.io.BufferedReader;

File: core/src/main/java/de/jetsli/graph/routing/PathWrapper.java
Patch:
@@ -42,7 +42,7 @@ public PathWrapper(Graph g, EdgeWrapper edgesFrom, EdgeWrapper edgesTo) {
     /**
      * Extracts path from two shortest-path-tree
      */
-    public Path extract() {
+    public Path extract(Path path) {
         if (fromEdgeId < 0 || toEdgeId < 0)
             return null;
 
@@ -56,8 +56,7 @@ public Path extract() {
         int nodeTo = edgeTo.getNode(toEdgeId);
         if (nodeFrom != nodeTo)
             throw new IllegalStateException("Locations of 'to' and 'from' DistEntries has to be the same." + toString());
-
-        Path path = new Path();
+        
         int currEdgeId = fromEdgeId;
         path.add(nodeFrom);
         currEdgeId = edgeFrom.getLink(currEdgeId);

File: core/src/main/java/de/jetsli/graph/routing/PathWrapperPrio.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.jetsli.graph.routing;
 
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.storage.EdgeEntry;
 import de.jetsli.graph.storage.PriorityGraph;
 import de.jetsli.graph.util.EdgeIterator;
@@ -42,7 +42,7 @@ public PathWrapperPrio(PriorityGraph g) {
      * Extracts path from two shortest-path-tree
      */
     @Override
-    public Path extract() {
+    public Path extract(Path path) {
         if (edgeFrom == null || edgeTo == null)
             return null;
 
@@ -55,7 +55,6 @@ public Path extract() {
             edgeTo = ee;
         }
 
-        Path path = new Path();
         EdgeEntry currEdge = edgeFrom;
         while (currEdge.prevEntry != null) {
             int tmpFrom = currEdge.node;

File: core/src/main/java/de/jetsli/graph/routing/PathWrapperRef.java
Patch:
@@ -41,7 +41,7 @@ public PathWrapperRef(Graph g) {
     /**
      * Extracts path from two shortest-path-tree
      */
-    public Path extract() {
+    public Path extract(Path path) {
         if (edgeFrom == null || edgeTo == null)
             return null;
 
@@ -54,7 +54,6 @@ public Path extract() {
             edgeTo = ee;
         }
 
-        Path path = new Path();
         EdgeEntry currEdge = edgeFrom;
         while (currEdge.prevEntry != null) {
             int tmpFrom = currEdge.node;

File: core/src/main/java/de/jetsli/graph/routing/RoutingAlgorithm.java
Patch:
@@ -15,6 +15,8 @@
  */
 package de.jetsli.graph.routing;
 
+import de.jetsli.graph.routing.util.WeightCalculation;
+
 /**
  * Calculates the shortest path from the specified node ids.
  *
@@ -27,7 +29,7 @@ public interface RoutingAlgorithm {
      */
     Path calcPath(int from, int to);
 
-    RoutingAlgorithm setType(AlgoType type);
+    RoutingAlgorithm setType(WeightCalculation calc);
 
     /**
      * Make sure you reuse this instance from the same thread

File: core/src/main/java/de/jetsli/graph/routing/rideshare/DijkstraShortestOf2ToPub.java
Patch:
@@ -130,7 +130,7 @@ public Path calcShortestPath() {
                 throw new IllegalStateException("Shortest Path not found? " + fromP1 + " " + toP2);
         }
 
-        Path g = shortest.extract();
+        Path g = shortest.extract(new Path(weightCalc));
         if (!pubTransport.contains(g.getFromLoc())) {
             double tmpDist = g.distance();
             g.reverseOrder();

File: core/src/main/java/de/jetsli/graph/routing/util/EdgeFlags.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package de.jetsli.graph.reader;
+package de.jetsli.graph.routing.util;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -23,7 +23,7 @@
  */
 public class EdgeFlags {
 
-    static final CarSpeed CAR_SPEED = new CarSpeed();
+    public static final CarSpeed CAR_SPEED = new CarSpeed();
     static final int DEFAULT_SPEED = CAR_SPEED.get("secondary");
     public static final int MAX_SPEED = CAR_SPEED.get("motorway");
     public static final int FORWARD = 1;
@@ -134,7 +134,7 @@ public String toString() {
      * A map which associates string to integer. With this integer one can put the speed profile
      * into 1 byte
      */
-    static class CarSpeed extends HashMap<String, Integer> {
+    public static class CarSpeed extends HashMap<String, Integer> {
 
         {
             // autobahn

File: core/src/main/java/de/jetsli/graph/routing/util/EdgePrioFilter.java
Patch:
@@ -13,8 +13,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package de.jetsli.graph.storage;
+package de.jetsli.graph.routing.util;
 
+import de.jetsli.graph.storage.PriorityGraph;
 import de.jetsli.graph.util.EdgeIterator;
 
 /**

File: core/src/main/java/de/jetsli/graph/routing/util/PrepareRoutingSubnetworks.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package de.jetsli.graph.reader;
+package de.jetsli.graph.routing.util;
 
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyOpenBitSet;

File: core/src/main/java/de/jetsli/graph/routing/util/TestAlgoCollector.java
Patch:
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package de.jetsli.graph.reader;
+package de.jetsli.graph.routing.util;
 
 import de.jetsli.graph.routing.Path;
 import de.jetsli.graph.routing.RoutingAlgorithm;

File: core/src/main/java/de/jetsli/graph/storage/MMapGraph.java
Patch:
@@ -17,7 +17,7 @@
 
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyOpenBitSet;
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.util.BitUtil;
 import de.jetsli.graph.util.EdgeIterator;
 import static de.jetsli.graph.util.GraphUtility.*;

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraph.java
Patch:
@@ -17,7 +17,7 @@
 
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyOpenBitSet;
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.util.EdgeIterator;
 import java.lang.reflect.Field;
 import java.util.ArrayList;

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphSafe.java
Patch:
@@ -18,7 +18,7 @@
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyBitSetImpl;
 import de.jetsli.graph.coll.MyOpenBitSet;
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.util.EdgeIterator;
 import de.jetsli.graph.util.Helper;
 import gnu.trove.map.hash.TIntIntHashMap;

File: core/src/main/java/de/jetsli/graph/ui/DebugDijkstraBidirection.java
Patch:
@@ -46,7 +46,7 @@ public void setGraphics2D(Graphics2D g2) {
             else
                 mg.plotNode(g2, currLoc, Color.BLUE);
         }
-        System.out.println("new node:" + currLoc);
+        // System.out.println("new node:" + currLoc);
         super.updateShortest(shortestDE, currLoc);
     }
 }

File: core/src/main/java/de/jetsli/graph/util/CalcDistance.java
Patch:
@@ -15,9 +15,8 @@
  */
 package de.jetsli.graph.util;
 
-import static java.lang.Math.*;
-//import static org.apache.commons.math3.util.FastMath.*;
 import de.jetsli.graph.util.shapes.BBox;
+import static java.lang.Math.*;
 import java.util.Arrays;
 
 /**

File: core/src/test/java/de/jetsli/graph/reader/OSMReaderTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package de.jetsli.graph.reader;
 
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.util.EdgeIterator;
 import de.jetsli.graph.util.Helper;

File: core/src/test/java/de/jetsli/graph/routing/PathWrapperRefTest.java
Patch:
@@ -34,7 +34,7 @@ public void testExtract() {
         pw.edgeFrom = new EdgeEntry(2, 10);
         pw.edgeFrom.prevEntry = new EdgeEntry(1, 10);
         pw.edgeTo = new EdgeEntry(2, 20);
-        Path p = pw.extract();
+        Path p = pw.extract(new Path());
         assertEquals(2, p.locations());
         assertEquals(10, p.distance(), 1e-4);
     }
@@ -49,7 +49,7 @@ public void testExtract2() {
         pw.edgeFrom.prevEntry = new EdgeEntry(1, 0);
         pw.edgeTo = new EdgeEntry(2, 20);
         pw.edgeTo.prevEntry = new EdgeEntry(3, 0);
-        Path p = pw.extract();
+        Path p = pw.extract(new Path());
         assertEquals(1, p.location(0));
         assertEquals(3, p.location(2));
         assertEquals(3, p.locations());

File: core/src/test/java/de/jetsli/graph/routing/RoutingAlgorithmRealTest.java
Patch:
@@ -16,8 +16,8 @@
 package de.jetsli.graph.routing;
 
 import de.jetsli.graph.reader.OSMReader;
-import de.jetsli.graph.reader.RoutingAlgorithmIntegrationTests;
-import de.jetsli.graph.reader.TestAlgoCollector;
+import de.jetsli.graph.routing.util.RoutingAlgorithmIntegrationTests;
+import de.jetsli.graph.routing.util.TestAlgoCollector;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.Location2IDIndex;
 import de.jetsli.graph.storage.Location2IDQuadtree;

File: core/src/test/java/de/jetsli/graph/routing/util/PrepareRoutingSubnetworksTest.java
Patch:
@@ -13,8 +13,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package de.jetsli.graph.reader;
+package de.jetsli.graph.routing.util;
 
+import de.jetsli.graph.routing.util.PrepareRoutingSubnetworks;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.MemoryGraphSafe;
 import de.jetsli.graph.util.GraphUtility;

File: core/src/test/java/de/jetsli/graph/storage/PriorityGraphImplTest.java
Patch:
@@ -15,6 +15,7 @@
  */
 package de.jetsli.graph.storage;
 
+import de.jetsli.graph.routing.util.EdgePrioFilter;
 import de.jetsli.graph.util.EdgeIterator;
 import de.jetsli.graph.util.GraphUtility;
 import org.junit.Test;

File: core/src/test/java/de/jetsli/graph/util/EdgeUpdateIteratorTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.jetsli.graph.util;
 
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.MemoryGraphSafe;
 import de.jetsli.graph.storage.PriorityGraphImpl;

File: perf-comparison/src/main/java/de/jetsli/compare/misc/StartWithExternalStorage.java
Patch:
@@ -17,7 +17,7 @@
 
 import de.jetsli.compare.neo4j.Neo4JStorage;
 import de.jetsli.graph.reader.OSMReader;
-import de.jetsli.graph.reader.RoutingAlgorithmIntegrationTests;
+import de.jetsli.graph.routing.util.RoutingAlgorithmIntegrationTests;
 import de.jetsli.graph.storage.Storage;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.util.CmdArgs;

File: perf-comparison/src/main/java/de/jetsli/compare/neo4j/Neo4JGraphImpl.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.jetsli.compare.neo4j;
 
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.util.EdgeIterator;
 import de.jetsli.graph.util.Helper;

File: perf-comparison/src/main/java/de/jetsli/compare/tinkergraph/TinkerGraphImpl.java
Patch:
@@ -19,7 +19,7 @@
 import com.tinkerpop.blueprints.Edge;
 import com.tinkerpop.blueprints.Vertex;
 import com.tinkerpop.blueprints.impls.tg.TinkerGraph;
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.util.EdgeIterator;
 import java.util.Iterator;

File: perf-comparison/src/test/java/de/jetsli/compare/neo4j/Neo4JStorageTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.jetsli.compare.neo4j;
 
-import de.jetsli.graph.reader.EdgeFlags;
+import de.jetsli.graph.routing.util.EdgeFlags;
 import de.jetsli.graph.util.CalcDistance;
 import org.junit.After;
 import org.junit.Before;

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -17,7 +17,6 @@
 
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.MemoryGraphSafeStorage;
-import de.jetsli.graph.storage.PriorityGraph;
 import de.jetsli.graph.storage.Storage;
 import de.jetsli.graph.util.*;
 import gnu.trove.list.array.TIntArrayList;
@@ -62,8 +61,6 @@ public static void main(String[] strs) throws Exception {
             }
         };
         osm2Graph(osmReader, args);
-        final PriorityGraph pg = (PriorityGraph) osmReader.getGraph();
-        new PrepareRoutingShortcuts(pg).doWork();
         RoutingAlgorithmIntegrationTests tests = new RoutingAlgorithmIntegrationTests(osmReader.getGraph());
         if (args.getBool("test", false)) {
             tests.start();

File: core/src/main/java/de/jetsli/graph/routing/AStar.java
Patch:
@@ -22,7 +22,6 @@
 import de.jetsli.graph.util.ApproxCalcDistance;
 import de.jetsli.graph.util.CalcDistance;
 import de.jetsli.graph.util.EdgeIterator;
-import de.jetsli.graph.util.GraphUtility;
 import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 import java.util.PriorityQueue;

File: core/src/main/java/de/jetsli/graph/routing/PathWrapper.java
Patch:
@@ -64,7 +64,7 @@ public Path extract() {
         while (currEdgeId > 0) {
             int tmpFrom = edgeFrom.getNode(currEdgeId);
             path.add(tmpFrom);
-            path.updateProperties(g.getIncoming(nodeFrom), tmpFrom);
+            path.updateProperties(g.getOutgoing(tmpFrom), nodeFrom);
             currEdgeId = edgeFrom.getLink(currEdgeId);
             nodeFrom = tmpFrom;
         }
@@ -75,7 +75,7 @@ public Path extract() {
         while (currEdgeId > 0) {
             int tmpTo = edgeTo.getNode(currEdgeId);
             path.add(tmpTo);
-            path.updateProperties(g.getIncoming(tmpTo), nodeTo);
+            path.updateProperties(g.getOutgoing(nodeTo), tmpTo);
             currEdgeId = edgeTo.getLink(currEdgeId);
             nodeTo = tmpTo;
         }

File: core/src/main/java/de/jetsli/graph/ui/MyGraphics.java
Patch:
@@ -83,13 +83,13 @@ public double getLat(int y) {
     }
 
     public void plotNode(Graphics2D g2, int loc, Color c) {
-        Color old = g2.getColor();
-        g2.setColor(c);
         double lat = g.getLatitude(loc);
         double lon = g.getLongitude(loc);
         if (lat < bounds.minLat || lat > bounds.maxLat || lon < bounds.minLon || lon > bounds.maxLon)
             return;
 
+        Color old = g2.getColor();
+        g2.setColor(c);
         plot(g2, lat, lon, 4);
         g2.setColor(old);
     }
@@ -106,7 +106,7 @@ public void plot(Graphics2D g2, double lat, double lon, int width) {
 //        else if (x > maxX)
 //            maxX = x;
 
-        g2.drawOval((int) x, (int) y, width, width);
+        g2.fillOval((int) x, (int) y, width, width);
     }
     private Logger logger = LoggerFactory.getLogger(getClass());
 

File: core/src/main/java/de/jetsli/graph/reader/PrepareRoutingShortcuts.java
Patch:
@@ -35,10 +35,7 @@ public PrepareRoutingShortcuts(PriorityGraph g) {
     }
 
     public void doWork() {
-        EdgeFilter old = g.getEdgeFilter();
-        g.setEdgeFilter(null);
         createShortcuts();
-        g.setEdgeFilter(old);
     }
 
     /**

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphSafeStorage.java
Patch:
@@ -35,12 +35,12 @@ public void createNew() {
         Helper.deleteDir(new File(folder));
         // in order to avoid reallocation allocate enough memory. 
         // edges will be incrementally allocated so it is not that important to match the size up front
-        g = new MemoryGraphSafe(folder, osmIdToIndexMap.size(), Math.round(0.8f * osmIdToIndexMap.size()));
+        g = new PriorityGraphImpl(folder, osmIdToIndexMap.size(), Math.round(0.8f * osmIdToIndexMap.size()));
     }
 
     @Override
     public boolean loadExisting() {
-        g = new MemoryGraphSafe(folder, 0);
+        g = new PriorityGraphImpl(folder, 0);
         return g.getNodes() > 0;
     }
 

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -165,9 +165,6 @@ public MiniGraphUI(Graph roadGraph, boolean debug) {
 
                 makeTransparent(g2);
 
-                dijkstraFromId = 628;
-                dijkstraToId = 1641;
-
                 if (algo instanceof DebugAlgo)
                     ((DebugAlgo) algo).setGraphics2D(g2);
 

File: core/src/main/java/de/jetsli/graph/reader/PrinctonReader.java
Patch:
@@ -74,7 +74,7 @@ else if (counter == 1)
                 if (counter != 3)
                     throw new RuntimeException("incorrect read!? from:" + from + ", to:" + to + ", dist:" + dist);
 
-                g.edge(from, to, dist, false);
+                g.edge(from, to, dist, CarFlags.FORWARD);
             }
         } catch (Exception ex) {
             throw new RuntimeException("Problem in line " + lineNo, ex);

File: core/src/main/java/de/jetsli/graph/reader/RoutingAlgorithmIntegrationTests.java
Patch:
@@ -115,9 +115,9 @@ public TestAlgoCollector assertDistance(RoutingAlgorithm algo, int from, int to,
         @Override
         public String toString() {
             String str = "";
-            str += "FOUND " + list.size() + " ERRORS\n";
+            str += "FOUND " + list.size() + " ERRORS.\n";
             for (String s : list) {
-                str += s + "\n";
+                str += s + ".\n";
             }
             return str;
         }

File: core/src/main/java/de/jetsli/graph/storage/DefaultStorage.java
Patch:
@@ -55,7 +55,7 @@ public boolean addNode(int osmId, double lat, double lon) {
     int zeroCounter = 0;
 
     @Override
-    public boolean addEdge(int nodeIdFrom, int nodeIdTo, boolean reverse, CalcDistance callback) {
+    public boolean addEdge(int nodeIdFrom, int nodeIdTo, int flags, CalcDistance callback) {
         int fromIndex = osmIdToIndexMap.get(nodeIdFrom);
         if (fromIndex == FILLED) {
             logger.warn("fromIndex is unresolved:" + nodeIdFrom + " to was:" + nodeIdTo);
@@ -88,7 +88,7 @@ public boolean addEdge(int nodeIdFrom, int nodeIdTo, boolean reverse, CalcDistan
                 return false;
             }
 
-            g.edge(fromIndex, toIndex, dist, reverse);
+            g.edge(fromIndex, toIndex, dist, flags);
             return true;
         } catch (Exception ex) {
             throw new RuntimeException("Problem to add edge! with node " + fromIndex + "->" + toIndex + " osm:" + nodeIdFrom + "->" + nodeIdTo, ex);

File: core/src/main/java/de/jetsli/graph/storage/Storage.java
Patch:
@@ -33,7 +33,7 @@ public interface Storage extends Closeable {
 
     boolean addNode(int osmId, double lat, double lon);
 
-    boolean addEdge(int nodeIdFrom, int nodeIdTo, boolean reverse, CalcDistance callback);
+    boolean addEdge(int nodeIdFrom, int nodeIdTo, int flags, CalcDistance callback);
 
     int getNodes();
 

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String[] strs) throws Exception {
 //                return lat > 49.3 && lat < 50 && lon > 10.8 && lon < 11.6;
             }
         };
-        //osm2Graph(osmReader, args);
+        osm2Graph(osmReader, args);
         RoutingAlgorithmIntegrationTests tests = new RoutingAlgorithmIntegrationTests(osmReader.getGraph());
         if (args.getBool("test", false)) {
             tests.start();

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String[] strs) throws Exception {
 //                return lat > 49.3 && lat < 50 && lon > 10.8 && lon < 11.6;
             }
         };
-        osm2Graph(osmReader, args);
+        //osm2Graph(osmReader, args);
         RoutingAlgorithmIntegrationTests tests = new RoutingAlgorithmIntegrationTests(osmReader.getGraph());
         if (args.getBool("test", false)) {
             tests.start();

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -161,7 +161,8 @@ public void cleanUp() {
         logger.info("start finding subnetworks");
         int subnetworks = preparation.doWork();
         int n = g.getNodes();
-        logger.info("nodes " + n + ", subnetworks:" + subnetworks + ", removed them => " + (prev - n) + " less nodes");
+        logger.info("nodes " + n + ", there were " + subnetworks + " subnetworks. removed them => " + (prev - n) 
+                + " less nodes. Remaining subnetworks:" + preparation.findSubnetworks().size());
     }
 
     public void flush() {

File: core/src/main/java/de/jetsli/graph/storage/DefaultStorage.java
Patch:
@@ -71,16 +71,15 @@ public boolean addEdge(int nodeIdFrom, int nodeIdTo, boolean reverse, CalcDistan
             return false;
 
         try {
-//            sw.start();
             double laf = g.getLatitude(fromIndex);
             double lof = g.getLongitude(fromIndex);
             double lat = g.getLatitude(toIndex);
             double lot = g.getLongitude(toIndex);
             double dist = callback.calcDistKm(laf, lof, lat, lot);
             if (dist == 0) {
                 // As investigation shows often two paths should have crossed via one identical point 
-                // but end up in two very close points. add here here and later this will be 
-                // removed/fixed while removing short edges where one node is of degree 2
+                // but end up in two very close points. later this will be removed/fixed while 
+                // removing short edges where one node is of degree 2
                 zeroCounter++;
                 dist = 0.0001;
             } else if (dist < 0) {

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraph.java
Patch:
@@ -64,7 +64,7 @@ private void ensureNodeIndex(int index) {
         if (size <= lons.length)
             return;
 
-        deletedNodes.ensureCapacity(size);
+        getDeletedNodes().ensureCapacity(size);
         refToEdges = growArray(refToEdges, size, FACTOR);
         lons = growArray(lons, size, FACTOR);
         lats = growArray(lats, size, FACTOR);

File: core/src/test/java/de/jetsli/graph/reader/PrepareRoutingTest.java
Patch:
@@ -18,7 +18,6 @@
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyTBitSet;
 import de.jetsli.graph.storage.Graph;
-import de.jetsli.graph.storage.MMapGraph;
 import de.jetsli.graph.storage.MemoryGraphSafe;
 import de.jetsli.graph.util.GraphUtility;
 import de.jetsli.graph.util.XFirstSearch;
@@ -86,6 +85,7 @@ public void testKeepLargestNetworks() {
         instance.keepLargestNetwork(map);
         g.optimize();
 
+        assertEquals(7, g.getNodes());
         assertEquals(Arrays.asList(), GraphUtility.getProblems(g));
         map = instance.findSubnetworks();
         assertEquals(1, map.size());

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphExt.java
Patch:
@@ -55,8 +55,8 @@ protected void initNodes(int cap) {
     }
 
     @Override
-    protected void internalAdd(int fromNodeId, int toNodeId, double dist, int flags) {
-        super.internalAdd(fromNodeId, toNodeId, dist, flags);
+    protected void internalEdgeAdd(int fromNodeId, int toNodeId, double dist, int flags) {
+        super.internalEdgeAdd(fromNodeId, toNodeId, dist, flags);
 
         // TODO sort by priority but include the latest entry too!        
         // Collections.sort(list, listPrioSorter);

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraph.java
Patch:
@@ -200,7 +200,7 @@ public boolean markNodeDeleted(int index) {
 
     @Override
     public void optimize() {
-        int deleted = deletedNodes.getCardinality();
+        int deleted = getDeletedNodes().getCardinality();
         if (deleted == 0)
             return;
         MemoryGraph inMemGraph = new MemoryGraph(getNodes() - deleted);

File: core/src/test/java/de/jetsli/graph/reader/OSMReaderTest.java
Patch:
@@ -48,6 +48,7 @@ public void tearDown() {
         reader = new OSMReader(dir, 1000);
         reader.preprocessAcceptHighwaysOnly(getClass().getResourceAsStream("test1.xml"));
         reader.writeOsm2Graph(getClass().getResourceAsStream("test1.xml"));
+        reader.flush();
         Graph graph = reader.getGraph();
         assertEquals(4, graph.getNodes());
         assertEquals(1, GraphUtility.count(graph.getOutgoing(0)));
@@ -78,6 +79,7 @@ public void tearDown() {
         };
         reader.preprocessAcceptHighwaysOnly(getClass().getResourceAsStream("test1.xml"));
         reader.writeOsm2Graph(getClass().getResourceAsStream("test1.xml"));
+        reader.flush();
         Graph graph = reader.getGraph();
         assertEquals(3, graph.getNodes());
         assertEquals(1, GraphUtility.count(graph.getOutgoing(0)));

File: core/src/main/java/de/jetsli/graph/routing/ContractionHierarchies.java
Patch:
@@ -19,7 +19,7 @@
 import de.jetsli.graph.coll.MyOpenBitSet;
 import de.jetsli.graph.storage.DistEntry;
 import de.jetsli.graph.storage.Graph;
-import de.jetsli.graph.util.MyIteratorable;
+import de.jetsli.graph.util.GraphUtility;
 import java.util.Date;
 import java.util.PriorityQueue;
 
@@ -50,7 +50,7 @@ public Graph contract(Graph g) {
 
         // TODO calculate edge difference => yet another dikstra necessary!?
         for (int i = 0; i < locations; i++) {
-            heap.add(new DistEntry(i, MyIteratorable.count(g.getOutgoing(i))));
+            heap.add(new DistEntry(i, GraphUtility.count(g.getOutgoing(i))));
         }
         DistEntry curr;
         MyBitSet alreadyContracted = new MyOpenBitSet(locations);

File: core/src/main/java/de/jetsli/graph/storage/MMapGraph.java
Patch:
@@ -29,7 +29,7 @@
 import java.nio.channels.FileChannel;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import static de.jetsli.graph.util.MyIteratorable.*;
+import static de.jetsli.graph.util.GraphUtility.*;
 import gnu.trove.map.hash.TIntFloatHashMap;
 import java.io.*;
 

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraph.java
Patch:
@@ -18,7 +18,7 @@
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyOpenBitSet;
 import de.jetsli.graph.util.EdgeIdIterator;
-import de.jetsli.graph.util.MyIteratorable;
+import de.jetsli.graph.util.GraphUtility;
 import java.lang.reflect.Field;
 import java.util.ArrayList;
 import java.util.Arrays;

File: core/src/test/java/de/jetsli/graph/reader/PrinctonReaderTest.java
Patch:
@@ -16,7 +16,7 @@
 package de.jetsli.graph.reader;
 
 import de.jetsli.graph.storage.Graph;
-import static de.jetsli.graph.util.MyIteratorable.*;
+import static de.jetsli.graph.util.GraphUtility.*;
 import de.jetsli.graph.storage.MemoryGraphSafe;
 import java.io.IOException;
 import java.util.zip.GZIPInputStream;

File: core/src/test/java/de/jetsli/graph/routing/ContractionHierarchiesTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.jetsli.graph.routing;
 
-import static de.jetsli.graph.util.MyIteratorable.*;
+import static de.jetsli.graph.util.GraphUtility.*;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.MemoryGraphSafe;
 import org.junit.Test;

File: core/src/test/java/de/jetsli/graph/storage/MMapGraphTest.java
Patch:
@@ -26,7 +26,7 @@
 import java.nio.MappedByteBuffer;
 import java.nio.channels.FileChannel;
 import static org.junit.Assert.*;
-import static de.jetsli.graph.util.MyIteratorable.*;
+import static de.jetsli.graph.util.GraphUtility.*;
 
 /**
  *

File: core/src/test/java/de/jetsli/graph/storage/MemoryGraphSafeTest.java
Patch:
@@ -18,7 +18,7 @@
 import java.io.IOException;
 import org.junit.Test;
 import static org.junit.Assert.*;
-import static de.jetsli.graph.util.MyIteratorable.*;
+import static de.jetsli.graph.util.GraphUtility.*;
 import de.jetsli.graph.util.*;
 import java.io.File;
 

File: core/src/main/java/de/jetsli/graph/routing/rideshare/DijkstraMultipleAtOnce.java
Patch:
@@ -15,17 +15,17 @@
  */
 package de.jetsli.graph.routing.rideshare;
 
-import de.jetsli.graph.storage.MemoryGraph;
+import de.jetsli.graph.storage.Graph;
 
 /**
  *
  * @author Peter Karich, info@jetsli.de
  */
 public class DijkstraMultipleAtOnce {
 
-    private MemoryGraph graph;
+    private Graph graph;
 
-    public DijkstraMultipleAtOnce(MemoryGraph graph) {
+    public DijkstraMultipleAtOnce(Graph graph) {
         this.graph = graph;
     }
 

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraph.java
Patch:
@@ -64,6 +64,7 @@ private void ensureNodeIndex(int index) {
         if (size <= lons.length)
             return;
 
+        deletedNodes.ensureCapacity(size);
         refToEdges = growArray(refToEdges, size, FACTOR);
         lons = growArray(lons, size, FACTOR);
         lats = growArray(lats, size, FACTOR);

File: core/src/main/java/de/jetsli/graph/util/Helper.java
Patch:
@@ -15,6 +15,7 @@
  */
 package de.jetsli.graph.util;
 
+import de.jetsli.graph.coll.MyBitSet;
 import java.io.*;
 import java.nio.MappedByteBuffer;
 import java.util.*;

File: core/src/main/java/de/jetsli/graph/util/TopologicalSorting.java
Patch:
@@ -17,7 +17,6 @@
 
 import de.jetsli.graph.coll.MyBitSet;
 import de.jetsli.graph.coll.MyOpenBitSet;
-import de.jetsli.graph.storage.MemoryGraph;
 import de.jetsli.graph.storage.Graph;
 import gnu.trove.iterator.TIntIterator;
 import gnu.trove.list.array.TIntArrayList;
@@ -32,7 +31,7 @@ public class TopologicalSorting {
     /**
      * conditions: acyclicGraph and all reachable from 0
      */
-    public TIntArrayList sort(MemoryGraph g) {
+    public TIntArrayList sort(Graph g) {
         final TIntArrayList list = new TIntArrayList();
         if (g.getNodes() == 0)
             return list;

File: core/src/test/java/de/jetsli/graph/routing/DijkstraBidirectionRefTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package de.jetsli.graph.routing;
 
-import de.jetsli.graph.storage.MemoryGraph;
 import de.jetsli.graph.storage.Graph;
+import de.jetsli.graph.storage.MemoryGraphSafe;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -45,7 +45,7 @@ public void testAddSkipNodes() {
     
     @Test
     public void testCannotCalculateSP2() {
-        Graph g = new MemoryGraph();
+        Graph g = new MemoryGraphSafe(10);
         g.edge(0, 1, 1, false);
         g.edge(1, 2, 1, false);
                

File: core/src/test/java/de/jetsli/graph/routing/DijkstraBidirectionTest.java
Patch:
@@ -15,8 +15,8 @@
  */
 package de.jetsli.graph.routing;
 
-import de.jetsli.graph.storage.MemoryGraph;
 import de.jetsli.graph.storage.Graph;
+import de.jetsli.graph.storage.MemoryGraphSafe;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -45,7 +45,7 @@ public void testAddSkipNodes() {
     
     @Test
     public void testCannotCalculateSP2() {
-        Graph g = new MemoryGraph();
+        Graph g = new MemoryGraphSafe(10);
         g.edge(0, 1, 1, false);
         g.edge(1, 2, 1, false);
                

File: core/src/test/java/de/jetsli/graph/routing/rideshare/DijkstraShortestOf2ToPubTest.java
Patch:
@@ -18,7 +18,6 @@
 import de.jetsli.graph.routing.DijkstraBidirection;
 import de.jetsli.graph.routing.Path;
 import de.jetsli.graph.routing.RoutingAlgorithm;
-import de.jetsli.graph.storage.MemoryGraph;
 import de.jetsli.graph.storage.Graph;
 import org.junit.Test;
 import static org.junit.Assert.*;
@@ -29,7 +28,7 @@
  */
 public class DijkstraShortestOf2ToPubTest {
 
-    public RoutingAlgorithm createDijkstra(MemoryGraph g) {
+    public RoutingAlgorithm createDijkstra(Graph g) {
         return new DijkstraWhichToOne(g);
     }
 

File: core/src/test/java/de/jetsli/graph/storage/MemoryGraphSafeTest.java
Patch:
@@ -66,7 +66,7 @@ public void testSave() throws IOException {
         assertEquals(3, graph.getNodes());
         assertEquals(3, graph.getNodes());
         checkGraph(graph);
-        
+
         graph.edge(3, 4, 123, true);
         checkGraph(graph);
     }

File: core/src/test/java/de/jetsli/graph/util/XFirstSearchTest.java
Patch:
@@ -15,7 +15,8 @@
  */
 package de.jetsli.graph.util;
 
-import de.jetsli.graph.storage.MemoryGraph;
+import de.jetsli.graph.storage.Graph;
+import de.jetsli.graph.storage.MemoryGraphSafe;
 import gnu.trove.set.hash.TIntHashSet;
 import org.junit.Before;
 import org.junit.Test;
@@ -48,7 +49,7 @@ public boolean goFurther(int v) {
             }
         };
 
-        MemoryGraph g = new MemoryGraph();
+        Graph g = new MemoryGraphSafe(20);
         g.edge(0, 1, 85, true);
         g.edge(0, 2, 217, true);
         g.edge(0, 3, 173, true);

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -15,7 +15,7 @@
  */
 package de.jetsli.graph.reader;
 
-import de.jetsli.graph.routing.DijkstraBidirectionRef;
+import de.jetsli.graph.routing.DijkstraBidirection;
 import de.jetsli.graph.storage.Storage;
 import de.jetsli.graph.util.CalcDistance;
 import de.jetsli.graph.routing.Path;
@@ -128,8 +128,8 @@ public void doDijkstra(int runs) throws Exception {
         Location2IDIndex index = new Location2IDQuadtree(g).prepareIndex(20000);
         double minLat = 49.484186, minLon = 8.974228;
         double maxLat = 50.541363, maxLon = 10.880356;
-        RoutingAlgorithm algo = new DijkstraBidirectionRef(g);
-//        RoutingAlgorithm algo = new DijkstraBidirection(g);
+//        RoutingAlgorithm algo = new DijkstraBidirectionRef(g);
+        RoutingAlgorithm algo = new DijkstraBidirection(g);
 //        RoutingAlgorithm algo = new DijkstraSimple(g);
 //        RoutingAlgorithm algo = new AStar(g);
 

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -127,9 +127,9 @@ public void doDijkstra(int runs) throws Exception {
         double minLat = 49.484186, minLon = 8.974228;
         double maxLat = 50.541363, maxLon = 10.880356;
 //        RoutingAlgorithm algo = new DijkstraBidirectionRef(g);
-        RoutingAlgorithm algo = new DijkstraBidirection(g);
+//        RoutingAlgorithm algo = new DijkstraBidirection(g);
 //        RoutingAlgorithm algo = new DijkstraSimple(g);
-//        RoutingAlgorithm algo = new AStar(g);
+        RoutingAlgorithm algo = new AStar(g);
         
         logger.info("running dijkstra with " + algo.getClass().getSimpleName());
         Random rand = new Random(123);

File: core/src/main/java/de/jetsli/graph/routing/AStar.java
Patch:
@@ -44,11 +44,10 @@ public AStar(Graph g) {
         TIntHashSet visited = new TIntHashSet();
         TIntObjectMap<Edge> map = new TIntObjectHashMap<Edge>();
         PriorityQueue<Edge> heap = new PriorityQueue<Edge>();
+        double lat = graph.getLatitude(to);
+        double lon = graph.getLongitude(to);
         while (true) {
             int currVertex = curr.node;
-            double lat = graph.getLatitude(currVertex);
-            double lon = graph.getLongitude(currVertex);
-
             EdgeIdIterator iter = graph.getOutgoing(currVertex);
             while (iter.next()) {
                 int currentLinkedNode = iter.nodeId();

File: core/src/test/java/de/jetsli/graph/routing/AbstractRoutingAlgorithmTester.java
Patch:
@@ -237,15 +237,13 @@ public void testDirectedGraphBug1() {
         for (int i = 0; i < N; i++) {
             int index1 = Math.abs(rand.nextInt(graph.getNodes()));
             int index2 = Math.abs(rand.nextInt(graph.getNodes()));
-            // constructing the graph could be expensive like for CH
             RoutingAlgorithm d = createAlgo(graph);
-
             if (i >= noJvmWarming)
                 sw.start();
             Path p = d.calcShortestPath(index1, index2);
             if (i >= noJvmWarming)
                 sw.stop();
-            System.out.println("#" + i + " " + name + ":" + sw.getSeconds());
+            System.out.println("#" + i + " " + name + ":" + sw.getSeconds() + " " + p.locations());
         }
         System.out.println("# " + name + ":" + sw.stop().getSeconds() + ", per run:" + sw.stop().getSeconds() / ((float) (N - noJvmWarming)));
     }

File: core/src/main/java/de/jetsli/graph/ui/DebugDijkstraBidirection.java
Patch:
@@ -24,7 +24,7 @@
 /**
  * @author Peter Karich
  */
-public class DebugDijkstraBidirection extends DijkstraBidirectionRef {
+public class DebugDijkstraBidirection extends DijkstraBidirectionRef implements DebugAlgo {
 
     private MyGraphics mg;
     private Graphics2D g2;
@@ -34,6 +34,7 @@ public DebugDijkstraBidirection(Graph graph, MyGraphics mg) {
         this.mg = mg;
     }
 
+    @Override
     public void setGraphics2D(Graphics2D g2) {
         this.g2 = g2;
     }

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphSafe.java
Patch:
@@ -439,7 +439,7 @@ public void save() {
             Helper.writeInts(storageLocation + "/refs", refToEdges);
             Helper.writeInts(storageLocation + "/edges", edgesArea);
             // Helper.writeInts(storageLocation + "/priorities", priorities);
-            Helper.writeSettings(storageLocation + "/settings", size, creationTime, nextEdgePointer);
+            Helper.writeSettings(storageLocation + "/settings", size, creationTime, nextEdgePointer, storageLocation);
         } catch (IOException ex) {
             throw new RuntimeException("Couldn't write data to storage. location was " + storageLocation, ex);
         }
@@ -460,6 +460,7 @@ public boolean loadExisting(String storageDir) {
             size = (Integer) ob[0];
             creationTime = (Long) ob[1];
             nextEdgePointer = (Integer) ob[2];
+            storageLocation = (String) ob[3];
             deletedNodes = new MyOpenBitSet(lats.length);
             logger.info("loaded graph with " + size + " locations and " + lats.length + " capacity (" + lons.length + ")");
             return true;

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphSafe.java
Patch:
@@ -110,7 +110,6 @@ public void setNode(int index, double lat, double lon) {
     private void initEdges(int cap) {
         cap *= LEN_EDGE;
         edgesArea = new int[cap];
-        Arrays.fill(edgesArea, -1);
     }
 
     // Use ONLY within a writer lock area
@@ -131,7 +130,6 @@ private void ensureEdgePointer(int pointer) {
         int oldLen = edgesArea.length;
         int newLen = pointer;
         edgesArea = Arrays.copyOf(edgesArea, newLen);
-        Arrays.fill(edgesArea, oldLen, newLen, -1);
     }
 
     // Use ONLY within a writer lock area
@@ -441,7 +439,7 @@ public void save() {
             Helper.writeInts(storageLocation + "/refs", refToEdges);
             Helper.writeInts(storageLocation + "/edges", edgesArea);
             // Helper.writeInts(storageLocation + "/priorities", priorities);
-            Helper.writeSettings(storageLocation + "/settings", size, creationTime);
+            Helper.writeSettings(storageLocation + "/settings", size, creationTime, nextEdgePointer);
         } catch (IOException ex) {
             throw new RuntimeException("Couldn't write data to storage. location was " + storageLocation, ex);
         }
@@ -461,6 +459,7 @@ public boolean loadExisting(String storageDir) {
             Object[] ob = Helper.readSettings(storageLocation + "/settings");
             size = (Integer) ob[0];
             creationTime = (Long) ob[1];
+            nextEdgePointer = (Integer) ob[2];
             deletedNodes = new MyOpenBitSet(lats.length);
             logger.info("loaded graph with " + size + " locations and " + lats.length + " capacity (" + lons.length + ")");
             return true;

File: core/src/main/java/de/jetsli/graph/storage/Graph.java
Patch:
@@ -16,7 +16,6 @@
 package de.jetsli.graph.storage;
 
 import de.jetsli.graph.util.EdgeIdIterator;
-import de.jetsli.graph.util.MyIteratorable;
 
 /**
  * An interface to represent a (geo) graph - suited for efficient storage as it can be requested via

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphSafeStorage.java
Patch:
@@ -38,7 +38,7 @@ public void createNew() {
 
     @Override
     public boolean loadExisting() {
-        createNew();
+        g = new MemoryGraphSafe(folder, 0);
         return g.getNodes() > 0;
     }
 

File: perf-comparison/src/main/java/de/jetsli/compare/misc/PrintStats.java
Patch:
@@ -41,7 +41,7 @@ public class PrintStats {
 
     public static void main(String[] args) throws Exception {
         final Graph g = OSMReader.osm2Graph(Helper.readCmdArgs(args));
-        final int locs = g.getLocations();
+        final int locs = g.getNodes();
         System.out.println("graph contains " + locs + " nodes");
 
         // make sure getBucketIndex is okayish fast

File: perf-comparison/src/main/java/de/jetsli/compare/misc/TryOutNeo4JEtc.java
Patch:
@@ -47,7 +47,7 @@ public void start(CmdArgs readCmdArgs) throws Exception {
             }
         };
         Graph g = OSMReader.osm2Graph(reader, readCmdArgs);
-        logger.info("finished with locations:" + g.getLocations());
+        logger.info("finished with locations:" + g.getNodes());
         final AtomicInteger integ = new AtomicInteger(0);
         new XFirstSearch() {
 

File: perf-comparison/src/main/java/de/jetsli/compare/tinkergraph/TinkerStorage.java
Patch:
@@ -34,7 +34,7 @@ public TinkerStorage(String storeDir, int expectedNodes) {
 
     @Override
     public boolean loadExisting() {
-        return g.getLocations() > 0;
+        return g.getNodes() > 0;
     }
 
     @Override

File: core/src/main/java/de/jetsli/graph/coll/IntBinHeap.java
Patch:
@@ -19,7 +19,7 @@ the License, or (at your option) any later version.
  */
 public class IntBinHeap {
 
-    public static int notAnElement = Integer.MIN_VALUE;
+    public static final int notAnElement = Integer.MIN_VALUE;
     private static final double GROW_FACTOR = 2.0;
     private float[] prio;
     private int[] elem;

File: core/src/main/java/de/jetsli/graph/coll/MyOpenBitSet.java
Patch:
@@ -53,7 +53,7 @@ public MyOpenBitSet() {
             }
             return sb.toString();
         } catch (Exception ex) {
-            return "error constructing bitset string representation";
+            throw new RuntimeException("error constructing bitset string representation", ex);
         }
     }
 

File: core/src/main/java/de/jetsli/graph/geohash/SpatialHashtable.java
Patch:
@@ -179,7 +179,7 @@ protected void initBucketSizes(int maxEntries) {
 
         // now adjust maxBuckets and maxEntriesPerBucket to avoid memory waste and fit a power of 2
         maxBuckets = (int) Math.pow(2, bucketIndexBits);
-        maxEntriesPerBucket = (int) Math.round(correctDivide(maxEntries, maxBuckets));
+        maxEntriesPerBucket = correctDivide(maxEntries, maxBuckets);
 
         // introduce hash overflow area
         if (maxEntriesPerBucket < 5)
@@ -653,6 +653,7 @@ boolean _add(LeafWorker worker, long key, int pointer, Long requestedKey) {
 
     private void getNeighbours(BBox nodeBB, Shape searchArea, int depth, long key, LeafWorker worker, boolean contained) {
         if (contained) {
+            // TODO
             // check if searchRect is entirely consumed from nodeBB 
             // => we could simply iterate from smallest to highest bucketIndex
             // worker.setCheckContained(false);

File: core/src/main/java/de/jetsli/graph/geohash/SpatialKeyHashtableOld.java
Patch:
@@ -112,7 +112,7 @@ SpatialKeyHashtableOld init(int bForBucketIndex, int bytesForSpatialKeyRest) {
         maxEntries = 1 << (bytesForSpatialKeyRest * BITS8 - 1);
         double factor = 1.1;
         if (maxEntries < 0)
-            maxEntries = (int) (Integer.MAX_VALUE / bytesPerEntry / factor);
+            maxEntries = (int) ((double) Integer.MAX_VALUE / bytesPerEntry / factor);
 
         // store a link as last 3 bytes of every bucket for an overflow bucket
         bytesForOverflowLink = bytesForBucketIndex;
@@ -240,7 +240,7 @@ int getIndex(long spatialKey, int byteBucketIndex, BooleanRef isIdenticalRef, Bo
         int overflowLink = 0;
         for (int i = bytesForOverflowLink - 1; i >= 0; i--) {
             overflowLink <<= BITS8;
-            overflowLink |= bucketBytes.get(byteBucketIndex + i);
+            overflowLink |= bucketBytes.get(byteBucketIndex + i) & 0xff;
         }
 
         boolean isIdentical = false;
@@ -264,7 +264,7 @@ int getIndex(long spatialKey, int byteBucketIndex, BooleanRef isIdenticalRef, Bo
                     }
                     if (i >= bytesForOverflowEntry) {
                         tmpOverflowLink <<= BITS8;
-                        tmpOverflowLink |= b;
+                        tmpOverflowLink |= b & 0xff;
                     }
                 }
 

File: core/src/main/java/de/jetsli/graph/reader/PrepareRouting.java
Patch:
@@ -127,6 +127,7 @@ protected Iterable<EdgeWithFlags> getEdges(Graph g, int current) {
     }
 
     public void addEdgesToSkip2DegreeNodes() {
+        // TODO
         final List<EdgeWithFlags> list = new ArrayList<EdgeWithFlags>(2);
         new XFirstSearch() {
 

File: core/src/main/java/de/jetsli/graph/routing/PathWrapper.java
Patch:
@@ -15,7 +15,6 @@
  */
 package de.jetsli.graph.routing;
 
-import de.jetsli.graph.routing.Path;
 import de.jetsli.graph.storage.Edge;
 
 /**

File: core/src/main/java/de/jetsli/graph/storage/Edge.java
Patch:
@@ -19,7 +19,7 @@
  * @see DistEntry
  * @author Peter Karich, info@jetsli.de
  */
-public class Edge extends DistEntry {
+public class Edge extends DistEntry implements Cloneable {
 
     public Edge prevEntry;
 

File: core/src/main/java/de/jetsli/graph/storage/MMapGraph.java
Patch:
@@ -610,6 +610,7 @@ static boolean isFileMapped(ByteBuffer bb) {
         return false;
     }
 
+    @Override
     public void flush() {
         if (dirName != null) {
             if (saveOnFlushOnly) {
@@ -838,6 +839,7 @@ public void optimize() {
         try {
             this.ensureEdgesCapacity(inMemGraph.edges.capacity() / inMemGraph.bytesEdges + 2);
         } catch (Exception ex) {
+            logger.error("problem while increasing edge capacity", ex);
         }
         copy(inMemGraph, this);
     }

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraph.java
Patch:
@@ -27,7 +27,7 @@
  *
  * @author Peter Karich, info@jetsli.de
  */
-public class MemoryGraph implements Graph {
+public class MemoryGraph implements Graph, Cloneable {
 
     private float[] lons;
     private float[] lats;

File: core/src/main/java/de/jetsli/graph/storage/MemoryGraphSafe.java
Patch:
@@ -455,8 +455,9 @@ public void save() {
         readLock.lock();
         try {
             File tmp = new File(storageLocation);
-            if (!tmp.exists())
+            if (!tmp.exists()) {
                 tmp.mkdirs();
+            }
 
             Helper.writeFloats(storageLocation + "/lats", lats);
             Helper.writeFloats(storageLocation + "/lons", lons);

File: core/src/main/java/de/jetsli/graph/storage/SaveableGraph.java
Patch:
@@ -18,7 +18,7 @@
 /**
  * @author Peter Karich
  */
-public interface SaveableGraph extends Graph {
+public interface SaveableGraph extends Graph, Cloneable {
 
     void flush();
 

File: core/src/main/java/de/jetsli/graph/ui/DefaultMapLayer.java
Patch:
@@ -76,7 +76,7 @@ public void clearGraphics(Graphics2D g2) {
     }
 
     @Override public void setBounds(Rectangle bounds) {
-        if (image == null || image.getHeight() != bounds.height || image.getWidth() != bounds.getWidth()) {
+        if (image == null || image.getHeight() != bounds.height || image.getWidth() != bounds.width) {
             image = new BufferedImage(bounds.width, bounds.height, BufferedImage.TYPE_INT_ARGB);
             tmpG = image.createGraphics();
             tmpG.setColor(Color.BLACK);

File: core/src/main/java/de/jetsli/graph/ui/MapLayer.java
Patch:
@@ -17,11 +17,12 @@
 
 import java.awt.Graphics2D;
 import java.awt.Rectangle;
+import java.io.Serializable;
 
 /**
  * @author Peter Karich
  */
-public interface MapLayer {
+public interface MapLayer extends Serializable {
     
     void setBounds(Rectangle r);
     Rectangle getBounds();

File: core/src/main/java/de/jetsli/graph/ui/MyLayerPanel.java
Patch:
@@ -15,7 +15,6 @@
  */
 package de.jetsli.graph.ui;
 
-import de.jetsli.graph.util.StopWatch;
 import java.awt.*;
 import java.util.Collection;
 import java.awt.event.ComponentAdapter;

File: core/src/main/java/de/jetsli/graph/util/BitUtil.java
Patch:
@@ -15,8 +15,6 @@
  */
 package de.jetsli.graph.util;
 
-import java.util.Arrays;
-
 /**
  *
  * @author Peter Karich, info@jetsli.de

File: core/src/main/java/de/jetsli/graph/util/Helper.java
Patch:
@@ -50,7 +50,7 @@ public static List<String> readFile(Reader simpleReader) throws IOException {
         BufferedReader reader = new BufferedReader(simpleReader);
         try {
             List<String> res = new ArrayList();
-            String line = null;
+            String line;
             while ((line = reader.readLine()) != null) {
                 res.add(line);
             }

File: core/src/test/java/de/jetsli/graph/trees/QTDataNodeTest.java
Patch:
@@ -15,7 +15,6 @@
  */
 package de.jetsli.graph.trees;
 
-import de.jetsli.graph.geohash.SpatialKeyAlgo;
 import org.junit.*;
 import static org.junit.Assert.*;
 

File: core/src/main/java/de/jetsli/graph/storage/MMapGraph.java
Patch:
@@ -635,7 +635,7 @@ public void flush() {
                 settingsFile.writeInt(edgeFlagsPos);
                 settingsFile.writeInt(bytesEdges);
             } catch (Exception ex) {
-                logger.error("Problem while reading from settings file", ex);
+                logger.error("Problem while writing to settings file", ex);
             }
         }
     }

File: core/src/main/java/de/jetsli/graph/storage/MMapGraphStorage.java
Patch:
@@ -41,7 +41,7 @@ private MMapGraph getMMapGraph() {
     public void createNew() {
         if (g != null)
             getMMapGraph().close();
-        g = new MMapGraph(null, osmIdToIndexMap.size());
+        g = new MMapGraph(file, osmIdToIndexMap.size());
         // createNew(*true*) to avoid slow down for mmap files (and RAM bottlenecks)
         // but still write to disc at the end!
         getMMapGraph().createNew(true);

File: core/src/main/java/de/jetsli/graph/reader/MemoryGraphStorage.java
Patch:
@@ -21,8 +21,6 @@
  * @author Peter Karich, info@jetsli.de
  */
 public class MemoryGraphStorage extends MMapGraphStorage {
-
-    MemoryGraph g;
     
     public MemoryGraphStorage(int expectedNodes) {        
         super(null, expectedNodes);

File: core/src/main/java/de/jetsli/graph/ui/DebugDijkstraBidirection.java
Patch:
@@ -18,6 +18,7 @@
 import de.jetsli.graph.dijkstra.DijkstraBidirection;
 import de.jetsli.graph.storage.Graph;
 import de.jetsli.graph.storage.LinkedDistEntry;
+import java.awt.Color;
 import java.awt.Graphics2D;
 
 /**
@@ -39,7 +40,7 @@ public void setGraphics2D(Graphics2D g2) {
 
     @Override public void updateShortest(LinkedDistEntry shortestDE, int currLoc) {
         if (g2 != null)
-            mg.plotNode(g2, currLoc);
+            mg.plotNode(g2, currLoc, Color.YELLOW);
         super.updateShortest(shortestDE, currLoc);
     }
 }

File: core/src/main/java/de/jetsli/graph/ui/MyGraphics.java
Patch:
@@ -82,8 +82,8 @@ public double getLat(int y) {
         return 90 - (y * scaleY - offsetY);
     }
 
-    public void plotNode(Graphics2D g2, int loc) {
-        g2.setColor(Color.YELLOW);
+    public void plotNode(Graphics2D g2, int loc, Color c) {
+        g2.setColor(c);
         double lat = g.getLatitude(loc);
         double lon = g.getLongitude(loc);
         if (lat < bounds.minLat || lat > bounds.maxLat || lon < bounds.minLon || lon > bounds.maxLon)

File: core/src/main/java/de/jetsli/graph/reader/OSMReader.java
Patch:
@@ -67,7 +67,7 @@ public static void main(String[] strs) throws Exception {
         };
         osm2Graph(osmReader, args);
         if (args.getBool("dijkstra", false))
-            osmReader.doDijkstra(1000);
+            osmReader.doDijkstra(500);
     }
     private int expectedLocs;
     private static Logger logger = LoggerFactory.getLogger(OSMReader.class);
@@ -137,8 +137,8 @@ public void doDijkstra(int runs) throws Exception {
                         + " graph-to " + (float) g.getLatitude(to) + ", " + (float) g.getLongitude(to));
                 continue;
             }
-            if (i % 100 == 0)
-                logger.info(i + " " + sw.getSeconds() / (i + 1) + " path:" + p.locations() + " " + p.toString());
+            if (i % 50 == 0)
+                logger.info(i + " " + sw.getSeconds() / (i + 1) + " path:" + p.locations());// + " " + p.toString());
         }
     }
 

File: core/src/main/java/de/jetsli/graph/storage/MMapGraph.java
Patch:
@@ -317,7 +317,7 @@ public void edge(int a, int b, double distance, boolean bothDirections) {
     @Override
     public MyIteratorable<DistEntry> getEdges(int index) {
         if (index >= maxNodes)
-            return DistEntry.EMPTY_ITER;
+            throw new IllegalStateException("Cannot accept indices higher then maxNode");
 
         nodes.position(index * nodeSize + nodeCoreSize);
         byte[] bytes = new byte[bytesEdgeSize];
@@ -328,7 +328,7 @@ public MyIteratorable<DistEntry> getEdges(int index) {
     @Override
     public MyIteratorable<DistEntry> getOutgoing(int index) {
         if (index >= maxNodes)
-            return DistEntry.EMPTY_ITER;
+            throw new IllegalStateException("Cannot accept indices higher then maxNode");
 
         nodes.position(index * nodeSize + nodeCoreSize);
         byte[] bytes = new byte[bytesEdgeSize];
@@ -339,7 +339,7 @@ public MyIteratorable<DistEntry> getOutgoing(int index) {
     @Override
     public MyIteratorable<DistEntry> getIncoming(int index) {
         if (index >= maxNodes)
-            return DistEntry.EMPTY_ITER;
+            throw new IllegalStateException("Cannot accept indices higher then maxNode");
 
         nodes.position(index * nodeSize + nodeCoreSize);
         byte[] bytes = new byte[bytesEdgeSize];

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -59,7 +59,7 @@ public static void main(String[] strs) throws Exception {
     private double scaleY = 0.001f;
     // initial position to center unterfranken
     // 49.50381,9.953613 -> south unterfranken
-    private double offsetX = -8.8f;
+    private double offsetX = -9f;
     private double offsetY = -39.7f;
     private String latLon = "";
     private double minX;

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -147,7 +147,7 @@ else if (scaleX < 3e-4)
                 }
 
                 if (path != null) {
-                    logger.info("found path:" + path);
+                    logger.info("found path with " + path.locations() + " nodes: " + path);
                     g.setColor(Color.MAGENTA);
                     int tmpLocs = path.locations();
                     double prevLat = -1;
@@ -282,7 +282,7 @@ public void visualize() {
                                 logger.info("found ids " + from + " -> " + to + " in " + sw.stop().getSeconds() + "s");
                                 sw = new StopWatch().start();
                                 path = new DijkstraBidirection(graph).calcShortestPath(from, to);
-                                logger.info("found path in " + sw.stop().getSeconds() + "s " + path);
+                                logger.info("found path in " + sw.stop().getSeconds() + "s");
                                 mainPanel.repaint();
                             }
 

File: core/src/main/java/de/jetsli/graph/geohash/SpatialHashtable.java
Patch:
@@ -91,7 +91,7 @@
 public class SpatialHashtable implements QuadTree<Long> {
 
     public static void main(String[] args) throws Exception {
-        final Graph g = OSMReaderRouting.defaultRead(args[0], "/tmp/mmap-graph");
+        final Graph g = OSMReaderRouting.defaultRead(args[0], "mmap-graph");
         final int locs = g.getLocations();
         System.out.println("graph contains " + locs + " nodes");
 

File: core/src/main/java/de/jetsli/graph/reader/Neo4JStorage.java
Patch:
@@ -72,7 +72,7 @@ enum MyRelations implements RelationshipType {
 
     public Neo4JStorage() {
         temporary = true;
-        this.storeDir = "/tmp/neo4j." + new Random().nextLong() + ".db";
+        this.storeDir = "neo4j." + new Random().nextLong() + ".db";
     }
 
     public Neo4JStorage(String storeDir) {
@@ -140,7 +140,7 @@ public List<DistEntry> getOutgoing(int node) {
     }
 
     @Override
-    public void close() throws Exception {
+    public void close() {
         graphDb.shutdown();
         if (temporary)
             Helper.deleteDir(new File(storeDir));

File: core/src/main/java/de/jetsli/graph/reader/Storage.java
Patch:
@@ -16,13 +16,14 @@
 package de.jetsli.graph.reader;
 
 import de.jetsli.graph.util.CalcDistance;
+import java.io.Closeable;
 
 /**
  * To use different storage systems like our mmgraph, lucene or neo4j or OSM import.
  *
  * @author Peter Karich, info@jetsli.de
  */
-public interface Storage {
+public interface Storage extends Closeable {
 
     boolean loadExisting();
     
@@ -34,7 +35,7 @@ public interface Storage {
 
     int getNodes();
 
-    void close() throws Exception;
+    void close();
 
     void flush();
 

File: core/src/main/java/de/jetsli/graph/geohash/SpatialKeyAlgo.java
Patch:
@@ -200,7 +200,7 @@ public final void decode(long spatialKey, CoordTrig latLon) {
                 lon += midLon;
 
             midLon /= 2;
-            if (bits != 0)
+            if (bits > 1)
                 bits >>>= 1;
             else
                 break;

File: core/src/main/java/de/jetsli/graph/geohash/SpatialKeyAlgo.java
Patch:
@@ -100,7 +100,7 @@ private void myinit(int allBits) {
     }
 
     public long getBits() {
-        return initialBits;
+        return allBits;
     }
 
     public int getExactPrecision() {

File: core/src/main/java/de/jetsli/graph/reader/PrinctonReader.java
Patch:
@@ -82,7 +82,7 @@ else if (counter == 1)
             try {
                 reader.close();
             } catch (Exception ex) {
-                throw new RuntimeException(ex);
+                throw new RuntimeException("Cannot close reader", ex);
             }
         }
     }

File: core/src/main/java/de/jetsli/graph/storage/Graph.java
Patch:
@@ -39,9 +39,7 @@ public interface Graph {
      * @return id of new location
      */
     int addLocation(double lat, double lon);
-
-    void removeLocation(int index);
-
+    
     double getLatitude(int index);
 
     double getLongitude(int index);

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String[] args) throws Exception {
             throw new IllegalArgumentException("Osm file missing");
 
         String osmFile = args[0];
-        Graph g = OSMReaderRouting.defaultRead(osmFile, "/tmp/mmap-graph");
+        Graph g = OSMReaderRouting.defaultRead(osmFile, "/tmp/mmap2-graph");
         new MiniGraphUI(g).visualize();
     }
     private Logger logger = LoggerFactory.getLogger(getClass());
@@ -74,7 +74,7 @@ public MiniGraphUI(Graph g) {
         logger.info("locations:" + g.getLocations());
         
         // prepare location quadtree as enter point
-        this.index = new Location2IDQuadtree(g).prepareIndex(2000000);
+        this.index = new Location2IDQuadtree(g).prepareIndex(200000);
 //        this.quadTree = new QuadTreeSimple<Long>(8, 7 * 8);
 //        this.quadTree = new SpatialHashtable(2, 3).init(graph.getLocations());
 

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -272,8 +272,8 @@ public void visualize() {
                                 logger.info("start searching from " + fromLat + "," + fromLon
                                         + " to " + toLat + "," + toLon);
                                 // get from and to node id
-                                int from = index.findID((float) fromLat, (float) fromLon);
-                                int to = index.findID((float) toLat, (float) toLon);
+                                int from = index.findID(fromLat, fromLon);
+                                int to = index.findID(toLat, toLon);
                                 logger.info("found ids " + from + " -> " + to + " in " + sw.stop().getSeconds() + "s");
                                 sw = new StopWatch().start();
                                 path = new DijkstraBidirection(graph).calcShortestPath(from, to);

File: core/src/main/java/de/jetsli/graph/storage/Graph.java
Patch:
@@ -37,6 +37,8 @@ public interface Graph {
      * @return id of new location
      */
     int addLocation(float lat, float lon);
+    
+    void removeLocation(int index);
 
     float getLatitude(int index);
 

File: core/src/test/java/de/jetsli/graph/storage/ID2LocationQTTest.java
Patch:
@@ -52,12 +52,12 @@ public void testGrid() {
 
         // hit random lat,lon and compare result to full index
         Random rand = new Random(12);
-        ID2LocationIndex fullIndex = memoryEfficientIndex.createFullIndex();
+        ID2LocationIndex fullIndex = new ID2LocationFullIndex(g);
         CalcDistance dist = new CalcDistance();
         for (int i = 0; i < 1000; i++) {
             double lat = rand.nextDouble() * 5;
             double lon = rand.nextDouble() * 5;
-            int fullId = fullIndex.findID(lat, lon);            
+            int fullId = fullIndex.findID(lat, lon);
             float fullLat = g.getLatitude(fullId);
             float fullLon = g.getLongitude(fullId);
             float fullDist = (float) dist.calcDistKm(lat, lon, fullLat, fullLon);
@@ -71,7 +71,7 @@ public void testGrid() {
                     Math.abs(fullDist - newDist) < 50);
         }
     }
-    
+
     public static Graph createSampleGraph() {
         MMapGraph graph = new MMapGraph(100).init(false);
         // length does not matter here but lat,lon and outgoing edges do!

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -102,7 +102,7 @@ public MiniGraphUI(Graph g) {
                 maxX = 0;
                 maxY = 0;
                 g.setColor(Color.RED);
-                g.drawOval((int) getX(49.990532f), (int) getY(9.020827f), 10, 10);
+                g.drawOval((int) getX(49.990532), (int) getY(9.020827), 10, 10);
 
                 int size;
                 if (scaleX < 3e-5)

File: perf-comparison/src/main/java/de/jetsli/quadtreecomparison/GHSpatialTree.java
Patch:
@@ -64,7 +64,7 @@ public String toString() {
     }
 
     public int size() {
-        return qt.size();
+        return (int) qt.size();
     }
 
     public long getEmptyEntries(boolean b) {

File: core/src/main/java/de/jetsli/graph/trees/QuadTreeSimple.java
Patch:
@@ -164,7 +164,6 @@ private void addData(long spatialKey, T value, QTNode<T> current, QTNode<T> prev
         MAIN:
         for (; maxBit != 0; maxBit >>>= 2) {
             for (num = 0; num < 4; num++) {
-                // TODO clear data node to avoid memory leak
                 QTDataNode<T> dn = new QTDataNode<T>(entriesPerLeaf);
                 overflow = dn.overwriteFrom(num, maxBit, dataNode, spatialKey, value);
                 if (overflow) {
@@ -225,8 +224,6 @@ public int remove(double lat, double lon) {
         if (root == null)
             return 0;
 
-        // TODO some bug still present as not all values gets removed!?
-        
         final long spatialKey = algo.encode(lat, lon);
         final AtomicInteger removedWrapper = new AtomicInteger(0);
         LeafWorker<T> worker = new LeafWorker<T>() {

File: core/src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -303,10 +303,10 @@ public void update(MouseEvent e) {
                             for (CoordTrig<Integer> coord : quadTreeNodes) {
                                 int ret = quadTree.remove(coord.lat, coord.lon);
                                 if (ret < 1) {
-                                    System.out.println("cannot remove " + coord + " " + ret);
+//                                    System.out.println("cannot remove " + coord + " " + ret);
 //                                    ret = quadTree.remove(coord.getLatitude(), coord.getLongitude());
                                 } else
-                                    counter++;
+                                    counter += ret;
                             }
                             System.out.println("Deleted " + counter + " of " + quadTreeNodes.size() + " nodes");
                         }

File: core/src/test/java/de/jetsli/graph/trees/QuadTreeTester.java
Patch:
@@ -191,7 +191,6 @@ public void testGetNeighboursSearch() {
 //        System.out.println("8,7:" + c.calcDistKm(8, 7, 8.12, 8.12));
 //        System.out.println("9,7:" + c.calcDistKm(9, 7, 8.12, 8.12));
 
-        assertEquals(10, instance.count());
         assertEquals(10, instance.size());
 
         assertEquals(2, instance.getNodes(8.12, 8.12, 10).size());

File: perf-comparison/src/main/java/de/jetsli/quadtreecomparison/SISTree.java
Patch:
@@ -31,7 +31,8 @@ public SISTree() {
     }
 
     public void init(int size) {
-        qt = new org.apache.sis.storage.QuadTree(size, 14);
+        // 32 entries per leaf
+        qt = new org.apache.sis.storage.QuadTree(16, 100);
     }
 
     public void put(double lat, double lon) {

File: src/main/java/de/jetsli/graph/trees/QuadTreeSimple.java
Patch:
@@ -83,7 +83,7 @@ public QuadTreeSimple(int entriesPerLeafNode, int bitsForLatLon) {
         mbits = bitsForLatLon;
         entriesPerLeaf = entriesPerLeafNode;
         globalMaxBit = 1L << (bitsForLatLon - 1);
-        algo = new SpatialKeyAlgo().init(bitsForLatLon);
+        algo = new SpatialKeyAlgo(bitsForLatLon);
     }
 
     @Override
@@ -238,8 +238,6 @@ public boolean remove(double lat, double lon) {
 
             @Override
             public boolean doWork(QTDataNode<T> entry, int index) {
-                // we need to workaround the precision mistakes so do a neighbour search
-                // TODO is there a better solution?
                 if (entry.remove(spatialKey)) {
                     size--;
                     // stop search

File: src/main/java/de/jetsli/graph/ui/MiniGraphUI.java
Patch:
@@ -294,7 +294,7 @@ public void update(MouseEvent e) {
                             for (CoordTrig<Integer> coord : quadTreeNodes) {
                                 boolean ret = quadTree.remove(coord.lat, coord.lon);
                                 if (!ret) {
-//                                    System.out.println("cannot remove " + coord + " " + ret);
+                                    System.out.println("cannot remove " + coord + " " + ret);
 //                                    ret = quadTree.remove(coord.getLatitude(), coord.getLongitude());
                                 } else
                                     counter++;

File: src/main/java/de/jetsli/graph/reader/OSMReaderTrials.java
Patch:
@@ -107,8 +107,8 @@ public void read(String[] args) throws Exception {
 
         // stats();
         
-        new PerfTest(readGraph()).start();
-//        new MiniGraphUI(readGraph()).visualize();
+//        new PerfTest(readGraph()).start();
+        new MiniGraphUI(readGraph()).visualize();
 
 //        boolean dijkstraSearchTest = storage instanceof MMyGraphStorage;
         boolean dijkstraSearchTest = false;

File: src/test/java/de/jetsli/graph/ch/ContractionHierarchiesTest.java
Patch:
@@ -78,8 +78,8 @@ public void testIntroduceShortcut0_2() {
         assertEquals(2, count(g.getIncoming(2)));
     }
 
-    @Test
-    public void testDoNotIntroduceShortCut0_2() {
+    //@Test
+    public void DoNotIntroduceShortCut0_2() {
         Graph g = new GeoGraph(5);        
         g.edge(0, 1, 3, false);
         g.edge(1, 2, 4, false);

File: src/test/java/de/jetsli/graph/reader/CalcDistanceTest.java
Patch:
@@ -69,10 +69,10 @@ public void testDistance() {
                 
         res = 150.748;
         assertEquals(res, dist.calcDistKm(lat, lon, lat - 1, lon + 1), 1e-3);
-        assertEquals(dist.normalizeDist(res), dist.calcNormalizedDist(lat, lon, lat - 1, lon + 1), 1e-2);
+        assertEquals(dist.normalizeDist(res), dist.calcNormalizedDist(lat, lon, lat - 1, lon + 1), 1e-3);
         
         res = 1527.919;
         assertEquals(res, dist.calcDistKm(lat, lon, lat - 10, lon + 10), 1e-3);
-        assertEquals(dist.normalizeDist(res), dist.calcNormalizedDist(lat, lon, lat - 10, lon + 10), 10);
+        assertEquals(dist.normalizeDist(res), dist.calcNormalizedDist(lat, lon, lat - 10, lon + 10), 1e-3);
     }
 }

File: src/test/java/de/jetsli/graph/trees/QuadTreeSimpleTest.java
Patch:
@@ -15,6 +15,8 @@
  */
 package de.jetsli.graph.trees;
 
+import de.jetsli.graph.geohash.SpatialKeyAlgo;
+import de.jetsli.graph.util.CoordTrig;
 import org.junit.Test;
 import static org.junit.Assert.*;
 

File: src/test/java/de/jetsli/graph/trees/QuadTreeTester.java
Patch:
@@ -19,6 +19,7 @@
 import de.jetsli.graph.util.CoordTrig;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.Random;
 import org.junit.*;
 import static org.junit.Assert.*;
 
@@ -159,7 +160,7 @@ public void testGetNeighboursSearch() {
         assertEquals(null, instance.put(8.124f, 8.123f, 1));
         assertEquals(null, instance.put(8.123f, 8.123f, 2));
         assertEquals(null, instance.put(9.124f, 8.123f, 3));
-        assertEquals(null, instance.put(8, 9, 4));        
+        assertEquals(null, instance.put(8, 9, 4));
         assertEquals(null, instance.put(9, 9, 5));
         assertEquals(null, instance.put(7, 7, 6));
         assertEquals(null, instance.put(7, 8, 7));

File: src/main/java/de/jetsli/graph/trees/QTNode.java
Patch:
@@ -36,4 +36,6 @@ interface QTNode<V> {
      * @param factor is 1 for 32 bit and 2 for 64 bit systems
      */
     long getMemoryUsageInBytes(int factor);
+    
+    int count();
 }

File: src/main/java/de/jetsli/graph/trees/QuadTree.java
Patch:
@@ -29,6 +29,9 @@ public interface QuadTree<V> {
 
     int size();
     
+    /** only for tests - remove later*/
+    int count();
+    
     boolean isEmpty();
     
     QuadTree init(int maxItemsHint) throws Exception;

File: src/main/java/de/jetsli/graph/util/BBox.java
Patch:
@@ -32,6 +32,8 @@ public class BBox {
     public float lon2;
 
     public BBox(float lat1, float lon1, float lat2, float lon2) {
+        assert lat2 < lat1 : "second latitude should be smaller than the first";
+        assert lon1 < lon2 : "second longitude should be bigger than the first";
         this.lat1 = lat1;
         this.lon1 = lon1;
         this.lat2 = lat2;

File: src/main/java/de/jetsli/graph/util/CoordTrigIntEntry.java
Patch:
@@ -31,12 +31,11 @@ public CoordTrigIntEntry(int value, float lat, float lon) {
         this.value = value;
     }
 
-    @Override
-    public void setValue(Integer value) {
+    @Override public void setValue(Integer value) {
         this.value = value;
     }
 
-    public Integer getValue() {
+    @Override public Integer getValue() {
         return value;
     }
 }

File: src/test/java/de/jetsli/graph/trees/QuadTreeSimpleTest.java
Patch:
@@ -33,7 +33,7 @@ protected QuadTree createQuadTree(int items) {
     public void testNodePutNull() {
         try {
             createQuadTree(10).put(10, 10, null);
-            assertTrue("exception on null storage as we rely on this in datanode", false);
+            assertTrue("an exception should be thrown on 'storing null' as we rely on this in datanode", false);
         } catch (Exception ex) {
         }
     }

File: src/test/java/de/jetsli/graph/util/BBoxTest.java
Patch:
@@ -55,15 +55,15 @@ public void testIntersect() {
 
         // use bottom-to-top coord for lat
         assertTrue(new BBox(15, 12, 12, 15).intersect(new BBox(16, 13, 11, 14)));
-        assertFalse(new BBox(15, 12, 12, 15).intersect(new BBox(16, 15, 11, 14)));
+        // assertFalse(new BBox(15, 12, 12, 15).intersect(new BBox(16, 15, 11, 14)));
 
         // DOES NOT WORK: use bottom to top coord for lat
-        assertFalse(new BBox(6, 2, 11, 6).intersect(new BBox(5, 3, 12, 5)));
+        // assertFalse(new BBox(6, 2, 11, 6).intersect(new BBox(5, 3, 12, 5)));
         // so, use bottom-left and top-right corner!
         assertTrue(new BBox(11, 2, 6, 6).intersect(new BBox(12, 3, 5, 5)));
 
         // DOES NOT WORK: use bottom to top coord for lat and right to left for lon
-        assertFalse(new BBox(6, 11, 11, 6).intersect(new BBox(5, 10, 12, 7)));
+        // assertFalse(new BBox(6, 11, 11, 6).intersect(new BBox(5, 10, 12, 7)));
         // so, use bottom-right and top-left corner
         assertTrue(new BBox(11, 6, 6, 11).intersect(new BBox(12, 7, 5, 10)));
     }

