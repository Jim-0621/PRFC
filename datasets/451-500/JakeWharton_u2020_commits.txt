File: app/src/internalDebug/java/com/jakewharton/u2020/data/MockRequestHandler.java
Patch:
@@ -28,7 +28,7 @@ public final class MockRequestHandler extends RequestHandler {
 
   /** Emulate the disk cache by storing the URLs in an LRU using its size as the value. */
   private final LruCache<String, Long> emulatedDiskCache =
-      new LruCache<String, Long>(((int) Math.max(DataModule.DISK_CACHE_SIZE, Integer.MAX_VALUE))) {
+      new LruCache<String, Long>(((int) Math.min(DataModule.DISK_CACHE_SIZE, Integer.MAX_VALUE))) {
         @Override protected int sizeOf(String key, Long value) {
           return (int) Math.min(value.longValue(), Integer.MAX_VALUE);
         }

File: app/src/internalDebug/java/com/jakewharton/u2020/data/MockRequestHandler.java
Patch:
@@ -28,7 +28,7 @@ public final class MockRequestHandler extends RequestHandler {
 
   /** Emulate the disk cache by storing the URLs in an LRU using its size as the value. */
   private final LruCache<String, Long> emulatedDiskCache =
-      new LruCache<String, Long>(((int) Math.max(DataModule.DISK_CACHE_SIZE, Integer.MAX_VALUE))) {
+      new LruCache<String, Long>(((int) Math.min(DataModule.DISK_CACHE_SIZE, Integer.MAX_VALUE))) {
         @Override protected int sizeOf(String key, Long value) {
           return (int) Math.min(value.longValue(), Integer.MAX_VALUE);
         }

File: app/src/internalDebug/java/com/jakewharton/u2020/data/api/SharedPreferencesMockResponseSupplier.java
Patch:
@@ -20,6 +20,8 @@ final class SharedPreferencesMockResponseSupplier implements MockResponseSupplie
 
   @SuppressLint("ApplySharedPref") // Persist to disk because we might kill the process next.
   @Override public void set(Enum<?> value) {
-    preferences.edit().putString(value.getClass().getCanonicalName(), value.name()).commit();
+    preferences.edit()
+        .putString(value.getDeclaringClass().getCanonicalName(), value.name())
+        .commit();
   }
 }

File: app/src/internalDebug/java/com/jakewharton/u2020/ui/debug/DebugDrawerLayout.java
Patch:
@@ -56,6 +56,7 @@
 
 /** This is a fork of DrawerLayout which propagates insets without applying them. */
 @SuppressLint("all")
+@SuppressWarnings({"ClassCanBeStatic", "OperatorPrecedence", "ShortCircuitBoolean", "MissingOverride"})
 public class DebugDrawerLayout extends ViewGroup implements DrawerLayoutImpl {
   private static final String TAG = "DrawerLayout";
 

File: app/src/internalDebug/java/com/jakewharton/u2020/ui/debug/DebugView.java
Patch:
@@ -347,7 +347,7 @@ private void setupUserInterfaceSection() {
 
     RxAdapterView.itemSelections(uiAnimationSpeedView)
         .map(speedAdapter::getItem)
-        .filter(item -> item != animationSpeed.get())
+        .filter(item -> !item.equals(animationSpeed.get()))
         .subscribe(selected -> {
           Timber.d("Setting animation speed to %sx", selected);
           animationSpeed.set(selected);

File: app/src/internalDebug/java/com/jakewharton/u2020/ui/debug/SocketActivityHierarchyServer.java
Patch:
@@ -53,6 +53,7 @@
  * <p>To use this view server, your application must require the INTERNET
  * permission.</p>
  */
+@SuppressWarnings({"MissingOverride", "FutureReturnValueIgnored"})
 public class SocketActivityHierarchyServer implements Runnable, ActivityHierarchyServer {
   /**
    * The default port used to start view servers.

File: app/src/main/java/com/jakewharton/u2020/ui/trending/TrendingTimespan.java
Patch:
@@ -12,6 +12,7 @@ enum TrendingTimespan {
 
   private final String name;
   private final long duration;
+  @SuppressWarnings("ImmutableEnumChecker") // TODO https://github.com/google/error-prone/pull/686
   private final TemporalUnit durationUnit;
 
   TrendingTimespan(String name, int duration, TemporalUnit durationUnit) {

File: service/github-mock/src/main/java/com/jakewharton/u2020/data/api/MockRepositoriesResponse.java
Patch:
@@ -35,6 +35,7 @@ public enum MockRepositoriesResponse {
   EMPTY("Empty", new RepositoriesResponse(null));
 
   public final String name;
+  @SuppressWarnings("ImmutableEnumChecker") // TODO make this @Immutable.
   public final RepositoriesResponse response;
 
   MockRepositoriesResponse(String name, RepositoriesResponse response) {

File: service/github-mock/src/main/java/com/jakewharton/u2020/data/api/SortUtil.java
Patch:
@@ -30,8 +30,6 @@ static void sort(List<Repository> repositories, Sort sort, Order order) {
       case UPDATED:
         Collections.sort(repositories, order == ASC ? UPDATED_ASC : UPDATED_DESC);
         break;
-      default:
-        throw new IllegalArgumentException("Unknown sort: " + sort);
     }
   }
 

File: app/src/internalDebug/java/com/jakewharton/u2020/data/api/SharedPreferencesMockResponseSupplier.java
Patch:
@@ -20,6 +20,8 @@ final class SharedPreferencesMockResponseSupplier implements MockResponseSupplie
 
   @SuppressLint("ApplySharedPref") // Persist to disk because we might kill the process next.
   @Override public void set(Enum<?> value) {
-    preferences.edit().putString(value.getClass().getCanonicalName(), value.name()).commit();
+    preferences.edit()
+        .putString(value.getDeclaringClass().getCanonicalName(), value.name())
+        .commit();
   }
 }

File: app/src/internalDebug/java/com/jakewharton/u2020/ui/debug/DebugDrawerLayout.java
Patch:
@@ -56,6 +56,7 @@
 
 /** This is a fork of DrawerLayout which propagates insets without applying them. */
 @SuppressLint("all")
+@SuppressWarnings({"ClassCanBeStatic", "OperatorPrecedence", "ShortCircuitBoolean", "MissingOverride"})
 public class DebugDrawerLayout extends ViewGroup implements DrawerLayoutImpl {
   private static final String TAG = "DrawerLayout";
 

File: app/src/internalDebug/java/com/jakewharton/u2020/ui/debug/DebugView.java
Patch:
@@ -347,7 +347,7 @@ private void setupUserInterfaceSection() {
 
     RxAdapterView.itemSelections(uiAnimationSpeedView)
         .map(speedAdapter::getItem)
-        .filter(item -> item != animationSpeed.get())
+        .filter(item -> !item.equals(animationSpeed.get()))
         .subscribe(selected -> {
           Timber.d("Setting animation speed to %sx", selected);
           animationSpeed.set(selected);

File: app/src/internalDebug/java/com/jakewharton/u2020/ui/debug/SocketActivityHierarchyServer.java
Patch:
@@ -53,6 +53,7 @@
  * <p>To use this view server, your application must require the INTERNET
  * permission.</p>
  */
+@SuppressWarnings({"MissingOverride", "FutureReturnValueIgnored"})
 public class SocketActivityHierarchyServer implements Runnable, ActivityHierarchyServer {
   /**
    * The default port used to start view servers.

File: app/src/main/java/com/jakewharton/u2020/ui/trending/TrendingTimespan.java
Patch:
@@ -12,6 +12,7 @@ enum TrendingTimespan {
 
   private final String name;
   private final long duration;
+  @SuppressWarnings("ImmutableEnumChecker") // TODO https://github.com/google/error-prone/pull/686
   private final TemporalUnit durationUnit;
 
   TrendingTimespan(String name, int duration, TemporalUnit durationUnit) {

File: service/github-mock/src/main/java/com/jakewharton/u2020/data/api/MockRepositoriesResponse.java
Patch:
@@ -35,6 +35,7 @@ public enum MockRepositoriesResponse {
   EMPTY("Empty", new RepositoriesResponse(null));
 
   public final String name;
+  @SuppressWarnings("ImmutableEnumChecker") // TODO make this @Immutable.
   public final RepositoriesResponse response;
 
   MockRepositoriesResponse(String name, RepositoriesResponse response) {

File: service/github-mock/src/main/java/com/jakewharton/u2020/data/api/SortUtil.java
Patch:
@@ -30,8 +30,6 @@ static void sort(List<Repository> repositories, Sort sort, Order order) {
       case UPDATED:
         Collections.sort(repositories, order == ASC ? UPDATED_ASC : UPDATED_DESC);
         break;
-      default:
-        throw new IllegalArgumentException("Unknown sort: " + sort);
     }
   }
 

File: src/androidTestInternal/java/com/jakewharton/u2020/U2020TestRunner.java
Patch:
@@ -1,5 +1,6 @@
 package com.jakewharton.u2020;
 
+import android.annotation.SuppressLint;
 import android.app.KeyguardManager;
 import android.content.Context;
 import android.os.PowerManager;
@@ -14,6 +15,7 @@
 public final class U2020TestRunner extends AndroidJUnitRunner {
   private PowerManager.WakeLock wakeLock;
 
+  @SuppressLint("MissingPermission")
   @Override public void onStart() {
     // Inform the app we are an instrumentation test before the object graph is initialized.
     DebugU2020Module.instrumentationTest = true;

File: src/internalDebug/java/com/jakewharton/u2020/data/DebugDataModule.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.app.Application;
 import android.content.SharedPreferences;
-import android.net.Uri;
+
 import com.f2prateek.rx.preferences.Preference;
 import com.f2prateek.rx.preferences.RxSharedPreferences;
 import com.jakewharton.u2020.IsInstrumentationTest;
@@ -145,7 +145,7 @@ Preference<Boolean> provideScalpelWireframeEnabled(RxSharedPreferences preferenc
       builder.addRequestHandler(new MockRequestHandler(behavior, app.getAssets()));
     }
     builder.listener((picasso, uri, exception) -> {
-      Timber.e(exception, "Error while loading image " + uri);
+      Timber.e(exception, "Error while loading image %s", uri);
     });
     return builder.build();
   }

File: src/internalDebug/java/com/jakewharton/u2020/ui/ExternalIntentActivity.java
Patch:
@@ -113,7 +113,7 @@ private void fillFlags() {
           builder.append(field.getName()).append('\n');
         }
       } catch (IllegalAccessException e) {
-        Timber.e(e, "Couldn't read value for: " + field.getName());
+        Timber.e(e, "Couldn't read value for: %s", field.getName());
       }
     }
 

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingView.java
Patch:
@@ -154,7 +154,7 @@ public Observable<Result<RepositoriesResponse>> call(TrendingTimespan trendingTi
         Timber.e(result.error(), "Failed to get trending repositories");
       } else {
         Response<RepositoriesResponse> response = result.response();
-        Timber.e("Failed to get trending repositories. Server returned " + response.code());
+        Timber.e("Failed to get trending repositories. Server returned %d", response.code());
       }
       swipeRefreshView.setRefreshing(false);
       animatorView.setDisplayedChildId(R.id.trending_error);

File: src/internalDebug/java/com/jakewharton/u2020/data/DebugDataModule.java
Patch:
@@ -2,7 +2,7 @@
 
 import android.app.Application;
 import android.content.SharedPreferences;
-import android.net.Uri;
+
 import com.f2prateek.rx.preferences.Preference;
 import com.f2prateek.rx.preferences.RxSharedPreferences;
 import com.jakewharton.u2020.IsInstrumentationTest;
@@ -145,7 +145,7 @@ Preference<Boolean> provideScalpelWireframeEnabled(RxSharedPreferences preferenc
       builder.addRequestHandler(new MockRequestHandler(behavior, app.getAssets()));
     }
     builder.listener((picasso, uri, exception) -> {
-      Timber.e(exception, "Error while loading image " + uri);
+      Timber.e(exception, "Error while loading image %s", uri);
     });
     return builder.build();
   }

File: src/internalDebug/java/com/jakewharton/u2020/ui/ExternalIntentActivity.java
Patch:
@@ -113,7 +113,7 @@ private void fillFlags() {
           builder.append(field.getName()).append('\n');
         }
       } catch (IllegalAccessException e) {
-        Timber.e(e, "Couldn't read value for: " + field.getName());
+        Timber.e(e, "Couldn't read value for: %s", field.getName());
       }
     }
 

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingView.java
Patch:
@@ -154,7 +154,7 @@ public Observable<Result<RepositoriesResponse>> call(TrendingTimespan trendingTi
         Timber.e(result.error(), "Failed to get trending repositories");
       } else {
         Response<RepositoriesResponse> response = result.response();
-        Timber.e("Failed to get trending repositories. Server returned " + response.code());
+        Timber.e("Failed to get trending repositories. Server returned %d", response.code());
       }
       swipeRefreshView.setRefreshing(false);
       animatorView.setDisplayedChildId(R.id.trending_error);

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingView.java
Patch:
@@ -44,6 +44,7 @@
 import rx.android.schedulers.AndroidSchedulers;
 import rx.functions.Action1;
 import rx.functions.Func1;
+import rx.schedulers.Schedulers;
 import rx.subjects.PublishSubject;
 import rx.subscriptions.CompositeSubscription;
 import timber.log.Timber;
@@ -142,7 +143,8 @@ public Observable<Result<RepositoriesResponse>> call(TrendingTimespan trendingTi
           SearchQuery trendingQuery = new SearchQuery.Builder() //
               .createdSince(trendingTimespan.createdSince()) //
               .build();
-          return githubService.repositories(trendingQuery, Sort.STARS, Order.DESC);
+          return githubService.repositories(trendingQuery, Sort.STARS, Order.DESC)
+              .subscribeOn(Schedulers.io());
         }
       };
 

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingAdapter.java
Patch:
@@ -25,6 +25,7 @@ public interface RepositoryClickListener {
   public TrendingAdapter(Picasso picasso, RepositoryClickListener repositoryClickListener) {
     this.picasso = picasso;
     this.repositoryClickListener = repositoryClickListener;
+    setHasStableIds(true);
   }
 
   @Override public void call(List<Repository> repositories) {
@@ -52,20 +53,19 @@ public TrendingAdapter(Picasso picasso, RepositoryClickListener repositoryClickL
 
   public final class ViewHolder extends RecyclerView.ViewHolder {
     public final TrendingItemView itemView;
-    private Repository repository;
 
     public ViewHolder(TrendingItemView itemView) {
       super(itemView);
       this.itemView = itemView;
       this.itemView.setOnClickListener(new View.OnClickListener() {
         @Override public void onClick(View v) {
+          Repository repository = repositories.get(getAdapterPosition());
           repositoryClickListener.onRepositoryClick(repository);
         }
       });
     }
 
     public void bindTo(Repository repository) {
-      this.repository = repository;
       itemView.bindTo(repository, picasso);
     }
   }

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingAdapter.java
Patch:
@@ -25,6 +25,7 @@ public interface RepositoryClickListener {
   public TrendingAdapter(Picasso picasso, RepositoryClickListener repositoryClickListener) {
     this.picasso = picasso;
     this.repositoryClickListener = repositoryClickListener;
+    setHasStableIds(true);
   }
 
   @Override public void call(List<Repository> repositories) {
@@ -52,20 +53,19 @@ public TrendingAdapter(Picasso picasso, RepositoryClickListener repositoryClickL
 
   public final class ViewHolder extends RecyclerView.ViewHolder {
     public final TrendingItemView itemView;
-    private Repository repository;
 
     public ViewHolder(TrendingItemView itemView) {
       super(itemView);
       this.itemView = itemView;
       this.itemView.setOnClickListener(new View.OnClickListener() {
         @Override public void onClick(View v) {
+          Repository repository = repositories.get(getAdapterPosition());
           repositoryClickListener.onRepositoryClick(repository);
         }
       });
     }
 
     public void bindTo(Repository repository) {
-      this.repository = repository;
       itemView.bindTo(repository, picasso);
     }
   }

File: src/main/java/com/jakewharton/u2020/util/EnumPreferences.java
Patch:
@@ -6,12 +6,12 @@ public final class EnumPreferences {
   private EnumPreferences() {
   }
 
-  public static <T extends Enum> T getEnumValue(SharedPreferences preferences, Class<T> type,
+  public static <T extends Enum<T>> T getEnumValue(SharedPreferences preferences, Class<T> type,
       String key, T defaultValue) {
     String name = preferences.getString(key, null);
     if (name != null) {
       try {
-        return type.cast(Enum.valueOf(type, name));
+        return Enum.valueOf(type, name);
       } catch (IllegalArgumentException ignored) {
       }
     }

File: src/main/java/com/jakewharton/u2020/U2020App.java
Patch:
@@ -5,6 +5,7 @@
 import com.jakewharton.u2020.data.Injector;
 import com.jakewharton.u2020.data.LumberYard;
 import com.jakewharton.u2020.ui.ActivityHierarchyServer;
+import com.squareup.leakcanary.LeakCanary;
 import dagger.ObjectGraph;
 import javax.inject.Inject;
 import net.danlew.android.joda.JodaTimeAndroid;
@@ -21,6 +22,7 @@ public final class U2020App extends Application {
   @Override public void onCreate() {
     super.onCreate();
     JodaTimeAndroid.init(this);
+    LeakCanary.install(this);
 
     if (BuildConfig.DEBUG) {
       Timber.plant(new DebugTree());

File: src/internalRelease/java/com/jakewharton/u2020/ui/TelescopeAppContainer.java
Patch:
@@ -21,7 +21,7 @@ public final class TelescopeAppContainer implements AppContainer {
 
   @InjectView(R.id.telescope_container) TelescopeLayout telescopeLayout;
 
-  @Override public ViewGroup get(Activity activity) {
+  @Override public ViewGroup bind(Activity activity) {
     activity.setContentView(R.layout.internal_activity_frame);
     ButterKnife.inject(this, activity);
 

File: src/main/java/com/jakewharton/u2020/ui/AppContainer.java
Patch:
@@ -8,11 +8,11 @@
 /** An indirection which allows controlling the root container used for each activity. */
 public interface AppContainer {
   /** The root {@link android.view.ViewGroup} into which the activity should place its contents. */
-  ViewGroup get(Activity activity);
+  ViewGroup bind(Activity activity);
 
   /** An {@link AppContainer} which returns the normal activity content view. */
   AppContainer DEFAULT = new AppContainer() {
-    @Override public ViewGroup get(Activity activity) {
+    @Override public ViewGroup bind(Activity activity) {
       return findById(activity, android.R.id.content);
     }
   };

File: src/main/java/com/jakewharton/u2020/ui/MainActivity.java
Patch:
@@ -39,7 +39,7 @@ public final class MainActivity extends Activity {
     U2020App app = U2020App.get(this);
     app.inject(this);
 
-    ViewGroup container = appContainer.get(this);
+    ViewGroup container = appContainer.bind(this);
 
     inflater.inflate(R.layout.main_activity, container);
     ButterKnife.inject(this, container);

File: src/internalRelease/java/com/jakewharton/u2020/ui/TelescopeAppContainer.java
Patch:
@@ -21,7 +21,7 @@ public final class TelescopeAppContainer implements AppContainer {
 
   @InjectView(R.id.telescope_container) TelescopeLayout telescopeLayout;
 
-  @Override public ViewGroup get(Activity activity) {
+  @Override public ViewGroup bind(Activity activity) {
     activity.setContentView(R.layout.internal_activity_frame);
     ButterKnife.inject(this, activity);
 

File: src/main/java/com/jakewharton/u2020/ui/AppContainer.java
Patch:
@@ -8,11 +8,11 @@
 /** An indirection which allows controlling the root container used for each activity. */
 public interface AppContainer {
   /** The root {@link android.view.ViewGroup} into which the activity should place its contents. */
-  ViewGroup get(Activity activity);
+  ViewGroup bind(Activity activity);
 
   /** An {@link AppContainer} which returns the normal activity content view. */
   AppContainer DEFAULT = new AppContainer() {
-    @Override public ViewGroup get(Activity activity) {
+    @Override public ViewGroup bind(Activity activity) {
       return findById(activity, android.R.id.content);
     }
   };

File: src/main/java/com/jakewharton/u2020/ui/MainActivity.java
Patch:
@@ -39,7 +39,7 @@ public final class MainActivity extends Activity {
     U2020App app = U2020App.get(this);
     app.inject(this);
 
-    ViewGroup container = appContainer.get(this);
+    ViewGroup container = appContainer.bind(this);
 
     inflater.inflate(R.layout.main_activity, container);
     ButterKnife.inject(this, container);

File: src/internalDebug/java/com/jakewharton/u2020/ui/debug/DebugAppContainer.java
Patch:
@@ -94,7 +94,7 @@
  * the right that holds all of the debug information and settings.
  */
 @Singleton
-public class DebugAppContainer implements AppContainer {
+public final class DebugAppContainer implements AppContainer {
   private static final DateFormat DATE_DISPLAY_FORMAT = new SimpleDateFormat("yyyy-MM-dd hh:mm a");
 
   private final OkHttpClient client;

File: src/debug/java/com/jakewharton/u2020/ui/debug/DebugAppContainer.java
Patch:
@@ -241,7 +241,7 @@ public class DebugAppContainer implements AppContainer {
     });
 
     TelescopeLayout.cleanUp(activity); // Clean up any old screenshots.
-    telescopeLayout.setLens(new BugReportLens(activity));
+    telescopeLayout.setLens(new BugReportLens(activity, lumberYard));
 
     // If you have not seen the debug drawer before, show it with a message
     if (!seenDebugDrawer.get()) {

File: src/debug/java/com/jakewharton/u2020/ui/debug/DebugAppContainer.java
Patch:
@@ -241,7 +241,7 @@ public class DebugAppContainer implements AppContainer {
     });
 
     TelescopeLayout.cleanUp(activity); // Clean up any old screenshots.
-    telescopeLayout.setLens(new BugReportLens(activity));
+    telescopeLayout.setLens(new BugReportLens(activity, lumberYard));
 
     // If you have not seen the debug drawer before, show it with a message
     if (!seenDebugDrawer.get()) {

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingAdapter.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.List;
 import rx.functions.Action1;
 
-public final class TrendingAdapter extends RecyclerView.Adapter<TrendingAdapter.ViewHolder>
+final class TrendingAdapter extends RecyclerView.Adapter<TrendingAdapter.ViewHolder>
     implements Action1<List<Repository>> {
   public interface RepositoryClickListener {
     void onRepositoryClick(Repository repository);

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingTimespan.java
Patch:
@@ -4,7 +4,7 @@
 import org.joda.time.DateTime;
 import org.joda.time.DurationFieldType;
 
-public enum TrendingTimespan {
+enum TrendingTimespan {
   DAY("today", 1, DurationFieldType.days()),
   WEEK("last week", 1, DurationFieldType.weeks()),
   MONTH("last month", 1, DurationFieldType.months());

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingTimespanAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.jakewharton.u2020.R;
 import com.jakewharton.u2020.ui.misc.EnumAdapter;
 
-public final class TrendingTimespanAdapter extends EnumAdapter<TrendingTimespan> {
+final class TrendingTimespanAdapter extends EnumAdapter<TrendingTimespan> {
   public TrendingTimespanAdapter(Context context) {
     super(context, TrendingTimespan.class);
   }

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingAdapter.java
Patch:
@@ -11,7 +11,7 @@
 import java.util.List;
 import rx.functions.Action1;
 
-public final class TrendingAdapter extends RecyclerView.Adapter<TrendingAdapter.ViewHolder>
+final class TrendingAdapter extends RecyclerView.Adapter<TrendingAdapter.ViewHolder>
     implements Action1<List<Repository>> {
   public interface RepositoryClickListener {
     void onRepositoryClick(Repository repository);

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingTimespan.java
Patch:
@@ -4,7 +4,7 @@
 import org.joda.time.DateTime;
 import org.joda.time.DurationFieldType;
 
-public enum TrendingTimespan {
+enum TrendingTimespan {
   DAY("today", 1, DurationFieldType.days()),
   WEEK("last week", 1, DurationFieldType.weeks()),
   MONTH("last month", 1, DurationFieldType.months());

File: src/main/java/com/jakewharton/u2020/ui/trending/TrendingTimespanAdapter.java
Patch:
@@ -7,7 +7,7 @@
 import com.jakewharton.u2020.R;
 import com.jakewharton.u2020.ui.misc.EnumAdapter;
 
-public final class TrendingTimespanAdapter extends EnumAdapter<TrendingTimespan> {
+final class TrendingTimespanAdapter extends EnumAdapter<TrendingTimespan> {
   public TrendingTimespanAdapter(Context context) {
     super(context, TrendingTimespan.class);
   }

File: src/debug/java/com/jakewharton/u2020/data/DebugDataModule.java
Patch:
@@ -36,6 +36,7 @@ public final class DebugDataModule {
   private static final boolean DEFAULT_SCALPEL_ENABLED = false; // No crazy 3D view tree.
   private static final boolean DEFAULT_SCALPEL_WIREFRAME_ENABLED = false; // Draw views by default.
   private static final boolean DEFAULT_SEEN_DEBUG_DRAWER = false; // Show debug drawer first time.
+  private static final boolean DEFAULT_USE_EXTERNAL_APPS = false; // Capture external intents.
 
   @Provides @Singleton OkHttpClient provideOkHttpClient(Application app) {
     OkHttpClient client = DataModule.createOkHttpClient(app);
@@ -59,7 +60,7 @@ StringPreference provideNetworkProxy(SharedPreferences preferences) {
 
   @Provides @Singleton @UseExternalApps
   BooleanPreference provideUseEmailAppPreference(SharedPreferences preferences) {
-    return new BooleanPreference(preferences, "debug_use_external_apps", true);
+    return new BooleanPreference(preferences, "debug_use_external_apps", DEFAULT_USE_EXTERNAL_APPS);
   }
 
   @Provides @Singleton @AnimationSpeed

File: src/debug/java/com/jakewharton/u2020/data/DebugDataModule.java
Patch:
@@ -36,6 +36,7 @@ public final class DebugDataModule {
   private static final boolean DEFAULT_SCALPEL_ENABLED = false; // No crazy 3D view tree.
   private static final boolean DEFAULT_SCALPEL_WIREFRAME_ENABLED = false; // Draw views by default.
   private static final boolean DEFAULT_SEEN_DEBUG_DRAWER = false; // Show debug drawer first time.
+  private static final boolean DEFAULT_USE_EXTERNAL_APPS = false; // Capture external intents.
 
   @Provides @Singleton OkHttpClient provideOkHttpClient(Application app) {
     OkHttpClient client = DataModule.createOkHttpClient(app);
@@ -59,7 +60,7 @@ StringPreference provideNetworkProxy(SharedPreferences preferences) {
 
   @Provides @Singleton @UseExternalApps
   BooleanPreference provideUseEmailAppPreference(SharedPreferences preferences) {
-    return new BooleanPreference(preferences, "debug_use_external_apps", true);
+    return new BooleanPreference(preferences, "debug_use_external_apps", DEFAULT_USE_EXTERNAL_APPS);
   }
 
   @Provides @Singleton @AnimationSpeed

File: src/debug/java/com/jakewharton/u2020/ui/debug/ContextualDebugActions.java
Patch:
@@ -1,7 +1,6 @@
 package com.jakewharton.u2020.ui.debug;
 
 import android.content.Context;
-import android.support.v4.widget.DrawerLayout;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -25,7 +24,7 @@ public interface DebugAction<T extends View> {
   private final Map<DebugAction<? extends View>, View> buttonMap;
   private final Map<Class<? extends View>, List<DebugAction<? extends View>>> actionMap;
 
-  private final DrawerLayout drawerLayout;
+  private final DebugDrawerLayout drawerLayout;
   private final Context drawerContext;
   private final View contextualTitleView;
   private final LinearLayout contextualListView;

File: src/debug/java/com/jakewharton/u2020/ui/debug/DebugAppContainer.java
Patch:
@@ -9,7 +9,6 @@
 import android.content.Intent;
 import android.os.Build;
 import android.os.PowerManager;
-import android.support.v4.widget.DrawerLayout;
 import android.util.DisplayMetrics;
 import android.view.ContextThemeWrapper;
 import android.view.Gravity;
@@ -157,7 +156,7 @@ public class DebugAppContainer implements AppContainer {
     this.app = app;
   }
 
-  @InjectView(R.id.debug_drawer_layout) DrawerLayout drawerLayout;
+  @InjectView(R.id.debug_drawer_layout) DebugDrawerLayout drawerLayout;
   @InjectView(R.id.madge_container) MadgeFrameLayout madgeFrameLayout;
   @InjectView(R.id.debug_content) ScalpelFrameLayout content;
 
@@ -231,7 +230,7 @@ public class DebugAppContainer implements AppContainer {
     content.setOnHierarchyChangeListener(HierarchyTreeChangeListener.wrap(contextualActions));
 
     drawerLayout.setDrawerShadow(R.drawable.debug_drawer_shadow, Gravity.END);
-    drawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener() {
+    drawerLayout.setDrawerListener(new DebugDrawerLayout.SimpleDrawerListener() {
       @Override public void onDrawerOpened(View drawerView) {
         refreshPicassoStats();
         refreshOkHttpCacheStats();

File: src/main/java/com/jakewharton/u2020/ui/misc/ScrimInsetsFrameLayout.java
Patch:
@@ -65,7 +65,7 @@ private void init(Context context, AttributeSet attrs, int defStyle) {
     this.insets = new Rect(insets);
     setWillNotDraw(insetForeground == null);
     ViewCompat.postInvalidateOnAnimation(this);
-    return true; // consume insets
+    return false; // Do not consume insets.
   }
 
   @Override public void draw(@NonNull Canvas canvas) {

File: src/debug/java/com/jakewharton/u2020/ui/debug/ContextualDebugActions.java
Patch:
@@ -1,7 +1,6 @@
 package com.jakewharton.u2020.ui.debug;
 
 import android.content.Context;
-import android.support.v4.widget.DrawerLayout;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -25,7 +24,7 @@ public interface DebugAction<T extends View> {
   private final Map<DebugAction<? extends View>, View> buttonMap;
   private final Map<Class<? extends View>, List<DebugAction<? extends View>>> actionMap;
 
-  private final DrawerLayout drawerLayout;
+  private final DebugDrawerLayout drawerLayout;
   private final Context drawerContext;
   private final View contextualTitleView;
   private final LinearLayout contextualListView;

File: src/debug/java/com/jakewharton/u2020/ui/debug/DebugAppContainer.java
Patch:
@@ -9,7 +9,6 @@
 import android.content.Intent;
 import android.os.Build;
 import android.os.PowerManager;
-import android.support.v4.widget.DrawerLayout;
 import android.util.DisplayMetrics;
 import android.view.ContextThemeWrapper;
 import android.view.Gravity;
@@ -157,7 +156,7 @@ public class DebugAppContainer implements AppContainer {
     this.app = app;
   }
 
-  @InjectView(R.id.debug_drawer_layout) DrawerLayout drawerLayout;
+  @InjectView(R.id.debug_drawer_layout) DebugDrawerLayout drawerLayout;
   @InjectView(R.id.madge_container) MadgeFrameLayout madgeFrameLayout;
   @InjectView(R.id.debug_content) ScalpelFrameLayout content;
 
@@ -231,7 +230,7 @@ public class DebugAppContainer implements AppContainer {
     content.setOnHierarchyChangeListener(HierarchyTreeChangeListener.wrap(contextualActions));
 
     drawerLayout.setDrawerShadow(R.drawable.debug_drawer_shadow, Gravity.END);
-    drawerLayout.setDrawerListener(new DrawerLayout.SimpleDrawerListener() {
+    drawerLayout.setDrawerListener(new DebugDrawerLayout.SimpleDrawerListener() {
       @Override public void onDrawerOpened(View drawerView) {
         refreshPicassoStats();
         refreshOkHttpCacheStats();

File: src/main/java/com/jakewharton/u2020/ui/misc/ScrimInsetsFrameLayout.java
Patch:
@@ -65,7 +65,7 @@ private void init(Context context, AttributeSet attrs, int defStyle) {
     this.insets = new Rect(insets);
     setWillNotDraw(insetForeground == null);
     ViewCompat.postInvalidateOnAnimation(this);
-    return true; // consume insets
+    return false; // Do not consume insets.
   }
 
   @Override public void draw(@NonNull Canvas canvas) {

File: src/debug/java/com/jakewharton/u2020/data/ApiEndpoint.java
Patch:
@@ -6,5 +6,5 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 @Qualifier @Retention(RUNTIME)
-public @interface Endpoint {
+public @interface ApiEndpoint {
 }

File: src/debug/java/com/jakewharton/u2020/data/ApiEndpoint.java
Patch:
@@ -6,5 +6,5 @@
 import static java.lang.annotation.RetentionPolicy.RUNTIME;
 
 @Qualifier @Retention(RUNTIME)
-public @interface Endpoint {
+public @interface ApiEndpoint {
 }

File: src/debug/java/com/jakewharton/u2020/data/Endpoints.java
Patch:
@@ -4,7 +4,7 @@
 
 public enum Endpoints {
   PRODUCTION("Production", ApiModule.PRODUCTION_API_URL),
-  STAGING("Staging", "https://api.staging.imgur.com/3/"),
+  // STAGING("Staging", "https://api.staging.imgur.com/3/"),
   MOCK_MODE("Mock Mode", "mock://mode/"),
   CUSTOM("Custom", null);
 

File: src/main/java/com/jakewharton/u2020/data/api/GalleryService.java
Patch:
@@ -1,13 +1,13 @@
 package com.jakewharton.u2020.data.api;
 
-import retrofit.client.Response;
+import com.jakewharton.u2020.data.api.model.Gallery;
 import retrofit.http.GET;
 import retrofit.http.Path;
 import rx.Observable;
 
 public interface GalleryService {
   @GET("/gallery/{section}/{sort}/{page}") //
-  Observable<Response> listGallery( //
+  Observable<Gallery> listGallery( //
       @Path("section") Section section, //
       @Path("sort") Sort sort, //
       @Path("page") int page);

File: src/main/java/com/jakewharton/u2020/data/api/Sort.java
Patch:
@@ -2,7 +2,7 @@
 
 public enum Sort {
   VIRAL("viral"),
-  SORT("sort");
+  TIME("time");
 
   private final String value;
 

File: src/main/java/com/jakewharton/u2020/ui/UiModule.java
Patch:
@@ -1,12 +1,14 @@
 package com.jakewharton.u2020.ui;
 
+import com.jakewharton.u2020.ui.gallery.GalleryView;
 import dagger.Module;
 import dagger.Provides;
 import javax.inject.Singleton;
 
 @Module(
     injects = {
-        MainActivity.class
+        MainActivity.class,
+        GalleryView.class,
     }
 )
 public class UiModule {

