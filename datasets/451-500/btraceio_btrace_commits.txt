File: btrace-agent/src/main/java/org/openjdk/btrace/agent/Main.java
Patch:
@@ -398,8 +398,8 @@ private static void parseArgs() {
 
     String libs = argMap.get(LIBS);
     String config = argMap.get(CONFIG);
-    loadDefaultArguments(config);
     processClasspaths(libs);
+    loadDefaultArguments(config);
 
     p = argMap.get(DEBUG);
     settings.setDebug(p != null && !"false".equals(p));

File: btrace-instr/src/test/btrace/onmethod/FieldGetAfter.java
Patch:
@@ -46,8 +46,8 @@ public class FieldGetAfter {
       location =
           @Location(
               value = Kind.FIELD_GET,
-              clazz = "resources.OnMethodTest",
-              field = "field",
+              clazz = "/^resources.OnMethodTest$/",
+              field = "/^field$/",
               where = Where.AFTER))
   public static void args(
       @Self Object self,

File: btrace-instr/src/test/btrace/onmethod/FieldGetAfterStatic.java
Patch:
@@ -46,8 +46,8 @@ public class FieldGetAfterStatic {
       location =
           @Location(
               value = Kind.FIELD_GET,
-              clazz = "resources.OnMethodTest",
-              field = "sField",
+              clazz = "/^resources.OnMethodTest$/",
+              field = "/^sField$/",
               where = Where.AFTER))
   public static void args(
       @Self Object self,

File: btrace-instr/src/test/btrace/onmethod/FieldGetBefore.java
Patch:
@@ -41,7 +41,7 @@ public class FieldGetBefore {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "field",
-      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "field"))
+      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "/^field$/"))
   public static void args(
       @Self Object self, @TargetInstance Object inst, @TargetMethodOrField String fldName) {
     println("args");

File: btrace-instr/src/test/btrace/onmethod/FieldGetBeforeStatic.java
Patch:
@@ -41,7 +41,7 @@ public class FieldGetBeforeStatic {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "staticField",
-      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "sField"))
+      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "/^sField$/"))
   public static void args(
       @Self Object self, @TargetInstance Object inst, @TargetMethodOrField String fldName) {
     println("args");

File: btrace-instr/src/test/btrace/onmethod/FieldSetAfter.java
Patch:
@@ -46,7 +46,7 @@ public class FieldSetAfter {
           @Location(
               value = Kind.FIELD_SET,
               clazz = "resources.OnMethodTest",
-              field = "field",
+              field = "/^field$/",
               where = Where.AFTER))
   public static void args(
       @Self Object self,

File: btrace-instr/src/test/btrace/onmethod/FieldSetAfterStatic.java
Patch:
@@ -46,7 +46,7 @@ public class FieldSetAfterStatic {
           @Location(
               value = Kind.FIELD_SET,
               clazz = "resources.OnMethodTest",
-              field = "sField",
+              field = "/^sField$/",
               where = Where.AFTER))
   public static void args(
       @Self Object self,

File: btrace-instr/src/test/btrace/onmethod/FieldSetBefore.java
Patch:
@@ -41,7 +41,7 @@ public class FieldSetBefore {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "field",
-      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "field"))
+      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "/^field$/"))
   public static void args(
       @Self Object self,
       @TargetInstance Object inst,

File: btrace-instr/src/test/btrace/onmethod/FieldSetBeforeStatic.java
Patch:
@@ -41,7 +41,7 @@ public class FieldSetBeforeStatic {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "staticField",
-      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "sField"))
+      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "/^sField$/"))
   public static void args(
       @Self Object self,
       @TargetInstance Object inst,

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldGetAfter.java
Patch:
@@ -47,8 +47,8 @@ public class FieldGetAfter {
       location =
           @Location(
               value = Kind.FIELD_GET,
-              clazz = "resources.OnMethodTest",
-              field = "field",
+              clazz = "/^resources.OnMethodTest$/",
+              field = "/^field$/",
               where = Where.AFTER),
       enableAt = @Level(">=1"))
   public static void args(

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldGetAfterStatic.java
Patch:
@@ -47,8 +47,8 @@ public class FieldGetAfterStatic {
       location =
           @Location(
               value = Kind.FIELD_GET,
-              clazz = "resources.OnMethodTest",
-              field = "sField",
+              clazz = "/^resources.OnMethodTest$/",
+              field = "/^sField$/",
               where = Where.AFTER),
       enableAt = @Level(">=1"))
   public static void args(

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldGetBefore.java
Patch:
@@ -42,7 +42,7 @@ public class FieldGetBefore {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "field",
-      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "field"),
+      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "/^field$/"),
       enableAt = @Level(">=1"))
   public static void args(
       @Self Object self, @TargetInstance Object inst, @TargetMethodOrField String fldName) {

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldGetBeforeStatic.java
Patch:
@@ -42,7 +42,7 @@ public class FieldGetBeforeStatic {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "staticField",
-      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "sField"),
+      location = @Location(value = Kind.FIELD_GET, clazz = "/.*\\.OnMethodTest/", field = "/^sField$/"),
       enableAt = @Level(">=1"))
   public static void args(
       @Self Object self, @TargetInstance Object inst, @TargetMethodOrField String fldName) {

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldSetAfter.java
Patch:
@@ -47,7 +47,7 @@ public class FieldSetAfter {
           @Location(
               value = Kind.FIELD_SET,
               clazz = "resources.OnMethodTest",
-              field = "field",
+              field = "/^field$/",
               where = Where.AFTER),
       enableAt = @Level(">=1"))
   public static void args(

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldSetAfterStatic.java
Patch:
@@ -47,7 +47,7 @@ public class FieldSetAfterStatic {
           @Location(
               value = Kind.FIELD_SET,
               clazz = "resources.OnMethodTest",
-              field = "sField",
+              field = "/^sField$/",
               where = Where.AFTER),
       enableAt = @Level(">=1"))
   public static void args(

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldSetBefore.java
Patch:
@@ -42,7 +42,7 @@ public class FieldSetBefore {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "field",
-      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "field"),
+      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "/^field$/"),
       enableAt = @Level(">=1"))
   public static void args(
       @Self Object self,

File: btrace-instr/src/test/btrace/onmethod/leveled/FieldSetBeforeStatic.java
Patch:
@@ -42,7 +42,7 @@ public class FieldSetBeforeStatic {
   @OnMethod(
       clazz = "/.*\\.OnMethodTest/",
       method = "staticField",
-      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "sField"),
+      location = @Location(value = Kind.FIELD_SET, clazz = "/.*\\.OnMethodTest/", field = "/^sField$/"),
       enableAt = @Level(">=1"))
   public static void args(
       @Self Object self,

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/Instrumentor.java
Patch:
@@ -173,7 +173,7 @@ && typeMatches(om.getType(), desc, om.isExactTypeMatch())) {
     methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);
 
     InstrumentingMethodVisitor mHelper =
-        new InstrumentingMethodVisitor(access, className, desc, methodVisitor);
+        new InstrumentingMethodVisitor(access, className, name, desc, methodVisitor);
 
     methodVisitor = mHelper;
 

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/InstrStackTest.java
Patch:
@@ -23,7 +23,7 @@ void setup() throws Exception {
         ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);
         cw.visit(Opcodes.ASM9, Opcodes.ACC_PUBLIC, "test.Test", null, null, null);
         MethodVisitor mv = cw.visitMethod(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "test", "()V", null, null);
-        instance = new InstrumentingMethodVisitor(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "test.Test", "()V", mv);
+        instance = new InstrumentingMethodVisitor(Opcodes.ACC_PUBLIC | Opcodes.ACC_STATIC, "test.Test", "test", "()V", mv);
     }
 
     @Test

File: btrace-agent/src/main/java/org/openjdk/btrace/agent/Client.java
Patch:
@@ -150,7 +150,7 @@ private final void setupWriter() {
     if (outputFile == null || outputFile.equals("::null") || outputFile.equals("/dev/null")) return;
 
     if (!outputFile.equals("::stdout")) {
-      String outputDir = settings.getOutputDir();
+      String outputDir = settings.getScriptDir();
       String output = (outputDir != null ? outputDir + File.separator : "") + outputFile;
       outputFile = templateOutputFileName(output);
       log.info("Redirecting output to {}", outputFile);

File: btrace-core/src/main/java/org/openjdk/btrace/core/Args.java
Patch:
@@ -6,13 +6,14 @@ public final class Args {
   public static final String BOOT_CLASS_PATH = "bootClassPath";
   public static final String CONFIG = "config";
   public static final String SCRIPT = "script";
+  public static final String SCRIPT_DIR = "scriptdir";
   public static final String STARTUP_RETRANSFORM = "startupRetransform";
   public static final String DUMP_DIR = "dumpDir";
   public static final String DUMP_CLASSES = "dumpClasses";
   public static final String CMD_QUEUE_LIMIT = "cmdQueueLimit";
   public static final String TRACK_RETRANSFORMS = "trackRetransforms";
   public static final String SCRIPT_OUTPUT_FILE = "scriptOutputFile";
-  public static final String SCRIPT_OUTPUT_DIR = "scriptdir";
+  public static final String SCRIPT_OUTPUT_DIR = "scriptOutputDir";
   public static final String FILE_ROLL_MILLISECONDS = "fileRollMilliseconds";
   public static final String FILE_ROLL_MAX_ROLLS = "fileRollMaxRolls";
   public static final String TRUSTED = "trusted";

File: btrace-agent/src/main/java/org/openjdk/btrace/agent/RemoteClient.java
Patch:
@@ -114,7 +114,9 @@ static Client getClient(ClientContext ctx, Socket sock, Function<Client, Future<
         case Command.RECONNECT:
           {
             String probeId = ((ReconnectCommand) cmd).getProbeId();
+            log.debug("Attempting to reconnect client for probe {}", probeId);
             Client client = Client.findClient(probeId);
+            log.debug("Found client {}", client);
             if (client instanceof RemoteClient) {
               ((RemoteClient) client).reconnect(ois, oos, sock);
               client.sendCommand(new StatusCommand(ReconnectCommand.STATUS_FLAG));

File: btrace-client/src/main/java/org/openjdk/btrace/client/Client.java
Patch:
@@ -438,11 +438,11 @@ void reconnect(String host, String resumeProbe, CommandListener listener, String
         System.exit(1);
       }
       oos = new ObjectOutputStream(sock.getOutputStream());
-      log.debug("reconnecting client");
-      WireIO.write(oos, new ReconnectCommand(resumeProbe));
-
       ois = new ObjectInputStream(sock.getInputStream());
 
+      log.debug("reconnecting client {}", resumeProbe);
+      WireIO.write(oos, new ReconnectCommand(resumeProbe));
+
       log.debug("entering into command loop");
       commandLoop(
           new CommandListener() {

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -441,7 +441,7 @@ public boolean onStderr(int lineno, String line) {
           @Override
           public boolean onStdout(int lineno, String line) {
             System.out.println("[btrace #" + lineno + "] " + line);
-            if (lineno > 1000) {
+            if (lineno > 100) {
               return false;
             }
             if (line.contains(probeId[0])) {

File: btrace-core/src/main/java/org/openjdk/btrace/core/BTraceUtils.java
Patch:
@@ -3048,7 +3048,7 @@ private static Field getField(Class<?> clazz, String name, boolean throwError) {
                     try {
                       field = superClass.getDeclaredField(name);
                     } catch (NoSuchFieldException e) {
-                      throw new RuntimeException(e);
+                      // Ignore exception and keep looking up
                     }
                   }
                   if (Objects.nonNull(field)) {

File: btrace-instr/src/test/btrace/OnMethodTest.java
Patch:
@@ -56,6 +56,7 @@ public static void noargs(@Self Object self) {
         dump(var + " [this, noargs]");
         dump("{" + get("id", self) + "}");
         var = "A";
+        println("prop: " + property("btrace.test"));
     }
 
     @OnMethod(clazz = "resources.Main", method = "callB")
@@ -64,6 +65,7 @@ public static void args(@Self Object self, int i, String s) {
         ex--;
         dump(var + " [this, args]");
         var = "B";
+        println("prop: " + property("btrace.test"));
     }
 
     @OnTimer(500)

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -167,6 +167,7 @@ public void validate(String stdout, String stderr, int retcode, String jfrFile)
             assertTrue(stdout.contains("[this, args]"));
             assertTrue(stdout.contains("{xxx}"));
             assertTrue(stdout.contains("heap:init"));
+            assertTrue(stdout.contains("prop: test"));
           }
         });
   }

File: btrace-instr/src/test/java/org/openjdk/btrace/RuntimeTest.java
Patch:
@@ -188,6 +188,7 @@ public void test(
       jfrFile = Files.createTempFile("btrace-", ".jfr").toString();
       args.add("-XX:StartFlightRecording=settings=default,dumponexit=true,filename=" + jfrFile);
     }
+    args.add("-Dbtrace.test=test");
     args.add(testApp);
 
     ProcessBuilder pb = new ProcessBuilder(args);

File: btrace-runtime/src/main/java11/org/openjdk/btrace/runtime/BTraceRuntimeImpl_11.java
Patch:
@@ -100,7 +100,8 @@ private static Instrumentation fixExports(Instrumentation instr) {
           Collections.emptySet(),
           Map.of(
               "jdk.internal.reflect", myModules,
-              "jdk.internal.perf", myModules),
+              "jdk.internal.perf", myModules,
+              "sun.security.action", myModules),
           Map.of("java.lang", myModules),
           Collections.emptySet(),
           Collections.emptyMap());

File: btrace-compiler/src/main/java/org/openjdk/btrace/compiler/PCPP.java
Patch:
@@ -251,7 +251,7 @@ private String curTokenAsString() {
     if (c == '"' || c == '\'') {
       return c + state.tok().sval + c;
     }
-    return new String(new char[] {c});
+    return String.valueOf(c);
   }
 
   private String nextWord() throws IOException {

File: btrace-core/src/main/java/org/openjdk/btrace/core/BTraceRuntime.java
Patch:
@@ -71,6 +71,7 @@
 import sun.misc.Unsafe;
 import sun.security.action.GetPropertyAction;
 
+@SuppressWarnings("deprecation")
 public final class BTraceRuntime {
   public static final String CMD_QUEUE_LIMIT_KEY = "org.openjdk.btrace.core.cmdQueueLimit";
   private static final boolean messageTimestamp = false;

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/InstrumentorTestBase.java
Patch:
@@ -220,7 +220,7 @@ protected void checkTransformation(String expected, boolean verify) throws IOExc
       PrintWriter pw = new PrintWriter(sw);
       CheckClassAdapter.verify(cr, true, pw);
       if (sw.toString().contains("AnalyzerException")) {
-        System.err.println(sw.toString());
+        System.err.println(sw);
         fail();
       }
     }
@@ -242,7 +242,7 @@ protected void checkTrace(String expected) throws IOException {
     PrintWriter pw = new PrintWriter(sw);
     CheckClassAdapter.verify(cr, false, pw);
     if (sw.toString().contains("AnalyzerException")) {
-      System.err.println(sw.toString());
+      System.err.println(sw);
       fail();
     }
   }

File: btrace-instr/src/test/java/resources/StackTrackerTest.java
Patch:
@@ -59,6 +59,6 @@ private static void consumeInt(int x) {
     }
 
     private static long convertInt(int x) {
-        return (long)(x + 1);
+        return x + 1;
     }
 }

File: btrace-instr/src/test/java/resources/issues/BTRACE28.java
Patch:
@@ -34,9 +34,9 @@ private void serveResource(String param1, String param2) {
         String resourceType = "resourceType";
         String contentType = "contentType";
         int indice, tempIndice;
-        byte tempArr[];
-        byte mainArr[] = new byte[0];
-        byte byteArr[] = new byte[65535];
+        byte[] tempArr;
+        byte[] mainArr = new byte[0];
+        byte[] byteArr = new byte[65535];
 
         StringBuilder sb = new StringBuilder();
 

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/BTraceRuntimeImpl_8.java
Patch:
@@ -49,6 +49,7 @@
  * @author Joachim Skeie (GC MBean support, advanced Deque manipulation)
  * @author KLynch
  */
+@SuppressWarnings("deprecation")
 public final class BTraceRuntimeImpl_8 extends BTraceRuntimeImplBase {
   public static final class Factory extends BTraceRuntimeImplFactory<BTraceRuntimeImpl_8> {
     public Factory() {

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/JfrEventImpl.java
Patch:
@@ -110,7 +110,7 @@ public void end() {
 
   private boolean checkField(String fieldName) {
     if (!fieldIndex.containsKey(fieldName)) {
-      debug.warning("Invalid event field: " + fieldName);
+      DebugSupport.warning("Invalid event field: " + fieldName);
       return false;
     }
     return true;

File: btrace-core/src/main/java/org/openjdk/btrace/core/aggregation/Aggregation.java
Patch:
@@ -166,7 +166,7 @@ public List<AggregationKey> getKeyData() {
    * Returns a value for the given key if the key has a value associated with it. Returns zero if
    * the key is not valid for this Aggregation.
    *
-   * @param key
+   * @param key the aggregation key
    * @return the value for the given key, or zero.
    */
   public Long getValueForKey(AggregationKey key) {

File: btrace-core/src/main/java/org/openjdk/btrace/core/annotations/Injected.java
Patch:
@@ -40,7 +40,7 @@
   /**
    * The injected service type
    *
-   * @return
+   * @return the service type
    */
   ServiceType value() default ServiceType.SIMPLE;
 

File: btrace-core/src/main/java/org/openjdk/btrace/core/annotations/Level.java
Patch:
@@ -52,7 +52,7 @@
    *
    * <p>Where <b>NUMBER</b> is a non-negative integer number.
    *
-   * @return
+   * @return the level
    */
   String value() default "";
 }

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/InstrumentorTestBase.java
Patch:
@@ -25,6 +25,8 @@
 
 package org.openjdk.btrace.instr;
 
+import static org.junit.jupiter.api.Assertions.*;
+
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
@@ -55,8 +57,6 @@
 import org.openjdk.btrace.runtime.auxiliary.Auxiliary;
 import sun.misc.Unsafe;
 
-import static org.junit.jupiter.api.Assertions.*;
-
 /** @author Jaroslav Bachorik */
 public abstract class InstrumentorTestBase {
   private static final boolean DEBUG = true;

File: btrace-instr/src/test/btrace/onmethod/ArgsSigMatch.java
Patch:
@@ -32,6 +32,7 @@
 import org.openjdk.btrace.core.annotations.BTrace;
 import org.openjdk.btrace.core.annotations.OnMethod;
 import org.openjdk.btrace.core.annotations.Self;
+import org.openjdk.btrace.core.types.AnyType;
 
 /** @author Jaroslav Bachorik */
 @BTrace
@@ -42,12 +43,12 @@ public static void m1(@Self Object self, List<String> a) {
   }
 
   @OnMethod(clazz = "/.*\\.OnMethodTest/", method = "argsTypeMatch", exactTypeMatch = true)
-  public static void m2(@Self Object self, List<String> a) {
+  public static void m2(@Self AnyType self, List<String> a) {
     println("m2");
   }
 
   @OnMethod(clazz = "/.*\\.OnMethodTest/", method = "argsTypeMatch", exactTypeMatch = true)
-  public static void m3(@Self Object self, ArrayList<String> a) {
+  public static void m3(@Self AnyType self, ArrayList<String> a) {
     println("m3");
   }
 }

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -139,7 +139,7 @@ public void validate(String stdout, String stderr, int retcode, String jfrFile)
 
   @Test
   public void testOnExit() throws Exception {
-    timeout = 1500;
+    timeout = 3500;
     test(
         "resources.Main",
         "btrace/OnExitTest.java",

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/JfrEventImpl.java
Patch:
@@ -1,10 +1,11 @@
 package org.openjdk.btrace.runtime;
 
-import java.util.Map;
 import jdk.jfr.Event;
 import org.openjdk.btrace.core.DebugSupport;
 import org.openjdk.btrace.core.jfr.JfrEvent;
 
+import java.util.Map;
+
 class JfrEventImpl extends JfrEvent {
   private final Event event;
   private final Map<String, Integer> fieldIndex;
@@ -110,7 +111,7 @@ public void end() {
 
   private boolean checkField(String fieldName) {
     if (!fieldIndex.containsKey(fieldName)) {
-      DebugSupport.warning("Invalid event field: " + fieldName);
+      debug.warning("Invalid event field: " + fieldName);
       return false;
     }
     return true;

File: btrace-instr/src/test/java/org/openjdk/btrace/RuntimeTest.java
Patch:
@@ -97,7 +97,7 @@ public static void setup() {
         Path clientJarPath =
             projectRoot
                 .resolve("btrace-dist/build/resources/main")
-                .resolve(System.getProperty("project.version"))
+                .resolve("v" + System.getProperty("project.version"))
                 .resolve("libs/btrace-client.jar");
         Path eventsJarPath = projectRoot.resolve("btrace-instr/build/libs/events.jar");
         clientClassPath = clientJarPath.toString();

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE106Test.java
Patch:
@@ -40,7 +40,7 @@ public void annotatedClass() throws Exception {
     checkTransformation(
         "ALOAD 0\n"
             + "LDC \"aMethod\"\n"
-            + "INVOKESTATIC resources/issues/BTRACE106.$btrace$org$openjdk$btrace$runtime$aux$BTRACE106$o1 (Ljava/lang/Object;Ljava/lang/String;)V\n"
+            + "INVOKESTATIC resources/issues/BTRACE106.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE106$o1 (Ljava/lang/Object;Ljava/lang/String;)V\n"
             + "LCONST_0\n"
             + "LSTORE 1\n"
             + "INVOKESTATIC java/lang/System.nanoTime ()J\n"
@@ -52,11 +52,11 @@ public void annotatedClass() throws Exception {
             + "ALOAD 0\n"
             + "LDC \"bMethod\"\n"
             + "LLOAD 1\n"
-            + "INVOKESTATIC resources/issues/BTRACE106.$btrace$org$openjdk$btrace$runtime$aux$BTRACE106$o3 (Ljava/lang/Object;Ljava/lang/String;J)V\n"
+            + "INVOKESTATIC resources/issues/BTRACE106.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE106$o3 (Ljava/lang/Object;Ljava/lang/String;J)V\n"
             + "ALOAD 0\n"
             + "LDC \"bMethod\"\n"
             + "LLOAD 1\n"
-            + "INVOKESTATIC resources/issues/BTRACE106.$btrace$org$openjdk$btrace$runtime$aux$BTRACE106$o2 (Ljava/lang/Object;Ljava/lang/String;J)V\n"
+            + "INVOKESTATIC resources/issues/BTRACE106.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE106$o2 (Ljava/lang/Object;Ljava/lang/String;J)V\n"
             + "MAXSTACK = 4\n"
             + "MAXLOCALS = 5");
   }

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE22Test.java
Patch:
@@ -47,7 +47,7 @@ public void bytecodeValidation() throws Exception {
             + "LSTORE 1\n"
             + "ALOAD 0\n"
             + "LLOAD 1\n"
-            + "INVOKESTATIC resources/issues/BTRACE22.$btrace$org$openjdk$btrace$runtime$aux$BTRACE22$tracker (Ljava/lang/Object;J)V\n"
+            + "INVOKESTATIC resources/issues/BTRACE22.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE22$tracker (Ljava/lang/Object;J)V\n"
             + "LOCALVARIABLE d D L1 L3 5\n"
             + "MAXSTACK = 6\n"
             + "MAXLOCALS = 7");

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE53Test.java
Patch:
@@ -43,7 +43,7 @@ public void bytecodeValidation() throws Exception {
             + "LSUB\n"
             + "LSTORE 1\n"
             + "LLOAD 1\n"
-            + "INVOKESTATIC resources/DerivedClass.$btrace$org$openjdk$btrace$runtime$aux$BTRACE53$onInit (J)V\n"
+            + "INVOKESTATIC resources/DerivedClass.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE53$onInit (J)V\n"
             + "MAXSTACK = 4\n"
             + "MAXLOCALS = 5");
   }

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE69Test.java
Patch:
@@ -39,20 +39,20 @@ public void bytecodeValidation() throws Exception {
             + "DUP\n"
             + "ASTORE 2\n"
             + "ALOAD 2\n"
-            + "INVOKESTATIC resources/OnMethodTest.$btrace$org$openjdk$btrace$runtime$aux$BTRACE69$onSyncEntry (Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC resources/OnMethodTest.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE69$onSyncEntry (Ljava/lang/Object;)V\n"
             + "L7\n"
             + "LINENUMBER 110 L7\n"
             + "DUP\n"
             + "ASTORE 3\n"
             + "ALOAD 3\n"
-            + "INVOKESTATIC resources/OnMethodTest.$btrace$org$openjdk$btrace$runtime$aux$BTRACE69$onSyncExit (Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC resources/OnMethodTest.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE69$onSyncExit (Ljava/lang/Object;)V\n"
             + "GOTO L8\n"
             + "FRAME FULL [resources/OnMethodTest java/lang/Object resources/OnMethodTest] [java/lang/Throwable]\n"
             + "ASTORE 4\n"
             + "DUP\n"
             + "ASTORE 5\n"
             + "ALOAD 5\n"
-            + "INVOKESTATIC resources/OnMethodTest.$btrace$org$openjdk$btrace$runtime$aux$BTRACE69$onSyncExit (Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC resources/OnMethodTest.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE69$onSyncExit (Ljava/lang/Object;)V\n"
             + "ALOAD 4\n"
             + "ATHROW\n"
             + "L8\n"

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE87Test.java
Patch:
@@ -39,7 +39,7 @@ public void bytecodeValidation() throws Exception {
             + "LDC \"containerMethod\"\n"
             + "ICONST_0\n"
             + "ANEWARRAY java/lang/Object\n"
-            + "INVOKESTATIC resources/issues/BTRACE87.$btrace$org$openjdk$btrace$runtime$aux$BTRACE87$o (Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC resources/issues/BTRACE87.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE87$o (Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)V\n"
             + "ALOAD 2\n"
             + "ASTORE 3\n"
             + "ASTORE 4\n"
@@ -51,7 +51,7 @@ public void bytecodeValidation() throws Exception {
             + "ICONST_0\n"
             + "ALOAD 3\n"
             + "AASTORE\n"
-            + "INVOKESTATIC resources/issues/BTRACE87.$btrace$org$openjdk$btrace$runtime$aux$BTRACE87$o (Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC resources/issues/BTRACE87.$btrace$org$openjdk$btrace$runtime$auxiliary$BTRACE87$o (Ljava/lang/Object;Ljava/lang/String;[Ljava/lang/Object;)V\n"
             + "ALOAD 4\n"
             + "ALOAD 3\n"
             + "MAXSTACK = 6\n"

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/TezSplitterTest.java
Patch:
@@ -27,7 +27,7 @@ public void test1() throws Exception {
             + "ICONST_3\n"
             + "ALOAD 4\n"
             + "AASTORE\n"
-            + "INVOKESTATIC org/apache/hadoop/mapred/split/TezMapredSplitsGrouper.$btrace$org$openjdk$btrace$runtime$aux$TezSplitter$getGroupedSplitsHook ([Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC org/apache/hadoop/mapred/split/TezMapredSplitsGrouper.$btrace$org$openjdk$btrace$runtime$auxiliary$TezSplitter$getGroupedSplitsHook ([Ljava/lang/Object;)V\n"
             + "ICONST_5\n"
             + "ANEWARRAY java/lang/Object\n"
             + "DUP\n"
@@ -51,7 +51,7 @@ public void test1() throws Exception {
             + "ICONST_4\n"
             + "ALOAD 5\n"
             + "AASTORE\n"
-            + "INVOKESTATIC org/apache/hadoop/mapred/split/TezMapredSplitsGrouper.$btrace$org$openjdk$btrace$runtime$aux$TezSplitter$getGroupedSplitsHook ([Ljava/lang/Object;)V\n"
+            + "INVOKESTATIC org/apache/hadoop/mapred/split/TezMapredSplitsGrouper.$btrace$org$openjdk$btrace$runtime$auxiliary$TezSplitter$getGroupedSplitsHook ([Ljava/lang/Object;)V\n"
             + "LSTORE 23\n"
             + "LSTORE 25\n"
             + "LSTORE 27\n"

File: btrace-agent/src/main/java/org/openjdk/btrace/agent/Client.java
Patch:
@@ -541,7 +541,7 @@ boolean retransformLoaded() throws UnmodifiableClassException {
             for (Class<?> c : classes) {
               try {
                 inst.retransformClasses(c);
-              } catch (VerifyError e1) {
+              } catch (ClassFormatError | VerifyError e1) {
                 debugPrint("Class '" + c.getName() + "' verification failed");
                 debugPrint(e1);
                 try {

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/InstrumentorTestBase.java
Patch:
@@ -55,7 +55,7 @@
 import org.openjdk.btrace.core.MethodID;
 import org.openjdk.btrace.core.SharedSettings;
 import org.openjdk.btrace.runtime.BTraceRuntimeAccess;
-import org.openjdk.btrace.runtime.aux.Auxilliary;
+import org.openjdk.btrace.runtime.auxiliary.Auxiliary;
 import sun.misc.Unsafe;
 
 /** @author Jaroslav Bachorik */
@@ -193,7 +193,7 @@ public void visit(
                   String[] interfaces) {
                 int idx = name.lastIndexOf('/');
                 name =
-                    Auxilliary.class.getPackage().getName().replace('.', '/')
+                    Auxiliary.class.getPackage().getName().replace('.', '/')
                         + '/'
                         + name.substring(idx + 1);
                 super.visit(version, access, name, signature, superName, interfaces);

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/BTraceRuntimeAccess.java
Patch:
@@ -41,7 +41,7 @@
 import org.openjdk.btrace.core.handlers.ExitHandler;
 import org.openjdk.btrace.core.handlers.LowMemoryHandler;
 import org.openjdk.btrace.core.handlers.TimerHandler;
-import org.openjdk.btrace.runtime.aux.Auxilliary;
+import org.openjdk.btrace.runtime.auxiliary.Auxiliary;
 import org.openjdk.btrace.services.api.RuntimeContext;
 
 /**
@@ -138,11 +138,11 @@ public static String getClientName(String forClassName) {
     int idx = forClassName.lastIndexOf('/');
     if (idx > -1) {
       forClassName =
-          Auxilliary.class.getPackage().getName().replace('.', '/')
+          Auxiliary.class.getPackage().getName().replace('.', '/')
               + "/"
               + forClassName.substring(idx + 1);
     } else {
-      forClassName = Auxilliary.class.getPackage().getName().replace('.', '/') + "/" + forClassName;
+      forClassName = Auxiliary.class.getPackage().getName().replace('.', '/') + "/" + forClassName;
     }
 
     if (!uniqueClientClassNames) {

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/aux/Auxilliary.java
Patch:
@@ -1,3 +0,0 @@
-package org.openjdk.btrace.runtime.aux;
-
-public final class Auxilliary {}

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/auxiliary/Auxiliary.java
Patch:
@@ -0,0 +1,3 @@
+package org.openjdk.btrace.runtime.auxiliary;
+
+public final class Auxiliary {}

File: btrace-runtime/src/main/java11/org/openjdk/btrace/runtime/BTraceRuntimeImpl_11.java
Patch:
@@ -44,7 +44,7 @@
 import org.openjdk.btrace.core.DebugSupport;
 import org.openjdk.btrace.core.comm.CommandListener;
 import org.openjdk.btrace.core.jfr.JfrEvent;
-import org.openjdk.btrace.runtime.aux.Auxilliary;
+import org.openjdk.btrace.runtime.auxiliary.Auxiliary;
 
 /**
  * Helper class used by BTrace built-in functions and also acts runtime "manager" for a specific
@@ -134,7 +134,7 @@ public Class<?> defineClass(byte[] code, boolean mustBeBootstrap) {
       }
 
       Class<?> clz =
-          MethodHandles.privateLookupIn(Auxilliary.class, MethodHandles.lookup()).defineClass(code);
+          MethodHandles.privateLookupIn(Auxiliary.class, MethodHandles.lookup()).defineClass(code);
       // initialize the class by creating a dummy instance
       clz.getConstructor().newInstance();
       return clz;

File: btrace-runtime/src/main/java9/org/openjdk/btrace/runtime/BTraceRuntimeImpl_9.java
Patch:
@@ -43,7 +43,7 @@
 import org.openjdk.btrace.core.DebugSupport;
 import org.openjdk.btrace.core.comm.CommandListener;
 import org.openjdk.btrace.core.jfr.JfrEvent;
-import org.openjdk.btrace.runtime.aux.Auxilliary;
+import org.openjdk.btrace.runtime.auxiliary.Auxiliary;
 
 /**
  * Helper class used by BTrace built-in functions and also acts runtime "manager" for a specific
@@ -123,7 +123,7 @@ public Class<?> defineClass(byte[] code, boolean mustBeBootstrap) {
       }
 
       Class<?> clz =
-          MethodHandles.privateLookupIn(Auxilliary.class, MethodHandles.lookup()).defineClass(code);
+          MethodHandles.privateLookupIn(Auxiliary.class, MethodHandles.lookup()).defineClass(code);
       // initialize the class by creating a dummy instance
       clz.getConstructor().newInstance();
       return clz;
@@ -146,7 +146,7 @@ public Class<?> defineClass(byte[] code, boolean mustBeBootstrap) {
   public static Class<?> defineClass(byte[] code) {
     try {
       Class<?> clz =
-          MethodHandles.privateLookupIn(Auxilliary.class, MethodHandles.lookup()).defineClass(code);
+          MethodHandles.privateLookupIn(Auxiliary.class, MethodHandles.lookup()).defineClass(code);
       // initialize the class by creating a dummy instance
       clz.getConstructor().newInstance();
       return clz;

File: benchmarks/runtime-benchmarks/src/jmh/java/org/openjdk/btrace/bench/ClassFilterBenchmark.java
Patch:
@@ -19,7 +19,7 @@
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
  */
-package org.openjdk.btrace;
+package org.openjdk.btrace.bench;
 
 import java.util.ArrayList;
 import java.util.Collections;

File: benchmarks/runtime-benchmarks/src/jmh/java/org/openjdk/btrace/bench/OnMethodTemplateBenchmark.java
Patch:
@@ -19,7 +19,7 @@
  * 2 along with this work; if not, write to the Free Software Foundation,
  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
  */
-package org.openjdk.btrace;
+package org.openjdk.btrace.bench;
 
 import java.util.concurrent.TimeUnit;
 import org.openjdk.btrace.core.ArgsMap;

File: benchmarks/runtime-benchmarks/src/jmh/java/org/openjdk/btrace/bench/ProfilerBenchmark.java
Patch:
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.btrace;
+package org.openjdk.btrace.bench;
 
 import java.util.concurrent.TimeUnit;
 import org.openjdk.btrace.runtime.profiling.MethodInvocationProfiler;
@@ -51,7 +51,7 @@
 @OutputTimeUnit(TimeUnit.MICROSECONDS)
 @Fork(1)
 @BenchmarkMode(Mode.AverageTime)
-public class ProfilerBenchmarks {
+public class ProfilerBenchmark {
   private MethodInvocationProfiler mip1;
   private MethodInvocationProfiler mip2;
 
@@ -130,7 +130,7 @@ public static void main(String[] args) throws Exception {
         new OptionsBuilder()
             .addProfiler("stack")
             .verbosity(VerboseMode.NORMAL)
-            .include(".*" + ProfilerBenchmarks.class.getSimpleName() + ".*test.*")
+            .include(".*" + ProfilerBenchmark.class.getSimpleName() + ".*test.*")
             .build();
 
     new Runner(opt).run();

File: benchmarks/runtime-benchmarks/src/jmh/java/org/openjdk/btrace/bench/StatsdBenchmark.java
Patch:
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.btrace;
+package org.openjdk.btrace.bench;
 
 import java.util.concurrent.TimeUnit;
 import org.openjdk.btrace.statsd.Statsd;
@@ -50,7 +50,7 @@
 @OutputTimeUnit(TimeUnit.MICROSECONDS)
 @Fork(1)
 @BenchmarkMode(Mode.AverageTime)
-public class StatsdBenchmarks {
+public class StatsdBenchmark {
   private Statsd c;
 
   @Setup
@@ -70,7 +70,7 @@ public static void main(String[] args) throws Exception {
     Options opt =
         new OptionsBuilder()
             .addProfiler("stack")
-            .include(".*" + StatsdBenchmarks.class.getSimpleName() + ".*test.*")
+            .include(".*" + StatsdBenchmark.class.getSimpleName() + ".*test.*")
             .build();
 
     new Runner(opt).run();

File: benchmarks/runtime-benchmarks/src/jmh/java/org/openjdk/btrace/bench/StringOpBenchmark.java
Patch:
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package org.openjdk.btrace;
+package org.openjdk.btrace.bench;
 
 import java.util.concurrent.TimeUnit;
 import org.openjdk.jmh.annotations.Benchmark;
@@ -44,7 +44,7 @@
 @OutputTimeUnit(TimeUnit.MICROSECONDS)
 @Fork(1)
 @BenchmarkMode(Mode.AverageTime)
-public class StringOpBenchmarks {
+public class StringOpBenchmark {
   private static final String STRING_PART = "h";
 
   StringBuilder sb;
@@ -86,7 +86,7 @@ public static void main(String[] args) throws Exception {
     Options opt =
         new OptionsBuilder()
             .addProfiler("gc")
-            .include(".*" + StringOpBenchmarks.class.getSimpleName() + ".*test.*")
+            .include(".*" + StringOpBenchmark.class.getSimpleName() + ".*test.*")
             .build();
 
     new Runner(opt).run();

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/Constants.java
Patch:
@@ -97,9 +97,9 @@ public abstract class Constants {
   public static final String THROWABLE_DESC = "L" + THROWABLE_INTERNAL + ";";
   public static final Type THROWABLE_TYPE = Type.getType(THROWABLE_DESC);
 
-  public static final String BTRACERTACCESSL_INTERNAL =
+  public static final String BTRACERTACCESS_INTERNAL =
       "org/openjdk/btrace/runtime/BTraceRuntimeAccess";
-  public static final String BTRACERTACCESS_DESC = "L" + BTRACERTACCESSL_INTERNAL + ";";
+  public static final String BTRACERTACCESS_DESC = "L" + BTRACERTACCESS_INTERNAL + ";";
   public static final String BTRACERT_INTERNAL = "org/openjdk/btrace/core/BTraceRuntime";
   public static final String BTRACERT_DESC = "L" + BTRACERT_INTERNAL + ";";
   public static final String BTRACERTIMPL_INTERNAL = "org/openjdk/btrace/core/BTraceRuntime$Impl";

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/Preprocessor.java
Patch:
@@ -554,7 +554,7 @@ private InsnList tlsInitSequence(ClassNode cn, String name, String desc) {
     initList.add(
         new MethodInsnNode(
             Opcodes.INVOKESTATIC,
-            Constants.BTRACERTACCESSL_INTERNAL,
+            Constants.BTRACERTACCESS_INTERNAL,
             "newThreadLocal",
             NEW_TLS_DESC,
             false));
@@ -786,7 +786,7 @@ private void initRuntime(ClassNode cn, MethodNode clinit) {
     l.add(
         new MethodInsnNode(
             Opcodes.INVOKESTATIC,
-            Constants.BTRACERTACCESSL_INTERNAL,
+            Constants.BTRACERTACCESS_INTERNAL,
             "forClass",
             BTRACERT_FOR_CLASS_DESC,
             false));
@@ -1173,7 +1173,7 @@ private void addRuntimeCheck(ClassNode cn, MethodNode mn, InsnList entryCheck, b
     entryCheck.add(
         new MethodInsnNode(
             Opcodes.INVOKESTATIC,
-            Constants.BTRACERTACCESSL_INTERNAL,
+            Constants.BTRACERTACCESS_INTERNAL,
             "enter",
             BTRACERT_ENTER_DESC,
             false));

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/ProbeUpgradeVisitor_1_2.java
Patch:
@@ -99,20 +99,20 @@ public void visitMethodInsn(int opcode, String owner, String name, String desc,
             if (desc.equals("(Lcom/sun/btrace/BTraceRuntime;)Z")) {
               visitMethodInsn(
                   INVOKESTATIC,
-                  Constants.BTRACERTACCESSL_INTERNAL,
+                  Constants.BTRACERTACCESS_INTERNAL,
                   name,
                   "(" + Constants.BTRACERTACCESS_DESC + ")Z",
                   itf);
             } else {
               visitFieldInsn(GETSTATIC, cName, "runtime", Constants.BTRACERTACCESS_DESC);
-              visitMethodInsn(INVOKEVIRTUAL, Constants.BTRACERTACCESSL_INTERNAL, name, "()Z", itf);
+              visitMethodInsn(INVOKEVIRTUAL, Constants.BTRACERTACCESS_INTERNAL, name, "()Z", itf);
             }
           } else if (name.equals("forClass")) {
             desc = desc.replace("com/sun/btrace/shared/", "org/openjdk/btrace/core/handlers/");
             desc =
                 desc.replace(
                     ")Lcom/sun/btrace/BTraceRuntime;", ")" + Constants.BTRACERTACCESS_DESC);
-            super.visitMethodInsn(opcode, Constants.BTRACERTACCESSL_INTERNAL, name, desc, itf);
+            super.visitMethodInsn(opcode, Constants.BTRACERTACCESS_INTERNAL, name, desc, itf);
           } else {
             super.visitMethodInsn(INVOKESTATIC, Constants.BTRACERT_INTERNAL, name, desc, itf);
           }

File: btrace-agent/src/main/java/org/openjdk/btrace/agent/Client.java
Patch:
@@ -67,7 +67,7 @@
 import org.openjdk.btrace.instr.ClassCache;
 import org.openjdk.btrace.instr.ClassFilter;
 import org.openjdk.btrace.instr.ClassInfo;
-import org.openjdk.btrace.instr.HandlerRepository;
+import org.openjdk.btrace.instr.HandlerRepositoryImpl;
 import org.openjdk.btrace.instr.InstrumentUtils;
 import org.openjdk.btrace.instr.Instrumentor;
 import org.openjdk.btrace.instr.templates.impl.MethodTrackingExpander;
@@ -311,7 +311,7 @@ synchronized void onExit(int exitCode) {
       } finally {
         runtime.shutdownCmdLine();
         CLIENTS.remove(id);
-        HandlerRepository.unregisterProbe(probe);
+        HandlerRepositoryImpl.unregisterProbe(probe);
       }
     }
   }

File: btrace-core/src/main/java/org/openjdk/btrace/core/Messages.java
Patch:
@@ -37,7 +37,7 @@ public final class Messages {
         ResourceBundle.getBundle(
             "org.openjdk.btrace.core.messages",
             Locale.getDefault(),
-            ClassLoader.getSystemClassLoader());
+            Messages.class.getClassLoader());
   }
 
   private Messages() {}

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/BTraceProbeFactory.java
Patch:
@@ -112,7 +112,7 @@ public BTraceProbe createProbe(byte[] code, ArgsMap argsMap) {
     }
 
     applyArgs(bp, argsMap);
-    HandlerRepository.registerProbe(bp);
+    HandlerRepositoryImpl.registerProbe(bp);
     return bp;
   }
 
@@ -140,7 +140,7 @@ public BTraceProbe createProbe(InputStream code, ArgsMap argsMap) {
     }
 
     applyArgs(bp, argsMap);
-    HandlerRepository.registerProbe(bp);
+    HandlerRepositoryImpl.registerProbe(bp);
     return bp;
   }
 }

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/Instrumentor.java
Patch:
@@ -1763,7 +1763,7 @@ private void invokeBTraceAction(Assembler asm, OnMethod om) {
           om.getTargetDescriptor().replace(Constants.ANYTYPE_DESC, Constants.OBJECT_DESC),
           new Handle(
               H_INVOKESTATIC,
-              "org/openjdk/btrace/instr/Indy",
+              "org/openjdk/btrace/runtime/Indy",
               "bootstrap",
               mt.toMethodDescriptorString(),
               false),

File: btrace-instr/src/test/java/org/openjdk/btrace/RuntimeTest.java
Patch:
@@ -372,7 +372,7 @@ public void run() {
                   String line = null;
                   while ((line = br.readLine()) != null) {
                     System.out.println("[btrace err] " + line);
-                    if (line.contains("Server VM warning")) {
+                    if (line.contains("Server VM warning") || line.contains("XML libraries not available")) {
                       // skip JVM generated warnings
                       continue;
                     }

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/templates/TemplateExpanderVisitor.java
Patch:
@@ -173,6 +173,7 @@ public void visitInsn(int i) {
     if (expandTemplate(null) == TemplateExpander.Result.IGNORED) {
       switch (i) {
         case Opcodes.RETURN:
+        case Opcodes.IRETURN:
         case Opcodes.LRETURN:
         case Opcodes.DRETURN:
         case Opcodes.FRETURN:

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE28Test.java
Patch:
@@ -42,10 +42,9 @@ public void bytecodeValidation() throws Exception {
             + "ASTORE 6\n"
             + "ASTORE 7\n"
             + "ALOAD 7\n"
-            + "FRAME FULL [T java/lang/String java/lang/String java/lang/String java/lang/String [B [B java/lang/StringBuilder] [java/lang/Throwable]\n"
+            + "FRAME FULL [resources/issues/BTRACE28 java/lang/String java/lang/String java/lang/String java/lang/String [B [B java/lang/StringBuilder] [java/lang/Throwable]\n"
             + "ASTORE 8\n"
             + "ALOAD 8\n"
-            + "FRAME APPEND [T]\n"
             + "LDC \"resources.issues.BTRACE28\"\n"
             + "LDC \"serveResource\"\n"
             + "INVOKESTATIC resources/issues/BTRACE28.$btrace$org$openjdk$btrace$runtime$aux$BTRACE28$tracker (Ljava/lang/String;Ljava/lang/String;)V\n"

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/BTRACE69Test.java
Patch:
@@ -57,7 +57,7 @@ public void bytecodeValidation() throws Exception {
             + "ATHROW\n"
             + "L8\n"
             + "LINENUMBER 111 L8\n"
-            + "FRAME FULL [resources/OnMethodTest T resources/OnMethodTest resources/OnMethodTest T] []\n"
+            + "FRAME FULL [resources/OnMethodTest T resources/OnMethodTest resources/OnMethodTest] []\n"
             + "RETURN\n"
             + "L5\n"
             + "FRAME FULL [resources/OnMethodTest] [java/lang/Throwable]\n"

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/VarRenumberingTest.java
Patch:
@@ -18,9 +18,6 @@ public void bytecodeValidation() throws Exception {
             + "ALOAD 1\n"
             + "ALOAD 2\n"
             + "INVOKESTATIC resources/InterestingVarsClass.$btrace$org$openjdk$btrace$runtime$aux$InterestingVarsTest$entry (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n"
-            + "FRAME FULL [java/lang/String java/lang/String java/lang/String java/util/Collection T T] []\n"
-            + "FRAME FULL [java/lang/String java/lang/String java/lang/String java/util/Collection java/lang/StringBuilder java/util/Iterator] []\n"
-            + "FRAME APPEND [T]\n"
             + "\n"
             + "// access flags 0xA\n"
             + "private static $btrace$org$openjdk$btrace$runtime$aux$InterestingVarsTest$entry(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n"

File: btrace-core/src/main/java/org/openjdk/btrace/core/ArgsMap.java
Patch:
@@ -53,7 +53,7 @@ public ArgsMap(String[] argLine, DebugSupport debug) {
   }
 
   public ArgsMap() {
-    this((Map<String, String>) null, new DebugSupport(SharedSettings.GLOBAL));
+    this((Map<String, String>) null, DebugSupport.SHARED);
   }
 
   public ArgsMap(int initialCapacity, DebugSupport debug) {

File: btrace-core/src/main/java/org/openjdk/btrace/core/DebugSupport.java
Patch:
@@ -33,10 +33,11 @@
  * @author Jaroslav Bachorik
  */
 public final class DebugSupport {
+  public static final DebugSupport SHARED = new DebugSupport(null);
   private final SharedSettings settings;
 
   public DebugSupport(SharedSettings s) {
-    settings = s != null ? s : new SharedSettings();
+    settings = s != null ? s : SharedSettings.GLOBAL;
   }
 
   public static void info(String msg) {

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/BTraceRuntimeImplBase.java
Patch:
@@ -401,7 +401,7 @@ public boolean keepRunning() {
     loadLibrary(perfReader.getClass().getClassLoader());
   }
 
-  BTraceRuntimeImplBase() {
+  protected BTraceRuntimeImplBase() {
     debug = new DebugSupport(null);
     args = null;
     queue = null;
@@ -410,7 +410,7 @@ public boolean keepRunning() {
     instrumentation = null;
   }
 
-  BTraceRuntimeImplBase(
+  protected BTraceRuntimeImplBase(
       final String className,
       ArgsMap args,
       final CommandListener cmdListener,

File: btrace-instr/src/test/java/org/openjdk/btrace/RuntimeTest.java
Patch:
@@ -143,7 +143,7 @@ public void test(
     if (forceDebug) {
       // force debug flags
       debugBTrace = true;
-      debugBTrace = true;
+      debugTestApp = true;
     }
     List<String> args = new ArrayList<>(Arrays.asList(java + "/bin/java", "-cp", cp));
     if (attachDebugger) {

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -271,8 +271,6 @@ public void validate(String stdout, String stderr, int retcode) {
 
   @Test
   public void testReflection() throws Exception {
-    debugBTrace = true;
-    debugTestApp = true;
     test(
         "resources.Main",
         "btrace/issues/BTRACE400.java",

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/Instrumentor.java
Patch:
@@ -184,7 +184,7 @@ && typeMatches(om.getType(), desc, om.isExactTypeMatch())) {
 
     methodVisitor = mHelper;
 
-    methodVisitor = new TemplateExpanderVisitor(methodVisitor, mHelper, className, name, desc);
+    methodVisitor = new TemplateExpanderVisitor(methodVisitor, mHelper, bcn, className, name, desc);
 
     for (OnMethod om : appliedOnMethods) {
       methodVisitor = instrumentorFor(om, methodVisitor, mHelper, access, name, desc);

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/templates/impl/MethodTrackingExpander.java
Patch:
@@ -301,7 +301,7 @@ private Label addLevelChecks(TemplateExpanderVisitor e, Label skip, Runnable ini
         for (Interval i : optimized) {
           Label nextCheck = new Label();
           if (globalLevelVar == Integer.MIN_VALUE) {
-            asm.getStatic(e.getClassName(), Constants.BTRACE_LEVEL_FLD, Constants.INT_DESC).dup();
+            asm.getStatic(e.getProbeClassName(true), Constants.BTRACE_LEVEL_FLD, Constants.INT_DESC).dup();
             globalLevelVar = e.storeAsNew();
           } else {
             asm.loadLocal(Type.INT_TYPE, globalLevelVar);

File: btrace-instr/src/test/btrace/OnMethodLevelTest.java
Patch:
@@ -50,8 +50,8 @@ public static void noargs(@Self Object self) {
         var = "A";
     }
 
-    @OnMethod(clazz = "resources.Main", method = "callB", enableAt = @Level("150"))
-    public static void args(@Self Object self, int i, String s) {
+    @OnMethod(clazz = "resources.Main", method = "callB", enableAt = @Level("150"), location = @Location(Kind.RETURN))
+    public static void args(@Self Object self, int i, String s, @Duration long duration) {
         tls -= 1;
         ex--;
         dump(var + " [this, args]");

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/InstrumentorTestBase.java
Patch:
@@ -232,7 +232,7 @@ protected void checkTransformation(String expected, boolean verify) throws IOExc
     }
     assertEquals(
         expected,
-        diff.substring(0, diff.length() > expected.length() ? expected.length() : diff.length()));
+        diff.substring(0, Math.min(diff.length(), expected.length())));
   }
 
   protected void checkTrace(String expected) throws IOException {

File: btrace-instr/src/test/java/org/openjdk/btrace/RuntimeTest.java
Patch:
@@ -85,7 +85,7 @@ public static void setup() {
         btraceExtPath =
             new File(
                     projectRoot.getAbsolutePath()
-                        + "/btrace-dist/build/resources/main/libs/btrace-client.jar")
+                        + "/btrace-dist/build/resources/main/" + System.getProperty("project.version") + "/libs/btrace-client.jar")
                 .getPath();
       }
       Assert.assertNotNull(projectRoot);

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/BTraceRuntimeImplBase.java
Patch:
@@ -1034,6 +1034,8 @@ private void enqueue(Command cmd) {
           Thread.sleep(100);
         }
       } catch (InterruptedException e) {
+        Thread.currentThread().interrupt();
+        break;
       }
       backoffCntr++;
     }

File: btrace-instr/src/test/btrace/OnMethodTest.java
Patch:
@@ -65,5 +65,6 @@ public static void args(@Self Object self, int i, String s) {
 
     private static void dump(String s) {
         println(s);
+        println("heap:" + Sys.Memory.heapUsage());
     }
 }

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -164,6 +164,7 @@ public void validate(String stdout, String stderr, int retcode) {
                     Assert.assertTrue(stdout.contains("[this, noargs]"));
                     Assert.assertTrue(stdout.contains("[this, args]"));
                     Assert.assertTrue(stdout.contains("{xxx}"));
+                    Assert.assertTrue(stdout.contains("heap:init"));
                 }
             }
         );

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -134,10 +134,11 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnExit() throws Exception {
+        timeout = 1500;
         test(
             "resources.Main",
             "btrace/OnExitTest.java",
-            1,
+            2,
             new ResultValidator() {
                 @Override
                 public void validate(String stdout, String stderr, int retcode) {

File: btrace-runtime/src/main/java9/org/openjdk/btrace/runtime/BTraceRuntimeImpl_9.java
Patch:
@@ -208,7 +208,7 @@ public Class<?> getCallerClass(int stackDec) {
         AtomicReference<Class<?>> cl = new AtomicReference<>(null);
         StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).forEach(f -> {
             if (cont.getAndDecrement() == 0) {
-                cl.compareAndSet(null, f.getDeclaringClass().getClassLoader());
+                cl.compareAndSet(null, f.getDeclaringClass());
             }
         });
         return cl.get();

File: btrace-instr/src/test/java/org/openjdk/btrace/BTraceFunctionalTests.java
Patch:
@@ -283,7 +283,6 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testReflection() throws Exception {
-        debugTestApp = true;
         test(
                 "resources.Main",
                 "btrace/issues/BTRACE400.java",

File: btrace-instr/src/test/java/org/openjdk/btrace/instr/InstrumentorTestBase.java
Patch:
@@ -52,6 +52,7 @@
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.lang.reflect.Field;
+import java.lang.reflect.Method;
 import java.nio.file.FileSystems;
 import java.nio.file.Files;
 import java.util.Map;
@@ -343,7 +344,7 @@ protected BTraceProbe loadTrace(String name, boolean unsafe) throws IOException
         byte[] traceData = loadFile("traces/" + name + ".class");
 
         BTraceProbe bcn = factory.createProbe(traceData);
-        this.traceCode = bcn.getFullBytecode();
+        traceCode = bcn.getFullBytecode();
 
         if (DEBUG) {
             System.err.println("=== Loaded Trace: " + bcn + "\n");

File: btrace-runtime/src/main/java/org/openjdk/btrace/runtime/BTraceRuntimes.java
Patch:
@@ -27,8 +27,8 @@ private static void loadFactory(String clzName) {
             if (instance.isEnabled()) {
                 FACTORY = instance;
             }
-        } catch (ClassNotFoundException e) {
-            DebugSupport.warning("Can not load runtime factory: " + clzName);
+        } catch (ClassNotFoundException | UnsupportedClassVersionError e) {
+            DebugSupport.info("Can not load runtime factory: " + clzName);
         } catch (Exception e) {
             DebugSupport.warning(e);
         }

File: btrace-instr/src/main/java/org/openjdk/btrace/instr/ClassCache.java
Patch:
@@ -29,6 +29,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.WeakHashMap;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * A simple class cache holding {@linkplain ClassInfo} instances and being
@@ -38,7 +39,7 @@
  */
 public final class ClassCache {
     private final Map<ClassLoader, Map<ClassName, ClassInfo>> cacheMap = new WeakHashMap<>();
-    private final Map<ClassName, ClassInfo> bootstrapInfos = new HashMap<>(500);
+    private final Map<ClassName, ClassInfo> bootstrapInfos = new ConcurrentHashMap<>(500);
 
     public static ClassCache getInstance() {
         return Singleton.INSTANCE;
@@ -60,7 +61,7 @@ public ClassInfo get(ClassLoader cl, String className) {
         return get(cl, new ClassName(className));
     }
 
-    ClassInfo get(ClassLoader cl, ClassName className) {
+    synchronized ClassInfo get(ClassLoader cl, ClassName className) {
         Map<ClassName, ClassInfo> infos = getInfos(cl);
 
         ClassInfo ci = infos.get(className);

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -458,7 +458,6 @@ void retransformLoaded() throws UnmodifiableClassException {
                 ClassCache cc = ClassCache.getInstance();
                 for (Class c : inst.getAllLoadedClasses()) {
                     if (c != null) {
-                        cc.get(c);
                         if (inst.isModifiableClass(c) &&  isCandidate(c)) {
                             debugPrint("candidate " + c + " added");
                             list.add(c);

File: src/share/classes/com/sun/btrace/runtime/VariableMapper.java
Patch:
@@ -48,7 +48,7 @@ public int remap(int var, int size) {
         if ((var & REMAP_FLAG) != 0) {
             return var & UNMASK;
         }
-        
+
         int offset = var - argsSize;
         if (offset < 0) {
             // self projection for method arguments

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -218,7 +218,6 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
                 if (entered) {
                     BTraceRuntime.leave();
                 }
-                System.err.println("*** <<< Thread: " + Thread.currentThread().getName());
             }
         } finally {
             setupLock.readLock().unlock();

File: src/test/java/com/sun/btrace/runtime/InstrumentorTestBase.java
Patch:
@@ -335,6 +335,9 @@ protected BTraceProbe loadTrace(String name, boolean unsafe) throws IOException
 
     protected byte[] loadTargetClass(String name) throws IOException {
         originalBC = loadResource("resources/" + name + ".class");
+        if (originalBC == null) {
+            System.err.println("!!! Unable to load resource class " + name);
+        }
         return originalBC;
     }
 

File: src/test/java/com/sun/btrace/runtime/InstrumentorTestBase.java
Patch:
@@ -52,7 +52,7 @@
  * @author Jaroslav Bachorik
  */
 public abstract class InstrumentorTestBase {
-    private static final boolean DEBUG = true;
+    private static final boolean DEBUG = false;
 
     private static Unsafe unsafe;
 

File: src/test/java/com/sun/btrace/runtime/BTRACE28Test.java
Patch:
@@ -45,7 +45,7 @@ public void bytecodeValidation() throws Exception {
             "ASTORE 6\n" +
             "ASTORE 7\n" +
             "ALOAD 7\n" +
-            "FRAME FULL [resources/issues/BTRACE28 java/lang/String java/lang/String java/lang/String java/lang/String [B [B java/lang/StringBuilder] [java/lang/Throwable]\n" +
+            "FRAME FULL [T java/lang/String java/lang/String java/lang/String java/lang/String [B [B java/lang/StringBuilder] [java/lang/Throwable]\n" +
             "ASTORE 8\n" +
             "ALOAD 8\n" +
             "FRAME APPEND [T]\n" +

File: src/share/classes/com/sun/btrace/runtime/OnMethod.java
Patch:
@@ -150,6 +150,7 @@ public void setMethod(String method) {
         } else {
             this.methodAnnotationMatcher = false;
         }
+        firstChar = method.isEmpty() ? 0 : method.charAt(0);
         if (firstChar == '/' && Constants.REGEX_SPECIFIER.matcher(method).matches()) {
             this.methodRegexMatcher = true;
             method = method.substring(1, method.length() - 1);

File: src/share/classes/com/sun/btrace/runtime/OnMethod.java
Patch:
@@ -143,13 +143,14 @@ public String getMethod() {
     }
 
     public void setMethod(String method) {
-        if (method.charAt(0) == '@') {
+        char firstChar = method.isEmpty() ? 0 : method.charAt(0);
+        if (firstChar == '@') {
             this.methodAnnotationMatcher = true;
             method = method.substring(1);
         } else {
             this.methodAnnotationMatcher = false;
         }
-        if (method.charAt(0) == '/' && Constants.REGEX_SPECIFIER.matcher(method).matches()) {
+        if (firstChar == '/' && Constants.REGEX_SPECIFIER.matcher(method).matches()) {
             this.methodRegexMatcher = true;
             method = method.substring(1, method.length() - 1);
         } else {

File: src/share/classes/com/sun/btrace/runtime/ClassInfo.java
Patch:
@@ -281,7 +281,8 @@ private void loadExternalClass(final ClassLoader cl, final ClassName className)
                             }
                         }
                     }
-                } catch (IOException e) {
+                } catch (IllegalArgumentException | IOException e) {
+                    DebugSupport.warning("Unable to load class: " + className);
                     DebugSupport.warning(e);
                 }
             }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -534,7 +534,8 @@ private static void addPreconfLibs(String libs) {
                 if (Files.exists(libFolder)) {
                     appendToBootClassPath(libFolder);
                     appendToSysClassPath(libFolder);
-                } else {
+                } else if (libs != null) {
+                    // for user provided libs config report error if the location does not exist
                     DebugSupport.warning("Invalid 'libs' configuration [" + libs + "]. " +
                                  "Path '" + libFolder.toAbsolutePath().toString() + "' does not exist.");
                 }

File: src/share/classes/com/sun/btrace/runtime/MethodInstrumentorHelper.java
Patch:
@@ -11,6 +11,7 @@ public interface Accessor {
     void insertFrameReplaceStack(Label l,Type ... stack);
     void insertFrameAppendStack(Label l, Type ... stack);
     void insertFrameSameStack(Label l);
+    void addTryCatchHandler(Label start, Label handler);
     int newVar(Type t);
     int storeAsNew();
 }

File: src/share/classes/com/sun/btrace/runtime/instr/ErrorReturnInstrumentor.java
Patch:
@@ -52,13 +52,14 @@ public ErrorReturnInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumen
 
     @Override
     protected void visitMethodPrologue() {
-        visitTryCatchBlock(start, end, end, THROWABLE_INTERNAL);
+        addTryCatchHandler(start, end);
         visitLabel(start);
         super.visitMethodPrologue();
     }
 
     @Override
     public void visitMaxs(int maxStack, int maxLocals) {
+        visitTryCatchBlock(start, end, end, THROWABLE_INTERNAL);
         visitLabel(end);
         insertFrameReplaceStack(end, THROWABLE_TYPE);
         onErrorReturn();

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -277,7 +277,7 @@ protected final Class loadClass(InstrumentCommand instr, boolean canLoadPack) th
         ArgsMap args = instr.getArguments();
         this.btraceCode = instr.getCode();
         try {
-            probe = load(btraceCode, canLoadPack);
+            probe = load(btraceCode, ArgsMap.merge(argsMap, args), canLoadPack);
             if (probe == null) {
                 return null;
             }
@@ -417,10 +417,10 @@ final void endRetransformClasses() {
     }
 
     // Internals only below this point
-    private BTraceProbe load(byte[] buf, boolean canLoadPack) {
+    private BTraceProbe load(byte[] buf, ArgsMap args, boolean canLoadPack) {
         BTraceProbeFactory f = new BTraceProbeFactory(settings, canLoadPack);
         debugPrint("loading BTrace class");
-        BTraceProbe cn = f.createProbe(buf, argsMap);
+        BTraceProbe cn = f.createProbe(buf, args);
 
         if (cn != null) {
             if (isDebug()) {

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -155,7 +155,7 @@ public static void main(String[] args) throws Exception {
             usage();
         }
 
-        if (generatePack && packExtension != null) {
+        if (!generatePack && packExtension != null) {
             usage("Can not specify pack extension if not using packs (-nopack)");
         }
 

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -187,7 +187,7 @@ public static void main(String[] args) throws Exception {
                 } else {
                     file = name;
                 }
-                file += "." + (packExtension != null ? packExtension : ".class");
+                file += "." + (packExtension != null ? packExtension : "class");
                 File out = new File(dir, file);
                 try (FileOutputStream fos = new FileOutputStream(out)) {
                     fos.write(c.getValue());

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -187,7 +187,7 @@ public static void main(String[] args) throws Exception {
                 } else {
                     file = name;
                 }
-                file += "." + (packExtension != null ? packExtension : ".class");
+                file += "." + (packExtension != null ? packExtension : "class");
                 File out = new File(dir, file);
                 try (FileOutputStream fos = new FileOutputStream(out)) {
                     fos.write(c.getValue());

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -319,8 +319,6 @@ public void run() {
         boolean entered = false;
         try {
             entered = BTraceRuntime.enter(runtime);
-            System.err.println("*** " + entered);
-            System.err.println("*** " + BTraceUtils.$("timer"));
             return probe.register(runtime, transformer);
         } catch (Throwable th) {
             debugPrint(th);

File: src/share/classes/com/sun/btrace/runtime/BTraceMethodNode.java
Patch:
@@ -379,6 +379,9 @@ private void verifySpecialParameters(OnMethod om) {
                 loc.getValue() == Kind.ARRAY_SET ||
                 loc.getValue() == Kind.INSTANCEOF ||
                 loc.getValue() == Kind.CHECKCAST ||
+                loc.getValue() == Kind.ERROR ||
+                loc.getValue() == Kind.THROW ||
+                loc.getValue() == Kind.CATCH ||
                 loc.getValue() == Kind.SYNC_ENTRY ||
                 loc.getValue() == Kind.SYNC_EXIT)) {
                 Verifier.reportError("target-instance.desc.invalid", om.getTargetName() + om.getTargetDescriptor() + "(" + om.getTargetInstanceParameter() + ")");

File: src/test/traces/onmethod/ArgsDuration2Err.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -40,12 +41,12 @@
 @BTrace
 public class ArgsDuration2Err {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.ERROR))
-    public static void args(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.ERROR))
-    public static void args2(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args2(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 }

File: src/test/traces/onmethod/ArgsDurationConstructorErr.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -40,7 +41,7 @@
 @BTrace
 public class ArgsDurationConstructorErr {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="<init>", location=@Location(value=Kind.ERROR))
-    public static void args(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 }

File: src/test/traces/onmethod/ArgsDurationErr.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -40,7 +41,7 @@
 @BTrace
 public class ArgsDurationErr {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.ERROR))
-    public static void args(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 }

File: src/test/traces/onmethod/Catch.java
Patch:
@@ -30,6 +30,7 @@
 import com.sun.btrace.annotations.Location;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
+import com.sun.btrace.annotations.TargetInstance;
 import java.io.IOException;
 import static com.sun.btrace.BTraceUtils.*;
 
@@ -41,7 +42,7 @@
 public class Catch {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="exception",
               location=@Location(value=Kind.CATCH))
-    public static void args(@Self Object self, IOException e) {
+    public static void args(@Self Object self, @TargetInstance IOException e) {
         println("args");
     }
 }

File: src/test/traces/onmethod/Error.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -41,7 +42,7 @@
 public class Error {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="uncaught",
               location=@Location(value=Kind.ERROR))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, Throwable cause) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @TargetInstance Throwable cause) {
         println("args");
     }
 }

File: src/test/traces/onmethod/ErrorDuration.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -42,7 +43,7 @@
 public class ErrorDuration {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="uncaught",
               location=@Location(value=Kind.ERROR))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, @Duration long dur, Throwable cause) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @Duration long dur, @TargetInstance Throwable cause) {
         println("args");
     }
 }

File: src/test/traces/onmethod/Throw.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.ProbeClassName;
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -42,7 +43,7 @@
 public class Throw {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="exception",
               location=@Location(value=Kind.THROW))
-    public static void args(@Self Object self, @ProbeClassName String pcn, @ProbeMethodName String pmn, Throwable e) {
+    public static void args(@Self Object self, @ProbeClassName String pcn, @ProbeMethodName String pmn, @TargetInstance Throwable e) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArgsDuration2Err.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
 
@@ -41,12 +42,12 @@
 @BTrace
 public class ArgsDuration2Err {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.ERROR), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.ERROR), enableAt = @Level(">=1"))
-    public static void args2(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args2(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArgsDurationConstructorErr.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
 
@@ -41,7 +42,7 @@
 @BTrace
 public class ArgsDurationConstructorErr {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="<init>", location=@Location(value=Kind.ERROR), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArgsDurationErr.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
 
@@ -41,7 +42,7 @@
 @BTrace
 public class ArgsDurationErr {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.ERROR), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @Duration long dur, Throwable err) {
+    public static void args(@Self Object self, @Duration long dur, @TargetInstance Throwable err) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/Catch.java
Patch:
@@ -30,6 +30,7 @@
 import com.sun.btrace.annotations.Location;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
+import com.sun.btrace.annotations.TargetInstance;
 import java.io.IOException;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
@@ -42,7 +43,7 @@
 public class Catch {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="exception",
               location=@Location(value=Kind.CATCH), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, IOException e) {
+    public static void args(@Self Object self, @TargetInstance IOException e) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/Error.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
 
@@ -42,7 +43,7 @@
 public class Error {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="uncaught",
               location=@Location(value=Kind.ERROR), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, Throwable cause) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @TargetInstance Throwable cause) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ErrorDuration.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Duration;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
 
@@ -43,7 +44,7 @@
 public class ErrorDuration {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="uncaught",
               location=@Location(value=Kind.ERROR), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, @Duration long dur, Throwable cause) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @Duration long dur, @TargetInstance Throwable cause) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/Throw.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.ProbeClassName;
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
+import com.sun.btrace.annotations.TargetInstance;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
 
@@ -43,7 +44,7 @@
 public class Throw {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="exception",
               location=@Location(value=Kind.THROW), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeClassName String pcn, @ProbeMethodName String pmn, Throwable e) {
+    public static void args(@Self Object self, @ProbeClassName String pcn, @ProbeMethodName String pmn, @TargetInstance Throwable e) {
         println("args");
     }
 }

File: src/share/classes/com/sun/btrace/ArgsMap.java
Patch:
@@ -38,7 +38,7 @@ public ArgsMap(Map<String, String> args) {
     public ArgsMap(String[] argLine) {
         this.map = new LinkedHashMap<>();
         if (argLine != null) {
-            for (String arg : argLine) {
+                for (String arg : argLine) {
                 String[] kv = arg.split("=");
                 if (kv.length != 2) {
                     this.map.put(arg, "");

File: src/share/classes/com/sun/btrace/profiling/MethodInvocationProfiler.java
Patch:
@@ -31,8 +31,6 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentLinkedDeque;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import java.util.concurrent.ConcurrentSkipListSet;
 
 /**
  * Implementation of {@linkplain Profiler}

File: src/share/classes/com/sun/btrace/profiling/MethodInvocationRecorder.java
Patch:
@@ -25,10 +25,10 @@
 package com.sun.btrace.profiling;
 
 import com.sun.btrace.Profiler;
+import java.util.ArrayDeque;
 import java.util.Arrays;
 import java.util.Deque;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.Map;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.locks.LockSupport;
@@ -69,13 +69,13 @@ public DelayedRecord(String blockName, long duration) {
 
     private long carryOver = 0L;
     private final int defaultBufferSize;
-    private final Map<String, Integer> indexMap = new HashMap<String, Integer>();
+    private final Map<String, Integer> indexMap = new HashMap<>();
     private volatile int lastIndex = 0;
 
     // 0 - available; 1 - processing invocation; 2 - generating snapshot; 3 - resetting
     private final AtomicInteger writerStatus = new AtomicInteger(0);
 
-    private final Deque<DelayedRecord> delayedRecords = new LinkedList<DelayedRecord>();
+    private final Deque<DelayedRecord> delayedRecords = new ArrayDeque<>();
 
     public MethodInvocationRecorder(int expectedBlockCnt) {
         defaultBufferSize = expectedBlockCnt << 8;

File: src/share/classes/com/sun/btrace/runtime/BTraceClassWriter.java
Patch:
@@ -26,12 +26,11 @@
 
 import com.sun.btrace.org.objectweb.asm.ClassVisitor;
 import com.sun.btrace.org.objectweb.asm.ClassWriter;
-import com.sun.btrace.org.objectweb.asm.Opcodes;
+import java.util.ArrayDeque;
 
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
-import java.util.LinkedList;
 
 /**
  * A hacked version of <a href="http://asm.ow2.org/asm50/javadoc/user/org/objectweb/asm/ClassWriter.html">ClassWriter</a>
@@ -40,7 +39,7 @@
  * @author Jaroslav Bachorik
  */
 final class BTraceClassWriter extends ClassWriter {
-    private final Deque<Instrumentor> instrumentors = new LinkedList<>();
+    private final Deque<Instrumentor> instrumentors = new ArrayDeque<>();
     private final ClassLoader targetCL;
     private final BTraceClassReader cr;
     private InstrumentingClassVisitor iClassVisitor = null;

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -29,9 +29,9 @@
 import java.lang.instrument.ClassFileTransformer;
 import java.lang.instrument.IllegalClassFormatException;
 import java.security.ProtectionDomain;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.HashMap;
-import java.util.LinkedList;
 import java.util.Map;
 import java.util.regex.Pattern;
 
@@ -130,7 +130,7 @@ public Result matchClass(String className) {
         }
     }
     private final DebugSupport debug;
-    private final Collection<BTraceProbe> probes = new LinkedList<>();
+    private final Collection<BTraceProbe> probes = new ArrayList<>(3);
     private final Filter filter = new Filter();
 
     public BTraceTransformer(DebugSupport d) {

File: src/share/classes/com/sun/btrace/runtime/ClassInfo.java
Patch:
@@ -28,9 +28,9 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Method;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedHashSet;
-import java.util.LinkedList;
 import java.util.Objects;
 import java.util.Set;
 
@@ -187,7 +187,7 @@ public boolean equals(Object obj) {
     private static final ClassLoader SYS_CL = ClassLoader.getSystemClassLoader();
     private final String cLoaderId;
     private final ClassName classId;
-    private final Collection<ClassInfo> supertypes = new LinkedList<>();
+    private final Collection<ClassInfo> supertypes = new ArrayList<>();
     private final ClassCache cache;
     private boolean isInterface = false;
 

File: src/share/classes/com/sun/btrace/runtime/InstrumentingClassVisitor.java
Patch:
@@ -27,6 +27,7 @@ public InstrumentingMethodVisitor visitMethod(int access, String name, String de
         return mv;
     }
 
+    @Override
     public MethodInstrumentorHelper methodHelper() {
         return helper;
     }

File: src/share/classes/com/sun/btrace/runtime/InstrumentingMethodVisitor.java
Patch:
@@ -35,7 +35,7 @@
  * recomputing stackmap frames as necessary. It also provides an API for downstream
  * visitors to hint insertion of stackmap frames at required locations.
  */
-class InstrumentingMethodVisitor extends MethodVisitor implements MethodInstrumentorHelper {
+public final class InstrumentingMethodVisitor extends MethodVisitor implements MethodInstrumentorHelper {
     private static final Object TOP_EXT = -2;
 
     private static final class LocalVarSlot {

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -57,8 +57,8 @@
 import static com.sun.btrace.runtime.Constants.*;
 import com.sun.btrace.util.MethodID;
 import com.sun.btrace.util.templates.impl.MethodTrackingExpander;
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.LinkedList;
 
 /**
  * This instruments a probed class with BTrace probe
@@ -110,7 +110,7 @@ public void visit(int version, int access, String name,
     public MethodVisitor visitMethod(int access, final String name,
         final String desc, String signature, String[] exceptions) {
 
-        List<OnMethod> appliedOnMethods = new LinkedList<>();
+        List<OnMethod> appliedOnMethods = new ArrayList<>();
 
         if (applicableOnMethods.isEmpty() ||
             (access & ACC_ABSTRACT) != 0 ||

File: src/share/classes/com/sun/btrace/services/impl/Statsd.java
Patch:
@@ -33,9 +33,9 @@
 import java.net.InetAddress;
 import java.net.UnknownHostException;
 import java.nio.charset.Charset;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Formatter;
-import java.util.LinkedList;
 import java.util.concurrent.ArrayBlockingQueue;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ExecutorService;
@@ -104,7 +104,7 @@ public void run() {
                     dp.setPort(SharedSettings.GLOBAL.getStatsdPort());
 
                     while (true) {
-                        Collection<String> msgs = new LinkedList<>();
+                        Collection<String> msgs = new ArrayList<>();
                         msgs.add(q.take());
                         q.drainTo(msgs);
 

File: src/share/classes/com/sun/btrace/util/templates/impl/MethodTrackingExpander.java
Patch:
@@ -37,8 +37,8 @@
 import com.sun.btrace.util.templates.BaseTemplateExpander;
 import com.sun.btrace.util.templates.Template;
 import com.sun.btrace.util.templates.TemplateExpanderVisitor;
+import java.util.ArrayList;
 import java.util.Collection;
-import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
 
@@ -110,7 +110,7 @@ public class MethodTrackingExpander extends BaseTemplateExpander {
     private int globalLevelVar = Integer.MIN_VALUE;
     private boolean durationComputed = false;
 
-    private final Collection<Interval> levelIntervals = new LinkedList<>();
+    private final Collection<Interval> levelIntervals = new ArrayList<>();
 
     private Label elseLabel = null;
     private Label samplerLabel = null;

File: benchmark/src/main/java/net/java/btrace/BTraceBench.java
Patch:
@@ -25,6 +25,7 @@
 package net.java.btrace;
 
 import com.sun.btrace.BTraceRuntime;
+import com.sun.btrace.ArgsMap;
 import com.sun.btrace.CommandListener;
 import com.sun.btrace.comm.DataCommand;
 import com.sun.btrace.comm.OkayCommand;
@@ -140,7 +141,7 @@ public void setup() {
             cl = (c) -> {
             };
         }
-        br = new BTraceRuntime("BenchmarkClass", new String[0], cl, null, null);
+        br = new BTraceRuntime("BenchmarkClass", new ArgsMap(), cl, null, null);
     }
 
     @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)

File: src/share/classes/com/sun/btrace/agent/FileClient.java
Patch:
@@ -58,7 +58,7 @@ class FileClient extends Client {
     private boolean canLoadPack = true;
 
     private boolean init(byte[] code) throws IOException {
-        InstrumentCommand cmd = new InstrumentCommand(code, new String[0]);
+        InstrumentCommand cmd = new InstrumentCommand(code, this.argsMap);
         boolean ret = loadClass(cmd, canLoadPack) != null;
         if (ret) {
             super.initialize();

File: src/share/classes/com/sun/btrace/client/Client.java
Patch:
@@ -52,6 +52,7 @@
 import com.sun.btrace.org.objectweb.asm.*;
 import com.sun.tools.attach.VirtualMachine;
 import java.net.ConnectException;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Properties;
 import java.util.concurrent.atomic.AtomicBoolean;
@@ -381,7 +382,7 @@ public void submit(String fileName, byte[] code, String[] args,
             WireIO.write(oos, new SetSettingsCommand(settings));
 
             if (debug) {
-                debugPrint("sending instrument command");
+                debugPrint("sending instrument command: " + Arrays.deepToString(args));
             }
             WireIO.write(oos, new InstrumentCommand(code, args));
             ois = new ObjectInputStream(sock.getInputStream());

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -575,11 +575,13 @@ public void handleEvent(EventCommand ecmd) {
                 eventHandlerMap = new HashMap<>();
                 for (EventHandler eh : eventHandlers) {
                     try {
-                       eventHandlerMap.put(eh.event, eh.getMethod(clazz));
+                       eventHandlerMap.put(eh.getEvent(), eh.getMethod(clazz));
                     } catch (NoSuchMethodException e) {}
                 }
             }
             String event = ecmd.getEvent();
+            event = event != null ? event : EventHandler.ALL_EVENTS;
+
             final Method eventHandler = eventHandlerMap.get(event);
             if (eventHandler != null) {
                 rt.get().escape(new Callable<Void>() {

File: src/share/classes/com/sun/btrace/runtime/Preprocessor.java
Patch:
@@ -582,7 +582,7 @@ private InsnList loadEventHandlers(ClassNode cn) {
                     il.add(new TypeInsnNode(Opcodes.NEW, EVENTHANDLER_INTERNAL));
                     il.add(new InsnNode(Opcodes.DUP));
                     il.add(new LdcInsnNode(mn.name));
-                    il.add(new LdcInsnNode(an.values.get(1)));
+                    il.add(an.values != null ? new LdcInsnNode(an.values.get(1)) : new InsnNode(Opcodes.ACONST_NULL));
                     il.add(new MethodInsnNode(
                             Opcodes.INVOKESPECIAL,
                             EVENTHANDLER_INTERNAL,

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -575,11 +575,13 @@ public void handleEvent(EventCommand ecmd) {
                 eventHandlerMap = new HashMap<>();
                 for (EventHandler eh : eventHandlers) {
                     try {
-                       eventHandlerMap.put(eh.event, eh.getMethod(clazz));
+                       eventHandlerMap.put(eh.getEvent(), eh.getMethod(clazz));
                     } catch (NoSuchMethodException e) {}
                 }
             }
             String event = ecmd.getEvent();
+            event = event != null ? event : EventHandler.ALL_EVENTS;
+
             final Method eventHandler = eventHandlerMap.get(event);
             if (eventHandler != null) {
                 rt.get().escape(new Callable<Void>() {

File: src/share/classes/com/sun/btrace/runtime/Preprocessor.java
Patch:
@@ -582,7 +582,7 @@ private InsnList loadEventHandlers(ClassNode cn) {
                     il.add(new TypeInsnNode(Opcodes.NEW, EVENTHANDLER_INTERNAL));
                     il.add(new InsnNode(Opcodes.DUP));
                     il.add(new LdcInsnNode(mn.name));
-                    il.add(new LdcInsnNode(an.values.get(1)));
+                    il.add(an.values != null ? new LdcInsnNode(an.values.get(1)) : new InsnNode(Opcodes.ACONST_NULL));
                     il.add(new MethodInsnNode(
                             Opcodes.INVOKESPECIAL,
                             EVENTHANDLER_INTERNAL,

File: samples/SocketTracker.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * This example tracks all server socket creations
  * and client socket accepts.
- * <br/>
+ * <br>
  * Also, it shows how to use shared methods.
  */
 @BTrace public class SocketTracker {

File: src/share/classes/com/sun/btrace/aggregation/Aggregation.java
Patch:
@@ -172,7 +172,6 @@ public List<AggregationKey> getKeyData() {
     /**
      * Returns a value for the given key if the key has a value associated with it. Returns zero if the key is not
      * valid for this Aggregation.
-     * @param key
      * @return the value for the given key, or zero.
      */
     public Long getValueForKey(AggregationKey key) {

File: src/share/classes/com/sun/btrace/annotations/Duration.java
Patch:
@@ -36,9 +36,8 @@
  * of {@linkplain Kind#RETURN} or {@linkplain Kind#ERROR}
  * <p>
  * The duration is reported in nanoseconds, using resolution available by OS
- * </p>
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  * @since 1.1
  */
 @Target(ElementType.PARAMETER)

File: src/share/classes/com/sun/btrace/annotations/Injected.java
Patch:
@@ -38,7 +38,6 @@
 public @interface Injected {
     /**
      * The injected service type
-     * @return
      */
     ServiceType value() default ServiceType.SIMPLE;
     /**

File: src/share/classes/com/sun/btrace/annotations/ProbeClassName.java
Patch:
@@ -34,7 +34,7 @@
  * It is used to mark a probe method argument as the receiver of the probe target class name<br>
  * Applicable only for {@linkplain OnMethod} annotation
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  * @since 1.1
  */
 @Target(ElementType.PARAMETER)

File: src/share/classes/com/sun/btrace/annotations/ProbeMethodName.java
Patch:
@@ -34,7 +34,7 @@
  * It is used to mark a probe method argument as the receiver of the probe target class name<br>
  * Applicable only for {@linkplain OnMethod} annotation
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  * @since 1.1
  */
 @Target(ElementType.PARAMETER)

File: src/share/classes/com/sun/btrace/annotations/Sampled.java
Patch:
@@ -80,7 +80,7 @@ public static enum Sampler {
      * <p>
      * For {@code Sampler.Const} it is the average number of events between samples.<br>
      * For {@code Sampler.Adaptive} it is the average time (in ns) between samples<br>
-     * </p>
+     *
      * @return The sampler mean
      */
     int mean() default MEAN_DEFAULT;

File: src/share/classes/com/sun/btrace/annotations/TLS.java
Patch:
@@ -35,10 +35,10 @@
  * annotated with this annotation are stored in thread local
  * storage. Field get/set are transparently converted to
  * thread local get and set respectively.
- * <p><h3>Important!!!</h3>
+ *
+ * <h3>Important!!!</h3>
  * It is not possible to access the data stored in the thread local storage
  * from any other handler than {@linkplain OnMethod}
- * </p>
  *
  * @author A. Sundararajan
  */

File: src/share/classes/com/sun/btrace/api/BTraceCompiler.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public abstract class BTraceCompiler {
     public byte[] compile(String source, String classPath) {

File: src/share/classes/com/sun/btrace/api/BTraceEngine.java
Patch:
@@ -34,9 +34,8 @@
  * <pre>
  * BTraceTask task = BTraceEngine.sharedInstance().createTask(PID)
  * </pre>
- * </p>
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public abstract class BTraceEngine {
     final public static BTraceEngine newInstance() {

File: src/share/classes/com/sun/btrace/api/BTraceSettings.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 abstract public class BTraceSettings {
     abstract public boolean isDebugMode();

File: src/share/classes/com/sun/btrace/api/BTraceTask.java
Patch:
@@ -38,7 +38,7 @@
  * <pre>
  * BTraceEngine.sharedInstance().createTask(PID)
  * </pre>
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public abstract class BTraceTask {
     /**
@@ -109,7 +109,7 @@ public static enum State {
     }
 
     /**
-     * Listener management (can use {@linkplain WeakListeners} to create a new listener)
+     * Listener management
      * @param listener {@linkplain BTraceTask.StateListener} instance to add
      */
     abstract public void addStateListener(StateListener listener);

File: src/share/classes/com/sun/btrace/comm/DataCommand.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Command that carries arbitrary "result/output" data.
  *
- * @author A> Sundararajan
+ * @author Sundararajan
  */
 public abstract class DataCommand extends Command implements PrintableCommand {
     protected String name;

File: src/share/classes/com/sun/btrace/comm/GridDataCommand.java
Patch:
@@ -57,7 +57,7 @@ public class GridDataCommand extends DataCommand {
     private String format;
 
     /**
-     * Used when deserializing a {@linkplain GridDataCommand} instance.<br/>
+     * Used when deserializing a {@linkplain GridDataCommand} instance.<br>
      * The instance is then initialized by calling the {@linkplain GridDataCommand#read(java.io.ObjectInput) } method
      */
     public GridDataCommand() {

File: src/share/classes/com/sun/btrace/comm/NumberMapDataCommand.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Map;
 
 /**
- * A data command that hold data of type Map<String, Number>.
+ * A data command that hold data of type Map&lt;String, Number&gt;.
  * 
  * @author A. Sundararajan
  */

File: src/share/classes/com/sun/btrace/comm/RetransformClassNotification.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * This command is sent out as a notification that a class
  * is going to be transformed
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class RetransformClassNotification extends Command implements PrintableCommand {
     private String className;

File: src/share/classes/com/sun/btrace/comm/RetransformationStartNotification.java
Patch:
@@ -32,9 +32,9 @@
 
 /**
  * This command is sent out when the BTrace engine calls
- * {@linkplain Instrumentation#retransformClasses(java.lang.Class<?>[])} method.
+ * {@linkplain Instrumentation#retransformClasses(Class[])} method.
  * It is followed by {@linkplain OkayCommand} command when the retransformation ends.
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class RetransformationStartNotification extends Command {
     private int numClasses;

File: src/share/classes/com/sun/btrace/comm/StringMapDataCommand.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Map;
 
 /**
- * A data command that hold data of type Map<String, String>.
+ * A data command that hold data of type Map&lt;String, String&gt;.
  * 
  * @author A. Sundararajan
  */

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -41,7 +41,6 @@
  * When a class is to be transformed all the registered {@linkplain BTraceProbe} instances are
  * asked for the appropriate instrumentation. When there are no registered probes or none of
  * the registered probes is able to instrument the class it will not be transformed.
- * </p>
  *
  * @since 1.3.5
  * @author Jaroslav Bachorik

File: src/share/classes/com/sun/btrace/runtime/ClassCache.java
Patch:
@@ -57,7 +57,6 @@ public ClassInfo get(Class clz) {
      * created and put into the cache.
      * @param cl The associated {@linkplain ClassLoader}
      * @param className The Java class name or internal class name
-     * @return
      */
     public ClassInfo get(ClassLoader cl, String className) {
         return get(cl, new ClassName(className));

File: src/share/classes/com/sun/btrace/runtime/Location.java
Patch:
@@ -32,7 +32,7 @@
  * This class is used to store data of the annotation
  * com.sun.btrace.annotations.Location. We can not read the
  * Location annotation using reflection API [because we strip
- * @OnMethod annotated methods before defineClass]. Instead,
+ * {@code @OnMethod} annotated methods before defineClass]. Instead,
  * we read Location annotation while parsing the BTrace class and
  * store the data in an instance of this class. Please note that
  * the get/set methods have to be in sync with Location annotation.

File: src/share/classes/com/sun/btrace/runtime/OnMethod.java
Patch:
@@ -31,7 +31,7 @@
  * This class is used to store data of the annotation
  * com.sun.btrace.annotations.OnMethod. We can not read the
  * OnMethod annotation using reflection API [because we strip
- * @OnMethod annotated methods before defineClass]. Instead,
+ * {@code @OnMethod} annotated methods before defineClass]. Instead,
  * we read OnMethod annotation while parsing the BTrace class and
  * store the data in an instance of this class. Please note that
  * the get/set methods have to be in sync with OnMethod annotation.

File: src/share/classes/com/sun/btrace/runtime/OnProbe.java
Patch:
@@ -34,7 +34,7 @@
  * This class is used to store data of the annotation
  * com.sun.btrace.annotations.OnProbe. We can not read the
  * OnMethod annotation using reflection API [because we strip
- * @OnProbe annotated methods before defineClass]. Instead,
+ * {@code @OnProbe} annotated methods before defineClass]. Instead,
  * we read OnProbe annotation while parsing the BTrace class and
  * store the data in an instance of this class. Please note that
  * the get/set methods have to be in sync with OnProbe annotation.

File: src/share/classes/com/sun/btrace/spi/BTraceCompilerFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface BTraceCompilerFactory {
     BTraceCompiler newCompiler(BTraceTask task);

File: src/share/classes/com/sun/btrace/spi/BTraceSettingsProvider.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface BTraceSettingsProvider {
     BTraceSettings getSettings();

File: src/share/classes/com/sun/btrace/spi/ClasspathProvider.java
Patch:
@@ -11,7 +11,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface ClasspathProvider {
     public static final ClasspathProvider EMPTY = new ClasspathProvider() {

File: src/share/classes/com/sun/btrace/spi/OutputProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface OutputProvider {
     @SuppressWarnings("DefaultCharset")

File: src/share/classes/com/sun/btrace/spi/PortLocator.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface PortLocator {
     final public static String PORT_PROPERTY = "btrace.port";

File: src/share/classes/com/sun/btrace/spi/impl/BTraceCompilerFactoryImpl.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 final public class BTraceCompilerFactoryImpl implements BTraceCompilerFactory {
     @Override

File: src/share/classes/com/sun/btrace/spi/impl/BTraceSettingsProviderImpl.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 final public class BTraceSettingsProviderImpl implements BTraceSettingsProvider {
     private final BTraceSettings bs = new BTraceSettings() {

File: src/share/classes/com/sun/btrace/spi/impl/PortLocatorImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 final public class PortLocatorImpl implements PortLocator {
     final private static Logger LOGGER = Logger.getLogger(PortLocator.class.getName());

File: src/share/classes/com/sun/btrace/util/templates/TemplateExpander.java
Patch:
@@ -45,7 +45,6 @@ public static enum Result {
 
     /**
      * A knockoff of the java.util.function.Consumer interface for pre-8 usage
-     * @param <T>
      */
     public static interface Consumer<T> {
         void consume(T visitor);

File: src/test/java/resources/AbstractClass.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 abstract public class AbstractClass {
     protected AbstractClass(List lst) {

File: src/test/java/resources/DerivedClass.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class DerivedClass extends AbstractClass {
     private static volatile String defaultString;

File: src/test/java/resources/issues/BTRACE22.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class BTRACE22 {
     public double testDouble() {

File: src/test/java/resources/issues/BTRACE28.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class BTRACE28 {
     private void serveResource(String param1, String param2) {

File: samples/SocketTracker.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * This example tracks all server socket creations
  * and client socket accepts.
- * <br/>
+ * <br>
  * Also, it shows how to use shared methods.
  */
 @BTrace public class SocketTracker {

File: src/share/classes/com/sun/btrace/aggregation/Aggregation.java
Patch:
@@ -172,7 +172,6 @@ public List<AggregationKey> getKeyData() {
     /**
      * Returns a value for the given key if the key has a value associated with it. Returns zero if the key is not
      * valid for this Aggregation.
-     * @param key
      * @return the value for the given key, or zero.
      */
     public Long getValueForKey(AggregationKey key) {

File: src/share/classes/com/sun/btrace/annotations/Duration.java
Patch:
@@ -36,9 +36,8 @@
  * of {@linkplain Kind#RETURN} or {@linkplain Kind#ERROR}
  * <p>
  * The duration is reported in nanoseconds, using resolution available by OS
- * </p>
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  * @since 1.1
  */
 @Target(ElementType.PARAMETER)

File: src/share/classes/com/sun/btrace/annotations/Injected.java
Patch:
@@ -38,7 +38,6 @@
 public @interface Injected {
     /**
      * The injected service type
-     * @return
      */
     ServiceType value() default ServiceType.SIMPLE;
     /**

File: src/share/classes/com/sun/btrace/annotations/ProbeClassName.java
Patch:
@@ -34,7 +34,7 @@
  * It is used to mark a probe method argument as the receiver of the probe target class name<br>
  * Applicable only for {@linkplain OnMethod} annotation
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  * @since 1.1
  */
 @Target(ElementType.PARAMETER)

File: src/share/classes/com/sun/btrace/annotations/ProbeMethodName.java
Patch:
@@ -34,7 +34,7 @@
  * It is used to mark a probe method argument as the receiver of the probe target class name<br>
  * Applicable only for {@linkplain OnMethod} annotation
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  * @since 1.1
  */
 @Target(ElementType.PARAMETER)

File: src/share/classes/com/sun/btrace/annotations/Sampled.java
Patch:
@@ -80,7 +80,7 @@ public static enum Sampler {
      * <p>
      * For {@code Sampler.Const} it is the average number of events between samples.<br>
      * For {@code Sampler.Adaptive} it is the average time (in ns) between samples<br>
-     * </p>
+     *
      * @return The sampler mean
      */
     int mean() default MEAN_DEFAULT;

File: src/share/classes/com/sun/btrace/annotations/TLS.java
Patch:
@@ -35,10 +35,10 @@
  * annotated with this annotation are stored in thread local
  * storage. Field get/set are transparently converted to
  * thread local get and set respectively.
- * <p><h3>Important!!!</h3>
+ *
+ * <h3>Important!!!</h3>
  * It is not possible to access the data stored in the thread local storage
  * from any other handler than {@linkplain OnMethod}
- * </p>
  *
  * @author A. Sundararajan
  */

File: src/share/classes/com/sun/btrace/api/BTraceCompiler.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public abstract class BTraceCompiler {
     public byte[] compile(String source, String classPath) {

File: src/share/classes/com/sun/btrace/api/BTraceEngine.java
Patch:
@@ -34,9 +34,8 @@
  * <pre>
  * BTraceTask task = BTraceEngine.sharedInstance().createTask(PID)
  * </pre>
- * </p>
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public abstract class BTraceEngine {
     final public static BTraceEngine newInstance() {

File: src/share/classes/com/sun/btrace/api/BTraceSettings.java
Patch:
@@ -7,7 +7,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 abstract public class BTraceSettings {
     abstract public boolean isDebugMode();

File: src/share/classes/com/sun/btrace/api/BTraceTask.java
Patch:
@@ -38,7 +38,7 @@
  * <pre>
  * BTraceEngine.sharedInstance().createTask(PID)
  * </pre>
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public abstract class BTraceTask {
     /**
@@ -109,7 +109,7 @@ public static enum State {
     }
 
     /**
-     * Listener management (can use {@linkplain WeakListeners} to create a new listener)
+     * Listener management
      * @param listener {@linkplain BTraceTask.StateListener} instance to add
      */
     abstract public void addStateListener(StateListener listener);

File: src/share/classes/com/sun/btrace/comm/DataCommand.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * Command that carries arbitrary "result/output" data.
  *
- * @author A> Sundararajan
+ * @author Sundararajan
  */
 public abstract class DataCommand extends Command implements PrintableCommand {
     protected String name;

File: src/share/classes/com/sun/btrace/comm/GridDataCommand.java
Patch:
@@ -57,7 +57,7 @@ public class GridDataCommand extends DataCommand {
     private String format;
 
     /**
-     * Used when deserializing a {@linkplain GridDataCommand} instance.<br/>
+     * Used when deserializing a {@linkplain GridDataCommand} instance.<br>
      * The instance is then initialized by calling the {@linkplain GridDataCommand#read(java.io.ObjectInput) } method
      */
     public GridDataCommand() {

File: src/share/classes/com/sun/btrace/comm/NumberMapDataCommand.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Map;
 
 /**
- * A data command that hold data of type Map<String, Number>.
+ * A data command that hold data of type Map&lt;String, Number&gt;.
  * 
  * @author A. Sundararajan
  */

File: src/share/classes/com/sun/btrace/comm/RetransformClassNotification.java
Patch:
@@ -33,7 +33,7 @@
 /**
  * This command is sent out as a notification that a class
  * is going to be transformed
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class RetransformClassNotification extends Command implements PrintableCommand {
     private String className;

File: src/share/classes/com/sun/btrace/comm/RetransformationStartNotification.java
Patch:
@@ -32,9 +32,9 @@
 
 /**
  * This command is sent out when the BTrace engine calls
- * {@linkplain Instrumentation#retransformClasses(java.lang.Class<?>[])} method.
+ * {@linkplain Instrumentation#retransformClasses(Class[])} method.
  * It is followed by {@linkplain OkayCommand} command when the retransformation ends.
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class RetransformationStartNotification extends Command {
     private int numClasses;

File: src/share/classes/com/sun/btrace/comm/StringMapDataCommand.java
Patch:
@@ -32,7 +32,7 @@
 import java.util.Map;
 
 /**
- * A data command that hold data of type Map<String, String>.
+ * A data command that hold data of type Map&lt;String, String&gt;.
  * 
  * @author A. Sundararajan
  */

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -41,7 +41,6 @@
  * When a class is to be transformed all the registered {@linkplain BTraceProbe} instances are
  * asked for the appropriate instrumentation. When there are no registered probes or none of
  * the registered probes is able to instrument the class it will not be transformed.
- * </p>
  *
  * @since 1.3.5
  * @author Jaroslav Bachorik

File: src/share/classes/com/sun/btrace/runtime/ClassCache.java
Patch:
@@ -57,7 +57,6 @@ public ClassInfo get(Class clz) {
      * created and put into the cache.
      * @param cl The associated {@linkplain ClassLoader}
      * @param className The Java class name or internal class name
-     * @return
      */
     public ClassInfo get(ClassLoader cl, String className) {
         return get(cl, new ClassName(className));

File: src/share/classes/com/sun/btrace/runtime/Location.java
Patch:
@@ -32,7 +32,7 @@
  * This class is used to store data of the annotation
  * com.sun.btrace.annotations.Location. We can not read the
  * Location annotation using reflection API [because we strip
- * @OnMethod annotated methods before defineClass]. Instead,
+ * {@code @OnMethod} annotated methods before defineClass]. Instead,
  * we read Location annotation while parsing the BTrace class and
  * store the data in an instance of this class. Please note that
  * the get/set methods have to be in sync with Location annotation.

File: src/share/classes/com/sun/btrace/runtime/OnMethod.java
Patch:
@@ -31,7 +31,7 @@
  * This class is used to store data of the annotation
  * com.sun.btrace.annotations.OnMethod. We can not read the
  * OnMethod annotation using reflection API [because we strip
- * @OnMethod annotated methods before defineClass]. Instead,
+ * {@code @OnMethod} annotated methods before defineClass]. Instead,
  * we read OnMethod annotation while parsing the BTrace class and
  * store the data in an instance of this class. Please note that
  * the get/set methods have to be in sync with OnMethod annotation.

File: src/share/classes/com/sun/btrace/runtime/OnProbe.java
Patch:
@@ -34,7 +34,7 @@
  * This class is used to store data of the annotation
  * com.sun.btrace.annotations.OnProbe. We can not read the
  * OnMethod annotation using reflection API [because we strip
- * @OnProbe annotated methods before defineClass]. Instead,
+ * {@code @OnProbe} annotated methods before defineClass]. Instead,
  * we read OnProbe annotation while parsing the BTrace class and
  * store the data in an instance of this class. Please note that
  * the get/set methods have to be in sync with OnProbe annotation.

File: src/share/classes/com/sun/btrace/spi/BTraceCompilerFactory.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface BTraceCompilerFactory {
     BTraceCompiler newCompiler(BTraceTask task);

File: src/share/classes/com/sun/btrace/spi/BTraceSettingsProvider.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface BTraceSettingsProvider {
     BTraceSettings getSettings();

File: src/share/classes/com/sun/btrace/spi/ClasspathProvider.java
Patch:
@@ -11,7 +11,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface ClasspathProvider {
     public static final ClasspathProvider EMPTY = new ClasspathProvider() {

File: src/share/classes/com/sun/btrace/spi/OutputProvider.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface OutputProvider {
     @SuppressWarnings("DefaultCharset")

File: src/share/classes/com/sun/btrace/spi/PortLocator.java
Patch:
@@ -9,7 +9,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 public interface PortLocator {
     final public static String PORT_PROPERTY = "btrace.port";

File: src/share/classes/com/sun/btrace/spi/impl/BTraceCompilerFactoryImpl.java
Patch:
@@ -12,7 +12,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 final public class BTraceCompilerFactoryImpl implements BTraceCompilerFactory {
     @Override

File: src/share/classes/com/sun/btrace/spi/impl/BTraceSettingsProviderImpl.java
Patch:
@@ -10,7 +10,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 final public class BTraceSettingsProviderImpl implements BTraceSettingsProvider {
     private final BTraceSettings bs = new BTraceSettings() {

File: src/share/classes/com/sun/btrace/spi/impl/PortLocatorImpl.java
Patch:
@@ -16,7 +16,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <yardus@netbeans.org>
+ * @author Jaroslav Bachorik yardus@netbeans.org
  */
 final public class PortLocatorImpl implements PortLocator {
     final private static Logger LOGGER = Logger.getLogger(PortLocator.class.getName());

File: src/share/classes/com/sun/btrace/util/templates/TemplateExpander.java
Patch:
@@ -45,7 +45,6 @@ public static enum Result {
 
     /**
      * A knockoff of the java.util.function.Consumer interface for pre-8 usage
-     * @param <T>
      */
     public static interface Consumer<T> {
         void consume(T visitor);

File: src/test/java/resources/AbstractClass.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 abstract public class AbstractClass {
     protected AbstractClass(List lst) {

File: src/test/java/resources/DerivedClass.java
Patch:
@@ -30,7 +30,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class DerivedClass extends AbstractClass {
     private static volatile String defaultString;

File: src/test/java/resources/issues/BTRACE22.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class BTRACE22 {
     public double testDouble() {

File: src/test/java/resources/issues/BTRACE28.java
Patch:
@@ -27,7 +27,7 @@
 
 /**
  *
- * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
+ * @author Jaroslav Bachorik jaroslav.bachorik@sun.com
  */
 public class BTRACE28 {
     private void serveResource(String param1, String param2) {

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -467,7 +467,7 @@ private static void processClasspaths(String libs) {
                 while (tokenizer.hasMoreTokens()) {
                     String path = tokenizer.nextToken();
                     File f = new File(path);
-                    if (f.exists()) {
+                    if (!f.exists()) {
                         debug.warning("BTrace bootstrap classpath resource [ " + path + "] does not exist");
                     } else {
                         if (f.isFile() && f.getName().toLowerCase().endsWith(".jar")) {

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -467,7 +467,7 @@ private static void processClasspaths(String libs) {
                 while (tokenizer.hasMoreTokens()) {
                     String path = tokenizer.nextToken();
                     File f = new File(path);
-                    if (f.exists()) {
+                    if (!f.exists()) {
                         debug.warning("BTrace bootstrap classpath resource [ " + path + "] does not exist");
                     } else {
                         if (f.isFile() && f.getName().toLowerCase().endsWith(".jar")) {

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -400,6 +400,7 @@ public int idle(int i) {
                     Thread.sleep(500);
                 }
             } catch (InterruptedException e) {
+                return 0;
             }
             return i+1;
         }

File: src/share/classes/com/sun/btrace/agent/FileClient.java
Patch:
@@ -39,9 +39,7 @@
 import java.net.URLDecoder;
 import java.security.CodeSigner;
 import java.util.Arrays;
-import java.util.Deque;
 import java.util.Enumeration;
-import java.util.LinkedList;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;

File: benchmark/src/main/java/net/java/btrace/BTraceBench.java
Patch:
@@ -61,7 +61,6 @@
 import org.openjdk.jmh.runner.Runner;
 import org.openjdk.jmh.runner.options.Options;
 import org.openjdk.jmh.runner.options.OptionsBuilder;
-import scripts.TraceScript;
 
 @State(Scope.Thread)
 @OutputTimeUnit(TimeUnit.MICROSECONDS)
@@ -355,7 +354,7 @@ private static BTraceConfig getConfig() throws IOException {
         Path targetPath = Files.copy(agentPath, tmpDir.resolve("btrace-agent.jar"), StandardCopyOption.REPLACE_EXISTING);
         Files.copy(bootPath, tmpDir.resolve("btrace-boot.jar"), StandardCopyOption.REPLACE_EXISTING);
 
-        URL traceLoc = BTraceBench.class.getResource("/" + TraceScript.class.getName().replace('.', '/') + ".class");
+        URL traceLoc = BTraceBench.class.getResource("/scripts/TraceScript.class");
         String trace = traceLoc.getPath();
 
         return new BTraceConfig(tmpDir, targetPath.toString(), trace);

File: benchmark/src/main/java/net/java/btrace/ProfilerBenchmarks.java
Patch:
@@ -125,7 +125,7 @@ public void testTwoMethods16Threads() {
 
     public static void main(String[] args) throws Exception {
         Options opt = new OptionsBuilder()
-                .addProfiler("perfasm")
+                .addProfiler("stack")
                 .verbosity(VerboseMode.NORMAL)
                 .include(".*" + ProfilerBenchmarks.class.getSimpleName() + ".*test.*")
                 .build();

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -400,6 +400,7 @@ public int idle(int i) {
                     Thread.sleep(500);
                 }
             } catch (InterruptedException e) {
+                return 0;
             }
             return i+1;
         }

File: src/share/classes/com/sun/btrace/agent/FileClient.java
Patch:
@@ -39,9 +39,7 @@
 import java.net.URLDecoder;
 import java.security.CodeSigner;
 import java.util.Arrays;
-import java.util.Deque;
 import java.util.Enumeration;
-import java.util.LinkedList;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;

File: benchmark/src/main/java/net/java/btrace/BTraceBench.java
Patch:
@@ -61,7 +61,6 @@
 import org.openjdk.jmh.runner.Runner;
 import org.openjdk.jmh.runner.options.Options;
 import org.openjdk.jmh.runner.options.OptionsBuilder;
-import scripts.TraceScript;
 
 @State(Scope.Thread)
 @OutputTimeUnit(TimeUnit.MICROSECONDS)
@@ -355,7 +354,7 @@ private static BTraceConfig getConfig() throws IOException {
         Path targetPath = Files.copy(agentPath, tmpDir.resolve("btrace-agent.jar"), StandardCopyOption.REPLACE_EXISTING);
         Files.copy(bootPath, tmpDir.resolve("btrace-boot.jar"), StandardCopyOption.REPLACE_EXISTING);
 
-        URL traceLoc = BTraceBench.class.getResource("/" + TraceScript.class.getName().replace('.', '/') + ".class");
+        URL traceLoc = BTraceBench.class.getResource("/scripts/TraceScript.class");
         String trace = traceLoc.getPath();
 
         return new BTraceConfig(tmpDir, targetPath.toString(), trace);

File: benchmark/src/main/java/net/java/btrace/ProfilerBenchmarks.java
Patch:
@@ -125,7 +125,7 @@ public void testTwoMethods16Threads() {
 
     public static void main(String[] args) throws Exception {
         Options opt = new OptionsBuilder()
-                .addProfiler("perfasm")
+                .addProfiler("stack")
                 .verbosity(VerboseMode.NORMAL)
                 .include(".*" + ProfilerBenchmarks.class.getSimpleName() + ".*test.*")
                 .build();

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -115,7 +115,7 @@ public static void main(String[] args) throws Exception {
         String outputDir = ".";
         String includePath = null;
         boolean trusted = false;
-        boolean generatePack = false;
+        boolean generatePack = true;
         int count = 0;
         boolean classPathDefined = false;
         boolean outputDirDefined = false;
@@ -140,8 +140,8 @@ public static void main(String[] args) throws Exception {
                 } else if ((args[count].equals("-unsafe") || args[count].equals("-trusted")) && !trustedDefined) {
                     trusted = true;
                     trustedDefined = true;
-                } else if (args[count].equals("--pack")) {
-                    generatePack = true;
+                } else if (args[count].equals("-nopack")) {
+                    generatePack = false;
                 } else {
                     usage();
                 }

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -173,6 +173,9 @@ public synchronized byte[] transform(ClassLoader loader, String className, Class
 
         boolean entered = BTraceRuntime.enter();
         try {
+            if (isDebug()) {
+                debug.dumpClass(className.replace('.', '/') + "_orig", classfileBuffer);
+            }
             BTraceClassReader cr = InstrumentUtils.newClassReader(loader, classfileBuffer);
             BTraceClassWriter cw = InstrumentUtils.newClassWriter(cr);
             for(BTraceProbe p : probes) {
@@ -192,7 +195,6 @@ public synchronized byte[] transform(ClassLoader loader, String className, Class
                 }
                 if (debug.isDumpClasses()) {
                     debug.dumpClass(className.replace('.', '/'), transformed);
-                    debug.dumpClass(className.replace('.', '/') + "_orig", classfileBuffer);
                 }
             }
             return transformed;

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -50,8 +50,8 @@ public abstract class Constants {
     public static final String CONSTRUCTOR = "<init>";
     public static final String CLASS_INITIALIZER = "<clinit>";
 
-    public static final Type NULL_TYPE = Type.getType("null");
-    public static final Type TOP_TYPE = Type.getType("top");
+    public static final Type NULL_TYPE = Type.getType("$$null");
+    public static final Type TOP_TYPE = Type.getType("$$top");
 
     public static final Type VOIDREF_TYPE = Type.getType("Ljava/lang/Void;");
 

File: src/test/java/com/sun/btrace/runtime/BTRACE28Test.java
Patch:
@@ -48,6 +48,7 @@ public void bytecodeValidation() throws Exception {
             "FRAME FULL [resources/issues/BTRACE28 java/lang/String java/lang/String java/lang/String java/lang/String [B [B java/lang/StringBuilder] [java/lang/Throwable]\n" +
             "ASTORE 8\n" +
             "ALOAD 8\n" +
+            "FRAME APPEND [T]\n" +
             "LDC \"resources.issues.BTRACE28\"\n" +
             "LDC \"serveResource\"\n" +
             "INVOKESTATIC resources/issues/BTRACE28.$btrace$traces$issues$BTRACE28$tracker (Ljava/lang/String;Ljava/lang/String;)V\n" +

File: src/test/java/com/sun/btrace/runtime/VarRenumberingTest.java
Patch:
@@ -21,6 +21,9 @@ public void bytecodeValidation() throws Exception {
             "ALOAD 1\n" +
             "ALOAD 2\n" +
             "INVOKESTATIC resources/InterestingVarsClass.$btrace$traces$issues$InterestingVarsTest$entry (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n" +
+            "FRAME FULL [java/lang/String java/lang/String java/lang/String java/util/Collection T T] []\n" +
+            "FRAME FULL [java/lang/String java/lang/String java/lang/String java/util/Collection java/lang/StringBuilder java/util/Iterator] []\n" +
+            "FRAME APPEND [T]\n" +
             "\n" +
             "// access flags 0xA\n" +
             "private static $btrace$traces$issues$InterestingVarsTest$entry(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V\n" +

File: src/test/java/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -125,6 +125,8 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethod() throws Exception {
+        debugBTrace = true;
+        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodTest.java",

File: src/share/classes/com/sun/btrace/annotations/Duration.java
Patch:
@@ -34,6 +34,9 @@
  * It is used to mark a probe method argument as the receiver of the duration value<br>
  * Applicable only for {@linkplain OnMethod} annotation with {@linkplain Location} value
  * of {@linkplain Kind#RETURN} or {@linkplain Kind#ERROR}
+ * <p>
+ * The duration is reported in nanoseconds, using resolution available by OS
+ * </p>
  *
  * @author Jaroslav Bachorik <jaroslav.bachorik@sun.com>
  * @since 1.1

File: src/share/classes/com/sun/btrace/runtime/BTraceProbePersisted.java
Patch:
@@ -158,6 +158,7 @@ private void readOnMethods(DataInputStream dis) throws IOException {
             OnMethod om = new OnMethod();
             om.setClazz(dis.readUTF());
             om.setMethod(dis.readUTF());
+            om.setExactTypeMatch(dis.readBoolean());
             om.setTargetDescriptor(dis.readUTF());
             om.setTargetName(dis.readUTF());
             om.setType(dis.readUTF());
@@ -252,6 +253,7 @@ private void writeOnMethods(DataOutputStream dos) throws IOException {
         for (OnMethod om : onMethods) {
             dos.writeUTF(getClazz(om));
             dos.writeUTF(getMethod(om));
+            dos.writeBoolean(om.isExactTypeMatch());
             dos.writeUTF(om.getTargetDescriptor());
             dos.writeUTF(om.getTargetName());
             dos.writeUTF(om.getType());

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -177,7 +177,7 @@ public synchronized byte[] transform(ClassLoader loader, String className, Class
             BTraceClassWriter cw = InstrumentUtils.newClassWriter(cr);
             for(BTraceProbe p : probes) {
                 p.notifyTransform(className);
-                cw.addInstrumentor(p);
+                cw.addInstrumentor(p, loader);
             }
             byte[] transformed = cw.instrument();
             if (transformed == null) {

File: src/share/classes/com/sun/btrace/runtime/instr/ArrayAccessInstrumentor.java
Patch:
@@ -40,9 +40,9 @@
  * @author A. Sundararajan
  */
 public class ArrayAccessInstrumentor extends MethodInstrumentor {
-    public ArrayAccessInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public ArrayAccessInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/ArrayAllocInstrumentor.java
Patch:
@@ -39,9 +39,9 @@
  * @author A. Sundararajan
  */
 public class ArrayAllocInstrumentor extends MethodInstrumentor {
-    public ArrayAllocInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public ArrayAllocInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/CatchInstrumentor.java
Patch:
@@ -43,9 +43,9 @@
 public class CatchInstrumentor extends MethodInstrumentor {
     private Map<Label, String> handlers = new HashMap<Label, String>();
 
-    public CatchInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public CatchInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/ErrorReturnInstrumentor.java
Patch:
@@ -45,9 +45,9 @@ public class ErrorReturnInstrumentor extends MethodReturnInstrumentor {
     private final Label start = new Label();
     private final Label end = new Label();
 
-    public ErrorReturnInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public ErrorReturnInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/FieldAccessInstrumentor.java
Patch:
@@ -40,9 +40,9 @@
 public class FieldAccessInstrumentor extends MethodInstrumentor {
     protected boolean isStaticAccess = false;
 
-    public FieldAccessInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public FieldAccessInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/LineNumberInstrumentor.java
Patch:
@@ -40,9 +40,9 @@
 public class LineNumberInstrumentor extends MethodInstrumentor {
     private int lastLine;
 
-    public LineNumberInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public LineNumberInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/MethodCallInstrumentor.java
Patch:
@@ -39,9 +39,9 @@
 public class MethodCallInstrumentor extends MethodInstrumentor {
     private int callId = 0;
 
-    public MethodCallInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public MethodCallInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/MethodEntryExitInstrumentor.java
Patch:
@@ -36,9 +36,9 @@
  * @author A. Sundararajan
  */
 public class MethodEntryExitInstrumentor extends ErrorReturnInstrumentor {
-    public MethodEntryExitInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public MethodEntryExitInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                        String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/MethodEntryInstrumentor.java
Patch:
@@ -37,9 +37,9 @@
  * @author A. Sundararajan
  */
 public class MethodEntryInstrumentor extends MethodInstrumentor {
-    public MethodEntryInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public MethodEntryInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/MethodReturnInstrumentor.java
Patch:
@@ -38,9 +38,9 @@
  * @author A. Sundararajan
  */
 public class MethodReturnInstrumentor extends MethodEntryInstrumentor {
-    public MethodReturnInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public MethodReturnInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/SynchronizedInstrumentor.java
Patch:
@@ -42,9 +42,9 @@ public class SynchronizedInstrumentor extends MethodEntryExitInstrumentor {
     protected final boolean isStatic;
     protected final boolean isSyncMethod;
 
-    public SynchronizedInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public SynchronizedInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
 
         isStatic = (access & ACC_STATIC) != 0;
         isSyncMethod = (access & ACC_SYNCHRONIZED) != 0;

File: src/share/classes/com/sun/btrace/runtime/instr/ThrowInstrumentor.java
Patch:
@@ -39,9 +39,9 @@
  * @author A. Sundararajan
  */
 public class ThrowInstrumentor extends MethodInstrumentor {
-    public ThrowInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public ThrowInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/instr/TypeCheckInstrumentor.java
Patch:
@@ -38,9 +38,9 @@
  * @author A. Sundararajan
  */
 public class TypeCheckInstrumentor extends MethodInstrumentor {
-    public TypeCheckInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
-        int access, String name, String desc) {
-        super(mv, mHelper, parentClz, superClz, access, name, desc);
+    public TypeCheckInstrumentor(ClassLoader cl, MethodVisitor mv, MethodInstrumentorHelper mHelper,
+                                    String parentClz, String superClz, int access, String name, String desc) {
+        super(cl, mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/BTraceClassWriter.java
Patch:
@@ -26,6 +26,8 @@
 
 import com.sun.btrace.org.objectweb.asm.ClassVisitor;
 import com.sun.btrace.org.objectweb.asm.ClassWriter;
+import com.sun.btrace.org.objectweb.asm.Opcodes;
+
 import java.util.Deque;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
@@ -41,6 +43,7 @@ final class BTraceClassWriter extends ClassWriter {
     private final Deque<Instrumentor> instrumentors = new LinkedList<>();
     private final ClassLoader targetCL;
     private final BTraceClassReader cr;
+    private InstrumentingClassVisitor iClassVisitor = null;
 
     BTraceClassWriter(ClassLoader cl, int flags) {
         super(flags);

File: src/share/classes/com/sun/btrace/runtime/BTraceProbeNode.java
Patch:
@@ -181,7 +181,7 @@ public byte[] getDataHolderBytecode() {
     }
 
     private byte[] getBytecode(boolean onlyBcpMethods) {
-        ClassWriter cw = InstrumentUtils.newClassWriter();
+        ClassWriter cw = InstrumentUtils.newClassWriter(true);
         ClassVisitor cv = cw;
         if (onlyBcpMethods) {
             cv = new ClassVisitor(Opcodes.ASM5, cw) {
@@ -387,7 +387,7 @@ private void initialize(ClassReader cr) {
             if (debug.isDebug()) {
                 debug.debug("verifying BTrace class ...");
             }
-            cr.accept(v, ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG);
+            cr.accept(v, ClassReader.SKIP_DEBUG);
             if (debug.isDebug()) {
                 debug.debug("BTrace class " + getClassName() + " verified");
                 debug.debug("preprocessing BTrace class " + getClassName() + " ...");

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -192,6 +192,7 @@ public synchronized byte[] transform(ClassLoader loader, String className, Class
                 }
                 if (debug.isDumpClasses()) {
                     debug.dumpClass(className.replace('.', '/'), transformed);
+                    debug.dumpClass(className.replace('.', '/') + "_orig", classfileBuffer);
                 }
             }
             return transformed;

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -33,8 +33,6 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.OnProbe;
 import com.sun.btrace.annotations.Where;
-import com.sun.btrace.AnyType;
-import com.sun.btrace.BTraceRuntime;
 import com.sun.btrace.BTraceUtils;
 import com.sun.btrace.annotations.*;
 import com.sun.btrace.org.objectweb.asm.Type;
@@ -52,6 +50,9 @@ public abstract class Constants {
     public static final String CONSTRUCTOR = "<init>";
     public static final String CLASS_INITIALIZER = "<clinit>";
 
+    public static final Type NULL_TYPE = Type.getType("null");
+    public static final Type TOP_TYPE = Type.getType("top");
+
     public static final Type VOIDREF_TYPE = Type.getType("Ljava/lang/Void;");
 
     public static final String OBJECT_INTERNAL = "java/lang/Object";

File: src/share/classes/com/sun/btrace/runtime/instr/LineNumberInstrumentor.java
Patch:
@@ -26,7 +26,7 @@
 package com.sun.btrace.runtime.instr;
 
 import com.sun.btrace.org.objectweb.asm.*;
-import com.sun.btrace.util.LocalVariableHelper;
+import com.sun.btrace.runtime.MethodInstrumentorHelper;
 
 
 /**
@@ -40,9 +40,9 @@
 public class LineNumberInstrumentor extends MethodInstrumentor {
     private int lastLine;
 
-    public LineNumberInstrumentor(LocalVariableHelper mv, String parentClz, String superClz,
+    public LineNumberInstrumentor(MethodVisitor mv, MethodInstrumentorHelper mHelper, String parentClz, String superClz,
         int access, String name, String desc) {
-        super(mv, parentClz, superClz, access, name, desc);
+        super(mv, mHelper, parentClz, superClz, access, name, desc);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/util/templates/BaseTemplateExpander.java
Patch:
@@ -34,7 +34,7 @@
  * @author Jaroslav Bachorik
  */
 abstract public class BaseTemplateExpander implements TemplateExpander {
-    private final Set<Template> supportedTemplates = new HashSet<Template>();
+    private final Set<Template> supportedTemplates = new HashSet<>();
 
     private Template lastTemplate = null;
 

File: src/test/java/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -125,7 +125,6 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethod() throws Exception {
-        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodTest.java",

File: src/test/java/resources/DerivedClass.java
Patch:
@@ -50,7 +50,7 @@ public class DerivedClass extends AbstractClass {
         defaultString = "value4";
     }
     
-    protected DerivedClass() {
+    public DerivedClass() {
         super(new ArrayList());
     }
 

File: src/share/classes/com/sun/btrace/agent/RemoteClient.java
Patch:
@@ -66,6 +66,7 @@ class RemoteClient extends Client {
                         throw new RuntimeException("can not load BTrace class");
                     }
                     hasInstrument = true;
+                    super.initialize();
                     break;
                 }
                 case Command.SET_PARAMS: {

File: src/test/java/resources/OnMethodTest.java
Patch:
@@ -33,13 +33,13 @@
  * !!! Only append the new methods; line numbers need to be kept intact !!!
  * @author Jaroslav Bachorik
  */
-public class OnMethodTest {
+@com.sun.btrace.annotations.BTrace public class OnMethodTest {
     private int field;
 
     public OnMethodTest() {syncLock = new Object();}
     private OnMethodTest(String a) {syncLock = new Object();}
 
-    public void noargs() {};
+    @com.sun.btrace.annotations.Level public void noargs() {};
     static public void noargs$static() {};
     public long args(String a, long b, String[] c, int[] d) {return 0L;}
     static public long args$static(String a, long b, String[] c, int[] d) {return 0L;}

File: src/share/classes/com/sun/btrace/runtime/BTraceMethodNode.java
Patch:
@@ -52,12 +52,12 @@ public int compare(MethodNode o1, MethodNode o2) {
     private OnProbe op;
     private Location loc;
     private boolean sampled;
-    private final BTraceProbe cn;
+    private final BTraceProbeNode cn;
     private boolean isBTraceHandler;
     private final CallGraph graph;
     private final String methodId;
 
-    BTraceMethodNode(MethodNode from, BTraceProbe cn) {
+    BTraceMethodNode(MethodNode from, BTraceProbeNode cn) {
         super(Opcodes.ASM5, from.access, from.name, from.desc, from.signature, ((List<String>)from.exceptions).toArray(new String[0]));
         this.cn = cn;
         this.graph = cn.getGraph();

File: src/share/classes/com/sun/btrace/runtime/CallGraph.java
Patch:
@@ -39,7 +39,7 @@
  * This class allows building an arbitrary graph caller-callee relationship
  * @author Jaroslav Bachorik
  */
-final class CallGraph {
+public final class CallGraph {
     private static final Pattern MID_SPLIT_PTN = Pattern.compile("\\:\\:");
 
     public static class Node {
@@ -158,7 +158,7 @@ public static String[] method(String methodId) {
         }
         return new String[0];
     }
-
+    
     public void addEdge(String fromId, String toId) {
         Node fromNode = null;
         Node toNode = null;

File: src/share/classes/com/sun/btrace/runtime/Verifier.java
Patch:
@@ -49,16 +49,16 @@ public class Verifier extends ClassVisitor {
     private boolean classRenamed;
     private final boolean trustedAllowed;
 
-    private final BTraceProbe cn;
+    private final BTraceProbeNode cn;
 
-    public Verifier(BTraceProbe cv, boolean trusted) {
+    public Verifier(BTraceProbeNode cv, boolean trusted) {
         super(Opcodes.ASM5, cv);
         this.trustedAllowed = trusted;
         this.cn = cv;
     }
 
 
-    public Verifier(BTraceProbe cv) {
+    public Verifier(BTraceProbeNode cv) {
         this(cv, false);
     }
 

File: src/test/java/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -125,6 +125,7 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethod() throws Exception {
+        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodTest.java",
@@ -181,8 +182,6 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethodSubclass() throws Exception {
-        debugBTrace = true;
-        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodSubclassTest.java",

File: src/test/java/com/sun/btrace/compiler/VerifierTest.java
Patch:
@@ -19,7 +19,7 @@ public void setup() {
                         "src" + File.separator + "test";
         classPath = System.getProperty("user.dir") + File.separator +
                         "build" + File.separator + "classes" + File.separator +
-                        "main";
+                        "java" + File.separator + "main";
     }
 
     @Test

File: src/test/java/com/sun/btrace/runtime/BTRACE189Test.java
Patch:
@@ -64,7 +64,6 @@ public void annotatedClass() throws Exception {
             "RETURN\n" +
             "MAXSTACK = 1\n" +
             "MAXLOCALS = 0\n" +
-            "\n" +
             "TRYCATCHBLOCK L0 L1 L1 java/lang/Throwable\n" +
             "GETSTATIC traces/issues/BTRACE189.runtime : Lcom/sun/btrace/BTraceRuntime;\n" +
             "INVOKESTATIC com/sun/btrace/BTraceRuntime.enter (Lcom/sun/btrace/BTraceRuntime;)Z\n" +

File: src/test/java/services/DummyRuntimService.java
Patch:
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package resources.services;
+package services;
 
 import com.sun.btrace.BTraceRuntime;
 import com.sun.btrace.services.spi.RuntimeService;

File: src/test/java/services/DummySimpleService.java
Patch:
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package resources.services;
+package services;
 
 import com.sun.btrace.services.spi.SimpleService;
 

File: src/test/traces/ServicesTest.java
Patch:
@@ -25,14 +25,14 @@
 
 package traces;
 
-import resources.services.DummyRuntimService;
+import services.DummyRuntimService;
 import com.sun.btrace.annotations.BTrace;
 import com.sun.btrace.annotations.Injected;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.ProbeClassName;
 import com.sun.btrace.annotations.ServiceType;
 import com.sun.btrace.services.api.Service;
-import resources.services.DummySimpleService;
+import services.DummySimpleService;
 
 /**
  * Sanity test to make sure the injected services are properly initialized

File: src/test/traces/onmethod/SyncEntry.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -41,7 +42,7 @@
 public class SyncEntry {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_ENTRY))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, Object lock) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @TargetInstance Object lock) {
         println("args");
     }
 }

File: src/test/traces/onmethod/SyncExit.java
Patch:
@@ -40,7 +40,7 @@
  */
 @BTrace
 public class SyncExit {
-    @OnMethod(clazz="/.*\\.OnMethodTest/", method="/sync.*/",
+    @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_EXIT))
     public static void args(@Self Object self, @ProbeClassName String pcn, @TargetInstance Object lock) {
         println("args");

File: src/test/traces/onmethod/leveled/SyncEntry.java
Patch:
@@ -32,7 +32,7 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
-import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.*;
 
 /**
  *
@@ -42,7 +42,7 @@
 public class SyncEntry {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_ENTRY), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, Object lock) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @TargetInstance Object lock) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/SyncExit.java
Patch:
@@ -25,15 +25,14 @@
 
 package traces.onmethod.leveled;
 
-import traces.onmethod.*;
 import com.sun.btrace.annotations.BTrace;
 import com.sun.btrace.annotations.Kind;
 import com.sun.btrace.annotations.Location;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.ProbeClassName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
-import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.*;
 
 /**
  *
@@ -43,7 +42,7 @@
 public class SyncExit {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_EXIT), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeClassName String pcn, Object lock) {
+    public static void args(@Self Object self, @ProbeClassName String pcn, @TargetInstance Object lock) {
         println("args");
     }
 }

File: src/test/traces/onmethod/SyncEntry.java
Patch:
@@ -32,16 +32,17 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
  * @author Jaroslav Bachorik
  */
 @BTrace
 public class SyncEntry {
-    @OnMethod(clazz="/.*\\.OnMethodTest/", method="/sync.*/",
+    @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_ENTRY))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, Object lock) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @TargetInstance Object lock) {
         println("args");
     }
 }

File: src/test/traces/onmethod/SyncExit.java
Patch:
@@ -40,7 +40,7 @@
  */
 @BTrace
 public class SyncExit {
-    @OnMethod(clazz="/.*\\.OnMethodTest/", method="/sync.*/",
+    @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_EXIT))
     public static void args(@Self Object self, @ProbeClassName String pcn, @TargetInstance Object lock) {
         println("args");

File: src/test/traces/onmethod/leveled/SyncEntry.java
Patch:
@@ -32,7 +32,7 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
-import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.*;
 
 /**
  *
@@ -42,7 +42,7 @@
 public class SyncEntry {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_ENTRY), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeMethodName String pmn, Object lock) {
+    public static void args(@Self Object self, @ProbeMethodName String pmn, @TargetInstance Object lock) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/SyncExit.java
Patch:
@@ -25,15 +25,14 @@
 
 package traces.onmethod.leveled;
 
-import traces.onmethod.*;
 import com.sun.btrace.annotations.BTrace;
 import com.sun.btrace.annotations.Kind;
 import com.sun.btrace.annotations.Location;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.ProbeClassName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
-import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.*;
 
 /**
  *
@@ -43,7 +42,7 @@
 public class SyncExit {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
               location=@Location(value=Kind.SYNC_EXIT), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @ProbeClassName String pcn, Object lock) {
+    public static void args(@Self Object self, @ProbeClassName String pcn, @TargetInstance Object lock) {
         println("args");
     }
 }

File: samples/JdbcQueries.java
Patch:
@@ -112,7 +112,7 @@ public static void onPrepareReturn(@Return Statement preparedStatement) {
     public static void onExecute(@Self Object currentStatement, AnyType[] args) {
         if (args.length == 0) {
             // No SQL argument; lookup the SQL from the prepared statement
-            executingStatement = Collections.get(preparedStatementDescriptions, currentStatement);
+            executingStatement = Collections.get(preparedStatementDescriptions, (Statement) currentStatement);
         } else {
             // Direct SQL in the first argument
             executingStatement = useStackTrace ? Threads.jstackStr() : str(args[0]);

File: src/test/traces/onmethod/SyncEntry.java
Patch:
@@ -39,7 +39,7 @@
  */
 @BTrace
 public class SyncEntry {
-    @OnMethod(clazz="/.*\\.OnMethodTest/", method="sync",
+    @OnMethod(clazz="/.*\\.OnMethodTest/", method="/sync.*/",
               location=@Location(value=Kind.SYNC_ENTRY))
     public static void args(@Self Object self, @ProbeMethodName String pmn, Object lock) {
         println("args");

File: src/test/com/sun/btrace/runtime/InstrumentorTest.java
Patch:
@@ -1344,7 +1344,6 @@ public void methodEntryFieldStaticGetAfter() throws Exception {
             "L2\n" +
             "L3\n" +
             "LINENUMBER 144 L3\n" +
-            "RETURN\n" +
             "L4\n" +
             "LOCALVARIABLE this Lresources/OnMethodTest; L0 L4 0\n" +
             "MAXSTACK = 7\n" +
@@ -1439,7 +1438,6 @@ public void methodEntryFieldStaticSetBefore() throws Exception {
             "L1\n" +
             "L2\n" +
             "LINENUMBER 144 L2\n" +
-            "RETURN\n" +
             "L3\n" +
             "LOCALVARIABLE this Lresources/OnMethodTest; L0 L3 0\n" +
             "MAXSTACK = 7\n" +
@@ -1533,7 +1531,6 @@ public void methodEntryFieldStaticSetAfter() throws Exception {
             "INVOKESTATIC resources/OnMethodTest.$btrace$traces$onmethod$leveled$FieldSetAfterStatic$args (Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/String;J)V\n" +
             "L2\n" +
             "LINENUMBER 144 L2\n" +
-            "RETURN\n" +
             "L3\n" +
             "LOCALVARIABLE this Lresources/OnMethodTest; L0 L3 0\n" +
             "MAXSTACK = 5\n" +

File: src/test/com/sun/btrace/util/PrefixMapTest.java
Patch:
@@ -25,10 +25,10 @@
 import org.junit.Test;
 import static org.junit.Assert.*;
 
-public class PrerfixMapTest {
+public class PrefixMapTest {
     private PrefixMap instance;
 
-    public PrerfixMapTest() {
+    public PrefixMapTest() {
     }
 
     @Before

File: src/share/classes/com/sun/btrace/runtime/BTraceClassWriter.java
Patch:
@@ -97,7 +97,7 @@ protected String getCommonSuperClass(String type1, String type2) {
             String common = iter.next();
             return common;
         }
-        return Constants.JAVA_LANG_OBJECT;
+        return Constants.OBJECT_INTERNAL;
     }
 
 }

File: src/share/classes/com/sun/btrace/runtime/InstrumentUtils.java
Patch:
@@ -29,11 +29,11 @@
 import com.sun.btrace.org.objectweb.asm.ClassVisitor;
 import com.sun.btrace.org.objectweb.asm.ClassWriter;
 import static com.sun.btrace.org.objectweb.asm.Opcodes.*;
-import static com.sun.btrace.runtime.Constants.JAVA_LANG_OBJECT;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.LinkedHashSet;
 import java.util.Set;
+import static com.sun.btrace.runtime.Constants.OBJECT_INTERNAL;
 
 /**
  * @author A. Sundararajan
@@ -51,7 +51,7 @@ public final class InstrumentUtils {
     */
     public static void collectHierarchyClosure(ClassLoader cl, String type,
                                                Set<String> closure, boolean useInternal) {
-        if (type == null || type.equals(JAVA_LANG_OBJECT)) {
+        if (type == null || type.equals(OBJECT_INTERNAL)) {
            return;
         }
         ClassInfo ci = ClassCache.getInstance().get(cl, type);
@@ -61,7 +61,7 @@ public static void collectHierarchyClosure(ClassLoader cl, String type,
         // add self
         ciSet.add(ci);
         for(ClassInfo sci : ci.getSupertypes(false)) {
-            if (!sci.isInterface() && !sci.getClassName().equals(JAVA_LANG_OBJECT)) {
+            if (!sci.isInterface() && !sci.getClassName().equals(OBJECT_INTERNAL)) {
                 ciSet.add(sci);
             }
         }

File: src/share/classes/com/sun/btrace/runtime/MethodVerifier.java
Patch:
@@ -199,7 +199,7 @@ public void visitMethodInsn(int opcode, String owner,
                 Verifier.reportError("no.method.calls", owner + "." + name + desc);
                 break;
             case INVOKESPECIAL:
-                if (owner.equals(JAVA_LANG_OBJECT) && name.equals(CONSTRUCTOR)) {
+                if (owner.equals(OBJECT_INTERNAL) && name.equals(CONSTRUCTOR)) {
                     // allow object initializer
                 } else if (owner.equals(Type.getInternalName(StringBuilder.class))) {
                     // allow string concatenation via StringBuilder

File: src/share/classes/com/sun/btrace/runtime/Verifier.java
Patch:
@@ -92,7 +92,7 @@ public void visit(int version, int access, String name,
                 reportSafetyError("class.should.be.public", name);
             }
 
-            if (! superName.equals(JAVA_LANG_OBJECT)) {
+            if (! superName.equals(OBJECT_INTERNAL)) {
                 reportSafetyError("object.superclass.required", superName);
             }
             if (interfaces != null && interfaces.length > 0) {

File: src/share/classes/com/sun/btrace/runtime/instr/ErrorReturnInstrumentor.java
Patch:
@@ -58,7 +58,7 @@ protected void visitMethodPrologue() {
     @Override
     public void visitMaxs(int maxStack, int maxLocals) {
         visitLabel(end);
-        visitTryCatchBlock(start, end, end, JAVA_LANG_THROWABLE);
+        visitTryCatchBlock(start, end, end, THROWABLE_INTERNAL);
         onErrorReturn();
         visitInsn(ATHROW);
         super.visitMaxs(maxStack, maxLocals);

File: src/share/classes/com/sun/btrace/api/impl/BTraceEngineImpl.java
Patch:
@@ -234,7 +234,7 @@ public void run() {
                     BTraceSettings settings = settingsProvider.getSettings();
                     final Client client = new Client(
                         port, null, ".", settings.isDebugMode(), true,
-                        btrace.isUnsafe(), settings.isDumpClasses(),
+                        btrace.isTrusted(), settings.isDumpClasses(),
                         settings.getDumpClassPath(),
                         settings.getStatsd()
                     );

File: src/share/classes/com/sun/btrace/comm/SetSettingsCommand.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * This command is used to remotely set custom settings
- * (unsafe mode, debug, etc.)
+ * (trusted mode, debug, etc.)
  *
  * @author Jaroslav Bachorik
  */

File: src/test/com/sun/btrace/runtime/InstrumentorTestBase.java
Patch:
@@ -186,7 +186,7 @@ protected void transform(String traceName) throws IOException {
     }
 
     protected void transform(String traceName, boolean unsafe) throws IOException {
-        settings.setUnsafe(unsafe);
+        settings.setTrusted(unsafe);
         BTraceClassReader cr = InstrumentUtils.newClassReader(cl, originalBC);
         BTraceClassWriter cw = InstrumentUtils.newClassWriter(cr);
         BTraceProbe btrace = loadTrace(traceName, unsafe);

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -195,7 +195,8 @@ public AnnotationVisitor visitAnnotation(String annoDesc,
                         }
                     }
                 }
-                return ((MethodVisitor)visitor).visitAnnotation(annoDesc, visible);
+                mv = (MethodVisitor)visitor;
+                return mv.visitAnnotation(annoDesc, visible);
             }
         };
     }

File: src/test/resources/issues/BTRACE106.java
Patch:
@@ -34,6 +34,7 @@ private void aMethod() {
         System.out.println("A Method");
     }
 
+    @Deprecated
     private void bMethod() {
         System.out.println("B Method");
     }

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -135,7 +135,9 @@ private static final class RTWrapper {
        private BTraceRuntime rt = null;
 
         boolean set(BTraceRuntime other) {
-            if (rt != null && other != null) return false;
+            if (rt != null && other != null) {
+                return false;
+            }
             rt = other;
             return true;
         }

File: src/share/classes/com/sun/btrace/runtime/Verifier.java
Patch:
@@ -127,7 +127,7 @@ public void visit(String name, Object value) {
     @Override
     public FieldVisitor	visitField(int access, final String name,
             String desc, String signature, Object value) {
-        if (! seenBTrace) {
+        if (!seenBTrace) {
             reportSafetyError("not.a.btrace.program");
         }
         if (!cn.isUnsafe()) {
@@ -152,7 +152,7 @@ public void visitInnerClass(String name, String outerName,
     public MethodVisitor visitMethod(final int access, final String methodName,
             final String methodDesc, String signature, String[] exceptions) {
 
-        if (! seenBTrace) {
+        if (!seenBTrace) {
             reportSafetyError("not.a.btrace.program");
         }
 

File: src/share/classes/com/sun/btrace/services/impl/Statsd.java
Patch:
@@ -41,7 +41,6 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
-import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * A simple way to submit <a href="https://github.com/etsy/statsd/">statsd</a> metrics.

File: src/share/classes/com/sun/btrace/aggregation/Quantize.java
Patch:
@@ -72,10 +72,10 @@ public void add(long data) {
      * @param the
      *            value for which to calculate the log, must be positive
      */
-    private static int logBase2(long value) {
+    static int logBase2(long value) {
         int pos = 0;
-        for (int off = ZERO_INDEX; off > 0; off >>= 1) {
-            if (value >= 1 << off) {
+        for (int off = (ZERO_INDEX >> 1); off > 0; off >>= 1) {
+            if (value >= 1L << off) {
                 value >>= off;
                 pos += off;
             }

File: src/share/classes/com/sun/btrace/runtime/BTraceClassReader.java
Patch:
@@ -134,7 +134,7 @@ public String[] readClassSupers() {
     }
 
     public boolean isInterface() {
-        return (getAccess() & Opcodes.ACC_STATIC) != 0;
+        return (getAccess() & Opcodes.ACC_INTERFACE) != 0;
     }
 
     public boolean isBTrace() {

File: src/share/classes/com/sun/btrace/runtime/BTraceClassWriter.java
Patch:
@@ -86,10 +86,12 @@ protected String getCommonSuperClass(String type1, String type2) {
         InstrumentUtils.collectHierarchyClosure(targetCL, type2, type2Closure, true);
         // basically, do intersection
         type1Closure.retainAll(type2Closure);
+
         // if the intersection is not empty the first element is the closest common ancestor
         Iterator<String> iter = type1Closure.iterator();
         if (iter.hasNext()) {
-            return iter.next();
+            String common = iter.next();
+            return common;
         }
         return Constants.JAVA_LANG_OBJECT;
     }

File: src/test/com/sun/btrace/runtime/BTRACE106Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/BTRACE189Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/BTRACE22Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/BTRACE28Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/BTRACE53Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/BTRACE69Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/BTRACE87Test.java
Patch:
@@ -25,7 +25,6 @@
 
 package com.sun.btrace.runtime;
 
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/InstrumentorTest.java
Patch:
@@ -27,7 +27,6 @@
 import com.sun.btrace.instr.RandomIntProvider;
 import java.lang.reflect.Field;
 import org.junit.BeforeClass;
-import support.InstrumentorTestBase;
 import org.junit.Test;
 
 /**

File: src/test/com/sun/btrace/runtime/StackTrackingMethodVisitorTest.java
Patch:
@@ -34,7 +34,6 @@
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
-import support.InstrumentorTestBase;
 
 /**
  *

File: src/share/classes/com/sun/btrace/runtime/StackTrackingMethodVisitor.java
Patch:
@@ -416,12 +416,12 @@ public void reset() {
     public StackTrackingMethodVisitor(MethodVisitor mv, String className, String desc, boolean isStatic) {
         super(Opcodes.ASM5, mv);
         Type[] args = Type.getArgumentTypes(desc);
-        state = new State(isStatic ? null : new InstanceItem(Type.getType(className)), args);
+        state = new State(isStatic ? null : new InstanceItem(Type.getObjectType(className)), args);
     }
 
     @Override
     public void visitMultiANewArrayInsn(String string, int i) {
-        super.visitMultiANewArrayInsn(string, i); //To change body of generated methods, choose Tools | Templates.
+        super.visitMultiANewArrayInsn(string, i);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/BTraceUtils.java
Patch:
@@ -876,6 +876,7 @@ public static Object deref(Reference ref) {
      * probed (or traced) class.
      * @deprecated Since 1.1. Use {@linkplain ProbeClassName} and {@linkplain Self} annotations instead
      */
+    @Deprecated
     public static Class probeClass() {
         return Reflection.getCallerClass(STACK_DEC);
     }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -324,7 +324,7 @@ private static void parseArgs() {
                 try {
                     settings.setStatsdPort(Integer.parseInt(parts[1].trim()));
                 } catch (NumberFormatException e) {
-                    debug.warning("Invalid statsd port number: " + parts[1]);
+                    DebugSupport.warning("Invalid statsd port number: " + parts[1]);
                     // leave the port unconfigured
                 }
             } else if (parts.length == 1) {

File: src/share/classes/com/sun/btrace/annotations/Location.java
Patch:
@@ -49,7 +49,7 @@
     /**
      * Specifies where do want to probe with
      * respect to the location of interest.
-     * 
+     *
      * @see Where
      */
     Where where() default Where.BEFORE;
@@ -78,7 +78,7 @@
     /**
      * Specifies field or method type for
      * certain kind of probe locations. The type
-     * is specified like in Java source - except 
+     * is specified like in Java source - except
      * the method or field name and parameter names
      * are not included.
      */

File: src/share/classes/com/sun/btrace/compiler/Postprocessor.java
Patch:
@@ -499,7 +499,7 @@ public void visitJumpInsn(int opcode, Label label) {
         }
 
         @Override
-        public void visitTableSwitchInsn(int i, int i1, Label label, Label[] labels) {
+        public void visitTableSwitchInsn(int i, int i1, Label label, Label ...labels) {
             simulatedStack.poll();
             if (copyEnabled) {
                 super.visitTableSwitchInsn(i, i1, label, labels);

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -510,6 +510,9 @@ private boolean checkSampling(MethodTree node) {
                 case CALL: {
                     return true;
                 }
+                default: {
+                    // noop
+                }
             }
             reportError("sampler.invalid.location", node);
             return false;

File: src/share/classes/com/sun/btrace/runtime/StackTrackingMethodVisitor.java
Patch:
@@ -719,13 +719,13 @@ public void visitInsn(int opcode) {
                 break;
             }
             case Opcodes.LCONST_0: {
-                StackItem si = new ConstantItem(0l);
+                StackItem si = new ConstantItem(0L);
                 state.push(si);
                 state.push(si);
                 break;
             }
             case Opcodes.LCONST_1: {
-                StackItem si = new ConstantItem(1l);
+                StackItem si = new ConstantItem(1L);
                 state.push(si);
                 state.push(si);
                 break;

File: src/share/classes/com/sun/btrace/runtime/StackTrackingMethodVisitor.java
Patch:
@@ -416,12 +416,12 @@ public void reset() {
     public StackTrackingMethodVisitor(MethodVisitor mv, String className, String desc, boolean isStatic) {
         super(Opcodes.ASM5, mv);
         Type[] args = Type.getArgumentTypes(desc);
-        state = new State(isStatic ? null : new InstanceItem(Type.getType(className)), args);
+        state = new State(isStatic ? null : new InstanceItem(Type.getObjectType(className)), args);
     }
 
     @Override
     public void visitMultiANewArrayInsn(String string, int i) {
-        super.visitMultiANewArrayInsn(string, i); //To change body of generated methods, choose Tools | Templates.
+        super.visitMultiANewArrayInsn(string, i);
     }
 
     @Override

File: src/share/classes/com/sun/btrace/BTraceUtils.java
Patch:
@@ -876,6 +876,7 @@ public static Object deref(Reference ref) {
      * probed (or traced) class.
      * @deprecated Since 1.1. Use {@linkplain ProbeClassName} and {@linkplain Self} annotations instead
      */
+    @Deprecated
     public static Class probeClass() {
         return Reflection.getCallerClass(STACK_DEC);
     }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -324,7 +324,7 @@ private static void parseArgs() {
                 try {
                     settings.setStatsdPort(Integer.parseInt(parts[1].trim()));
                 } catch (NumberFormatException e) {
-                    debug.warning("Invalid statsd port number: " + parts[1]);
+                    DebugSupport.warning("Invalid statsd port number: " + parts[1]);
                     // leave the port unconfigured
                 }
             } else if (parts.length == 1) {

File: src/share/classes/com/sun/btrace/annotations/Location.java
Patch:
@@ -49,7 +49,7 @@
     /**
      * Specifies where do want to probe with
      * respect to the location of interest.
-     * 
+     *
      * @see Where
      */
     Where where() default Where.BEFORE;
@@ -78,7 +78,7 @@
     /**
      * Specifies field or method type for
      * certain kind of probe locations. The type
-     * is specified like in Java source - except 
+     * is specified like in Java source - except
      * the method or field name and parameter names
      * are not included.
      */

File: src/share/classes/com/sun/btrace/compiler/Postprocessor.java
Patch:
@@ -499,7 +499,7 @@ public void visitJumpInsn(int opcode, Label label) {
         }
 
         @Override
-        public void visitTableSwitchInsn(int i, int i1, Label label, Label[] labels) {
+        public void visitTableSwitchInsn(int i, int i1, Label label, Label ...labels) {
             simulatedStack.poll();
             if (copyEnabled) {
                 super.visitTableSwitchInsn(i, i1, label, labels);

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -510,6 +510,9 @@ private boolean checkSampling(MethodTree node) {
                 case CALL: {
                     return true;
                 }
+                default: {
+                    // noop
+                }
             }
             reportError("sampler.invalid.location", node);
             return false;

File: src/share/classes/com/sun/btrace/runtime/StackTrackingMethodVisitor.java
Patch:
@@ -719,13 +719,13 @@ public void visitInsn(int opcode) {
                 break;
             }
             case Opcodes.LCONST_0: {
-                StackItem si = new ConstantItem(0l);
+                StackItem si = new ConstantItem(0L);
                 state.push(si);
                 state.push(si);
                 break;
             }
             case Opcodes.LCONST_1: {
-                StackItem si = new ConstantItem(1l);
+                StackItem si = new ConstantItem(1L);
                 state.push(si);
                 state.push(si);
                 break;

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -300,10 +300,11 @@ private Map<String, byte[]> compile(MemoryJavaFileManager manager,
 
     private void printDiagnostic(Diagnostic diagnostic, final PrintWriter perr) {
         FileObject fo = (FileObject)diagnostic.getSource();
-        String fname = fo.getName();
+        String fname = fo != null ? fo.getName() : "<null>";
         String[] lines = null;
         try {
-            lines = fo.getCharContent(true).toString().split("\\n");
+            CharSequence charContent = fo != null ? fo.getCharContent(true) : null;
+            lines = charContent != null ? charContent.toString().split("\\n") : null;
         } catch (IOException e) {
 
         }

File: src/share/classes/com/sun/btrace/services/impl/Statsd.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * A simple way to submit <a href="https://github.com/etsy/statsd/">statsd</a> metrics.

File: src/test/com/sun/btrace/runtime/InstrumentorTest.java
Patch:
@@ -1516,7 +1516,7 @@ public void methodEntryFieldStaticSetAfter() throws Exception {
         transform("onmethod/leveled/FieldSetAfterStatic");
 
         checkTransformation(
-            "\"LSTORE 1\n" +
+            "LSTORE 1\n" +
             "LLOAD 1\n" +
             "GETSTATIC traces/onmethod/leveled/FieldSetAfterStatic.$btrace$$level : I\n" +
             "ICONST_1\n" +

File: src/test/com/sun/btrace/runtime/InstrumentorTest.java
Patch:
@@ -1516,7 +1516,7 @@ public void methodEntryFieldStaticSetAfter() throws Exception {
         transform("onmethod/leveled/FieldSetAfterStatic");
 
         checkTransformation(
-            "LSTORE 1\n" +
+            "\"LSTORE 1\n" +
             "LLOAD 1\n" +
             "GETSTATIC traces/onmethod/leveled/FieldSetAfterStatic.$btrace$$level : I\n" +
             "ICONST_1\n" +

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -121,8 +121,6 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethod() throws Exception {
-        debugBTrace = true;
-        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodTest.java",

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -290,7 +290,6 @@ private static void parseArgs() {
                 fileRollMilliseconds = null;
             }
             if (fileRollMilliseconds != null) {
-                debugPrint("fileRollMilliseconds is " + settings.isUnsafe());
                 settings.setFileRollMilliseconds(fileRollMilliseconds.intValue());
                 if (isDebug()) {
                     debugPrint("fileRollMilliseconds is " + fileRollMilliseconds);

File: src/share/classes/com/sun/btrace/agent/TraceOutputWriter.java
Patch:
@@ -149,7 +149,7 @@ private void nextWriter() {
         private FileWriter getNextWriter() throws IOException {
         	currentFileWriter.close();
         	File scriptOutputFile_renameFrom = new File(path + File.separator + baseName);
-        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName.substring(0, baseName.indexOf("-")) + ".btrace." + (counter++));
+        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName + "." + (counter++));
 
             if (scriptOutputFile_renameTo.exists()) {
             	scriptOutputFile_renameTo.delete();

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -131,7 +131,7 @@ protected final void setupWriter() {
             if (outputFile.equals("::stdout")) {
                 out = new PrintWriter(System.out);
             } else {
-                if (SharedSettings.GLOBAL.getFileRollMilliseconds() > 0) {
+                if (settings.getFileRollMilliseconds() > 0) {
                     out = new PrintWriter(new BufferedWriter(
                         TraceOutputWriter.rollingFileWriter(new File(outputFile), settings)
                     ));

File: src/share/classes/com/sun/btrace/agent/TraceOutputWriter.java
Patch:
@@ -149,7 +149,7 @@ private void nextWriter() {
         private FileWriter getNextWriter() throws IOException {
         	currentFileWriter.close();
         	File scriptOutputFile_renameFrom = new File(path + File.separator + baseName);
-        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName + "." + (counter++));
+        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName.substring(0, baseName.indexOf("-")) + ".btrace." + (counter++));
 
             if (scriptOutputFile_renameTo.exists()) {
             	scriptOutputFile_renameTo.delete();
@@ -210,7 +210,7 @@ public static TraceOutputWriter fileWriter(File output, SharedSettings settings)
     public static TraceOutputWriter rollingFileWriter(File output, SharedSettings settings) {
         TraceOutputWriter instance = null;
         try {
-            instance = new TimeBasedRollingFileWriter(null, settings);
+            instance = new TimeBasedRollingFileWriter(output, settings);
         } catch (IOException e) {
             // ignore
         }

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -300,10 +300,11 @@ private Map<String, byte[]> compile(MemoryJavaFileManager manager,
 
     private void printDiagnostic(Diagnostic diagnostic, final PrintWriter perr) {
         FileObject fo = (FileObject)diagnostic.getSource();
-        String fname = fo.getName();
+        String fname = fo != null ? fo.getName() : "<null>";
         String[] lines = null;
         try {
-            lines = fo.getCharContent(true).toString().split("\\n");
+            CharSequence charContent = fo != null ? fo.getCharContent(true) : null;
+            lines = charContent != null ? charContent.toString().split("\\n") : null;
         } catch (IOException e) {
 
         }

File: src/share/classes/com/sun/btrace/services/impl/Statsd.java
Patch:
@@ -41,6 +41,7 @@
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicLong;
 
 /**
  * A simple way to submit <a href="https://github.com/etsy/statsd/">statsd</a> metrics.

File: src/test/com/sun/btrace/runtime/InstrumentorTest.java
Patch:
@@ -1516,7 +1516,7 @@ public void methodEntryFieldStaticSetAfter() throws Exception {
         transform("onmethod/leveled/FieldSetAfterStatic");
 
         checkTransformation(
-            "\"LSTORE 1\n" +
+            "LSTORE 1\n" +
             "LLOAD 1\n" +
             "GETSTATIC traces/onmethod/leveled/FieldSetAfterStatic.$btrace$$level : I\n" +
             "ICONST_1\n" +

File: src/test/com/sun/btrace/runtime/InstrumentorTest.java
Patch:
@@ -1516,7 +1516,7 @@ public void methodEntryFieldStaticSetAfter() throws Exception {
         transform("onmethod/leveled/FieldSetAfterStatic");
 
         checkTransformation(
-            "LSTORE 1\n" +
+            "\"LSTORE 1\n" +
             "LLOAD 1\n" +
             "GETSTATIC traces/onmethod/leveled/FieldSetAfterStatic.$btrace$$level : I\n" +
             "ICONST_1\n" +

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -121,8 +121,6 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethod() throws Exception {
-        debugBTrace = true;
-        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodTest.java",

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -131,7 +131,7 @@ protected final void setupWriter() {
             if (outputFile.equals("::stdout")) {
                 out = new PrintWriter(System.out);
             } else {
-                if (SharedSettings.GLOBAL.getFileRollMilliseconds() > 0) {
+                if (settings.getFileRollMilliseconds() > 0) {
                     out = new PrintWriter(new BufferedWriter(
                         TraceOutputWriter.rollingFileWriter(new File(outputFile), settings)
                     ));

File: src/share/classes/com/sun/btrace/agent/TraceOutputWriter.java
Patch:
@@ -210,7 +210,7 @@ public static TraceOutputWriter fileWriter(File output, SharedSettings settings)
     public static TraceOutputWriter rollingFileWriter(File output, SharedSettings settings) {
         TraceOutputWriter instance = null;
         try {
-            instance = new TimeBasedRollingFileWriter(null, settings);
+            instance = new TimeBasedRollingFileWriter(output, settings);
         } catch (IOException e) {
             // ignore
         }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -290,7 +290,6 @@ private static void parseArgs() {
                 fileRollMilliseconds = null;
             }
             if (fileRollMilliseconds != null) {
-                debugPrint("fileRollMilliseconds is " + settings.isUnsafe());
                 settings.setFileRollMilliseconds(fileRollMilliseconds.intValue());
                 if (isDebug()) {
                     debugPrint("fileRollMilliseconds is " + fileRollMilliseconds);

File: src/share/classes/com/sun/btrace/agent/TraceOutputWriter.java
Patch:
@@ -149,7 +149,7 @@ private void nextWriter() {
         private FileWriter getNextWriter() throws IOException {
         	currentFileWriter.close();
         	File scriptOutputFile_renameFrom = new File(path + File.separator + baseName);
-        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName.substring(0, baseName.indexOf("-")) + ".btrace." + (counter++));
+        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName + "." + (counter++));
 
             if (scriptOutputFile_renameTo.exists()) {
             	scriptOutputFile_renameTo.delete();

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -131,7 +131,7 @@ protected final void setupWriter() {
             if (outputFile.equals("::stdout")) {
                 out = new PrintWriter(System.out);
             } else {
-                if (SharedSettings.GLOBAL.getFileRollMilliseconds() > 0) {
+                if (settings.getFileRollMilliseconds() > 0) {
                     out = new PrintWriter(new BufferedWriter(
                         TraceOutputWriter.rollingFileWriter(new File(outputFile), settings)
                     ));

File: src/share/classes/com/sun/btrace/agent/TraceOutputWriter.java
Patch:
@@ -149,7 +149,7 @@ private void nextWriter() {
         private FileWriter getNextWriter() throws IOException {
         	currentFileWriter.close();
         	File scriptOutputFile_renameFrom = new File(path + File.separator + baseName);
-        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName + "." + (counter++));
+        	File scriptOutputFile_renameTo = new File(path + File.separator + baseName.substring(0, baseName.indexOf("-")) + ".btrace." + (counter++));
 
             if (scriptOutputFile_renameTo.exists()) {
             	scriptOutputFile_renameTo.delete();
@@ -210,7 +210,7 @@ public static TraceOutputWriter fileWriter(File output, SharedSettings settings)
     public static TraceOutputWriter rollingFileWriter(File output, SharedSettings settings) {
         TraceOutputWriter instance = null;
         try {
-            instance = new TimeBasedRollingFileWriter(null, settings);
+            instance = new TimeBasedRollingFileWriter(output, settings);
         } catch (IOException e) {
             // ignore
         }

File: src/share/classes/com/sun/btrace/agent/FileClient.java
Patch:
@@ -85,7 +85,7 @@ public void onCommand(Command cmd) throws IOException {
 
     private static byte[] readAll(File file) throws IOException {
         String path = file.getPath();
-        if (path.startsWith(Constants.EMBEDDED_SCRIPT_HEADER)) {
+        if (path.startsWith(Constants.EMBEDDED_BTRACE_SECTION_HEADER)) {
             try (InputStream is = ClassLoader.getSystemResourceAsStream(path)) {
                 return readAll(is, -1);
             }

File: src/share/classes/com/sun/btrace/runtime/BTraceProbe.java
Patch:
@@ -47,10 +47,9 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.regex.Pattern;
-import static com.sun.btrace.runtime.ClassFilter.isSubTypeOf;
 import java.util.Collections;
 import java.util.Iterator;
-import java.util.LinkedList;
+import static com.sun.btrace.runtime.ClassFilter.isSubTypeOf;
 
 /**
  *
@@ -180,7 +179,7 @@ public Collection<OnMethod> getApplicableHandlers(BTraceClassReader cr) {
         }
         return applicables;
     }
-    
+
     public Iterable<OnMethod> onmethods() {
         return new Iterable<OnMethod>() {
             @Override

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -183,5 +183,5 @@ public abstract class Constants {
     public static final String LONG_VALUE_DESC= "()J";
     public static final String FLOAT_VALUE_DESC= "()F";
     public static final String DOUBLE_VALUE_DESC= "()D";
-    public static final String EMBEDDED_SCRIPT_HEADER = "META-INF/btrace/";
+    public static final String EMBEDDED_BTRACE_SECTION_HEADER = "META-INF/btrace/";
 }

File: src/share/classes/com/sun/btrace/runtime/ProbeDescriptorLoader.java
Patch:
@@ -128,7 +128,7 @@ private InputStream openDescriptorFromDirs(String namespace) {
     }
     
     private InputStream openDescriptorFromClassPath(String namespace) {
-        String target = Constants.EMBEDDED_SCRIPT_HEADER + namespace.trim() + ".xml";
+        String target = Constants.EMBEDDED_BTRACE_SECTION_HEADER + namespace.trim() + ".xml";
         if (debug.isDebug()) debug.debug("looking for probe descriptor file '" + target);
         return ClassLoader.getSystemResourceAsStream(target);
     }

File: src/share/classes/com/sun/btrace/compiler/Verifier.java
Patch:
@@ -103,7 +103,7 @@ public void started(TaskEvent e) {
     public void finished(TaskEvent e) {
         if (e.getKind() != TaskEvent.Kind.ANALYZE) return;
         if (processingEnv == null) {
-            throw new RuntimeException("Compilation errors in " + e.getSourceFile().getName() + "; can't run verifier reliably");
+            return;
         }
         TypeElement elem = e.getTypeElement();
         for(Tree t : e.getCompilationUnit().getTypeDecls()) {

File: src/share/classes/com/sun/btrace/agent/FileClient.java
Patch:
@@ -24,6 +24,7 @@
  */
 package com.sun.btrace.agent;
 
+import com.sun.btrace.runtime.Constants;
 import com.sun.btrace.DebugSupport;
 import com.sun.btrace.comm.Command;
 import com.sun.btrace.comm.ExitCommand;
@@ -84,7 +85,7 @@ public void onCommand(Command cmd) throws IOException {
 
     private static byte[] readAll(File file) throws IOException {
         String path = file.getPath();
-        if (path.startsWith(Main.EMBEDDED_SCRIPT_HEADER)) {
+        if (path.startsWith(Constants.EMBEDDED_SCRIPT_HEADER)) {
             try (InputStream is = ClassLoader.getSystemResourceAsStream(path)) {
                 return readAll(is, -1);
             }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -39,6 +39,7 @@
 import java.util.StringTokenizer;
 import java.util.jar.JarFile;
 import com.sun.btrace.BTraceRuntime;
+import com.sun.btrace.runtime.Constants;
 import com.sun.btrace.comm.ErrorCommand;
 import com.sun.btrace.util.Messages;
 import java.util.concurrent.ExecutionException;
@@ -54,7 +55,6 @@
  * @author Joachim Skeie (rolling output)
  */
 public final class Main {
-    static final String EMBEDDED_SCRIPT_HEADER = "META-INF/btrace/";
 
     private static volatile Map<String, String> argMap;
     private static volatile Instrumentation inst;
@@ -91,7 +91,7 @@ private static synchronized void main(final String args, final Instrumentation i
         } else {
             Main.inst = inst;
         }
-
+        
         parseArgs(args);
         if (isDebug()) debugPrint("parsed command line arguments");
 
@@ -323,7 +323,7 @@ private static void loadBTraceScript(String filePath, boolean traceToStdOut) {
             scriptParent = traceScript.getParent();
 
             if (! traceScript.exists()) {
-                traceScript = new File(EMBEDDED_SCRIPT_HEADER + filePath);
+                traceScript = new File(Constants.EMBEDDED_SCRIPT_HEADER + filePath);
             }
 
             if (! scriptName.endsWith(".class")) {

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -33,6 +33,8 @@
 import com.sun.btrace.annotations.OnProbe;
 import com.sun.btrace.annotations.Where;
 import com.sun.btrace.AnyType;
+import com.sun.btrace.AnyType;
+import com.sun.btrace.BTraceUtils;
 import com.sun.btrace.BTraceUtils;
 import com.sun.btrace.annotations.Injected;
 import com.sun.btrace.annotations.Level;
@@ -181,4 +183,5 @@ public abstract class Constants {
     public static final String LONG_VALUE_DESC= "()J";
     public static final String FLOAT_VALUE_DESC= "()F";
     public static final String DOUBLE_VALUE_DESC= "()D";
+    public static final String EMBEDDED_SCRIPT_HEADER = "META-INF/btrace/";
 }

File: src/test/traces/onmethod/MethodCallStatic.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2008, 2016, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it
@@ -34,6 +34,7 @@
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -44,6 +45,7 @@ public class MethodCallStatic {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="callTopLevel",
               location=@Location(value=Kind.CALL, clazz="/.*\\.OnMethodTest/", method="callTargetStatic"))
     public static void args(@Self Object self, String a, long b,
+                            @TargetInstance Object target,
                             @TargetMethodOrField(fqn=true) String calledMethod,
                             @ProbeClassName String className, @ProbeMethodName String methodName) {
         println("args");

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -631,7 +631,7 @@ && typeMatches(loc.getType(), cDesc)) {
 
                                     Label l = levelCheckAfter(om, bcn.name);
 
-                                    String method = cName + cDesc;
+                                    String method = getMethodOrFieldName(om.isTargetMethodOrFieldFqn(), opcode, cOwner, cName, cDesc);;
                                     boolean withReturn = om.getReturnParameter() != -1 && returnType != Type.VOID_TYPE;
                                     if (withReturn) {
                                         // store the return value to a local variable

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -204,7 +204,7 @@ private static CommandListener createCommandListener(Client client) {
             public void onCommand(Command cmd) throws IOException {
                 int type = cmd.getType();
                 if (cmd instanceof PrintableCommand) {
-                    ((DataCommand)cmd).print(out);
+                    ((PrintableCommand)cmd).print(out);
                     out.flush();
                 } else if (type == Command.EXIT) {
                     exiting = true;

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -78,6 +78,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
             BTraceClassReader cr = InstrumentUtils.newClassReader(loader, classfileBuffer);
             BTraceClassWriter cw = InstrumentUtils.newClassWriter(cr);
             for(BTraceProbe p : probes) {
+                p.notifyTransform(className);
                 cw.addInstrumentor(p);
             }
             byte[] transformed = cw.instrument();

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -204,7 +204,7 @@ private static CommandListener createCommandListener(Client client) {
             public void onCommand(Command cmd) throws IOException {
                 int type = cmd.getType();
                 if (cmd instanceof PrintableCommand) {
-                    ((DataCommand)cmd).print(out);
+                    ((PrintableCommand)cmd).print(out);
                     out.flush();
                 } else if (type == Command.EXIT) {
                     exiting = true;

File: src/share/classes/com/sun/btrace/runtime/BTraceTransformer.java
Patch:
@@ -78,6 +78,7 @@ public byte[] transform(ClassLoader loader, String className, Class<?> classBein
             BTraceClassReader cr = InstrumentUtils.newClassReader(loader, classfileBuffer);
             BTraceClassWriter cw = InstrumentUtils.newClassWriter(cr);
             for(BTraceProbe p : probes) {
+                p.notifyTransform(className);
                 cw.addInstrumentor(p);
             }
             byte[] transformed = cw.instrument();

File: src/share/classes/com/sun/btrace/AnyType.java
Patch:
@@ -36,6 +36,6 @@
  *
  * @author A. Sundararajan
  */
-public abstract class AnyType {
+public interface AnyType {
     public static final AnyType VOID = new AnyType() {};
 }
\ No newline at end of file

File: src/share/classes/com/sun/btrace/AnyType.java
Patch:
@@ -36,6 +36,6 @@
  *
  * @author A. Sundararajan
  */
-public abstract class AnyType {
+public interface AnyType {
     public static final AnyType VOID = new AnyType() {};
 }
\ No newline at end of file

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -2578,11 +2578,11 @@ private static void setupCmdQueueParams() {
     }
 
     private void debugPrint(String msg) {
-        debug.print(msg);
+        debug.debug(msg);
     }
 
     private void debugPrint(Throwable t) {
-        debug.print(t);
+        debug.debug(t);
     }
 
     private static void warning(String msg) {

File: src/share/classes/com/sun/btrace/agent/RemoteClient.java
Patch:
@@ -32,10 +32,8 @@
 import java.net.Socket;
 import com.sun.btrace.BTraceRuntime;
 import com.sun.btrace.BTraceUtils;
-import com.sun.btrace.DebugSupport;
 import com.sun.btrace.comm.Command;
 import com.sun.btrace.comm.DataCommand;
-import com.sun.btrace.comm.ErrorCommand;
 import com.sun.btrace.comm.EventCommand;
 import com.sun.btrace.comm.ExitCommand;
 import com.sun.btrace.comm.InstrumentCommand;
@@ -148,7 +146,7 @@ public void onCommand(Command cmd) throws IOException {
                 }
                 if (out != null) {
                     if (cmd instanceof PrintableCommand) {
-                        ((DataCommand) cmd).print(out);
+                        ((PrintableCommand) cmd).print(out);
                         return;
                     }
                 }

File: src/share/classes/com/sun/btrace/agent/TraceOutputWriter.java
Patch:
@@ -59,7 +59,7 @@ public SimpleFileOutput(File output, SharedSettings settings) throws IOException
                 }
                 delegate = new FileWriter(output);
             } catch (IOException e) {
-                debug.print(e);
+                debug.debug(e);
                 throw e;
             }
         }
@@ -96,7 +96,7 @@ public RollingFileWriter(File output, SharedSettings settings) throws IOExceptio
                 baseName = output.getName();
                 this.settings = settings;
             } catch (IOException e) {
-                debug.print(e);
+                debug.debug(e);
                 throw e;
             }
         }
@@ -140,7 +140,7 @@ private void nextWriter() {
                 writerLock.writeLock().lock();
                 currentFileWriter = getNextWriter();
             } catch (IOException e) {
-                debug.print(e);
+                debug.debug(e);
             } finally {
                 writerLock.writeLock().unlock();
             }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -332,9 +332,9 @@ private static void loadBTraceScript(String filePath, boolean traceToStdOut) {
                 String outDir = clientSettings.getOutputDir();
                 if (traceOutput == null || traceOutput.length() == 0) {
                     clientSettings.setOutputFile("${client}-${agent}.${ts}.btrace[default]");
-                }
-                if (outDir == null || outDir.length() == 0) {
-                    clientSettings.setOutputDir(traceScript.getParent());
+                    if (outDir == null || outDir.length() == 0) {
+                        clientSettings.setOutputDir(traceScript.getParent());
+                    }
                 }
             }
 

File: src/share/classes/com/sun/btrace/AnyType.java
Patch:
@@ -36,5 +36,6 @@
  *
  * @author A. Sundararajan
  */
-public interface AnyType {
+public abstract class AnyType {
+    public static final AnyType VOID = new AnyType() {};
 }
\ No newline at end of file

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -62,6 +62,8 @@ public abstract class Constants {
     public static final String CONSTRUCTOR = "<init>";
     public static final String CLASS_INITIALIZER = "<clinit>";
 
+    public static final Type VOIDREF_TYPE = Type.getType(Void.class);
+
     public static final Type OBJECT_TYPE = Type.getType(Object.class);
     public static final String OBJECT_DESC = OBJECT_TYPE.getDescriptor();
 

File: src/test/resources/Main.java
Patch:
@@ -49,11 +49,12 @@ protected void startWork() {
     }
 
     private void callA() {
-        callB(1, "Hello World");
+        print("i=" + callB(1, "Hello World"));
     }
 
-    private void callB(int i, String s) {
+    private int callB(int i, String s) {
         print("[" + i + "] = " + s);
+        return i + 1;
     }
 
     public void print(String msg) {

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -62,6 +62,8 @@ public abstract class Constants {
     public static final String CONSTRUCTOR = "<init>";
     public static final String CLASS_INITIALIZER = "<clinit>";
 
+    public static final Type VOIDREF_TYPE = Type.getType(Void.class);
+
     public static final Type OBJECT_TYPE = Type.getType(Object.class);
     public static final String OBJECT_DESC = OBJECT_TYPE.getDescriptor();
 

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -147,6 +147,7 @@ public void testOnMethodReturn() throws Exception {
                 public void validate(String stdout, String stderr, int retcode) {
                     Assert.assertFalse("Script should not have failed", stdout.contains("FAILED"));
                     Assert.assertTrue("Non-empty stderr", stderr.isEmpty());
+                    Assert.assertTrue(stdout.contains("[this, anytype(void)]"));
                     Assert.assertTrue(stdout.contains("[this, void]"));
                     Assert.assertTrue(stdout.contains("[this, 2]"));
                 }

File: src/share/classes/com/sun/btrace/AnyType.java
Patch:
@@ -36,5 +36,6 @@
  *
  * @author A. Sundararajan
  */
-public interface AnyType {
+public abstract class AnyType {
+    public static final AnyType VOID = new AnyType() {};
 }
\ No newline at end of file

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -102,7 +102,7 @@ public static boolean isCompatible(Type left, Type right) {
             return false;
         } else if(isObjectOrAnyType(left)) {
             int sort2 = right.getSort();
-            return (sort2 == Type.OBJECT || sort2 == Type.ARRAY || isPrimitive(right));
+            return (sort2 == Type.OBJECT || sort2 == Type.ARRAY || sort2 == Type.VOID || isPrimitive(right));
         } else if (isPrimitive(left)) {
             // a primitive type requires strict equality
             return left.equals(right);

File: src/test/resources/Main.java
Patch:
@@ -49,11 +49,12 @@ protected void startWork() {
     }
 
     private void callA() {
-        callB(1, "Hello World");
+        print("i=" + callB(1, "Hello World"));
     }
 
-    private void callB(int i, String s) {
+    private int callB(int i, String s) {
         print("[" + i + "] = " + s);
+        return i + 1;
     }
 
     public void print(String msg) {

File: src/share/classes/com/sun/btrace/AnyType.java
Patch:
@@ -31,7 +31,7 @@
  * is allowed in the place where it is used. We use
  * that for method signature matching when signature
  * needs to be specified loosely. Note that we don't
- * want to use java.lang.Object - because user may 
+ * want to use java.lang.Object - because user may
  * want to match java.lang.Object exactly.
  *
  * @author A. Sundararajan

File: src/share/classes/com/sun/btrace/runtime/MethodVerifier.java
Patch:
@@ -25,13 +25,11 @@
 package com.sun.btrace.runtime;
 
 import com.sun.btrace.annotations.Sampled;
-import com.sun.btrace.org.objectweb.asm.AnnotationVisitor;
 import java.util.Map;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Set;
 import com.sun.btrace.org.objectweb.asm.Label;
-import com.sun.btrace.org.objectweb.asm.MethodVisitor;
 import com.sun.btrace.org.objectweb.asm.Opcodes;
 import com.sun.btrace.org.objectweb.asm.Type;
 import static com.sun.btrace.org.objectweb.asm.Opcodes.*;

File: src/share/classes/com/sun/btrace/runtime/StackTrackingMethodVisitor.java
Patch:
@@ -24,6 +24,7 @@
  */
 package com.sun.btrace.runtime;
 
+import static com.sun.btrace.runtime.Constants.*;
 import com.sun.btrace.org.objectweb.asm.Handle;
 import com.sun.btrace.org.objectweb.asm.Label;
 import com.sun.btrace.org.objectweb.asm.MethodVisitor;
@@ -675,7 +676,7 @@ public void visitIntInsn(int opcode, int operand) {
             }
             case Opcodes.NEWARRAY: {
                 StackItem sl = state.pop(); // size
-                state.push(new InstanceItem(Type.getType(Object.class), sl));
+                state.push(new InstanceItem(OBJECT_TYPE, sl));
                 break;
             }
         }

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -131,6 +131,7 @@ public void validate(String stdout, String stderr, int retcode) {
                     Assert.assertTrue("Non-empty stderr", stderr.isEmpty());
                     Assert.assertTrue(stdout.contains("[this, noargs]"));
                     Assert.assertTrue(stdout.contains("[this, args]"));
+                    Assert.assertTrue(stdout.contains("{xxx}"));
                 }
             }
         );

File: src/test/resources/Main.java
Patch:
@@ -29,6 +29,8 @@
  * @author Jaroslav Bachorik
  */
 public class Main extends TestApp {
+    private String id = "xxx";
+    
     public static void main(String[] args) throws Exception {
         Main i = new Main();
         i.start();

File: src/test/traces/OnMethodTest.java
Patch:
@@ -28,6 +28,7 @@
 import com.sun.btrace.annotations.BTrace;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import static com.sun.btrace.BTraceUtils.Reflective.*;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.TLS;
 import com.sun.btrace.annotations.Export;
@@ -51,6 +52,7 @@ public static void noargs(@Self Object self) {
         tls++;
         ex += 1;
         dump(var + " [this, noargs]");
+        dump("{" + get("id", self) + "}");
         var = "A";
     }
 

File: src/test/traces/onmethod/ArgsReturnBoxed.java
Patch:
@@ -33,6 +33,7 @@
 import com.sun.btrace.annotations.Return;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import static com.sun.btrace.BTraceUtils.Reflective.*;
 
 /**
  *
@@ -42,6 +43,6 @@
 public class ArgsReturnBoxed {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.RETURN))
     public static void args(@Self Object self, @Return AnyType retVal, String a, long b, String[] c, int[] d) {
-        println("args");
+        println("args " + getLong("value", self));
     }
 }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -432,8 +432,10 @@ public void run() {
                         client.registerTransformer();
                         ArrayList<Class> list = new ArrayList<>();
                         client.debugPrint("filtering loaded classes");
+                        ClassCache cc = ClassCache.getInstance();
                         for (Class c : inst.getAllLoadedClasses()) {
                             if (c != null) {
+                                cc.get(c);
                                 if (inst.isModifiableClass(c) &&
                                     client.isCandidate(c)) {
                                     client.debugPrint("candidate " + c + " added");

File: src/share/classes/com/sun/btrace/runtime/BTraceMethodNode.java
Patch:
@@ -69,7 +69,7 @@ public void visitEnd() {
     public AnnotationVisitor visitAnnotation(String type, boolean visible) {
         AnnotationVisitor av = super.visitAnnotation(type, visible);
 
-        if (type.startsWith("com/sun/btrace/annotations")) {
+        if (type.startsWith("Lcom/sun/btrace/annotations/")) {
             isBTraceHandler = true;
         }
         if (type.equals(ONMETHOD_DESC)) {

File: src/share/classes/com/sun/btrace/runtime/CycleDetector.java
Patch:
@@ -250,7 +250,7 @@ private void collectIncomings(String methodId, Set<String> closure) {
         for(Node n : nodes) {
             if (n.id.equals(methodId)) {
                 for(Edge e : n.incoming) {
-                    String id = e.to.id;
+                    String id = e.from.id;
                     if (!closure.contains(id)) {
                         closure.add(id);
                         collectIncomings(id, closure);

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -1636,13 +1636,11 @@ private MethodNode copy(MethodNode n) {
 
     @Override
     public void visitEnd() {
-        System.err.println("*** Going to copy methods from: " + bcn.name);
         Set<MethodNode> copyNodes = new TreeSet<>(BTraceMethodNode.COMPARATOR);
 
         for (OnMethod om : calledOnMethods) {
             BTraceMethodNode bmn = om.getMethodNode();
 
-            System.err.println("*** copying method: " + bmn);
             MethodNode mn = copy(bmn);
 
             copyNodes.add(mn);
@@ -1651,7 +1649,6 @@ public void visitEnd() {
             }
         }
         for(MethodNode mn : copyNodes) {
-            System.err.println("*** physical copy: " + mn.name + mn.desc);
             mn.accept(new ClassVisitor(Opcodes.ASM5, cv) {
                 @Override
                 public MethodVisitor visitMethod(int access, String name, String desc, String sig, String[] exceptions) {

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -138,6 +138,8 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethodSubclass() throws Exception {
+        debugBTrace = true;
+        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodSubclassTest.java",

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -432,8 +432,10 @@ public void run() {
                         client.registerTransformer();
                         ArrayList<Class> list = new ArrayList<>();
                         client.debugPrint("filtering loaded classes");
+                        ClassCache cc = ClassCache.getInstance();
                         for (Class c : inst.getAllLoadedClasses()) {
                             if (c != null) {
+                                cc.get(c);
                                 if (inst.isModifiableClass(c) &&
                                     client.isCandidate(c)) {
                                     client.debugPrint("candidate " + c + " added");

File: src/share/classes/com/sun/btrace/runtime/BTraceMethodNode.java
Patch:
@@ -69,7 +69,7 @@ public void visitEnd() {
     public AnnotationVisitor visitAnnotation(String type, boolean visible) {
         AnnotationVisitor av = super.visitAnnotation(type, visible);
 
-        if (type.startsWith("com/sun/btrace/annotations")) {
+        if (type.startsWith("Lcom/sun/btrace/annotations/")) {
             isBTraceHandler = true;
         }
         if (type.equals(ONMETHOD_DESC)) {

File: src/share/classes/com/sun/btrace/runtime/CycleDetector.java
Patch:
@@ -250,7 +250,7 @@ private void collectIncomings(String methodId, Set<String> closure) {
         for(Node n : nodes) {
             if (n.id.equals(methodId)) {
                 for(Edge e : n.incoming) {
-                    String id = e.to.id;
+                    String id = e.from.id;
                     if (!closure.contains(id)) {
                         closure.add(id);
                         collectIncomings(id, closure);

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -1636,13 +1636,11 @@ private MethodNode copy(MethodNode n) {
 
     @Override
     public void visitEnd() {
-        System.err.println("*** Going to copy methods from: " + bcn.name);
         Set<MethodNode> copyNodes = new TreeSet<>(BTraceMethodNode.COMPARATOR);
 
         for (OnMethod om : calledOnMethods) {
             BTraceMethodNode bmn = om.getMethodNode();
 
-            System.err.println("*** copying method: " + bmn);
             MethodNode mn = copy(bmn);
 
             copyNodes.add(mn);
@@ -1651,7 +1649,6 @@ public void visitEnd() {
             }
         }
         for(MethodNode mn : copyNodes) {
-            System.err.println("*** physical copy: " + mn.name + mn.desc);
             mn.accept(new ClassVisitor(Opcodes.ASM5, cv) {
                 @Override
                 public MethodVisitor visitMethod(int access, String name, String desc, String sig, String[] exceptions) {

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -138,6 +138,8 @@ public void validate(String stdout, String stderr, int retcode) {
 
     @Test
     public void testOnMethodSubclass() throws Exception {
+        debugBTrace = true;
+        debugTestApp = true;
         test(
             "resources.Main",
             "traces/OnMethodSubclassTest.java",

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -445,7 +445,7 @@ private byte[] instrument(ClassLoader loader, Class clazz, String cname, byte[]
         try {
             ClassWriter writer = InstrumentUtils.newClassWriter(loader, target);
             ClassReader reader = new ClassReader(target);
-            Instrumentor i = new Instrumentor(clazz, className,  btraceCode, onMethods, writer);
+            Instrumentor i = new Instrumentor(loader, clazz, className,  btraceCode, onMethods, writer);
             InstrumentUtils.accept(reader, i);
             if (isDebug() && !i.hasMatch()) {
                 debugPrint("*WARNING* No method was matched for class " + cname); // NOI18N

File: src/test/support/InstrumentorTestBase.java
Patch:
@@ -177,7 +177,7 @@ protected void transform(String traceName, boolean unsafe) throws IOException {
         ClassWriter writer = InstrumentUtils.newClassWriter();
 
         try {
-            InstrumentUtils.accept(reader, new Instrumentor(null,
+            InstrumentUtils.accept(reader, new Instrumentor(ClassLoader.getSystemClassLoader(), null,
                         btrace.className, btrace.content,
                         btrace.onMethods, writer));
         } catch (Throwable e) {

File: src/test/traces/onmethod/ArrayGetAfter.java
Patch:
@@ -25,6 +25,7 @@
 
 package traces.onmethod;
 
+import com.sun.btrace.AnyType;
 import com.sun.btrace.annotations.BTrace;
 import com.sun.btrace.annotations.Kind;
 import com.sun.btrace.annotations.Location;
@@ -33,6 +34,7 @@
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Where;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -42,7 +44,7 @@
 public class ArrayGetAfter {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_GET, where=Where.AFTER))
-    public static void args(@Self Object self, @Return int retVal, int[] arr, int index) {
+    public static void args(@Self Object self, @Return int retVal, @TargetInstance int[] target, int index) {
         println("args");
     }
 }

File: src/test/traces/onmethod/ArrayGetBefore.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -40,7 +41,7 @@
 public class ArrayGetBefore {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_GET))
-    public static void args(@Self Object self, int[] arr, int index) {
+    public static void args(@Self Object self, @TargetInstance int[] arr, int index) {
         println("args");
     }
 }

File: src/test/traces/onmethod/ArraySetAfter.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Where;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -41,7 +42,7 @@
 public class ArraySetAfter {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_SET, where=Where.AFTER))
-    public static void args(@Self Object self, int[] arr, int index, int value) {
+    public static void args(@Self Object self, @TargetInstance int[] arr, int index, int value) {
         println("args");
     }
 }

File: src/test/traces/onmethod/ArraySetBefore.java
Patch:
@@ -25,12 +25,14 @@
 
 package traces.onmethod;
 
+import com.sun.btrace.AnyType;
 import com.sun.btrace.annotations.BTrace;
 import com.sun.btrace.annotations.Kind;
 import com.sun.btrace.annotations.Location;
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -40,7 +42,7 @@
 public class ArraySetBefore {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_SET))
-    public static void args(@Self Object self, int[] arr, int index, int value) {
+    public static void args(@Self Object self, @TargetInstance int[] arr, int index, int value) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArrayGetAfter.java
Patch:
@@ -34,6 +34,7 @@
 import com.sun.btrace.annotations.Where;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -43,7 +44,7 @@
 public class ArrayGetAfter {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_GET, where=Where.AFTER), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, @Return int retVal, int[] arr, int index) {
+    public static void args(@Self Object self, @Return int retVal, @TargetInstance int[] arr, int index) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArrayGetBefore.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -41,7 +42,7 @@
 public class ArrayGetBefore {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_GET), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, int[] arr, int index) {
+    public static void args(@Self Object self, @TargetInstance int[] arr, int index) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArraySetAfter.java
Patch:
@@ -33,6 +33,7 @@
 import com.sun.btrace.annotations.Where;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -42,7 +43,7 @@
 public class ArraySetAfter {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_SET, where=Where.AFTER), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, int[] arr, int index, int value) {
+    public static void args(@Self Object self, @TargetInstance int[] arr, int index, int value) {
         println("args");
     }
 }

File: src/test/traces/onmethod/leveled/ArraySetBefore.java
Patch:
@@ -32,6 +32,7 @@
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
 import com.sun.btrace.annotations.Level;
+import com.sun.btrace.annotations.TargetInstance;
 
 /**
  *
@@ -41,7 +42,7 @@
 public class ArraySetBefore {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="array",
               location=@Location(value=Kind.ARRAY_SET), enableAt = @Level(">=1"))
-    public static void args(@Self Object self, int[] arr, int index, int value) {
+    public static void args(@Self Object self, @TargetInstance int[] arr, int index, int value) {
         println("args");
     }
 }

File: benchmark/src/main/java/net/java/btrace/BTraceBench.java
Patch:
@@ -141,7 +141,7 @@ public void setup() {
             cl = (c) -> {
             };
         }
-        br = new BTraceRuntime("BenchmarkClass", new String[0], cl, null);
+        br = new BTraceRuntime("BenchmarkClass", new String[0], cl, null, null);
     }
 
     @Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)
@@ -323,7 +323,7 @@ public static void main(String[] args) throws Exception {
                     .addProfiler("stack")
                     .jvmArgsPrepend("-javaagent:" + bc.agentJar + "=noServer=true,"
                             + "script=" + bc.scriptPath)
-                    .include(".*" + BTraceBench.class.getSimpleName() + ".*testSend.*")
+                    .include(".*" + BTraceBench.class.getSimpleName() + ".*test.*")
                     .build();
 
             new Runner(opt).run();

File: src/share/classes/com/sun/btrace/comm/Command.java
Patch:
@@ -44,9 +44,10 @@ public abstract class Command implements Serializable {
     public static final byte GRID_DATA  = 10;
     public static final byte RETRANSFORMATION_START = 11;
     public static final byte RETRANSFORM_CLASS = 12;
+    public static final byte SET_PARAMS = 13;
 
     public static final byte FIRST_COMMAND = ERROR;
-    public static final byte LAST_COMMAND = RETRANSFORM_CLASS;
+    public static final byte LAST_COMMAND = SET_PARAMS;
 
     protected byte type;
     protected Command(byte type) {

File: src/share/classes/com/sun/btrace/comm/WireIO.java
Patch:
@@ -75,6 +75,9 @@ public static Command read(ObjectInput in) throws IOException {
             case Command.RETRANSFORM_CLASS:
                 cmd = new RetransformClassNotification();
                 break;
+            case Command.SET_PARAMS:
+                cmd = new SetSettingsCommand();
+                break;
            default:
                 throw new RuntimeException("invalid command: " + type);
         }

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -1184,7 +1184,7 @@ protected void onAfterLine(int line) {
 
             case NEW:
                 // <editor-fold defaultstate="collapsed" desc="New Instance Instrumentor">
-                return new ObjectAllocInstrumentor(mv, className, superName, access, name, desc) {
+                return new ObjectAllocInstrumentor(mv, className, superName, access, name, desc, om.getReturnParameter() != -1) {
 
                     @Override
                     protected void beforeObjectNew(String desc) {

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -107,7 +107,7 @@ public static boolean isCompatible(Type left, Type right) {
             return false;
         } else if(isObjectOrAnyType(left)) {
             int sort2 = right.getSort();
-            return (sort2 == Type.OBJECT || sort2 == Type.ARRAY);
+            return (sort2 == Type.OBJECT || sort2 == Type.ARRAY || isPrimitive(right));
         } else if (isPrimitive(left)) {
             // a primitive type requires strict equality
             return left.equals(right);
@@ -152,7 +152,8 @@ public static boolean isCompatible(Type[] args1, Type[] args2) {
                  * java.lang.Object.
                  */
                 if (isAnyType(args1[i]) &&
-                   (sort2 == Type.OBJECT || sort2 == Type.ARRAY)) {
+                   (sort2 == Type.OBJECT || sort2 == Type.ARRAY ||
+                    isPrimitive(args2[i]))) {
                     continue;
                 } else {
                     return false;

File: src/test/traces/onmethod/NewArrayStringAfter.java
Patch:
@@ -32,7 +32,6 @@
 import com.sun.btrace.annotations.Return;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Where;
-import java.util.Map;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -42,7 +41,7 @@
 @BTrace
 public class NewArrayStringAfter {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="newArray",
-              location=@Location(value=Kind.NEWARRAY, clazz="java.lang.String", where=Where.AFTER))
+              location=@Location(value=Kind.NEWARRAY, clazz="/java\\.lang\\.String.*/", where=Where.AFTER))
     public static void args(@Self Object self, @Return String[] retVal) {
         println("args");
     }

File: src/test/traces/onmethod/NoArgsEntryReturn.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.Return;
 
 /**
  *
@@ -44,7 +45,7 @@ public static void argsEmptyEntry(@Self Object x) {
     }
 
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.RETURN))
-    public static void argsEmptyReturn(@Self Object x) {
+    public static void argsEmptyReturn(@Self Object x, @Return long ret) {
         println("return");
     }
 }

File: src/share/classes/com/sun/btrace/comm/GridDataCommand.java
Patch:
@@ -131,6 +131,7 @@ public void print(PrintWriter out) {
                 out.println(line);
             }
         }
+        out.flush();
     }
 
     private static final HashMap<Class< ? >, String> typeFormats = new HashMap<Class< ? >, String>();

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -127,7 +127,7 @@ public static boolean isCompatible(Type left, Type right) {
             }
 
             try {
-                clzRight = cl.loadClass(left.getClassName());
+                clzRight = cl.loadClass(right.getClassName());
             } catch (Throwable e) {
                 clzRight = Object.class;
             }

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -287,7 +287,8 @@ public Boolean visitMethod(MethodTree node, Void v) {
                     }
                 }
                 if (isErrorHandler(node)) {
-                    if (node.getParameters().size() != 1 || ! "java.lang.Throwable".equals(node.getParameters().get(0).getType().toString())) {
+                    Element thrElement = getElement(node.getParameters().get(0).getType());
+                    if (node.getParameters().size() != 1 || ! "java.lang.Throwable".equals(thrElement.toString())) {
                         reportError("onerror.invalid", node);
                         return false;
                     }

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -454,10 +454,10 @@ private void verifySpecialParameters(OnMethod om) {
             }
         }
         if (om.getDurationParameter() != -1) {
-            if (!(loc.getValue() == Kind.RETURN ||
+            if (!((loc.getValue() == Kind.RETURN ||
                 loc.getValue() == Kind.ERROR) ||
                 (loc.getValue() == Kind.CALL &&
-                loc.getWhere() == Where.AFTER)) {
+                loc.getWhere() == Where.AFTER))) {
                 Verifier.reportError("duration.desc.invalid", om.getTargetName() + om.getTargetDescriptor() + "(" + om.getDurationParameter() + ")");
             }
         }

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -1188,7 +1188,7 @@ protected void onAfterLine(int line) {
 
             case NEW:
                 // <editor-fold defaultstate="collapsed" desc="New Instance Instrumentor">
-                return new ObjectAllocInstrumentor(mv, className, superName, access, name, desc) {
+                return new ObjectAllocInstrumentor(mv, className, superName, access, name, desc, om.getReturnParameter() != -1) {
 
                     @Override
                     protected void beforeObjectNew(String desc) {

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -107,7 +107,7 @@ public static boolean isCompatible(Type left, Type right) {
             return false;
         } else if(isObjectOrAnyType(left)) {
             int sort2 = right.getSort();
-            return (sort2 == Type.OBJECT || sort2 == Type.ARRAY);
+            return (sort2 == Type.OBJECT || sort2 == Type.ARRAY || isPrimitive(right));
         } else if (isPrimitive(left)) {
             // a primitive type requires strict equality
             return left.equals(right);
@@ -152,7 +152,8 @@ public static boolean isCompatible(Type[] args1, Type[] args2) {
                  * java.lang.Object.
                  */
                 if (isAnyType(args1[i]) &&
-                   (sort2 == Type.OBJECT || sort2 == Type.ARRAY)) {
+                   (sort2 == Type.OBJECT || sort2 == Type.ARRAY ||
+                    isPrimitive(args2[i]))) {
                     continue;
                 } else {
                     return false;

File: src/test/traces/onmethod/NewArrayStringAfter.java
Patch:
@@ -32,7 +32,6 @@
 import com.sun.btrace.annotations.Return;
 import com.sun.btrace.annotations.Self;
 import com.sun.btrace.annotations.Where;
-import java.util.Map;
 import static com.sun.btrace.BTraceUtils.*;
 
 /**
@@ -42,7 +41,7 @@
 @BTrace
 public class NewArrayStringAfter {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="newArray",
-              location=@Location(value=Kind.NEWARRAY, clazz="java.lang.String", where=Where.AFTER))
+              location=@Location(value=Kind.NEWARRAY, clazz="/java\\.lang\\.String.*/", where=Where.AFTER))
     public static void args(@Self Object self, @Return String[] retVal) {
         println("args");
     }

File: src/test/traces/onmethod/NoArgsEntryReturn.java
Patch:
@@ -31,6 +31,7 @@
 import com.sun.btrace.annotations.OnMethod;
 import com.sun.btrace.annotations.Self;
 import static com.sun.btrace.BTraceUtils.*;
+import com.sun.btrace.annotations.Return;
 
 /**
  *
@@ -44,7 +45,7 @@ public static void argsEmptyEntry(@Self Object x) {
     }
 
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args", location=@Location(value=Kind.RETURN))
-    public static void argsEmptyReturn(@Self Object x) {
+    public static void argsEmptyReturn(@Self Object x, @Return long ret) {
         println("return");
     }
 }

File: samples/AllMethodsLevels.java
Patch:
@@ -64,14 +64,14 @@ public static void l1(@ProbeMethodName(fqn = true) String probeMethod) {
      */
     @OnEvent("l0")
     public static void setL0() {
-        BTraceUtils.setInstrLevel(0);
+        BTraceUtils.setIntrusionLevel(0);
     }
 
     /**
      * Swtitch to level 1.
      */
     @OnEvent("l1")
     public static void setL1() {
-        BTraceUtils.setInstrLevel(1);
+        BTraceUtils.setIntrusionLevel(1);
     }
 }
\ No newline at end of file

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -272,9 +272,9 @@ protected Class loadClass(InstrumentCommand instr) throws IOException {
         Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
             @Override
             public void run() {
-	        boolean entered = BTraceRuntime.enter(rt);
+	        boolean entered = BTraceRuntime.enter(runtime);
 		try {
-		    if (this.runtime != null) this.runtime.handleExit(0);
+		    if (runtime != null) runtime.handleExit(0);
 		} finally {
                     if (entered) {
                         BTraceRuntime.leave();

File: src/share/classes/com/sun/btrace/comm/GridDataCommand.java
Patch:
@@ -131,6 +131,7 @@ public void print(PrintWriter out) {
                 out.println(line);
             }
         }
+        out.flush();
     }
 
     private static final HashMap<Class< ? >, String> typeFormats = new HashMap<Class< ? >, String>();

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -127,7 +127,7 @@ public static boolean isCompatible(Type left, Type right) {
             }
 
             try {
-                clzRight = cl.loadClass(left.getClassName());
+                clzRight = cl.loadClass(right.getClassName());
             } catch (Throwable e) {
                 clzRight = Object.class;
             }

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -287,7 +287,8 @@ public Boolean visitMethod(MethodTree node, Void v) {
                     }
                 }
                 if (isErrorHandler(node)) {
-                    if (node.getParameters().size() != 1 || ! "java.lang.Throwable".equals(node.getParameters().get(0).getType().toString())) {
+                    Element thrElement = getElement(node.getParameters().get(0).getType());
+                    if (node.getParameters().size() != 1 || ! "java.lang.Throwable".equals(thrElement.toString())) {
                         reportError("onerror.invalid", node);
                         return false;
                     }

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -454,10 +454,10 @@ private void verifySpecialParameters(OnMethod om) {
             }
         }
         if (om.getDurationParameter() != -1) {
-            if (!(loc.getValue() == Kind.RETURN ||
+            if (!((loc.getValue() == Kind.RETURN ||
                 loc.getValue() == Kind.ERROR) ||
                 (loc.getValue() == Kind.CALL &&
-                loc.getWhere() == Where.AFTER)) {
+                loc.getWhere() == Where.AFTER))) {
                 Verifier.reportError("duration.desc.invalid", om.getTargetName() + om.getTargetDescriptor() + "(" + om.getDurationParameter() + ")");
             }
         }

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -180,7 +180,7 @@ public static void main(String[] args) {
             if (code == null) {
                 errorExit("BTrace compilation failed", 1);
             }
-            client.attach(pid);
+            client.attach(pid, null, classPath);
             registerExitHook(client);
             if (con != null) {
                 registerSignalHandler(client);

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -196,7 +196,6 @@ public byte[] transform(
     void registerTransformer() {
         inst.addTransformer(clInitTransformer, false);
         inst.addTransformer(this, true);
-        inst.setNativeMethodPrefix(this, Constants.BTRACE_NATIVE_PREFIX);
     }
 
     void unregisterTransformer() {

File: src/share/classes/com/sun/btrace/client/Client.java
Patch:
@@ -473,12 +473,14 @@ private void commandLoop(CommandListener listener)
                 }
                 listener.onCommand(cmd);
                 if (cmd.getType() == Command.EXIT) {
+                    debugPrint("received EXIT cmd");
                     return;
                 }
             } catch (IOException e) {
                 if (exited.compareAndSet(false, true)) listener.onCommand(new ExitCommand(-1));
                 throw e;
             } catch (NullPointerException e) {
+                e.printStackTrace();
                 if (exited.compareAndSet(false, true))listener.onCommand(new ExitCommand(-1));
             }
         }

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -202,6 +202,7 @@ public void onCommand(Command cmd) throws IOException {
                     out.flush();
                 } else if (type == Command.EXIT) {
                     exiting = true;
+                    out.flush();
                     ExitCommand ecmd = (ExitCommand)cmd;
                     System.exit(ecmd.getExitCode());
                 } else if (type == Command.ERROR) {

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -48,9 +48,6 @@ public abstract class Constants {
     public static final String BTRACE_METHOD_PREFIX =
         "$btrace$";
 
-    public static final String BTRACE_NATIVE_PREFIX =
-        "$btrace$native$";
-
     public static final String JAVA_LANG_OBJECT =
         Type.getInternalName(Object.class);
     public static final String JAVA_LANG_THROWABLE =

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -180,7 +180,7 @@ public static void main(String[] args) {
             if (code == null) {
                 errorExit("BTrace compilation failed", 1);
             }
-            client.attach(pid);
+            client.attach(pid, null, classPath);
             registerExitHook(client);
             if (con != null) {
                 registerSignalHandler(client);

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -196,7 +196,6 @@ public byte[] transform(
     void registerTransformer() {
         inst.addTransformer(clInitTransformer, false);
         inst.addTransformer(this, true);
-        inst.setNativeMethodPrefix(this, Constants.BTRACE_NATIVE_PREFIX);
     }
 
     void unregisterTransformer() {

File: src/share/classes/com/sun/btrace/client/Client.java
Patch:
@@ -473,12 +473,14 @@ private void commandLoop(CommandListener listener)
                 }
                 listener.onCommand(cmd);
                 if (cmd.getType() == Command.EXIT) {
+                    debugPrint("received EXIT cmd");
                     return;
                 }
             } catch (IOException e) {
                 if (exited.compareAndSet(false, true)) listener.onCommand(new ExitCommand(-1));
                 throw e;
             } catch (NullPointerException e) {
+                e.printStackTrace();
                 if (exited.compareAndSet(false, true))listener.onCommand(new ExitCommand(-1));
             }
         }

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -202,6 +202,7 @@ public void onCommand(Command cmd) throws IOException {
                     out.flush();
                 } else if (type == Command.EXIT) {
                     exiting = true;
+                    out.flush();
                     ExitCommand ecmd = (ExitCommand)cmd;
                     System.exit(ecmd.getExitCode());
                 } else if (type == Command.ERROR) {

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -48,9 +48,6 @@ public abstract class Constants {
     public static final String BTRACE_METHOD_PREFIX =
         "$btrace$";
 
-    public static final String BTRACE_NATIVE_PREFIX =
-        "$btrace$native$";
-
     public static final String JAVA_LANG_OBJECT =
         Type.getInternalName(Object.class);
     public static final String JAVA_LANG_THROWABLE =

File: src/share/classes/com/sun/btrace/compiler/Verifier.java
Patch:
@@ -67,7 +67,7 @@
  * @author A. Sundararajan
  */
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
+@SupportedSourceVersion(SourceVersion.RELEASE_7)
 public class Verifier extends AbstractProcessor
                             implements TaskListener {
     private final List<String> classNames =

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -50,7 +50,6 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 
@@ -75,7 +74,7 @@ public class VerifierVisitor extends TreeScanner<Boolean, Void> {
 
     public VerifierVisitor(Verifier verifier, Element clzElement) {
         this.verifier = verifier;
-        Collection<ExecutableElement> shared = new ArrayList<ExecutableElement>();
+        Collection<ExecutableElement> shared = new ArrayList<>();
         for(Element e : clzElement.getEnclosedElements()) {
             if (e.getKind() == ElementKind.METHOD && e.getModifiers().containsAll(EnumSet.of(Modifier.STATIC, Modifier.PRIVATE))) {
                 shared.add((ExecutableElement)e);

File: src/test/resources/OnMethodTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2008, 2015, Oracle and/or its affiliates. All rights reserved.
+ * Copyright (c) 2009, 2015, Oracle and/or its affiliates. All rights reserved.
  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
  *
  * This code is free software; you can redistribute it and/or modify it

File: src/share/classes/com/sun/btrace/compiler/Verifier.java
Patch:
@@ -67,7 +67,7 @@
  * @author A. Sundararajan
  */
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
+@SupportedSourceVersion(SourceVersion.RELEASE_7)
 public class Verifier extends AbstractProcessor
                             implements TaskListener {
     private final List<String> classNames =

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -50,7 +50,6 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 
@@ -75,7 +74,7 @@ public class VerifierVisitor extends TreeScanner<Boolean, Void> {
 
     public VerifierVisitor(Verifier verifier, Element clzElement) {
         this.verifier = verifier;
-        Collection<ExecutableElement> shared = new ArrayList<ExecutableElement>();
+        Collection<ExecutableElement> shared = new ArrayList<>();
         for(Element e : clzElement.getEnclosedElements()) {
             if (e.getKind() == ElementKind.METHOD && e.getModifiers().containsAll(EnumSet.of(Modifier.STATIC, Modifier.PRIVATE))) {
                 shared.add((ExecutableElement)e);

File: src/share/classes/com/sun/btrace/compiler/Verifier.java
Patch:
@@ -67,7 +67,7 @@
  * @author A. Sundararajan
  */
 @SupportedAnnotationTypes("*")
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
+@SupportedSourceVersion(SourceVersion.RELEASE_7)
 public class Verifier extends AbstractProcessor
                             implements TaskListener {
     private final List<String> classNames =

File: src/share/classes/com/sun/btrace/compiler/VerifierVisitor.java
Patch:
@@ -50,7 +50,6 @@
 import javax.lang.model.element.Element;
 import javax.lang.model.element.ElementKind;
 import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
 import javax.lang.model.element.VariableElement;
 import javax.lang.model.type.TypeMirror;
 
@@ -75,7 +74,7 @@ public class VerifierVisitor extends TreeScanner<Boolean, Void> {
 
     public VerifierVisitor(Verifier verifier, Element clzElement) {
         this.verifier = verifier;
-        Collection<ExecutableElement> shared = new ArrayList<ExecutableElement>();
+        Collection<ExecutableElement> shared = new ArrayList<>();
         for(Element e : clzElement.getEnclosedElements()) {
             if (e.getKind() == ElementKind.METHOD && e.getModifiers().containsAll(EnumSet.of(Modifier.STATIC, Modifier.PRIVATE))) {
                 shared.add((ExecutableElement)e);

File: src/share/classes/com/sun/btrace/runtime/Assembler.java
Patch:
@@ -33,7 +33,7 @@
 
 /**
  * Convenient fluent wrapper over the ASM method visitor
- * 
+ *
  * @author Jaroslav Bachorik
  */
 final public class Assembler {
@@ -401,7 +401,8 @@ public Assembler printObject() {
         mv.visitMethodInsn(INVOKEVIRTUAL,
                     "java/io/PrintStream",
                     "println",
-                    "(Ljava/lang/Object;)V");
+                    "(Ljava/lang/Object;)V",
+                    false);
         return this;
     }
 

File: src/share/classes/com/sun/btrace/runtime/BTraceConfigurator.java
Patch:
@@ -96,7 +96,6 @@ public AnnotationVisitor visitAnnotation(String desc,
             graph.addStarting(new CycleDetector.Node(methodName + methodDesc));
         }
 
-        System.err.println("*** checking annotation on " + methodName + " - @" + desc);
         if (desc.equals(ONMETHOD_DESC)) {
             om = new OnMethod();
             onMethods.add(om);

File: src/share/classes/com/sun/btrace/runtime/ClinitInjector.java
Patch:
@@ -131,7 +131,7 @@ private int generateClinit(MethodVisitor mv) {
         // the name of the currently processed class
         mv.visitLdcInsn(clazz); // NOI18N
         // invocatio nof BTraceRuntime.retransform() method
-        mv.visitMethodInsn(Opcodes.INVOKESTATIC, "com/sun/btrace/BTraceRuntime", "retransform", "(Ljava/lang/String;Ljava/lang/Class;)V"); // NOI18N
+        mv.visitMethodInsn(Opcodes.INVOKESTATIC, "com/sun/btrace/BTraceRuntime", "retransform", "(Ljava/lang/String;Ljava/lang/Class;)V", false); // NOI18N
 
         return clazz.getSize() + Type.getType(String.class).getSize();
     }

File: src/share/classes/com/sun/btrace/runtime/MethodVerifier.java
Patch:
@@ -51,8 +51,8 @@ final public class MethodVerifier extends StackTrackingMethodVisitor {
     final private static Set<String> unboxMethods;
 
     static {
-        primitiveWrapperTypes = new HashSet<String>();
-        unboxMethods = new HashSet<String>();
+        primitiveWrapperTypes = new HashSet<>();
+        unboxMethods = new HashSet<>();
 
         primitiveWrapperTypes.add("java/lang/Boolean");
         primitiveWrapperTypes.add("java/lang/Byte");
@@ -94,7 +94,7 @@ public MethodVerifier(Verifier v, BTraceConfigurator cfg, int access, String cla
         this.methodName = methodName;
         this.methodDesc = desc;
         this.access = access;
-        labels = new HashMap<Label, Label>();
+        labels = new HashMap<>();
     }
 
     @Override

File: src/share/classes/com/sun/btrace/runtime/ThrowInstrumentor.java
Patch:
@@ -48,6 +48,7 @@ public ThrowInstrumentor(LocalVariableHelper mv, String parentClz, String superC
         super(mv, parentClz, superClz, access, name, desc);
     }
 
+    @Override
     public void visitInsn(int opcode) {
         if (opcode == ATHROW) {
             onThrow();
@@ -60,7 +61,8 @@ protected void onThrow() {
         visitMethodInsn(INVOKEVIRTUAL,
                     "java/lang/Throwable",
                     "printStackTrace",
-                    "()V");
+                    "()V",
+                    false);
     }
 
     public static void main(final String[] args) throws Exception {

File: src/test/support/InstrumentorTestBase.java
Patch:
@@ -120,7 +120,9 @@ protected void cleanup() {
 
     protected void load() {
         String clzName = new ClassReader(transformedBC).getClassName().replace('.', '/');
+        String traceName = new ClassReader(transformedTrace).getClassName().replace('.', '/');
         unsafe.defineClass(clzName, transformedBC, 0, transformedBC.length, cl, null);
+        unsafe.defineClass(traceName, transformedTrace, 0, transformedTrace.length, cl, null);
     }
 
     protected void checkTransformation(String expected) throws IOException {

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -52,10 +52,10 @@
 import com.sun.btrace.runtime.Location;
 import com.sun.btrace.runtime.MethodRemover;
 import com.sun.btrace.runtime.NullPerfReaderImpl;
-import com.sun.btrace.runtime.Preprocessor;
 import com.sun.btrace.runtime.Verifier;
 import com.sun.btrace.runtime.OnMethod;
 import com.sun.btrace.runtime.OnProbe;
+import com.sun.btrace.runtime.Preprocessor;
 import com.sun.btrace.runtime.RunnableGeneratorImpl;
 import com.sun.btrace.util.templates.impl.MethodTrackingExpander;
 import java.lang.annotation.Annotation;

File: src/share/classes/com/sun/btrace/runtime/BTraceConfigurator.java
Patch:
@@ -96,6 +96,7 @@ public AnnotationVisitor visitAnnotation(String desc,
             graph.addStarting(new CycleDetector.Node(methodName + methodDesc));
         }
 
+        System.err.println("*** checking annotation on " + methodName + " - @" + desc);
         if (desc.equals(ONMETHOD_DESC)) {
             om = new OnMethod();
             onMethods.add(om);

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -52,10 +52,10 @@
 import com.sun.btrace.runtime.Location;
 import com.sun.btrace.runtime.MethodRemover;
 import com.sun.btrace.runtime.NullPerfReaderImpl;
-import com.sun.btrace.runtime.Preprocessor;
 import com.sun.btrace.runtime.Verifier;
 import com.sun.btrace.runtime.OnMethod;
 import com.sun.btrace.runtime.OnProbe;
+import com.sun.btrace.runtime.Preprocessor;
 import com.sun.btrace.runtime.RunnableGeneratorImpl;
 import com.sun.btrace.util.templates.impl.MethodTrackingExpander;
 import java.lang.annotation.Annotation;

File: src/share/classes/com/sun/btrace/runtime/BTraceConfigurator.java
Patch:
@@ -96,6 +96,7 @@ public AnnotationVisitor visitAnnotation(String desc,
             graph.addStarting(new CycleDetector.Node(methodName + methodDesc));
         }
 
+        System.err.println("*** checking annotation on " + methodName + " - @" + desc);
         if (desc.equals(ONMETHOD_DESC)) {
             om = new OnMethod();
             onMethods.add(om);

File: src/share/classes/com/sun/btrace/agent/ProbeDescriptorLoader.java
Patch:
@@ -67,6 +67,7 @@ static synchronized ProbeDescriptor load(String namespace) {
             // load probe descriptor for the given namespace
             File file = findFile(namespace);
             if (file == null) {
+                if (Main.isDebug()) Main.debugPrint("didn't find probe descriptor file " + namespace);
                 return null;
             }
             ProbeDescriptor pd = load(file);
@@ -98,6 +99,7 @@ private static ProbeDescriptor load(File file) {
     private static File findFile(String namespace) {
         for (String dir : probeDescDirs) {
             File f = new File(dir, namespace + ".xml");
+            if (Main.isDebug()) Main.debugPrint("looking for probe descriptor file " + f.getPath());
             if (f.exists() && f.isFile()) {
                 if (Main.isDebug()) Main.debugPrint("probe descriptor for " + namespace + " is " + f);
                 return f;

File: src/share/classes/com/sun/btrace/util/MethodID.java
Patch:
@@ -26,6 +26,7 @@
 
 package com.sun.btrace.util;
 
+import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicInteger;

File: src/share/classes/com/sun/btrace/util/MethodID.java
Patch:
@@ -26,6 +26,7 @@
 
 package com.sun.btrace.util;
 
+import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 import java.util.concurrent.atomic.AtomicInteger;

File: src/test/com/sun/btrace/BTraceFunctionalTests.java
Patch:
@@ -37,7 +37,7 @@
  * The test simulates a user submitting a BTrace script to the target application
  * and asserts that no exceptions are thrown, JVM keeps on running and
  * BTrace generates the anticipated output.
- * 
+ *
  * @author Jaroslav Bachorik
  */
 public class BTraceFunctionalTests extends RuntimeTest {
@@ -73,7 +73,7 @@ public void validate(String stdout, String stderr, int retcode) {
     public void testOnProbe() throws Exception {
         test(
             "resources.Main",
-            "traces/ProbeTest.java",
+            "traces/OnProbeTest.java",
             5,
             new ResultValidator() {
                 public void validate(String stdout, String stderr, int retcode) {

File: src/share/classes/com/sun/btrace/agent/ProbeDescriptorLoader.java
Patch:
@@ -26,14 +26,11 @@
 package com.sun.btrace.agent;
 
 import java.io.File;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Map;
 import java.util.HashMap;
 import javax.xml.bind.*;
 import javax.xml.bind.helpers.DefaultValidationEventHandler;
-import com.sun.btrace.runtime.OnMethod;
-import com.sun.btrace.runtime.OnProbe;
 import com.sun.btrace.runtime.ProbeDescriptor;
 
 /**

File: benchmark/src/main/resources/scripts/TraceScript.java
Patch:
@@ -21,7 +21,7 @@ public static void onMethodEntryEmpty(@ProbeClassName String pcn, @ProbeMethodNa
     }
 
     @OnMethod(clazz="net.java.btrace.BTraceBench", method="testInstrumentedMethodSampled")
-    @Sampled
+    @Sampled(kind = Sampled.Sampler.Const)
     public static void onMethodEntryEmptySampled(@ProbeClassName String pcn, @ProbeMethodName String pmn) {
 
     }
@@ -32,13 +32,13 @@ public static void onMethodRetDuration(@ProbeClassName String pcn, @ProbeMethodN
     }
 
     @OnMethod(clazz="net.java.btrace.BTraceBench", method="testInstrDurationSampled", location = @Location(Kind.RETURN))
-    @Sampled
+    @Sampled(kind = Sampled.Sampler.Const)
     public static void onMethodRetDurationSampled(@ProbeClassName String pcn, @ProbeMethodName String pmn, @Duration long dur) {
 
     }
 
     @OnMethod(clazz="net.java.btrace.BTraceBench", method="testInstrDurationSampledAdaptive", location = @Location(Kind.RETURN))
-    @Sampled(kind = Sampled.Sampler.Adaptive)
+    @Sampled
     public static void onMethodRetDurationSampledAdaptive(@ProbeClassName String pcn, @ProbeMethodName String pmn, @Duration long dur) {
 
     }

File: src/share/classes/com/sun/btrace/compiler/Verifier.java
Patch:
@@ -172,7 +172,7 @@ private boolean verify(ClassTree ct, Element topElement) {
             return true;
         }
         Boolean value = ct.accept(new VerifierVisitor(this, topElement), null);
-        return value == null? true : value.booleanValue();
+        return value == null? true : value;
     }
 
     /** Detects if the class is annotated as @BTrace(unsafe=true). */

File: benchmark/src/main/java/net/java/btrace/BTraceBench.java
Patch:
@@ -247,7 +247,7 @@ public static void main(String[] args) throws Exception {
                     .addProfiler(ProfilerFactory.getProfilerByName("gc"))
                     .jvmArgsPrepend("-javaagent:" + bc.agentJar + "=noServer=true,"
                             + "script=" + bc.scriptPath)
-                    .include(".*" + BTraceBench.class.getSimpleName() + ".*testInstrumented.*")
+                    .include(".*" + BTraceBench.class.getSimpleName() + ".*test.*")
                     .build();
 
             new Runner(opt).run();

File: src/share/classes/com/sun/btrace/runtime/CycleDetector.java
Patch:
@@ -126,10 +126,10 @@ public int hashCode() {
             return hash;
         }
     }
-    
+
     final private Set<Node> nodes = new HashSet<Node>();
     final private Set<Node> startingNodes = new HashSet<Node>();
-    
+
     public void addEdge(String fromId, String toId) {
         Node fromNode = null;
         Node toNode = null;

File: samples/AllCalls1.java
Patch:
@@ -38,6 +38,6 @@
     @OnMethod(clazz="javax.swing.JTextField", method="/.*/",
               location=@Location(value=Kind.CALL, clazz="/.*/", method="/.*/"))
     public static void m(@Self Object self, @TargetMethodOrField String method, @ProbeMethodName String probeMethod) { // all calls to the methods with signature "()"
-        println(Strings.strcat(method, Strings.strcat(" in ", probeMethod)));
+        println(method + " in " + probeMethod);
     }
 }

File: samples/Classload.java
Patch:
@@ -37,12 +37,12 @@
  */
 @BTrace public class Classload {
    @OnMethod(
-     clazz="+java.lang.ClassLoader", 
+     clazz="+java.lang.ClassLoader",
      method="defineClass",
      location=@Location(Kind.RETURN)
-   )   
+   )
    public static void defineclass(@Return Class cl) {
-       println(Strings.strcat("loaded ", Reflective.name(cl)));
+       println("loaded " +  Reflective.name(cl));
        Threads.jstack();
        println("==========================");
    }

File: samples/CommandArg.java
Patch:
@@ -41,7 +41,7 @@
     )
     public static void started() {
         if (Strings.strcmp(Threads.name(Threads.currentThread()), Sys.$(2)) == 0) {
-            println(Strings.strcat("started ", Sys.$(2)));
+            println("started " + Sys.$(2));
         }
     }
 }

File: samples/DTraceRefDemo.java
Patch:
@@ -46,12 +46,12 @@ public static void defineClass() {
    }
 
    @OnMethod(
-     clazz="java.lang.ClassLoader", 
+     clazz="java.lang.ClassLoader",
      method="defineClass",
      location=@Location(Kind.RETURN)
-   )   
+   )
    public static void defineclass(Class cl) {
-       println(Strings.strcat("loaded ", Reflective.name(cl)));
+       println("loaded " +  Reflective.name(cl));
        Threads.jstack();
        println("==========================");
    }

File: samples/FileTracker.java
Patch:
@@ -34,7 +34,7 @@
 /**
  * This sample prints all files opened for read/write
  * by a Java process. Note that if you pass FileDescriptor
- * to File{Input/Output}Stream or File{Reader/Writer}, 
+ * to File{Input/Output}Stream or File{Reader/Writer},
  * that is not tracked by this script.
  */
 @BTrace public class FileTracker {
@@ -56,7 +56,7 @@ public static void onNewFileInputStream(@Self FileInputStream self, File f) {
     )
     public static void onNewFileInputStreamReturn() {
         if (name != null) {
-            println(Strings.strcat("opened for read ", name));
+            println("opened for read " + name);
             name = null;
         }
     }
@@ -77,7 +77,7 @@ public static void onNewFileOutputStream(@Self FileOutputStream self, File f, bo
     )
     public static void OnNewFileOutputStreamReturn() {
         if (name != null) {
-            println(Strings.strcat("opened for write ", name));
+            println("opened for write " + name);
             name = null;
         }
     }

File: samples/MultiClass.java
Patch:
@@ -42,6 +42,6 @@
         method="/read.*/"
     )
     public static void onread(@ProbeClassName String pcn) {
-        println(Strings.strcat("read on ", pcn));
+        println("read on " + pcn);
     }
 }

File: samples/NewArray.java
Patch:
@@ -56,6 +56,6 @@ public static void onnew(@ProbeClassName String pcn, @ProbeMethodName String pmn
     @OnTimer(2000)
     public static void print() {
         // print the counter
-        println(Strings.strcat("char[] count = ", str(count)));
+        println("char[] count = " + count);
     }
 }

File: samples/NewComponent.java
Patch:
@@ -42,7 +42,7 @@
 
     @OnMethod(
       clazz="java.awt.Component",
-      method="<init>"    
+      method="<init>"
     )
     public static void onnew(@Self Component c) {
         // increment counter on constructor entry
@@ -52,6 +52,6 @@ public static void onnew(@Self Component c) {
     @OnTimer(2000)
     public static void print() {
         // print the counter
-        println(Strings.strcat("component count = ", str(count)));
+        println("component count = " + count);
     }
 }

File: samples/ThreadStart.java
Patch:
@@ -40,9 +40,9 @@
     @OnMethod(
         clazz="java.lang.Thread",
         method="start"
-    ) 
+    )
     public static void onnewThread(@Self Thread t) {
         D.probe("jthreadstart", Threads.name(t));
-        println(Strings.strcat("starting ", Threads.name(t)));
+        println("starting " + Threads.name(t));
     }
 }

File: samples/URLTracker.java
Patch:
@@ -70,7 +70,7 @@ public static void openURL(URL self, Proxy p) {
     )
     public static void openURL() {
         if (url != null) {
-            println(Strings.strcat("open ", Strings.str(url)));
+            println("open " + url);
             D.probe("java-url-open", Strings.str(url));
             url = null;
         }

File: src/test/traces/onmethod/Args.java
Patch:
@@ -38,6 +38,7 @@
 public class Args {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="args")
     public static void args(@Self Object self, String a, long b, String[] c, int[] d) {
+        println("this = " + self);
         println("args");
     }
 }

File: src/share/classes/com/sun/btrace/comm/Command.java
Patch:
@@ -64,7 +64,7 @@ public byte getType() {
         return type;
     }
 
-    public final boolean isUrgent() {
+    final boolean isUrgent() {
         switch (type) {
             case MESSAGE:
             case NUMBER_MAP:

File: src/share/classes/com/sun/btrace/comm/WireIO.java
Patch:
@@ -86,7 +86,7 @@ public static Command read(ObjectInput in) throws IOException {
         return cmd;
     }
 
-    static void write(ObjectOutput out, Command cmd)
+    public static void write(ObjectOutput out, Command cmd)
             throws IOException {
         out.writeByte(cmd.getType());
         cmd.write(out);

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -131,7 +131,7 @@ private static final class RTWrapper {
        private BTraceRuntime rt = null;
 
         boolean set(BTraceRuntime other) {
-            if (rt != null) return false;
+            if (rt != null && other != null) return false;
             rt = other;
             return true;
         }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -408,7 +408,7 @@ public void run() {
                 try {
                     if (isDebug()) debugPrint("new Client created " + client);
                     if (client.shouldAddTransformer()) {
-                        inst.addTransformer(client, true);
+                        client.registerTransformer();
                         Class[] classes = inst.getAllLoadedClasses();
                         ArrayList<Class> list = new ArrayList<Class>();
                         if (isDebug()) debugPrint("filtering loaded classes");

File: src/share/classes/com/sun/btrace/runtime/ClassFilter.java
Patch:
@@ -302,7 +302,6 @@ private void init(List<OnMethod> onMethods) {
                 String superType = className.substring(1);
                 superTypesList.add(superType);
                 superTypesInternalList.add(superType.replace('.', '/'));
-                strSrcList.add(superType);
             } else {
                 strSrcList.add(className);
             }

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -919,7 +919,7 @@ public static <V> V removeLast(Deque<V> queue) {
 
     public static <V> V removeFirst(Deque<V> queue) {
         if (queue instanceof BTraceDeque || queue.getClass().getClassLoader() == null) {
-            return queue.removeLast();
+            return queue.removeFirst();
         } else {
             throw new IllegalArgumentException();
         }

File: samples/JdbcQueries.java
Patch:
@@ -120,7 +120,7 @@ public static void onPrepareReturn(@Return Statement preparedStatement) {
     // Otherwise the SQL is in the first argument.
 
     @OnMethod(clazz = "+java.sql.Statement", method = "/execute.*/")
-    public static void onExecute(@Self Statement currentStatement, AnyType[] args) {
+    public static void onExecute(@Self Object currentStatement, AnyType[] args) {
         if (args.length == 0) {
             // No SQL argument; lookup the SQL from the prepared statement
             executingStatement = Collections.get(preparedStatementDescriptions, currentStatement);

File: src/share/classes/com/sun/btrace/Profiler.java
Patch:
@@ -201,7 +201,7 @@ public Profiler() {
     public abstract void recordEntry(String blockName);
     /**
      * Records the event of exiting an execution unit (eg. method)<br/>
-     * Must be preceded by a call to {@linkplain Profiler#recordEntry(java.lang.String, long) }
+     * Must be preceded by a call to {@linkplain Profiler#recordEntry(java.lang.String) }
      * with the same blockName
      * @param blockName The execution unit identifier (eg. method FQN)
      * @param duration Invocation duration in nanoseconds

File: src/share/classes/com/sun/btrace/Profiler.java
Patch:
@@ -201,7 +201,7 @@ public Profiler() {
     public abstract void recordEntry(String blockName);
     /**
      * Records the event of exiting an execution unit (eg. method)<br/>
-     * Must be preceded by a call to {@linkplain Profiler#recordEntry(java.lang.String, long) }
+     * Must be preceded by a call to {@linkplain Profiler#recordEntry(java.lang.String) }
      * with the same blockName
      * @param blockName The execution unit identifier (eg. method FQN)
      * @param duration Invocation duration in nanoseconds

File: src/test/traces/onmethod/MethodCall.java
Patch:
@@ -45,7 +45,7 @@ public class MethodCall {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="callTopLevel",
               location=@Location(value=Kind.CALL, clazz="/.*\\.OnMethodTest/", method="callTarget"))
     public static void args(@Self Object self, String a, long b,
-                            @TargetInstance Object calledSelf, @TargetMethodOrField String calledMethod,
+                            @TargetInstance Object calledSelf, @TargetMethodOrField(fqn=true) String calledMethod,
                             @ProbeClassName String className, @ProbeMethodName String methodName) {
         println("args");
     }

File: src/test/traces/onmethod/MethodCallStatic.java
Patch:
@@ -44,7 +44,7 @@ public class MethodCallStatic {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="callTopLevel",
               location=@Location(value=Kind.CALL, clazz="/.*\\.OnMethodTest/", method="callTargetStatic"))
     public static void args(@Self Object self, String a, long b,
-                            @TargetMethodOrField String calledMethod,
+                            @TargetMethodOrField(fqn=true) String calledMethod,
                             @ProbeClassName String className, @ProbeMethodName String methodName) {
         println("args");
     }

File: src/test/traces/onmethod/StaticMethodCall.java
Patch:
@@ -44,7 +44,7 @@ public class StaticMethodCall {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="callTopLevelStatic",
               location=@Location(value=Kind.CALL, clazz="/.*\\.OnMethodTest/", method="callTarget"))
     public static void args(String a, long b,
-                            @TargetInstance Object calledSelf, @TargetMethodOrField String calledMethod,
+                            @TargetInstance Object calledSelf, @TargetMethodOrField(fqn=true) String calledMethod,
                             @ProbeClassName String className, @ProbeMethodName String methodName) {
         println("args");
     }

File: src/test/traces/onmethod/StaticMethodCallStatic.java
Patch:
@@ -44,7 +44,7 @@ public class StaticMethodCallStatic {
     @OnMethod(clazz="/.*\\.OnMethodTest/", method="callTopLevelStatic",
               location=@Location(value=Kind.CALL, clazz="/.*\\.OnMethodTest/", method="callTargetStatic"))
     public static void args(String a, long b,
-                            @TargetMethodOrField String calledMethod,
+                            @TargetMethodOrField(fqn=true) String calledMethod,
                             @ProbeClassName String className, @ProbeMethodName String methodName) {
         println("args");
     }

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -188,6 +188,7 @@ protected Class loadClass(InstrumentCommand instr) throws IOException {
         ClassWriter writer = InstrumentUtils.newClassWriter(btraceCode);
         ClassReader reader = new ClassReader(btraceCode);
         ClassVisitor visitor = new Preprocessor(writer);
+        Main.dumpClass(className + "_orig", className + "_orig", btraceCode);
         if (BTraceRuntime.classNameExists(className)) {
             className += "$" + getCount();
             if (debug) Main.debugPrint("class renamed to " + className);
@@ -204,7 +205,7 @@ protected Class loadClass(InstrumentCommand instr) throws IOException {
             errorExit(th);
             return null;
         }
-        Main.dumpClass(className + "_orig", className + "_orig", btraceCode);
+        Main.dumpClass(className + "_proc", className + "_proc", btraceCode);
         if (debug) Main.debugPrint("creating BTraceRuntime instance for " + className);
         this.runtime = new BTraceRuntime(className, args, this, inst);
         if (debug) Main.debugPrint("created BTraceRuntime instance for " + className);

File: src/share/classes/com/sun/btrace/runtime/Preprocessor.java
Patch:
@@ -293,6 +293,7 @@ public void visit(int version,
                   String[] interfaces) {
         className = name;     
         classType = Type.getObjectType(className);
+        classInitializerFound = false;
         super.visit(version, access, name,
                     signature, superName, interfaces);
     }
@@ -508,8 +509,8 @@ public MethodVisitor visitMethod(int access, String name,
              *
              */
             final boolean isClassInitializer = name.equals(CLASS_INITIALIZER);
-            classInitializerFound = isClassInitializer;
-            
+            classInitializerFound = classInitializerFound || isClassInitializer;
+
             if (!isClassInitializer) {
                 // force the method to be public
                 if ((access & Opcodes.ACC_PRIVATE) > 0) access ^= Opcodes.ACC_PRIVATE;

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -204,12 +204,13 @@ protected Class loadClass(InstrumentCommand instr) throws IOException {
             errorExit(th);
             return null;
         }
-        Main.dumpClass(className, className, btraceCode);
+        Main.dumpClass(className + "_orig", className + "_orig", btraceCode);
         if (debug) Main.debugPrint("creating BTraceRuntime instance for " + className);
         this.runtime = new BTraceRuntime(className, args, this, inst);
         if (debug) Main.debugPrint("created BTraceRuntime instance for " + className);
         if (debug) Main.debugPrint("removing @OnMethod, @OnProbe methods");
         byte[] codeBuf = removeMethods(btraceCode);
+        Main.dumpClass(className, className, codeBuf);
         if (debug) Main.debugPrint("removed @OnMethod, @OnProbe methods");
         if (debug) Main.debugPrint("sending Okay command");
         runtime.send(new OkayCommand());

File: src/share/classes/com/sun/btrace/ThreadEnteredMap.java
Patch:
@@ -73,7 +73,7 @@ public static void main(String[] args) throws IOException {
         System.err.println(dur / 4000000);
 
         for(int i=0;i<400000;i++) {
-            instance.enter("nasrat");
+            instance.enter("in");
             instance.exit();
         }
 
@@ -90,7 +90,7 @@ public void run() {
                     long cnt = 0;
                     long start = System.nanoTime();
                     for(int i=0;i<4000000;i++) {
-                        tem.enter("nasrat");
+                        tem.enter("in");
 
                         cnt += i;
                         tem.exit();

File: src/share/classes/com/sun/btrace/runtime/ClassFilter.java
Patch:
@@ -295,6 +295,7 @@ private void init(List<OnMethod> onMethods) {
                 String superType = className.substring(1);
                 superTypesList.add(superType);
                 superTypesInternalList.add(superType.replace('.', '/'));
+                strSrcList.add(superType);
             } else {
                 strSrcList.add(className);
             }

File: src/share/classes/com/sun/btrace/api/impl/BTraceEngineImpl.java
Patch:
@@ -42,6 +42,7 @@
 import com.sun.btrace.api.BTraceEngine;
 import com.sun.btrace.api.BTraceSettings;
 import com.sun.btrace.api.BTraceTask;
+import com.sun.btrace.comm.ErrorCommand;
 import com.sun.btrace.spi.BTraceCompilerFactory;
 import com.sun.btrace.spi.BTraceSettingsProvider;
 import com.sun.btrace.spi.ClasspathProvider;
@@ -264,6 +265,7 @@ public void onCommand(Command cmd) throws IOException {
                                         break;
                                     }
                                     case Command.ERROR: {
+                                        ((ErrorCommand)cmd).getCause().printStackTrace(outputProvider.getStdErr(btrace));
                                         btrace.setState(BTraceTask.State.FAILED);
                                         latch.countDown();
                                         stop(btrace);

File: src/share/classes/com/sun/btrace/profiling/MethodInvocationProfiler.java
Patch:
@@ -239,7 +239,7 @@ public Snapshot snapshot(boolean reset) {
                     Record r = records[i];
                     Integer id = idMap.get(r.blockName);
                     if (id == null) {
-                        id = ++mergedEntries;
+                        id = mergedEntries++;
                         if (mergedEntries > mergedCapacity) {
                             mergedCapacity = (int)((mergedEntries + 1) * 1.25);
                             Record[] newRecs = new Record[mergedCapacity];

File: src/share/classes/com/sun/btrace/runtime/ClassFilter.java
Patch:
@@ -295,6 +295,7 @@ private void init(List<OnMethod> onMethods) {
                 String superType = className.substring(1);
                 superTypesList.add(superType);
                 superTypesInternalList.add(superType.replace('.', '/'));
+                strSrcList.add(superType);
             } else {
                 strSrcList.add(className);
             }

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -654,7 +654,7 @@ public static void handleException(Throwable th) {
         }
     }
 
-    // package-private interface to BTraceUtil class.
+    // package-private interface to BTraceUtils class.
 
     static int speculation() {
         BTraceRuntime current = getCurrent();

File: src/share/classes/com/sun/btrace/runtime/MethodVerifier.java
Patch:
@@ -176,7 +176,6 @@ public void visitMethodInsn(int opcode, String owner,
                 break;
             case INVOKESTATIC:
                 if (!owner.equals(BTRACE_UTILS) &&
-                    !owner.equals(BTRACE_UTILS_ALL) &&
                     !owner.startsWith(BTRACE_UTILS + "$") &&
                     !owner.equals(className)) {
                     if ("valueOf".equals(name) && isPrimitiveWrapper(owner)) {

File: src/share/classes/com/sun/btrace/client/Main.java
Patch:
@@ -61,11 +61,11 @@ public final class Main {
         DEBUG = Boolean.getBoolean("com.sun.btrace.debug");
         if (isDebug()) debugPrint("btrace debug mode is set");
         TRACK_RETRANSFORM = Boolean.getBoolean("com.sun.btrace.trackRetransforms");
-        if (isDebug()) debugPrint("trackRetransforms flag is set");
+        if (isDebug() && TRACK_RETRANSFORM) debugPrint("trackRetransforms flag is set");
         UNSAFE = Boolean.getBoolean("com.sun.btrace.unsafe");
-        if (isDebug()) debugPrint("btrace unsafe mode is set");
+        if (isDebug() && UNSAFE) debugPrint("btrace unsafe mode is set");
         DUMP_CLASSES = Boolean.getBoolean("com.sun.btrace.dumpClasses");
-        if (isDebug()) debugPrint("dumpClasses flag is set");
+        if (isDebug() && DUMP_CLASSES) debugPrint("dumpClasses flag is set");
         DUMP_DIR = System.getProperty("com.sun.btrace.dumpDir", ".");
         if (DUMP_CLASSES) {
             if (isDebug()) debugPrint("dumpDir is " + DUMP_DIR);

File: src/share/classes/com/sun/btrace/api/BTraceTask.java
Patch:
@@ -63,6 +63,7 @@ public static abstract class MessageDispatcher implements EventListener {
         public void onNumberMap(String name, Map<String, ? extends Number> data) {};
         public void onStringMap(String name, Map<String, String> data) {};
         public void onClassInstrumented(String name) {}
+        public void onError(Throwable cause) {}
     }
 
     /**

File: src/share/classes/com/sun/btrace/comm/Command.java
Patch:
@@ -43,7 +43,8 @@ public abstract class Command implements Serializable {
     public static final byte NUMBER     = 9;
     public static final byte GRID_DATA  = 10;
     public static final byte RETRANSFORMATION_START = 11;
-    public static final byte RETRANSFORM_CLASS = 12;
+    public static final byte RETRANSFORMATION_END = 12;
+    public static final byte RETRANSFORM_CLASS = 13;
     
     public static final byte FIRST_COMMAND = ERROR;
     public static final byte LAST_COMMAND = RETRANSFORM_CLASS;

File: src/share/classes/com/sun/btrace/comm/WireIO.java
Patch:
@@ -73,6 +73,9 @@ public static Command read(ObjectInput in) throws IOException {
             case Command.RETRANSFORMATION_START:
                 cmd = new RetransformationStartNotification();
                 break;
+            case Command.RETRANSFORMATION_END:
+                cmd = new RetransformationEndNotification();
+                break;
             case Command.RETRANSFORM_CLASS:
                 cmd = new RetransformClassNotification();
                 break;

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -1777,7 +1777,7 @@ private void send(String msg) {
                                msg));
     }
 
-    private void send(Command cmd) {
+    public void send(Command cmd) {
         try {
             boolean speculated = specQueueManager.send(cmd);
             if (! speculated) {

File: src/share/classes/com/sun/btrace/BTraceUtils.java
Patch:
@@ -48,7 +48,6 @@
 import com.sun.btrace.annotations.ProbeClassName;
 import com.sun.btrace.annotations.ProbeMethodName;
 import com.sun.btrace.annotations.Self;
-import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.Deque;

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -355,6 +355,7 @@ public void run() {
                 try {
                     if (isDebug()) debugPrint("new Client created " + client);
                     if (client.shouldAddTransformer()) {
+                        inst.addTransformer(client, true);
                         Class[] classes = inst.getAllLoadedClasses();
                         ArrayList<Class> list = new ArrayList<Class>();
                         if (isDebug()) debugPrint("filtering loaded classes");
@@ -368,7 +369,6 @@ public void run() {
                         list.trimToSize();
                         int size = list.size();
                         if (isDebug()) debugPrint("added as ClassFileTransformer");
-                        inst.addTransformer(client, true);
                         if (size > 0) {
                             classes = new Class[size];
                             list.toArray(classes);

File: src/test/com/sun/btrace/runtime/BTRACE22Test.java
Patch:
@@ -41,7 +41,6 @@ public void bytecodeValidation() throws Exception {
                             "DSTORE 3\nDLOAD 3\nDLOAD 3\n" +
                             "INVOKESTATIC resources/issues/BTRACE22.$btrace$time$stamp ()J\nLSTORE 5\n" +
                             "ALOAD 0\nLLOAD 5\nLLOAD 1\nLSUB\n" +
-                            "INVOKESTATIC resources/issues/BTRACE22.$btrace$traces$issues$BTRACE22$tracker (Ljava/lang/Object;J)V\n" +
-                            "MAXSTACK");
+                            "INVOKESTATIC resources/issues/BTRACE22.$btrace$traces$issues$BTRACE22$tracker (Ljava/lang/Object;J)V");
     }
 }

File: src/test/com/sun/btrace/runtime/BTRACE28Test.java
Patch:
@@ -39,9 +39,8 @@ public void bytecodeValidation() throws Exception {
         transform("issues/BTRACE28");
         checkTransformation("LDC \"resources.issues.BTRACE28\"\nLDC \"<init>\"\n" +
                             "INVOKESTATIC resources/issues/BTRACE28.$btrace$traces$issues$BTRACE28$tracker (Ljava/lang/String;Ljava/lang/String;)V\n" +
-                            "MAXSTACK = 2\n" +
-                            "LDC \"resources.issues.BTRACE28\"\n" +
-                            "LDC \"serveResource\"\n" +
+                            "MAXSTACK = 2\nASTORE 5\nASTORE 6\nASTORE 7\nALOAD 7\nASTORE 8\nALOAD 8\n" +
+                            "LDC \"resources.issues.BTRACE28\"\nLDC \"serveResource\"\n" +
                             "INVOKESTATIC resources/issues/BTRACE28.$btrace$traces$issues$BTRACE28$tracker (Ljava/lang/String;Ljava/lang/String;)V");
     }
 }

File: src/test/traces/issues/BTRACE22.java
Patch:
@@ -39,7 +39,7 @@
  */
 @BTrace
 public class BTRACE22 {
-    @OnMethod(clazz="/.*\\.BTRACE22/", method="testDouble", location=@Location(value=Kind.RETURN))
+@OnMethod(clazz="/.*\\.BTRACE22/", method="testDouble", location=@Location(value=Kind.RETURN))
     public static void tracker(@Self Object x, @Duration long dur) {
         println("args empty");
     }

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -31,8 +31,6 @@
 import java.util.HashMap;
 import java.util.StringTokenizer;
 import com.sun.btrace.org.objectweb.asm.Type;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 
 class TypeUtils {
     private TypeUtils() {}
@@ -77,7 +75,7 @@ public static boolean isThrowable(Type t) {
     public static boolean isCompatible(Type left, Type right) {
         if (left.equals(right)) {
             return true;
-        } else if(isAnyType(left)) {
+        } else if(isObjectOrAnyType(left)) {
             int sort2 = right.getSort();
             return (sort2 == Type.OBJECT || sort2 == Type.ARRAY);               
         } else {

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -998,7 +998,6 @@ private void callAction(int retOpCode) {
                         }
                         if (om.getReturnParameter() != -1) {
                             retValIndex = lvs.newLocal(getReturnType());
-                            System.err.println("!!! Return index = " + retValIndex);
                             dupReturnValue(retOpCode);
                             storeLocal(getReturnType(), retValIndex);
                         }
@@ -1048,7 +1047,6 @@ protected void onMethodReturn(int opcode) {
                     }
                 };
                 if (om.getDurationParameter() != -1) {
-                    System.err.println("!!! " + name + ";" + desc + " : " + lvs.getFirstLocal());
                     return new TimeStampGenerator(lvs, tsindex, className, access, name, desc, mri, new int[]{RETURN, IRETURN, FRETURN, DRETURN, LRETURN, ARETURN});
                 } else {
                     return mri;

File: src/share/classes/com/sun/btrace/util/TimeStampGenerator.java
Patch:
@@ -203,10 +203,7 @@ private void generateTS(int index) {
         try {
             generatingIndex = true;
             TimeStampHelper.generateTimeStampAccess(this, className);
-            System.err.println("@@@ " + lvs.getFirstLocal());
-            System.err.println("@@@ " + lvs.getNextLocal());
             ts_index[index] = lvs.newLocal(Type.LONG_TYPE);
-            System.err.println("@@@ " + lvs.getNextLocal());
             visitVarInsn(Type.LONG_TYPE.getOpcode(ISTORE), ts_index[index]);
         } finally {
             generatingIndex = false;

File: src/share/classes/com/sun/btrace/agent/Client.java
Patch:
@@ -183,6 +183,7 @@ protected Class loadClass(InstrumentCommand instr) throws IOException {
         if (debug) Main.debugPrint("removed @OnMethod, @OnProbe methods");
         if (debug) Main.debugPrint("sending Okay command");
         onCommand(new OkayCommand());
+        boolean enteredHere = BTraceRuntime.enter();
         try {
             BTraceRuntime.leave();
             if (debug) Main.debugPrint("about to defineClass " + className);
@@ -197,7 +198,7 @@ protected Class loadClass(InstrumentCommand instr) throws IOException {
             errorExit(th);
             return null;
         } finally {
-            BTraceRuntime.enter();
+            if (! enteredHere) BTraceRuntime.enter();
         }
         return this.btraceClazz;
     }

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -498,7 +498,7 @@ protected void onAfterTypeCheck(int opcode, String desc) {
                 // <editor-fold defaultstate="collapsed" desc="Method Entry Instrumentor">
                 return new MethodEntryInstrumentor(lvs, access, name, desc) {
                     private void preMatchAction(Type[] args, int probeArgsLength) {
-                        int argPtr = isStatic() ? 1 : 0;
+                        int argPtr = isStatic() ? 0 : 1;
                         int argIndex = 0;
                         for (int i = 0; i < probeArgsLength; i++) {
                             if (i == om.getSelfParameter()) {
@@ -514,7 +514,7 @@ private void preMatchAction(Type[] args, int probeArgsLength) {
                     }
 
                     private void preAnyTypeAction(Type[] args, int probeArgsLength) {
-                        int argPtr = isStatic() ? 1 : 0;
+                        int argPtr = isStatic() ? 0 : 1;
                         for (int i = 0; i < probeArgsLength; i++) {
                             if (i == om.getSelfParameter()) {
                                 if (!isStatic()) {

File: src/share/classes/com/sun/btrace/runtime/MethodInstrumentor.java
Patch:
@@ -178,7 +178,7 @@ public void loadThis() {
         super.visitVarInsn(ALOAD, 0);
     }
 
-    public void loadArgumentArray() {
+    public int loadArgumentArray() {
         int count = argumentTypes.length;
         boolean isStatic = ((access & ACC_STATIC) != 0);
         push(count);
@@ -191,6 +191,7 @@ public void loadArgumentArray() {
             box(argumentTypes[i]);
             arrayStore(TypeUtils.objectType);
         }
+        return count;
     }
 
     protected final boolean isStatic() {

File: src/share/classes/com/sun/btrace/BTraceUtils.java
Patch:
@@ -991,6 +991,7 @@ public static Class probeClass() {
     /**
      * Returns the currently probed method's name.
      */
+    @Deprecated
     public static String probeMethod() {
         StackTraceElement[] stack = Thread.currentThread().getStackTrace();
         if (stack.length >= 4) {
@@ -3254,7 +3255,7 @@ public static AggregationKey newAggregationKey(Object element1, Object element2,
      *
      * @param aggregation the aggregation to which the value should be added
      */
-    public static void addToAggregation(Aggregation aggregation, int value) {
+    public static void addToAggregation(Aggregation aggregation, long value) {
         BTraceRuntime.addToAggregation(aggregation, value);
     }
 
@@ -3266,7 +3267,7 @@ public static void addToAggregation(Aggregation aggregation, int value) {
      * @param aggregation the aggregation to which the value should be added
      * @param key the grouping aggregation key
      */
-    public static void addToAggregation(Aggregation aggregation, AggregationKey key, int value) {
+    public static void addToAggregation(Aggregation aggregation, AggregationKey key, long value) {
         BTraceRuntime.addToAggregation(aggregation, key, value);
     }
 

File: src/share/classes/com/sun/btrace/runtime/Instrumentor.java
Patch:
@@ -282,7 +282,7 @@ protected void onAfterArrayStore(int opcode) {
 
                     @Override
                     public void visitCode() {
-                        maxLocal = getArgumentTypes().length;
+                        maxLocal = getArgumentTypes().length + (isStatic() ? 0 : 1);
                         super.visitCode();
                     }
 

File: extra/visualvm-plugin-suite/visualvm-plugin/src/net/java/btrace/visualvm/views/BTraceTaskView.java
Patch:
@@ -49,6 +49,7 @@ protected DataViewComponent createComponent() {
             public void stateChanged(BTraceTask.State state) {
                 if (state == BTraceTask.State.STARTING) {
                     output.clear();
+                    dvc.showDetailsArea(DataViewComponent.BOTTOM_LEFT);
                 } else if (state == BTraceTask.State.RUNNING) {
                     dvc.showDetailsArea(DataViewComponent.BOTTOM_LEFT);
                 }

File: src/share/classes/com/sun/btrace/runtime/ErrorReturnInstrumentor.java
Patch:
@@ -56,13 +56,13 @@ public ErrorReturnInstrumentor(MethodVisitor mv, int access,
     }
 
     public void visitCode() {
-        visitTryCatchBlock(start, end, end, JAVA_LANG_THROWABLE);
         visitLabel(start);
         super.visitCode();
     }
 
     public void visitMaxs(int maxStack, int maxLocals) {
         visitLabel(end);
+        visitTryCatchBlock(start, end, end, JAVA_LANG_THROWABLE);
         onErrorReturn();
         visitInsn(ATHROW);
         super.visitMaxs(maxStack, maxLocals);

File: src/share/classes/com/sun/btrace/BTraceMBean.java
Patch:
@@ -92,7 +92,7 @@ public BTraceMBean(Class clazz) {
     public synchronized Object getAttribute(String name)
             throws AttributeNotFoundException {
         Field field = attributes.get(name);
-        if (field != null) {
+        if (field == null) {
             throw new AttributeNotFoundException("No such property: " + name);
         }
         return getFieldValue(field);

File: src/share/classes/com/sun/btrace/BTraceUtils.java
Patch:
@@ -2324,7 +2324,7 @@ public static <E> boolean isEmpty(Collection<E> coll) {
     }
 
     public static <E> boolean contains(Collection<E> coll, Object obj) {  
-        return BTraceUtils.contains(coll, obj);
+        return BTraceRuntime.contains(coll, obj);
     }
 
     public static boolean contains(Object[] array, Object value) {

File: src/share/classes/com/sun/btrace/runtime/InstrumentUtils.java
Patch:
@@ -69,7 +69,8 @@ public static void accept(ClassReader reader, ClassVisitor visitor, int flags) {
     private static boolean isJDK16OrAbove(byte[] code) {
         // skip 0xCAFEBABE magic and minor version
         final int majorOffset = 4 + 2;
-        int major = 0x0FFFF & ((code[majorOffset] << 8) | code[majorOffset + 1]);
+        int major = (((code[majorOffset] << 8) & 0xFF00) | 
+                ((code[majorOffset + 1]) & 0xFF));
         return major >= 50;
     }
     

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -1707,12 +1707,12 @@ public MemoryClassLoader run() {
         for (int index = 0; index < timerHandlers.length; index++) {
             Method m = timerHandlers[index];
             try {
-                final String className = "BTraceRunnable$" + index;                    
+                final String className = "com/sun/btrace/BTraceRunnable$" + index;                    
                 final byte[] buf = gen.generate(m, className);
                 Class cls = AccessController.doPrivileged(
                     new PrivilegedExceptionAction<Class>() {        
                         public Class run() throws Exception {
-                             return loader.loadClass(className, buf);
+                             return loader.loadClass(className.replace('/', '.'), buf);
                         }
                     });   
                 runnables[index] = (Runnable) cls.newInstance();

File: src/share/classes/com/sun/btrace/runtime/MethodInstrumentor.java
Patch:
@@ -357,6 +357,7 @@ public void unbox(String desc) {
         switch (typeCode) {
             case '[':
             case 'L':
+                super.visitTypeInsn(CHECKCAST, Type.getType(desc).getInternalName());
                 break;
             case 'Z':
                 super.visitTypeInsn(CHECKCAST, JAVA_LANG_BOOLEAN);

File: src/share/classes/com/sun/btrace/runtime/MethodInstrumentor.java
Patch:
@@ -69,7 +69,7 @@ public class MethodInstrumentor extends MethodAdapter {
 
     public static final String BOX_VALUEOF = "valueOf";
     public static final String BOX_BOOLEAN_DESC = "(Z)Ljava/lang/Boolean;";
-    public static final String BOX_CHARACTER_DESC = "(B)Ljava/lang/Character;";
+    public static final String BOX_CHARACTER_DESC = "(C)Ljava/lang/Character;";
     public static final String BOX_BYTE_DESC = "(B)Ljava/lang/Byte;";
     public static final String BOX_SHORT_DESC = "(S)Ljava/lang/Short;";
     public static final String BOX_INTEGER_DESC = "(I)Ljava/lang/Integer;";

File: src/share/classes/com/sun/btrace/BTraceRuntime.java
Patch:
@@ -59,6 +59,7 @@
 import com.sun.btrace.comm.NumberMapDataCommand;
 import com.sun.btrace.comm.StringMapDataCommand;
 import com.sun.btrace.comm.GridDataCommand;
+import com.sun.btrace.BTraceMBean;
 import java.io.BufferedOutputStream;
 import java.io.BufferedWriter;
 import java.io.File;
@@ -1862,6 +1863,8 @@ private void init(Class cl) {
 
         timerHandlers = new Method[timersList.size()];
         timersList.toArray(timerHandlers);
+        
+        BTraceMBean.registerMBean(clazz);
     }
 
     private static String resolveFileName(String name) {

File: src/share/classes/com/sun/btrace/client/Client.java
Patch:
@@ -49,9 +49,9 @@
 import com.sun.btrace.comm.WireIO;
 import com.sun.btrace.util.NullVisitor;
 import com.sun.tools.attach.VirtualMachine;
-import org.objectweb.asm.ClassReader;
-import org.objectweb.asm.AnnotationVisitor;
-import org.objectweb.asm.Type;
+import com.sun.btrace.org.objectweb.asm.ClassReader;
+import com.sun.btrace.org.objectweb.asm.AnnotationVisitor;
+import com.sun.btrace.org.objectweb.asm.Type;
 
 /**
  * This class represents a BTrace client. This can be

File: src/share/classes/com/sun/btrace/runtime/Constants.java
Patch:
@@ -34,7 +34,7 @@
 import com.sun.btrace.annotations.Where;
 import com.sun.btrace.BTraceUtils;
 import com.sun.btrace.AnyType;
-import org.objectweb.asm.Type;
+import com.sun.btrace.org.objectweb.asm.Type;
 
 /**
  * Constants shared by few classes.

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -26,11 +26,11 @@
 package com.sun.btrace.runtime;
 
 import com.sun.btrace.AnyType;
-import static org.objectweb.asm.Opcodes.*;
+import static com.sun.btrace.org.objectweb.asm.Opcodes.*;
 import java.util.Map;
 import java.util.HashMap;
 import java.util.StringTokenizer;
-import org.objectweb.asm.Type;
+import com.sun.btrace.org.objectweb.asm.Type;
 
 class TypeUtils {
     private TypeUtils() {}

File: src/share/classes/com/sun/btrace/comm/NumberMapDataCommand.java
Patch:
@@ -46,7 +46,7 @@ public NumberMapDataCommand() {
 
     public NumberMapDataCommand(String name, Map<String, ? extends Number> data) {
         super(NUMBER_MAP, name);
-        this.data = data;
+        this.data = (data != null)? new HashMap<String, Number>(data) : null;
     }
 
     public Map<String, ? extends Number> getData() {

File: src/share/classes/com/sun/btrace/comm/StringMapDataCommand.java
Patch:
@@ -46,7 +46,7 @@ public StringMapDataCommand() {
 
     public StringMapDataCommand(String name, Map<String, String> data) {
         super(STRING_MAP, name);
-        this.data = data;
+        this.data = (data != null)? new HashMap(data) : data;
     }
     
     public Map<String, String> getData() {

File: src/share/classes/com/sun/btrace/BTraceMap.java
Patch:
@@ -36,7 +36,7 @@
  * @author A. Sundararajan
  */
 final class BTraceMap<K,V> implements Map<K,V> {
-    private int numItems;
+    //private int numItems;
     private final Map<K,V> m;
     BTraceMap(Map<K,V> m) {
         if (m == null) {

File: src/share/classes/com/sun/btrace/compiler/Compiler.java
Patch:
@@ -128,8 +128,8 @@ public static void main(String[] args) throws Exception {
             new PrintWriter(System.err), ".", classPath);
         if (classes != null) {
             // write .class files.
-            for (String c : classes.keySet()) {
-                String name = c.replace(".", File.separator);
+            for (Map.Entry<String, byte[]> c : classes.entrySet()) {
+                String name = c.getKey().replace(".", File.separator);
                 int index = name.lastIndexOf(File.separatorChar);
                 String dir = outputDir + File.separator;
                 if (index != -1) {
@@ -145,7 +145,7 @@ public static void main(String[] args) throws Exception {
                 file += ".class";              
                 File out = new File(dir, file);
                 FileOutputStream fos = new FileOutputStream(out);
-                fos.write(classes.get(c));
+                fos.write(c.getValue());
                 fos.close();
             }
         }

File: src/share/classes/com/sun/btrace/runtime/MethodInstrumentor.java
Patch:
@@ -195,7 +195,7 @@ public void push(int value) {
         } else if (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) {
             super.visitIntInsn(SIPUSH, value);
         } else {
-            super.visitLdcInsn(new Integer(value));
+            super.visitLdcInsn(Integer.valueOf(value));
         }
     }
 
@@ -314,6 +314,7 @@ public void box(String desc) {
                 super.visitMethodInsn(INVOKESTATIC, JAVA_LANG_CHARACTER,
                                 BOX_VALUEOF, 
                                 BOX_CHARACTER_DESC);
+                break;
             case 'B':
                 super.visitMethodInsn(INVOKESTATIC, JAVA_LANG_BYTE,
                                 BOX_VALUEOF, 

File: src/share/classes/com/sun/btrace/runtime/Preprocessor.java
Patch:
@@ -249,6 +249,8 @@ public class Preprocessor extends ClassAdapter {
            BTRACE_RUNTIME_PUT_PERFDOUBLE = putPerfDouble.getName();
            BTRACE_RUNTIME_PUT_PERFDOUBLE_DESC = 
                        Type.getMethodDescriptor(putPerfDouble);           
+       } catch (RuntimeException re) {
+           throw re;
        } catch (Exception exp) {
            throw new RuntimeException(exp);
        }

File: src/share/classes/com/sun/btrace/agent/Main.java
Patch:
@@ -39,10 +39,7 @@
 import java.util.Map;
 import java.util.StringTokenizer;
 import java.util.jar.JarFile;
-import java.lang.instrument.ClassFileTransformer;
-import java.security.ProtectionDomain;
 import com.sun.btrace.BTraceRuntime;
-import com.sun.btrace.runtime.Constants;
 import com.sun.btrace.runtime.OnProbe;
 import com.sun.btrace.runtime.OnMethod;
 import com.sun.btrace.runtime.ProbeDescriptor;

File: src/share/classes/com/sun/btrace/runtime/InstrumentUtils.java
Patch:
@@ -25,7 +25,9 @@
 
 package com.sun.btrace.runtime;
 
-import org.objectweb.asm.*;
+import org.objectweb.asm.ClassReader;
+import org.objectweb.asm.ClassVisitor;
+import org.objectweb.asm.ClassWriter;
 import static org.objectweb.asm.Opcodes.*;
 import static com.sun.btrace.runtime.Constants.JAVA_LANG_OBJECT;
 

File: src/share/classes/com/sun/btrace/runtime/MethodInstrumentor.java
Patch:
@@ -25,7 +25,9 @@
 
 package com.sun.btrace.runtime;
 
-import org.objectweb.asm.*;
+import org.objectweb.asm.MethodAdapter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Type;
 import static org.objectweb.asm.Opcodes.*;
 
 /**

File: src/share/classes/com/sun/btrace/runtime/RunnableGeneratorImpl.java
Patch:
@@ -25,12 +25,13 @@
 
 package com.sun.btrace.runtime;
 
-import org.objectweb.asm.*;
 import static org.objectweb.asm.Opcodes.*;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
-import java.io.*;
 import com.sun.btrace.RunnableGenerator;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Type;
 
 /**
  * This class generates a java.lang.Runnable implementation 

File: src/share/classes/com/sun/btrace/runtime/TypeUtils.java
Patch:
@@ -26,11 +26,11 @@
 package com.sun.btrace.runtime;
 
 import com.sun.btrace.AnyType;
-import org.objectweb.asm.*;
 import static org.objectweb.asm.Opcodes.*;
 import java.util.Map;
 import java.util.HashMap;
 import java.util.StringTokenizer;
+import org.objectweb.asm.Type;
 
 class TypeUtils {
     private TypeUtils() {}

