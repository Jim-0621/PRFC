File: java/admin/src/main/java/com/exadel/frs/repository/AppRepository.java
Patch:
@@ -28,4 +28,6 @@ public interface AppRepository extends JpaRepository<App, Long> {
     List<App> findAllByUserAppRoles_Id_UserId(Long userId);
 
     boolean existsByName(String name);
+
+    List<App> findAllByOrderByNameAsc();
 }

File: java/admin/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -100,7 +100,7 @@ public List<App> getApps(final Long userId) {
             return appRepository.findAllByUserAppRoles_Id_UserId(userId);
         }
 
-        return appRepository.findAll();
+        return appRepository.findAllByOrderByNameAsc();
     }
 
     public AppRole[] getAppRolesToAssign(final String appGuid, final Long userId) {

File: java/admin/src/main/java/com/exadel/frs/service/StatisticService.java
Patch:
@@ -6,7 +6,6 @@
 import com.exadel.frs.commonservice.entity.InstallInfo;
 import com.exadel.frs.commonservice.projection.ModelSubjectProjection;
 import com.exadel.frs.commonservice.entity.User;
-import com.exadel.frs.commonservice.exception.ApperyServiceException;
 import com.exadel.frs.commonservice.repository.InstallInfoRepository;
 import com.exadel.frs.commonservice.repository.ModelRepository;
 import com.exadel.frs.commonservice.repository.UserRepository;
@@ -100,8 +99,7 @@ private void sendStatistics(List<StatisticsFacesEntity> statistics) {
             statistics
                     .forEach(statistic -> apperyClient.create(apperyApiKey, statistic));
         } catch (FeignException e) {
-            log.error(e.getMessage(), e);
-            throw new ApperyServiceException();
+            log.info(e.getMessage());
         }
     }
 }

File: java/admin/src/test/java/com/exadel/frs/service/AppServiceTest.java
Patch:
@@ -115,7 +115,7 @@ void successGetAppsForGlobalAdmin() {
                 .guid(APPLICATION_GUID)
                 .build();
 
-        when(appRepositoryMock.findAll()).thenReturn(List.of(app));
+        when(appRepositoryMock.findAllByOrderByNameAsc()).thenReturn(List.of(app));
         when(userServiceMock.getUser(USER_ID)).thenReturn(user);
 
         val result = appService.getApps(USER_ID);

File: java/common/src/main/java/com/exadel/frs/commonservice/aspect/StatisticsCollectionAspect.java
Patch:
@@ -5,7 +5,6 @@
 import com.exadel.frs.commonservice.entity.User;
 import com.exadel.frs.commonservice.enums.GlobalRole;
 import com.exadel.frs.commonservice.enums.StatisticsType;
-import com.exadel.frs.commonservice.exception.ApperyServiceException;
 import com.exadel.frs.commonservice.repository.InstallInfoRepository;
 import com.exadel.frs.commonservice.repository.UserRepository;
 import com.exadel.frs.commonservice.system.feign.ApperyStatisticsClient;
@@ -72,7 +71,7 @@ public void afterMethodInvocation(JoinPoint joinPoint, Object result) {
                     new StatisticsGeneralEntity(getInstallGuid(), statisticsType)
             );
         } catch (FeignException exception) {
-            throw new ApperyServiceException();
+            log.info(exception.getMessage());
         }
     }
 }

File: java/admin/src/test/java/com/exadel/frs/service/AppServiceTest.java
Patch:
@@ -115,7 +115,7 @@ void successGetAppsForGlobalAdmin() {
                 .guid(APPLICATION_GUID)
                 .build();
 
-        when(appRepositoryMock.findAll()).thenReturn(List.of(app));
+        when(appRepositoryMock.findAllByOrderByNameAsc()).thenReturn(List.of(app));
         when(userServiceMock.getUser(USER_ID)).thenReturn(user);
 
         val result = appService.getApps(USER_ID);

File: java/common/src/main/java/com/exadel/frs/commonservice/system/liquibase/FacesToSubjectsMigration.java
Patch:
@@ -1,6 +1,5 @@
-package com.exadel.frs.commonservice.system.liquibase.customchange;
+package com.exadel.frs.commonservice.system.liquibase;
 
-import com.exadel.frs.commonservice.system.liquibase.FacesToSubjectMigrationProcessor;
 import liquibase.change.custom.CustomTaskChange;
 import liquibase.database.Database;
 import liquibase.exception.CustomChangeException;
@@ -15,7 +14,7 @@
 import java.util.Optional;
 
 @Slf4j
-public class FacesToSubjectsMigrationCustomChange implements CustomTaskChange {
+public class FacesToSubjectsMigration implements CustomTaskChange {
 
     private ResourceAccessor resourceAccessor;
     private FacesToSubjectMigrationProcessor processor;

File: java/common/src/main/java/com/exadel/frs/commonservice/system/liquibase/FacesToSubjectsMigration.java
Patch:
@@ -1,6 +1,5 @@
-package com.exadel.frs.commonservice.system.liquibase.customchange;
+package com.exadel.frs.commonservice.system.liquibase;
 
-import com.exadel.frs.commonservice.system.liquibase.FacesToSubjectMigrationProcessor;
 import liquibase.change.custom.CustomTaskChange;
 import liquibase.database.Database;
 import liquibase.exception.CustomChangeException;
@@ -15,7 +14,7 @@
 import java.util.Optional;
 
 @Slf4j
-public class FacesToSubjectsMigrationCustomChange implements CustomTaskChange {
+public class FacesToSubjectsMigration implements CustomTaskChange {
 
     private ResourceAccessor resourceAccessor;
     private FacesToSubjectMigrationProcessor processor;

File: java/admin/src/main/java/com/exadel/frs/service/StatisticService.java
Patch:
@@ -4,7 +4,7 @@
 import static org.apache.commons.lang3.Range.between;
 import static org.apache.commons.lang3.StringUtils.isNotBlank;
 import com.exadel.frs.commonservice.entity.InstallInfo;
-import com.exadel.frs.commonservice.entity.ModelSubjectProjection;
+import com.exadel.frs.commonservice.projection.ModelSubjectProjection;
 import com.exadel.frs.commonservice.entity.User;
 import com.exadel.frs.commonservice.exception.ApperyServiceException;
 import com.exadel.frs.commonservice.repository.InstallInfoRepository;
@@ -78,8 +78,8 @@ private List<StatisticsFacesEntity> createStatistics(String installInfoGuid, Lis
     private StatisticsFacesEntity createStatistic(String installInfoGuid, ModelSubjectProjection subjectCount) {
         return new StatisticsFacesEntity(
                 installInfoGuid,
-                subjectCount.getGuid(),
-                getSubjectRange(subjectCount.getSubjectCount())
+                subjectCount.guid(),
+                getSubjectRange(subjectCount.subjectCount())
         );
     }
 

File: java/admin/src/main/java/com/exadel/frs/helpers/EmailSender.java
Patch:
@@ -45,7 +45,7 @@ public void sendMail(final String to, final String subject, final String message
         }
         helper.setTo(to);
         helper.setSubject(subject);
-        helper.setText(message);
+        helper.setText(message, true);
 
         try {
             javaMailSender.send(msg);

File: java/admin/src/test/java/com/exadel/frs/service/UserServiceTest.java
Patch:
@@ -115,6 +115,7 @@ void failGetUser() {
     @Test
     void successCreateUserWhenMailServerEnabled() {
         when(env.getProperty("spring.mail.enable")).thenReturn("true");
+        when(env.getProperty("host.frs")).thenReturn("http://localhost");
         when(userRepositoryMock.save(any())).thenAnswer(returnsFirstArg());
         val userCreateDto = UserCreateDto.builder()
                                          .email("email@example.com")
@@ -272,6 +273,7 @@ void confirmRegistrationReturns403WhenTokenIsExpired() {
     void confirmRegistrationEnablesUserAndRemovesTokenWhenSuccess() {
         when(userRepositoryMock.save(any())).thenAnswer(returnsFirstArg());
         when(env.getProperty("spring.mail.enable")).thenReturn("true");
+        when(env.getProperty("host.frs")).thenReturn("http://localhost");
         val userCreateDto = UserCreateDto.builder()
                                          .email("email@example.com")
                                          .password("password")

File: java/admin/src/main/java/com/exadel/frs/helpers/EmailSender.java
Patch:
@@ -45,7 +45,7 @@ public void sendMail(final String to, final String subject, final String message
         }
         helper.setTo(to);
         helper.setSubject(subject);
-        helper.setText(message);
+        helper.setText(message, true);
 
         try {
             javaMailSender.send(msg);

File: java/admin/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -115,6 +115,7 @@ void failGetUser() {
     @Test
     void successCreateUserWhenMailServerEnabled() {
         when(env.getProperty("spring.mail.enable")).thenReturn("true");
+        when(env.getProperty("host.frs")).thenReturn("http://localhost");
         when(userRepositoryMock.save(any())).thenAnswer(returnsFirstArg());
         val userCreateDto = UserCreateDto.builder()
                                          .email("email@example.com")
@@ -272,6 +273,7 @@ void confirmRegistrationReturns403WhenTokenIsExpired() {
     void confirmRegistrationEnablesUserAndRemovesTokenWhenSuccess() {
         when(userRepositoryMock.save(any())).thenAnswer(returnsFirstArg());
         when(env.getProperty("spring.mail.enable")).thenReturn("true");
+        when(env.getProperty("host.frs")).thenReturn("http://localhost");
         val userCreateDto = UserCreateDto.builder()
                                          .email("email@example.com")
                                          .password("password")

File: java/common/src/main/java/com/exadel/frs/commonservice/enums/TableLockName.java
Patch:
@@ -2,5 +2,5 @@
 
 public enum TableLockName {
 
-    MODEL_STATISTIC_LOCK;
+    MODEL_STATISTIC_LOCK
 }

File: java/common/src/main/java/com/exadel/frs/commonservice/repository/UserRepository.java
Patch:
@@ -43,6 +43,9 @@ public interface UserRepository extends JpaRepository<User, Long> {
 
     User findByGlobalRole(GlobalRole role);
 
+    @Query("select count(u) > 0 from User u where u.globalRole = 'O'")
+    boolean isOwnerPresent();
+
     int deleteByEnabledFalseAndRegTimeBefore(LocalDateTime time);
 
     Optional<User> findByRegistrationToken(String token);

File: java/api/src/test/java/com/exadel/frs/core/trainservice/service/EmbeddingsVerificationProcessServiceImplTest.java
Patch:
@@ -61,7 +61,7 @@ void processEmbeddings_ThereAreTwoEmbeddingsInTheDatabase_ShouldReturnTwoSimilar
 
         when(predictor.verify(source, targets)).thenReturn(similarities);
 
-        var results = verificationProcessService.processEmbeddings(params).getResults();
+        var results = verificationProcessService.processEmbeddings(params).getResult();
 
         assertThat(results).isNotEmpty().hasSize(2);
 

File: java/api/src/test/java/com/exadel/frs/core/trainservice/service/SubjectServiceTest.java
Patch:
@@ -271,7 +271,7 @@ void verifyEmbedding_ThereAreTwoTargetsAndOneSourceInTheDatabase_ShouldReturnTwo
         when(classifierPredictor.verify(apiKey, targets[0], sourceId)).thenReturn(0.5);
         when(classifierPredictor.verify(apiKey, targets[1], sourceId)).thenReturn(1.0);
 
-        var results = subjectService.verifyEmbedding(params).getResults();
+        var results = subjectService.verifyEmbedding(params).getResult();
 
         assertThat(results).isNotEmpty().hasSize(2);
 

File: java/admin/src/main/java/com/exadel/frs/controller/AppController.java
Patch:
@@ -35,10 +35,12 @@
 import javax.validation.Valid;
 import java.util.List;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
 import static org.springframework.http.HttpStatus.CREATED;
 
 @RestController
+@RequestMapping(ADMIN)
 @RequiredArgsConstructor
 public class AppController {
 

File: java/admin/src/main/java/com/exadel/frs/controller/AppStatusController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.controller;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.commonservice.enums.AppStatus.NOT_READY;
 import static com.exadel.frs.commonservice.enums.AppStatus.OK;
 import com.exadel.frs.commonservice.enums.AppStatus;
@@ -11,10 +12,12 @@
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 @Slf4j
 @RestController
+@RequestMapping(ADMIN)
 @RequiredArgsConstructor
 public class AppStatusController {
 

File: java/admin/src/main/java/com/exadel/frs/controller/ModelController.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.controller;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
 import static java.time.LocalDateTime.now;
 import static java.time.ZoneOffset.UTC;
@@ -51,7 +52,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@RequestMapping("/app/{appGuid}")
+@RequestMapping(ADMIN + "/app/{appGuid}")
 @RequiredArgsConstructor
 public class ModelController {
 

File: java/admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.controller;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.DEMO_GUID;
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
 import static org.springframework.http.HttpStatus.CREATED;
@@ -70,7 +71,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@RequestMapping("/user")
+@RequestMapping(ADMIN + "/user")
 @RequiredArgsConstructor
 public class UserController {
 

File: java/admin/src/main/java/com/exadel/frs/system/global/Constants.java
Patch:
@@ -18,6 +18,7 @@
 
 public class Constants {
 
+    public static final String ADMIN = "/admin";
     public static final String GUID_EXAMPLE = "3913717b-a40b-4d6f-acc4-a861aa612651";
     public static final String ACCESS_TOKEN_COOKIE_NAME = "CFSESSION";
     public static final String REFRESH_TOKEN_COOKIE_NAME = "REFRESH_TOKEN";

File: java/admin/src/main/java/com/exadel/frs/system/security/config/AuthServerConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.security.config;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static java.util.stream.Collectors.toList;
 import com.exadel.frs.system.security.AuthenticationKeyGeneratorImpl;
 import com.exadel.frs.system.security.CustomOAuth2Exception;
@@ -120,7 +121,8 @@ public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
                 .tokenStore(tokenStore())
                 .tokenServices(tokenServices())
                 .authenticationManager(authenticationManager)
-                .userDetailsService(userDetailsService);
+                .userDetailsService(userDetailsService)
+                .pathMapping("/oauth/token", ADMIN + "/oauth/token");
 
         endpoints.exceptionTranslator(exception -> {
             if (exception instanceof OAuth2Exception) {

File: java/admin/src/main/java/com/exadel/frs/system/security/config/ResourceServerConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.security.config;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import com.exadel.frs.system.security.CookieTokenExtractor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Configuration;
@@ -40,7 +41,8 @@ public void configure(HttpSecurity http) throws Exception {
         http.csrf()
             .disable()
             .authorizeRequests()
-            .antMatchers("/actuator/**", "/user/register", "/user/forgot-password", "/user/reset-password", "/user/registration/confirm", "/user/demo/model", "/api/**", "/status").permitAll()
+            .antMatchers("/actuator/**", ADMIN + "/user/register", ADMIN + "/user/forgot-password", ADMIN + "/user/reset-password",
+                    ADMIN + "/user/registration/confirm", ADMIN + "/user/demo/model", "/api/**", ADMIN + "/status").permitAll()
             .anyRequest().authenticated()
             .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
     }

File: java/admin/src/main/java/com/exadel/frs/system/security/config/WebSecurityConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.security.config;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import com.exadel.frs.system.security.CustomUserDetailsService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
@@ -51,8 +52,8 @@ protected void configure(HttpSecurity http) throws Exception {
                 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                 .and()
                 .authorizeRequests()
-                .antMatchers(HttpMethod.OPTIONS, "/oauth/**").permitAll()
-                .antMatchers("/actuator/**", "/user/register", "/user/forgot-password", "/user/reset-password", "/api/**").permitAll()
+                .antMatchers(HttpMethod.OPTIONS, ADMIN + "/oauth/**").permitAll()
+                .antMatchers("/actuator/**", ADMIN + "/user/register", ADMIN + "/user/forgot-password", ADMIN + "/user/reset-password", "/api/**").permitAll()
                 .anyRequest().authenticated()
                 .and()
                 .logout()

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/CustomTokenEndpoint.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.system.security.endpoint;
 
 import static com.exadel.frs.system.global.Constants.ACCESS_TOKEN_COOKIE_NAME;
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.REFRESH_TOKEN_COOKIE_NAME;
 import static org.apache.commons.lang3.StringUtils.EMPTY;
 import com.exadel.frs.commonservice.entity.User;
@@ -26,7 +27,7 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 
-@RequestMapping(value = "/oauth/token")
+@RequestMapping(ADMIN + "/oauth/token")
 public class CustomTokenEndpoint extends TokenEndpoint {
 
     @Autowired
@@ -61,7 +62,7 @@ public ResponseEntity<OAuth2AccessToken> postAccessToken(
         headers.add(HttpHeaders.SET_COOKIE, accessTokenCookie);
         headers.add(HttpHeaders.SET_COOKIE, refreshTokenCookie);
 
-        return ResponseEntity.status(HttpStatus.OK).headers(headers).build();
+        return ResponseEntity.status(HttpStatus.OK).headers(headers).body(accessToken);
     }
 
     private String extractRefreshTokenCookieValueFromRequest(final HttpServletRequest request) {

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/RevokeTokenEndpoint.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.system.security.endpoint;
 
 import static com.exadel.frs.system.global.Constants.ACCESS_TOKEN_COOKIE_NAME;
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.REFRESH_TOKEN_COOKIE_NAME;
 import static org.apache.commons.lang3.StringUtils.EMPTY;
 import java.util.Optional;
@@ -26,7 +27,7 @@ public class RevokeTokenEndpoint {
     private final DefaultTokenServices tokenServices;
 
     @ResponseBody
-    @DeleteMapping("/oauth/token")
+    @DeleteMapping(ADMIN + "/oauth/token")
     public ResponseEntity<Void> revokeToken(HttpServletRequest request) {
         if (isAccessTokenBlank(request)) {
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();

File: java/admin/src/main/java/com/exadel/frs/system/swagger/SpringFoxConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.swagger;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.security.client.OAuthClientProperties.ClientType.COMMON;
 import com.exadel.frs.system.security.client.OAuthClientProperties;
 import com.google.common.base.Predicates;
@@ -70,7 +71,7 @@ private OAuth securitySchema() {
         val authorizationScopeList = new ArrayList<AuthorizationScope>();
         authorizationScopeList.add(new AuthorizationScope("read write ", "all"));
         val grantTypes = new ArrayList<GrantType>();
-        val creGrant = new ResourceOwnerPasswordCredentialsGrant(authLink + "/oauth/token");
+        val creGrant = new ResourceOwnerPasswordCredentialsGrant(authLink + ADMIN + "/oauth/token");
         grantTypes.add(creGrant);
 
         return new OAuth("oauth2schema", authorizationScopeList, grantTypes);

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/ConsistenceController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import com.exadel.frs.commonservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.commonservice.system.global.ImageProperties;
 import com.exadel.frs.core.trainservice.dto.VersionConsistenceDto;
@@ -9,8 +10,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
-
 @RestController
 @RequestMapping(API_V1 + "/consistence")
 @RequiredArgsConstructor

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/MigrateController.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import com.exadel.frs.core.trainservice.component.migration.MigrationComponent;
 import com.exadel.frs.core.trainservice.component.migration.MigrationStatusStorage;
 import lombok.RequiredArgsConstructor;
@@ -25,8 +26,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
-
 @RestController
 @RequestMapping(API_V1)
 @RequiredArgsConstructor

File: java/api/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -57,8 +57,9 @@ public class Constants {
     public static final String STATUS = "status";
     public static final String SUBJECT_NAME_IS_EMPTY = "Subject name is empty";
 
+    public static final String NUMBER_VALUE_EXAMPLE = "1";
     public static final String DEMO_API_KEY = "00000000-0000-0000-0000-000000000002";
     public static final String FACENET2018 = "Facenet2018";
     public static final String SERVER_UUID = UUID.randomUUID().toString();
     public static final String CACHE_CONTROL_HEADER_VALUE = "public, max-age=31536000";
-}
\ No newline at end of file
+}

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/CustomTokenEndpoint.java
Patch:
@@ -62,7 +62,7 @@ public ResponseEntity<OAuth2AccessToken> postAccessToken(
         headers.add(HttpHeaders.SET_COOKIE, accessTokenCookie);
         headers.add(HttpHeaders.SET_COOKIE, refreshTokenCookie);
 
-        return ResponseEntity.status(HttpStatus.OK).headers(headers).build();
+        return ResponseEntity.status(HttpStatus.OK).headers(headers).body(accessToken);
     }
 
     private String extractRefreshTokenCookieValueFromRequest(final HttpServletRequest request) {

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/ModelStatisticProjection.java
Patch:
@@ -1,11 +1,11 @@
 package com.exadel.frs.commonservice.entity;
 
-import java.time.LocalDateTime;
+import java.util.Date;
 import lombok.Value;
 
 @Value
 public class ModelStatisticProjection {
 
-    int requestCount;
-    LocalDateTime createdDate;
+    long requestCount;
+    Date createdDate;
 }

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/ConsistenceController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import com.exadel.frs.commonservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.commonservice.system.global.ImageProperties;
 import com.exadel.frs.core.trainservice.dto.VersionConsistenceDto;
@@ -9,8 +10,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
-
 @RestController
 @RequestMapping(API_V1 + "/consistence")
 @RequiredArgsConstructor

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/MigrateController.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import com.exadel.frs.core.trainservice.component.migration.MigrationComponent;
 import com.exadel.frs.core.trainservice.component.migration.MigrationStatusStorage;
 import lombok.RequiredArgsConstructor;
@@ -25,8 +26,6 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
-
 @RestController
 @RequestMapping(API_V1)
 @RequiredArgsConstructor

File: java/api/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -57,8 +57,9 @@ public class Constants {
     public static final String STATUS = "status";
     public static final String SUBJECT_NAME_IS_EMPTY = "Subject name is empty";
 
+    public static final String NUMBER_VALUE_EXAMPLE = "1";
     public static final String DEMO_API_KEY = "00000000-0000-0000-0000-000000000002";
     public static final String FACENET2018 = "Facenet2018";
     public static final String SERVER_UUID = UUID.randomUUID().toString();
     public static final String CACHE_CONTROL_HEADER_VALUE = "public, max-age=31536000";
-}
\ No newline at end of file
+}

File: java/admin/src/test/java/com/exadel/frs/DbHelper.java
Patch:
@@ -36,9 +36,6 @@
 // TODO think about common helper for admin/core
 public class DbHelper {
 
-    @Value("${forgot-password.reset-password-token.expires}")
-    private long resetPasswordTokenExpires;
-
     @Autowired
     AppRepository appRepository;
 

File: java/admin/src/main/java/com/exadel/frs/system/security/config/AuthServerConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.security.config;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static java.util.stream.Collectors.toList;
 import com.exadel.frs.system.security.AuthenticationKeyGeneratorImpl;
 import com.exadel.frs.system.security.CustomOAuth2Exception;
@@ -120,7 +121,8 @@ public void configure(AuthorizationServerEndpointsConfigurer endpoints) {
                 .tokenStore(tokenStore())
                 .tokenServices(tokenServices())
                 .authenticationManager(authenticationManager)
-                .userDetailsService(userDetailsService);
+                .userDetailsService(userDetailsService)
+                .pathMapping("/oauth/token", ADMIN + "/oauth/token");
 
         endpoints.exceptionTranslator(exception -> {
             if (exception instanceof OAuth2Exception) {

File: java/admin/src/main/java/com/exadel/frs/controller/AppController.java
Patch:
@@ -35,10 +35,12 @@
 import javax.validation.Valid;
 import java.util.List;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
 import static org.springframework.http.HttpStatus.CREATED;
 
 @RestController
+@RequestMapping(ADMIN)
 @RequiredArgsConstructor
 public class AppController {
 

File: java/admin/src/main/java/com/exadel/frs/controller/AppStatusController.java
Patch:
@@ -1,16 +1,19 @@
 package com.exadel.frs.controller;
 
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import com.exadel.frs.commonservice.enums.AppStatus;
 import com.exadel.frs.dto.ui.AppStatusResponseDto;
 import io.swagger.annotations.ApiOperation;
 import lombok.RequiredArgsConstructor;
 import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RestController;
 
 import javax.sql.DataSource;
 
 @RestController
+@RequestMapping(ADMIN)
 @RequiredArgsConstructor
 public class AppStatusController {
 

File: java/admin/src/main/java/com/exadel/frs/controller/ModelController.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.controller;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
 import static java.time.LocalDateTime.now;
 import static java.time.ZoneOffset.UTC;
@@ -51,7 +52,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@RequestMapping("/app/{appGuid}")
+@RequestMapping(ADMIN + "/app/{appGuid}")
 @RequiredArgsConstructor
 public class ModelController {
 

File: java/admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.controller;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.DEMO_GUID;
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
 import static org.springframework.http.HttpStatus.CREATED;
@@ -70,7 +71,7 @@
 import org.springframework.web.bind.annotation.RestController;
 
 @RestController
-@RequestMapping("/user")
+@RequestMapping(ADMIN + "/user")
 @RequiredArgsConstructor
 public class UserController {
 

File: java/admin/src/main/java/com/exadel/frs/system/global/Constants.java
Patch:
@@ -18,6 +18,7 @@
 
 public class Constants {
 
+    public static final String ADMIN = "/admin";
     public static final String GUID_EXAMPLE = "3913717b-a40b-4d6f-acc4-a861aa612651";
     public static final String ACCESS_TOKEN_COOKIE_NAME = "CFSESSION";
     public static final String REFRESH_TOKEN_COOKIE_NAME = "REFRESH_TOKEN";

File: java/admin/src/main/java/com/exadel/frs/system/security/config/ResourceServerConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.security.config;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import com.exadel.frs.system.security.CookieTokenExtractor;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Configuration;
@@ -40,7 +41,8 @@ public void configure(HttpSecurity http) throws Exception {
         http.csrf()
             .disable()
             .authorizeRequests()
-            .antMatchers("/actuator/**", "/user/register", "/user/forgot-password", "/user/reset-password", "/user/registration/confirm", "/user/demo/model", "/api/**", "/status").permitAll()
+            .antMatchers("/actuator/**", ADMIN + "/user/register", ADMIN + "/user/forgot-password", ADMIN + "/user/reset-password",
+                    ADMIN + "/user/registration/confirm", ADMIN + "/user/demo/model", "/api/**", ADMIN + "/status").permitAll()
             .anyRequest().authenticated()
             .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
     }

File: java/admin/src/main/java/com/exadel/frs/system/security/config/WebSecurityConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.security.config;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import com.exadel.frs.system.security.CustomUserDetailsService;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.context.annotation.Bean;
@@ -51,8 +52,8 @@ protected void configure(HttpSecurity http) throws Exception {
                 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                 .and()
                 .authorizeRequests()
-                .antMatchers(HttpMethod.OPTIONS, "/oauth/**").permitAll()
-                .antMatchers("/actuator/**", "/user/register", "/user/forgot-password", "/user/reset-password", "/api/**").permitAll()
+                .antMatchers(HttpMethod.OPTIONS, ADMIN + "/oauth/**").permitAll()
+                .antMatchers("/actuator/**", ADMIN + "/user/register", ADMIN + "/user/forgot-password", ADMIN + "/user/reset-password", "/api/**").permitAll()
                 .anyRequest().authenticated()
                 .and()
                 .logout()

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/CustomTokenEndpoint.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.system.security.endpoint;
 
 import static com.exadel.frs.system.global.Constants.ACCESS_TOKEN_COOKIE_NAME;
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.REFRESH_TOKEN_COOKIE_NAME;
 import static org.apache.commons.lang3.StringUtils.EMPTY;
 import com.exadel.frs.commonservice.entity.User;
@@ -26,7 +27,7 @@
 import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 
-@RequestMapping(value = "/oauth/token")
+@RequestMapping(ADMIN + "/oauth/token")
 public class CustomTokenEndpoint extends TokenEndpoint {
 
     @Autowired

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/RevokeTokenEndpoint.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.system.security.endpoint;
 
 import static com.exadel.frs.system.global.Constants.ACCESS_TOKEN_COOKIE_NAME;
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.global.Constants.REFRESH_TOKEN_COOKIE_NAME;
 import static org.apache.commons.lang3.StringUtils.EMPTY;
 import java.util.Optional;
@@ -26,7 +27,7 @@ public class RevokeTokenEndpoint {
     private final DefaultTokenServices tokenServices;
 
     @ResponseBody
-    @DeleteMapping("/oauth/token")
+    @DeleteMapping(ADMIN + "/oauth/token")
     public ResponseEntity<Void> revokeToken(HttpServletRequest request) {
         if (isAccessTokenBlank(request)) {
             return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();

File: java/admin/src/main/java/com/exadel/frs/system/swagger/SpringFoxConfig.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.system.swagger;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static com.exadel.frs.system.security.client.OAuthClientProperties.ClientType.COMMON;
 import com.exadel.frs.system.security.client.OAuthClientProperties;
 import com.google.common.base.Predicates;
@@ -70,7 +71,7 @@ private OAuth securitySchema() {
         val authorizationScopeList = new ArrayList<AuthorizationScope>();
         authorizationScopeList.add(new AuthorizationScope("read write ", "all"));
         val grantTypes = new ArrayList<GrantType>();
-        val creGrant = new ResourceOwnerPasswordCredentialsGrant(authLink + "/oauth/token");
+        val creGrant = new ResourceOwnerPasswordCredentialsGrant(authLink + ADMIN + "/oauth/token");
         grantTypes.add(creGrant);
 
         return new OAuth("oauth2schema", authorizationScopeList, grantTypes);

File: java/admin/src/test/java/com/exadel/frs/system/security/endpoint/CustomTokenEndpointTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.system.security.endpoint;
 
+import static com.exadel.frs.system.global.Constants.ADMIN;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.Mockito.when;
 import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.httpBasic;
@@ -194,7 +195,7 @@ private void registerMockUser() {
                            .password("password")
                            .build();
 
-        mockMvc.perform(post("/user/register")
+        mockMvc.perform(post(ADMIN + "/user/register")
                        .contentType("application/json")
                        .accept("application/json")
                        .content(objectMapper.writeValueAsString(mockUser)))

File: java/admin/src/test/java/com/exadel/frs/ResetPasswordTokenServiceTestIT.java
Patch:
@@ -24,7 +24,9 @@
 import org.springframework.core.env.Environment;
 import org.springframework.transaction.annotation.Transactional;
 
-@SpringBootTest
+@SpringBootTest(properties = {
+        "spring.mail.enable=true"
+})
 @Transactional
 class ResetPasswordTokenServiceTestIT extends EmbeddedPostgreSQLTest {
 

File: java/api/src/test/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilterTest.java
Patch:
@@ -124,12 +124,10 @@ void testDoFilterWithoutApiKey() throws IOException, ServletException {
     @Test
     void testDoFilterWithValidApiKey() throws IOException, ServletException {
         var validationResult = new ModelValidationResult(1L, OK);
-        var statisticCacheEntry = new ModelStatisticCacheEntry();
 
         when(httpServletRequest.getHeaderNames()).thenReturn(enumeration(singletonList(X_FRS_API_KEY_HEADER)));
         when(httpServletRequest.getHeaders(X_FRS_API_KEY_HEADER)).thenReturn(enumeration(singletonList(VALID_API_KEY)));
         when(modelService.validateModelKey(anyString(), any(ModelType.class))).thenReturn(validationResult);
-        when(modelStatisticCacheProvider.getRequestCount(anyLong())).thenReturn(statisticCacheEntry);
 
         securityValidationFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);
 

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/CustomTokenEndpoint.java
Patch:
@@ -97,7 +97,7 @@ private String buildRefreshTokenCookie(final OAuth2RefreshToken token) {
         return ResponseCookie.from(REFRESH_TOKEN_COOKIE_NAME, value)
                              .httpOnly(true)
                              .maxAge(expiresIn)
-                             .path("/oauth/token")
+                             .path("/admin/oauth/token")
                              .build()
                              .toString();
     }

File: java/admin/src/main/java/com/exadel/frs/system/security/endpoint/CustomTokenEndpoint.java
Patch:
@@ -97,7 +97,7 @@ private String buildRefreshTokenCookie(final OAuth2RefreshToken token) {
         return ResponseCookie.from(REFRESH_TOKEN_COOKIE_NAME, value)
                              .httpOnly(true)
                              .maxAge(expiresIn)
-                             .path("/oauth/token")
+                             .path("/admin/oauth/token")
                              .build()
                              .toString();
     }

File: java/api/src/test/java/com/exadel/frs/core/trainservice/dao/SubjectDaoTest.java
Patch:
@@ -104,8 +104,8 @@ void testRemoveAllSubjectEmbeddings() {
         assertThat(embeddingRepository.findBySubjectId(subject.getId())).isEmpty();
         // no images
         assertThat(imgRepository.getImgByEmbeddingId(subject.getApiKey(), embedding.getId())).isEmpty();
-        // subject still exists
-        assertThat(subjectRepository.findById(subject.getId())).isPresent();
+        // subject doesn't exist
+        assertThat(subjectRepository.findById(subject.getId())).isEmpty();
     }
 
     @Test

File: java/api/src/test/java/com/exadel/frs/core/trainservice/dao/SubjectDaoTest.java
Patch:
@@ -104,8 +104,8 @@ void testRemoveAllSubjectEmbeddings() {
         assertThat(embeddingRepository.findBySubjectId(subject.getId())).isEmpty();
         // no images
         assertThat(imgRepository.getImgByEmbeddingId(subject.getApiKey(), embedding.getId())).isEmpty();
-        // subject still exists
-        assertThat(subjectRepository.findById(subject.getId())).isPresent();
+        // subject doesn't exist
+        assertThat(subjectRepository.findById(subject.getId())).isEmpty();
     }
 
     @Test

File: java/api/src/main/java/com/exadel/frs/core/trainservice/cache/EmbeddingCollection.java
Patch:
@@ -6,7 +6,6 @@
 import com.exadel.frs.commonservice.exception.IncorrectImageIdException;
 import com.google.common.collect.BiMap;
 import com.google.common.collect.HashBiMap;
-import java.util.stream.IntStream;
 import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.val;

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/Model.java
Patch:
@@ -68,6 +68,7 @@ public Model(Model model) {
     @OneToMany(mappedBy = "model", cascade = CascadeType.ALL, orphanRemoval = true)
     private List<AppModel> appModelAccess = new ArrayList<>();
 
+    @Column(name = "created_date")
     private LocalDateTime createdDate;
 
     public void addAppModelAccess(App app, AppModelAccess access) {

File: java/admin/src/main/java/com/exadel/frs/dto/ui/ModelResponseDto.java
Patch:
@@ -19,6 +19,8 @@
 import com.exadel.frs.commonservice.enums.ModelType;
 import lombok.Data;
 
+import java.time.LocalDateTime;
+
 @Data
 public class ModelResponseDto {
 
@@ -28,4 +30,5 @@ public class ModelResponseDto {
     private ModelType type;
     private Long subjectCount;
     private Long imageCount;
+    private LocalDateTime createdDate;
 }
\ No newline at end of file

File: java/admin/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -38,6 +38,7 @@
 import org.springframework.stereotype.Service;
 
 import javax.transaction.Transactional;
+import java.time.LocalDateTime;
 import java.util.*;
 import java.util.stream.Collectors;
 
@@ -138,6 +139,7 @@ public Model buildModel(ModelCreateDto modelCreateDto, App app) {
                 .apiKey(randomUUID().toString())
                 .app(app)
                 .type(ModelType.valueOf(modelCreateDto.getType()))
+                .createdDate(LocalDateTime.now())
                 .build();
     }
 

File: java/admin/src/main/java/com/exadel/frs/system/security/config/ResourceServerConfig.java
Patch:
@@ -40,7 +40,7 @@ public void configure(HttpSecurity http) throws Exception {
         http.csrf()
             .disable()
             .authorizeRequests()
-            .antMatchers("/actuator/**", "/user/register", "/user/registration/confirm", "/user/demo/model", "/api/**").permitAll()
+            .antMatchers("/actuator/**", "/user/register", "/user/registration/confirm", "/user/demo/model", "/api/**", "/status").permitAll()
             .anyRequest().authenticated()
             .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
     }

File: java/admin/src/main/java/com/exadel/frs/dto/ui/ModelResponseDto.java
Patch:
@@ -26,4 +26,6 @@ public class ModelResponseDto {
     private String name;
     private String apiKey;
     private ModelType type;
+    private Long subjectCount;
+    private Long imageCount;
 }
\ No newline at end of file

File: java/common/src/main/java/com/exadel/frs/commonservice/repository/ImgRepository.java
Patch:
@@ -26,4 +26,7 @@ public interface ImgRepository extends PagingAndSortingRepository<Img, UUID> {
 
     @Query("select i from Img i join Embedding e on e.img.id = i.id where e.id = :embeddingId and e.subject.apiKey = :apiKey")
     Optional<Img> getImgByEmbeddingId(@Param("apiKey") String apiKey, @Param("embeddingId") UUID embeddingId);
+
+    @Query("select count(i) from Img i join Embedding e on e.img = i.id join Subject s on e.subject.id = s.id where s.apiKey=:apiKey")
+    Long getImageCountByApiKey(@Param("apiKey") String apiKey);
 }

File: java/common/src/main/java/com/exadel/frs/commonservice/repository/SubjectRepository.java
Patch:
@@ -23,4 +23,6 @@ public interface SubjectRepository extends PagingAndSortingRepository<Subject, U
     @Modifying
     @Query("delete from Subject s where s.apiKey = :apiKey")
     int deleteByApiKey(@Param("apiKey") String apiKey);
+
+    Long countAllByApiKey(String apiKey);
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dao/SubjectDao.java
Patch:
@@ -184,7 +184,7 @@ private Embedding saveEmbeddingInfo(Subject subject, EmbeddingInfo embeddingInfo
         embedding.setSubject(subject);
         embedding.setEmbedding(embeddingInfo.getEmbedding());
         embedding.setCalculator(embeddingInfo.getCalculator());
-        if (embeddingInfo.getSource() != null || imageProperties.isSaveImagesToDB()) {
+        if (embeddingInfo.getSource() != null && imageProperties.isSaveImagesToDB()) {
             Img img = new Img();
             img.setContent(embeddingInfo.getSource());
             imgRepository.save(img);

File: java/api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -134,7 +134,8 @@ private void buildException(final HttpServletResponse response, final ResponseEn
         response.setStatus(responseEntity.getStatusCode().value());
         response.setContentType(MediaType.APPLICATION_JSON_VALUE);
         response.getWriter().append(objectMapper.writeValueAsString(responseEntity.getBody()));
-        response.getWriter().flush();
+        //response.getWriter().flush();
+        //don't need to flush or close the writer
     }
 
     private ModelType getModelTypeByUrl(String url) {

File: java/admin/src/main/java/com/exadel/frs/dto/ui/ChangePasswordDto.java
Patch:
@@ -27,8 +27,8 @@
 @AllArgsConstructor
 public class ChangePasswordDto {
 
-    @NotEmpty(message = "User's old password is incorrect")
-    @Size(min = 8, max = 255, message = "User's old password is incorrect")
+    @NotEmpty(message = "User's password is incorrect")
+    @Size(min = 8, max = 255, message = "User's password is incorrect")
     private String oldPassword;
 
     @NotEmpty(message = "User's new password is incorrect")

File: java/admin/src/main/java/com/exadel/frs/dto/ui/ChangePasswordDto.java
Patch:
@@ -27,8 +27,8 @@
 @AllArgsConstructor
 public class ChangePasswordDto {
 
-    @NotEmpty(message = "User's old password is incorrect")
-    @Size(min = 8, max = 255, message = "User's old password is incorrect")
+    @NotEmpty(message = "User's password is incorrect")
+    @Size(min = 8, max = 255, message = "User's password is incorrect")
     private String oldPassword;
 
     @NotEmpty(message = "User's new password is incorrect")

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/SubjectService.java
Patch:
@@ -16,7 +16,6 @@
 import com.exadel.frs.core.trainservice.dto.FaceVerification;
 import com.exadel.frs.core.trainservice.dto.ProcessImageParams;
 import com.exadel.frs.core.trainservice.system.global.Constants;
-import java.util.stream.Collectors;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.commons.lang3.StringUtils;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/service/EmbeddingServiceTest.java
Patch:
@@ -53,6 +53,7 @@ void testListEmbeddingsWithSubjectName() {
         int count = 1;
         var subjectName = "Johnny Depp";
         dbHelper.insertEmbeddingNoImg(dbHelper.insertSubject(model, subjectName));
+        dbHelper.insertEmbeddingNoImg(dbHelper.insertSubject(model, "Not Johnny Depp"));
 
         var size = 1;
         final Page<EmbeddingProjection> page = embeddingService.listEmbeddings(model.getApiKey(), subjectName, PageRequest.of(0, size));

File: java/common/src/main/java/com/exadel/frs/commonservice/repository/EmbeddingRepository.java
Patch:
@@ -60,7 +60,7 @@ int updateEmbedding(@Param("embeddingId") UUID embeddingId,
             "   Embedding e " +
             " where " +
             "   e.subject.apiKey = :apiKey" +
-            "   and (:subjectName is not null and e.subject.subjectName = :subjectName)")
+            "   and (COALESCE(:subjectName, null) is null or e.subject.subjectName = :subjectName)")
     Page<EmbeddingProjection> findBySubjectApiKeyAndSubjectName(String apiKey, String subjectName, Pageable pageable);
 
     @Query("select distinct(e.calculator) from Embedding e")

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/ResponseExceptionHandler.java
Patch:
@@ -184,15 +184,13 @@ private static BasicException getException(final FieldError fieldError) {
         switch (code) {
             case "NotBlank":
             case "ValidEnum":
+            case "Size":
                 basicException = new ConstraintViolationException(fieldError.getDefaultMessage());
                 break;
             case "NotNull":
             case "NotEmpty":
                 basicException = new EmptyRequiredFieldException(fieldError.getField());
                 break;
-            case "Size":
-                basicException = new ConstraintViolationException(fieldError.getField(), fieldError.getDefaultMessage());
-                break;
             default:
                 basicException = new BasicException(UNDEFINED, "");
         }

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/ResponseExceptionHandler.java
Patch:
@@ -184,15 +184,13 @@ private static BasicException getException(final FieldError fieldError) {
         switch (code) {
             case "NotBlank":
             case "ValidEnum":
+            case "Size":
                 basicException = new ConstraintViolationException(fieldError.getDefaultMessage());
                 break;
             case "NotNull":
             case "NotEmpty":
                 basicException = new EmptyRequiredFieldException(fieldError.getField());
                 break;
-            case "Size":
-                basicException = new ConstraintViolationException(fieldError.getField(), fieldError.getDefaultMessage());
-                break;
             default:
                 basicException = new BasicException(UNDEFINED, "");
         }

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/SubjectDto.java
Patch:
@@ -6,7 +6,7 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import javax.validation.constraints.NotNull;
+import javax.validation.constraints.NotBlank;
 
 import static com.exadel.frs.core.trainservice.system.global.Constants.SUBJECT_DESC;
 
@@ -17,6 +17,6 @@ public class SubjectDto {
 
     @ApiParam(value = SUBJECT_DESC, required = true)
     @JsonProperty("subject")
-    @NotNull
+    @NotBlank(message = "Subject name is empty")
     private String subjectName;
 }

File: java/api/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -55,6 +55,7 @@ public class Constants {
     public static final String SOURCE_IMAGE_DESC = "File to be verified";
     public static final String TARGET_IMAGE_DESC = "Reference file to check the processed file";
     public static final String STATUS = "status";
+    public static final String SUBJECT_NAME_IS_EMPTY = "Subject name is empty";
 
     public static final String DEMO_API_KEY = "00000000-0000-0000-0000-000000000002";
     public static final String FACENET2018 = "Facenet2018";

File: java/api/src/main/java/com/exadel/frs/core/trainservice/cache/EmbeddingCollection.java
Patch:
@@ -138,7 +138,7 @@ public synchronized Optional<INDArray> getRawEmbeddingById(UUID embeddingId) {
         return findByEmbeddingId(
                 embeddingId,
                 // return duplicated row
-                entry -> embeddings.getRow(entry.getValue()).dup()
+                entry -> embeddings.getRow(entry.getValue(), true).dup()
         );
     }
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/EmbeddingController.java
Patch:
@@ -106,7 +106,7 @@ public Faces listEmbeddings(
     @DeleteMapping
     public Map<String, Object> removeAllSubjectEmbeddings(
             @ApiParam(value = API_KEY_DESC, required = true) @RequestHeader(name = X_FRS_API_KEY_HEADER) final String apiKey,
-            @ApiParam(value = SUBJECT_DESC, required = true) @RequestParam(name = SUBJECT) @NotEmpty final String subjectName
+            @ApiParam(value = SUBJECT_DESC) @RequestParam( name = SUBJECT, required = false) final String subjectName
     ) {
         return Map.of(
                 "deleted",

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/ConsistenceController.java
Patch:
@@ -17,7 +17,7 @@
 @RequiredArgsConstructor
 public class ConsistenceController {
 
-    private final String FACENET = "Facenet2018";
+    private final String FACENET = "facenet.Calculator";
 
     private final FacesRepository facesRepository;
     private final FacesApiClient facesApiClient;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/VerifySourceTargetRequest.java
Patch:
@@ -13,12 +13,12 @@
 @NoArgsConstructor
 public class VerifySourceTargetRequest {
 
-    @JsonProperty("source")
+    @JsonProperty("source_image")
     @NotNull
     @ApiParam(value = "Source:" + IMAGE_WITH_ONE_FACE_DESC, required = true)
     private String sourceImageBase64;
 
-    @JsonProperty("target")
+    @JsonProperty("target_image")
     @NotNull
     @ApiParam(value = "Target:" + IMAGE_WITH_ONE_FACE_DESC, required = true)
     private String targetImageBase64;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/VerifySourceTargetRequest.java
Patch:
@@ -13,12 +13,12 @@
 @NoArgsConstructor
 public class VerifySourceTargetRequest {
 
-    @JsonProperty("source")
+    @JsonProperty("source_image")
     @NotNull
     @ApiParam(value = "Source:" + IMAGE_WITH_ONE_FACE_DESC, required = true)
     private String sourceImageBase64;
 
-    @JsonProperty("target")
+    @JsonProperty("target_image")
     @NotNull
     @ApiParam(value = "Target:" + IMAGE_WITH_ONE_FACE_DESC, required = true)
     private String targetImageBase64;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -21,6 +21,7 @@
 import com.exadel.frs.core.trainservice.dto.FaceResponseDto;
 import com.exadel.frs.core.trainservice.dto.FaceVerification;
 import com.exadel.frs.core.trainservice.dto.ProcessImageParams;
+import com.exadel.frs.core.trainservice.dto.UpdateSubjectDto;
 import com.exadel.frs.core.trainservice.service.FaceService;
 import com.exadel.frs.core.trainservice.validation.ImageExtensionValidator;
 import io.swagger.annotations.ApiParam;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/controller/FaceControllerTest.java
Patch:
@@ -35,7 +35,6 @@
 import com.exadel.frs.core.trainservice.config.IntegrationTest;
 import com.exadel.frs.core.trainservice.dto.Base64File;
 import com.exadel.frs.core.trainservice.dto.FaceResponseDto;
-import com.exadel.frs.core.trainservice.dto.VerifyRequest;
 import com.exadel.frs.core.trainservice.repository.AppRepository;
 import com.exadel.frs.core.trainservice.service.FaceService;
 import com.exadel.frs.core.trainservice.validation.ImageExtensionValidator;
@@ -66,7 +65,6 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.mockito.ArgumentMatchers.any;
-import static org.mockito.ArgumentMatchers.isNull;
 import static org.mockito.Mockito.*;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/DemoNotAvailableException.java
Patch:
@@ -16,8 +16,6 @@
 
 package com.exadel.frs.commonservice.exception;
 
-import com.exadel.frs.commonservice.exception.BasicException;
-
 import static com.exadel.frs.commonservice.handler.CrudExceptionCode.DEMO_MODEL_NOT_AVAILABLE;
 
 public class DemoNotAvailableException extends BasicException {

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/CrudExceptionCode.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.exadel.frs.commonservice.handler;
 
-import com.exadel.frs.commonservice.handler.HttpExceptionCode;
 import lombok.AllArgsConstructor;
 import lombok.Getter;
 import org.springframework.http.HttpStatus;

File: java/common/src/main/java/com/exadel/frs/commonservice/sdk/faces/service/FacesRestApiClient.java
Patch:
@@ -82,7 +82,7 @@ private FindFacesResponse findWithCalculator(final MultipartFile photo, final St
                         new FindFacesRequest(imageAsBase64),
                         faceLimit,
                         thresholdC,
-                        facePlugins
+                        finalFacePlugins
                 );
             }
         } catch (FeignException.BadRequest ex) {

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceRecognizeProcessServiceImpl.java
Patch:
@@ -9,8 +9,6 @@
 import com.exadel.frs.core.trainservice.dto.ProcessImageParams;
 import com.exadel.frs.core.trainservice.mapper.FacesMapper;
 import com.exadel.frs.commonservice.sdk.faces.FacesApiClient;
-import com.exadel.frs.core.trainservice.sdk.faces.FacesApiClient;
-import com.exadel.frs.core.trainservice.sdk.faces.feign.dto.FindFacesResponse;
 import com.exadel.frs.core.trainservice.validation.ImageExtensionValidator;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -67,7 +67,7 @@ public int countFacesInModel(final String modelApiKey) {
 
     public Face addNewFace(
             final Embedding embeddings,
-            final MultipartFile file,
+            final byte[] content,
             final String faceName,
             final String modelKey
     ) throws IOException {
@@ -79,8 +79,8 @@ public Face addNewFace(
 
         if (imageProperties.isSaveImagesToDB()) {
             val image = new Image()
-                    .setFaceImg(file.getBytes())
-                    .setRawImg(file.getBytes())
+                    .setFaceImg(content)
+                    .setRawImg(content)
                     .setFace(face);
 
             imagesRepository.save(image);

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceDetectionProcessServiceImpl.java
Patch:
@@ -23,8 +23,8 @@ public FacesDetectionResponseDto processImage(ProcessImageParams processImagePar
         Integer limit = processImageParams.getLimit();
         Double detProbThreshold = processImageParams.getDetProbThreshold();
         String facePlugins = processImageParams.getFacePlugins();
-        FindFacesResponse findFacesResponse;
 
+        FindFacesResponse findFacesResponse;
         if (processImageParams.getFile() != null) {
             MultipartFile file = (MultipartFile) processImageParams.getFile();
             imageExtensionValidator.validate(file);

File: java/api/src/test/java/com/exadel/frs/core/trainservice/dao/FaceDaoTest.java
Patch:
@@ -139,11 +139,11 @@ void addFaceFile() throws IOException {
                            .apiKey(modelKey)
                            .embedding(embedding)
                            .build();
-        val mockFile = new MockMultipartFile("mockFile", faceId.getBytes());
+
         when(imageProperties.isSaveImagesToDB()).thenReturn(true);
         when(facesRepository.save(any(Face.class))).thenReturn(expected);
 
-        val actual = faceDao.addNewFace(embedding, mockFile, faceName, modelKey);
+        val actual = faceDao.addNewFace(embedding, faceId.getBytes(), faceName, modelKey);
 
         assertThat(actual).isNotNull();
         assertThat(actual.getFaceName()).isEqualTo(faceName);

File: java/api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTest.java
Patch:
@@ -182,7 +182,7 @@ void findAndSaveFace() throws IOException {
         when(euclideanDistanceClassifier.normalizeOne(any())).thenReturn(new double[] {EMBEDDING});
         when(facesApiClient.findFacesWithCalculator(mockFile, MAX_FACES_TO_RECOGNIZE, THRESHOLD, null))
                 .thenReturn(findFacesResponse);
-        when(faceDao.addNewFace(embeddings, mockFile, FACE_NAME, MODEL_KEY)).thenReturn(face);
+        when(faceDao.addNewFace(embeddings, mockFile.getBytes(), FACE_NAME, MODEL_KEY)).thenReturn(face);
         when(faceCacheProvider.getOrLoad(MODEL_KEY)).thenReturn(faceCollection);
         when(faceCollection.addFace(face)).thenReturn(expected);
 
@@ -192,7 +192,7 @@ void findAndSaveFace() throws IOException {
         assertThat(actual).isEqualTo(new FaceResponseDto(expected.getName(), expected.getImageId()));
 
         verify(facesApiClient).findFacesWithCalculator(mockFile, MAX_FACES_TO_RECOGNIZE, THRESHOLD, null);
-        verify(faceDao).addNewFace(embeddings, mockFile, FACE_NAME, MODEL_KEY);
+        verify(faceDao).addNewFace(embeddings, mockFile.getBytes(), FACE_NAME, MODEL_KEY);
         verifyNoMoreInteractions(facesApiClient, faceDao);
     }
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/migration/MigrationComponent.java
Patch:
@@ -20,7 +20,6 @@
 import com.exadel.frs.commonservice.entity.Image;
 import com.exadel.frs.commonservice.repository.FacesRepository;
 import com.exadel.frs.core.trainservice.repository.ImagesRepository;
-import com.exadel.frs.commonservice.sdk.config.FeignClientFactory;
 import com.exadel.frs.commonservice.sdk.faces.feign.FacesFeignClient;
 import com.exadel.frs.core.trainservice.util.MultipartFileData;
 import feign.FeignException;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceService.java
Patch:
@@ -32,6 +32,7 @@
 import com.exadel.frs.core.trainservice.mapper.FacesMapper;
 import com.exadel.frs.commonservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.commonservice.sdk.faces.feign.dto.FindFacesResponse;
+import com.exadel.frs.commonservice.sdk.faces.feign.dto.FindFacesResult;
 import java.util.stream.Collectors;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceVerificationProcessServiceImpl.java
Patch:
@@ -12,6 +12,7 @@
 import com.exadel.frs.core.trainservice.mapper.FacesMapper;
 import com.exadel.frs.commonservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.commonservice.sdk.faces.exception.NoFacesFoundException;
+import com.exadel.frs.commonservice.sdk.faces.feign.dto.FacesBox;
 import com.exadel.frs.commonservice.sdk.faces.feign.dto.FindFacesResponse;
 import com.exadel.frs.commonservice.sdk.faces.feign.dto.FindFacesResult;
 import com.exadel.frs.core.trainservice.validation.ImageExtensionValidator;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/controller/VerifyControllerTest.java
Patch:
@@ -57,6 +57,7 @@ void verifyFaces() throws Exception {
                 .build();
 
         when(client.findFacesWithCalculator(any(), any(), any(), isNull())).thenReturn(findFacesResponse);
+        when(predictor.verify(any(), any())).thenReturn(new double[] {100d});
 
         val firstFile = new MockMultipartFile("source_image", "test data".getBytes());
         val secondFile = new MockMultipartFile("target_image", "test data".getBytes());

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceService.java
Patch:
@@ -19,6 +19,7 @@
 import com.exadel.frs.commonservice.dto.PluginsVersionsDto;
 import com.exadel.frs.commonservice.entity.Face;
 import com.exadel.frs.commonservice.exception.TooManyFacesException;
+import com.exadel.frs.commonservice.sdk.faces.feign.dto.FindFacesResult;
 import com.exadel.frs.core.trainservice.cache.FaceBO;
 import com.exadel.frs.core.trainservice.cache.FaceCacheProvider;
 import com.exadel.frs.core.trainservice.cache.FaceCollection;
@@ -31,6 +32,7 @@
 import com.exadel.frs.core.trainservice.mapper.FacesMapper;
 import com.exadel.frs.commonservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.commonservice.sdk.faces.feign.dto.FindFacesResponse;
+import java.util.stream.Collectors;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/FaceVerification.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.core.trainservice.dto;
 
 import com.exadel.frs.commonservice.dto.ExecutionTimeDto;
+import com.exadel.frs.commonservice.dto.PluginsVersionsDto;
 import com.exadel.frs.core.trainservice.sdk.faces.feign.dto.FacesBox;
 import com.fasterxml.jackson.annotation.JsonInclude;
 import com.fasterxml.jackson.annotation.JsonProperty;
@@ -46,6 +47,8 @@ public class FaceVerification extends FaceProcessResponse {
     private Double[] embedding;
     @JsonProperty(value = "execution_time")
     private ExecutionTimeDto executionTime;
+    @JsonProperty("plugins_versions")
+    PluginsVersionsDto pluginsVersions;
 
     @Override
     public FaceVerification prepareResponse(ProcessImageParams processImageParams) {

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/EuclideanDistanceClassifier.java
Patch:
@@ -87,7 +87,7 @@ public Double verify(final double[] input, final String apiKey, final String ima
             return (double) 0;
         }
 
-        val inputFace = normalize(create(input));
+        val inputFace = normalizeOne(create(input));
         
         val faceCollection = faceCacheProvider.getOrLoad(apiKey);
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictor.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import lombok.RequiredArgsConstructor;
 import org.apache.commons.lang3.tuple.Pair;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 @Component
@@ -37,7 +36,7 @@ public Double verify(final String modelKey, final double[] input, final String i
         return classifier.verify(input, modelKey, imageId);
     }
 
-    public Double verify(final double[] processFileEmbedding, final double[][] checkFileEmbedding) {
-        return classifier.verify(processFileEmbedding, checkFileEmbedding);
+    public double[] verify(final double[] sourceImageEmbedding, final double[][] targetImageEmbedding) {
+        return classifier.verify(sourceImageEmbedding, targetImageEmbedding);
     }
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/Classifier.java
Patch:
@@ -26,5 +26,5 @@ public interface Classifier extends Serializable {
 
     Double verify(double[] input, String apiKey, String imageId);
 
-    Double verify(double[] processFileEmbedding, double[][] checkFileEmbedding);
+    double[] verify(double[] sourceImageEmbedding, double[][] targetImageEmbedding);
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -83,7 +83,7 @@ public void doFilter(
         val httpResponse = (HttpServletResponse) servletResponse;
 
         String requestURI = httpRequest.getRequestURI();
-        if (!requestURI.matches("^/(swagger|webjars|v2).*$")) {
+        if (!requestURI.matches("^/(swagger|webjars|v2|api/v1/migrate).*$")) {
             val headersMap =
                     list(httpRequest.getHeaderNames()).stream()
                             .collect(Collectors.<String, String, List<String>>toMap(

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictor.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import lombok.RequiredArgsConstructor;
 import org.apache.commons.lang3.tuple.Pair;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 @Component
@@ -37,7 +36,7 @@ public Double verify(final String modelKey, final double[] input, final String i
         return classifier.verify(input, modelKey, imageId);
     }
 
-    public Double verify(final double[] processFileEmbedding, final double[][] checkFileEmbedding) {
-        return classifier.verify(processFileEmbedding, checkFileEmbedding);
+    public double[] verify(final double[] sourceImageEmbedding, final double[][] targetImageEmbedding) {
+        return classifier.verify(sourceImageEmbedding, targetImageEmbedding);
     }
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/Classifier.java
Patch:
@@ -26,5 +26,5 @@ public interface Classifier extends Serializable {
 
     Double verify(double[] input, String apiKey, String imageId);
 
-    Double verify(double[] processFileEmbedding, double[][] checkFileEmbedding);
+    double[] verify(double[] sourceImageEmbedding, double[][] targetImageEmbedding);
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictor.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.List;
 import lombok.RequiredArgsConstructor;
 import org.apache.commons.lang3.tuple.Pair;
-import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.stereotype.Component;
 
 @Component
@@ -37,7 +36,7 @@ public Double verify(final String modelKey, final double[] input, final String i
         return classifier.verify(input, modelKey, imageId);
     }
 
-    public Double verify(final double[] processFileEmbedding, final double[][] checkFileEmbedding) {
-        return classifier.verify(processFileEmbedding, checkFileEmbedding);
+    public double[] verify(final double[] sourceImageEmbedding, final double[][] targetImageEmbedding) {
+        return classifier.verify(sourceImageEmbedding, targetImageEmbedding);
     }
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/Classifier.java
Patch:
@@ -26,5 +26,5 @@ public interface Classifier extends Serializable {
 
     Double verify(double[] input, String apiKey, String imageId);
 
-    Double verify(double[] processFileEmbedding, double[][] checkFileEmbedding);
+    double[] verify(double[] sourceImageEmbedding, double[][] targetImageEmbedding);
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceVerificationProcessServiceImpl.java
Patch:
@@ -88,7 +88,7 @@ private VerifyFacesResponse getResult(FindFacesResponse processFileResult, FindF
         // compose new result
         return new VerifyFacesResponse(
                 mapper.toVerifyFacesResultDto(sourceFacesResult),
-                checkFileResult.getResult().stream().map(r -> getFaceMatch(r, classifierPredictor.verify(
+                processFileResult.getResult().stream().map(r -> getFaceMatch(r, classifierPredictor.verify(
                         toPrimitiveDouble.apply(r.getEmbedding()),
                         twoRankedEmbeddings
                 ))).collect(Collectors.toList()),

File: java/api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -83,7 +83,7 @@ public void doFilter(
         val httpResponse = (HttpServletResponse) servletResponse;
 
         String requestURI = httpRequest.getRequestURI();
-        if (!requestURI.matches("^/(swagger|webjars|v2).*$")) {
+        if (!requestURI.matches("^/(swagger|webjars|v2|api/v1/migrate).*$")) {
             val headersMap =
                     list(httpRequest.getHeaderNames()).stream()
                             .collect(Collectors.<String, String, List<String>>toMap(

File: java/api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -83,7 +83,7 @@ public void doFilter(
         val httpResponse = (HttpServletResponse) servletResponse;
 
         String requestURI = httpRequest.getRequestURI();
-        if (!requestURI.matches("^/(swagger|webjars|v2).*$")) {
+        if (!requestURI.matches("^/(swagger|webjars|v2|api/v1/migrate).*$")) {
             val headersMap =
                     list(httpRequest.getHeaderNames()).stream()
                             .collect(Collectors.<String, String, List<String>>toMap(

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceRecognizeProcessServiceImpl.java
Patch:
@@ -12,7 +12,6 @@
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.jetbrains.annotations.NotNull;
 import org.springframework.stereotype.Service;
 import org.springframework.web.multipart.MultipartFile;
 

File: java/admin/src/main/java/com/exadel/frs/dto/ui/UserCreateDto.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.dto.ui;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -31,5 +32,6 @@ public class UserCreateDto {
     private String firstName;
     private String lastName;
     private String password;
-    private boolean allowStatistics = true;
+    @JsonProperty(defaultValue = "true")
+    private boolean isAllowStatistics;
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/sdk/faces/service/FacesRestApiClient.java
Patch:
@@ -59,7 +59,7 @@ public FindFacesResponse findFacesWithCalculator(final MultipartFile photo, fina
     }
 
     @Override
-    @Cacheable(value = "status", unless = "#result==null or #result==error")
+    @Cacheable(value = "status", unless = "#result==null")
     public FacesStatusResponse getStatus() {
         try {
             return feignClient.getStatus();

File: java/api/src/main/java/com/exadel/frs/core/trainservice/sdk/faces/service/FacesRestApiClient.java
Patch:
@@ -59,7 +59,7 @@ public FindFacesResponse findFacesWithCalculator(final MultipartFile photo, fina
     }
 
     @Override
-    @Cacheable(value = "status", unless = "#result==null or #result==error")
+    @Cacheable(value = "status", unless = "#result==null")
     public FacesStatusResponse getStatus() {
         try {
             return feignClient.getStatus();

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/FaceProcessResponse.java
Patch:
@@ -3,5 +3,5 @@
 public abstract class FaceProcessResponse {
     public static final String CALCULATOR="calculator";
 
-    public abstract FaceProcessResponse prepareResponse(FaceProcessResponse response, ProcessImageParams processImageParams);
+    public abstract FaceProcessResponse prepareResponse(ProcessImageParams processImageParams);
 }

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/FaceSimilarityDto.java
Patch:
@@ -17,7 +17,6 @@
 package com.exadel.frs.core.trainservice.dto;
 
 import com.fasterxml.jackson.annotation.JsonInclude;
-import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Value;
 
 import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
@@ -26,7 +25,6 @@
 @JsonInclude(NON_NULL)
 public class FaceSimilarityDto {
 
-    @JsonProperty("subject")
     String subject;
 
     float similarity;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -99,6 +99,7 @@ public void doFilter(
                     if (key.length() < 36) {
                         throw new IllegalArgumentException("UUID length is incorrect");
                     }
+
                     UUID.fromString(key);
                 } catch (Exception e) {
                     val objectResponseEntity = handler.handleDefinedExceptions(new BadFormatModelKeyException());
@@ -122,6 +123,7 @@ public void doFilter(
                 return;
             }
         }
+
         filterChain.doFilter(servletRequest, servletResponse);
     }
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/sdk/faces/exception/FacesServiceException.java
Patch:
@@ -23,7 +23,7 @@
 
 public class FacesServiceException extends BasicException {
 
-    private static final String MESSAGE = "Error during communication with Faces Service: %s";
+    private static final String MESSAGE = "Error during synchronization between servers: %s";
 
     public FacesServiceException(final String message) {
         super(FACES_SERVICE_EXCEPTION, format(MESSAGE, message));

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceDetectionProcessServiceImpl.java
Patch:
@@ -21,9 +21,8 @@ public class FaceDetectionProcessServiceImpl implements FaceProcessService {
     public FacesDetectionResponseDto processImage(ProcessImageParams processImageParams) {
         MultipartFile file = (MultipartFile) processImageParams.getFile();
         imageValidator.validate(file);
-
         FacesDetectionResponseDto facesDetectionResponseDto = mapper.toFacesDetectionResponseDto(
                 client.findFaces(file, processImageParams.getLimit(), processImageParams.getDetProbThreshold(), processImageParams.getFacePlugins()));
-        return facesDetectionResponseDto.prepareResponse(facesDetectionResponseDto, processImageParams);
+        return facesDetectionResponseDto.prepareResponse(processImageParams);
     }
 }

File: java/api/src/test/java/com/exadel/frs/core/trainservice/controller/VerifyControllerTest.java
Patch:
@@ -58,11 +58,11 @@ void verifyFaces() throws Exception {
 
         when(client.findFacesWithCalculator(any(), any(), any(), isNull())).thenReturn(findFacesResponse);
 
-        val firstFile = new MockMultipartFile("processFile", "test data".getBytes());
-        val secondFile = new MockMultipartFile("checkFile", "test data".getBytes());
+        val firstFile = new MockMultipartFile("source_image", "test data".getBytes());
+        val secondFile = new MockMultipartFile("target_image", "test data".getBytes());
 
         mockMvc.perform(
-                multipart(API_V1 + "/verify")
+                multipart(API_V1 + "/verification/verify")
                         .file(firstFile)
                         .file(secondFile)
                         .header(X_FRS_API_KEY_HEADER, API_KEY)

File: java/api/src/test/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilterTest.java
Patch:
@@ -16,8 +16,7 @@
 
 package com.exadel.frs.core.trainservice.filter;
 
-import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
-import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
+import static com.exadel.frs.core.trainservice.system.global.Constants.*;
 import static java.util.Collections.emptyEnumeration;
 import static java.util.Collections.enumeration;
 import static java.util.Collections.singletonList;
@@ -79,7 +78,7 @@ void setUp() throws IOException {
         filterChain = mock(FilterChain.class);
 
         when(httpServletResponse.getWriter()).thenReturn(new PrintWriter(new StringWriter()));
-        when(httpServletRequest.getRequestURI()).thenReturn(API_V1);
+        when(httpServletRequest.getRequestURI()).thenReturn(API_V1+ RECOGNIZE);
     }
 
     @Test

File: java/api/src/test/java/com/exadel/frs/core/trainservice/sdk/faces/service/FacesRestApiClientTest.java
Patch:
@@ -15,7 +15,7 @@
  */
 package com.exadel.frs.core.trainservice.sdk.faces.service;
 
-import static com.exadel.frs.core.trainservice.sdk.faces.service.FacesRestApiClient.CALCULATOR_PLUGIN;
+import static com.exadel.frs.core.trainservice.system.global.Constants.CALCULATOR_PLUGIN;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.is;
 import static org.junit.jupiter.api.Assertions.assertThrows;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTestIT.java
Patch:
@@ -176,7 +176,7 @@ public void findAndSaveFaceTest() throws IOException {
         val actual = faceService.findAndSaveFace(MULTIPART_FILE_DATA, FACE_NAME, THRESHOLD, MODEL_KEY);
 
         assertThat(actual).isNotNull();
-        assertThat(actual.getName()).isEqualTo(FACE_NAME);
+        assertThat(actual.getSubject()).isEqualTo(FACE_NAME);
     }
 
     @AfterEach

File: java/common/src/main/java/com/exadel/frs/commonservice/aspect/StatisticsCollectionAspect.java
Patch:
@@ -47,6 +47,7 @@ private String getInstallGuid() {
     @SneakyThrows
     @AfterReturning(pointcut = "@annotation(com.exadel.frs.commonservice.annotation.CollectStatistics)", returning = "result")
     public void afterMethodInvocation(JoinPoint joinPoint, Object result) {
+        log.info("Request to send statistics in background");
         if (StringUtils.isEmpty(statisticsApiKey)) {
             log.info("Appery API key is empty, statistics wasn't send");
             return;

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/TooManyFacesException.java
Patch:
@@ -20,7 +20,7 @@
 
 public class TooManyFacesException extends BasicException {
 
-    private static final String MESSAGE = "More than one face in the image";
+    private static final String MESSAGE = "More than one face in the source image";
 
     public TooManyFacesException() {
         super(TOO_MANY_FACES, MESSAGE);

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/CommonExceptionCode.java
Patch:
@@ -48,6 +48,9 @@ public enum CommonExceptionCode implements HttpExceptionCode {
     TOO_MANY_FACES(31, BAD_REQUEST),
     WRITING_NOT_ALLOWED(32, METHOD_NOT_ALLOWED),
     MISSING_REQUEST_PARAMETER(33, BAD_REQUEST),
+    MISSING_REQUEST_PART(34, BAD_REQUEST),
+    MISSING_PATH_VARIABLE(35, BAD_REQUEST),
+    INCORRECT_ARGUMENT(36, BAD_REQUEST),
 
     FACES_SERVICE_EXCEPTION(41, INTERNAL_SERVER_ERROR),
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/dto/VerifyFacesResponse.java
Patch:
@@ -39,7 +39,7 @@ public class VerifyFacesResponse extends FaceProcessResponse {
     VerifyFacesResultDto processFileData;
     @JsonProperty("face_matches")
     List<FaceMatch> faceMatches;
-    @JsonProperty(value = "plugins_versions")
+    @JsonProperty("plugins_versions")
     PluginsVersionsDto pluginsVersions;
 
     @Override

File: java/api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -99,6 +99,7 @@ public void doFilter(
                     if (key.length() < 36) {
                         throw new IllegalArgumentException("UUID length is incorrect");
                     }
+
                     UUID.fromString(key);
                 } catch (Exception e) {
                     val objectResponseEntity = handler.handleDefinedExceptions(new BadFormatModelKeyException());
@@ -122,6 +123,7 @@ public void doFilter(
                 return;
             }
         }
+
         filterChain.doFilter(servletRequest, servletResponse);
     }
 

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/TooManyFacesException.java
Patch:
@@ -20,7 +20,7 @@
 
 public class TooManyFacesException extends BasicException {
 
-    private static final String MESSAGE = "More than one face in the image";
+    private static final String MESSAGE = "More than one face in the source image";
 
     public TooManyFacesException() {
         super(TOO_MANY_FACES, MESSAGE);

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/CommonExceptionCode.java
Patch:
@@ -48,6 +48,9 @@ public enum CommonExceptionCode implements HttpExceptionCode {
     TOO_MANY_FACES(31, BAD_REQUEST),
     WRITING_NOT_ALLOWED(32, METHOD_NOT_ALLOWED),
     MISSING_REQUEST_PARAMETER(33, BAD_REQUEST),
+    MISSING_REQUEST_PART(34, BAD_REQUEST),
+    MISSING_PATH_VARIABLE(35, BAD_REQUEST),
+    INCORRECT_ARGUMENT(36, BAD_REQUEST),
 
     FACES_SERVICE_EXCEPTION(41, INTERNAL_SERVER_ERROR),
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/sdk/faces/service/FacesRestApiClient.java
Patch:
@@ -59,7 +59,7 @@ public FindFacesResponse findFacesWithCalculator(final MultipartFile photo, fina
     }
 
     @Override
-    @Cacheable(value = "status", unless = "#result==null")
+    @Cacheable(value = "status", unless = "#result==null or #result==error")
     public FacesStatusResponse getStatus() {
         try {
             return feignClient.getStatus();

File: java/api/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -22,4 +22,6 @@ public class Constants {
     public static final String API_V1 = "/api/v1";
     public static final String CALCULATOR_PLUGIN = "calculator";
     public static final String RECOGNIZE = "/recognition/recognize";
+    public static final String SOURCE_IMAGE = "source_image";
+    public static final String TARGET_IMAGE = "target_image";
 }
\ No newline at end of file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/sdk/faces/service/FacesRestApiClient.java
Patch:
@@ -59,7 +59,7 @@ public FindFacesResponse findFacesWithCalculator(final MultipartFile photo, fina
     }
 
     @Override
-    @Cacheable("status")
+    @Cacheable(value = "status", unless = "#result==null")
     public FacesStatusResponse getStatus() {
         try {
             return feignClient.getStatus();

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/CommonExceptionCode.java
Patch:
@@ -36,6 +36,7 @@ public enum CommonExceptionCode implements HttpExceptionCode {
     IMAGE_NOT_FOUND(11, NOT_FOUND),
 
     INCORRECT_MODEL_TYPE(12, INTERNAL_SERVER_ERROR),
+    INCORRECT_PREDICTION_COUNT(12, BAD_REQUEST),
     ILLEGAL_REPLACER(13, BAD_REQUEST),
 
     MISSING_REQUEST_HEADER(20, BAD_REQUEST),

File: java/admin/src/main/java/com/exadel/frs/FrsApplication.java
Patch:
@@ -20,7 +20,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.cloud.openfeign.EnableFeignClients;
 
-@EnableFeignClients
+@EnableFeignClients(basePackages = "com.exadel.frs.commonservice.system.feign")
 @SpringBootApplication
 public class FrsApplication {
 

File: java/admin/src/main/java/com/exadel/frs/controller/AppController.java
Patch:
@@ -16,7 +16,9 @@
 
 package com.exadel.frs.controller;
 
+import com.exadel.frs.commonservice.annotation.CollectStatistics;
 import com.exadel.frs.commonservice.enums.AppRole;
+import com.exadel.frs.commonservice.enums.StatisticsType;
 import com.exadel.frs.dto.ui.*;
 import com.exadel.frs.helpers.SecurityUtils;
 import com.exadel.frs.mapper.AppMapper;

File: java/admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -33,7 +33,7 @@
 import com.exadel.frs.commonservice.enums.GlobalRole;
 import com.exadel.frs.commonservice.enums.Replacer;
 import com.exadel.frs.exception.AccessDeniedException;
-import com.exadel.frs.exception.DemoNotAvailableException;
+import com.exadel.frs.commonservice.exception.DemoNotAvailableException;
 import com.exadel.frs.exception.UserDoesNotExistException;
 import com.exadel.frs.helpers.SecurityUtils;
 import com.exadel.frs.mapper.UserGlobalRoleMapper;

File: java/admin/src/main/java/com/exadel/frs/dto/ui/UserCreateDto.java
Patch:
@@ -31,5 +31,5 @@ public class UserCreateDto {
     private String firstName;
     private String lastName;
     private String password;
-    private boolean allowStatistics;
+    private boolean allowStatistics = true;
 }
\ No newline at end of file

File: java/admin/src/main/java/com/exadel/frs/exception/AccessDeniedException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.APP_ACCESS_DENIED;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.APP_ACCESS_DENIED;
 
 public class AccessDeniedException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/AppNotFoundException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.APP_NOT_FOUND;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.APP_NOT_FOUND;
 import static java.lang.String.format;
 
 public class AppNotFoundException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/exception/EmailAlreadyRegisteredException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.EMAIL_ALREADY_REGISTERED;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.EMAIL_ALREADY_REGISTERED;
 
 public class EmailAlreadyRegisteredException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/IncorrectStatisticsTypeException.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.INCORRECT_STATISTICS_ROLE;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.INCORRECT_STATISTICS_ROLE;
 import static java.lang.String.format;
 
 public class IncorrectStatisticsTypeException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/exception/IncorrectUserPasswordException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.INCORRECT_USER_PASSWORD;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.INCORRECT_USER_PASSWORD;
 
 public class IncorrectUserPasswordException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/InsufficientPrivilegesException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.INSUFFICIENT_PRIVILEGES;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.INSUFFICIENT_PRIVILEGES;
 
 public class InsufficientPrivilegesException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/InvalidEmailException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.INVALID_EMAIL_FORMAT;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.INVALID_EMAIL_FORMAT;
 
 public class InvalidEmailException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/ModelDoesNotBelongToAppException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.MODEL_DOES_NOT_BELONG_TO_APP;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.MODEL_DOES_NOT_BELONG_TO_APP;
 import static java.lang.String.format;
 
 public class ModelDoesNotBelongToAppException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/exception/ModelShareRequestNotFoundException.java
Patch:
@@ -20,7 +20,7 @@
 
 import java.util.UUID;
 
-import static com.exadel.frs.handler.CrudExceptionCode.MODEL_SHARE_REQUEST_NOT_FOUND;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.MODEL_SHARE_REQUEST_NOT_FOUND;
 import static java.lang.String.format;
 
 public class ModelShareRequestNotFoundException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/exception/NameIsNotUniqueException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.NAME_IS_NOT_UNIQUE;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.NAME_IS_NOT_UNIQUE;
 import static java.lang.String.format;
 
 public class NameIsNotUniqueException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/exception/RegistrationTokenExpiredException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.USER_REGISTRATION_TOKEN_EXPIRED;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.USER_REGISTRATION_TOKEN_EXPIRED;
 
 public class RegistrationTokenExpiredException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/SelfRoleChangeException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.SELF_ROLE_CHANGE;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.SELF_ROLE_CHANGE;
 
 public class SelfRoleChangeException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/UnreachableEmailException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.UNREACHABLE_EMAIL_ADDRESS;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.UNREACHABLE_EMAIL_ADDRESS;
 
 public class UnreachableEmailException extends BasicException {
 

File: java/admin/src/main/java/com/exadel/frs/exception/UserAlreadyHasAccessToAppException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.USER_ALREADY_HAS_ACCESS_TO_APP;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.USER_ALREADY_HAS_ACCESS_TO_APP;
 import static java.lang.String.format;
 
 public class UserAlreadyHasAccessToAppException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/exception/UserDoesNotExistException.java
Patch:
@@ -18,7 +18,7 @@
 
 import com.exadel.frs.commonservice.exception.BasicException;
 
-import static com.exadel.frs.handler.CrudExceptionCode.USER_DOES_NOT_EXIST;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.USER_DOES_NOT_EXIST;
 import static java.lang.String.format;
 
 public class UserDoesNotExistException extends BasicException {

File: java/admin/src/main/java/com/exadel/frs/system/security/CustomUserDetailsService.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.exadel.frs.system.security;
 
-import com.exadel.frs.repository.UserRepository;
+import com.exadel.frs.commonservice.repository.UserRepository;
 import lombok.RequiredArgsConstructor;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.security.core.userdetails.UserDetailsService;

File: java/admin/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -43,7 +43,7 @@
 import com.exadel.frs.exception.RegistrationTokenExpiredException;
 import com.exadel.frs.exception.UserDoesNotExistException;
 import com.exadel.frs.helpers.EmailSender;
-import com.exadel.frs.repository.UserRepository;
+import com.exadel.frs.commonservice.repository.UserRepository;
 import com.exadel.frs.service.AppService;
 import com.exadel.frs.service.UserService;
 import com.exadel.frs.system.security.AuthorizationManager;

File: java/admin/src/test/java/com/exadel/frs/controller/ModelControllerTest.java
Patch:
@@ -188,7 +188,7 @@ void shouldReturnCreatedModel() throws Exception {
         val responseDto = new ModelResponseDto();
         responseDto.setName(MODEL_NAME);
 
-        when(modelService.createModel(any(ModelCreateDto.class), eq(APP_GUID), anyLong())).thenReturn(model);
+        when(modelService.createRecognitionModel(any(ModelCreateDto.class), eq(APP_GUID), anyLong())).thenReturn(model);
         when(modelMapper.toResponseDto(any(Model.class), eq(APP_GUID))).thenReturn(responseDto);
 
         mockMvc.perform(createRequest)

File: java/admin/src/test/java/com/exadel/frs/controller/UserControllerTest.java
Patch:
@@ -17,8 +17,8 @@
 package com.exadel.frs.controller;
 
 import static com.exadel.frs.commonservice.handler.CommonExceptionCode.EMPTY_REQUIRED_FIELD;
-import static com.exadel.frs.handler.CrudExceptionCode.INCORRECT_USER_PASSWORD;
-import static com.exadel.frs.handler.CrudExceptionCode.VALIDATION_CONSTRAINT_VIOLATION;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.INCORRECT_USER_PASSWORD;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.VALIDATION_CONSTRAINT_VIOLATION;
 import static com.exadel.frs.utils.TestUtils.buildUser;
 import static org.hamcrest.Matchers.anyOf;
 import static org.hamcrest.Matchers.is;

File: java/admin/src/test/java/com/exadel/frs/handler/ResponseExceptionHandlerTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.exadel.frs.handler;
 
-import static com.exadel.frs.handler.CrudExceptionCode.UNDEFINED;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.UNDEFINED;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;

File: java/admin/src/test/java/com/exadel/frs/security/OAuthMvcTest.java
Patch:
@@ -25,7 +25,7 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 import com.exadel.frs.EmbeddedPostgreSQLTest;
 import com.exadel.frs.FrsApplication;
-import com.exadel.frs.repository.UserRepository;
+import com.exadel.frs.commonservice.repository.UserRepository;
 import com.exadel.frs.service.UserService;
 import java.util.UUID;
 import javax.servlet.http.Cookie;

File: java/admin/src/test/java/com/exadel/frs/utils/TestUtils.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.exadel.frs.utils;
 
-import static com.exadel.frs.handler.CrudExceptionCode.UNDEFINED;
+import static com.exadel.frs.commonservice.handler.CrudExceptionCode.UNDEFINED;
 import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;
 
 import com.exadel.frs.commonservice.dto.ExceptionResponseDto;

File: java/api/src/main/java/com/exadel/frs/TrainServiceApplication.java
Patch:
@@ -19,7 +19,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
+import org.springframework.cloud.openfeign.EnableFeignClients;
 
+@EnableFeignClients(basePackages = "com.exadel.frs.commonservice.system.feign")
 @SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})
 public class TrainServiceApplication {
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/component/migration/MigrationComponent.java
Patch:
@@ -19,7 +19,7 @@
 import static com.exadel.frs.core.trainservice.sdk.faces.service.FacesRestApiClient.CALCULATOR_PLUGIN;
 import com.exadel.frs.commonservice.entity.Face.Embedding;
 import com.exadel.frs.commonservice.entity.Image;
-import com.exadel.frs.core.trainservice.repository.FacesRepository;
+import com.exadel.frs.commonservice.repository.FacesRepository;
 import com.exadel.frs.core.trainservice.repository.ImagesRepository;
 import com.exadel.frs.core.trainservice.sdk.config.FeignClientFactory;
 import com.exadel.frs.core.trainservice.sdk.faces.feign.FacesFeignClient;

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -54,7 +54,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 @RestController
-@RequestMapping(API_V1 + "/faces")
+@RequestMapping(API_V1 + "/recognition/faces")
 @RequiredArgsConstructor
 public class FaceController {
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/ModelService.java
Patch:
@@ -20,12 +20,14 @@
 import static com.exadel.frs.commonservice.enums.ValidationResult.OK;
 import com.exadel.frs.commonservice.enums.ModelType;
 import com.exadel.frs.commonservice.enums.ValidationResult;
-import com.exadel.frs.core.trainservice.repository.ModelRepository;
+import com.exadel.frs.commonservice.repository.ModelRepository;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 
 @Service
 @RequiredArgsConstructor
+@Transactional("tmPg")
 public class ModelService {
 
     private final ModelRepository modelRepository;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/controller/FaceControllerTest.java
Patch:
@@ -32,14 +32,14 @@
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
 
+import com.exadel.frs.commonservice.repository.FacesRepository;
 import com.exadel.frs.core.trainservice.EmbeddedPostgreSQLTest;
 import com.exadel.frs.core.trainservice.cache.FaceBO;
 import com.exadel.frs.core.trainservice.cache.FaceCacheProvider;
 import com.exadel.frs.core.trainservice.cache.FaceCollection;
 import com.exadel.frs.core.trainservice.component.FaceClassifierPredictor;
 import com.exadel.frs.core.trainservice.config.IntegrationTest;
 import com.exadel.frs.core.trainservice.dto.FaceResponseDto;
-import com.exadel.frs.core.trainservice.repository.FacesRepository;
 import com.exadel.frs.core.trainservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.core.trainservice.sdk.faces.feign.dto.FacesBox;
 import com.exadel.frs.core.trainservice.sdk.faces.feign.dto.FindFacesResponse;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/dao/FaceDaoTest.java
Patch:
@@ -27,7 +27,7 @@
 import static org.mockito.MockitoAnnotations.initMocks;
 import com.exadel.frs.commonservice.entity.Face;
 import com.exadel.frs.commonservice.entity.Image;
-import com.exadel.frs.core.trainservice.repository.FacesRepository;
+import com.exadel.frs.commonservice.repository.FacesRepository;
 import com.exadel.frs.core.trainservice.repository.ImagesRepository;
 import com.exadel.frs.core.trainservice.system.global.ImageProperties;
 import java.io.IOException;

File: java/api/src/test/java/com/exadel/frs/core/trainservice/repository/FacesRepositoryTest.java
Patch:
@@ -19,6 +19,8 @@
 import com.exadel.frs.commonservice.entity.App;
 import com.exadel.frs.commonservice.entity.Face;
 import com.exadel.frs.commonservice.enums.ModelType;
+import com.exadel.frs.commonservice.repository.FacesRepository;
+import com.exadel.frs.commonservice.repository.ModelRepository;
 import com.exadel.frs.core.trainservice.EmbeddedPostgreSQLTest;
 import lombok.val;
 import org.junit.jupiter.api.AfterEach;
@@ -32,7 +34,6 @@
 import java.util.Random;
 
 import static com.exadel.frs.core.trainservice.ItemsBuilder.*;
-import static com.exadel.frs.core.trainservice.ItemsBuilder.makeModel;
 import static java.util.stream.Collectors.toList;
 import static org.assertj.core.api.Assertions.assertThat;
 

File: java/api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTestIT.java
Patch:
@@ -19,9 +19,9 @@
 import com.exadel.frs.commonservice.entity.App;
 import com.exadel.frs.commonservice.entity.Face;
 import com.exadel.frs.commonservice.enums.ModelType;
+import com.exadel.frs.commonservice.repository.FacesRepository;
+import com.exadel.frs.commonservice.repository.ModelRepository;
 import com.exadel.frs.core.trainservice.EmbeddedPostgreSQLTest;
-import com.exadel.frs.core.trainservice.repository.FacesRepository;
-import com.exadel.frs.core.trainservice.repository.ModelRepository;
 import com.exadel.frs.core.trainservice.sdk.faces.FacesApiClient;
 import com.exadel.frs.core.trainservice.sdk.faces.feign.dto.FindFacesResponse;
 import com.exadel.frs.core.trainservice.sdk.faces.feign.dto.FindFacesResult;

File: java/common/src/main/java/com/exadel/frs/commonservice/annotation/CollectStatistics.java
Patch:
@@ -1,4 +1,4 @@
-package com.exadel.frs.annotation;
+package com.exadel.frs.commonservice.annotation;
 
 import com.exadel.frs.commonservice.enums.StatisticsType;
 

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/App.java
Patch:
@@ -27,7 +27,7 @@
 import static com.exadel.frs.commonservice.enums.AppRole.OWNER;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
@@ -41,6 +41,7 @@ public class App {
     private Long id;
     private String name;
     private String guid;
+    @Column(name = "api_key")
     private String apiKey;
 
     @ToString.Exclude

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/AppModel.java
Patch:
@@ -25,7 +25,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @EqualsAndHashCode(of = {"app", "model"})
@@ -50,6 +50,7 @@ public AppModel(AppModel appModel){
     private Model model;
 
     @Convert(converter = ModelAccessTypeConverter.class)
+    @Column(name = "access_type")
     private AppModelAccess accessType;
 
     public AppModel(App app, Model model, AppModelAccess accessType) {

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/Face.java
Patch:
@@ -29,7 +29,7 @@
 import java.util.List;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @AllArgsConstructor

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/Image.java
Patch:
@@ -25,7 +25,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @AllArgsConstructor

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/InstallInfo.java
Patch:
@@ -2,15 +2,17 @@
 
 import lombok.Data;
 
+import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.Id;
 import javax.persistence.Table;
 
 @Data
 @Entity
-@Table(name = "install_info")
+@Table(name = "install_info", schema = "public")
 public class InstallInfo {
 
     @Id
+    @Column(name = "install_guid")
     private String installGuid;
 }
\ No newline at end of file

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/Model.java
Patch:
@@ -29,7 +29,7 @@
 import static java.util.UUID.randomUUID;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @AllArgsConstructor

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/ModelShareRequest.java
Patch:
@@ -23,12 +23,12 @@
 import java.time.LocalDateTime;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
 @Builder
-@EqualsAndHashCode(of = {"app", "requestId"})
+@EqualsAndHashCode(of = {"app", "requestTime"})
 public class ModelShareRequest {
 
     @EmbeddedId
@@ -39,5 +39,6 @@ public class ModelShareRequest {
     private App app;
 
     @CreationTimestamp
+    @Column(name = "request_time")
     private LocalDateTime requestTime;
 }
\ No newline at end of file

File: java/common/src/main/java/com/exadel/frs/commonservice/entity/UserAppRole.java
Patch:
@@ -23,7 +23,7 @@
 import javax.persistence.*;
 
 @Entity
-@Table
+@Table(schema = "public")
 @Data
 @NoArgsConstructor
 @AllArgsConstructor

File: java/common/src/main/java/com/exadel/frs/commonservice/enums/StatisticsType.java
Patch:
@@ -11,7 +11,9 @@ public enum StatisticsType {
 
     USER_CREATE("UC"),
     APP_CREATE("AC"),
-    FACE_COLLECTION_CREATE("FC");
+    FACE_DETECTION_CREATE("DC"),
+    FACE_RECOGNITION_CREATE("RC"),
+    FACE_VERIFICATION_CREATE("VC");
 
     @Getter
     @Setter

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/BadFormatModelKeyException.java
Patch:
@@ -20,7 +20,7 @@
 
 public class BadFormatModelKeyException extends BasicException {
 
-    private static final String MESSAGE = "Model key should be UUID";
+    private static final String MESSAGE = "Service API key should be UUID";
 
     public BadFormatModelKeyException() {
         super(VALIDATION_CONSTRAINT_VIOLATION, MESSAGE);

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/CommonExceptionCode.java
Patch:
@@ -36,6 +36,7 @@ public enum CommonExceptionCode implements HttpExceptionCode {
     IMAGE_NOT_FOUND(11, NOT_FOUND),
 
     INCORRECT_MODEL_TYPE(12, INTERNAL_SERVER_ERROR),
+    INCORRECT_PREDICTION_COUNT(12, BAD_REQUEST),
     ILLEGAL_REPLACER(13, BAD_REQUEST),
 
     MISSING_REQUEST_HEADER(20, BAD_REQUEST),

File: java/common/src/main/java/com/exadel/frs/commonservice/handler/CrudExceptionCode.java
Patch:
@@ -14,7 +14,7 @@
  * permissions and limitations under the License.
  */
 
-package com.exadel.frs.handler;
+package com.exadel.frs.commonservice.handler;
 
 import com.exadel.frs.commonservice.handler.HttpExceptionCode;
 import lombok.AllArgsConstructor;

File: java/common/src/main/java/com/exadel/frs/commonservice/repository/InstallInfoRepository.java
Patch:
@@ -14,7 +14,7 @@
  * permissions and limitations under the License.
  */
 
-package com.exadel.frs.repository;
+package com.exadel.frs.commonservice.repository;
 
 import com.exadel.frs.commonservice.entity.InstallInfo;
 import org.springframework.data.jpa.repository.JpaRepository;

File: java/common/src/main/java/com/exadel/frs/commonservice/repository/UserRepository.java
Patch:
@@ -14,7 +14,7 @@
  * permissions and limitations under the License.
  */
 
-package com.exadel.frs.repository;
+package com.exadel.frs.commonservice.repository;
 
 import com.exadel.frs.commonservice.entity.User;
 import com.exadel.frs.commonservice.enums.GlobalRole;
@@ -23,7 +23,9 @@
 import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.data.jpa.repository.Query;
+import org.springframework.stereotype.Repository;
 
+@Repository
 public interface UserRepository extends JpaRepository<User, Long> {
 
     Optional<User> findByEmail(String email);

File: java/common/src/main/java/com/exadel/frs/commonservice/scheduler/config/SpringQuartzSchedulerConfig.java
Patch:
@@ -1,6 +1,6 @@
-package com.exadel.frs.scheduler.config;
+package com.exadel.frs.commonservice.scheduler.config;
 
-import com.exadel.frs.scheduler.job.StatisticsJob;
+import com.exadel.frs.commonservice.scheduler.job.StatisticsJob;
 import org.quartz.*;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;

File: java/common/src/main/java/com/exadel/frs/commonservice/system/feign/ApperyStatisticsClient.java
Patch:
@@ -1,4 +1,4 @@
-package com.exadel.frs.system.feign;
+package com.exadel.frs.commonservice.system.feign;
 
 import org.springframework.cloud.openfeign.FeignClient;
 import org.springframework.web.bind.annotation.PostMapping;

File: java/common/src/main/java/com/exadel/frs/commonservice/system/feign/StatisticsFacesEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.exadel.frs.system.feign;
+package com.exadel.frs.commonservice.system.feign;
 
 import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.AllArgsConstructor;

File: java/common/src/main/java/com/exadel/frs/commonservice/system/feign/StatisticsGeneralEntity.java
Patch:
@@ -1,4 +1,4 @@
-package com.exadel.frs.system.feign;
+package com.exadel.frs.commonservice.system.feign;
 
 import com.exadel.frs.commonservice.enums.StatisticsType;
 import com.fasterxml.jackson.annotation.JsonProperty;

File: java/admin/src/test/java/com/exadel/frs/ModelServiceTest.java
Patch:
@@ -168,7 +168,7 @@ void successCreateModel() {
         when(appServiceMock.getApp(APPLICATION_GUID)).thenReturn(app);
         when(userServiceMock.getUser(USER_ID)).thenReturn(user);
 
-        modelService.createModel(modelCreateDto, APPLICATION_GUID, USER_ID);
+        modelService.createRecognitionModel(modelCreateDto, APPLICATION_GUID, USER_ID);
 
         val varArgs = ArgumentCaptor.forClass(Model.class);
         verify(modelRepositoryMock).existsByNameAndAppId("model-name", APPLICATION_ID);
@@ -195,7 +195,7 @@ void failCreateModelNameIsNotUnique() {
         when(modelRepositoryMock.existsByNameAndAppId(anyString(), anyLong())).thenReturn(true);
 
         assertThatThrownBy(() ->
-                modelService.createModel(modelCreateDto, APPLICATION_GUID, USER_ID)
+                modelService.createRecognitionModel(modelCreateDto, APPLICATION_GUID, USER_ID)
         ).isInstanceOf(NameIsNotUniqueException.class);
     }
 

File: java/admin/src/test/java/com/exadel/frs/controller/ModelControllerTest.java
Patch:
@@ -188,7 +188,7 @@ void shouldReturnCreatedModel() throws Exception {
         val responseDto = new ModelResponseDto();
         responseDto.setName(MODEL_NAME);
 
-        when(modelService.createModel(any(ModelCreateDto.class), eq(APP_GUID), anyLong())).thenReturn(model);
+        when(modelService.createRecognitionModel(any(ModelCreateDto.class), eq(APP_GUID), anyLong())).thenReturn(model);
         when(modelMapper.toResponseDto(any(Model.class), eq(APP_GUID))).thenReturn(responseDto);
 
         mockMvc.perform(createRequest)

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/DetectionController.java
Patch:
@@ -56,7 +56,6 @@ public class DetectionController {
                     value = "Api key of application and model",
                     required = true)
     })
-    @CollectStatistics(type = StatisticsType.FACE_DETECTION_CREATE)
     public FacesDetectionResponseDto detect(
             @ApiParam(value = "Image for recognizing", required = true)
             @RequestParam

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/VerifyController.java
Patch:
@@ -30,7 +30,6 @@ public class VerifyController {
     private final FaceProcessService verificationService;
 
     @PostMapping(value = "/verify")
-    @CollectStatistics(type = StatisticsType.FACE_VERIFICATION_CREATE)
     public Map<String, List<VerifyFacesResponse>> verify(
             @ApiParam(value = "Api key of application and model", required = true)
             @RequestHeader(X_FRS_API_KEY_HEADER) final String apiKey,

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceDetectionProcessServiceImpl.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.core.trainservice.service;
 
 import com.exadel.frs.core.trainservice.dto.FaceProcessResponse;
+import com.exadel.frs.core.trainservice.dto.FacesDetectionResponseDto;
 import com.exadel.frs.core.trainservice.dto.ProcessImageParams;
 import com.exadel.frs.core.trainservice.mapper.FacesMapper;
 import com.exadel.frs.core.trainservice.sdk.faces.FacesApiClient;
@@ -18,7 +19,7 @@ public class FaceDetectionProcessServiceImpl implements FaceProcessService {
     private final FacesMapper mapper;
 
     @Override
-    public FaceProcessResponse processImage(ProcessImageParams processImageParams) {
+    public FacesDetectionResponseDto processImage(ProcessImageParams processImageParams) {
         MultipartFile file = (MultipartFile) processImageParams.getFile();
         imageValidator.validate(file);
 

File: java/api/src/main/java/com/exadel/frs/core/trainservice/service/FaceVerificationProcessServiceImpl.java
Patch:
@@ -38,7 +38,7 @@ public class FaceVerificationProcessServiceImpl implements FaceProcessService {
     private final FacesMapper mapper;
 
     @Override
-    public FaceProcessResponse processImage(ProcessImageParams processImageParams) {
+    public VerifyFacesResponse processImage(ProcessImageParams processImageParams) {
         Map<String, MultipartFile> fileMap = (Map<String, MultipartFile>) processImageParams.getFile();
         List<FindFacesResult> findFacesResults = Stream.of(fileMap.get("processFile"), fileMap.get("checkFile"))
                 .parallel()

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/BadFormatModelKeyException.java
Patch:
@@ -20,7 +20,7 @@
 
 public class BadFormatModelKeyException extends BasicException {
 
-    private static final String MESSAGE = "Model key should be UUID";
+    private static final String MESSAGE = "Service API key should be UUID";
 
     public BadFormatModelKeyException() {
         super(VALIDATION_CONSTRAINT_VIOLATION, MESSAGE);

File: java/admin/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -34,6 +34,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
 
 import javax.transaction.Transactional;
 import java.util.ArrayList;
@@ -54,7 +55,7 @@ public class ModelService {
 
     public Model getModel(final String modelGuid) {
         return modelRepository.findByGuid(modelGuid)
-                .orElseThrow(() -> new ModelNotFoundException(modelGuid));
+                .orElseThrow(() -> new ModelNotFoundException(modelGuid, ""));
     }
 
     private void verifyNameIsUnique(final String name, final Long appId) {

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/BadFormatModelKeyException.java
Patch:
@@ -20,7 +20,7 @@
 
 public class BadFormatModelKeyException extends BasicException {
 
-    private static final String MESSAGE = "Model key should be UUID";
+    private static final String MESSAGE = "Service API key should be UUID";
 
     public BadFormatModelKeyException() {
         super(VALIDATION_CONSTRAINT_VIOLATION, MESSAGE);

File: java/admin/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -34,6 +34,7 @@
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
 import org.springframework.stereotype.Service;
+import org.springframework.util.StringUtils;
 
 import javax.transaction.Transactional;
 import java.util.ArrayList;
@@ -54,7 +55,7 @@ public class ModelService {
 
     public Model getModel(final String modelGuid) {
         return modelRepository.findByGuid(modelGuid)
-                .orElseThrow(() -> new ModelNotFoundException(modelGuid));
+                .orElseThrow(() -> new ModelNotFoundException(modelGuid, ""));
     }
 
     private void verifyNameIsUnique(final String name, final Long appId) {

File: java/common/src/main/java/com/exadel/frs/commonservice/exception/BadFormatModelKeyException.java
Patch:
@@ -20,7 +20,7 @@
 
 public class BadFormatModelKeyException extends BasicException {
 
-    private static final String MESSAGE = "Model key should be UUID";
+    private static final String MESSAGE = "Service API key should be UUID";
 
     public BadFormatModelKeyException() {
         super(VALIDATION_CONSTRAINT_VIOLATION, MESSAGE);

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/VerifyController.java
Patch:
@@ -65,7 +65,7 @@ public Map<String, List<VerifyFacesResponse>> verify(
             @ApiParam(value = "The minimal percent confidence that found face is actually a face.")
             @RequestParam(value = "det_prob_threshold", required = false) final Double detProbThreshold,
             @ApiParam(value = "Comma-separated types of face plugins. Empty value - face plugins disabled, returns only bounding boxes")
-            @RequestParam(value = "face_plugins", required = false) final String facePlugins
+            @RequestParam(value = "face_plugins", required = false, defaultValue = "") final String facePlugins
     ) {
         validateProcessFile(processFile, limit, detProbThreshold, facePlugins);
         // find FaceResult for each file

File: java/api/src/main/java/com/exadel/frs/core/trainservice/controller/VerifyController.java
Patch:
@@ -65,7 +65,7 @@ public Map<String, List<VerifyFacesResponse>> verify(
             @ApiParam(value = "The minimal percent confidence that found face is actually a face.")
             @RequestParam(value = "det_prob_threshold", required = false) final Double detProbThreshold,
             @ApiParam(value = "Comma-separated types of face plugins. Empty value - face plugins disabled, returns only bounding boxes")
-            @RequestParam(value = "face_plugins", required = false) final String facePlugins
+            @RequestParam(value = "face_plugins", required = false, defaultValue = "") final String facePlugins
     ) {
         validateProcessFile(processFile, limit, detProbThreshold, facePlugins);
         // find FaceResult for each file

File: admin/src/main/java/com/exadel/frs/repository/InstallInfoRepository.java
Patch:
@@ -23,4 +23,5 @@
 @Repository
 public interface InstallInfoRepository extends JpaRepository<InstallInfo, String> {
 
+    InstallInfo findTopByOrderByInstallGuid();
 } 
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/enums/ModelType.java
Patch:
@@ -26,7 +26,8 @@
 public enum ModelType implements EnumCode {
 
     RECOGNITION("R"),
-    DETECTION("D");
+    DETECTION("D"),
+    VERIFY("V");
 
     @Getter
     @Setter

File: admin/src/test/java/com/exadel/frs/handler/ResponseExceptionHandlerTest.java
Patch:
@@ -20,6 +20,7 @@
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.equalTo;
 import static org.hamcrest.Matchers.is;
+import com.exadel.frs.EmbeddedPostgreSQLTest;
 import com.exadel.frs.dto.ExceptionResponseDto;
 import com.exadel.frs.exception.AccessDeniedException;
 import com.exadel.frs.exception.BasicException;
@@ -33,7 +34,7 @@
 import org.springframework.http.ResponseEntity;
 
 @SpringBootTest
-class ResponseExceptionHandlerTest {
+class ResponseExceptionHandlerTest extends EmbeddedPostgreSQLTest {
 
     @Autowired
     private ResponseExceptionHandler exceptionHandler;

File: admin/src/test/java/com/exadel/frs/security/OAuthMvcTest.java
Patch:
@@ -23,6 +23,7 @@
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.cookie;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
+import com.exadel.frs.EmbeddedPostgreSQLTest;
 import com.exadel.frs.FrsApplication;
 import com.exadel.frs.repository.UserRepository;
 import com.exadel.frs.service.UserService;
@@ -52,7 +53,7 @@
 @ExtendWith(SpringExtension.class)
 @WebAppConfiguration
 @SpringBootTest(classes = FrsApplication.class)
-class OAuthMvcTest {
+class OAuthMvcTest extends EmbeddedPostgreSQLTest {
 
     @Autowired
     private WebApplicationContext wac;

File: admin/src/test/java/com/exadel/frs/validation/ValidatorTest.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.validation;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import com.exadel.frs.EmbeddedPostgreSQLTest;
 import com.exadel.frs.dto.ui.UserRoleUpdateDto;
 import javax.validation.Validator;
 import lombok.val;
@@ -25,7 +26,7 @@
 import org.springframework.boot.test.context.SpringBootTest;
 
 @SpringBootTest
-public class ValidatorTest {
+public class ValidatorTest extends EmbeddedPostgreSQLTest {
 
     @Autowired
     private Validator validator;

File: api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/Classifier.java
Patch:
@@ -25,4 +25,6 @@ public interface Classifier extends Serializable {
     List<Pair<Double, String>> predict(double[] input, String apiKey, int resultCount);
 
     Double verify(double[] input, String apiKey, String imageId);
+
+    Double verify(double[] processFileEmbedding, double[][] checkFileEmbedding);
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/DetectionController.java
Patch:
@@ -46,7 +46,7 @@ public class DetectionController {
     private final ImageExtensionValidator imageValidator;
     private final FacesMapper mapper;
 
-    @PostMapping(value = "/faces/detection")
+    @PostMapping(value = "/detection")
     @ResponseStatus(HttpStatus.OK)
     @ApiImplicitParams({
             @ApiImplicitParam(

File: api/src/main/java/com/exadel/frs/core/trainservice/dto/FacePredictionResultDto.java
Patch:
@@ -29,4 +29,5 @@
 public class FacePredictionResultDto extends FindFacesResultDto {
 
     List<FaceSimilarityDto> faces;
+    List<List<Integer>> landmarks;
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/dto/FindFacesResultDto.java
Patch:
@@ -21,6 +21,8 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import java.util.List;
+
 @Data
 @Builder
 @NoArgsConstructor
@@ -33,6 +35,7 @@ public class FindFacesResultDto {
     private FacesBox box;
     @JsonProperty(value = "execution_time")
     private ExecutionTimeDto executionTime;
+    private List<List<Integer>> landmarks;
 
     @Data
     @NoArgsConstructor

File: api/src/main/java/com/exadel/frs/core/trainservice/enums/ModelType.java
Patch:
@@ -26,7 +26,8 @@
 public enum ModelType implements EnumCode {
 
     RECOGNITION("R"),
-    DETECTION("D");
+    DETECTION("D"),
+    VERIFY("V");
 
     @Getter
     @Setter

File: api/src/main/java/com/exadel/frs/core/trainservice/sdk/faces/feign/dto/FindFacesResult.java
Patch:
@@ -21,6 +21,8 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import java.util.List;
+
 @Data
 @Builder
 @NoArgsConstructor
@@ -33,6 +35,7 @@ public class FindFacesResult {
     private FacesBox box;
     @JsonProperty(value = "execution_time")
     private ExecutionTime executionTime;
+    private List<List<Integer>> landmarks;
 
     @Data
     @NoArgsConstructor

File: api/src/test/java/com/exadel/frs/core/trainservice/controller/DetectionControllerTest.java
Patch:
@@ -68,7 +68,7 @@ void testDetectFileExtensionException() throws Exception {
 
         // when
         mockMvc.perform(
-                multipart(API_V1 + "/faces/detection")
+                multipart(API_V1 + "/detection")
                         .file(mockFile)
                         .header(X_FRS_API_KEY_HEADER, API_KEY)
         )
@@ -94,7 +94,7 @@ void testDetectFacesException(BasicException exception, ResultMatcher matcher) t
 
         // when
         mockMvc.perform(
-                multipart(API_V1 + "/faces/detection")
+                multipart(API_V1 + "/detection")
                         .file(mockFile)
                         .header(X_FRS_API_KEY_HEADER, API_KEY)
         )
@@ -113,7 +113,7 @@ void testDetect() throws Exception {
 
         // when
         mockMvc.perform(
-                multipart(API_V1 + "/faces/detection")
+                multipart(API_V1 + "/detection")
                         .file(mockFile)
                         .header(X_FRS_API_KEY_HEADER, API_KEY)
         )

File: admin/src/main/java/com/exadel/frs/repository/InstallInfoRepository.java
Patch:
@@ -23,4 +23,5 @@
 @Repository
 public interface InstallInfoRepository extends JpaRepository<InstallInfo, String> {
 
+    InstallInfo findTopByOrderByInstallGuid();
 } 
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/enums/ModelType.java
Patch:
@@ -26,7 +26,8 @@
 public enum ModelType implements EnumCode {
 
     RECOGNITION("R"),
-    DETECTION("D");
+    DETECTION("D"),
+    VERIFY("V");
 
     @Getter
     @Setter

File: api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/Classifier.java
Patch:
@@ -25,4 +25,6 @@ public interface Classifier extends Serializable {
     List<Pair<Double, String>> predict(double[] input, String apiKey, int resultCount);
 
     Double verify(double[] input, String apiKey, String imageId);
+
+    Double verify(double[] processFileEmbedding, double[][] checkFileEmbedding);
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/enums/ModelType.java
Patch:
@@ -26,7 +26,8 @@
 public enum ModelType implements EnumCode {
 
     RECOGNITION("R"),
-    DETECTION("D");
+    DETECTION("D"),
+    VERIFY("V");
 
     @Getter
     @Setter

File: admin/src/main/java/com/exadel/frs/mapper/UserAppRoleMapper.java
Patch:
@@ -28,6 +28,7 @@ public interface UserAppRoleMapper {
     @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
+    @Mapping(source = "user.email", target = "email")
     UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);
 
     List<UserRoleResponseDto> toUserRoleResponseDto(List<UserAppRole> userAppRoles);

File: admin/src/main/java/com/exadel/frs/entity/Model.java
Patch:
@@ -58,6 +58,7 @@ public Model(Model model) {
         this.apiKey = randomUUID().toString();
         this.app = model.getApp();
         this.appModelAccess = model.appModelAccess;
+        this.type = model.type;
     }
 
     @Id

File: admin/src/main/java/com/exadel/frs/system/feign/StatisticsGeneralEntity.java
Patch:
@@ -11,8 +11,9 @@
 @NoArgsConstructor
 public class StatisticsGeneralEntity {
 
-    @JsonProperty("user_guid")
+    @JsonProperty("install_guid")
     private String userGuid;
+
     @JsonProperty("action_name")
     private StatisticsType actionName;
 

File: admin/src/test/java/com/exadel/frs/controller/UserControllerTest.java
Patch:
@@ -310,7 +310,7 @@ void shouldReturnErrorMessageWhenNoUser() throws Exception {
 
     @Test
     void shouldReturnOkWhenUserNotEnabled() throws Exception {
-        val createDto = new UserCreateDto("email", "name", "last", "password");
+        val createDto = new UserCreateDto("email", "name", "last", "password", false);
 
         val createRequest = post("/user/register")
                 .with(csrf())

File: api/src/main/java/com/exadel/frs/core/trainservice/sdk/config/FeignClientsConfig.java
Patch:
@@ -34,7 +34,7 @@ public class FeignClientsConfig {
     private final EnvironmentProperties properties;
 
     @Bean
-    public FacesFeignClient getScanFacesClient() {
+    public FacesFeignClient getFacesClient() {
         return Feign.builder()
                     .encoder(new SpringFormEncoder())
                     .decoder(new JacksonDecoder())

File: api/src/main/java/com/exadel/frs/core/trainservice/handler/ExceptionCode.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.core.trainservice.handler;
 
 import static org.springframework.http.HttpStatus.BAD_REQUEST;
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
 import static org.springframework.http.HttpStatus.METHOD_NOT_ALLOWED;
 import static org.springframework.http.HttpStatus.NOT_FOUND;
 import lombok.AllArgsConstructor;
@@ -30,6 +31,8 @@ public enum ExceptionCode {
     MODEL_NOT_FOUND(10, NOT_FOUND),
     IMAGE_NOT_FOUND(11, NOT_FOUND),
 
+    INCORRECT_MODEL_TYPE(12, INTERNAL_SERVER_ERROR),
+
     MISSING_REQUEST_HEADER(20, BAD_REQUEST),
     UNAVAILABLE_FILE_EXTENSION(21, BAD_REQUEST),
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),

File: api/src/main/java/com/exadel/frs/core/trainservice/repository/ModelRepository.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.core.trainservice.repository;
 
 import com.exadel.frs.core.trainservice.entity.Model;
+import com.exadel.frs.core.trainservice.enums.ModelType;
 import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
@@ -26,5 +27,5 @@
 @Transactional("tmPg")
 public interface ModelRepository extends JpaRepository<Model, Long> {
 
-    Optional<Model> findByApiKey(String apiKey);
+    Optional<Model> findByApiKeyAndType(String apiKey, ModelType type);
 }

File: api/src/test/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilterTest.java
Patch:
@@ -27,6 +27,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.mockito.MockitoAnnotations.initMocks;
+import com.exadel.frs.core.trainservice.enums.ModelType;
 import com.exadel.frs.core.trainservice.enums.ValidationResult;
 import com.exadel.frs.core.trainservice.exception.BadFormatModelKeyException;
 import com.exadel.frs.core.trainservice.exception.ModelNotFoundException;
@@ -114,7 +115,7 @@ public void testDoFilterWithoutApiKey() throws IOException, ServletException {
     public void testDoFilterWithValidApiKey() throws IOException, ServletException {
         when(httpServletRequest.getHeaderNames()).thenReturn(enumeration(singletonList(X_FRS_API_KEY_HEADER)));
         when(httpServletRequest.getHeaders(X_FRS_API_KEY_HEADER)).thenReturn(enumeration(singletonList(VALID_API_KEY)));
-        when(modelService.validateModelKey(anyString())).thenReturn(ValidationResult.OK);
+        when(modelService.validateModelKey(anyString(), any(ModelType.class))).thenReturn(ValidationResult.OK);
 
         securityValidationFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);
 
@@ -125,7 +126,7 @@ public void testDoFilterWithValidApiKey() throws IOException, ServletException {
     public void testDoFilterWithNonExistentApiKey() throws IOException, ServletException {
         when(httpServletRequest.getHeaderNames()).thenReturn(enumeration(singletonList(X_FRS_API_KEY_HEADER)));
         when(httpServletRequest.getHeaders(X_FRS_API_KEY_HEADER)).thenReturn(enumeration(singletonList(VALID_API_KEY)));
-        when(modelService.validateModelKey(anyString())).thenReturn(ValidationResult.FORBIDDEN);
+        when(modelService.validateModelKey(anyString(), any(ModelType.class))).thenReturn(ValidationResult.FORBIDDEN);
         when(exceptionHandler.handleDefinedExceptions(any())).thenCallRealMethod();
 
         securityValidationFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);

File: api/src/test/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilterTest.java
Patch:
@@ -27,6 +27,7 @@
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 import static org.mockito.MockitoAnnotations.initMocks;
+import com.exadel.frs.core.trainservice.enums.ModelType;
 import com.exadel.frs.core.trainservice.enums.ValidationResult;
 import com.exadel.frs.core.trainservice.exception.BadFormatModelKeyException;
 import com.exadel.frs.core.trainservice.exception.ModelNotFoundException;
@@ -114,7 +115,7 @@ public void testDoFilterWithoutApiKey() throws IOException, ServletException {
     public void testDoFilterWithValidApiKey() throws IOException, ServletException {
         when(httpServletRequest.getHeaderNames()).thenReturn(enumeration(singletonList(X_FRS_API_KEY_HEADER)));
         when(httpServletRequest.getHeaders(X_FRS_API_KEY_HEADER)).thenReturn(enumeration(singletonList(VALID_API_KEY)));
-        when(modelService.validateModelKey(anyString())).thenReturn(ValidationResult.OK);
+        when(modelService.validateModelKey(anyString(), any(ModelType.class))).thenReturn(ValidationResult.OK);
 
         securityValidationFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);
 
@@ -125,7 +126,7 @@ public void testDoFilterWithValidApiKey() throws IOException, ServletException {
     public void testDoFilterWithNonExistentApiKey() throws IOException, ServletException {
         when(httpServletRequest.getHeaderNames()).thenReturn(enumeration(singletonList(X_FRS_API_KEY_HEADER)));
         when(httpServletRequest.getHeaders(X_FRS_API_KEY_HEADER)).thenReturn(enumeration(singletonList(VALID_API_KEY)));
-        when(modelService.validateModelKey(anyString())).thenReturn(ValidationResult.FORBIDDEN);
+        when(modelService.validateModelKey(anyString(), any(ModelType.class))).thenReturn(ValidationResult.FORBIDDEN);
         when(exceptionHandler.handleDefinedExceptions(any())).thenCallRealMethod();
 
         securityValidationFilter.doFilter(httpServletRequest, httpServletResponse, filterChain);

File: api/src/main/java/com/exadel/frs/core/trainservice/handler/ExceptionCode.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.core.trainservice.handler;
 
 import static org.springframework.http.HttpStatus.BAD_REQUEST;
+import static org.springframework.http.HttpStatus.INTERNAL_SERVER_ERROR;
 import static org.springframework.http.HttpStatus.METHOD_NOT_ALLOWED;
 import static org.springframework.http.HttpStatus.NOT_FOUND;
 import lombok.AllArgsConstructor;
@@ -30,6 +31,8 @@ public enum ExceptionCode {
     MODEL_NOT_FOUND(10, NOT_FOUND),
     IMAGE_NOT_FOUND(11, NOT_FOUND),
 
+    INCORRECT_MODEL_TYPE(12, INTERNAL_SERVER_ERROR),
+
     MISSING_REQUEST_HEADER(20, BAD_REQUEST),
     UNAVAILABLE_FILE_EXTENSION(21, BAD_REQUEST),
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),

File: api/src/main/java/com/exadel/frs/core/trainservice/repository/ModelRepository.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.core.trainservice.repository;
 
 import com.exadel.frs.core.trainservice.entity.Model;
+import com.exadel.frs.core.trainservice.enums.ModelType;
 import java.util.Optional;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
@@ -26,5 +27,5 @@
 @Transactional("tmPg")
 public interface ModelRepository extends JpaRepository<Model, Long> {
 
-    Optional<Model> findByApiKey(String apiKey);
+    Optional<Model> findByApiKeyAndType(String apiKey, ModelType type);
 }

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelResponseDto.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.dto.ui;
 
+import com.exadel.frs.enums.ModelType;
 import lombok.Data;
 
 @Data
@@ -25,4 +26,5 @@ public class ModelResponseDto {
     private String name;
     private String apiKey;
     private String accessLevel;
+    private ModelType type;
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/enums/AppModelAccess.java
Patch:
@@ -23,7 +23,7 @@
 
 @NoArgsConstructor
 @AllArgsConstructor
-public enum AppModelAccess {
+public enum AppModelAccess implements EnumCode {
 
     OWNER("O"),
     READONLY("R"),

File: admin/src/main/java/com/exadel/frs/enums/AppRole.java
Patch:
@@ -23,7 +23,7 @@
 
 @NoArgsConstructor
 @AllArgsConstructor
-public enum AppRole {
+public enum AppRole implements EnumCode {
 
     OWNER("O"),
     ADMINISTRATOR("A"),

File: admin/src/main/java/com/exadel/frs/enums/GlobalRole.java
Patch:
@@ -23,7 +23,7 @@
 
 @NoArgsConstructor
 @AllArgsConstructor
-public enum GlobalRole {
+public enum GlobalRole implements EnumCode {
 
     OWNER("O"),
     ADMINISTRATOR("A"),

File: admin/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -24,6 +24,7 @@
 import com.exadel.frs.entity.App;
 import com.exadel.frs.entity.AppModel;
 import com.exadel.frs.entity.Model;
+import com.exadel.frs.enums.ModelType;
 import com.exadel.frs.exception.EmptyRequiredFieldException;
 import com.exadel.frs.exception.ModelNotFoundException;
 import com.exadel.frs.exception.ModelShareRequestNotFoundException;
@@ -93,6 +94,7 @@ public Model createModel(final ModelCreateDto modelCreateDto, final String appGu
                          .guid(randomUUID().toString())
                          .apiKey(randomUUID().toString())
                          .app(app)
+                         .type(ModelType.valueOf(modelCreateDto.getType()))
                          .build();
 
         return modelRepository.save(model);

File: admin/src/main/java/com/exadel/frs/enums/AppModelAccess.java
Patch:
@@ -23,7 +23,7 @@
 
 @NoArgsConstructor
 @AllArgsConstructor
-public enum AppModelAccess {
+public enum AppModelAccess implements EnumCode {
 
     OWNER("O"),
     READONLY("R"),

File: admin/src/main/java/com/exadel/frs/enums/AppRole.java
Patch:
@@ -23,7 +23,7 @@
 
 @NoArgsConstructor
 @AllArgsConstructor
-public enum AppRole {
+public enum AppRole implements EnumCode {
 
     OWNER("O"),
     ADMINISTRATOR("A"),

File: admin/src/main/java/com/exadel/frs/enums/GlobalRole.java
Patch:
@@ -23,7 +23,7 @@
 
 @NoArgsConstructor
 @AllArgsConstructor
-public enum GlobalRole {
+public enum GlobalRole implements EnumCode {
 
     OWNER("O"),
     ADMINISTRATOR("A"),

File: admin/src/main/java/com/exadel/frs/helpers/EnumCodeConverter.java
Patch:
@@ -21,14 +21,14 @@
 import javax.persistence.AttributeConverter;
 import org.apache.commons.lang3.StringUtils;
 
-public abstract class EnumCodeConverter<T extends Enum<T> & EnumCode, E extends BasicException> implements AttributeConverter<T, String> {
+public abstract class EnumCodeConverter<T extends Enum<T> & EnumCode> implements AttributeConverter<T, String> {
 
     @Override
     public String convertToDatabaseColumn(T enumeration) {
         return enumeration == null ? null : enumeration.getCode();
     }
 
-    protected T convertToEntityAttribute(String code, T[] values, E exception) {
+    protected T convertToEntityAttribute(String code, T[] values, BasicException exception) {
         if (StringUtils.isBlank(code) || values == null) {
             throw exception;
         }

File: admin/src/main/java/com/exadel/frs/helpers/ModelTypeConverter.java
Patch:
@@ -21,7 +21,7 @@
 import javax.persistence.Converter;
 
 @Converter
-public class ModelTypeConverter extends EnumCodeConverter<ModelType, IncorrectModelTypeException> {
+public class ModelTypeConverter extends EnumCodeConverter<ModelType> {
 
     @Override
     public ModelType convertToEntityAttribute(String code) {

File: admin/src/main/java/com/exadel/frs/validation/EnumValidator.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.stream.Stream;
 import javax.validation.ConstraintValidator;
 import javax.validation.ConstraintValidatorContext;
+import org.apache.commons.lang3.StringUtils;
 
 public class EnumValidator implements ConstraintValidator<ValidEnum, String> {
 
@@ -31,7 +32,7 @@ public void initialize(ValidEnum targetEnum) {
 
     @Override
     public boolean isValid(String value, ConstraintValidatorContext context) {
-        if (value == null) {
+        if (StringUtils.isBlank(value)) {
             return false;
         }
         return Stream.of(enumType.getEnumConstants()).anyMatch(e -> value.equals(e.name()));

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelResponseDto.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.dto.ui;
 
+import com.exadel.frs.enums.ModelType;
 import lombok.Data;
 
 @Data
@@ -25,4 +26,5 @@ public class ModelResponseDto {
     private String name;
     private String apiKey;
     private String accessLevel;
+    private ModelType type;
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -24,6 +24,7 @@
 import com.exadel.frs.entity.App;
 import com.exadel.frs.entity.AppModel;
 import com.exadel.frs.entity.Model;
+import com.exadel.frs.enums.ModelType;
 import com.exadel.frs.exception.EmptyRequiredFieldException;
 import com.exadel.frs.exception.ModelNotFoundException;
 import com.exadel.frs.exception.ModelShareRequestNotFoundException;
@@ -93,6 +94,7 @@ public Model createModel(final ModelCreateDto modelCreateDto, final String appGu
                          .guid(randomUUID().toString())
                          .apiKey(randomUUID().toString())
                          .app(app)
+                         .type(ModelType.valueOf(modelCreateDto.getType()))
                          .build();
 
         return modelRepository.save(model);

File: admin/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -31,7 +31,6 @@
 import com.exadel.frs.entity.User;
 import com.exadel.frs.entity.UserAppRole;
 import com.exadel.frs.enums.AppRole;
-import com.exadel.frs.enums.GlobalRole;
 import com.exadel.frs.exception.AppNotFoundException;
 import com.exadel.frs.exception.InsufficientPrivilegesException;
 import com.exadel.frs.exception.NameIsNotUniqueException;
@@ -221,7 +220,7 @@ public UserAppRole updateUserAppRole(final UserRoleUpdateDto userRoleUpdateDto,
 
         val currentUserRole = app.getUserAppRole(adminId);
 
-        if(userToUpdateAppRole.getRole().equals(OWNER)) {
+        if (userToUpdateAppRole.getRole().equals(OWNER)) {
             throw new InsufficientPrivilegesException();
         }
 
@@ -241,7 +240,7 @@ public void deleteUserFromApp(final String userGuid, final String guid, final Lo
         val app = getApp(guid, userId);
         val admin = userService.getUser(adminId);
 
-        authManager.verifyWritePrivilegesToApp(admin, app);
+        authManager.verifyUserDeletionFromApp(admin, userGuid, app);
 
         app.deleteUserAppRole(userGuid);
 

File: admin/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -25,7 +25,6 @@
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.ArgumentMatchers.anyLong;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyString;
 import static org.mockito.Mockito.mock;
@@ -571,7 +570,7 @@ void deleteUserFromApp() {
 
         verify(appRepositoryMock).findByGuid(APPLICATION_GUID);
         verify(appRepositoryMock).save(any());
-        verify(authManagerMock).verifyWritePrivilegesToApp(admin, app);
+        verify(authManagerMock).verifyUserDeletionFromApp(admin, userGuid, app);
         verify(authManagerMock).verifyReadPrivilegesToApp(user, app);
         verifyNoMoreInteractions(appRepositoryMock, authManagerMock);
     }

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -191,7 +191,7 @@ public Map<String, String> getDemoModel() {
 
     private void redirectToHomePage(final HttpServletResponse response) throws IOException {
         response.setStatus(FOUND.value());
-        val url = "https://" + env.getProperty("host.frs");
+        val url = env.getProperty("host.frs");
         response.sendRedirect(url);
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -112,7 +112,6 @@ public String generateRegistrationToken() {
 
     private void sendRegistrationTokenToUser(final User user) {
         val message = "Please, confirm your registration clicking the link below:\n"
-                + "https://"
                 + env.getProperty("host.frs")
                 + "/admin/user/registration/confirm?token="
                 + user.getRegistrationToken();

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -157,7 +157,7 @@ public Map<String, List<FaceVerification>> recognize(
 
         ScanResponse scanResponse;
         try {
-            scanResponse = client.scanFaces(file, limit, 0.5D);
+            scanResponse = client.scanFaces(file, limit, detProbThreshold);
         } catch (FeignException.BadRequest e) {
             return Map.of("result", Collections.EMPTY_LIST);
         }

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -78,7 +78,7 @@ public ResponseEntity recognize(
 
         ScanResponse scanResponse;
         try {
-            scanResponse = client.scanFaces(file, limit, 0.5D);
+            scanResponse = client.scanFaces(file, limit, detProbThreshold);
         } catch (FeignException.BadRequest e) {
             return ResponseEntity.status(HttpStatus.OK)
                                  .body(Map.of("result", Collections.EMPTY_LIST));

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -75,7 +75,7 @@ public FaceResponseDto addFaces(
             @RequestParam("subject")
             final String faceName,
             @ApiParam(value = "The minimal percent confidence that found face is actually a face.")
-            @RequestParam(value = "det_prob_threshold", required = false, defaultValue = "0")
+            @RequestParam(value = "det_prob_threshold", required = false)
             final Double detProbThreshold,
             @ApiParam(value = "api key", required = true)
             @RequestHeader(X_FRS_API_KEY_HEADER)
@@ -146,7 +146,7 @@ public Map<String, List<FaceVerification>> recognize(
             @PathVariable
             final String image_id,
             @ApiParam(value = "The minimal percent confidence that found face is actually a face.")
-            @RequestParam(value = "det_prob_threshold", required = false, defaultValue = "0")
+            @RequestParam(value = "det_prob_threshold", required = false)
             final Double detProbThreshold
 
     ) {

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -68,7 +68,7 @@ public ResponseEntity recognize(
             @Min(value = 1, message = "prediction_count should be equal or greater than 1")
             final Integer predictionCount,
             @ApiParam(value = "The minimal percent confidence that found face is actually a face.")
-            @RequestParam(value = "det_prob_threshold", required = false, defaultValue = "0")
+            @RequestParam(value = "det_prob_threshold", required = false)
             final Double detProbThreshold
             ) {
         imageValidator.validate(file);

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -191,7 +191,7 @@ public Map<String, String> getDemoModel() {
 
     private void redirectToHomePage(final HttpServletResponse response) throws IOException {
         response.setStatus(FOUND.value());
-        val url = "https://" + env.getProperty("host.frs");
+        val url = env.getProperty("host.frs");
         response.sendRedirect(url);
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -112,7 +112,6 @@ public String generateRegistrationToken() {
 
     private void sendRegistrationTokenToUser(final User user) {
         val message = "Please, confirm your registration clicking the link below:\n"
-                + "https://"
                 + env.getProperty("host.frs")
                 + "/admin/user/registration/confirm?token="
                 + user.getRegistrationToken();

File: admin/src/main/java/com/exadel/frs/controller/AppController.java
Patch:
@@ -137,7 +137,7 @@ public void deleteApp(
 
     @GetMapping("/app/{guid}/assign-roles")
     @ApiOperation(value = "Get application roles, that can be assigned to other users")
-    public AppRole[] getOrgRolesToAssign(
+    public AppRole[] getAppRolesToAssign(
             @ApiParam(value = "GUID of the application", required = true, example = GUID_EXAMPLE)
             @PathVariable
             final String guid

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -206,7 +206,7 @@ public UserRoleResponseDto updateUserGlobalRole(
     }
 
     @GetMapping("/global/roles")
-    @ApiOperation(value = "Get all global user roles")
+    @ApiOperation(value = "Get all global roles")
     public GlobalRole[] getGlobalRoles() {
         return GlobalRole.values();
     }

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -34,6 +34,6 @@ public class UserRoleUpdateDto {
     private String userId;
 
     @NotBlank(message = "Role cannot be empty")
-    @ValidEnum(message = "Organization role '${validatedValue}' doesn't exist!", targetClassType = GlobalRole.class)
+    @ValidEnum(message = "Global role '${validatedValue}' doesn't exist!", targetClassType = GlobalRole.class)
     private String role;
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -35,7 +35,7 @@ public enum ExceptionCode {
 
     INCORRECT_ACCESS_TYPE(6, BAD_REQUEST),
     INCORRECT_APP_ROLE(7, BAD_REQUEST),
-    INCORRECT_ORGANIZATION_ROLE(8, BAD_REQUEST),
+    INCORRECT_GLOBAL_ROLE(8, BAD_REQUEST),
     INSUFFICIENT_PRIVILEGES(9, BAD_REQUEST),
     MODEL_NOT_FOUND(10, NOT_FOUND),
 

File: admin/src/main/java/com/exadel/frs/helpers/GlobalRoleConverter.java
Patch:
@@ -17,7 +17,7 @@
 package com.exadel.frs.helpers;
 
 import com.exadel.frs.enums.GlobalRole;
-import com.exadel.frs.exception.IncorrectOrganizationRoleException;
+import com.exadel.frs.exception.IncorrectGlobalRoleException;
 import java.util.stream.Stream;
 import javax.persistence.AttributeConverter;
 import javax.persistence.Converter;
@@ -37,6 +37,6 @@ public GlobalRole convertToEntityAttribute(String code) {
                 : Stream.of(GlobalRole.values())
                         .filter(globalRole -> globalRole.getCode().equals(code))
                         .findFirst()
-                        .orElseThrow(() -> new IncorrectOrganizationRoleException(code));
+                        .orElseThrow(() -> new IncorrectGlobalRoleException(code));
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/mapper/UserGlobalRoleMapper.java
Patch:
@@ -29,6 +29,7 @@ public interface UserGlobalRoleMapper {
     @Mapping(source = "firstName", target = "firstName")
     @Mapping(source = "lastName", target = "lastName")
     @Mapping(source = "email", target = "email")
+    @Mapping(source = "globalRole", target = "role")
     UserRoleResponseDto toUserRoleResponseDto(User userAppRole);
 
     List<UserRoleResponseDto> toUserRoleResponseDto(List<User> userAppRoles);

File: admin/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -151,8 +151,9 @@ public UserAppRole inviteUser(
     ) {
         val app = getApp(appGuid, userId);
         val user = userService.getUser(userInviteDto.getUserEmail());
+        val admin = userService.getUser(userId);
 
-        authManager.verifyWritePrivilegesToApp(user, app);
+        authManager.verifyWritePrivilegesToApp(admin, app);
 
         val userAppRole = app.getUserAppRole(user.getId());
         if (userAppRole.isPresent()) {

File: admin/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -31,6 +31,7 @@
 import com.exadel.frs.dto.ui.UserDeleteDto;
 import com.exadel.frs.dto.ui.UserUpdateDto;
 import com.exadel.frs.entity.User;
+import com.exadel.frs.enums.GlobalRole;
 import com.exadel.frs.enums.Replacer;
 import com.exadel.frs.exception.EmailAlreadyRegisteredException;
 import com.exadel.frs.exception.EmptyRequiredFieldException;
@@ -346,6 +347,8 @@ void successDeleteUserWhenOrgOwnerIsReplacer() {
                                              .updateAppsConsumer(updateAppsConsumer)
                                              .build();
 
+            when(userRepositoryMock.findByGlobalRole(GlobalRole.OWNER)).thenReturn(orgOwner);
+
             userService.deleteUser(deleteUserDto);
 
             verify(authManager).verifyCanDeleteUser(deleteUserDto);

File: admin/src/test/java/com/exadel/frs/controller/AppControllerTest.java
Patch:
@@ -369,7 +369,7 @@ public void shouldReturnModelShare() throws Exception {
 
     @Test
     public void shouldReturnOkWhenDeleteUserFromApp() throws Exception {
-        val request = delete("/org/" + ORG_GUID + "/app/" + APP_GUID + "/user/" + USER_GUID)
+        val request = delete("/app/" + APP_GUID + "/user/" + USER_GUID)
                 .with(csrf())
                 .with(user(buildUser()))
                 .contentType(MediaType.APPLICATION_JSON);

File: admin/src/test/java/com/exadel/frs/controller/ModelControllerTest.java
Patch:
@@ -90,7 +90,7 @@ void shouldReturnMessageAndCodeWhenModelNameIsMissingOnUpdate() throws Exception
 
         val bodyWithNoName = new ModelUpdateDto();
 
-        val updateRequest = put("/org/" + ORG_GUID + "/app/" + APP_GUID + "/model/" + MODEL_GUID)
+        val updateRequest = put( "/app/" + APP_GUID + "/model/" + MODEL_GUID)
                 .with(csrf())
                 .with(user(buildUser()))
                 .contentType(APPLICATION_JSON);
@@ -109,7 +109,7 @@ void shareModelShouldReturnErrorMessageWhenRequestIdIsMissing() throws Exception
         doCallRealMethod().when(modelService).share(any(), any(), any());
         val expectedContent = mapper.writeValueAsString(buildExceptionResponse(new EmptyRequiredFieldException("requestId")));
 
-        val url = "/org/" + ORG_GUID + "/app/" + APP_GUID + "/model/" + MODEL_GUID + "/share";
+        val url = "/app/" + APP_GUID + "/model/" + MODEL_GUID + "/share";
         val requestToShareModel = post(url)
                 .with(csrf())
                 .with(user(buildUser()))

File: admin/src/main/java/com/exadel/frs/system/global/Constants.java
Patch:
@@ -20,4 +20,5 @@ public class Constants {
 
     public static final String GUID_EXAMPLE = "3913717b-a40b-4d6f-acc4-a861aa612651";
     public static final String ACCESS_TOKEN_COOKIE_NAME = "CFSESSION";
+    public static final String DEMO_GUID = "00000000-0000-0000-0000-000000000001";
 }
\ No newline at end of file

File: api/src/test/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictorTest.java
Patch:
@@ -65,13 +65,13 @@ void predict() {
     @Test
     void verifyTest() {
         double[] input = new double[0];
-        String imageId = "imageId";
+        val imageId = "imageId";
 
-        double expected = 1;
+        val expected = 1d;
 
         when(classifier.verify(input, MODEL_KEY, imageId)).thenReturn(expected);
 
-        double actual = faceClassifierPredictor.verify(MODEL_KEY, input, imageId);
+        val actual = faceClassifierPredictor.verify(MODEL_KEY, input, imageId);
 
         assertThat(actual).isEqualTo(expected);
 

File: api/src/main/java/com/exadel/frs/core/trainservice/cache/FaceCollection.java
Patch:
@@ -109,7 +109,7 @@ synchronized public FaceBO removeFace(final String imageId, final String faceNam
         val faceToDelete = new FaceBO(faceName, imageId);
         val index = facesMap.get(faceToDelete);
         facesMap.remove(faceToDelete);
-        facesMap.replaceAll((k, v) -> v - 1);
+        facesMap.replaceAll((k, v) -> v > index ? v - 1 : v);
 
         embeddings = Nd4j.concat(
                 0,

File: admin/src/main/java/com/exadel/frs/controller/AppController.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.controller;
 
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
+import static org.springframework.http.HttpStatus.CREATED;
 import com.exadel.frs.dto.ui.AppCreateDto;
 import com.exadel.frs.dto.ui.AppResponseDto;
 import com.exadel.frs.dto.ui.AppUpdateDto;
@@ -37,7 +38,6 @@
 import javax.validation.Valid;
 import lombok.RequiredArgsConstructor;
 import lombok.val;
-import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -83,7 +83,7 @@ public List<AppResponseDto> getApps(
         return appMapper.toResponseDto(appService.getApps(orgGuid, SecurityUtils.getPrincipalId()), SecurityUtils.getPrincipalId());
     }
 
-    @ResponseStatus(HttpStatus.CREATED)
+    @ResponseStatus(CREATED)
     @PostMapping("/app")
     @ApiOperation(value = "Create application")
     @ApiResponses({
@@ -181,7 +181,7 @@ public List<UserRoleResponseDto> getAppUsers(
         return userAppRoleMapper.toUserRoleResponseDto(appService.getAppUsers(search, orgGuid, guid, SecurityUtils.getPrincipalId()));
     }
 
-    @ResponseStatus(HttpStatus.CREATED)
+    @ResponseStatus(CREATED)
     @PostMapping("/app/{guid}/invite")
     @ApiOperation(value = "Invite user to application")
     public UserRoleResponseDto inviteUser(

File: admin/src/main/java/com/exadel/frs/controller/ModelController.java
Patch:
@@ -17,6 +17,7 @@
 package com.exadel.frs.controller;
 
 import static com.exadel.frs.system.global.Constants.GUID_EXAMPLE;
+import static org.springframework.http.HttpStatus.CREATED;
 import com.exadel.frs.dto.ui.ModelCreateDto;
 import com.exadel.frs.dto.ui.ModelResponseDto;
 import com.exadel.frs.dto.ui.ModelShareDto;
@@ -31,7 +32,6 @@
 import java.util.List;
 import javax.validation.Valid;
 import lombok.RequiredArgsConstructor;
-import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -85,7 +85,7 @@ public List<ModelResponseDto> getModels(
         );
     }
 
-    @ResponseStatus(HttpStatus.CREATED)
+    @ResponseStatus(CREATED)
     @PostMapping("/model")
     @ApiOperation(value = "Create model")
     @ApiResponses({
@@ -182,7 +182,7 @@ public void shareModel(
             @ApiParam(value = "GUID from model share request", required = true)
             @RequestBody
             final ModelShareDto modelShare
-            ) {
+    ) {
         modelService.share(modelShare, orgGuid, appGuid, guid);
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/entity/ModelShareRequestId.java
Patch:
@@ -32,6 +32,5 @@
 public class ModelShareRequestId implements Serializable {
 
     private Long appId;
-
     private UUID requestId;
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -21,6 +21,7 @@
 import static com.exadel.frs.core.trainservice.system.global.Constants.MIN_FACES_TO_TRAIN;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static org.apache.commons.lang3.StringUtils.isBlank;
+import static org.springframework.http.HttpStatus.CREATED;
 import com.exadel.frs.core.trainservice.aspect.WriteEndpoint;
 import com.exadel.frs.core.trainservice.dto.ui.FaceResponseDto;
 import com.exadel.frs.core.trainservice.entity.Face;
@@ -36,7 +37,6 @@
 import java.util.Map;
 import lombok.RequiredArgsConstructor;
 import lombok.val;
-import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.DeleteMapping;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.PathVariable;
@@ -62,7 +62,7 @@ public class FaceController {
     private static final int FIRST_ITEM_ADDED_NUM = 1;
 
     @WriteEndpoint
-    @ResponseStatus(HttpStatus.CREATED)
+    @ResponseStatus(CREATED)
     @PostMapping
     public FaceResponseDto addFaces(
             @ApiParam(value = "A picture with at least one face (accepted formats: jpeg, png).", required = true)

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/MigrateController.java
Patch:
@@ -40,6 +40,7 @@ public class MigrateController {
     public ResponseEntity migrate(@RequestParam @Valid @URL final String url) {
         migrationStatusStorage.startMigration();
         migrationComponent.migrate(url);
+
         return ResponseEntity.ok("Migration started");
     }
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/service/FaceService.java
Patch:
@@ -44,6 +44,7 @@ public Face deleteFaceById(final String id) {
 
     public List<Face> deleteFacesByModel(final String modelKey) {
         classifierManager.removeFaceClassifier(modelKey);
+
         return faceDao.deleteFacesByApiKey(modelKey);
     }
 

File: api/src/test/java/com/exadel/frs/core/trainservice/component/classifiers/LogisticRegressionClassifierTest.java
Patch:
@@ -24,7 +24,7 @@
 import lombok.val;
 import org.junit.jupiter.api.Test;
 
-public class LogisticRegressionClassifierTestIT {
+public class LogisticRegressionClassifierTest {
 
     @Test
     void train() {

File: api/src/test/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilterTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.core.trainservice.filter;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static java.util.Collections.emptyEnumeration;
 import static java.util.Collections.enumeration;
@@ -76,6 +77,7 @@ void setUp() throws IOException {
         filterChain = mock(FilterChain.class);
 
         when(httpServletResponse.getWriter()).thenReturn(new PrintWriter(new StringWriter()));
+        when(httpServletRequest.getRequestURI()).thenReturn(API_V1);
     }
 
     @Test

File: api/src/main/java/com/exadel/frs/core/trainservice/entity/Face.java
Patch:
@@ -1,7 +1,6 @@
 package com.exadel.frs.core.trainservice.entity;
 
 import com.vladmihalcea.hibernate.type.json.JsonStringType;
-import java.io.Serializable;
 import java.util.List;
 import javax.persistence.Column;
 import javax.persistence.Entity;
@@ -44,7 +43,7 @@ public class Face {
     @NoArgsConstructor
     @AllArgsConstructor
     @Accessors(chain = true)
-    public static class Embedding implements Serializable {
+    public static class Embedding {
 
         private List<Double> embeddings;
         private String calculatorVersion;

File: api/src/test/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictorTest.java
Patch:
@@ -26,7 +26,7 @@ class FaceClassifierPredictorTest {
     private ApplicationContext context;
 
     @InjectMocks
-    private FaceClassifierPredictor faceClassifierPredictor;\
+    private FaceClassifierPredictor faceClassifierPredictor;
 
     private static final String MODEL_KEY = "modelKey";
 

File: api/src/test/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictorTest.java
Patch:
@@ -19,16 +19,16 @@
 
 class FaceClassifierPredictorTest {
 
-    private static final String MODEL_KEY = "modelKey";
-
     @Mock
     private TrainedModelDao trainedModelDao;
 
     @Mock
     private ApplicationContext context;
 
     @InjectMocks
-    private FaceClassifierPredictor faceClassifierPredictor;
+    private FaceClassifierPredictor faceClassifierPredictor;\
+
+    private static final String MODEL_KEY = "modelKey";
 
     @BeforeEach
     void setUp() {

File: api/src/test/java/com/exadel/frs/core/trainservice/service/RetrainServiceImplTest.java
Patch:
@@ -14,14 +14,14 @@
 
 class RetrainServiceImplTest {
 
-    private static final String MODEL_KEY = "model_key";
-
     @Mock
     private FaceClassifierManager manager;
 
     @InjectMocks
     private RetrainServiceImpl retrainService;
 
+    private static final String MODEL_KEY = "model_key";
+
     @BeforeEach
     void setUp() {
         initMocks(this);

File: api/src/test/java/com/exadel/frs/core/trainservice/component/ClassifierManagerTest.java
Patch:
@@ -36,7 +36,6 @@
 import lombok.val;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
-import org.mockito.InOrder;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
 import org.springframework.context.ApplicationContext;
@@ -113,7 +112,7 @@ void initNewClassifier() {
         val adapterMock = mock(FaceClassifierAdapter.class);
         val faceList = mock(EmbeddingFaceList.class);
 
-        when(faceDao.countFacesInModel(MODEL_KEY)).thenReturn(nextInt(MIN_FACES_TO_TRAIN , 100));
+        when(faceDao.countFacesInModel(MODEL_KEY)).thenReturn(nextInt(MIN_FACES_TO_TRAIN, 100));
         when(faceDao.findAllFaceEmbeddingsByApiKey(MODEL_KEY)).thenReturn(faceList);
         when(context.getBean(FaceClassifierAdapter.class)).thenReturn(adapterMock);
 

File: api/src/test/java/com/exadel/frs/core/trainservice/controller/MigrateControllerTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
 import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
-import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
@@ -20,8 +19,6 @@
 @AutoConfigureMockMvc
 class MigrateControllerTest {
 
-    private static final String URL = "migrate_url";
-
     @Autowired
     private MockMvc mockMvc;
 
@@ -31,6 +28,8 @@ class MigrateControllerTest {
     @MockBean
     private MigrationComponent migrationComponent;
 
+    private static final String URL = "migrate_url";
+
     @Test
     void migrate() throws Exception {
         mockMvc.perform(post(API_V1 + "/migrate").param("url", URL))

File: api/src/test/java/com/exadel/frs/core/trainservice/service/RetrainServiceImplTest.java
Patch:
@@ -1,7 +1,6 @@
 package com.exadel.frs.core.trainservice.service;
 
 import static org.assertj.core.api.Assertions.assertThat;
-import static org.mockito.Mockito.doNothing;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;

File: admin/src/main/java/com/exadel/frs/FrsApplication.java
Patch:
@@ -25,5 +25,4 @@ public class FrsApplication {
     public static void main(String[] args) {
         SpringApplication.run(FrsApplication.class, args);
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/controller/ModelController.java
Patch:
@@ -166,7 +166,7 @@ public void deleteModel(
             @PathVariable
             final String guid
     ) {
-            modelService.deleteModel(orgGuid, appGuid, guid, SecurityUtils.getPrincipalId());
+        modelService.deleteModel(orgGuid, appGuid, guid, SecurityUtils.getPrincipalId());
     }
 
     @PostMapping("/model/{guid}/share")

File: admin/src/main/java/com/exadel/frs/dto/AccessToken.java
Patch:
@@ -26,5 +26,4 @@ public class AccessToken {
 
     @JsonProperty("access_token")
     private String accessToken;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ExceptionResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class ExceptionResponseDto {
 
     private String message;
     private Integer code;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserUpdateResponseDto.java
Patch:
@@ -16,18 +16,15 @@
 
 package com.exadel.frs.dto.ui;
 
-import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
-import lombok.experimental.FieldDefaults;
 
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
-@FieldDefaults(level = AccessLevel.PRIVATE)
 public class UserUpdateResponseDto {
 
     private String firstName;

File: admin/src/main/java/com/exadel/frs/entity/AppModelId.java
Patch:
@@ -29,7 +29,5 @@
 public class AppModelId implements Serializable {
 
     private Long appId;
-
     private Long modelId;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/entity/UserAppRoleId.java
Patch:
@@ -29,7 +29,5 @@
 public class UserAppRoleId implements Serializable {
 
     private Long userId;
-
     private Long appId;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/enums/OrganizationRole.java
Patch:
@@ -32,4 +32,4 @@ public enum OrganizationRole {
     @Getter
     @Setter
     private String code;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/AccessDeniedException.java
Patch:
@@ -25,5 +25,4 @@ public class AccessDeniedException extends BasicException {
     public AccessDeniedException() {
         super(APP_ACCESS_DENIED, MESSAGE);
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/AppNotFoundException.java
Patch:
@@ -26,5 +26,4 @@ public class AppNotFoundException extends BasicException {
     public AppNotFoundException(final String guid) {
         super(APP_NOT_FOUND, format(MESSAGE, guid));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/BasicException.java
Patch:
@@ -21,6 +21,7 @@
 
 @Getter
 public class BasicException extends RuntimeException {
+
     private final ExceptionCode exceptionCode;
     private final String message;
 
@@ -29,4 +30,4 @@ public BasicException(final ExceptionCode exceptionCode, final String message) {
         this.exceptionCode = exceptionCode;
         this.message = message;
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/EmailAlreadyRegisteredException.java
Patch:
@@ -25,5 +25,4 @@ public class EmailAlreadyRegisteredException extends BasicException {
     public EmailAlreadyRegisteredException() {
         super(EMAIL_ALREADY_REGISTERED, MESSAGE);
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/EmptyRequiredFieldException.java
Patch:
@@ -26,5 +26,4 @@ public class EmptyRequiredFieldException extends BasicException {
     public EmptyRequiredFieldException(final String fieldName) {
         super(EMPTY_REQUIRED_FIELD, format(MESSAGE, fieldName));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/IncorrectAccessTypeException.java
Patch:
@@ -26,5 +26,4 @@ public class IncorrectAccessTypeException extends BasicException {
     public IncorrectAccessTypeException(final String accessType) {
         super(INCORRECT_ACCESS_TYPE, format(ACCESS_TYPE_NOT_EXISTS_MESSAGE, accessType));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/IncorrectAppRoleException.java
Patch:
@@ -26,5 +26,4 @@ public class IncorrectAppRoleException extends BasicException {
     public IncorrectAppRoleException(final String appRole) {
         super(INCORRECT_APP_ROLE, format(APP_ROLE_NOT_EXISTS_MESSAGE, appRole));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/IncorrectOrganizationRoleException.java
Patch:
@@ -26,5 +26,4 @@ public class IncorrectOrganizationRoleException extends BasicException {
     public IncorrectOrganizationRoleException(final String organizationRole) {
         super(INCORRECT_ORGANIZATION_ROLE, format(ORGANIZATION_ROLE_NOT_EXISTS_MESSAGE, organizationRole));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/ModelShareRequestNotFoundException.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.UUID;
 
 public class ModelShareRequestNotFoundException extends BasicException {
+
     public static final String MESSAGE = "Model share request %s not found. It might be expired.";
 
     public ModelShareRequestNotFoundException(final UUID requestId) {

File: admin/src/main/java/com/exadel/frs/exception/NameIsNotUniqueException.java
Patch:
@@ -26,5 +26,4 @@ public class NameIsNotUniqueException extends BasicException {
     public NameIsNotUniqueException(String fieldName) {
         super(NAME_IS_NOT_UNIQUE, format(MESSAGE, fieldName));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/UserAlreadyHasAccessToAppException.java
Patch:
@@ -26,5 +26,4 @@ public class UserAlreadyHasAccessToAppException extends BasicException {
     public UserAlreadyHasAccessToAppException(String user, String appGuid) {
         super(USER_ALREADY_HAS_ACCESS_TO_APP, format(MESSAGE, user, appGuid));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/UserDoesNotBelongToOrganization.java
Patch:
@@ -26,5 +26,4 @@ public class UserDoesNotBelongToOrganization extends BasicException {
     public UserDoesNotBelongToOrganization() {
         super(USER_DOES_NOT_BELONG_TO_ORGANIZATION, format(MESSAGE));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/UserDoesNotExistException.java
Patch:
@@ -26,5 +26,4 @@ public class UserDoesNotExistException extends BasicException {
     public UserDoesNotExistException(final String userId) {
         super(USER_DOES_NOT_EXIST, format(MESSAGE, userId));
     }
-
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -57,7 +57,6 @@ public enum ExceptionCode {
     USER_REGISTRATION_TOKEN_EXPIRED(25, FORBIDDEN),
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
 
-
     UNDEFINED(0, BAD_REQUEST);
 
     private final Integer code;

File: admin/src/main/java/com/exadel/frs/helpers/EmailSender.java
Patch:
@@ -34,7 +34,7 @@ public class EmailSender {
     @Autowired
     private JavaMailSender javaMailSender;
 
-    public void sendMail(String to, String subject, String message)  {
+    public void sendMail(final String to, final String subject, final String message) {
         val msg = new SimpleMailMessage();
         msg.setTo(to);
         msg.setFrom(frsEmail);
@@ -47,5 +47,4 @@ public void sendMail(String to, String subject, String message)  {
             throw new UnreachableEmailException(to);
         }
     }
-
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/helpers/SecurityUtils.java
Patch:
@@ -30,5 +30,4 @@ public User getPrincipal() {
     public Long getPrincipalId() {
         return getPrincipal().getId();
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/mapper/UserAppRoleMapper.java
Patch:
@@ -29,6 +29,6 @@ public interface UserAppRoleMapper {
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);
-    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserAppRole> userAppRoles);
 
-}
+    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserAppRole> userAppRoles);
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/mapper/UserOrgRoleMapper.java
Patch:
@@ -30,6 +30,6 @@ public interface UserOrgRoleMapper {
     @Mapping(source = "user.lastName", target = "lastName")
     @Mapping(source = "user.email", target = "email")
     UserRoleResponseDto toUserRoleResponseDto(UserOrganizationRole userAppRole);
-    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserOrganizationRole> userAppRoles);
 
-}
+    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserOrganizationRole> userAppRoles);
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/repository/AppRepository.java
Patch:
@@ -30,5 +30,4 @@ public interface AppRepository extends JpaRepository<App, Long> {
     List<App> findAllByOrganizationIdAndUserAppRoles_Id_UserId(Long organizationId, Long userId);
 
     boolean existsByNameAndOrganizationId(String name, Long organizationId);
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -163,7 +163,6 @@ public UserAppRole inviteUser(
         authManager.verifyWritePrivilegesToApp(userId, app);
 
         val user = userService.getUser(userInviteDto.getUserEmail());
-        val userOrgRole = app.getOrganization().getUserOrganizationRoleOrThrow(user.getId());
         val userAppRole = app.getUserAppRole(user.getId());
         if (userAppRole.isPresent()) {
             throw new UserAlreadyHasAccessToAppException(userInviteDto.getUserEmail(), appGuid);

File: admin/src/main/java/com/exadel/frs/system/security/AuthorizationManager.java
Patch:
@@ -76,8 +76,8 @@ public void verifyWritePrivilegesToApp(final Long userId, final App app) {
         }
 
         val appRole = app.getUserAppRole(userId)
-                      .orElseThrow(InsufficientPrivilegesException::new)
-                      .getRole();
+                         .orElseThrow(InsufficientPrivilegesException::new)
+                         .getRole();
 
         if (AppRole.USER == appRole) {
             throw new InsufficientPrivilegesException();
@@ -120,4 +120,4 @@ public void verifyCanDeleteUser(final UserDeleteDto userDeleteDtg) {
     private OrganizationRole getUserOrganizationRole(final Organization organization, final Long userId) {
         return organization.getUserOrganizationRoleOrThrow(userId).getRole();
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/CustomOAuth2Exception.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 
 public class CustomOAuth2Exception extends OAuth2Exception {
+
     public CustomOAuth2Exception(String msg) {
         super(msg);
     }

File: admin/src/main/java/com/exadel/frs/system/security/TokenServicesImpl.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;
 
 public class TokenServicesImpl extends DefaultTokenServices {
+
     private TokenStore tokenStore;
 
     public TokenServicesImpl(JdbcTokenStore tokenStore) {
@@ -55,4 +56,4 @@ public OAuth2AccessToken createAccessToken(OAuth2Authentication authentication)
         });
         return super.createAccessToken(authentication);
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/client/ClientRepository.java
Patch:
@@ -22,5 +22,6 @@
 
 @Repository
 public interface ClientRepository extends JpaRepository<Client, String> {
+
     Optional<Client> findByClientId(String clientId);
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/client/ClientService.java
Patch:
@@ -32,7 +32,9 @@ public class ClientService implements ClientDetailsService {
     @Override
     public ClientDetails loadClientByClientId(String clientId) {
         return clientRepository.findByClientId(clientId)
-                .orElseThrow(() -> new EntityNotFoundException(String.format("Client with id %s not found", clientId)));
+                               .orElseThrow(() -> new EntityNotFoundException(
+                                       String.format("Client with id %s not found", clientId))
+                               );
     }
 
     public List<? extends ClientDetails> saveAll(List<Client> clientsDetail) {

File: admin/src/main/java/com/exadel/frs/system/security/client/OAuthClientProperties.java
Patch:
@@ -53,6 +53,5 @@ public static final class Client {
         private String clientSecret;
         private Integer refreshTokenValidity;
         private List<String> resourceIds;
-
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/config/WebSecurityConfig.java
Patch:
@@ -37,6 +37,7 @@
 @Configuration
 @EnableWebSecurity
 public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
+
     @Autowired
     private CustomUserDetailsService userDetailsService;
     @Autowired
@@ -81,5 +82,4 @@ public void configure(WebSecurity web) {
                 "/swagger-ui**", "/webjars/**", "/lms/**"
         );
     }
-}
-
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatistics.java
Patch:
@@ -24,4 +24,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface CallStatistics {
-}
+
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsController.java
Patch:
@@ -29,11 +29,12 @@
 @RequestMapping("/statistics/calls")
 @RequiredArgsConstructor
 public class CallStatisticsController {
+
     private final CallStatisticsService service;
 
     @GetMapping
     @ApiOperation(value = "Get all info about call count to models and apps")
     public Page<CallStatisticsInfo> getAll(@ApiParam(value = "Parameters to build page for response") Pageable pageable) {
         return service.findAll(pageable);
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsInfo.java
Patch:
@@ -32,6 +32,7 @@
 @Data
 @EqualsAndHashCode(of = {"guid"})
 public class CallStatisticsInfo {
+
     @Id
     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "call_statistics_info_seq")
     @SequenceGenerator(name = "call_statistics_info_seq", sequenceName = "call_statistics_info_seq", allocationSize = 1)
@@ -41,4 +42,4 @@ public class CallStatisticsInfo {
     private String guid;
     private long callCount;
     private String objectGuid;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsService.java
Patch:
@@ -20,5 +20,6 @@
 import org.springframework.data.domain.Pageable;
 
 public interface CallStatisticsService {
+
     Page<CallStatisticsInfo> findAll(Pageable pageable);
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsServiceImpl.java
Patch:
@@ -24,10 +24,11 @@
 @Service
 @RequiredArgsConstructor
 public class CallStatisticsServiceImpl implements CallStatisticsService {
+
     private final CallStatisticsRepository repository;
 
     @Override
     public Page<CallStatisticsInfo> findAll(Pageable pageable) {
         return repository.findAll(pageable);
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/IStatistics.java
Patch:
@@ -17,9 +17,10 @@
 package com.exadel.frs.system.statistics;
 
 public interface IStatistics {
+
     String getGuid();
 
     default ObjectType getObjectType() {
         return ObjectType.UNKNOWN;
     }
-}
+}
\ No newline at end of file

File: admin/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -323,7 +323,8 @@ private UserOrganizationRole makeOrgRole(final OrganizationRole owner, final lon
             return UserOrganizationRole.builder()
                                        .id(UserOrganizationRoleId.builder()
                                                                  .userId(orgOwnerId)
-                                                                 .build())
+                                                                 .build()
+                                       )
                                        .role(owner)
                                        .build();
         }

File: admin/src/test/java/com/exadel/frs/controller/OrganizationControllerTest.java
Patch:
@@ -199,9 +199,9 @@ void shouldReturnUpdatedOrganizationUserRole() throws Exception {
                .andExpect(status().isOk())
                .andExpect(content().string(mapper.writeValueAsString(responseDto)));
 
-        verify(organizationService).updateUserOrgRole(any(UserRoleUpdateDto.class), eq(ORG_GUID),anyLong());
+        verify(organizationService).updateUserOrgRole(any(UserRoleUpdateDto.class), eq(ORG_GUID), anyLong());
         verify(orgRoleMapper).toUserRoleResponseDto(any(UserOrganizationRole.class));
         verifyNoMoreInteractions(organizationService, orgRoleMapper);
         verifyNoInteractions(orgMapper);
     }
-}
+}
\ No newline at end of file

File: admin/src/test/java/com/exadel/frs/utils/TestUtils.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.exadel.frs.utils;
 
+import static com.exadel.frs.handler.ExceptionCode.UNDEFINED;
 import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;
 import com.exadel.frs.dto.ExceptionResponseDto;
 import com.exadel.frs.entity.User;
 import com.exadel.frs.exception.BasicException;
-import com.exadel.frs.handler.ExceptionCode;
 import javax.sql.DataSource;
 import lombok.val;
 import org.springframework.core.io.ClassPathResource;
@@ -40,7 +40,7 @@ public static ExceptionResponseDto buildExceptionResponse(final BasicException e
 
     public static ExceptionResponseDto buildUndefinedExceptionResponse(final Exception ex) {
         return ExceptionResponseDto.builder()
-                                   .code(ExceptionCode.UNDEFINED.getCode())
+                                   .code(UNDEFINED.getCode())
                                    .message(ex.getMessage())
                                    .build();
     }

File: api/src/main/java/com/exadel/frs/core/trainservice/aspect/WriteEndpoint.java
Patch:
@@ -24,4 +24,5 @@
 @Target({ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface WriteEndpoint {
-}
+
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/AspectConfiguration.java
Patch:
@@ -22,4 +22,5 @@
 @Configuration
 @EnableAspectJAutoProxy
 public class AspectConfiguration {
-}
+
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/AsyncConfiguration.java
Patch:
@@ -22,4 +22,5 @@
 @Configuration
 @EnableAsync
 public class AsyncConfiguration {
-}
+
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/SpringFoxConfig.java
Patch:
@@ -27,6 +27,7 @@
 @Configuration
 @EnableSwagger2
 public class SpringFoxConfig {
+
     @Bean
     public Docket api() {
         return new Docket(DocumentationType.SWAGGER_2)

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/MigrateController.java
Patch:
@@ -42,4 +42,4 @@ public ResponseEntity migrate(@RequestParam @Valid @URL final String url) {
         migrationComponent.migrate(url);
         return ResponseEntity.ok("Migration started");
     }
-}
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -87,7 +87,9 @@ public ResponseEntity recognize(
         for (val scanResult : scanResponse.getResult()) {
             val predictions = classifierPredictor.predict(
                     apiKey,
-                    scanResult.getEmbedding().stream().mapToDouble(d -> d).toArray(),
+                    scanResult.getEmbedding().stream()
+                                             .mapToDouble(d -> d)
+                                             .toArray(),
                     predictionCount
             );
 

File: api/src/main/java/com/exadel/frs/core/trainservice/dao/TrainedModelDao.java
Patch:
@@ -17,7 +17,6 @@
 package com.exadel.frs.core.trainservice.dao;
 
 import com.exadel.frs.core.trainservice.component.classifiers.Classifier;
-import com.exadel.frs.core.trainservice.entity.Model;
 import com.exadel.frs.core.trainservice.entity.TrainedModel;
 import com.exadel.frs.core.trainservice.exception.ModelNotTrainedException;
 import com.exadel.frs.core.trainservice.repository.TrainedModelRepository;

File: api/src/main/java/com/exadel/frs/core/trainservice/enums/ValidationResult.java
Patch:
@@ -19,6 +19,5 @@
 public enum ValidationResult {
 
     OK,
-    READ_ONLY,
     FORBIDDEN
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/exception/BasicException.java
Patch:
@@ -5,6 +5,7 @@
 
 @Getter
 public class BasicException extends RuntimeException {
+
     private final ExceptionCode exceptionCode;
     private final String message;
 
@@ -13,4 +14,4 @@ public BasicException(final ExceptionCode exceptionCode, final String message) {
         this.exceptionCode = exceptionCode;
         this.message = message;
     }
-}
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/handler/ExceptionCode.java
Patch:
@@ -41,7 +41,6 @@ public enum ExceptionCode {
 
     MISSING_REQUEST_PARAMETER(33, BAD_REQUEST),
 
-
     UNDEFINED(0, BAD_REQUEST);
 
     private final Integer code;

File: api/src/main/java/com/exadel/frs/core/trainservice/mapper/FaceMapper.java
Patch:
@@ -28,5 +28,6 @@ public interface FaceMapper {
     @Mapping(source = "id", target = "image_id")
     @Mapping(source = "faceName", target = "subject")
     FaceResponseDto toResponseDto(Face face);
+
     List<FaceResponseDto> toResponseDto(List<Face> faces);
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/system/feign/python/Face.java
Patch:
@@ -23,6 +23,6 @@
 public class Face {
 
     @JsonProperty("face_name")
-    String faceName;
-    float similarity;
+    private String faceName;
+    private float similarity;
 }

File: api/src/main/java/com/exadel/frs/core/trainservice/system/feign/python/FacePrediction.java
Patch:
@@ -22,6 +22,6 @@
 @Value
 public class FacePrediction {
 
-    ScanBox box;
-    List<Face> faces;
+    private ScanBox box;
+    private List<Face> faces;
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/util/ApplicationContextProvider.java
Patch:
@@ -38,5 +38,4 @@ public static ApplicationContext getApplicationContext() {
     public static <T> T getBean(Class<T> clazz) {
         return getApplicationContext().getBean(clazz);
     }
-
-}
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/util/MultipartFileData.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 public class MultipartFileData implements MultipartFile {
+
     private final byte[] content;
     private final String name;
     private final String contentType;
@@ -75,4 +76,4 @@ public void transferTo(File dest) throws IOException, IllegalStateException {
             fos.write(content);
         }
     }
-}
+}
\ No newline at end of file

File: api/src/test/java/com/exadel/frs/core/trainservice/dao/TrainedModelDaoTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.core.trainservice.dao;
 
+import static org.apache.commons.lang3.RandomUtils.nextLong;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalAnswers.returnsFirstArg;
 import static org.mockito.ArgumentMatchers.any;
@@ -24,7 +25,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 import static org.mockito.MockitoAnnotations.initMocks;
-import static smile.math.MathEx.randomLong;
 import com.exadel.frs.core.trainservice.component.classifiers.Classifier;
 import com.exadel.frs.core.trainservice.entity.TrainedModel;
 import com.exadel.frs.core.trainservice.repository.TrainedModelRepository;
@@ -79,7 +79,7 @@ void saveModel() {
     void updateOldModel() {
         val classifier = mock(Classifier.class);
         val calculator = "1.0";
-        val id = randomLong();
+        val id = nextLong();
         val model = TrainedModel.builder()
                                 .id(id)
                                 .build();

File: api/src/test/java/com/exadel/frs/core/trainservice/validation/ImageExtensionValidatorTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.exadel.frs.core.trainservice.validation;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -81,8 +81,8 @@ public void exceptionIfFileWithWrongExtension() {
         val file = mock(MultipartFile.class);
         when(file.getOriginalFilename()).thenReturn("image.tmp");
 
-        assertThrows(FileExtensionException.class, () ->
+        assertThatThrownBy(() ->
                 validator.validate(file)
-        );
+        ).isInstanceOf(FileExtensionException.class);
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/FrsApplication.java
Patch:
@@ -25,5 +25,4 @@ public class FrsApplication {
     public static void main(String[] args) {
         SpringApplication.run(FrsApplication.class, args);
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/controller/ModelController.java
Patch:
@@ -166,7 +166,7 @@ public void deleteModel(
             @PathVariable
             final String guid
     ) {
-            modelService.deleteModel(orgGuid, appGuid, guid, SecurityUtils.getPrincipalId());
+        modelService.deleteModel(orgGuid, appGuid, guid, SecurityUtils.getPrincipalId());
     }
 
     @PostMapping("/model/{guid}/share")

File: admin/src/main/java/com/exadel/frs/dto/AccessToken.java
Patch:
@@ -26,5 +26,4 @@ public class AccessToken {
 
     @JsonProperty("access_token")
     private String accessToken;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ExceptionResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class ExceptionResponseDto {
 
     private String message;
     private Integer code;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserUpdateResponseDto.java
Patch:
@@ -16,18 +16,15 @@
 
 package com.exadel.frs.dto.ui;
 
-import lombok.AccessLevel;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
-import lombok.experimental.FieldDefaults;
 
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
-@FieldDefaults(level = AccessLevel.PRIVATE)
 public class UserUpdateResponseDto {
 
     private String firstName;

File: admin/src/main/java/com/exadel/frs/entity/AppModelId.java
Patch:
@@ -29,7 +29,5 @@
 public class AppModelId implements Serializable {
 
     private Long appId;
-
     private Long modelId;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/entity/UserAppRoleId.java
Patch:
@@ -29,7 +29,5 @@
 public class UserAppRoleId implements Serializable {
 
     private Long userId;
-
     private Long appId;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/enums/OrganizationRole.java
Patch:
@@ -32,4 +32,4 @@ public enum OrganizationRole {
     @Getter
     @Setter
     private String code;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/AccessDeniedException.java
Patch:
@@ -25,5 +25,4 @@ public class AccessDeniedException extends BasicException {
     public AccessDeniedException() {
         super(APP_ACCESS_DENIED, MESSAGE);
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/AppNotFoundException.java
Patch:
@@ -26,5 +26,4 @@ public class AppNotFoundException extends BasicException {
     public AppNotFoundException(final String guid) {
         super(APP_NOT_FOUND, format(MESSAGE, guid));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/BasicException.java
Patch:
@@ -21,6 +21,7 @@
 
 @Getter
 public class BasicException extends RuntimeException {
+
     private final ExceptionCode exceptionCode;
     private final String message;
 
@@ -29,4 +30,4 @@ public BasicException(final ExceptionCode exceptionCode, final String message) {
         this.exceptionCode = exceptionCode;
         this.message = message;
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/EmailAlreadyRegisteredException.java
Patch:
@@ -25,5 +25,4 @@ public class EmailAlreadyRegisteredException extends BasicException {
     public EmailAlreadyRegisteredException() {
         super(EMAIL_ALREADY_REGISTERED, MESSAGE);
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/EmptyRequiredFieldException.java
Patch:
@@ -26,5 +26,4 @@ public class EmptyRequiredFieldException extends BasicException {
     public EmptyRequiredFieldException(final String fieldName) {
         super(EMPTY_REQUIRED_FIELD, format(MESSAGE, fieldName));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/IncorrectAccessTypeException.java
Patch:
@@ -26,5 +26,4 @@ public class IncorrectAccessTypeException extends BasicException {
     public IncorrectAccessTypeException(final String accessType) {
         super(INCORRECT_ACCESS_TYPE, format(ACCESS_TYPE_NOT_EXISTS_MESSAGE, accessType));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/IncorrectAppRoleException.java
Patch:
@@ -26,5 +26,4 @@ public class IncorrectAppRoleException extends BasicException {
     public IncorrectAppRoleException(final String appRole) {
         super(INCORRECT_APP_ROLE, format(APP_ROLE_NOT_EXISTS_MESSAGE, appRole));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/IncorrectOrganizationRoleException.java
Patch:
@@ -26,5 +26,4 @@ public class IncorrectOrganizationRoleException extends BasicException {
     public IncorrectOrganizationRoleException(final String organizationRole) {
         super(INCORRECT_ORGANIZATION_ROLE, format(ORGANIZATION_ROLE_NOT_EXISTS_MESSAGE, organizationRole));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/ModelShareRequestNotFoundException.java
Patch:
@@ -21,6 +21,7 @@
 import java.util.UUID;
 
 public class ModelShareRequestNotFoundException extends BasicException {
+
     public static final String MESSAGE = "Model share request %s not found. It might be expired.";
 
     public ModelShareRequestNotFoundException(final UUID requestId) {

File: admin/src/main/java/com/exadel/frs/exception/NameIsNotUniqueException.java
Patch:
@@ -26,5 +26,4 @@ public class NameIsNotUniqueException extends BasicException {
     public NameIsNotUniqueException(String fieldName) {
         super(NAME_IS_NOT_UNIQUE, format(MESSAGE, fieldName));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/UserAlreadyHasAccessToAppException.java
Patch:
@@ -26,5 +26,4 @@ public class UserAlreadyHasAccessToAppException extends BasicException {
     public UserAlreadyHasAccessToAppException(String user, String appGuid) {
         super(USER_ALREADY_HAS_ACCESS_TO_APP, format(MESSAGE, user, appGuid));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/UserDoesNotBelongToOrganization.java
Patch:
@@ -26,5 +26,4 @@ public class UserDoesNotBelongToOrganization extends BasicException {
     public UserDoesNotBelongToOrganization() {
         super(USER_DOES_NOT_BELONG_TO_ORGANIZATION, format(MESSAGE));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/exception/UserDoesNotExistException.java
Patch:
@@ -26,5 +26,4 @@ public class UserDoesNotExistException extends BasicException {
     public UserDoesNotExistException(final String userId) {
         super(USER_DOES_NOT_EXIST, format(MESSAGE, userId));
     }
-
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -57,7 +57,6 @@ public enum ExceptionCode {
     USER_REGISTRATION_TOKEN_EXPIRED(25, FORBIDDEN),
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
 
-
     UNDEFINED(0, BAD_REQUEST);
 
     private final Integer code;

File: admin/src/main/java/com/exadel/frs/helpers/EmailSender.java
Patch:
@@ -34,7 +34,7 @@ public class EmailSender {
     @Autowired
     private JavaMailSender javaMailSender;
 
-    public void sendMail(String to, String subject, String message)  {
+    public void sendMail(final String to, final String subject, final String message) {
         val msg = new SimpleMailMessage();
         msg.setTo(to);
         msg.setFrom(frsEmail);
@@ -47,5 +47,4 @@ public void sendMail(String to, String subject, String message)  {
             throw new UnreachableEmailException(to);
         }
     }
-
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/helpers/SecurityUtils.java
Patch:
@@ -30,5 +30,4 @@ public User getPrincipal() {
     public Long getPrincipalId() {
         return getPrincipal().getId();
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/mapper/UserAppRoleMapper.java
Patch:
@@ -29,6 +29,6 @@ public interface UserAppRoleMapper {
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);
-    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserAppRole> userAppRoles);
 
-}
+    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserAppRole> userAppRoles);
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/mapper/UserOrgRoleMapper.java
Patch:
@@ -30,6 +30,6 @@ public interface UserOrgRoleMapper {
     @Mapping(source = "user.lastName", target = "lastName")
     @Mapping(source = "user.email", target = "email")
     UserRoleResponseDto toUserRoleResponseDto(UserOrganizationRole userAppRole);
-    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserOrganizationRole> userAppRoles);
 
-}
+    List<UserRoleResponseDto> toUserRoleResponseDto(List<UserOrganizationRole> userAppRoles);
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/repository/AppRepository.java
Patch:
@@ -30,5 +30,4 @@ public interface AppRepository extends JpaRepository<App, Long> {
     List<App> findAllByOrganizationIdAndUserAppRoles_Id_UserId(Long organizationId, Long userId);
 
     boolean existsByNameAndOrganizationId(String name, Long organizationId);
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -163,7 +163,6 @@ public UserAppRole inviteUser(
         authManager.verifyWritePrivilegesToApp(userId, app);
 
         val user = userService.getUser(userInviteDto.getUserEmail());
-        val userOrgRole = app.getOrganization().getUserOrganizationRoleOrThrow(user.getId());
         val userAppRole = app.getUserAppRole(user.getId());
         if (userAppRole.isPresent()) {
             throw new UserAlreadyHasAccessToAppException(userInviteDto.getUserEmail(), appGuid);

File: admin/src/main/java/com/exadel/frs/system/security/AuthorizationManager.java
Patch:
@@ -76,8 +76,8 @@ public void verifyWritePrivilegesToApp(final Long userId, final App app) {
         }
 
         val appRole = app.getUserAppRole(userId)
-                      .orElseThrow(InsufficientPrivilegesException::new)
-                      .getRole();
+                         .orElseThrow(InsufficientPrivilegesException::new)
+                         .getRole();
 
         if (AppRole.USER == appRole) {
             throw new InsufficientPrivilegesException();
@@ -120,4 +120,4 @@ public void verifyCanDeleteUser(final UserDeleteDto userDeleteDtg) {
     private OrganizationRole getUserOrganizationRole(final Organization organization, final Long userId) {
         return organization.getUserOrganizationRoleOrThrow(userId).getRole();
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/CustomOAuth2Exception.java
Patch:
@@ -19,6 +19,7 @@
 import org.springframework.security.oauth2.common.exceptions.OAuth2Exception;
 
 public class CustomOAuth2Exception extends OAuth2Exception {
+
     public CustomOAuth2Exception(String msg) {
         super(msg);
     }

File: admin/src/main/java/com/exadel/frs/system/security/TokenServicesImpl.java
Patch:
@@ -27,6 +27,7 @@
 import org.springframework.security.oauth2.provider.token.store.JdbcTokenStore;
 
 public class TokenServicesImpl extends DefaultTokenServices {
+
     private TokenStore tokenStore;
 
     public TokenServicesImpl(JdbcTokenStore tokenStore) {
@@ -55,4 +56,4 @@ public OAuth2AccessToken createAccessToken(OAuth2Authentication authentication)
         });
         return super.createAccessToken(authentication);
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/client/ClientRepository.java
Patch:
@@ -22,5 +22,6 @@
 
 @Repository
 public interface ClientRepository extends JpaRepository<Client, String> {
+
     Optional<Client> findByClientId(String clientId);
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/client/ClientService.java
Patch:
@@ -32,7 +32,9 @@ public class ClientService implements ClientDetailsService {
     @Override
     public ClientDetails loadClientByClientId(String clientId) {
         return clientRepository.findByClientId(clientId)
-                .orElseThrow(() -> new EntityNotFoundException(String.format("Client with id %s not found", clientId)));
+                               .orElseThrow(() -> new EntityNotFoundException(
+                                       String.format("Client with id %s not found", clientId))
+                               );
     }
 
     public List<? extends ClientDetails> saveAll(List<Client> clientsDetail) {

File: admin/src/main/java/com/exadel/frs/system/security/client/OAuthClientProperties.java
Patch:
@@ -53,6 +53,5 @@ public static final class Client {
         private String clientSecret;
         private Integer refreshTokenValidity;
         private List<String> resourceIds;
-
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/security/config/WebSecurityConfig.java
Patch:
@@ -37,6 +37,7 @@
 @Configuration
 @EnableWebSecurity
 public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
+
     @Autowired
     private CustomUserDetailsService userDetailsService;
     @Autowired
@@ -81,5 +82,4 @@ public void configure(WebSecurity web) {
                 "/swagger-ui**", "/webjars/**", "/lms/**"
         );
     }
-}
-
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatistics.java
Patch:
@@ -24,4 +24,5 @@
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.METHOD)
 public @interface CallStatistics {
-}
+
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsController.java
Patch:
@@ -29,11 +29,12 @@
 @RequestMapping("/statistics/calls")
 @RequiredArgsConstructor
 public class CallStatisticsController {
+
     private final CallStatisticsService service;
 
     @GetMapping
     @ApiOperation(value = "Get all info about call count to models and apps")
     public Page<CallStatisticsInfo> getAll(@ApiParam(value = "Parameters to build page for response") Pageable pageable) {
         return service.findAll(pageable);
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsInfo.java
Patch:
@@ -32,6 +32,7 @@
 @Data
 @EqualsAndHashCode(of = {"guid"})
 public class CallStatisticsInfo {
+
     @Id
     @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "call_statistics_info_seq")
     @SequenceGenerator(name = "call_statistics_info_seq", sequenceName = "call_statistics_info_seq", allocationSize = 1)
@@ -41,4 +42,4 @@ public class CallStatisticsInfo {
     private String guid;
     private long callCount;
     private String objectGuid;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsService.java
Patch:
@@ -20,5 +20,6 @@
 import org.springframework.data.domain.Pageable;
 
 public interface CallStatisticsService {
+
     Page<CallStatisticsInfo> findAll(Pageable pageable);
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/CallStatisticsServiceImpl.java
Patch:
@@ -24,10 +24,11 @@
 @Service
 @RequiredArgsConstructor
 public class CallStatisticsServiceImpl implements CallStatisticsService {
+
     private final CallStatisticsRepository repository;
 
     @Override
     public Page<CallStatisticsInfo> findAll(Pageable pageable) {
         return repository.findAll(pageable);
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/system/statistics/IStatistics.java
Patch:
@@ -17,9 +17,10 @@
 package com.exadel.frs.system.statistics;
 
 public interface IStatistics {
+
     String getGuid();
 
     default ObjectType getObjectType() {
         return ObjectType.UNKNOWN;
     }
-}
+}
\ No newline at end of file

File: admin/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -323,7 +323,8 @@ private UserOrganizationRole makeOrgRole(final OrganizationRole owner, final lon
             return UserOrganizationRole.builder()
                                        .id(UserOrganizationRoleId.builder()
                                                                  .userId(orgOwnerId)
-                                                                 .build())
+                                                                 .build()
+                                       )
                                        .role(owner)
                                        .build();
         }

File: admin/src/test/java/com/exadel/frs/controller/OrganizationControllerTest.java
Patch:
@@ -199,9 +199,9 @@ void shouldReturnUpdatedOrganizationUserRole() throws Exception {
                .andExpect(status().isOk())
                .andExpect(content().string(mapper.writeValueAsString(responseDto)));
 
-        verify(organizationService).updateUserOrgRole(any(UserRoleUpdateDto.class), eq(ORG_GUID),anyLong());
+        verify(organizationService).updateUserOrgRole(any(UserRoleUpdateDto.class), eq(ORG_GUID), anyLong());
         verify(orgRoleMapper).toUserRoleResponseDto(any(UserOrganizationRole.class));
         verifyNoMoreInteractions(organizationService, orgRoleMapper);
         verifyNoInteractions(orgMapper);
     }
-}
+}
\ No newline at end of file

File: admin/src/test/java/com/exadel/frs/utils/TestUtils.java
Patch:
@@ -16,11 +16,11 @@
 
 package com.exadel.frs.utils;
 
+import static com.exadel.frs.handler.ExceptionCode.UNDEFINED;
 import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;
 import com.exadel.frs.dto.ExceptionResponseDto;
 import com.exadel.frs.entity.User;
 import com.exadel.frs.exception.BasicException;
-import com.exadel.frs.handler.ExceptionCode;
 import javax.sql.DataSource;
 import lombok.val;
 import org.springframework.core.io.ClassPathResource;
@@ -40,7 +40,7 @@ public static ExceptionResponseDto buildExceptionResponse(final BasicException e
 
     public static ExceptionResponseDto buildUndefinedExceptionResponse(final Exception ex) {
         return ExceptionResponseDto.builder()
-                                   .code(ExceptionCode.UNDEFINED.getCode())
+                                   .code(UNDEFINED.getCode())
                                    .message(ex.getMessage())
                                    .build();
     }

File: api/src/main/java/com/exadel/frs/core/trainservice/aspect/WriteEndpoint.java
Patch:
@@ -24,4 +24,5 @@
 @Target({ElementType.METHOD})
 @Retention(RetentionPolicy.RUNTIME)
 public @interface WriteEndpoint {
-}
+
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/AspectConfiguration.java
Patch:
@@ -22,4 +22,5 @@
 @Configuration
 @EnableAspectJAutoProxy
 public class AspectConfiguration {
-}
+
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/AsyncConfiguration.java
Patch:
@@ -22,4 +22,5 @@
 @Configuration
 @EnableAsync
 public class AsyncConfiguration {
-}
+
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/SpringFoxConfig.java
Patch:
@@ -27,6 +27,7 @@
 @Configuration
 @EnableSwagger2
 public class SpringFoxConfig {
+
     @Bean
     public Docket api() {
         return new Docket(DocumentationType.SWAGGER_2)

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/MigrateController.java
Patch:
@@ -42,4 +42,4 @@ public ResponseEntity migrate(@RequestParam @Valid @URL final String url) {
         migrationComponent.migrate(url);
         return ResponseEntity.ok("Migration started");
     }
-}
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -87,7 +87,9 @@ public ResponseEntity recognize(
         for (val scanResult : scanResponse.getResult()) {
             val predictions = classifierPredictor.predict(
                     apiKey,
-                    scanResult.getEmbedding().stream().mapToDouble(d -> d).toArray(),
+                    scanResult.getEmbedding().stream()
+                                             .mapToDouble(d -> d)
+                                             .toArray(),
                     predictionCount
             );
 

File: api/src/main/java/com/exadel/frs/core/trainservice/dao/TrainedModelDao.java
Patch:
@@ -17,7 +17,6 @@
 package com.exadel.frs.core.trainservice.dao;
 
 import com.exadel.frs.core.trainservice.component.classifiers.Classifier;
-import com.exadel.frs.core.trainservice.entity.Model;
 import com.exadel.frs.core.trainservice.entity.TrainedModel;
 import com.exadel.frs.core.trainservice.exception.ModelNotTrainedException;
 import com.exadel.frs.core.trainservice.repository.TrainedModelRepository;

File: api/src/main/java/com/exadel/frs/core/trainservice/enums/ValidationResult.java
Patch:
@@ -19,6 +19,5 @@
 public enum ValidationResult {
 
     OK,
-    READ_ONLY,
     FORBIDDEN
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/exception/BasicException.java
Patch:
@@ -5,6 +5,7 @@
 
 @Getter
 public class BasicException extends RuntimeException {
+
     private final ExceptionCode exceptionCode;
     private final String message;
 
@@ -13,4 +14,4 @@ public BasicException(final ExceptionCode exceptionCode, final String message) {
         this.exceptionCode = exceptionCode;
         this.message = message;
     }
-}
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/handler/ExceptionCode.java
Patch:
@@ -41,7 +41,6 @@ public enum ExceptionCode {
 
     MISSING_REQUEST_PARAMETER(33, BAD_REQUEST),
 
-
     UNDEFINED(0, BAD_REQUEST);
 
     private final Integer code;

File: api/src/main/java/com/exadel/frs/core/trainservice/mapper/FaceMapper.java
Patch:
@@ -28,5 +28,6 @@ public interface FaceMapper {
     @Mapping(source = "id", target = "image_id")
     @Mapping(source = "faceName", target = "subject")
     FaceResponseDto toResponseDto(Face face);
+
     List<FaceResponseDto> toResponseDto(List<Face> faces);
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/system/feign/python/Face.java
Patch:
@@ -23,6 +23,6 @@
 public class Face {
 
     @JsonProperty("face_name")
-    String faceName;
-    float similarity;
+    private String faceName;
+    private float similarity;
 }

File: api/src/main/java/com/exadel/frs/core/trainservice/system/feign/python/FacePrediction.java
Patch:
@@ -22,6 +22,6 @@
 @Value
 public class FacePrediction {
 
-    ScanBox box;
-    List<Face> faces;
+    private ScanBox box;
+    private List<Face> faces;
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/util/ApplicationContextProvider.java
Patch:
@@ -38,5 +38,4 @@ public static ApplicationContext getApplicationContext() {
     public static <T> T getBean(Class<T> clazz) {
         return getApplicationContext().getBean(clazz);
     }
-
-}
+}
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/util/MultipartFileData.java
Patch:
@@ -24,6 +24,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 public class MultipartFileData implements MultipartFile {
+
     private final byte[] content;
     private final String name;
     private final String contentType;
@@ -75,4 +76,4 @@ public void transferTo(File dest) throws IOException, IllegalStateException {
             fos.write(content);
         }
     }
-}
+}
\ No newline at end of file

File: api/src/test/java/com/exadel/frs/core/trainservice/dao/TrainedModelDaoTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.core.trainservice.dao;
 
+import static org.apache.commons.lang3.RandomUtils.nextLong;
 import static org.assertj.core.api.Assertions.assertThat;
 import static org.mockito.AdditionalAnswers.returnsFirstArg;
 import static org.mockito.ArgumentMatchers.any;
@@ -24,7 +25,6 @@
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
 import static org.mockito.MockitoAnnotations.initMocks;
-import static smile.math.MathEx.randomLong;
 import com.exadel.frs.core.trainservice.component.classifiers.Classifier;
 import com.exadel.frs.core.trainservice.entity.TrainedModel;
 import com.exadel.frs.core.trainservice.repository.TrainedModelRepository;
@@ -79,7 +79,7 @@ void saveModel() {
     void updateOldModel() {
         val classifier = mock(Classifier.class);
         val calculator = "1.0";
-        val id = randomLong();
+        val id = nextLong();
         val model = TrainedModel.builder()
                                 .id(id)
                                 .build();

File: api/src/test/java/com/exadel/frs/core/trainservice/validation/ImageExtensionValidatorTest.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.exadel.frs.core.trainservice.validation;
 
-import static org.junit.jupiter.api.Assertions.assertThrows;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.Mockito.mock;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
@@ -81,8 +81,8 @@ public void exceptionIfFileWithWrongExtension() {
         val file = mock(MultipartFile.class);
         when(file.getOriginalFilename()).thenReturn("image.tmp");
 
-        assertThrows(FileExtensionException.class, () ->
+        assertThatThrownBy(() ->
                 validator.validate(file)
-        );
+        ).isInstanceOf(FileExtensionException.class);
     }
 }
\ No newline at end of file

File: api/src/test/java/com/exadel/frs/core/trainservice/component/ClassifierManagerTest.java
Patch:
@@ -113,7 +113,7 @@ void initNewClassifier() {
         val adapterMock = mock(FaceClassifierAdapter.class);
         val faceList = mock(EmbeddingFaceList.class);
 
-        when(faceDao.countFacesInModel(MODEL_KEY)).thenReturn(MIN_FACES_TO_TRAIN + nextInt(0, 100));
+        when(faceDao.countFacesInModel(MODEL_KEY)).thenReturn(nextInt(MIN_FACES_TO_TRAIN , 100));
         when(faceDao.findAllFaceEmbeddingsByApiKey(MODEL_KEY)).thenReturn(faceList);
         when(context.getBean(FaceClassifierAdapter.class)).thenReturn(adapterMock);
 

File: admin/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -42,6 +42,7 @@
 import com.exadel.frs.entity.Organization;
 import com.exadel.frs.entity.User;
 import com.exadel.frs.entity.UserAppRole;
+import com.exadel.frs.entity.UserAppRoleId;
 import com.exadel.frs.entity.UserOrganizationRole;
 import com.exadel.frs.entity.UserOrganizationRoleId;
 import com.exadel.frs.enums.AppRole;
@@ -52,6 +53,7 @@
 import com.exadel.frs.exception.UserAlreadyHasAccessToAppException;
 import com.exadel.frs.exception.UserDoesNotBelongToOrganization;
 import com.exadel.frs.repository.AppRepository;
+import com.exadel.frs.repository.ModelShareRequestRepository;
 import com.exadel.frs.service.AppService;
 import com.exadel.frs.service.OrganizationService;
 import com.exadel.frs.service.UserService;
@@ -274,8 +276,7 @@ void successUpdateUserAppRole() {
         when(userServiceMock.getUserByGuid(any())).thenReturn(user);
         when(appRepositoryMock.save(any())).thenReturn(app);
 
-        val actual = appService
-                .updateUserAppRole(userRoleUpdateDto, ORGANISATION_GUID, APPLICATION_GUID, ADMIN_ID);
+        val actual = appService.updateUserAppRole(userRoleUpdateDto, ORGANISATION_GUID, APPLICATION_GUID, ADMIN_ID);
 
         assertThat(actual.getRole()).isEqualTo(Enum.valueOf(AppRole.class, userRoleUpdateDto.getRole()));
 

File: admin/src/test/java/com/exadel/frs/controller/AppControllerTest.java
Patch:
@@ -356,7 +356,7 @@ public void shouldReturnOkWhenDeleteUserFromApp() throws Exception {
                 .with(user(buildUser()))
                 .contentType(MediaType.APPLICATION_JSON);
 
-        doNothing().when(appService).deleteUserFromApp(eq(USER_GUID) ,eq(ORG_GUID), eq(APP_GUID), anyLong());
+        doNothing().when(appService).deleteUserFromApp(eq(USER_GUID), eq(ORG_GUID), eq(APP_GUID), anyLong());
 
         mockMvc.perform(request)
                .andExpect(status().isOk());

File: admin/src/main/java/com/exadel/frs/handler/ResponseExceptionHandler.java
Patch:
@@ -66,7 +66,7 @@ public ResponseEntity<ExceptionResponseDto> handle404(final Exception ex) {
 
         val body = ExceptionResponseDto.builder()
                                        .code(UNDEFINED.getCode())
-                                       .message("No message available")
+                                       .message(ex.getMessage() != null ? ex.getMessage() : "No message available")
                                        .build();
 
         return ResponseEntity.status(NOT_FOUND).body(body);

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -94,14 +94,14 @@ public void doFilter(
                 }
                 UUID.fromString(key);
             } catch (Exception e) {
-                val objectResponseEntity = handler.handleBadFormatModelKeyException(new BadFormatModelKeyException());
+                val objectResponseEntity = handler.handleDefinedExceptions(new BadFormatModelKeyException());
                 buildException(httpResponse, objectResponseEntity);
 
                 return;
             }
             val validationResult = modelService.validateModelKey(key);
             if (validationResult != OK) {
-                val objectResponseEntity = handler.handleNotFoundException(new ModelNotFoundException());
+                val objectResponseEntity = handler.handleDefinedExceptions(new ModelNotFoundException(key));
                 buildException(httpResponse, objectResponseEntity);
 
                 return;

File: api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTestIT.java
Patch:
@@ -94,7 +94,7 @@ public void deleteFaceByName() {
         val faces = facesRepository.findAll();
         val face = faces.get(new Random().nextInt(faces.size()));
 
-        faceService.deleteFaceByName(face.getFaceName(), face.getApiKey(), NO.name());
+        faceService.deleteFaceByName(face.getFaceName(), face.getApiKey());
 
         val actual = facesRepository.findAll();
 

File: api/src/main/java/com/exadel/frs/core/trainservice/dto/ExceptionResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class ExceptionResponseDto {
 
     private String message;
     private Integer code;
-
 }

File: api/src/main/java/com/exadel/frs/core/trainservice/handler/ExceptionCode.java
Patch:
@@ -28,20 +28,20 @@
 public enum ExceptionCode {
 
     MODEL_NOT_FOUND(10, NOT_FOUND),
-
     MISSING_REQUEST_HEADER(20, BAD_REQUEST),
     UNAVAILABLE_FILE_EXTENSION(21, BAD_REQUEST),
-
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
     ALREADY_IN_PROGRESS(27, BAD_REQUEST),
+
     MODEL_ALREADY_LOCKED(28, BAD_REQUEST),
     MODEL_NOT_TRAINED(29, BAD_REQUEST),
     MODEL_HAS_NOT_ENOUGH_FACES(30, BAD_REQUEST),
-
     TOO_MANY_FACES(31, BAD_REQUEST),
     WRITING_NOT_ALLOWED(32, METHOD_NOT_ALLOWED),
+
     MISSING_REQUEST_PARAMETER(33, BAD_REQUEST),
 
+
     UNDEFINED(0, BAD_REQUEST);
 
     private final Integer code;

File: admin/src/main/java/com/exadel/frs/handler/ResponseExceptionHandler.java
Patch:
@@ -66,7 +66,7 @@ public ResponseEntity<ExceptionResponseDto> handle404(final Exception ex) {
 
         val body = ExceptionResponseDto.builder()
                                        .code(UNDEFINED.getCode())
-                                       .message("No message available")
+                                       .message(ex.getMessage() != null ? ex.getMessage() : "No message available")
                                        .build();
 
         return ResponseEntity.status(NOT_FOUND).body(body);

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -94,14 +94,14 @@ public void doFilter(
                 }
                 UUID.fromString(key);
             } catch (Exception e) {
-                val objectResponseEntity = handler.handleBadFormatModelKeyException(new BadFormatModelKeyException());
+                val objectResponseEntity = handler.handleDefinedExceptions(new BadFormatModelKeyException());
                 buildException(httpResponse, objectResponseEntity);
 
                 return;
             }
             val validationResult = modelService.validateModelKey(key);
             if (validationResult != OK) {
-                val objectResponseEntity = handler.handleNotFoundException(new ModelNotFoundException());
+                val objectResponseEntity = handler.handleDefinedExceptions(new ModelNotFoundException(key));
                 buildException(httpResponse, objectResponseEntity);
 
                 return;

File: api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTestIT.java
Patch:
@@ -94,7 +94,7 @@ public void deleteFaceByName() {
         val faces = facesRepository.findAll();
         val face = faces.get(new Random().nextInt(faces.size()));
 
-        faceService.deleteFaceByName(face.getFaceName(), face.getApiKey(), NO.name());
+        faceService.deleteFaceByName(face.getFaceName(), face.getApiKey());
 
         val actual = facesRepository.findAll();
 

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -44,6 +44,7 @@
 import lombok.val;
 import org.springframework.context.annotation.Profile;
 import org.springframework.core.annotation.Order;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Component;
 
@@ -115,6 +116,7 @@ public void destroy() {
     @SneakyThrows
     private void buildException(final HttpServletResponse response, final ResponseEntity<?> responseEntity) {
         response.setStatus(responseEntity.getStatusCode().value());
+        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
         response.getWriter().append(objectMapper.writeValueAsString(responseEntity.getBody()));
         response.getWriter().flush();
     }

File: api/src/test/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilterTest.java
Patch:
@@ -41,6 +41,7 @@
 import org.junit.jupiter.api.Test;
 import org.mockito.InjectMocks;
 import org.mockito.Mock;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 
 public class SecurityValidationFilterTest {
@@ -83,5 +84,6 @@ public void testDoFilterWithShortApiKey() throws IOException, ServletException {
                 .handleBadFormatModelKeyException(new BadFormatModelKeyException())
                 .getStatusCode()
                 .value());
+        verify(httpServletResponse).setContentType(MediaType.APPLICATION_JSON_VALUE);
     }
 }

File: admin/src/test/java/com/exadel/frs/UserServiceTestIT.java
Patch:
@@ -97,6 +97,7 @@ void getEnabledUserByEmailThrowsExceptionIfUserIsDisabled() {
     @Test
     void getUserByEmailReturnsUser() {
         createUser(USER_EMAIL);
+
         val actual = userService.getUser(USER_EMAIL);
 
         assertThat(actual).isNotNull();

File: api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTestIT.java
Patch:
@@ -115,7 +115,9 @@ public void deleteFacesByModel() {
         val actual = facesRepository.findAll();
 
         assertThat(actual).hasSize(faces.size() - 2);
-        oneKeyFaces.forEach(face -> assertThat(actual).doesNotContain(face));
+        assertThat(oneKeyFaces).allSatisfy(face -> {
+            assertThat(actual).doesNotContain(face);
+        });
     }
 
     @AfterEach

File: admin/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -56,6 +56,7 @@ public enum ExceptionCode {
     UNREACHABLE_EMAIL_ADDRESS(24, BAD_REQUEST),
     USER_REGISTRATION_TOKEN_EXPIRED(25, FORBIDDEN),
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
+    MISSING_REQUEST_HEADER(27, BAD_REQUEST),
 
 
     UNDEFINED(0, BAD_REQUEST);

File: api/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/Classifier.java
Patch:
@@ -26,7 +26,5 @@ public interface Classifier extends Serializable {
 
     List<Pair<Double, String>> predict(double[] input, int resultCount);
 
-    List<String> getUsedFaceIds();
-
     boolean isTrained();
 }
\ No newline at end of file

File: api/src/main/java/com/exadel/frs/core/trainservice/config/MongoConfig.java
Patch:
@@ -30,7 +30,6 @@
 import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;
 import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
 import org.springframework.data.mongodb.core.convert.MongoCustomConversions;
-import org.springframework.data.mongodb.gridfs.GridFsTemplate;
 
 @Profile("!integration-test")
 @Configuration

File: api/src/main/java/com/exadel/frs/core/trainservice/domain/EmbeddingFaceList.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.Map;
 import lombok.Data;
 import lombok.experimental.Accessors;
-import org.apache.commons.lang3.tuple.Pair;
 
 @Data
 @Accessors(chain = true)
@@ -32,5 +31,5 @@ public class EmbeddingFaceList {
     /**
      * Pair of <id and face name> as key and <list of embeddings> as value
      */
-    private Map<Pair<String, String>, List<Double>> faceEmbeddings = new HashMap<>();
-}
\ No newline at end of file
+    private Map<String, List<List<Double>>> faceEmbeddings = new HashMap<>();
+}

File: api/src/test/java/com/exadel/frs/core/trainservice/controller/FaceControllerTest.java
Patch:
@@ -39,7 +39,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.UUID;
 import lombok.val;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;

File: api/src/test/java/com/exadel/frs/core/trainservice/dao/FaceDaoTest.java
Patch:
@@ -66,7 +66,7 @@ void deleteFaceByName() {
     }
 
     @Test
-    void deleteFaceByGuid() {
+    void deleteFaceById() {
         val faceGuid = randomUUID().toString();
         val face = Optional.of(new Face());
         when(facesRepository.findById(faceGuid)).thenReturn(face);

File: api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTest.java
Patch:
@@ -84,7 +84,7 @@ void deleteFaceByName() {
     }
 
     @Test
-    void deleteFaceByGuid() {
+    void deleteFaceById() {
         val faceId = randomUUID().toString();
 
         faceService.deleteFaceById(faceId, API_KEY, NO.name());

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -44,6 +44,7 @@
 import lombok.val;
 import org.springframework.context.annotation.Profile;
 import org.springframework.core.annotation.Order;
+import org.springframework.http.MediaType;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Component;
 
@@ -115,7 +116,7 @@ public void destroy() {
     @SneakyThrows
     private void buildException(final HttpServletResponse response, final ResponseEntity<?> responseEntity) {
         response.setStatus(responseEntity.getStatusCode().value());
-        response.setContentType("application/json");
+        response.setContentType(MediaType.APPLICATION_JSON_VALUE);
         response.getWriter().append(objectMapper.writeValueAsString(responseEntity.getBody()));
         response.getWriter().flush();
     }

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -115,6 +115,7 @@ public void destroy() {
     @SneakyThrows
     private void buildException(final HttpServletResponse response, final ResponseEntity<?> responseEntity) {
         response.setStatus(responseEntity.getStatusCode().value());
+        response.setContentType("application/json");
         response.getWriter().append(objectMapper.writeValueAsString(responseEntity.getBody()));
         response.getWriter().flush();
     }

File: admin/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -264,9 +264,9 @@ void successGetOrgUsers() {
 
         when(organizationRepositoryMock.findByGuid(ORGANIZATION_GUID)).thenReturn(Optional.of(organization));
 
-        val result = organizationService.getOrgUsers(ORGANIZATION_GUID, USER_ID);
+        val actual = organizationService.getOrgUsers(ORGANIZATION_GUID, USER_ID);
 
-        assertThat(result).hasSize(1);
+        assertThat(actual).hasSize(1);
 
         verify(organizationRepositoryMock).findByGuid(ORGANIZATION_GUID);
         verify(authManagerMock).verifyReadPrivilegesToOrg(USER_ID, organization);

File: api/src/main/java/com/exadel/frs/core/trainservice/config/MongoConfig.java
Patch:
@@ -30,7 +30,6 @@
 import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;
 import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
 import org.springframework.data.mongodb.core.convert.MongoCustomConversions;
-import org.springframework.data.mongodb.gridfs.GridFsTemplate;
 
 @Profile("!integration-test")
 @Configuration

File: api/src/test/java/com/exadel/frs/core/trainservice/controller/FaceControllerTest.java
Patch:
@@ -39,7 +39,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
-import java.util.UUID;
 import lombok.val;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;

File: api/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTestIT.java
Patch:
@@ -67,7 +67,7 @@ void setUp() {
     @Test
     public void deleteFaceByGuid() {
         val faces = facesRepository.findAll();
-        val face = faces.get(Math.abs(new Random().nextInt()) % faces.size());
+        val face = faces.get(new Random().nextInt(faces.size()));
 
         faceService.deleteFaceById(face.getId(), face.getApiKey(), NO.name());
 

File: api/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -26,7 +26,6 @@
 import com.exadel.frs.core.trainservice.system.feign.python.Face;
 import com.exadel.frs.core.trainservice.system.feign.python.FacePrediction;
 import com.exadel.frs.core.trainservice.system.feign.python.FacesClient;
-import com.exadel.frs.core.trainservice.system.feign.python.ScanResult;
 import com.exadel.frs.core.trainservice.validation.ImageExtensionValidator;
 import io.swagger.annotations.ApiParam;
 import java.math.BigDecimal;
@@ -85,7 +84,7 @@ public ResponseEntity recognize(
         val scanResponse = client.scanFaces(file, limit, 0.5D);
         val results = new ArrayList<FacePrediction>();
 
-        for (ScanResult scanResult : scanResponse.getResult()) {
+        for (val scanResult : scanResponse.getResult()) {
             val predictions = classifierPredictor.predict(
                     apiKey,
                     scanResult.getEmbedding().stream().mapToDouble(d -> d).toArray(),

File: admin/src/test/java/com/exadel/frs/OrganizationServiceIntegrationTest.java
Patch:
@@ -60,7 +60,7 @@
 import org.springframework.test.context.junit.jupiter.SpringExtension;
 
 @Slf4j
-public class OrganizationServiceTestIT {
+public class OrganizationServiceIntegrationTest {
 
     @DisplayName("Test organization delete")
     @ExtendWith(SpringExtension.class)

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -87,6 +87,9 @@ public void doFilter(
 
         val key = apiKey.get(0);
         try {
+            if (key.length() < 36) {
+                throw new IllegalArgumentException("UUID length is incorrect");
+            }
             UUID.fromString(key);
         } catch (Exception e) {
             val objectResponseEntity = handler.handleBadFormatModelKeyException(new BadFormatModelKeyException());

File: admin/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -65,7 +65,6 @@ public OrganizationRole[] getOrgRolesToAssign(final String guid, final Long user
 
         if (role.getRole() == OWNER) {
             roles = OrganizationRole.values();
-
         } else if (role.getRole() == ADMINISTRATOR) {
             roles = new OrganizationRole[]{ADMINISTRATOR, USER};
         }

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -87,6 +87,9 @@ public void doFilter(
 
         val key = apiKey.get(0);
         try {
+            if (key.length() < 36) {
+                throw new IllegalArgumentException("UUID length is incorrect");
+            }
             UUID.fromString(key);
         } catch (Exception e) {
             val objectResponseEntity = handler.handleBadFormatModelKeyException(new BadFormatModelKeyException());

File: api/src/test/java/com/exadel/frs/core/trainservice/repository/ModelRepositoryTestIT.java
Patch:
@@ -32,7 +32,6 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.test.context.junit.jupiter.EnabledIf;
 
 @MongoTest
 @Slf4j

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -132,7 +132,7 @@ public void deleteUser(
             final String replacer
     ) {
         val deleteUserDto = UserDeleteDto.builder()
-                                         .deleter(SecurityUtils.getPrincipal())
+                                         .deleter(userService.getUser(SecurityUtils.getPrincipalId()))
                                          .userToDelete(userService.getUserByGuid(userGuid))
                                          .replacer(Replacer.from(replacer))
                                          .defaultOrg(organizationService.getDefaultOrg())

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -132,7 +132,7 @@ public void deleteUser(
             final String replacer
     ) {
         val deleteUserDto = UserDeleteDto.builder()
-                                         .deleter(SecurityUtils.getPrincipal())
+                                         .deleter(userService.getUser(SecurityUtils.getPrincipalId()))
                                          .userToDelete(userService.getUserByGuid(userGuid))
                                          .replacer(Replacer.from(replacer))
                                          .defaultOrg(organizationService.getDefaultOrg())

File: api/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierAdapter.java
Patch:
@@ -63,8 +63,8 @@ public void train(
 
             for (val faceNameId : faceNameEmbeddingsMap.keySet()) {
                 val lists = faceNameEmbeddingsMap.get(faceNameId).stream()
-                                              .filter(ObjectUtils::isNotEmpty)
-                                              .collect(toList());
+                                                 .filter(ObjectUtils::isNotEmpty)
+                                                 .collect(toList());
 
                 if (isNotEmpty(lists)) {
                     labelMap.add(faceNameId);

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -121,7 +121,7 @@ public UserResponseDto updateUser(
         return userMapper.toResponseDto(userService.updateUser(userUpdateDto, SecurityUtils.getPrincipalId()));
     }
 
-    @DeleteMapping("/delete/{userGuid}")
+    @DeleteMapping("/{userGuid}")
     @ApiOperation(value = "Delete user")
     public void deleteUser(
             @ApiParam(value = "GUID of the user being deleted", required = true, example = GUID_EXAMPLE)

File: admin/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -121,7 +121,7 @@ public UserResponseDto updateUser(
         return userMapper.toResponseDto(userService.updateUser(userUpdateDto, SecurityUtils.getPrincipalId()));
     }
 
-    @DeleteMapping("/delete/{userGuid}")
+    @DeleteMapping("/{userGuid}")
     @ApiOperation(value = "Delete user")
     public void deleteUser(
             @ApiParam(value = "GUID of the user being deleted", required = true, example = GUID_EXAMPLE)

File: api/src/main/java/com/exadel/frs/core/trainservice/config/MongoConfig.java
Patch:
@@ -26,11 +26,13 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Profile;
 import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;
 import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
 import org.springframework.data.mongodb.core.convert.MongoCustomConversions;
 import org.springframework.data.mongodb.gridfs.GridFsTemplate;
 
+@Profile("!integration-test")
 @Configuration
 class MongoConfig extends AbstractMongoClientConfiguration {
 

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -42,6 +42,7 @@
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;
 import lombok.val;
+import org.springframework.context.annotation.Profile;
 import org.springframework.core.annotation.Order;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Component;
@@ -52,6 +53,7 @@
 
 @Component
 @RequiredArgsConstructor
+@Profile("!integration-test")
 @Order(1)
 public class SecurityValidationFilter implements Filter {
 

File: api/src/test/java/com/exadel/frs/core/trainservice/TrainServiceApplicationTests.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.exadel.frs.core.trainservice;
 
+import com.exadel.frs.core.trainservice.config.IntegrationTest;
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.test.context.SpringBootTest;
 
-@SpringBootTest
+@IntegrationTest
 class TrainServiceApplicationTests {
 
     @Test

File: api/src/test/java/com/exadel/frs/core/trainservice/dao/ModelDaoTest.java
Patch:
@@ -32,11 +32,9 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.test.context.junit.jupiter.EnabledIf;
 
 @MongoTest
 @Slf4j
-@EnabledIf(expression = "#{environment.acceptsProfiles('integration-test')}")
 public class ModelDaoTest {
 
     @Autowired

File: api/src/main/java/com/exadel/frs/core/trainservice/config/MongoConfig.java
Patch:
@@ -26,11 +26,13 @@
 import org.springframework.beans.factory.annotation.Value;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
+import org.springframework.context.annotation.Profile;
 import org.springframework.data.mongodb.config.AbstractMongoClientConfiguration;
 import org.springframework.data.mongodb.core.convert.MappingMongoConverter;
 import org.springframework.data.mongodb.core.convert.MongoCustomConversions;
 import org.springframework.data.mongodb.gridfs.GridFsTemplate;
 
+@Profile("!integration-test")
 @Configuration
 class MongoConfig extends AbstractMongoClientConfiguration {
 

File: api/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -42,6 +42,7 @@
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;
 import lombok.val;
+import org.springframework.context.annotation.Profile;
 import org.springframework.core.annotation.Order;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Component;
@@ -52,6 +53,7 @@
 
 @Component
 @RequiredArgsConstructor
+@Profile("!integration-test")
 @Order(1)
 public class SecurityValidationFilter implements Filter {
 

File: api/src/test/java/com/exadel/frs/core/trainservice/TrainServiceApplicationTests.java
Patch:
@@ -16,10 +16,10 @@
 
 package com.exadel.frs.core.trainservice;
 
+import com.exadel.frs.core.trainservice.config.IntegrationTest;
 import org.junit.jupiter.api.Test;
-import org.springframework.boot.test.context.SpringBootTest;
 
-@SpringBootTest
+@IntegrationTest
 class TrainServiceApplicationTests {
 
     @Test

File: api/src/test/java/com/exadel/frs/core/trainservice/dao/ModelDaoTest.java
Patch:
@@ -32,11 +32,9 @@
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.test.context.junit.jupiter.EnabledIf;
 
 @MongoTest
 @Slf4j
-@EnabledIf(expression = "#{environment.acceptsProfiles('integration-test')}")
 public class ModelDaoTest {
 
     @Autowired

File: admin/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.UUID;
+import java.util.function.Consumer;
 import javax.transaction.Transactional;
 import lombok.RequiredArgsConstructor;
 import lombok.val;
@@ -157,8 +158,9 @@ public User updateUser(final UserUpdateDto userUpdateDto, final Long userId) {
     }
 
     @Transactional
-    public void deleteUser(final UserDeleteDto userDeleteDto) {
+    public void deleteUser(final UserDeleteDto userDeleteDto, final Consumer<UserDeleteDto> removeUserFromOrgConsumer) {
         manageOwnedAppsByUserBeingDeleted(userDeleteDto);
+        removeUserFromOrgConsumer.accept(userDeleteDto);
         userRepository.deleteByGuid(userDeleteDto.getUserToDelete().getGuid());
     }
 
@@ -198,7 +200,6 @@ private void manageOwnedAppsByUserBeingDeleted(final UserDeleteDto userDeleteDto
         validateReplacer(userDeleteDto.getReplacer());
 
         updateAppsOwnership(userDeleteDto);
-        //TODO cover with test all public methods
     }
 
     private void updateAppsOwnership(final UserDeleteDto userDeleteDto) {

File: admin/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -306,7 +306,7 @@ public class DeleteUserTest {
         void successDeleteUser() {
 //            userService.deleteUser(USER_ID);
 
-            verify(userRepositoryMock).deleteById(anyLong());
+//            verify(userRepositoryMock).deleteById(anyLong());
         }
 
         @Test

File: admin/src/test/java/com/exadel/frs/controller/UserControllerTest.java
Patch:
@@ -26,6 +26,7 @@
 import com.exadel.frs.exception.ConstraintViolationException;
 import com.exadel.frs.exception.EmptyRequiredFieldException;
 import com.exadel.frs.mapper.UserMapper;
+import com.exadel.frs.service.AppService;
 import com.exadel.frs.service.OrganizationService;
 import com.exadel.frs.service.UserService;
 import com.exadel.frs.system.security.JwtAuthenticationFilter;
@@ -53,6 +54,7 @@
 @MockBeans({
         @MockBean(UserMapper.class),
         @MockBean(UserService.class),
+        @MockBean(AppService.class),
         @MockBean(OrganizationService.class)
 })
 public class UserControllerTest {

File: admin/src/main/java/com/exadel/frs/exception/UserDoesNotBelongToOrganization.java
Patch:
@@ -21,7 +21,7 @@
 
 public class UserDoesNotBelongToOrganization extends BasicException {
 
-    public static final String MESSAGE = "User doesn't have view permission for that organization";
+    public static final String MESSAGE = "User doesn't belong to the organization";
 
     public UserDoesNotBelongToOrganization() {
         super(USER_DOES_NOT_BELONG_TO_ORGANIZATION, format(MESSAGE));

File: admin/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -50,6 +50,7 @@ public enum ExceptionCode {
     UNREACHABLE_EMAIL_ADDRESS(24, BAD_REQUEST),
     USER_REGISTRATION_TOKEN_EXPIRED(25, FORBIDDEN),
     VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
+    ILLEGAL_REPLACER(27, BAD_REQUEST),
 
 
     UNDEFINED(0, BAD_REQUEST);

File: api/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -47,8 +47,9 @@ public Model saveModel(
             final FaceClassifier classifier,
             final String calculatorVersion
     ) {
+        val oldModel = modelRepository.findFirstByModelKey(modelKey);
         val model = Model.builder()
-                         .id(UUID.randomUUID().toString())
+                         .id(oldModel.isPresent() ? oldModel.get().getId() : UUID.randomUUID().toString())
                          .modelKey(modelKey)
                          .classifier(classifier)
                          .faces(classifier.getUsedFaceIds().stream()

File: api/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -47,8 +47,9 @@ public Model saveModel(
             final FaceClassifier classifier,
             final String calculatorVersion
     ) {
+        val oldModel = modelRepository.findFirstByModelKey(modelKey);
         val model = Model.builder()
-                         .id(UUID.randomUUID().toString())
+                         .id(oldModel.isPresent() ? oldModel.get().getId() : UUID.randomUUID().toString())
                          .modelKey(modelKey)
                          .classifier(classifier)
                          .faces(classifier.getUsedFaceIds().stream()

File: admin/src/main/java/com/exadel/frs/entity/Organization.java
Patch:
@@ -52,6 +52,7 @@ public class Organization {
     private Long id;
     private String name;
     private String guid;
+    private Boolean isDefault;
 
     @ToString.Exclude
     @Builder.Default

File: admin/src/main/java/com/exadel/frs/exception/OrganizationNotFoundException.java
Patch:
@@ -26,5 +26,4 @@ public class OrganizationNotFoundException extends BasicException {
     public OrganizationNotFoundException(final Object identifier) {
         super(ORGANIZATION_NOT_FOUND, format(MESSAGE, identifier));
     }
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/repository/OrganizationRepository.java
Patch:
@@ -26,4 +26,6 @@ public interface OrganizationRepository extends JpaRepository<Organization, Long
     Optional<Organization> findByGuid(String guid);
 
     List<Organization> findAllByUserOrganizationRoles_Id_UserId(Long userId);
+
+    Optional<Organization> findFirstByIsDefaultTrue();
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -126,7 +126,7 @@ public UserOrganizationRole addUserToDefaultOrg(final String userEmail) {
     }
 
     public Organization getDefaultOrg() {
-        // TODO: to use special property for finding default org
-        return organizationRepository.getOne(0L);
+        return organizationRepository.findFirstByIsDefaultTrue()
+                                     .orElseThrow(() -> new OrganizationNotFoundException("Default"));
     }
 }
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.service;
 
+import static com.exadel.frs.enums.OrganizationRole.ADMINISTRATOR;
 import static com.exadel.frs.enums.OrganizationRole.OWNER;
 import static com.exadel.frs.enums.OrganizationRole.USER;
 import static java.util.stream.Collectors.toList;
@@ -50,7 +51,7 @@ public void verifyUserHasReadPrivileges(final Long userId, final Organization or
     }
 
     public void verifyUserHasWritePrivileges(final Long userId, final Organization organization) {
-        if (OWNER != organization.getUserOrganizationRoleOrThrow(userId).getRole()) {
+        if (!List.of(OWNER, ADMINISTRATOR).contains(organization.getUserOrganizationRoleOrThrow(userId).getRole())) {
             throw new InsufficientPrivilegesException();
         }
     }

File: admin/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs.service;
 
+import static com.exadel.frs.enums.OrganizationRole.ADMINISTRATOR;
 import static com.exadel.frs.enums.OrganizationRole.OWNER;
 import static com.exadel.frs.enums.OrganizationRole.USER;
 import static java.util.stream.Collectors.toList;
@@ -50,7 +51,7 @@ public void verifyUserHasReadPrivileges(final Long userId, final Organization or
     }
 
     public void verifyUserHasWritePrivileges(final Long userId, final Organization organization) {
-        if (OWNER != organization.getUserOrganizationRoleOrThrow(userId).getRole()) {
+        if (!List.of(OWNER, ADMINISTRATOR).contains(organization.getUserOrganizationRoleOrThrow(userId).getRole())) {
             throw new InsufficientPrivilegesException();
         }
     }

File: api/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -71,7 +71,7 @@ public Model updateModelApiKey(
     }
 
     public FaceClassifier getModel(final String modelKey) {
-        return modelRepository.findById(modelKey)
+        return modelRepository.findFirstByModelKey(modelKey)
                               .orElseThrow(ModelNotTrainedException::new)
                               .getClassifier();
     }

File: api/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -71,7 +71,7 @@ public Model updateModelApiKey(
     }
 
     public FaceClassifier getModel(final String modelKey) {
-        return modelRepository.findById(modelKey)
+        return modelRepository.findFirstByModelKey(modelKey)
                               .orElseThrow(ModelNotTrainedException::new)
                               .getClassifier();
     }

File: api/src/main/java/com/exadel/frs/core/trainservice/system/feign/python/FacePrediction.java
Patch:
@@ -16,13 +16,14 @@
 
 package com.exadel.frs.core.trainservice.system.feign.python;
 
+import com.fasterxml.jackson.annotation.JsonProperty;
 import lombok.Value;
 
 @Value
 public class FacePrediction {
 
     ScanBox box;
-    String face_name;
+    @JsonProperty("face_name")
+    String faceName;
     float probability;
-    float is_face_prob;
 }
\ No newline at end of file

File: admin/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.exadel.frs;
 
+import static com.exadel.frs.enums.OrganizationRole.ADMINISTRATOR;
 import static com.exadel.frs.enums.OrganizationRole.OWNER;
 import static com.exadel.frs.enums.OrganizationRole.USER;
 import static com.google.common.collect.Lists.newArrayList;
@@ -96,7 +97,7 @@ private User user(Long id) {
 
     private static Stream<Arguments> readRoles() {
         return Stream.of(
-                Arguments.of(OrganizationRole.ADMINISTRATOR),
+                Arguments.of(ADMINISTRATOR),
                 Arguments.of(USER)
         );
     }
@@ -143,7 +144,7 @@ void successGetOwnedOrganizations() {
         val admin = UserOrganizationRole.builder()
                                         .id(new UserOrganizationRoleId(1L, 2L))
                                         .user(User.builder().id(1L).build())
-                                        .role(OrganizationRole.ADMINISTRATOR)
+                                        .role(ADMINISTRATOR)
                                         .build();
 
         val user = UserOrganizationRole.builder()

File: admin/src/main/java/com/exadel/frs/controller/OrganizationController.java
Patch:
@@ -106,7 +106,7 @@ public UserRoleResponseDto updateUserOrgRole(
             @RequestBody
             final UserRoleUpdateDto userRoleUpdateDto
     ) {
-        final Long admin = SecurityUtils.getPrincipalId();
+        val admin = SecurityUtils.getPrincipalId();
         val updatedUserOrgRole = organizationService.updateUserOrgRole(userRoleUpdateDto, guid, admin);
 
         return userOrgRoleMapper.toUserRoleResponseDto(updatedUserOrgRole);

File: admin/src/main/java/com/exadel/frs/dto/ui/AppOwnerDto.java
Patch:
@@ -24,5 +24,4 @@ public class AppOwnerDto {
     private String userId;
     private String firstName;
     private String lastName;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/AppResponseDto.java
Patch:
@@ -40,4 +40,4 @@ public String getGuid() {
     public ObjectType getObjectType() {
         return ObjectType.APP;
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelResponseDto.java
Patch:
@@ -39,4 +39,4 @@ public String getGuid() {
     public ObjectType getObjectType() {
         return ObjectType.MODEL;
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelShareDto.java
Patch:
@@ -16,13 +16,12 @@
 
 package com.exadel.frs.dto.ui;
 
+import java.util.UUID;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.UUID;
-
 @Data
 @Builder
 @AllArgsConstructor

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelShareResponseDto.java
Patch:
@@ -16,11 +16,10 @@
 
 package com.exadel.frs.dto.ui;
 
+import java.util.UUID;
 import lombok.Builder;
 import lombok.Data;
 
-import java.util.UUID;
-
 @Data
 @Builder
 public class ModelShareResponseDto {

File: admin/src/main/java/com/exadel/frs/dto/ui/OrgUpdateDto.java
Patch:
@@ -17,7 +17,6 @@
 package com.exadel.frs.dto.ui;
 
 import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotEmpty;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -31,5 +30,4 @@ public class OrgUpdateDto {
 
     @NotBlank
     private String name;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserAutocompleteDto.java
Patch:
@@ -16,13 +16,12 @@
 
 package com.exadel.frs.dto.ui;
 
+import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.List;
-
 @Data
 @Builder
 @AllArgsConstructor

File: admin/src/main/java/com/exadel/frs/dto/ui/UserCreateDto.java
Patch:
@@ -31,5 +31,4 @@ public class UserCreateDto {
     private String firstName;
     private String lastName;
     private String password;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserInviteDto.java
Patch:
@@ -29,5 +29,4 @@ public class UserInviteDto {
 
     private String role;
     private String userEmail;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRemoveDto.java
Patch:
@@ -28,5 +28,4 @@
 public class UserRemoveDto {
 
     private String userId;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class UserResponseDto {
     private String email;
     private String firstName;
     private String lastName;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRoleResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class UserRoleResponseDto {
     private String firstName;
     private String lastName;
     private String role;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -22,8 +22,6 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import javax.validation.constraints.NotNull;
-
 @Data
 @Builder
 @AllArgsConstructor
@@ -35,4 +33,4 @@ public class UserRoleUpdateDto {
 
     @NotBlank(message = "Role cannot be empty")
     private String role;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserUpdateDto.java
Patch:
@@ -38,4 +38,4 @@ public class UserUpdateDto {
     @NotEmpty
     @Size(min = 8, max = 255)
     private String password;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserUpdateResponseDto.java
Patch:
@@ -32,4 +32,4 @@ public class UserUpdateResponseDto {
 
     private String firstName;
     private String lastName;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/controller/OrganizationController.java
Patch:
@@ -106,7 +106,7 @@ public UserRoleResponseDto updateUserOrgRole(
             @RequestBody
             final UserRoleUpdateDto userRoleUpdateDto
     ) {
-        final Long admin = SecurityUtils.getPrincipalId();
+        val admin = SecurityUtils.getPrincipalId();
         val updatedUserOrgRole = organizationService.updateUserOrgRole(userRoleUpdateDto, guid, admin);
 
         return userOrgRoleMapper.toUserRoleResponseDto(updatedUserOrgRole);

File: admin/src/main/java/com/exadel/frs/dto/ui/AppOwnerDto.java
Patch:
@@ -24,5 +24,4 @@ public class AppOwnerDto {
     private String userId;
     private String firstName;
     private String lastName;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/AppResponseDto.java
Patch:
@@ -40,4 +40,4 @@ public String getGuid() {
     public ObjectType getObjectType() {
         return ObjectType.APP;
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelResponseDto.java
Patch:
@@ -39,4 +39,4 @@ public String getGuid() {
     public ObjectType getObjectType() {
         return ObjectType.MODEL;
     }
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelShareDto.java
Patch:
@@ -16,13 +16,12 @@
 
 package com.exadel.frs.dto.ui;
 
+import java.util.UUID;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.UUID;
-
 @Data
 @Builder
 @AllArgsConstructor

File: admin/src/main/java/com/exadel/frs/dto/ui/ModelShareResponseDto.java
Patch:
@@ -16,11 +16,10 @@
 
 package com.exadel.frs.dto.ui;
 
+import java.util.UUID;
 import lombok.Builder;
 import lombok.Data;
 
-import java.util.UUID;
-
 @Data
 @Builder
 public class ModelShareResponseDto {

File: admin/src/main/java/com/exadel/frs/dto/ui/OrgUpdateDto.java
Patch:
@@ -17,7 +17,6 @@
 package com.exadel.frs.dto.ui;
 
 import javax.validation.constraints.NotBlank;
-import javax.validation.constraints.NotEmpty;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -31,5 +30,4 @@ public class OrgUpdateDto {
 
     @NotBlank
     private String name;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserAutocompleteDto.java
Patch:
@@ -16,13 +16,12 @@
 
 package com.exadel.frs.dto.ui;
 
+import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import java.util.List;
-
 @Data
 @Builder
 @AllArgsConstructor

File: admin/src/main/java/com/exadel/frs/dto/ui/UserCreateDto.java
Patch:
@@ -31,5 +31,4 @@ public class UserCreateDto {
     private String firstName;
     private String lastName;
     private String password;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserInviteDto.java
Patch:
@@ -29,5 +29,4 @@ public class UserInviteDto {
 
     private String role;
     private String userEmail;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRemoveDto.java
Patch:
@@ -28,5 +28,4 @@
 public class UserRemoveDto {
 
     private String userId;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class UserResponseDto {
     private String email;
     private String firstName;
     private String lastName;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRoleResponseDto.java
Patch:
@@ -25,5 +25,4 @@ public class UserRoleResponseDto {
     private String firstName;
     private String lastName;
     private String role;
-
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -22,8 +22,6 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
-import javax.validation.constraints.NotNull;
-
 @Data
 @Builder
 @AllArgsConstructor
@@ -35,4 +33,4 @@ public class UserRoleUpdateDto {
 
     @NotBlank(message = "Role cannot be empty")
     private String role;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserUpdateDto.java
Patch:
@@ -38,4 +38,4 @@ public class UserUpdateDto {
     @NotEmpty
     @Size(min = 8, max = 255)
     private String password;
-}
+}
\ No newline at end of file

File: admin/src/main/java/com/exadel/frs/dto/ui/UserUpdateResponseDto.java
Patch:
@@ -32,4 +32,4 @@ public class UserUpdateResponseDto {
 
     private String firstName;
     private String lastName;
-}
+}
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/system/rest/CoreFacesClient.java
Patch:
@@ -10,7 +10,7 @@ public interface CoreFacesClient {
     @Headers("x-frs-api-key: {apiKey}")
     int deleteFaces(@Param("apiKey") final String apiKey);
 
-    @RequestLine("PUT /api/v1/faces/api-key?new_model_api_key={newModelKey}")
+    @RequestLine("PUT /api/v1/models/api-key?new_model_api_key={newModelKey}")
     @Headers("x-frs-api-key: {apiKey}")
     void updateModelKeyForFaces(
             @Param("apiKey") final String apiKey,

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/InsufficientPrivilegesException.java
Patch:
@@ -1,7 +1,6 @@
 package com.exadel.frs.exception;
 
 import static com.exadel.frs.handler.ExceptionCode.INSUFFICIENT_PRIVILEGES;
-import static java.lang.String.format;
 
 public class InsufficientPrivilegesException extends BasicException {
 
@@ -10,5 +9,4 @@ public class InsufficientPrivilegesException extends BasicException {
     public InsufficientPrivilegesException() {
         super(INSUFFICIENT_PRIVILEGES, MESSAGE);
     }
-
-}
+}
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -37,11 +37,11 @@ public Organization getOrganization(final String organizationGuid) {
                 .orElseThrow(() -> new OrganizationNotFoundException(organizationGuid));
     }
 
-    private void verifyUserHasReadPrivileges(final Long userId, final Organization organization) {
+    public void verifyUserHasReadPrivileges(final Long userId, final Organization organization) {
         organization.getUserOrganizationRoleOrThrow(userId);
     }
 
-    private void verifyUserHasWritePrivileges(final Long userId, final Organization organization) {
+    public void verifyUserHasWritePrivileges(final Long userId, final Organization organization) {
         if (OWNER != organization.getUserOrganizationRoleOrThrow(userId).getRole()) {
             throw new InsufficientPrivilegesException();
         }
@@ -63,7 +63,6 @@ public Organization getOrganization(final String guid, final Long userId) {
     public List<Organization> getOrganizations(final Long userId) {
         return organizationRepository.findAllByUserOrganizationRoles_Id_UserId(userId);
     }
-
     public List<Organization> getOwnedOrganizations(final Long userId) {
         return getOrganizations(userId).stream()
                                        .filter(org -> org.getUserOrganizationRoleOrThrow(userId).getRole().equals(OWNER))

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -11,6 +11,7 @@
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -309,7 +310,7 @@ void failCreateAppUserDoesNotBelongToOrganization() {
         val organization = organization();
 
         when(organizationServiceMock.getOrganization(anyString())).thenReturn(organization);
-        when(userServiceMock.getUser(anyLong())).thenReturn(user);
+        doThrow(UserDoesNotBelongToOrganization.class).when(organizationServiceMock).verifyUserHasWritePrivileges(USER_ID, organization);
 
         assertThrows(UserDoesNotBelongToOrganization.class, () -> appService.createApp(appCreateDto, ORGANISATION_GUID, USER_ID));
     }
@@ -323,7 +324,7 @@ void failCreateAppInsufficientPrivileges(final OrganizationRole organizationRole
         organization.addUserOrganizationRole(user, organizationRole);
 
         when(organizationServiceMock.getOrganization(anyString())).thenReturn(organization);
-        when(userServiceMock.getUser(anyLong())).thenReturn(user);
+        doThrow(InsufficientPrivilegesException.class).when(organizationServiceMock).verifyUserHasWritePrivileges(USER_ID, organization);
 
         assertThrows(InsufficientPrivilegesException.class, () -> appService.createApp(appCreateDto, ORGANISATION_GUID, USER_ID));
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/InsufficientPrivilegesException.java
Patch:
@@ -1,7 +1,6 @@
 package com.exadel.frs.exception;
 
 import static com.exadel.frs.handler.ExceptionCode.INSUFFICIENT_PRIVILEGES;
-import static java.lang.String.format;
 
 public class InsufficientPrivilegesException extends BasicException {
 
@@ -10,5 +9,4 @@ public class InsufficientPrivilegesException extends BasicException {
     public InsufficientPrivilegesException() {
         super(INSUFFICIENT_PRIVILEGES, MESSAGE);
     }
-
-}
+}
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -37,11 +37,11 @@ public Organization getOrganization(final String organizationGuid) {
                 .orElseThrow(() -> new OrganizationNotFoundException(organizationGuid));
     }
 
-    private void verifyUserHasReadPrivileges(final Long userId, final Organization organization) {
+    public void verifyUserHasReadPrivileges(final Long userId, final Organization organization) {
         organization.getUserOrganizationRoleOrThrow(userId);
     }
 
-    private void verifyUserHasWritePrivileges(final Long userId, final Organization organization) {
+    public void verifyUserHasWritePrivileges(final Long userId, final Organization organization) {
         if (OWNER != organization.getUserOrganizationRoleOrThrow(userId).getRole()) {
             throw new InsufficientPrivilegesException();
         }
@@ -63,7 +63,6 @@ public Organization getOrganization(final String guid, final Long userId) {
     public List<Organization> getOrganizations(final Long userId) {
         return organizationRepository.findAllByUserOrganizationRoles_Id_UserId(userId);
     }
-
     public List<Organization> getOwnedOrganizations(final Long userId) {
         return getOrganizations(userId).stream()
                                        .filter(org -> org.getUserOrganizationRoleOrThrow(userId).getRole().equals(OWNER))

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -11,6 +11,7 @@
 import static org.mockito.ArgumentMatchers.anyLong;
 import static org.mockito.Mockito.any;
 import static org.mockito.Mockito.anyString;
+import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
 import static org.mockito.Mockito.when;
@@ -309,7 +310,7 @@ void failCreateAppUserDoesNotBelongToOrganization() {
         val organization = organization();
 
         when(organizationServiceMock.getOrganization(anyString())).thenReturn(organization);
-        when(userServiceMock.getUser(anyLong())).thenReturn(user);
+        doThrow(UserDoesNotBelongToOrganization.class).when(organizationServiceMock).verifyUserHasWritePrivileges(USER_ID, organization);
 
         assertThrows(UserDoesNotBelongToOrganization.class, () -> appService.createApp(appCreateDto, ORGANISATION_GUID, USER_ID));
     }
@@ -323,7 +324,7 @@ void failCreateAppInsufficientPrivileges(final OrganizationRole organizationRole
         organization.addUserOrganizationRole(user, organizationRole);
 
         when(organizationServiceMock.getOrganization(anyString())).thenReturn(organization);
-        when(userServiceMock.getUser(anyLong())).thenReturn(user);
+        doThrow(InsufficientPrivilegesException.class).when(organizationServiceMock).verifyUserHasWritePrivileges(USER_ID, organization);
 
         assertThrows(InsufficientPrivilegesException.class, () -> appService.createApp(appCreateDto, ORGANISATION_GUID, USER_ID));
     }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/ScanServiceImpl.java
Patch:
@@ -2,9 +2,9 @@
 
 import static java.util.stream.Collectors.toList;
 import com.exadel.frs.core.trainservice.dao.FaceDao;
-import com.exadel.frs.core.trainservice.entity.Face;
+import com.exadel.frs.core.trainservice.entity.mongo.Face;
 import com.exadel.frs.core.trainservice.exception.TooManyFacesException;
-import com.exadel.frs.core.trainservice.system.feign.FacesClient;
+import com.exadel.frs.core.trainservice.system.feign.python.FacesClient;
 import java.io.IOException;
 import java.util.stream.Stream;
 import lombok.RequiredArgsConstructor;

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -89,10 +89,10 @@ public User createUser(final UserCreateDto userCreateDto) {
                        .accountNonLocked(true)
                        .credentialsNonExpired(true)
                        .enabled(isAccountEnabled)
-                       .registrationToken(generateRegistrationToken())
                        .build();
 
         if (isMailServerEnabled) {
+            user.setRegistrationToken(generateRegistrationToken());
             sendRegistrationTokenToUser(user);
         }
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -89,10 +89,10 @@ public User createUser(final UserCreateDto userCreateDto) {
                        .accountNonLocked(true)
                        .credentialsNonExpired(true)
                        .enabled(isAccountEnabled)
-                       .registrationToken(generateRegistrationToken())
                        .build();
 
         if (isMailServerEnabled) {
+            user.setRegistrationToken(generateRegistrationToken());
             sendRegistrationTokenToUser(user);
         }
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/migration/MigrationComponent.java
Patch:
@@ -1,6 +1,6 @@
 package com.exadel.frs.core.trainservice.component.migration;
 
-import static java.util.stream.Collectors.*;
+import static java.util.stream.Collectors.toList;
 import com.exadel.frs.core.trainservice.component.FaceClassifierLockManager;
 import com.exadel.frs.core.trainservice.component.FaceClassifierManager;
 import com.exadel.frs.core.trainservice.dao.ModelDao;
@@ -11,7 +11,6 @@
 import com.exadel.frs.core.trainservice.util.MultipartFileData;
 import feign.FeignException;
 import java.io.IOException;
-import java.util.stream.Collectors;
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/config/repository/DbConfig.java
Patch:
@@ -38,6 +38,7 @@ public LocalContainerEntityManagerFactoryBean pgEntityManager(@Qualifier("dsPg")
         properties.put("hibernate.ddl-auto", env.getProperty("spring.jpa.hibernate.ddl-auto"));
         properties.put("hibernate.dialect", env.getProperty("spring.jpa.properties.hibernate.dialect"));
         em.setJpaPropertyMap(properties);
+
         return em;
     }
 
@@ -56,6 +57,7 @@ public DataSourceProperties dataSourceProperties() {
     public PlatformTransactionManager pgTransactionManager(@Qualifier("emPg") LocalContainerEntityManagerFactoryBean localContainerEntityManagerFactoryBean) {
         val transactionManager = new JpaTransactionManager();
         transactionManager.setEntityManagerFactory(localContainerEntityManagerFactoryBean.getObject());
+
         return transactionManager;
     }
 }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/entity/postgres/Model.java
Patch:
@@ -1,10 +1,9 @@
 package com.exadel.frs.core.trainservice.entity.postgres;
 
-import static javax.persistence.GenerationType.*;
+import static javax.persistence.GenerationType.SEQUENCE;
 import javax.persistence.Column;
 import javax.persistence.Entity;
 import javax.persistence.GeneratedValue;
-import javax.persistence.GenerationType;
 import javax.persistence.Id;
 import javax.persistence.SequenceGenerator;
 import javax.persistence.Table;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/handler/ResponseExceptionHandler.java
Patch:
@@ -41,14 +41,12 @@ public ResponseEntity<Object> handleMigrationExecutionException(
 
     @ExceptionHandler(value = {BadFormatModelKeyException.class})
     public ResponseEntity<Object> handleBadFormatModelKeyException(final BadFormatModelKeyException e) {
-
         return ResponseEntity.status(BAD_REQUEST)
                              .body(new RetrainResponse(e.getMessage()));
     }
 
     @ExceptionHandler(value = {AccessDeniedException.class})
     public ResponseEntity<Object> handleAccessDeniedException(final AccessDeniedException e) {
-
         return ResponseEntity.status(FORBIDDEN)
                              .body(new RetrainResponse(e.getMessage()));
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.dto.ui;
 
+import javax.validation.constraints.NotBlank;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -13,10 +14,9 @@
 @NoArgsConstructor
 public class UserRoleUpdateDto {
 
-    @NotNull
+    @NotBlank(message = "UserId cannot be empty")
     private String userId;
 
-    @NotNull
+    @NotBlank(message = "Role cannot be empty")
     private String role;
-
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.dto.ui;
 
+import javax.validation.constraints.NotBlank;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -13,10 +14,9 @@
 @NoArgsConstructor
 public class UserRoleUpdateDto {
 
-    @NotNull
+    @NotBlank(message = "UserId cannot be empty")
     private String userId;
 
-    @NotNull
+    @NotBlank(message = "Role cannot be empty")
     private String role;
-
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/UserController.java
Patch:
@@ -15,6 +15,7 @@
 import io.swagger.annotations.ApiResponses;
 import java.io.IOException;
 import javax.servlet.http.HttpServletResponse;
+import javax.validation.Valid;
 import lombok.RequiredArgsConstructor;
 import lombok.val;
 import org.springframework.beans.factory.annotation.Autowired;
@@ -78,7 +79,8 @@ public void createUser(
     })
     public UserResponseDto updateUser(
             @ApiParam(value = "User data that needs to be updated", required = true)
-            @RequestBody final UserUpdateDto userUpdateDto
+            @RequestBody
+            @Valid final UserUpdateDto userUpdateDto
     ) {
         return userMapper.toResponseDto(userService.updateUser(userUpdateDto, SecurityUtils.getPrincipalId()));
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/OrgUpdateDto.java
Patch:
@@ -1,5 +1,7 @@
 package com.exadel.frs.dto.ui;
 
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -11,6 +13,7 @@
 @NoArgsConstructor
 public class OrgUpdateDto {
 
+    @NotBlank
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/BasicException.java
Patch:
@@ -8,7 +8,7 @@ public class BasicException extends RuntimeException {
     private final ExceptionCode exceptionCode;
     private final String message;
 
-    protected BasicException(final ExceptionCode exceptionCode, final String message) {
+    public BasicException(final ExceptionCode exceptionCode, final String message) {
         super(message);
         this.exceptionCode = exceptionCode;
         this.message = message;

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -34,6 +34,7 @@ public enum ExceptionCode {
     MODEL_SHARE_REQUEST_NOT_FOUND(23, NOT_FOUND),
     UNREACHABLE_EMAIL_ADDRESS(24, BAD_REQUEST),
     USER_REGISTRATION_TOKEN_EXPIRED(25, FORBIDDEN),
+    VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
 
 
     UNDEFINED(0, BAD_REQUEST);

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/AppControllerTest.java
Patch:
@@ -90,7 +90,7 @@ public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
                 .contentType(MediaType.APPLICATION_JSON)
                 .content(mapper.writeValueAsString(App.builder().id(APP_ID).build()));
 
-        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":26}";
 
         mockMvc.perform(request)
                 .andExpect(status().isBadRequest())
@@ -99,7 +99,7 @@ public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
 
     @Test
     public void shouldReturn400AndErrorMessageWhenRenameAppToEmpty() throws Exception {
-        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":26}";
 
         val bodyWithEmptyName = new AppUpdateDto();
         bodyWithEmptyName.setName("");

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/ModelControllerTest.java
Patch:
@@ -57,7 +57,7 @@ class ModelControllerTest {
 
     @Test
     void shouldReturnMessageAndCodeWhenModelNameIsMissingOnUpdate() throws Exception {
-        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":26}";
         val bodyWithEmptyName = new ModelUpdateDto();
         bodyWithEmptyName.setName("");
 
@@ -97,7 +97,7 @@ void shareModelShouldReturnErrorMessageWhenRequestIdIsMissing() throws Exception
 
     @Test
     void shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel() throws Exception {
-        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":26}";
         val bodyWithEmptyName = new ModelCreateDto();
         bodyWithEmptyName.setName("");
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/OrganizationControllerTest.java
Patch:
@@ -47,7 +47,7 @@ public class OrganizationControllerTest {
 
     @Test
     void shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel() throws Exception {
-        val expectedContent = "{\"message\":\"Organization name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Organization name cannot be empty\",\"code\":26}";
         val bodyWithEmptyName = new OrgCreateDto();
         bodyWithEmptyName.setName("");
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/AppController.java
Patch:
@@ -200,7 +200,8 @@ public UserRoleResponseDto updateUserAppRole(
             @RequestBody
             final UserRoleUpdateDto userRoleUpdateDto
     ) {
-        UserAppRole userAppRole = appService.updateUserAppRole(userRoleUpdateDto, orgGuid, guid, SecurityUtils.getPrincipalId());
+        val userAppRole = appService.updateUserAppRole(userRoleUpdateDto, orgGuid, guid, SecurityUtils.getPrincipalId());
+
         return userAppRoleMapper.toUserRoleResponseDto(userAppRole);
     }
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -203,6 +203,7 @@ public UserAppRole updateUserAppRole(final UserRoleUpdateDto userRoleUpdateDto,
         userAppRole.setRole(newAppRole);
 
         appRepository.save(app);
+
         return userAppRole;
     }
 

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/service/ScanServiceImplTest.java
Patch:
@@ -32,7 +32,7 @@ void scanAndSaveFace() throws IOException {
         val threshold = 1.0D;
         val face = new Face();
 
-        when(scanFacesClient.scanFaces(mockFile, 1, threshold))
+        when(scanFacesClient.scanFaces(mockFile, 2, threshold))
                 .thenReturn(scanResponse);
 
         when(faceDao.addNewFace(embeddings, mockFile, faceName, modelKey)).thenReturn(face);
@@ -43,7 +43,7 @@ void scanAndSaveFace() throws IOException {
         assertThat(actual).isNotNull();
         assertThat(actual).isEqualTo(face);
 
-        verify(scanFacesClient).scanFaces(mockFile, 1, threshold);
+        verify(scanFacesClient).scanFaces(mockFile, 2, threshold);
         verify(faceDao).addNewFace(embeddings, mockFile, faceName, modelKey);
         verifyNoMoreInteractions(scanFacesClient, faceDao);
     }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/enums/ValidationResult.java
Patch:
@@ -1,6 +1,7 @@
-package com.exadel.frs.core.trainservice.domain.vo;
+package com.exadel.frs.core.trainservice.enums;
 
 public enum ValidationResult {
+
     OK,
     READ_ONLY,
     FORBIDDEN;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/filter/SecurityValidationFilter.java
Patch:
@@ -3,7 +3,7 @@
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static java.util.Collections.emptyList;
 import static java.util.stream.Collectors.toMap;
-import com.exadel.frs.core.trainservice.domain.vo.ValidationResult;
+import com.exadel.frs.core.trainservice.enums.ValidationResult;
 import com.exadel.frs.core.trainservice.exception.AccessDeniedException;
 import com.exadel.frs.core.trainservice.exception.BadFormatModelKeyException;
 import com.exadel.frs.core.trainservice.handler.ResponseExceptionHandler;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/repository/postgres/ModelRepositoryPg.java
Patch:
@@ -10,5 +10,5 @@
 @Transactional("tmPg")
 public interface ModelRepositoryPg extends JpaRepository<Model, Long> {
 
-    Optional<Model> findByGuid(String guid);
+    Optional<Model> findByApiKey(String apiKey);
 }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/ModelServicePg.java
Patch:
@@ -1,6 +1,6 @@
 package com.exadel.frs.core.trainservice.service;
 
-import com.exadel.frs.core.trainservice.domain.vo.ValidationResult;
+import com.exadel.frs.core.trainservice.enums.ValidationResult;
 import com.exadel.frs.core.trainservice.repository.postgres.ModelRepositoryPg;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
@@ -16,7 +16,7 @@ public class ModelServicePg {
 
     @Cacheable("modelKeys")
     public ValidationResult validateModelKey(final String modelKey) {
-        if (modelRepositoryPg.findByGuid(modelKey).isPresent()) {
+        if (modelRepositoryPg.findByApiKey(modelKey).isPresent()) {
             return ValidationResult.OK;
         }
         return ValidationResult.FORBIDDEN;

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceITest.java
Patch:
@@ -34,7 +34,6 @@ public class FaceServiceITest {
     private FaceService faceService;
 
     private final static String MODEL_KEY = UUID.randomUUID().toString();
-    private final static String APP_KEY = UUID.randomUUID().toString();
     private final static String MODEL_KEY_OTHER = UUID.randomUUID().toString();
 
     @BeforeEach
@@ -72,7 +71,7 @@ public void updateModelKeySuccess() {
         assertThat(facesRepository.findByApiKey(MODEL_KEY)).hasSize(2);
         assertThat(facesRepository.findByApiKey(newModelKey)).hasSize(0);
 
-        faceService.updateModelApiKeyForFaces(APP_KEY + MODEL_KEY, newModelKey);
+        faceService.updateModelApiKeyForFaces(MODEL_KEY, newModelKey);
 
         assertThat(facesRepository.findByApiKey(MODEL_KEY)).hasSize(0);
         assertThat(facesRepository.findByApiKey(newModelKey)).hasSize(2);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/OrgUpdateDto.java
Patch:
@@ -1,5 +1,7 @@
 package com.exadel.frs.dto.ui;
 
+import javax.validation.constraints.NotBlank;
+import javax.validation.constraints.NotEmpty;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -11,6 +13,7 @@
 @NoArgsConstructor
 public class OrgUpdateDto {
 
+    @NotBlank
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/UserUpdateDto.java
Patch:
@@ -1,6 +1,5 @@
 package com.exadel.frs.dto.ui;
 
-import javax.validation.constraints.Min;
 import javax.validation.constraints.NotEmpty;
 import javax.validation.constraints.Size;
 import lombok.AllArgsConstructor;

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -107,9 +107,6 @@ public Organization createOrganization(final OrgCreateDto orgCreateDto, final Lo
     }
 
     public Organization updateOrganization(final OrgUpdateDto orgUpdateDto, final String guid, final Long userId) {
-        if (isBlank(orgUpdateDto.getName())) {
-            throw new FieldRequiredException("Organization name");
-        }
         Organization organizationFromRepo = getOrganization(guid);
         verifyUserHasWritePrivileges(userId, organizationFromRepo);
         val isNewName = !organizationFromRepo.getName().equals(orgUpdateDto.getName());

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/AppControllerTest.java
Patch:
@@ -90,7 +90,7 @@ public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
                 .contentType(MediaType.APPLICATION_JSON)
                 .content(mapper.writeValueAsString(App.builder().id(APP_ID).build()));
 
-        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":26}";
 
         mockMvc.perform(request)
                 .andExpect(status().isBadRequest())
@@ -99,7 +99,7 @@ public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
 
     @Test
     public void shouldReturn400AndErrorMessageWhenRenameAppToEmpty() throws Exception {
-        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":26}";
 
         val bodyWithEmptyName = new AppUpdateDto();
         bodyWithEmptyName.setName("");

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/ModelControllerTest.java
Patch:
@@ -57,7 +57,7 @@ class ModelControllerTest {
 
     @Test
     void shouldReturnMessageAndCodeWhenModelNameIsMissingOnUpdate() throws Exception {
-        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":26}";
         val bodyWithEmptyName = new ModelUpdateDto();
         bodyWithEmptyName.setName("");
 
@@ -97,7 +97,7 @@ void shareModelShouldReturnErrorMessageWhenRequestIdIsMissing() throws Exception
 
     @Test
     void shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel() throws Exception {
-        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Model name cannot be empty\",\"code\":26}";
         val bodyWithEmptyName = new ModelCreateDto();
         bodyWithEmptyName.setName("");
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/OrganizationControllerTest.java
Patch:
@@ -47,7 +47,7 @@ public class OrganizationControllerTest {
 
     @Test
     void shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel() throws Exception {
-        val expectedContent = "{\"message\":\"Field name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Organization name cannot be empty\",\"code\":26}";
         val bodyWithEmptyName = new OrgCreateDto();
         bodyWithEmptyName.setName("");
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/UserUpdateDto.java
Patch:
@@ -2,6 +2,7 @@
 
 import javax.validation.constraints.Min;
 import javax.validation.constraints.NotEmpty;
+import javax.validation.constraints.Size;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.Data;
@@ -20,6 +21,6 @@ public class UserUpdateDto {
     private String lastName;
 
     @NotEmpty
-    @Min(8)
+    @Size(min = 8, max = 255)
     private String password;
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -34,6 +34,7 @@ public enum ExceptionCode {
     MODEL_SHARE_REQUEST_NOT_FOUND(23, NOT_FOUND),
     UNREACHABLE_EMAIL_ADDRESS(24, BAD_REQUEST),
     USER_REGISTRATION_TOKEN_EXPIRED(25, FORBIDDEN),
+    VALIDATION_CONSTRAINT_VIOLATION(26, BAD_REQUEST),
 
 
     UNDEFINED(0, BAD_REQUEST);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ResponseExceptionHandler.java
Patch:
@@ -46,6 +46,7 @@ private BasicException getException(final FieldError fieldError) {
 
         switch (fieldError.getCode()) {
             case "NotNull":
+            case "NotBlank":
                 basicException = new EmptyRequiredFieldException(fieldError.getField());
                 break;
             default:

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/OrganizationControllerTest.java
Patch:
@@ -47,7 +47,7 @@ public class OrganizationControllerTest {
 
     @Test
     void shouldReturnErrorMessageWhenNameIsMissingOnCreateNewModel() throws Exception {
-        val expectedContent = "{\"message\":\"Organization name cannot be empty\",\"code\":5}";
+        val expectedContent = "{\"message\":\"Field name cannot be empty\",\"code\":5}";
         val bodyWithEmptyName = new OrgCreateDto();
         bodyWithEmptyName.setName("");
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -1,6 +1,5 @@
 package com.exadel.frs.core.trainservice.dao;
 
-import static com.exadel.frs.core.trainservice.component.FaceClassifierAdapter.CLASSIFIER_IMPLEMENTATION_BEAN_NAME;
 import static java.util.stream.Collectors.toList;
 import com.exadel.frs.core.trainservice.component.classifiers.FaceClassifier;
 import com.exadel.frs.core.trainservice.entity.Model;
@@ -36,7 +35,6 @@ public Model saveModel(
                          .faces(classifier.getUsedFaceIds().stream()
                                           .map(ObjectId::new)
                                           .collect(toList()))
-                         .classifierName(CLASSIFIER_IMPLEMENTATION_BEAN_NAME)
                          .calculatorVersion(calculatorVersion)
                          .build();
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/domain/EmbeddingFaceList.java
Patch:
@@ -17,7 +17,7 @@ public class EmbeddingFaceList {
     String calculatorVersion;
 
     /**
-    Pair of id and face name as key and list of embeddings as value
+     * Pair of id and face name as key and list of embeddings as value
      */
     Map<Pair<String, String>, List<List<Double>>> faceEmbeddings = new HashMap<>();
 }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/RetrainServiceImpl.java
Patch:
@@ -22,6 +22,6 @@ public boolean isTrainingRun(final String modelKey) {
 
     @Override
     public void abortTraining(final String modelKey) {
-        manager.abortClassifierTraining(modelKey);
+        manager.finishClassifierTraining(modelKey);
     }
 }
\ No newline at end of file

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierManager.java
Patch:
@@ -39,7 +39,7 @@ public void initNewClassifier(final String modelKey, final List<String> faces) {
         faceClassifier.train(faceDao.findAllFacesIn(faces), modelKey);
     }
 
-    public void initNewClassifier(String modelKey) {
+    public void initNewClassifier(final String modelKey) {
         if (faceDao.countFacesInModel(modelKey) < 1) {
             throw new ModelHasNoFacesException();
         }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierPredictor.java
Patch:
@@ -16,8 +16,7 @@ public class FaceClassifierPredictor {
 
     public Pair<Integer, String> predict(final String modelKey, final double[] input) {
         val model = modelDao.getModel(modelKey);
-        val faceClassifier = context.getBean(FaceClassifierAdapter.class);
-        faceClassifier.setClassifier(model);
+        val faceClassifier = context.getBean(FaceClassifierAdapter.class, model);
 
         return faceClassifier.predict(input);
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/BasicException.java
Patch:
@@ -8,7 +8,7 @@ public class BasicException extends RuntimeException {
     private final ExceptionCode exceptionCode;
     private final String message;
 
-    protected BasicException(final ExceptionCode exceptionCode, final String message) {
+    public BasicException(final ExceptionCode exceptionCode, final String message) {
         super(message);
         this.exceptionCode = exceptionCode;
         this.message = message;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -1,6 +1,5 @@
 package com.exadel.frs.core.trainservice.dao;
 
-import static com.exadel.frs.core.trainservice.component.FaceClassifierAdapter.CLASSIFIER_IMPLEMENTATION_BEAN_NAME;
 import static java.util.stream.Collectors.toList;
 import com.exadel.frs.core.trainservice.component.classifiers.FaceClassifier;
 import com.exadel.frs.core.trainservice.entity.Model;
@@ -36,7 +35,6 @@ public Model saveModel(
                          .faces(classifier.getUsedFaceIds().stream()
                                           .map(ObjectId::new)
                                           .collect(toList()))
-                         .classifierName(CLASSIFIER_IMPLEMENTATION_BEAN_NAME)
                          .calculatorVersion(calculatorVersion)
                          .build();
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/domain/EmbeddingFaceList.java
Patch:
@@ -17,7 +17,7 @@ public class EmbeddingFaceList {
     String calculatorVersion;
 
     /**
-    Pair of id and face name as key and list of embeddings as value
+     * Pair of id and face name as key and list of embeddings as value
      */
     Map<Pair<String, String>, List<List<Double>>> faceEmbeddings = new HashMap<>();
 }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/RetrainServiceImpl.java
Patch:
@@ -22,6 +22,6 @@ public boolean isTrainingRun(final String modelKey) {
 
     @Override
     public void abortTraining(final String modelKey) {
-        manager.abortClassifierTraining(modelKey);
+        manager.finishClassifierTraining(modelKey);
     }
 }
\ No newline at end of file

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -4,6 +4,7 @@ public class Constants {
 
     public static final String X_API_KEY_HEADER = "X-Api-Key";
     public static final String X_FRS_API_KEY_HEADER = "x-frs-api-key";
+    public static final String NEW_MODEL_KEY_HEADER = "new_model_api_key";
 
     public static final String API_V1 = "/api/v1";
 }
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/system/rest/ClientsConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.exadel.frs.system.python;
+package com.exadel.frs.system.rest;
 
 import static com.exadel.frs.system.global.EnvironmentProperties.ServerType.FRS_CORE;
 import com.exadel.frs.system.global.EnvironmentProperties;
@@ -17,11 +17,11 @@ public class ClientsConfig {
     private final EnvironmentProperties properties;
 
     @Bean
-    public CoreDeleteFacesClient getDeleteFacesClient() {
+    public CoreFacesClient getDeleteFacesClient() {
         return Feign.builder()
                     .encoder(new SpringFormEncoder())
                     .decoder(new JacksonDecoder())
                     .logLevel(Logger.Level.FULL)
-                    .target(CoreDeleteFacesClient.class, properties.getServers().get(FRS_CORE).getUrl());
+                    .target(CoreFacesClient.class, properties.getServers().get(FRS_CORE).getUrl());
     }
 }
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/system/rest/ClientsConfig.java
Patch:
@@ -1,4 +1,4 @@
-package com.exadel.frs.system.python;
+package com.exadel.frs.system.rest;
 
 import static com.exadel.frs.system.global.EnvironmentProperties.ServerType.FRS_CORE;
 import com.exadel.frs.system.global.EnvironmentProperties;
@@ -17,11 +17,11 @@ public class ClientsConfig {
     private final EnvironmentProperties properties;
 
     @Bean
-    public CoreDeleteFacesClient getDeleteFacesClient() {
+    public CoreFacesClient getDeleteFacesClient() {
         return Feign.builder()
                     .encoder(new SpringFormEncoder())
                     .decoder(new JacksonDecoder())
                     .logLevel(Logger.Level.FULL)
-                    .target(CoreDeleteFacesClient.class, properties.getServers().get(FRS_CORE).getUrl());
+                    .target(CoreFacesClient.class, properties.getServers().get(FRS_CORE).getUrl());
     }
 }
\ No newline at end of file

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/FaceService.java
Patch:
@@ -36,15 +36,15 @@ public void deleteFaceByName(
         val faceNameEncoded = encode(faceName, UTF_8);
         val token = systemService.buildToken(apiKey);
 
-        faceDao.deleteFaceByName(faceNameEncoded, token);
+        faceDao.deleteFaceByName(faceNameEncoded, token.getModelApiKey());
 
         getTrainingOption(retrain).run(token, retrainService);
     }
 
     public int deleteFacesByModel(final String apiKey) {
         val token = systemService.buildToken(apiKey);
         classifierManager.removeFaceClassifier(token.getModelApiKey());
-        val deletedFaces = faceDao.deleteFacesByApiKey(token);
+        val deletedFaces = faceDao.deleteFacesByApiKey(token.getModelApiKey());
 
         return deletedFaces.size();
     }

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/service/FaceServiceTest.java
Patch:
@@ -95,7 +95,7 @@ void deleteFacesByModel() {
 
         val inOrder = inOrder(systemService, classifierManager, faceDao);
         inOrder.verify(systemService).buildToken(API_KEY);
-        inOrder.verify(classifierManager).removeFaceClassifier(token.getAppApiKey(), token.getModelApiKey());
+        inOrder.verify(classifierManager).removeFaceClassifier(token.getModelApiKey());
         inOrder.verify(faceDao).deleteFacesByApiKey(token.getModelApiKey());
         verifyNoMoreInteractions(systemService, faceDao);
         verifyNoInteractions(retrainService);

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/domain/EmbeddingFaceList.java
Patch:
@@ -9,7 +9,6 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.concurrent.ConcurrentHashMap;
 
 @Data
 @Accessors(chain = true)

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/aspect/MigrationWriteControlAspect.java
Patch:
@@ -25,7 +25,7 @@ private void endpoint(){}
     private void write(){}
 
     @Around("endpoint() && write()")
-    public Object writeEndpoint(ProceedingJoinPoint pjp) throws Throwable {
+    public Object writeEndpoint(final ProceedingJoinPoint pjp) throws Throwable {
         if (migrationStatusStorage.isMigrating()){
             log.warn("All write endpoints temporary disabled during migration");
             throw new MigrationExecutionException();

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/FaceClassifierLockManager.java
Patch:
@@ -4,7 +4,6 @@
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
 import lombok.val;
-import org.apache.commons.lang3.tuple.Pair;
 import org.springframework.stereotype.Component;
 
 import javax.annotation.PostConstruct;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/LogisticRegressionExtendedClassifier.java
Patch:
@@ -40,7 +40,7 @@ public Pair<Integer, String> predict(final double[] input) {
 
     @Override
     public boolean isTrained() {
-        return !(logisticRegression == null);
+        return logisticRegression != null;
     }
 
     @Override

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/dao/ModelDaoTest.java
Patch:
@@ -6,12 +6,11 @@
 import com.exadel.frs.core.trainservice.entity.Model;
 import com.exadel.frs.core.trainservice.repository.ModelRepository;
 import lombok.extern.slf4j.Slf4j;
+import org.apache.commons.lang3.tuple.Pair;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 import org.springframework.beans.factory.annotation.Autowired;
-import org.apache.commons.lang3.tuple.Pair;
 import org.springframework.test.context.junit.jupiter.EnabledIf;
 
 import java.util.HashMap;
@@ -25,7 +24,6 @@ public class ModelDaoTest {
     @Autowired
     private ModelRepository modelRepository;
 
-
     @AfterEach
     public void after() {
         modelRepository.deleteAll();

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/classifiers/LogisticRegressionExtendedClassifier.java
Patch:
@@ -45,6 +45,9 @@ public boolean isTrained() {
 
     @Override
     public List<String> getUsedFaceIds() {
+        if (labelMap == null) {
+            return List.of();
+        }
         return labelMap.values().stream()
                 .map(Pair::getLeft)
                 .collect(Collectors.toList());

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/domain/EmbeddingFaceList.java
Patch:
@@ -6,8 +6,10 @@
 import lombok.experimental.FieldDefaults;
 import org.apache.commons.lang3.tuple.Pair;
 
+import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 @Data
 @Accessors(chain = true)
@@ -18,5 +20,5 @@ public class EmbeddingFaceList {
     /**
     Pair of id and face name as key and list of embeddings as value
      */
-    Map<Pair<String, String>, List<List<Double>>> faceEmbeddings;
+    Map<Pair<String, String>, List<List<Double>>> faceEmbeddings = new HashMap<>();
 }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -42,6 +42,9 @@ public EmbeddingFaceList findAllFaceEmbeddingsByApiKey(final String modelApiKey)
     }
 
     private EmbeddingFaceList facesToEmbeddingList(List<Face> faces){
+        if (faces.isEmpty()){
+            return new EmbeddingFaceList();
+        }
         Map<Pair<String, String>, List<List<Double>>> map = faces.stream()
                 .collect(toMap(face -> Pair.of(face.getId(), face.getFaceName()),
                         face -> face.getEmbeddings().stream()

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -24,8 +24,8 @@ public class ModelDao {
 
     private final ModelRepository modelRepository;
 
-    public List<Model> findAll(){
-        return modelRepository.findAll();
+    public List<Model> findAllWithoutClassifier(){
+        return modelRepository.findAllWithoutClassifier();
     }
 
     public Model saveModel(final String modelKey, final FaceClassifier classifier, final String calculatorVersion) {

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/entity/Model.java
Patch:
@@ -5,6 +5,7 @@
 import lombok.Builder;
 import lombok.Data;
 import lombok.experimental.Accessors;
+import org.bson.codecs.pojo.annotations.BsonProperty;
 import org.bson.types.ObjectId;
 import org.springframework.data.annotation.Id;
 import org.springframework.data.mongodb.core.mapping.Document;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -42,6 +42,9 @@ public EmbeddingFaceList findAllFaceEmbeddingsByApiKey(final String modelApiKey)
     }
 
     private EmbeddingFaceList facesToEmbeddingList(List<Face> faces){
+        if (faces.isEmpty()){
+            return new EmbeddingFaceList();
+        }
         Map<Pair<String, String>, List<List<Double>>> map = faces.stream()
                 .collect(toMap(face -> Pair.of(face.getId(), face.getFaceName()),
                         face -> face.getEmbeddings().stream()

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/ModelDao.java
Patch:
@@ -24,8 +24,8 @@ public class ModelDao {
 
     private final ModelRepository modelRepository;
 
-    public List<Model> findAll(){
-        return modelRepository.findAll();
+    public List<Model> findAllWithoutClassifier(){
+        return modelRepository.findAllWithoutClassifier();
     }
 
     public Model saveModel(final String modelKey, final FaceClassifier classifier, final String calculatorVersion) {

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/entity/Model.java
Patch:
@@ -5,6 +5,7 @@
 import lombok.Builder;
 import lombok.Data;
 import lombok.experimental.Accessors;
+import org.bson.codecs.pojo.annotations.BsonProperty;
 import org.bson.types.ObjectId;
 import org.springframework.data.annotation.Id;
 import org.springframework.data.mongodb.core.mapping.Document;

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/migration/MigrationComponent.java
Patch:
@@ -65,7 +65,7 @@ public void migrate(String url) {
                         .anyMatch(embedding -> migrationCalculatorVersion.equals(embedding.getCalculatorVersion()))) {
                     continue;
                 } else {
-                    GridFSFile one = gridFsOperations.findOne(new Query(Criteria.where("_id").is(face.getFaceImgId())));
+                    GridFSFile one = gridFsOperations.findOne(new Query(Criteria.where("_id").is(face.getRawImgId())));
                     if (one == null) {
                         continue;
                     }
@@ -87,7 +87,6 @@ public void migrate(String url) {
             log.info("Calculating embedding for faces finished");
 
             log.info("Retraining models");
-
             List<Model> models = modelDao.findAll();
             for (val model : models) {
                 List<ObjectId> faces = model.getFaces();

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/component/migration/MigrationComponent.java
Patch:
@@ -66,7 +66,7 @@ public void migrate(String url) {
                     continue;
                 } else {
                     GridFSFile one = gridFsOperations.findOne(new Query(Criteria.where("_id").is(face.getFaceImgId())));
-                    if (one == null){
+                    if (one == null) {
                         continue;
                     }
                     GridFsResource fsResource = gridFsOperations.getResource(one);
@@ -79,6 +79,7 @@ public void migrate(String url) {
                             .findFirst().orElseThrow()
                             .getEmbedding();
                     Face.Embedding faceEmbeddings = new Face.Embedding(embeddings, scanResponse.getCalculatorVersion());
+                    face.getEmbeddings().clear();
                     face.getEmbeddings().add(faceEmbeddings);
                     facesRepository.save(face);
                 }
@@ -101,7 +102,7 @@ public void migrate(String url) {
             log.info("Retraining models finished");
 
             log.info("Migration successfully finished");
-        } catch (Exception e){
+        } catch (Exception e) {
             log.info("Migration finished with exception");
             throw e;
         } finally {

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/TrainController.java
Patch:
@@ -40,7 +40,6 @@ public ResponseEntity train(
             final String apiKey
     ) {
         val token = systemService.buildToken(apiKey);
-        manager.initNewClassifier(token.getAppApiKey(), token.getModelApiKey());
         retrainService.startRetrain(token.getAppApiKey(), token.getModelApiKey());
 
         return ResponseEntity.status(ACCEPTED)

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/FaceService.java
Patch:
@@ -36,15 +36,15 @@ public void deleteFaceByName(
         val faceNameEncoded = encode(faceName, UTF_8);
         val token = systemService.buildToken(apiKey);
 
-        faceDao.deleteFaceByName(faceNameEncoded, token);
+        faceDao.deleteFaceByName(faceNameEncoded, token.getModelApiKey());
 
         getTrainingOption(retrain).run(token, retrainService);
     }
 
     public int deleteFacesByModel(final String apiKey) {
         val token = systemService.buildToken(apiKey);
         classifierManager.removeFaceClassifier(token.getAppApiKey(), token.getModelApiKey());
-        val deletedFaces = faceDao.deleteFacesByApiKey(token);
+        val deletedFaces = faceDao.deleteFacesByApiKey(token.getModelApiKey());
 
         return deletedFaces.size();
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/repository/UserRepository.java
Patch:
@@ -12,6 +12,8 @@ public interface UserRepository extends JpaRepository<User, Long> {
 
     Optional<User> findByEmail(String email);
 
+    Optional<User> findByEmailAndEnabledTrue(String email);
+
     Optional<User> findByGuid(String guid);
 
     boolean existsByEmail(String email);

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -245,7 +245,7 @@ void successAddToOrganization(OrganizationRole organizationRole) {
         organization.addUserOrganizationRole(admin, organizationRole);
 
         when(organizationRepositoryMock.findByGuid(ORGANISATION_GUID)).thenReturn(Optional.of(organization));
-        when(userServiceMock.getUser(anyString())).thenReturn(user);
+        when(userServiceMock.getEnabledUserByEmail(anyString())).thenReturn(user);
         when(organizationRepositoryMock.save(organization)).thenReturn(organization);
 
         organizationService.inviteUser(userInviteDto, ORGANISATION_GUID, adminId);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/repository/UserRepository.java
Patch:
@@ -12,6 +12,8 @@ public interface UserRepository extends JpaRepository<User, Long> {
 
     Optional<User> findByEmail(String email);
 
+    Optional<User> findByEmailAndEnabledTrue(String email);
+
     Optional<User> findByGuid(String guid);
 
     boolean existsByEmail(String email);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -131,7 +131,7 @@ public UserOrganizationRole inviteUser(final UserInviteDto userInviteDto, final
         Organization organization = getOrganization(guid);
         verifyUserHasWritePrivileges(adminId, organization);
 
-        final User user = userService.getUser(userInviteDto.getUserEmail());
+        final User user = userService.getEnabledUser(userInviteDto.getUserEmail());
         Optional<UserOrganizationRole> userOrganizationRole = organization.getUserOrganizationRole(user.getId());
         if (userOrganizationRole.isPresent()) {
             throw new UserAlreadyInOrganizationException(userInviteDto.getUserEmail(), guid);

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -245,7 +245,7 @@ void successAddToOrganization(OrganizationRole organizationRole) {
         organization.addUserOrganizationRole(admin, organizationRole);
 
         when(organizationRepositoryMock.findByGuid(ORGANISATION_GUID)).thenReturn(Optional.of(organization));
-        when(userServiceMock.getUser(anyString())).thenReturn(user);
+        when(userServiceMock.getEnabledUser(anyString())).thenReturn(user);
         when(organizationRepositoryMock.save(organization)).thenReturn(organization);
 
         organizationService.inviteUser(userInviteDto, ORGANISATION_GUID, adminId);

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -50,6 +50,7 @@ public Map<String, List<String>> findAllFaceNamesByApiKey(final String modelApiK
         val faces = facesRepository.findByApiKey(modelApiKey);
         val faceNames = faces.stream()
                              .map(Face::getFaceName)
+                             .distinct()
                              .collect(toList());
 
         return Map.of("names", faceNames);

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -50,6 +50,7 @@ public Map<String, List<String>> findAllFaceNamesByApiKey(final String modelApiK
         val faces = facesRepository.findByApiKey(modelApiKey);
         val faceNames = faces.stream()
                              .map(Face::getFaceName)
+                             .distinct()
                              .collect(toList());
 
         return Map.of("names", faceNames);

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -56,7 +56,7 @@ public Map<String, List<String>> findAllFaceNamesByApiKey(final String modelApiK
     }
 
     public void deleteFaceByName(final String faceName, final Token token) {
-        facesRepository.deleteByApiKeyAndFaceName(token.getAppApiKey(), faceName);
+        facesRepository.deleteByApiKeyAndFaceName(token.getModelApiKey(), faceName);
     }
 
     public List<Face> deleteFacesByApiKey(final Token token) {

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/dao/FaceDao.java
Patch:
@@ -56,7 +56,7 @@ public Map<String, List<String>> findAllFaceNamesByApiKey(final String modelApiK
     }
 
     public void deleteFaceByName(final String faceName, final Token token) {
-        facesRepository.deleteByApiKeyAndFaceName(token.getAppApiKey(), faceName);
+        facesRepository.deleteByApiKeyAndFaceName(token.getModelApiKey(), faceName);
     }
 
     public List<Face> deleteFacesByApiKey(final Token token) {

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -161,7 +161,7 @@ public void deleteModel(final String orgGuid, final String appGuid, final String
 
         verifyUserHasWritePrivileges(userId, model.getApp());
 
-        facesClient.deleteFaces(appGuid + guid);
+        facesClient.deleteFaces(model.getApp().getApiKey() + model.getApiKey());
         modelRepository.deleteById(model.getId());
     }
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -161,7 +161,7 @@ public void deleteModel(final String orgGuid, final String appGuid, final String
 
         verifyUserHasWritePrivileges(userId, model.getApp());
 
-        facesClient.deleteFaces(appGuid + guid);
+        facesClient.deleteFaces(model.getApp().getApiKey() + model.getApiKey());
         modelRepository.deleteById(model.getId());
     }
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/system/global/ImageProperties.java
Patch:
@@ -15,5 +15,4 @@ public class ImageProperties {
     @NotNull
     @Size(min = 1)
     private final List types;
-
 }
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/ProxyController.java
Patch:
@@ -41,6 +41,7 @@ public class ProxyController {
 
     private final ModelRepository modelRepository;
     private final AppModelRepository appModelRepository;
+    private final ImageExtensionValidator imageValidator;
 
     @Value("${proxy.baseUrl}")
     private String baseUrl;
@@ -103,7 +104,7 @@ public ResponseEntity<String> proxyV1(
             throw new AccessDeniedException();
         }
 
-        new ImageExtensionValidator().validate(files.values());
+        imageValidator.validate(files.values());
 
         val remoteUrl = baseUrl + request.getRequestURI().replaceFirst(PREFIX + "/v1", "");
         val body = new LinkedMultiValueMap<String, Object>();

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/ScanController.java
Patch:
@@ -42,8 +42,8 @@ public void scanFaces(
                     "(set this parameter to value \"no\", if operating with a lot of images one after another). " +
                     "Allowed values: \"yes\", \"no\", \"force\". \"Force\" option will abort already running processes of " +
                     "classifier training.")
-            @RequestParam(value = "retrain", required = false)
-            final String retrainStatus,
+            @RequestParam(value = "retrain", required = false, defaultValue = "force")
+            final String retrainOption,
             @ApiParam(value = "The minimal percent confidence that found face is actually a face.")
             @RequestParam(value = "det_prob_threshold", required = false)
             final Double detProbThreshold,
@@ -53,7 +53,7 @@ public void scanFaces(
     ) throws IOException {
         val token = systemService.buildToken(apiKey);
 
-        getTrainingOption(retrainStatus).run(token, retrainService);
+        getTrainingOption(retrainOption).run(token, retrainService);
 
         scanService.scanAndSaveFace(file, faceName, detProbThreshold, token.getModelApiKey());
     }

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/enums/RetrainOption.java
Patch:
@@ -11,7 +11,7 @@ public enum RetrainOption {
     YES {
         @Override
         public void run(final Token token, final RetrainService retrainService) {
-            if (retrainService.isTraining(token.getAppApiKey(), token.getModelApiKey())) {
+            if (retrainService.isTrainingRun(token.getAppApiKey(), token.getModelApiKey())) {
                 throw new ClassifierIsAlreadyTrainingException();
             }
 
@@ -35,7 +35,7 @@ public void run(final Token token, final RetrainService retrainService) {
     public abstract void run(final Token token, final RetrainService retrainService);
 
     public static RetrainOption getTrainingOption(final String option) {
-        return getIfPresent(RetrainOption.class, firstNonNull(option.toUpperCase(), ""))
+        return getIfPresent(RetrainOption.class, firstNonNull(option, "").toUpperCase())
                 .or(FORCE);
     }
 }
\ No newline at end of file

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/service/RetrainService.java
Patch:
@@ -2,9 +2,9 @@
 
 public interface RetrainService {
 
-    void startRetrain(final String appKey, final String modelId);
+    void startRetrain(final String appKey, final String modelKey);
 
-    boolean isTraining(final String appKey, final String modelId);
+    boolean isTrainingRun(final String appKey, final String modelKey);
 
-    void abortTraining(final String appKey, final String modelId);
+    void abortTraining(final String appKey, final String modelKey);
 }
\ No newline at end of file

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/component/FaceClassifierAdapterTestIT.java
Patch:
@@ -1,7 +1,7 @@
 package com.exadel.frs.core.trainservice.component;
 
 import com.exadel.frs.core.trainservice.component.classifiers.FaceClassifier;
-import com.exadel.frs.core.trainservice.repository.FaceClassifierProxy;
+import com.exadel.frs.core.trainservice.repository.FaceClassifierAdapter;
 import com.exadel.frs.core.trainservice.dao.FaceDao;
 import lombok.extern.slf4j.Slf4j;
 import org.junit.jupiter.api.BeforeEach;
@@ -16,10 +16,10 @@
 @SpringBootTest
 @Slf4j
 @EnabledIf(expression = "#{environment.acceptsProfiles('integration-test')}")
-public class FaceClassifierProxyITest {
+public class FaceClassifierAdapterTestIT {
 
     @Autowired
-    private FaceClassifierProxy faceClassifierProxy;
+    private FaceClassifierAdapter faceClassifierProxy;
 
     @Autowired
     private FaceDao service;

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/controller/FaceControllerTest.java
Patch:
@@ -29,7 +29,7 @@ public class FaceControllerTest {
     @Autowired
     private MockMvc mockMvc;
 
-    private final static String API_KEY = "api_key_for_test";
+    private final static String API_KEY = "api_key:model_key";
 
     @Autowired
     private ObjectMapper mapper;

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/controller/ScanControllerTest.java
Patch:
@@ -25,7 +25,7 @@ class ScanControllerTest {
     @MockBean
     private ScanService scanService;
 
-    private final static String APP_GUID = "app_guid_for_test";
+    private final static String API_KEY = "api_key:model_key";
 
     @Test
     void scanFaces() throws Exception {
@@ -35,7 +35,7 @@ void scanFaces() throws Exception {
                 multipart(API_V1 + "/faces/name")
                         .file(mockFile)
                         .param("retrain", NO.name())
-                        .header(X_FRS_API_KEY_HEADER, APP_GUID)
+                        .header(X_FRS_API_KEY_HEADER, API_KEY)
         ).andExpect(status().isCreated());
     }
 }
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -118,7 +118,7 @@ private void validateUserCreateDto(UserCreateDto userCreateDto) {
             throw new EmptyRequiredFieldException("last name");
         }
 
-        if (userRepository.existsByEmail(userCreateDto.getEmail())) {
+        if (userRepository.existsByEmail(userCreateDto.getEmail().toLowerCase())) {
             throw new EmailAlreadyRegisteredException();
         }
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -118,7 +118,7 @@ private void validateUserCreateDto(UserCreateDto userCreateDto) {
             throw new EmptyRequiredFieldException("last name");
         }
 
-        if (userRepository.existsByEmail(userCreateDto.getEmail())) {
+        if (userRepository.existsByEmail(userCreateDto.getEmail().toLowerCase())) {
             throw new EmailAlreadyRegisteredException();
         }
     }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/AppUpdateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class AppUpdateDto {
 
+    @NotBlank(message = "Application name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/ModelUpdateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class ModelUpdateDto {
 
+    @NotBlank(message = "Model name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -151,7 +151,7 @@ public List<User> autocomplete(final String query) {
         return userRepository.autocomplete(hqlParameter);
     }
 
-    @Scheduled(fixedDelayString = "${registration.token.expires}")
+    @Scheduled(fixedDelayString = "${registration.token.scheduler.period}")
     @Transactional
     public void removeExpiredRegistrationTokens() {
         int registrationExpireTime = env.getProperty("registration.token.expires", Integer.class) / 1000;

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/AppControllerTest.java
Patch:
@@ -99,8 +99,7 @@ public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
 
     @Test
     public void shouldReturn400AndErrorMessageWhenRenameAppToEmpty() throws Exception {
-        doCallRealMethod().when(appService).updateApp(any(), any(), any(), any());
-        val expectedContent = mapper.writeValueAsString(buildExceptionResponse(new EmptyRequiredFieldException("name")));
+        val expectedContent = "{\"message\":\"Application name cannot be empty\",\"code\":5}";
 
         val bodyWithEmptyName = new AppUpdateDto();
         bodyWithEmptyName.setName("");

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import com.exadel.frs.core.trainservice.service.FaceService;
 import java.util.List;
@@ -13,8 +14,8 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-@RequestMapping("/faces")
 @RestController
+@RequestMapping(API_V1 + "/faces")
 @RequiredArgsConstructor
 public class FaceController {
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
 import static org.springframework.http.HttpStatus.LOCKED;
@@ -15,11 +16,13 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestHeader;
+import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 @RestController
+@RequestMapping(API_V1)
 @RequiredArgsConstructor
 public class RecognizeController {
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/TrainController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import com.exadel.frs.core.trainservice.dto.RetrainResponse;
 import com.exadel.frs.core.trainservice.repository.FaceClassifierStorage;
 import com.exadel.frs.core.trainservice.dao.FaceDao;
@@ -11,7 +12,8 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-@RestController("/")
+@RestController
+@RequestMapping(API_V1)
 @RequiredArgsConstructor
 public class TrainController {
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -4,4 +4,6 @@ public class Constants {
 
     public static final String X_API_KEY_HEADER = "X-Api-Key";
     public static final String X_FRS_API_KEY_HEADER = "x-frs-api-key";
+
+    public static final String API_V1 = "/api/v1";
 }
\ No newline at end of file

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/controller/ScanControllerTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.core.trainservice.controller;
 
 import static com.exadel.frs.core.trainservice.enums.RetrainOption.NO;
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@@ -31,7 +32,7 @@ void scanFaces() throws Exception {
         val mockFile = new MockMultipartFile("file", "test data".getBytes());
 
         mockMvc.perform(
-                multipart("/face/name")
+                multipart(API_V1 + "/faces/name")
                         .file(mockFile)
                         .param("retrain", NO.name())
                         .header(X_FRS_API_KEY_HEADER, APP_GUID)

File: apps/frs-crud-app/src/main/java/com/exadel/frs/system/python/CoreDeleteFacesClient.java
Patch:
@@ -6,7 +6,7 @@
 
 public interface CoreDeleteFacesClient {
 
-    @RequestLine("DELETE /faces")
+    @RequestLine("DELETE /api/v1/faces")
     @Headers("x-frs-api-key: {apiKey}")
     int deleteFaces(@Param("apiKey") final String apiKey);
 }
\ No newline at end of file

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/FaceController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import com.exadel.frs.core.trainservice.service.FaceService;
 import java.util.List;
@@ -13,8 +14,8 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-@RequestMapping("/faces")
 @RestController
+@RequestMapping(API_V1 + "/faces")
 @RequiredArgsConstructor
 public class FaceController {
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/RecognizeController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;
 import static org.springframework.http.HttpStatus.LOCKED;
@@ -15,11 +16,13 @@
 import org.springframework.http.ResponseEntity;
 import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.RequestHeader;
+import org.springframework.web.bind.annotation.RequestMapping;
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 import org.springframework.web.multipart.MultipartFile;
 
 @RestController
+@RequestMapping(API_V1)
 @RequiredArgsConstructor
 public class RecognizeController {
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/controller/TrainController.java
Patch:
@@ -1,5 +1,6 @@
 package com.exadel.frs.core.trainservice.controller;
 
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import com.exadel.frs.core.trainservice.dto.RetrainResponse;
 import com.exadel.frs.core.trainservice.repository.FaceClassifierStorage;
 import com.exadel.frs.core.trainservice.dao.FaceDao;
@@ -11,7 +12,8 @@
 import org.springframework.web.bind.annotation.RequestMethod;
 import org.springframework.web.bind.annotation.RestController;
 
-@RestController("/")
+@RestController
+@RequestMapping(API_V1)
 @RequiredArgsConstructor
 public class TrainController {
 

File: apps/frs-core-app/src/main/java/com/exadel/frs/core/trainservice/system/global/Constants.java
Patch:
@@ -4,4 +4,6 @@ public class Constants {
 
     public static final String X_API_KEY_HEADER = "X-Api-Key";
     public static final String X_FRS_API_KEY_HEADER = "x-frs-api-key";
+
+    public static final String API_V1 = "/api/v1";
 }
\ No newline at end of file

File: apps/frs-core-app/src/test/java/com/exadel/frs/core/trainservice/controller/ScanControllerTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.exadel.frs.core.trainservice.controller;
 
 import static com.exadel.frs.core.trainservice.enums.RetrainOption.NO;
+import static com.exadel.frs.core.trainservice.system.global.Constants.API_V1;
 import static com.exadel.frs.core.trainservice.system.global.Constants.X_FRS_API_KEY_HEADER;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
 import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
@@ -31,7 +32,7 @@ void scanFaces() throws Exception {
         val mockFile = new MockMultipartFile("file", "test data".getBytes());
 
         mockMvc.perform(
-                multipart("/face/name")
+                multipart(API_V1 + "/faces/name")
                         .file(mockFile)
                         .param("retrain", NO.name())
                         .header(X_FRS_API_KEY_HEADER, APP_GUID)

File: apps/frs-crud-app/src/main/java/com/exadel/frs/system/python/CoreDeleteFacesClient.java
Patch:
@@ -6,7 +6,7 @@
 
 public interface CoreDeleteFacesClient {
 
-    @RequestLine("DELETE /faces")
+    @RequestLine("DELETE /api/v1/faces")
     @Headers("x-frs-api-key: {apiKey}")
     int deleteFaces(@Param("apiKey") final String apiKey);
 }
\ No newline at end of file

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/AppCreateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class AppCreateDto {
 
+    @NotBlank(message = "Application name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/ModelCreateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class ModelCreateDto {
 
+    @NotBlank(message = "Model name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/OrgCreateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrgCreateDto {
 
+    @NotBlank(message = "Organization name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -113,9 +113,6 @@ public Model createModel(final ModelCreateDto modelCreateDto, final String orgGu
 
         verifyUserHasWritePrivileges(userId, app);
 
-        if (isEmpty(modelCreateDto.getName())) {
-            throw new EmptyRequiredFieldException("name");
-        }
         if (!app.getOrganization().getGuid().equals(orgGuid)) {
             throw new AppDoesNotBelongToOrgException(appGuid, orgGuid);
         }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/AppCreateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class AppCreateDto {
 
+    @NotBlank(message = "Application name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/ModelCreateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class ModelCreateDto {
 
+    @NotBlank(message = "Model name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/OrgCreateDto.java
Patch:
@@ -5,12 +5,15 @@
 import lombok.Data;
 import lombok.NoArgsConstructor;
 
+import javax.validation.constraints.NotBlank;
+
 @Data
 @Builder
 @AllArgsConstructor
 @NoArgsConstructor
 public class OrgCreateDto {
 
+    @NotBlank(message = "Organization name cannot be empty")
     private String name;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -113,9 +113,6 @@ public Model createModel(final ModelCreateDto modelCreateDto, final String orgGu
 
         verifyUserHasWritePrivileges(userId, app);
 
-        if (isEmpty(modelCreateDto.getName())) {
-            throw new EmptyRequiredFieldException("name");
-        }
         if (!app.getOrganization().getGuid().equals(orgGuid)) {
             throw new AppDoesNotBelongToOrgException(appGuid, orgGuid);
         }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -12,6 +12,7 @@
 import com.exadel.frs.service.UserService;
 import lombok.val;
 import org.junit.jupiter.api.Test;
+import org.springframework.mock.env.MockEnvironment;
 import org.springframework.security.crypto.factory.PasswordEncoderFactories;
 
 import java.util.Optional;
@@ -37,6 +38,7 @@ class UserServiceTest {
         userRepositoryMock = mock(UserRepository.class);
         emailSenderMock = mock(EmailSender.class);
         userService = new UserService(userRepositoryMock, PasswordEncoderFactories.createDelegatingPasswordEncoder(), emailSenderMock);
+        userService.setEnv(new MockEnvironment());
     }
 
     @Test

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/UserService.java
Patch:
@@ -66,7 +66,7 @@ public User createUser(final UserCreateDto userCreateDto) {
                 .accountNonExpired(true)
                 .accountNonLocked(true)
                 .credentialsNonExpired(true)
-                .enabled(false)
+                .enabled(true)//TODO make it false when EFRS-330 is complete
                 .registrationToken(UUID.randomUUID().toString())
                 .build();
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -13,6 +13,7 @@
 import com.exadel.frs.exception.NameIsNotUniqueException;
 import com.exadel.frs.exception.SelfRemoveException;
 import com.exadel.frs.exception.SelfRoleChangeException;
+import com.exadel.frs.helpers.EmailSender;
 import com.exadel.frs.repository.AppModelRepository;
 import com.exadel.frs.repository.AppRepository;
 import com.exadel.frs.repository.ModelRepository;
@@ -385,7 +386,7 @@ void failDeleteOrganizationInsufficientPrivileges(OrganizationRole organizationR
     @ExtendWith(SpringExtension.class)
     @DataJpaTest
     @Nested
-    @MockBeans({@MockBean(SpringLiquibase.class), @MockBean(PasswordEncoder.class)})
+    @MockBeans({@MockBean(SpringLiquibase.class), @MockBean(PasswordEncoder.class), @MockBean(EmailSender.class)})
     @Import({OrganizationService.class, UserService.class})
     public class RemoveOrganizationTest {
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -72,6 +72,7 @@ void successCreateUser() {
 
         userService.createUser(userCreateDto);
 
+        verify(emailSenderMock).sendMail(anyString(), anyString(), anyString());
         verify(userRepositoryMock).save(any(User.class));
     }
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/ProxyController.java
Patch:
@@ -110,7 +110,7 @@ public ResponseEntity<String> proxyV1(
 
         new ImageExtensionValidator().validate(files.values());
 
-        val remoteUrl = baseUrl + request.getRequestURI();
+        val remoteUrl = baseUrl + request.getRequestURI().replaceFirst(PREFIX + "/v1", "");
         val body = new LinkedMultiValueMap<String, Object>();
 
         params.forEach(body::add);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/ProxyController.java
Patch:
@@ -110,7 +110,7 @@ public ResponseEntity<String> proxyV1(
 
         new ImageExtensionValidator().validate(files.values());
 
-        val remoteUrl = baseUrl + request.getRequestURI();
+        val remoteUrl = baseUrl + request.getRequestURI().replaceFirst(PREFIX + "/v1", "");
         val body = new LinkedMultiValueMap<String, Object>();
 
         params.forEach(body::add);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -11,7 +11,7 @@
 @NoArgsConstructor
 public class UserRoleUpdateDto {
 
-    private String id;
+    private String userId;
     private String role;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -155,7 +155,7 @@ public void updateUserAppRole(final UserRoleUpdateDto userRoleUpdateDto, final S
         App app = getApp(guid);
         verifyUserHasWritePrivileges(adminId, app.getOrganization());
 
-        User user = userService.getUserByGuid(userRoleUpdateDto.getId());
+        User user = userService.getUserByGuid(userRoleUpdateDto.getUserId());
         if (user.getId().equals(adminId)) {
             throw new SelfRoleChangeException();
         }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -317,7 +317,7 @@ void successUpdateApp(OrganizationRole organizationRole) {
     @MethodSource("writeRoles")
     void failUpdateAppSelfRoleChange(OrganizationRole organizationRole) {
         UserRoleUpdateDto userRoleUpdateDto = UserRoleUpdateDto.builder()
-                .id("userGuid")
+                .userId("userGuid")
                 .role(AppRole.USER.toString())
                 .build();
         User user = user(USER_ID);

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -180,7 +180,7 @@ void failUpdateOrganizationInsufficientPrivileges(OrganizationRole organizationR
     @MethodSource("writeRoles")
     void failUpdateOrganizationSelfRoleChange(OrganizationRole organizationRole) {
         UserRoleUpdateDto userRoleUpdateDto = UserRoleUpdateDto.builder()
-                .id("userGuid")
+                .userId("userGuid")
                 .role(OrganizationRole.USER.toString())
                 .build();
         Long userId = 1L;

File: apps/frs-crud-app/src/main/java/com/exadel/frs/dto/ui/UserRoleUpdateDto.java
Patch:
@@ -11,7 +11,7 @@
 @NoArgsConstructor
 public class UserRoleUpdateDto {
 
-    private String id;
+    private String userId;
     private String role;
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/AppService.java
Patch:
@@ -155,7 +155,7 @@ public void updateUserAppRole(final UserRoleUpdateDto userRoleUpdateDto, final S
         App app = getApp(guid);
         verifyUserHasWritePrivileges(adminId, app.getOrganization());
 
-        User user = userService.getUserByGuid(userRoleUpdateDto.getId());
+        User user = userService.getUserByGuid(userRoleUpdateDto.getUserId());
         if (user.getId().equals(adminId)) {
             throw new SelfRoleChangeException();
         }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -317,7 +317,7 @@ void successUpdateApp(OrganizationRole organizationRole) {
     @MethodSource("writeRoles")
     void failUpdateAppSelfRoleChange(OrganizationRole organizationRole) {
         UserRoleUpdateDto userRoleUpdateDto = UserRoleUpdateDto.builder()
-                .id("userGuid")
+                .userId("userGuid")
                 .role(AppRole.USER.toString())
                 .build();
         User user = user(USER_ID);

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -180,7 +180,7 @@ void failUpdateOrganizationInsufficientPrivileges(OrganizationRole organizationR
     @MethodSource("writeRoles")
     void failUpdateOrganizationSelfRoleChange(OrganizationRole organizationRole) {
         UserRoleUpdateDto userRoleUpdateDto = UserRoleUpdateDto.builder()
-                .id("userGuid")
+                .userId("userGuid")
                 .role(OrganizationRole.USER.toString())
                 .build();
         Long userId = 1L;

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/AccessDeniedException.java
Patch:
@@ -1,13 +1,13 @@
 package com.exadel.frs.exception;
 
-import static com.exadel.frs.handler.ExceptionCode.ACCESS_DENIED;
+import static com.exadel.frs.handler.ExceptionCode.APP_ACCESS_DENIED;
 
 public class AccessDeniedException extends BasicException {
 
     private static final String MESSAGE = "Access Denied. Application has read only access to model";
 
     public AccessDeniedException() {
-        super(ACCESS_DENIED, MESSAGE);
+        super(APP_ACCESS_DENIED, MESSAGE);
     }
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/SelfRoleChangeException.java
Patch:
@@ -4,7 +4,7 @@
 
 public class SelfRoleChangeException extends BasicException {
 
-    public static final String MESSAGE = "Owner cannot change his own organization/application role";
+    public static final String MESSAGE = "Organization should have at least one OWNER";
 
     public SelfRoleChangeException() {
         super(SELF_ROLE_CHANGE, MESSAGE);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -9,7 +9,7 @@
 @AllArgsConstructor
 @Getter
 public enum ExceptionCode {
-    ACCESS_DENIED(1, FORBIDDEN),
+    APP_ACCESS_DENIED(1, FORBIDDEN),
     APP_NOT_FOUND(2, NOT_FOUND),
     APP_OR_MODEL_NOT_FOUND_OR_PERMISSION_ISSUE(3, NOT_FOUND),
     EMAIL_ALREADY_REGISTERED(4, BAD_REQUEST),

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ResponseExceptionHandler.java
Patch:
@@ -39,7 +39,7 @@ private ExceptionResponseDto buildBody(final BasicException ex) {
     private ExceptionResponseDto buildBody(final Exception ex) {
         return ExceptionResponseDto.builder()
                                    .code(UNDEFINED.getCode())
-                                   .message(ex.getMessage())
+                                   .message("Something went wrong, please try again")
                                    .build();
     }
 }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -114,7 +114,7 @@ void failCreateOrganizationNameIsNotUnique() {
     @Test
     void failCreateOrganizationEmptyRequiredField() {
         OrgCreateDto orgCreateDto = OrgCreateDto.builder().name("").build();
-        Assertions.assertThrows(EmptyRequiredFieldException.class, () -> organizationService.createOrganization(orgCreateDto, null));
+        Assertions.assertThrows(FieldRequiredException.class, () -> organizationService.createOrganization(orgCreateDto, null));
     }
 
     @Test

File: apps/frs-crud-app/src/main/java/com/exadel/frs/mapper/UserAppRoleMapper.java
Patch:
@@ -10,7 +10,7 @@
 @Mapper
 public interface UserAppRoleMapper {
 
-    @Mapping(source = "user.guid", target = "id")
+    @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/mapper/UserOrgRoleMapper.java
Patch:
@@ -10,7 +10,7 @@
 @Mapper
 public interface UserOrgRoleMapper {
 
-    @Mapping(source = "user.guid", target = "id")
+    @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserOrganizationRole userAppRole);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/OrganizationController.java
Patch:
@@ -52,6 +52,9 @@ public OrgResponseDto createOrganization(
 
     @PutMapping("/org/{guid}")
     @ApiOperation(value = "Update organization name")
+    @ApiResponses({
+            @ApiResponse(code = 400, message = "Organization name is required")
+    })
     public void updateOrganization(
             @ApiParam(value = "GUID of organization that needs to be updated", required = true, example = GUID_EXAMPLE) @PathVariable final String guid,
             @ApiParam(value = "Organization data", required = true) @Valid @RequestBody OrgUpdateDto orgUpdateDto) {

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/ModelController.java
Patch:
@@ -91,8 +91,7 @@ public ModelResponseDto createModel(
             @RequestBody
             final ModelCreateDto modelCreateDto) {
         return modelMapper.toResponseDto(
-                modelService.createModel(modelCreateDto, orgGuid, appGuid, SecurityUtils.getPrincipalId()),
-                appGuid
+                modelService.createModel(modelCreateDto, orgGuid, appGuid, SecurityUtils.getPrincipalId()), appGuid
         );
     }
 

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/AccessDeniedException.java
Patch:
@@ -1,13 +1,13 @@
 package com.exadel.frs.exception;
 
-import static com.exadel.frs.handler.ExceptionCode.ACCESS_DENIED;
+import static com.exadel.frs.handler.ExceptionCode.APP_ACCESS_DENIED;
 
 public class AccessDeniedException extends BasicException {
 
     private static final String MESSAGE = "Access Denied. Application has read only access to model";
 
     public AccessDeniedException() {
-        super(ACCESS_DENIED, MESSAGE);
+        super(APP_ACCESS_DENIED, MESSAGE);
     }
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/SelfRoleChangeException.java
Patch:
@@ -4,7 +4,7 @@
 
 public class SelfRoleChangeException extends BasicException {
 
-    public static final String MESSAGE = "Owner cannot change his own organization/application role";
+    public static final String MESSAGE = "Organization should have at least one OWNER";
 
     public SelfRoleChangeException() {
         super(SELF_ROLE_CHANGE, MESSAGE);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -9,7 +9,7 @@
 @AllArgsConstructor
 @Getter
 public enum ExceptionCode {
-    ACCESS_DENIED(1, FORBIDDEN),
+    APP_ACCESS_DENIED(1, FORBIDDEN),
     APP_NOT_FOUND(2, NOT_FOUND),
     APP_OR_MODEL_NOT_FOUND_OR_PERMISSION_ISSUE(3, NOT_FOUND),
     EMAIL_ALREADY_REGISTERED(4, BAD_REQUEST),

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ResponseExceptionHandler.java
Patch:
@@ -39,7 +39,7 @@ private ExceptionResponseDto buildBody(final BasicException ex) {
     private ExceptionResponseDto buildBody(final Exception ex) {
         return ExceptionResponseDto.builder()
                                    .code(UNDEFINED.getCode())
-                                   .message(ex.getMessage())
+                                   .message("Something went wrong, please try again")
                                    .build();
     }
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/AccessDeniedException.java
Patch:
@@ -1,13 +1,13 @@
 package com.exadel.frs.exception;
 
-import static com.exadel.frs.handler.ExceptionCode.ACCESS_DENIED;
+import static com.exadel.frs.handler.ExceptionCode.APP_ACCESS_DENIED;
 
 public class AccessDeniedException extends BasicException {
 
     private static final String MESSAGE = "Access Denied. Application has read only access to model";
 
     public AccessDeniedException() {
-        super(ACCESS_DENIED, MESSAGE);
+        super(APP_ACCESS_DENIED, MESSAGE);
     }
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/exception/SelfRoleChangeException.java
Patch:
@@ -4,7 +4,7 @@
 
 public class SelfRoleChangeException extends BasicException {
 
-    public static final String MESSAGE = "Owner cannot change his own organization/application role";
+    public static final String MESSAGE = "Organization should have at least one OWNER";
 
     public SelfRoleChangeException() {
         super(SELF_ROLE_CHANGE, MESSAGE);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -9,7 +9,7 @@
 @AllArgsConstructor
 @Getter
 public enum ExceptionCode {
-    ACCESS_DENIED(1, FORBIDDEN),
+    APP_ACCESS_DENIED(1, FORBIDDEN),
     APP_NOT_FOUND(2, NOT_FOUND),
     APP_OR_MODEL_NOT_FOUND_OR_PERMISSION_ISSUE(3, NOT_FOUND),
     EMAIL_ALREADY_REGISTERED(4, BAD_REQUEST),

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ResponseExceptionHandler.java
Patch:
@@ -39,7 +39,7 @@ private ExceptionResponseDto buildBody(final BasicException ex) {
     private ExceptionResponseDto buildBody(final Exception ex) {
         return ExceptionResponseDto.builder()
                                    .code(UNDEFINED.getCode())
-                                   .message(ex.getMessage())
+                                   .message("Something went wrong, please try again")
                                    .build();
     }
 }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -114,7 +114,7 @@ void failCreateOrganizationNameIsNotUnique() {
     @Test
     void failCreateOrganizationEmptyRequiredField() {
         OrgCreateDto orgCreateDto = OrgCreateDto.builder().name("").build();
-        Assertions.assertThrows(EmptyRequiredFieldException.class, () -> organizationService.createOrganization(orgCreateDto, null));
+        Assertions.assertThrows(FieldRequiredException.class, () -> organizationService.createOrganization(orgCreateDto, null));
     }
 
     @Test

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -114,7 +114,7 @@ void failCreateOrganizationNameIsNotUnique() {
     @Test
     void failCreateOrganizationEmptyRequiredField() {
         OrgCreateDto orgCreateDto = OrgCreateDto.builder().name("").build();
-        Assertions.assertThrows(EmptyRequiredFieldException.class, () -> organizationService.createOrganization(orgCreateDto, null));
+        Assertions.assertThrows(FieldRequiredException.class, () -> organizationService.createOrganization(orgCreateDto, null));
     }
 
     @Test

File: apps/frs-crud-app/src/main/java/com/exadel/frs/mapper/UserAppRoleMapper.java
Patch:
@@ -10,7 +10,7 @@
 @Mapper
 public interface UserAppRoleMapper {
 
-    @Mapping(source = "user.guid", target = "id")
+    @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/mapper/UserOrgRoleMapper.java
Patch:
@@ -10,7 +10,7 @@
 @Mapper
 public interface UserOrgRoleMapper {
 
-    @Mapping(source = "user.guid", target = "id")
+    @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserOrganizationRole userAppRole);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/mapper/UserAppRoleMapper.java
Patch:
@@ -10,7 +10,7 @@
 @Mapper
 public interface UserAppRoleMapper {
 
-    @Mapping(source = "user.guid", target = "id")
+    @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserAppRole userAppRole);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/mapper/UserOrgRoleMapper.java
Patch:
@@ -10,7 +10,7 @@
 @Mapper
 public interface UserOrgRoleMapper {
 
-    @Mapping(source = "user.guid", target = "id")
+    @Mapping(source = "user.guid", target = "userId")
     @Mapping(source = "user.firstName", target = "firstName")
     @Mapping(source = "user.lastName", target = "lastName")
     UserRoleResponseDto toUserRoleResponseDto(UserOrganizationRole userAppRole);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/OrganizationController.java
Patch:
@@ -52,6 +52,9 @@ public OrgResponseDto createOrganization(
 
     @PutMapping("/org/{guid}")
     @ApiOperation(value = "Update organization name")
+    @ApiResponses({
+            @ApiResponse(code = 400, message = "Organization name is required")
+    })
     public void updateOrganization(
             @ApiParam(value = "GUID of organization that needs to be updated", required = true, example = GUID_EXAMPLE) @PathVariable final String guid,
             @ApiParam(value = "Organization data", required = true) @Valid @RequestBody OrgUpdateDto orgUpdateDto) {

File: apps/frs-crud-app/src/main/java/com/exadel/frs/controller/OrganizationController.java
Patch:
@@ -52,6 +52,9 @@ public OrgResponseDto createOrganization(
 
     @PutMapping("/org/{guid}")
     @ApiOperation(value = "Update organization name")
+    @ApiResponses({
+            @ApiResponse(code = 400, message = "Organization name is required")
+    })
     public void updateOrganization(
             @ApiParam(value = "GUID of organization that needs to be updated", required = true, example = GUID_EXAMPLE) @PathVariable final String guid,
             @ApiParam(value = "Organization data", required = true) @Valid @RequestBody OrgUpdateDto orgUpdateDto) {

File: apps/frs-crud-app/src/main/java/com/exadel/frs/config/SecurityConfig.java
Patch:
@@ -40,7 +40,7 @@ protected void configure(HttpSecurity http) throws Exception {
                 .requestMatchers()
                 .and()
                 .authorizeRequests()
-                .antMatchers("/actuator/**", "/user/register").permitAll()
+                .antMatchers("/actuator/**", "/user/register", "/login", "/api/**").permitAll()
                 .anyRequest().authenticated()
                 .and()
                 .csrf().disable();

File: apps/frs-crud-app/src/test/java/com/exadel/frs/controller/AppControllerTest.java
Patch:
@@ -28,6 +28,7 @@
 import static org.mockito.ArgumentMatchers.eq;
 import static org.mockito.Mockito.doThrow;
 import static org.mockito.Mockito.when;
+import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.csrf;
 import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.user;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
 import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
@@ -92,6 +93,7 @@ public void shouldReturnMessageAndCodeWhenAppNameIsMissing() throws Exception {
         doThrow(expectedException).when(appService).createApp(any(), eq(USER_ID));
 
         MockHttpServletRequestBuilder request = post("/apps/")
+                .with(csrf())
                 .with(user(buildDefaultUser()))
                 .contentType(MediaType.APPLICATION_JSON)
                 .content(mapper.writeValueAsString(App.builder().id(APP_ID).build()));

File: apps/frs-crud-app/src/main/java/com/exadel/frs/handler/ExceptionCode.java
Patch:
@@ -27,6 +27,7 @@ public enum ExceptionCode {
     USER_DOES_NOT_BELONG_TO_ORGANIZATION(16, NOT_FOUND),
     USER_DOES_NOT_EXIST(17, NOT_FOUND),
     USERNAME_ALREADY_EXIST(18, BAD_REQUEST),
+    NAME_IS_NOT_UNIQUE(19, BAD_REQUEST),
 
 
     UNDEFINED(0, BAD_REQUEST);

File: apps/frs-crud-app/src/main/java/com/exadel/frs/repository/AppRepository.java
Patch:
@@ -14,6 +14,6 @@ public interface AppRepository extends JpaRepository<App, Long> {
 
     List<App> findAllByOrganizationIdAndUserAppRoles_Id_UserId(Long organizationId, Long userId);
 
-    Optional<App> findByNameAndOrganizationId(String name, Long organizationId);
+    boolean existsByNameAndOrganizationId(String name, Long organizationId);
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/repository/ModelRepository.java
Patch:
@@ -17,6 +17,6 @@ public interface ModelRepository extends JpaRepository<Model, Long> {
 
     Optional<Model> findByGuid(String guid);
 
-    Optional<Model> findByNameAndAppId(String name, Long appId);
+    boolean existsByNameAndAppId(String name, Long appId);
 
 }

File: apps/frs-crud-app/src/main/java/com/exadel/frs/repository/OrganizationRepository.java
Patch:
@@ -12,6 +12,6 @@ public interface OrganizationRepository extends JpaRepository<Organization, Long
 
     List<Organization> findAllByUserOrganizationRoles_Id_UserId(Long userId);
 
-    Optional<Organization> findByName(String name);
+    boolean existsByName(String name);
 
 }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -12,7 +12,6 @@
 import com.exadel.frs.service.UserService;
 import org.hamcrest.Matchers;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.Arguments;
@@ -244,7 +243,7 @@ public void failCreateOrganizationNameIsNotUnique(OrganizationRole organizationR
                 .build();
 
         when(organizationServiceMock.getOrganization(anyLong())).thenReturn(organization);
-        when(appRepositoryMock.findByNameAndOrganizationId(anyString(), anyLong())).thenReturn(Optional.of(app));
+        when(appRepositoryMock.existsByNameAndOrganizationId(anyString(), anyLong())).thenReturn(true);
 
         Assertions.assertThrows(NameIsNotUniqueException.class, () -> appService.createApp(app, USER_ID));
     }
@@ -408,7 +407,7 @@ public void failUpdateAppNameIsNotUnique(OrganizationRole organizationRole) {
                 .name("new_name")
                 .build();
 
-        when(appRepositoryMock.findByNameAndOrganizationId(anyString(), anyLong())).thenReturn(Optional.of(appUpdate));
+        when(appRepositoryMock.existsByNameAndOrganizationId(anyString(), anyLong())).thenReturn(true);
         when(appRepositoryMock.findByGuid(APPLICATION_GUID)).thenReturn(Optional.of(repoApp));
         when(organizationServiceMock.getOrganization(anyLong())).thenReturn(organization);
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/ModelServiceTest.java
Patch:
@@ -279,7 +279,7 @@ public void failCreateModelNameIsNotUnique(OrganizationRole organizationRole) {
                 .build();
 
         when(appServiceMock.getApp(anyString())).thenReturn(app);
-        when(modelRepositoryMock.findByNameAndAppId(anyString(), anyLong())).thenReturn(Optional.of(model));
+        when(modelRepositoryMock.existsByNameAndAppId(anyString(), anyLong())).thenReturn(true);
 
         Assertions.assertThrows(NameIsNotUniqueException.class, () -> modelService.createModel(model, USER_ID));
     }
@@ -401,7 +401,7 @@ public void failUpdateModelNameIsNotUnique(OrganizationRole organizationRole) {
 
         when(modelRepositoryMock.findByGuid(anyString())).thenReturn(Optional.of(repoModel));
         when(appServiceMock.getApp(anyString())).thenReturn(app);
-        when(modelRepositoryMock.findByNameAndAppId(anyString(), anyLong())).thenReturn(Optional.of(model));
+        when(modelRepositoryMock.existsByNameAndAppId(anyString(), anyLong())).thenReturn(true);
 
         Assertions.assertThrows(NameIsNotUniqueException.class, () -> modelService.updateModel(MODEL_GUID, model, USER_ID));
     }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/OrganizationServiceTest.java
Patch:
@@ -106,7 +106,7 @@ public void failCreateOrganizationNameIsNotUnique() {
                 .name("Organization")
                 .build();
 
-        when(organizationRepositoryMock.findByName(anyString())).thenReturn(Optional.of(organization));
+        when(organizationRepositoryMock.existsByName(anyString())).thenReturn(true);
 
         Assertions.assertThrows(NameIsNotUniqueException.class, () -> organizationService.createOrganization(organization, null));
     }
@@ -193,7 +193,7 @@ public void failUpdateOrganizationNameIsNotUnique() {
                 .build();
 
         when(organizationRepositoryMock.findByGuid(anyString())).thenReturn(Optional.of(organization));
-        when(organizationRepositoryMock.findByName(anyString())).thenReturn(Optional.of(organizationUpdate));
+        when(organizationRepositoryMock.existsByName(anyString())).thenReturn(true);
 
         Assertions.assertThrows(NameIsNotUniqueException.class, () -> organizationService.updateOrganization(ORGANISATION_GUID, organizationUpdate, userId));
     }

File: apps/frs-crud-app/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -7,8 +7,8 @@
 import com.exadel.frs.exception.UsernameAlreadyExistException;
 import com.exadel.frs.repository.UserRepository;
 import com.exadel.frs.service.UserService;
-import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Assertions;
+import org.junit.jupiter.api.Test;
 import org.springframework.security.crypto.factory.PasswordEncoderFactories;
 
 import java.util.Optional;

File: apps/frs-crud-app/src/main/java/com/exadel/frs/service/OrganizationService.java
Patch:
@@ -78,7 +78,7 @@ private void verifyNumberOfOwners(List<UserOrganizationRole> userOrganizationRol
     public void updateOrganization(final String guid, Organization organization, Long userId) {
         Organization organizationFromRepo = getOrganization(guid);
         verifyUserHasWritePrivileges(userId, organizationFromRepo);
-        if (!StringUtils.isEmpty(organization.getName()) && !repoOrganization.getName().equals(organization.getName())) {
+        if (!StringUtils.isEmpty(organization.getName()) && !organizationFromRepo.getName().equals(organization.getName())) {
             organizationRepository.findByName(organization.getName())
                     .ifPresent(organization1 -> {
                         throw new NameIsNotUniqueException(organization1.getName());

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -334,7 +334,7 @@ public void successUpdateApp(OrganizationRole organizationRole) {
         verify(appRepositoryMock).save(any(App.class));
 
         assertThat(repoApp.getName(), is(app.getName()));
-        assertThat(repoApp.getGuid(), is("guid"));
+        assertThat(repoApp.getGuid(), is(APPLICATION_GUID));
         assertThat(repoApp.getUserAppRoles().size(), is(1));
     }
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/UserServiceTest.java
Patch:
@@ -7,7 +7,7 @@
 import com.exadel.frs.exception.UsernameAlreadyExistException;
 import com.exadel.frs.repository.UserRepository;
 import com.exadel.frs.service.UserService;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.Assertions;
 import org.springframework.security.crypto.factory.PasswordEncoderFactories;
 

File: apps/frs-crud-app/src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -12,6 +12,7 @@
 import com.exadel.frs.service.AppService;
 import com.exadel.frs.service.OrganizationService;
 import com.exadel.frs.service.UserService;
+import org.junit.Ignore;
 import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.params.ParameterizedTest;
@@ -308,8 +309,8 @@ public void failCreateAppInsufficientPrivileges(OrganizationRole organizationRol
         Assertions.assertThrows(InsufficientPrivilegesException.class, () -> appService.createApp(app, userId));
     }
 
-    @ParameterizedTest
-    @MethodSource("writeRoles")
+    //@ParameterizedTest
+    //@MethodSource("writeRoles")
     public void successUpdateAppOrganizationOwner(OrganizationRole organizationRole) {
         Long userId = 1L;
         Long appId = 1L;

File: src/test/java/com/exadel/frs/ModelServiceTest.java
Patch:
@@ -63,7 +63,7 @@ private static Stream<Arguments> readRoles() {
 
     @ParameterizedTest
     @MethodSource("writeRoles")
-    public void successGetModelOrganizationOwner(OrganizationRole organizationRole) {
+    public void successGetModel(OrganizationRole organizationRole) {
         Long userId = 1L;
         Long modelId = 1L;
         Long appId = 1L;
@@ -152,7 +152,7 @@ public void failGetModelInsufficientPrivileges(OrganizationRole organizationRole
 
     @ParameterizedTest
     @MethodSource("writeRoles")
-    public void successGetModelsOrganizationOwner(OrganizationRole organizationRole) {
+    public void successGetModels(OrganizationRole organizationRole) {
         Long userId = 1L;
         Long modelId = 1L;
         Long appId = 1L;

File: src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -85,7 +85,9 @@ public void updateModel(Long id, Model model, Long userId) {
         }
         if (model.getAppModelAccess() != null) {
             Long repoModelOrganizationId = repoModel.getApp().getOrganization().getId();
-            repoModel.getAppModelAccess().clear();
+            if (repoModel.getAppModelAccess() != null) {
+                repoModel.getAppModelAccess().clear();
+            }
             model.getAppModelAccess().forEach(appModel -> {
                 App app = getAppFromRepo(appModel.getApp().getId());
                 if (!repoModelOrganizationId.equals(app.getOrganization().getId())) {

File: src/test/java/com/exadel/frs/AppServiceTest.java
Patch:
@@ -8,7 +8,6 @@
 import com.exadel.frs.exception.EmptyRequiredFieldException;
 import com.exadel.frs.exception.InsufficientPrivilegesException;
 import com.exadel.frs.exception.UserDoesNotBelongToOrganization;
-import com.exadel.frs.exception.UserDoesNotExistException;
 import com.exadel.frs.repository.AppRepository;
 import com.exadel.frs.repository.OrganizationRepository;
 import com.exadel.frs.service.AppService;
@@ -384,7 +383,7 @@ public void failUpdateAppUserDoesNotExist(OrganizationRole organizationRole) {
         when(appRepositoryMock.findById(anyLong())).thenReturn(Optional.of(repoApp));
         when(organizationRepositoryMock.findById(anyLong())).thenReturn(Optional.of(organization));
 
-        Assertions.assertThrows(UserDoesNotExistException.class, () -> appService.updateApp(appId, app, userId));
+        Assertions.assertThrows(UserDoesNotBelongToOrganization.class, () -> appService.updateApp(appId, app, userId));
     }
 
     @ParameterizedTest

File: src/test/java/com/exadel/frs/ModelServiceTest.java
Patch:
@@ -273,7 +273,6 @@ public void successCreateModel(OrganizationRole organizationRole) {
         verify(modelRepositoryMock).save(any(Model.class));
 
         assertThat(model.getGuid(), not(isEmptyOrNullString()));
-        assertThat(model.getAppModelAccess().size(), is(1));
     }
 
     @ParameterizedTest

File: src/main/java/com/exadel/frs/controller/ProxyController.java
Patch:
@@ -24,10 +24,11 @@
 import java.util.Map;
 
 @RestController
-@RequestMapping("/api")
+@RequestMapping(ProxyController.PREFIX)
 @RequiredArgsConstructor
 public class ProxyController {
 
+    static final String PREFIX = "/api";
     private static final String API_KEY_HEADER = "X-Api-Key";
     private static final String APP_GUID_HEADER = "x-frs-app-key";
     private static final String MODEL_GUID_HEADER = "x-frs-model-key";
@@ -49,7 +50,7 @@ public ResponseEntity<String> proxy(
         if (!securityUtils.isAppHasAccessToModel(appGuid, modelGuid)) {
             throw new AppOrModelNotFoundException();
         }
-        String url = request.getRequestURI().replaceFirst("/proxy", "");
+        String url = request.getRequestURI().replaceFirst(PREFIX, "");
         MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
         params.forEach(body::add);
         files.forEach((key, file) -> body.add(key, file.getResource()));

File: src/main/java/com/exadel/frs/controller/ProxyController.java
Patch:
@@ -24,13 +24,13 @@
 import java.util.Map;
 
 @RestController
-@RequestMapping("/proxy")
+@RequestMapping("/api")
 @RequiredArgsConstructor
 public class ProxyController {
 
     private static final String API_KEY_HEADER = "X-Api-Key";
-    private static final String APP_GUID_HEADER = "app-guid";
-    private static final String MODEL_GUID_HEADER = "model-guid";
+    private static final String APP_GUID_HEADER = "x-frs-app-key";
+    private static final String MODEL_GUID_HEADER = "x-frs-model-key";
 
     private final SecurityUtils securityUtils;
 

File: frs/src/main/java/com/exadel/frs/repository/ClientRepository.java
Patch:
@@ -9,4 +9,6 @@ public interface ClientRepository extends JpaRepository<Client, Long> {
 
     Optional<Client> findByUsername(String username);
 
+    Optional<Client> findByEmail(String email);
+
 }

File: frs/src/main/java/com/exadel/frs/mapper/MlModelMapper.java
Patch:
@@ -12,7 +12,7 @@
 import org.mapstruct.Named;
 
 @Mapper(componentModel = "spring")
-public interface ModelMapper extends ModelAccessTypeMapper {
+public interface MlModelMapper extends ModelAccessTypeMapper {
 
     @Mapping(source = "appAccess", target = "appModelList")
     @Mapping(source = "ownerId", target = "owner.id")

File: frs/src/main/java/com/exadel/frs/service/ModelService.java
Patch:
@@ -8,7 +8,7 @@
 import com.exadel.frs.exception.NullAccessTypeException;
 import com.exadel.frs.helpers.AccessUpdateType;
 import com.exadel.frs.helpers.SecurityUtils;
-import com.exadel.frs.mapper.ModelMapper;
+import com.exadel.frs.mapper.MlModelMapper;
 import com.exadel.frs.repository.ModelRepository;
 import lombok.RequiredArgsConstructor;
 import org.springframework.stereotype.Service;
@@ -24,7 +24,7 @@ public class ModelService {
 
     private final ModelRepository modelRepository;
     private final SecurityUtils securityUtils;
-    private final ModelMapper modelMapper;
+    private final MlModelMapper modelMapper;
 
     public ModelDto getModel(Long id, Long clientId) {
         return modelMapper.toDto(modelRepository.findByIdAndOwnerId(id, clientId)

