File: motan-core/src/main/java/com/weibo/api/motan/protocol/v2motan/MotanV2Protocol.java
Patch:
@@ -47,8 +47,9 @@ public class MotanV2Protocol extends AbstractProtocol {
     protected <T> Exporter<T> createExporter(Provider<T> provider, URL url) {
         String codec = url.getParameter(URLParamType.codec.getName());
         // motan-compatible as default codec at server end.
+        // When codec=motan2 is set, compatibility with the motan1 protocol can be cancelled
         if (StringUtils.isBlank(codec) || codec.equals("compressMotan")
-                || codec.equals("motan") || codec.equals("motan2")) {
+                || codec.equals("motan")) {
             url.getParameters().put(URLParamType.codec.getName(), "motan-compatible");
         }
         return new DefaultRpcExporter<T>(provider, url, this.ipPort2RequestRouter, this.exporterMap);

File: motan-registry-weibomesh/src/test/java/com/weibo/api/motan/registry/weibomesh/MeshRegistryTest.java
Patch:
@@ -121,11 +121,11 @@ public void testDoSubscribe() throws Exception {
 
         // 验证降级开关
         MotanSwitcherUtil.setSwitcherValue(MeshRegistry.MESH_REGISTRY_SWITCHER_NAME, false);
-        Thread.sleep(50l);
+        Thread.sleep(100l);
         assertEquals(notifyListener.urls, mockProxyRegistry.discover(subUrl));
 
         MotanSwitcherUtil.setSwitcherValue(MeshRegistry.MESH_REGISTRY_SWITCHER_NAME, true);
-        Thread.sleep(50l);
+        Thread.sleep(100l);
         assertEquals(notifyListener.urls.size(), copy);
 
         // health check

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -149,7 +149,7 @@ public void testServerTrace() throws InterruptedException {
     @Test
     public void testServerAsync() throws TransportException, InterruptedException {
         final AtomicInteger callbackCount = new AtomicInteger();
-        NettyServer nettyServer = new NettyServer(url, (channel, message) -> {
+        nettyServer = new NettyServer(url, (channel, message) -> {
             final Request request = (Request) message;
             Response response;
             if ("async".equals(request.getMethodName())) { // async result

File: motan-registry-weibomesh/src/test/java/com/weibo/api/motan/registry/weibomesh/MeshRegistryTest.java
Patch:
@@ -121,11 +121,11 @@ public void testDoSubscribe() throws Exception {
 
         // 验证降级开关
         MotanSwitcherUtil.setSwitcherValue(MeshRegistry.MESH_REGISTRY_SWITCHER_NAME, false);
-        Thread.sleep(50l);
+        Thread.sleep(100l);
         assertEquals(notifyListener.urls, mockProxyRegistry.discover(subUrl));
 
         MotanSwitcherUtil.setSwitcherValue(MeshRegistry.MESH_REGISTRY_SWITCHER_NAME, true);
-        Thread.sleep(50l);
+        Thread.sleep(100l);
         assertEquals(notifyListener.urls.size(), copy);
 
         // health check

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -149,7 +149,7 @@ public void testServerTrace() throws InterruptedException {
     @Test
     public void testServerAsync() throws TransportException, InterruptedException {
         final AtomicInteger callbackCount = new AtomicInteger();
-        NettyServer nettyServer = new NettyServer(url, (channel, message) -> {
+        nettyServer = new NettyServer(url, (channel, message) -> {
             final Request request = (Request) message;
             Response response;
             if ("async".equals(request.getMethodName())) { // async result

File: motan-core/src/main/java/com/weibo/api/motan/cluster/LoadBalance.java
Patch:
@@ -37,6 +37,7 @@ public interface LoadBalance<T> {
 
     Referer<T> select(Request request);
 
+    @Deprecated
     void selectToHolder(Request request, List<Referer<T>> refersHolder);
 
     void setWeightString(String weightString);

File: motan-core/src/main/java/com/weibo/api/motan/common/URLParamType.java
Patch:
@@ -180,7 +180,7 @@ public enum URLParamType {
     proxyRegistryUrlString("proxyRegistryUrlString", ""), //保存要代理的的registry具体信息
 
     // meta info
-    registerMeta("registerMeta", true), // whether to register meta info
+    registerMeta("registerMeta", false), // whether to register meta info
     dynamicMeta("dynamicMeta", true), // whether to enable dynamic meta
     ;
 

File: motan-core/src/main/java/com/weibo/api/motan/common/MotanConstants.java
Patch:
@@ -173,6 +173,7 @@ public class MotanConstants {
     public static final String ENV_MOTAN_ADMIN_TOKEN = "MOTAN_ADMIN_TOKEN";
     public static final String ENV_MOTAN_ADMIN_PORT = "MOTAN_ADMIN_PORT";
     public static final String ENV_MOTAN_ADMIN_EXT_HANDLERS = "MOTAN_ADMIN_EXT_HANDLERS";
+    public static final String ENV_RPC_REG_GROUP_SUFFIX = "RPC_REG_GROUP_SUFFIX"; // Group suffix automatically appended during RPC registration
 
     // ------------------ motan mesh default value -----------------
     public static final String MESH_CLIENT = "meshClient";

File: motan-core/src/main/java/com/weibo/api/motan/common/MotanConstants.java
Patch:
@@ -173,6 +173,7 @@ public class MotanConstants {
     public static final String ENV_MOTAN_ADMIN_TOKEN = "MOTAN_ADMIN_TOKEN";
     public static final String ENV_MOTAN_ADMIN_PORT = "MOTAN_ADMIN_PORT";
     public static final String ENV_MOTAN_ADMIN_EXT_HANDLERS = "MOTAN_ADMIN_EXT_HANDLERS";
+    public static final String ENV_RPC_REG_GROUP_SUFFIX = "RPC_REG_GROUP_SUFFIX"; // Group suffix automatically appended during RPC registration
 
     // ------------------ motan mesh default value -----------------
     public static final String MESH_CLIENT = "meshClient";

File: motan-core/src/main/java/com/weibo/api/motan/rpc/DefaultResponse.java
Patch:
@@ -83,6 +83,9 @@ public static DefaultResponse fromServerEndResponseFuture(ResponseFuture respons
         }
         response.updateTraceableContextFromResponse(responseFuture);
         response.updateCallbackHolderFromResponse(responseFuture);
+        if (!responseFuture.getAttachments().isEmpty()) { // avoid setting Collections.EMPTY_MAP to new response
+            response.attachments = responseFuture.getAttachments();
+        }
         return response;
     }
 

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyChannelHandler.java
Patch:
@@ -145,6 +145,7 @@ private void processRequest(final ChannelHandlerContext ctx, final Request reque
 
     private void processResult(final ChannelHandlerContext ctx, final DefaultResponse response, final Request request, final long processStartTime) {
         MotanFrameworkUtil.logEvent(response, MotanConstants.TRACE_PROCESS);
+        response.setSerializeNumber(request.getSerializeNumber());
         response.setRpcProtocolVersion(request.getRpcProtocolVersion());
         response.setRequestId(request.getRequestId());
         response.setProcessTime(System.currentTimeMillis() - processStartTime);

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -164,6 +164,7 @@ private void processRequest(final ChannelHandlerContext ctx, final Request reque
 
     private void processResult(final ChannelHandlerContext ctx, final DefaultResponse response, final Request request, final long processStartTime) {
         MotanFrameworkUtil.logEvent(response, MotanConstants.TRACE_PROCESS);
+        response.setSerializeNumber(request.getSerializeNumber());
         response.setRpcProtocolVersion(request.getRpcProtocolVersion());
         response.setRequestId(request.getRequestId());
         response.setProcessTime(System.currentTimeMillis() - processStartTime);

File: motan-core/src/main/java/com/weibo/api/motan/rpc/DefaultResponse.java
Patch:
@@ -83,6 +83,9 @@ public static DefaultResponse fromServerEndResponseFuture(ResponseFuture respons
         }
         response.updateTraceableContextFromResponse(responseFuture);
         response.updateCallbackHolderFromResponse(responseFuture);
+        if (!responseFuture.getAttachments().isEmpty()) { // avoid setting Collections.EMPTY_MAP to new response
+            response.attachments = responseFuture.getAttachments();
+        }
         return response;
     }
 

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyChannelHandler.java
Patch:
@@ -145,6 +145,7 @@ private void processRequest(final ChannelHandlerContext ctx, final Request reque
 
     private void processResult(final ChannelHandlerContext ctx, final DefaultResponse response, final Request request, final long processStartTime) {
         MotanFrameworkUtil.logEvent(response, MotanConstants.TRACE_PROCESS);
+        response.setSerializeNumber(request.getSerializeNumber());
         response.setRpcProtocolVersion(request.getRpcProtocolVersion());
         response.setRequestId(request.getRequestId());
         response.setProcessTime(System.currentTimeMillis() - processStartTime);

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -164,6 +164,7 @@ private void processRequest(final ChannelHandlerContext ctx, final Request reque
 
     private void processResult(final ChannelHandlerContext ctx, final DefaultResponse response, final Request request, final long processStartTime) {
         MotanFrameworkUtil.logEvent(response, MotanConstants.TRACE_PROCESS);
+        response.setSerializeNumber(request.getSerializeNumber());
         response.setRpcProtocolVersion(request.getRpcProtocolVersion());
         response.setRequestId(request.getRequestId());
         response.setProcessTime(System.currentTimeMillis() - processStartTime);

File: motan-core/src/main/java/com/weibo/api/motan/common/MotanConstants.java
Patch:
@@ -50,6 +50,8 @@ public class MotanConstants {
     public static final String REGISTRY_PROTOCOL_LOCAL = "local";
     public static final String REGISTRY_PROTOCOL_DIRECT = "direct";
     public static final String REGISTRY_PROTOCOL_ZOOKEEPER = "zookeeper";
+    public static final String REGISTRY_PROTOCOL_PLAIN_ZOOKEEPER = "zk"; // use utf8 string serializer
+    public static final String REGISTRY_PROTOCOL_WEIBOMESH = "weibomesh";
     public static final String PROTOCOL_INJVM = "injvm";
     public static final String PROTOCOL_MOTAN = "motan";
     public static final String PROTOCOL_MOTAN2 = "motan2";

File: motan-core/src/main/java/com/weibo/api/motan/rpc/DefaultProvider.java
Patch:
@@ -51,6 +51,7 @@ public Response invoke(Request request) {
         Method method = lookupMethod(request.getMethodName(), request.getParamtersDesc());
 
         if (method == null) {
+            LoggerUtil.error("can not found rpc method:" + request.getMethodName() + ", paramDesc:" + request.getParamtersDesc() + ", service:" + request.getInterfaceName());
             MotanServiceException exception =
                     new MotanServiceException("Service method not exist: " + request.getInterfaceName() + "." + request.getMethodName()
                             + "(" + request.getParamtersDesc() + ")", MotanErrorMsgConstant.SERVICE_UNFOUND, false);

File: motan-demo/motan-demo-client/src/main/java/com/weibo/motan/demo/client/AnnotationRpcClientDemo.java
Patch:
@@ -68,7 +68,7 @@ public ProtocolConfigBean protocolConfig2() {
     @Bean(name = "registry")
     public RegistryConfigBean registryConfig() {
         RegistryConfigBean config = new RegistryConfigBean();
-//        config.setRegProtocol("zookeeper");
+//        config.setRegProtocol("zk");
 //        config.setAddress("127.0.0.1:2181");
         config.setRegProtocol("direct");
         config.setAddress("127.0.0.1:8002");

File: motan-demo/motan-demo-client/src/main/java/com/weibo/motan/demo/client/MotanApiClientDemo.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String[] args) {
         registry.setAddress("127.0.0.1:8002");
 
         // use ZooKeeper registry
-//        registry.setRegProtocol("zookeeper");
+//        registry.setRegProtocol("zk");
 //        registry.setAddress("127.0.0.1:2181");
         motanDemoServiceReferer.setRegistry(registry);
 

File: motan-demo/motan-demo-server/src/main/java/com/weibo/motan/demo/server/AnnotationRpcServerDemo.java
Patch:
@@ -61,7 +61,7 @@ public ProtocolConfigBean protocolConfig2() {
     @Bean(name="registryConfig1")
     public RegistryConfigBean registryConfig() {
         RegistryConfigBean config = new RegistryConfigBean();
-//        config.setRegProtocol("zookeeper");
+//        config.setRegProtocol("zk");
 //        config.setAddress("127.0.0.1:2181");
         config.setRegProtocol("local");
         return config;

File: motan-demo/motan-demo-server/src/main/java/com/weibo/motan/demo/server/MotanApiExportDemo.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String[] args) throws InterruptedException {
         registry.setRegProtocol("local");
 
         // use ZooKeeper registry
-//        registry.setRegProtocol("zookeeper");
+//        registry.setRegProtocol("zk");
 //        registry.setAddress("127.0.0.1:2181");
 
         // registry.setCheck("false"); //是否检查是否注册成功

File: motan-manager/src/test/java/com/weibo/service/impl/ZkRegistryServiceTest.java
Patch:
@@ -33,7 +33,7 @@ public void setUp() throws Exception {
         int port = Integer.parseInt(properties.getProperty("clientPort"));
         in.close();
 
-        URL zkUrl = new URL("zookeeper", "127.0.0.1", port, "com.weibo.api.motan.registry.RegistryService");
+        URL zkUrl = new URL(MotanConstants.REGISTRY_PROTOCOL_PLAIN_ZOOKEEPER, "127.0.0.1", port, "com.weibo.api.motan.registry.RegistryService");
         URL clientUrl = new URL(MotanConstants.PROTOCOL_MOTAN, "127.0.0.1", 0, "com.weibo.motan.demoService");
         URL url1 = new URL(MotanConstants.PROTOCOL_MOTAN, "127.0.0.1", 8001, service1);
         URL url2 = new URL(MotanConstants.PROTOCOL_MOTAN, "127.0.0.1", 8002, service1);

File: motan-registry-zookeeper/src/test/java/com/weibo/api/motan/registry/zookeeper/ZookeeperRegistryTest.java
Patch:
@@ -29,7 +29,7 @@ public static void setUp() throws Exception {
         int port = Integer.parseInt(properties.getProperty("clientPort"));
         in.close();
 
-        URL zkUrl = new URL("zookeeper", "127.0.0.1", port, "com.weibo.api.motan.registry.RegistryService");
+        URL zkUrl = new URL(MotanConstants.REGISTRY_PROTOCOL_ZOOKEEPER, "127.0.0.1", port, "com.weibo.api.motan.registry.RegistryService");
         clientUrl = new URL(MotanConstants.PROTOCOL_MOTAN, "127.0.0.1", 0, service);
         clientUrl.addParameter("group", "aaa");
 

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyClient.java
Patch:
@@ -160,7 +160,6 @@ private Response request(Request request, boolean async) throws TransportExcepti
             // return channel to pool
             returnObject(channel);
         } catch (Exception e) {
-            LoggerUtil.error("NettyClient request Error: url=" + url.getUri() + " " + MotanFrameworkUtil.toString(request) + ", " + e.getMessage());
             //TODO 对特定的异常回收channel
             invalidateObject(channel);
             if (e instanceof MotanAbstractException) {

File: motan-core/src/main/java/com/weibo/api/motan/core/extension/ActivationComparator.java
Patch:
@@ -29,7 +29,7 @@
 public class ActivationComparator<T> implements Comparator<T> {
 
     /**
-     * sequence 大的排在后面,如果没有设置sequence的排到最前面
+     * sequence 大的排在后面,如果没有设置sequence的排到最后面
      */
     @Override
     public int compare(T o1, T o2) {

File: motan-core/src/main/java/com/weibo/api/motan/core/extension/ActivationComparator.java
Patch:
@@ -29,7 +29,7 @@
 public class ActivationComparator<T> implements Comparator<T> {
 
     /**
-     * sequence 大的排在后面,如果没有设置sequence的排到最前面
+     * sequence 大的排在后面,如果没有设置sequence的排到最后面
      */
     @Override
     public int compare(T o1, T o2) {

File: motan-core/src/main/java/com/weibo/api/motan/filter/AccessLogFilter.java
Patch:
@@ -144,7 +144,7 @@ private void logAccess(Caller<?> caller, Request request, Response response, lon
         }
         append(builder, requestId);
         append(builder, request.getAttachments().get(MotanConstants.CONTENT_LENGTH));
-        append(builder, response.getAttachments().get(MotanConstants.CONTENT_LENGTH));
+        append(builder, response == null ? "0" : response.getAttachments().get(MotanConstants.CONTENT_LENGTH));
         append(builder, segmentTime);
         append(builder, wholeTime);
 

File: motan-core/src/main/java/com/weibo/api/motan/filter/AccessLogFilter.java
Patch:
@@ -144,7 +144,7 @@ private void logAccess(Caller<?> caller, Request request, Response response, lon
         }
         append(builder, requestId);
         append(builder, request.getAttachments().get(MotanConstants.CONTENT_LENGTH));
-        append(builder, response.getAttachments().get(MotanConstants.CONTENT_LENGTH));
+        append(builder, response == null ? "0" : response.getAttachments().get(MotanConstants.CONTENT_LENGTH));
         append(builder, segmentTime);
         append(builder, wholeTime);
 

File: motan-core/src/main/java/com/weibo/api/motan/util/MeshProxyUtil.java
Patch:
@@ -43,7 +43,7 @@ public class MeshProxyUtil {
     private static final String MODE_SERVER = "server"; // 代理server侧流量
     private static final String MODE_CLIENT = "client"; // 代理client侧流量
     private static final String MODE_ALL = "all"; // 代理双端流量
-    private static final String DEFAULT_PORT = "9981"; // 默认mesh正向代理端口
+    private static final String DEFAULT_PORT = "0"; // 默认mesh正向代理端口.为0时，MeshRegistry会使用统一默认端口。
     private static final String DEFAULT_IP = "localhost"; // 默认mesh ip
 
     private static final String MESH_REGISTRY_NAME = "weibomesh";

File: motan-core/src/test/java/com/weibo/api/motan/util/MeshProxyUtilTest.java
Patch:
@@ -71,7 +71,7 @@ public void processMeshProxy() throws Exception {
         // check default port
         resultUrl = MeshProxyUtil.processMeshProxy(originRegistryUrls, serviceUrl, true);
         check(originRegistryUrls, resultUrl, true, null); // proxy server url
-        assertEquals(9981, resultUrl.get(0).getPort().intValue()); // default port
+        assertEquals(0, resultUrl.get(0).getPort().intValue()); // default port
 
         // check mode
         resultUrl = MeshProxyUtil.processMeshProxy(originRegistryUrls, serviceUrl, true);

File: motan-core/src/main/java/com/weibo/api/motan/transport/support/AbstractEndpointFactory.java
Patch:
@@ -85,6 +85,9 @@ public Server createServer(URL url, MessageHandler messageHandler) {
             if (!shareChannel) { // 独享一个端口
                 LoggerUtil.info(this.getClass().getSimpleName() + " create no_share_channel server: url={}", url);
 
+                if (url.getPort() == 0){ // create new url for random port，the origin url port will be replaced in exporter
+                    url = url.createCopy();
+                }
                 // 如果端口已经被使用了，使用该server bind 会有异常
                 return innerCreateServer(url, messageHandler);
             }

File: motan-core/src/main/java/com/weibo/api/motan/common/MotanConstants.java
Patch:
@@ -74,6 +74,7 @@ public class MotanConstants {
     public static final String APPLICATION_STATISTIC = "statisitic";
     public static final String REQUEST_REMOTE_ADDR = "requestRemoteAddress";
     public static final String CONTENT_LENGTH = "Content-Length";
+    public static final String DISABLE_FILTER_PREFIX = "-";
 
     /**
      * netty channel constants start

File: motan-core/src/main/java/com/weibo/api/motan/common/MotanConstants.java
Patch:
@@ -74,6 +74,7 @@ public class MotanConstants {
     public static final String APPLICATION_STATISTIC = "statisitic";
     public static final String REQUEST_REMOTE_ADDR = "requestRemoteAddress";
     public static final String CONTENT_LENGTH = "Content-Length";
+    public static final String DISABLE_FILTER_PREFIX = "-";
 
     /**
      * netty channel constants start

File: motan-core/src/main/java/com/weibo/api/motan/common/URLParamType.java
Patch:
@@ -74,7 +74,7 @@ public enum URLParamType {
      * multi referer share the same channel
      **/
     shareChannel("shareChannel", false),
-    asyncInitConnection("asyncInitConnection", false),
+    asyncInitConnection("asyncInitConnection", true),
     fusingThreshold("fusingThreshold", 10),
 
     /************************** SPI start ******************************/

File: motan-core/src/main/java/com/weibo/api/motan/transport/AbstractSharedPoolClient.java
Patch:
@@ -67,6 +67,7 @@ protected void initConnections(boolean async) {
                 @Override
                 public void run() {
                     createConnections();
+                    LoggerUtil.info("async initPool success!" + getUrl().getUri());
                 }
             });
         } else {

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyClientTest.java
Patch:
@@ -53,6 +53,7 @@ public void setUp() {
         parameters.put("requestTimeout", "500");
 
         url = new URL("netty", "localhost", 18080, interfaceName, parameters);
+        url.addParameter(URLParamType.asyncInitConnection.getName(), "false");
 
         request = new DefaultRequest();
         request.setRequestId(RequestIdGenerator.getRequestId());

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -32,6 +32,7 @@ public void setUp() {
         Map<String, String> parameters = new HashMap<>();
         parameters.put("requestTimeout", "500");
         url = new URL("netty", "localhost", 18080, interfaceName, parameters);
+        url.addParameter(URLParamType.asyncInitConnection.getName(), "false");
     }
 
     @After

File: motan-core/src/main/java/com/weibo/api/motan/common/URLParamType.java
Patch:
@@ -74,7 +74,7 @@ public enum URLParamType {
      * multi referer share the same channel
      **/
     shareChannel("shareChannel", false),
-    asyncInitConnection("asyncInitConnection", false),
+    asyncInitConnection("asyncInitConnection", true),
     fusingThreshold("fusingThreshold", 10),
 
     /************************** SPI start ******************************/

File: motan-core/src/main/java/com/weibo/api/motan/transport/AbstractSharedPoolClient.java
Patch:
@@ -67,6 +67,7 @@ protected void initConnections(boolean async) {
                 @Override
                 public void run() {
                     createConnections();
+                    LoggerUtil.info("async initPool success!" + getUrl().getUri());
                 }
             });
         } else {

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyClientTest.java
Patch:
@@ -53,6 +53,7 @@ public void setUp() {
         parameters.put("requestTimeout", "500");
 
         url = new URL("netty", "localhost", 18080, interfaceName, parameters);
+        url.addParameter(URLParamType.asyncInitConnection.getName(), "false");
 
         request = new DefaultRequest();
         request.setRequestId(RequestIdGenerator.getRequestId());

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -32,6 +32,7 @@ public void setUp() {
         Map<String, String> parameters = new HashMap<>();
         parameters.put("requestTimeout", "500");
         url = new URL("netty", "localhost", 18080, interfaceName, parameters);
+        url.addParameter(URLParamType.asyncInitConnection.getName(), "false");
     }
 
     @After

File: motan-core/src/main/java/com/weibo/api/motan/registry/support/command/CommandFailbackRegistry.java
Patch:
@@ -102,7 +102,7 @@ private CommandServiceManager getCommandServiceManager(URL urlCopy) {
     }
 
     // for UnitTest
-    ConcurrentHashMap<URL, CommandServiceManager> getCommandManagerMap() {
+    public ConcurrentHashMap<URL, CommandServiceManager> getCommandManagerMap() {
         return commandManagerMap;
     }
 

File: motan-core/src/main/java/com/weibo/api/motan/codec/AbstractCodec.java
Patch:
@@ -96,10 +96,10 @@ protected Serialization getSerializationByNum(int serializationNum) {
         String name = serializations.get(serializationNum);
         Serialization s = null;
         if (StringUtils.isNotBlank(name)) {
-            s = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name);
+            s = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name, false);
         }
         if (s == null) {
-            throw new MotanServiceException("can not found serialization by number " + serializationNum);
+            throw new MotanServiceException("can not found serialization by number " + serializationNum + ", name: " + name);
         }
         return s;
     }

File: motan-core/src/test/java/com/weibo/api/motan/config/RefererConfigTest.java
Patch:
@@ -109,7 +109,7 @@ public void testException() {
             ref = refererConfig.getRef();
             assertTrue(false);
         } catch (Exception e) {
-            assertTrue(e.getMessage().contains("Protocol is null"));
+            assertTrue(e.getMessage().contains("get extension fail"));
         }
         protocols.add(mockProtocolConfig("notExist"));
 

File: motan-core/src/test/java/com/weibo/api/motan/config/ServiceConfigTest.java
Patch:
@@ -90,7 +90,7 @@ public void testExportException() {
             serviceConfig.export();
             assertTrue(false);
         } catch (Exception e) {
-            assertTrue(e.getMessage().contains("Protocol is null"));
+            assertTrue(e.getMessage().contains("get extension fail"));
         }
 
         // service already exist

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyClient.java
Patch:
@@ -260,7 +260,8 @@ public String statisticCallback() {
             return null;
         }
 
-        return String.format("identity: %s available: %s concurrent_count: %s", url.getIdentity(), isAvailable(), callbackMap.size());
+        return String.format("type:MOTAN_CLUSTER_NODE_STAT, name:%s_%s, ip:%s, port:%s, available: %s, request_count: %s", url.getGroup(), url.getPath(),
+                url.getHost(), url.getPort(), isAvailable(), callbackMap.size());
     }
 
     public ResponseFuture removeCallback(long requestId) {

File: motan-core/src/main/java/com/weibo/api/motan/codec/AbstractCodec.java
Patch:
@@ -96,10 +96,10 @@ protected Serialization getSerializationByNum(int serializationNum) {
         String name = serializations.get(serializationNum);
         Serialization s = null;
         if (StringUtils.isNotBlank(name)) {
-            s = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name);
+            s = ExtensionLoader.getExtensionLoader(Serialization.class).getExtension(name, false);
         }
         if (s == null) {
-            throw new MotanServiceException("can not found serialization by number " + serializationNum);
+            throw new MotanServiceException("can not found serialization by number " + serializationNum + ", name: " + name);
         }
         return s;
     }

File: motan-core/src/test/java/com/weibo/api/motan/config/RefererConfigTest.java
Patch:
@@ -109,7 +109,7 @@ public void testException() {
             ref = refererConfig.getRef();
             assertTrue(false);
         } catch (Exception e) {
-            assertTrue(e.getMessage().contains("Protocol is null"));
+            assertTrue(e.getMessage().contains("get extension fail"));
         }
         protocols.add(mockProtocolConfig("notExist"));
 

File: motan-core/src/test/java/com/weibo/api/motan/config/ServiceConfigTest.java
Patch:
@@ -90,7 +90,7 @@ public void testExportException() {
             serviceConfig.export();
             assertTrue(false);
         } catch (Exception e) {
-            assertTrue(e.getMessage().contains("Protocol is null"));
+            assertTrue(e.getMessage().contains("get extension fail"));
         }
 
         // service already exist

File: motan-core/src/test/java/com/weibo/api/motan/filter/AccessLogFilterTest.java
Patch:
@@ -79,6 +79,7 @@ public void testCall() {
                 will(returnValue("param_desc"));
                 atLeast(1).of(request).getAttachments();
                 will(returnValue(attachments));
+                allowing(request).getRequestId();
             }
         });
 
@@ -120,6 +121,7 @@ public void testSwitcher() {
                 atLeast(1).of(request).getAttachments();
                 will(returnValue(attachments));
                 exactly(1).of(logService).accessLog(with(any(String.class)));
+                allowing(request).getRequestId();
             }
         });
 

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyClient.java
Patch:
@@ -260,7 +260,8 @@ public String statisticCallback() {
             return null;
         }
 
-        return String.format("identity: %s available: %s concurrent_count: %s", url.getIdentity(), isAvailable(), callbackMap.size());
+        return String.format("type:MOTAN_CLUSTER_NODE_STAT, name:%s_%s, ip:%s, port:%s, available: %s, request_count: %s", url.getGroup(), url.getPath(),
+                url.getHost(), url.getPort(), isAvailable(), callbackMap.size());
     }
 
     public ResponseFuture removeCallback(long requestId) {

File: motan-core/src/main/java/com/weibo/api/motan/config/ServiceConfig.java
Patch:
@@ -104,7 +104,7 @@ protected boolean serviceExists(URL url) {
 
     public synchronized void export() {
         if (exported.get()) {
-            LoggerUtil.warn(String.format("%s has already been expoted, so ignore the export request!", interfaceClass.getName()));
+            LoggerUtil.warn(String.format("%s has already been exported, so ignore the export request!", interfaceClass.getName()));
             return;
         }
 

File: motan-core/src/main/java/com/weibo/api/motan/core/StandardThreadExecutor.java
Patch:
@@ -104,6 +104,7 @@ public void execute(Runnable command) {
 		if (count > maxSubmittedTaskCount) {
 			submittedTasksCount.decrementAndGet();
 			getRejectedExecutionHandler().rejectedExecution(command, this);
+			return;
 		}
 
 		try {

File: motan-core/src/main/java/com/weibo/api/motan/exception/MotanErrorMsg.java
Patch:
@@ -21,7 +21,6 @@
 /**
  * @author maijunsheng
  * @version 创建时间：2013-5-30
- * 
  */
 public class MotanErrorMsg implements Serializable {
     private static final long serialVersionUID = 4909459500370103048L;
@@ -30,6 +29,9 @@ public class MotanErrorMsg implements Serializable {
     private int errorcode;
     private String message;
 
+    public MotanErrorMsg() {
+    }
+
     public MotanErrorMsg(int status, int errorcode, String message) {
         this.status = status;
         this.errorcode = errorcode;

File: motan-core/src/main/java/com/weibo/api/motan/core/StandardThreadExecutor.java
Patch:
@@ -104,6 +104,7 @@ public void execute(Runnable command) {
 		if (count > maxSubmittedTaskCount) {
 			submittedTasksCount.decrementAndGet();
 			getRejectedExecutionHandler().rejectedExecution(command, this);
+			return;
 		}
 
 		try {

File: motan-core/src/main/java/com/weibo/api/motan/exception/MotanErrorMsg.java
Patch:
@@ -21,7 +21,6 @@
 /**
  * @author maijunsheng
  * @version 创建时间：2013-5-30
- * 
  */
 public class MotanErrorMsg implements Serializable {
     private static final long serialVersionUID = 4909459500370103048L;
@@ -30,6 +29,9 @@ public class MotanErrorMsg implements Serializable {
     private int errorcode;
     private String message;
 
+    public MotanErrorMsg() {
+    }
+
     public MotanErrorMsg(int status, int errorcode, String message) {
         this.status = status;
         this.errorcode = errorcode;

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -94,7 +94,7 @@ public void run() {
 
     private void rejectMessage(ChannelHandlerContext ctx, NettyMessage msg) {
         if (msg.isRequest()) {
-            sendResponse(ctx, MotanFrameworkUtil.buildErrorResponse((Request) msg, new MotanServiceException("process thread pool is full, reject by server: " + ctx.channel().localAddress(), MotanErrorMsgConstant.SERVICE_REJECT, false)));
+            sendResponse(ctx, MotanFrameworkUtil.buildErrorResponse(msg.getRequestId(), msg.getVersion().getVersion(), new MotanServiceException("process thread pool is full, reject by server: " + ctx.channel().localAddress(), MotanErrorMsgConstant.SERVICE_REJECT, false)));
 
             LoggerUtil.error("process thread pool is full, reject, active={} poolSize={} corePoolSize={} maxPoolSize={} taskCount={} requestId={}",
                     threadPoolExecutor.getActiveCount(), threadPoolExecutor.getPoolSize(), threadPoolExecutor.getCorePoolSize(),

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -94,7 +94,7 @@ public void run() {
 
     private void rejectMessage(ChannelHandlerContext ctx, NettyMessage msg) {
         if (msg.isRequest()) {
-            sendResponse(ctx, MotanFrameworkUtil.buildErrorResponse((Request) msg, new MotanServiceException("process thread pool is full, reject by server: " + ctx.channel().localAddress(), MotanErrorMsgConstant.SERVICE_REJECT, false)));
+            sendResponse(ctx, MotanFrameworkUtil.buildErrorResponse(msg.getRequestId(), msg.getVersion().getVersion(), new MotanServiceException("process thread pool is full, reject by server: " + ctx.channel().localAddress(), MotanErrorMsgConstant.SERVICE_REJECT, false)));
 
             LoggerUtil.error("process thread pool is full, reject, active={} poolSize={} corePoolSize={} maxPoolSize={} taskCount={} requestId={}",
                     threadPoolExecutor.getActiveCount(), threadPoolExecutor.getPoolSize(), threadPoolExecutor.getCorePoolSize(),

File: motan-extension/protocol-extension/motan-protocol-yar/src/main/java/com/weibo/api/motan/protocol/yar/YarMessageRouter.java
Patch:
@@ -13,8 +13,6 @@
  */
 package com.weibo.api.motan.protocol.yar;
 
-import java.util.concurrent.ConcurrentHashMap;
-
 import com.weibo.api.motan.exception.MotanFrameworkException;
 import com.weibo.api.motan.exception.MotanServiceException;
 import com.weibo.api.motan.rpc.Provider;
@@ -25,6 +23,8 @@
 import com.weibo.api.motan.transport.ProviderMessageRouter;
 import com.weibo.yar.YarRequest;
 import com.weibo.yar.YarResponse;
+
+import java.util.concurrent.ConcurrentHashMap;
 /**
  * 
  * @Description yar message router
@@ -54,7 +54,7 @@ public Object handle(Channel channel, Object message) {
         }
         Class<?> clazz = provider.getInterface();
         Request request = YarProtocolUtil.convert(yarRequest, clazz);
-        Response response = super.call(request, provider);
+        Response response = call(request, provider);
         YarResponse yarResponse = YarProtocolUtil.convert(response, packagerName);
         return yarResponse;
     }

File: motan-core/src/main/java/com/weibo/api/motan/protocol/rpc/CompressRpcCodec.java
Patch:
@@ -503,7 +503,7 @@ private Object decodeRequest(byte[] body, long requestId, String remoteIp, Seria
             String sign = input.readUTF();
             MethodInfo mInfo = SIGN_METHOD_MAP.get(sign);
             if (mInfo == null) {
-                throw new MotanFrameworkException("decode error: invalid method sign: " + sign,
+                throw new MotanFrameworkException("decode error: invalid method sign: " + sign + ", serverIp: " + NetUtils.getLocalAddress().getHostAddress(),
                         MotanErrorMsgConstant.FRAMEWORK_DECODE_ERROR);
             }
             interfaceName = mInfo.getInterfaceName();

File: motan-core/src/main/java/com/weibo/api/motan/protocol/rpc/CompressRpcCodec.java
Patch:
@@ -503,7 +503,7 @@ private Object decodeRequest(byte[] body, long requestId, String remoteIp, Seria
             String sign = input.readUTF();
             MethodInfo mInfo = SIGN_METHOD_MAP.get(sign);
             if (mInfo == null) {
-                throw new MotanFrameworkException("decode error: invalid method sign: " + sign,
+                throw new MotanFrameworkException("decode error: invalid method sign: " + sign + ", serverIp: " + NetUtils.getLocalAddress().getHostAddress(),
                         MotanErrorMsgConstant.FRAMEWORK_DECODE_ERROR);
             }
             interfaceName = mInfo.getInterfaceName();

File: motan-core/src/main/java/com/weibo/api/motan/common/URLParamType.java
Patch:
@@ -50,7 +50,7 @@ public enum URLParamType {
      * pool max conn number
      **/
     maxClientConnection("maxClientConnection", 10),
-    clientConnectionCount("clientConnectionCount", 0),
+    maxConnectionPerGroup("maxConnectionPerGroup", 0),
     /**
      * pool max conn number
      **/

File: motan-core/src/test/java/com/weibo/api/motan/cluster/SelectUrlsTest.java
Patch:
@@ -39,7 +39,7 @@ public class SelectUrlsTest {
     private static List<URL> mockRegistryUrls() {
         URL refUrl = new URL(MotanConstants.PROTOCOL_MOTAN, NetUtils.getLocalAddress().getHostAddress(), 0, IHello.class.getName());
         refUrl.addParameter(URLParamType.check.getName(), "false");
-        refUrl.addParameter(URLParamType.clientConnectionCount.getName(), String.valueOf(count * URLParamType.maxClientConnection.getIntValue()));
+        refUrl.addParameter(URLParamType.maxConnectionPerGroup.getName(), String.valueOf(count * URLParamType.maxClientConnection.getIntValue()));
 
         URL url1 = new URL("reg_1", "192.168.1.1", 18081, RegistryService.class.getName());
         url1.addParameter(URLParamType.embed.getName(), StringTools.urlEncode(refUrl.toFullStr()));

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/client/ConsulEcwidClient.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 
 public class ConsulEcwidClient extends MotanConsulClient {
-    public static ConsulClient client;
+    protected ConsulClient client;
 
     public ConsulEcwidClient(String host, int port) {
         super(host, port);

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/client/ConsulEcwidClient.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.List;
 
 public class ConsulEcwidClient extends MotanConsulClient {
-    public static ConsulClient client;
+    protected ConsulClient client;
 
     public ConsulEcwidClient(String host, int port) {
         super(host, port);

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyDecoder.java
Patch:
@@ -38,7 +38,7 @@ protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) t
         in.markReaderIndex();
         short type = in.readShort();
         if (type != MotanConstants.NETTY_MAGIC_TYPE) {
-            in.resetReaderIndex();
+            in.skipBytes(in.readableBytes());
             throw new MotanFrameworkException("NettyDecoder transport header not support, type: " + type);
         }
         in.skipBytes(1);

File: motan-core/src/main/java/com/weibo/api/motan/protocol/v2motan/MotanV2Codec.java
Patch:
@@ -241,7 +241,9 @@ public Object decode(Channel channel, String remoteIp, byte[] data) throws IOExc
         }
         if (header.isRequest()) {
             if (header.isHeartbeat()) {
-                return DefaultRpcHeartbeatFactory.getDefaultHeartbeatRequest(header.getRequestId());
+                Request request = DefaultRpcHeartbeatFactory.getDefaultHeartbeatRequest(header.getRequestId());
+                request.setRpcProtocolVersion(RpcProtocolVersion.VERSION_2.getVersion());
+                return request;
             } else {
                 DefaultRequest request = new DefaultRequest();
                 request.setRequestId(header.getRequestId());

File: motan-core/src/main/java/com/weibo/api/motan/transport/ProviderMessageRouter.java
Patch:
@@ -111,7 +111,7 @@ private void processLazyDeserialize(Request request, Method method) {
                 Object[] args = ((DeserializableObject) request.getArguments()[0]).deserializeMulti(method.getParameterTypes());
                 ((DefaultRequest) request).setArguments(args);
             } catch (IOException e) {
-                throw new MotanFrameworkException("deserialize parameters fail: " + request.toString());
+                throw new MotanFrameworkException("deserialize parameters fail: " + request.toString() + ", error:" + e.getMessage());
             }
         }
     }

File: motan-core/src/main/java/com/weibo/api/motan/transport/support/DefaultRpcHeartbeatFactory.java
Patch:
@@ -96,7 +96,9 @@ public HeartMessageHandleWrapper(MessageHandler messageHandler) {
         @Override
         public Object handle(Channel channel, Object message) {
             if (isHeartbeatRequest(message)) {
-                return getDefaultHeartbeatResponse(((Request)message).getRequestId());
+                Response response = getDefaultHeartbeatResponse(((Request)message).getRequestId());
+                response.setRpcProtocolVersion(((Request) message).getRpcProtocolVersion());
+                return response;
             }
             return messageHandler.handle(channel, message);
         }

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyChannelHandler.java
Patch:
@@ -140,6 +140,7 @@ private void processRequest(final ChannelHandlerContext ctx, final Request reque
 
         if (!(result instanceof DefaultResponse)) {
             response = new DefaultResponse(result);
+            response.setRpcProtocolVersion(request.getRpcProtocolVersion());
         } else {
             response = (DefaultResponse) result;
         }

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyDecoder.java
Patch:
@@ -163,7 +163,7 @@ private void checkMaxContext(int dataLength, ChannelHandlerContext ctx, Channel
                     dataLength, maxContentLength, ctx.getChannel().getRemoteAddress(), ctx.getChannel().getLocalAddress());
             Exception e = new MotanServiceException("NettyDecoder transport data content length over of limit, size: " + dataLength + " > " + maxContentLength);
             if (isRequest) {
-                Response response = MotanFrameworkUtil.buildExceptionResponse(requestId, version, e);
+                Response response = MotanFrameworkUtil.buildErrorResponse(requestId, version.getVersion(), e);
                 channel.write(response);
                 throw e;
             } else {
@@ -179,11 +179,11 @@ private Object decode(byte[] data, Channel channel, boolean isRequest, long requ
         } catch (Exception e) {
             LoggerUtil.error("NettyDecoder decode fail! requestid=" + requestId + ", size:" + data.length + ", ip:" + remoteIp + ", e:" + e.getMessage());
             if (isRequest) {
-                Response response = MotanFrameworkUtil.buildExceptionResponse(requestId, version, e);
+                Response response = MotanFrameworkUtil.buildErrorResponse(requestId, version.getVersion(), e);
                 channel.write(response);
                 return null;
             } else {
-                return MotanFrameworkUtil.buildExceptionResponse(requestId, version, e);
+                return MotanFrameworkUtil.buildErrorResponse(requestId, version.getVersion(), e);
             }
         }
     }

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -109,7 +109,7 @@ private void processMessage(ChannelHandlerContext ctx, NettyMessage msg) {
             result = codec.decode(channel, remoteIp, msg.getData());
         } catch (Exception e) {
             LoggerUtil.error("NettyDecoder decode fail! requestid" + msg.getRequestId() + ", size:" + msg.getData().length + ", ip:" + remoteIp + ", e:" + e.getMessage());
-            Response response = MotanFrameworkUtil.buildExceptionResponse(msg.getRequestId(), msg.getVersion(), e);
+            Response response = MotanFrameworkUtil.buildErrorResponse(msg.getRequestId(), msg.getVersion().getVersion(), e);
             if (msg.isRequest()) {
                 sendResponse(ctx, response);
             } else {
@@ -147,6 +147,7 @@ private void processRequest(final ChannelHandlerContext ctx, final Request reque
             DefaultResponse response;
             if (result instanceof DefaultResponse) {
                 response = (DefaultResponse) result;
+                response.setRpcProtocolVersion(request.getRpcProtocolVersion());
             } else {
                 response = new DefaultResponse(result);
             }

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyDecoder.java
Patch:
@@ -125,7 +125,7 @@ private void checkMaxContext(int dataLength, ChannelHandlerContext ctx, boolean
                     dataLength, maxContentLength, ctx.channel().remoteAddress(), ctx.channel().localAddress());
             Exception e = new MotanServiceException("NettyDecoder transport data content length over of limit, size: " + dataLength + " > " + maxContentLength);
             if (isRequest) {
-                Response response = MotanFrameworkUtil.buildExceptionResponse(requestId, version, e);
+                Response response = MotanFrameworkUtil.buildErrorResponse(requestId, version.getVersion(), e);
                 byte[] msg = CodecUtil.encodeObjectToBytes(channel, codec, response);
                 ctx.channel().writeAndFlush(msg);
                 throw e;

File: motan-core/src/main/java/com/weibo/api/motan/registry/support/AbstractRegistry.java
Patch:
@@ -210,9 +210,7 @@ protected void notify(URL refUrl, NotifyListener listener, List<URL> urls) {
         }
 
         // refresh local urls cache
-        for (String nodeType : nodeTypeUrlsInRs.keySet()) {
-            curls.put(nodeType, nodeTypeUrlsInRs.get(nodeType));
-        }
+        curls.putAll(nodeTypeUrlsInRs);
 
         for (List<URL> us : nodeTypeUrlsInRs.values()) {
             listener.notify(getUrl(), us);

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyChannel.java
Patch:
@@ -180,8 +180,7 @@ public synchronized void close(int timeout) {
 				channel.close();
 			}
 		} catch (Exception e) {
-			LoggerUtil
-					.error("NettyChannel close Error: " + nettyClient.getUrl().getUri() + " local=" + localAddress, e);
+			LoggerUtil.error("NettyChannel close Error: " + nettyClient.getUrl().getUri() + " local=" + localAddress, e);
 		}
 	}
 
@@ -202,7 +201,7 @@ public boolean isClosed() {
 
 	@Override
 	public boolean isAvailable() {
-		return state.isAliveState();
+		return state.isAliveState() && channel != null && channel.isConnected();
 	}
 
 	@Override

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -100,7 +100,6 @@ public Object handle(Channel channel, Object message) {
 
         Assert.assertTrue(StatsUtil.getStatisticCallbacks().size() >= minClientConnection + 1);
         nettyServer.close();
-        Thread.sleep(100);
         Assert.assertEquals(0, StatsUtil.getStatisticCallbacks().size());
     }
 

File: motan-core/src/main/java/com/weibo/api/motan/common/MotanConstants.java
Patch:
@@ -71,6 +71,7 @@ public class MotanConstants {
     public static final String ASYNC_SUFFIX = "Async";// suffix for async call.
     public static final String APPLICATION_STATISTIC = "statisitic";
     public static final String REQUEST_REMOTE_ADDR = "requestRemoteAddress";
+    public static final String CONTENT_LENGTH = "Content-Length";
 
     /**
      * netty channel constants start

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -1,6 +1,7 @@
 package com.weibo.api.motan.transport.netty4;
 
 import com.weibo.api.motan.codec.Codec;
+import com.weibo.api.motan.common.MotanConstants;
 import com.weibo.api.motan.common.URLParamType;
 import com.weibo.api.motan.core.extension.ExtensionLoader;
 import com.weibo.api.motan.exception.MotanErrorMsgConstant;
@@ -181,6 +182,7 @@ public void operationComplete(ChannelFuture future) throws Exception {
 
     private ChannelFuture sendResponse(ChannelHandlerContext ctx, Response response) {
         byte[] msg = CodecUtil.encodeObjectToBytes(channel, codec, response);
+        response.setAttachment(MotanConstants.CONTENT_LENGTH, String.valueOf(msg.length));
         if (ctx.channel().isActive()) {
             return ctx.channel().writeAndFlush(msg);
         }

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -65,7 +65,7 @@ public Object handle(Channel channel, Object message) {
         NettyClient nettyClient2 = new NettyClient(url);
         nettyClient2.open();
         Thread.sleep(100);
-        Assert.assertEquals(maxServerConnection, nettyServer.channelManage.getChannels().size());
+        Assert.assertTrue(nettyServer.channelManage.getChannels().size() < minClientConnection * 2);
 
         nettyClient.close();
         nettyClient2.close();
@@ -98,7 +98,7 @@ public Object handle(Channel channel, Object message) {
         Thread.sleep(100);
         nettyClient.close();
 
-        Assert.assertEquals(minClientConnection + 1, StatsUtil.getStatisticCallbacks().size());
+        Assert.assertTrue(StatsUtil.getStatisticCallbacks().size() >= minClientConnection + 1);
         nettyServer.close();
         Thread.sleep(100);
         Assert.assertEquals(0, StatsUtil.getStatisticCallbacks().size());

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -65,7 +65,7 @@ public Object handle(Channel channel, Object message) {
         NettyClient nettyClient2 = new NettyClient(url);
         nettyClient2.open();
         Thread.sleep(100);
-        Assert.assertEquals(maxServerConnection, nettyServer.channelManage.getChannels().size());
+        Assert.assertTrue(nettyServer.channelManage.getChannels().size() < minClientConnection * 2);
 
         nettyClient.close();
         nettyClient2.close();
@@ -98,7 +98,7 @@ public Object handle(Channel channel, Object message) {
         Thread.sleep(100);
         nettyClient.close();
 
-        Assert.assertEquals(minClientConnection + 1, StatsUtil.getStatisticCallbacks().size());
+        Assert.assertTrue(StatsUtil.getStatisticCallbacks().size() >= minClientConnection + 1);
         nettyServer.close();
         Thread.sleep(100);
         Assert.assertEquals(0, StatsUtil.getStatisticCallbacks().size());

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -76,7 +76,7 @@ public Object handle(Channel channel, Object message) {
     @Test
     public void testCallbacks() throws InterruptedException {
         int minClientConnection = 2;
-        int maxServerConnection = 10;
+        int maxServerConnection = 2;
         url.addParameter(URLParamType.minClientConnection.getName(), String.valueOf(minClientConnection));
         url.addParameter(URLParamType.maxServerConnection.getName(), String.valueOf(maxServerConnection));
         url.addParameter(URLParamType.requestTimeout.getName(), "10000");

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyServerTest.java
Patch:
@@ -76,7 +76,7 @@ public Object handle(Channel channel, Object message) {
     @Test
     public void testCallbacks() throws InterruptedException {
         int minClientConnection = 2;
-        int maxServerConnection = 10;
+        int maxServerConnection = 2;
         url.addParameter(URLParamType.minClientConnection.getName(), String.valueOf(minClientConnection));
         url.addParameter(URLParamType.maxServerConnection.getName(), String.valueOf(maxServerConnection));
         url.addParameter(URLParamType.requestTimeout.getName(), "10000");

File: motan-core/src/main/java/com/weibo/api/motan/transport/AbstractSharedPoolClient.java
Patch:
@@ -84,7 +84,7 @@ private void createConnections() {
     }
 
     protected Channel getChannel() throws MotanServiceException {
-        int index = MathUtil.getNonNegative(idx.getAndIncrement());
+        int index = MathUtil.getNonNegativeRange24bit(idx.getAndIncrement());
         Channel channel;
 
         for (int i = index; i < connections + index; i++) {

File: motan-core/src/main/java/com/weibo/api/motan/transport/AbstractSharedPoolClient.java
Patch:
@@ -84,7 +84,7 @@ private void createConnections() {
     }
 
     protected Channel getChannel() throws MotanServiceException {
-        int index = MathUtil.getNonNegative(idx.getAndIncrement());
+        int index = MathUtil.getNonNegativeRange24bit(idx.getAndIncrement());
         Channel channel;
 
         for (int i = index; i < connections + index; i++) {

File: motan-core/src/main/java/com/weibo/api/motan/serialize/FastJsonSerialization.java
Patch:
@@ -46,7 +46,7 @@ public byte[] serialize(Object data) throws IOException {
         serializer.config(SerializerFeature.WriteEnumUsingToString, true);
         serializer.config(SerializerFeature.WriteClassName, true);
         serializer.write(data);
-        return out.toBytes(null);
+        return out.toBytes("UTF-8");
     }
 
     @Override

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulConstants.java
Patch:
@@ -68,7 +68,7 @@ public class ConsulConstants {
 	/**
 	 * consul block 查询时 block的最长时间,单位，分钟
 	 */
-	public static int CONSUL_BLOCK_TIME_MINUTES = 10;
+	public static int CONSUL_BLOCK_TIME_MINUTES = 9;
 	
 	/**
 	 * consul block 查询时 block的最长时间,单位，秒

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulConstants.java
Patch:
@@ -68,7 +68,7 @@ public class ConsulConstants {
 	/**
 	 * consul block 查询时 block的最长时间,单位，分钟
 	 */
-	public static int CONSUL_BLOCK_TIME_MINUTES = 10;
+	public static int CONSUL_BLOCK_TIME_MINUTES = 9;
 	
 	/**
 	 * consul block 查询时 block的最长时间,单位，秒

File: motan-demo/motan-demo-api/src/main/java/com/weibo/motan/demo/service/MotanDemoService.java
Patch:
@@ -21,8 +21,8 @@
 
 @MotanAsync
 public interface MotanDemoService {
-	String hello(String name);
+    String hello(String name);
 
-	User rename(User user, String name);
+    User rename(User user, String name) throws Exception;
 
 }

File: motan-demo/motan-demo-api/src/main/java/com/weibo/motan/demo/service/MotanDemoService.java
Patch:
@@ -23,6 +23,6 @@
 public interface MotanDemoService {
     String hello(String name);
 
-    User rename(User user, String name) throws NullPointerException;
+    User rename(User user, String name) throws Exception;
 
 }

File: motan-demo/motan-demo-server/src/main/java/com/weibo/motan/demo/server/MotanDemoServiceImpl.java
Patch:
@@ -32,7 +32,7 @@ public String hello(String name) {
     }
 
     @Override
-    public User rename(User user, String name) {
+    public User rename(User user, String name) throws Exception {
         Objects.requireNonNull(user);
         System.out.println(user.getId() + " rename " + user.getName() + " to " + name);
         user.setName(name);

File: motan-demo/motan-demo-api/src/main/java/com/weibo/motan/demo/service/MotanDemoService.java
Patch:
@@ -21,8 +21,8 @@
 
 @MotanAsync
 public interface MotanDemoService {
-	String hello(String name);
+    String hello(String name);
 
-	User rename(User user, String name);
+    User rename(User user, String name) throws NullPointerException;
 
 }

File: motan-core/src/main/java/com/weibo/api/motan/transport/support/AbstractEndpointFactory.java
Patch:
@@ -95,7 +95,7 @@ public Server createServer(URL url, MessageHandler messageHandler) {
 
             if (server != null) {
                 // can't share service channel
-                if (!MotanFrameworkUtil.checkIfCanShallServiceChannel(server.getUrl(), url)) {
+                if (!MotanFrameworkUtil.checkIfCanShareServiceChannel(server.getUrl(), url)) {
                     throw new MotanFrameworkException(
                             "Service export Error: share channel but some config param is different, protocol or codec or serialize or maxContentLength or maxServerConnection or maxWorkerThread or heartbeatFactory, source="
                                     + server.getUrl() + " target=" + url, MotanErrorMsgConstant.FRAMEWORK_EXPORT_ERROR);

File: motan-core/src/main/java/com/weibo/api/motan/util/MotanFrameworkUtil.java
Patch:
@@ -141,7 +141,7 @@ public static String getGroupMethodString(Request request){
      * @param target
      * @return
      */
-    public static boolean checkIfCanShallServiceChannel(URL source, URL target) {
+    public static boolean checkIfCanShareServiceChannel(URL source, URL target) {
         if (!StringUtils.equals(source.getProtocol(), target.getProtocol())) {
             return false;
         }

File: motan-core/src/main/java/com/weibo/api/motan/transport/support/AbstractEndpointFactory.java
Patch:
@@ -95,7 +95,7 @@ public Server createServer(URL url, MessageHandler messageHandler) {
 
             if (server != null) {
                 // can't share service channel
-                if (!MotanFrameworkUtil.checkIfCanShallServiceChannel(server.getUrl(), url)) {
+                if (!MotanFrameworkUtil.checkIfCanShareServiceChannel(server.getUrl(), url)) {
                     throw new MotanFrameworkException(
                             "Service export Error: share channel but some config param is different, protocol or codec or serialize or maxContentLength or maxServerConnection or maxWorkerThread or heartbeatFactory, source="
                                     + server.getUrl() + " target=" + url, MotanErrorMsgConstant.FRAMEWORK_EXPORT_ERROR);

File: motan-core/src/main/java/com/weibo/api/motan/util/MotanFrameworkUtil.java
Patch:
@@ -141,7 +141,7 @@ public static String getGroupMethodString(Request request){
      * @param target
      * @return
      */
-    public static boolean checkIfCanShallServiceChannel(URL source, URL target) {
+    public static boolean checkIfCanShareServiceChannel(URL source, URL target) {
         if (!StringUtils.equals(source.getProtocol(), target.getProtocol())) {
             return false;
         }

File: motan-core/src/main/java/com/weibo/api/motan/proxy/RefererCommonHandler.java
Patch:
@@ -3,7 +3,6 @@
 import com.weibo.api.motan.cluster.Cluster;
 import com.weibo.api.motan.rpc.DefaultRequest;
 import com.weibo.api.motan.rpc.Request;
-import com.weibo.api.motan.util.ReflectUtil;
 import com.weibo.api.motan.util.RequestIdGenerator;
 
 import java.util.List;
@@ -27,7 +26,6 @@ public Object call(String methodName, Object[] arguments, Class returnType, Map<
         request.setMethodName(methodName);
         request.setArguments(arguments);
         request.setAttachments(attachments);
-        request.setParamtersDesc(ReflectUtil.getParamsDesc(arguments));
         return invokeRequest(request, returnType, async);
     }
 
@@ -58,7 +56,6 @@ public Request buildRequest(String methodName, Object[] arguments) {
         request.setInterfaceName(interfaceName);
         request.setMethodName(methodName);
         request.setArguments(arguments);
-        request.setParamtersDesc(ReflectUtil.getParamsDesc(arguments));
         return request;
     }
 

File: motan-core/src/main/java/com/weibo/api/motan/proxy/RefererCommonHandler.java
Patch:
@@ -3,7 +3,6 @@
 import com.weibo.api.motan.cluster.Cluster;
 import com.weibo.api.motan.rpc.DefaultRequest;
 import com.weibo.api.motan.rpc.Request;
-import com.weibo.api.motan.util.ReflectUtil;
 import com.weibo.api.motan.util.RequestIdGenerator;
 
 import java.util.List;
@@ -27,7 +26,6 @@ public Object call(String methodName, Object[] arguments, Class returnType, Map<
         request.setMethodName(methodName);
         request.setArguments(arguments);
         request.setAttachments(attachments);
-        request.setParamtersDesc(ReflectUtil.getParamsDesc(arguments));
         return invokeRequest(request, returnType, async);
     }
 
@@ -58,7 +56,6 @@ public Request buildRequest(String methodName, Object[] arguments) {
         request.setInterfaceName(interfaceName);
         request.setMethodName(methodName);
         request.setArguments(arguments);
-        request.setParamtersDesc(ReflectUtil.getParamsDesc(arguments));
         return request;
     }
 

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyClient.java
Patch:
@@ -222,6 +222,8 @@ public synchronized void close(int timeout) {
             callbackMap.clear();
             // 设置close状态
             state = ChannelState.CLOSE;
+            // 关闭client持有的channel
+            closeAllChannels();
             // 解除统计回调的注册
             StatsUtil.unRegistryStatisticCallback(this);
             LoggerUtil.info("NettyClient close Success: url={}", url.getUri());

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyClient.java
Patch:
@@ -222,6 +222,8 @@ public synchronized void close(int timeout) {
             callbackMap.clear();
             // 设置close状态
             state = ChannelState.CLOSE;
+            // 关闭client持有的channel
+            closeAllChannels();
             // 解除统计回调的注册
             StatsUtil.unRegistryStatisticCallback(this);
             LoggerUtil.info("NettyClient close Success: url={}", url.getUri());

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulRegistry.java
Patch:
@@ -212,13 +212,13 @@ protected String discoverCommand(URL url) {
     }
 
     private ConcurrentHashMap<String, List<URL>> lookupServiceUpdate(String group) {
+        ConcurrentHashMap<String, List<URL>> groupUrls = new ConcurrentHashMap<String, List<URL>>();
         Long lastConsulIndexId = lookupGroupServices.get(group) == null ? 0 : lookupGroupServices.get(group);
         ConsulResponse<List<ConsulService>> response = lookupConsulService(group, lastConsulIndexId);
         if (response != null) {
             List<ConsulService> services = response.getValue();
             if (services != null && !services.isEmpty()
                     && response.getConsulIndex() > lastConsulIndexId) {
-                ConcurrentHashMap<String, List<URL>> groupUrls = new ConcurrentHashMap<String, List<URL>>();
                 for (ConsulService service : services) {
                     try {
                         URL url = ConsulUtils.buildUrl(service);
@@ -239,7 +239,7 @@ private ConcurrentHashMap<String, List<URL>> lookupServiceUpdate(String group) {
                 LoggerUtil.info(group + " no need update, lastIndex:" + lastConsulIndexId);
             }
         }
-        return null;
+        return groupUrls;
     }
 
     private String lookupCommandUpdate(String group) {

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulRegistry.java
Patch:
@@ -212,13 +212,13 @@ protected String discoverCommand(URL url) {
     }
 
     private ConcurrentHashMap<String, List<URL>> lookupServiceUpdate(String group) {
+        ConcurrentHashMap<String, List<URL>> groupUrls = new ConcurrentHashMap<String, List<URL>>();
         Long lastConsulIndexId = lookupGroupServices.get(group) == null ? 0 : lookupGroupServices.get(group);
         ConsulResponse<List<ConsulService>> response = lookupConsulService(group, lastConsulIndexId);
         if (response != null) {
             List<ConsulService> services = response.getValue();
             if (services != null && !services.isEmpty()
                     && response.getConsulIndex() > lastConsulIndexId) {
-                ConcurrentHashMap<String, List<URL>> groupUrls = new ConcurrentHashMap<String, List<URL>>();
                 for (ConsulService service : services) {
                     try {
                         URL url = ConsulUtils.buildUrl(service);
@@ -239,7 +239,7 @@ private ConcurrentHashMap<String, List<URL>> lookupServiceUpdate(String group) {
                 LoggerUtil.info(group + " no need update, lastIndex:" + lastConsulIndexId);
             }
         }
-        return null;
+        return groupUrls;
     }
 
     private String lookupCommandUpdate(String group) {

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -93,7 +93,7 @@ private void rejectMessage(ChannelHandlerContext ctx, NettyMessage msg) {
         if (msg.isRequest()) {
             DefaultResponse response = new DefaultResponse();
             response.setRequestId(msg.getRequestId());
-            response.setException(new MotanServiceException("process thread pool is full, reject", MotanErrorMsgConstant.SERVICE_REJECT));
+            response.setException(new MotanServiceException("process thread pool is full, reject by server: " + ctx.channel().localAddress(), MotanErrorMsgConstant.SERVICE_REJECT));
             sendResponse(ctx, response);
 
             LoggerUtil.error("process thread pool is full, reject, active={} poolSize={} corePoolSize={} maxPoolSize={} taskCount={} requestId={}",

File: motan-core/src/main/java/com/weibo/api/motan/proxy/RefererInvocationHandler.java
Patch:
@@ -141,6 +141,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
                         } else {
                             responseFuture.onSuccess(response);
                         }
+                        responseFuture.setReturnType(returnType);
                         return responseFuture;
                     }
                 } else {

File: motan-core/src/main/java/com/weibo/api/motan/common/URLParamType.java
Patch:
@@ -50,6 +50,7 @@ public enum URLParamType {
     lazyInit("lazyInit", false),
     /** multi referer share the same channel **/
     shareChannel("shareChannel", false),
+    asyncInitConnection("asyncInitConnection", false),
 
     /************************** SPI start ******************************/
 

File: motan-core/src/main/java/com/weibo/api/motan/transport/AbstractSharedPoolClient.java
Patch:
@@ -41,9 +41,9 @@ public abstract class AbstractSharedPoolClient extends AbstractClient {
 
     public AbstractSharedPoolClient(URL url) {
         super(url);
-        connections = url.getIntParameter(URLParamType.maxClientConnection.getName(), URLParamType.maxClientConnection.getIntValue());
+        connections = url.getIntParameter(URLParamType.minClientConnection.getName(), URLParamType.minClientConnection.getIntValue());
         if (connections <= 0) {
-            connections = URLParamType.maxClientConnection.getIntValue();
+            connections = URLParamType.minClientConnection.getIntValue();
         }
     }
 
@@ -55,7 +55,7 @@ protected void initPool() {
             channels.add((Channel) factory.makeObject());
         }
 
-        initConnections(false);
+        initConnections(url.getBooleanParameter(URLParamType.asyncInitConnection.getName(), URLParamType.asyncInitConnection.getBooleanValue()));
     }
 
     protected abstract SharedObjectFactory createChannelFactory();

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyEndpointFactory.java
Patch:
@@ -10,7 +10,7 @@
 /**
  * @author sunnights
  */
-@SpiMeta(name = "netty4")
+@SpiMeta(name = "motan")
 public class NettyEndpointFactory extends AbstractEndpointFactory {
     @Override
     protected Server innerCreateServer(URL url, MessageHandler messageHandler) {

File: motan-transport-netty4/src/test/java/com/weibo/api/motan/transport/netty4/NettyClientTest.java
Patch:
@@ -143,7 +143,7 @@ public void testAbNormal() throws InterruptedException {
     @Test
     public void testAbNormal2() throws InterruptedException {
         // 模拟失败连接的次数大于或者等于设置的次数，client期望为不可用
-        url.addParameter(URLParamType.maxClientConnection.getName(), "1");
+        url.addParameter(URLParamType.minClientConnection.getName(), "1");
         url.addParameter(URLParamType.requestTimeout.getName(), "1");
         NettyTestClient nettyClient = new NettyTestClient(url);
         this.nettyClient = nettyClient;

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyChannelHandler.java
Patch:
@@ -94,7 +94,7 @@ public void run() {
             response.setRequestId(request.getRequestId());
             response.setException(new MotanServiceException("process thread pool is full, reject", MotanErrorMsgConstant.SERVICE_REJECT));
             response.setProcessTime(System.currentTimeMillis() - processStartTime);
-            ctx.channel().write(response);
+            ctx.channel().writeAndFlush(response);
             LoggerUtil.debug("process thread pool is full, reject, active={} poolSize={} corePoolSize={} maxPoolSize={} taskCount={} requestId={}",
                     threadPoolExecutor.getActiveCount(), threadPoolExecutor.getPoolSize(),
                     threadPoolExecutor.getCorePoolSize(), threadPoolExecutor.getMaximumPoolSize(),
@@ -132,7 +132,7 @@ public void channelInactive(ChannelHandlerContext ctx) throws Exception {
 
     @Override
     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
-        LoggerUtil.error("NettyChannelHandler exceptionCaught: remote={} local={} event={}", ctx.channel().remoteAddress(), ctx.channel().localAddress(), cause, cause);
+        LoggerUtil.error("NettyChannelHandler exceptionCaught: remote={} local={} event={}", ctx.channel().remoteAddress(), ctx.channel().localAddress(), cause.getMessage(), cause);
         ctx.fireExceptionCaught(cause);
     }
 }

File: motan-transport-netty4/src/main/java/com/weibo/api/motan/transport/netty4/NettyServer.java
Patch:
@@ -4,6 +4,7 @@
 import com.weibo.api.motan.common.MotanConstants;
 import com.weibo.api.motan.common.URLParamType;
 import com.weibo.api.motan.core.DefaultThreadFactory;
+import com.weibo.api.motan.core.StandardThreadExecutor;
 import com.weibo.api.motan.exception.MotanFrameworkException;
 import com.weibo.api.motan.rpc.Request;
 import com.weibo.api.motan.rpc.Response;

File: motan-core/src/main/java/com/weibo/api/motan/protocol/rpc/DefaultRpcProtocol.java
Patch:
@@ -24,8 +24,7 @@
 import com.weibo.api.motan.rpc.URL;
 import com.weibo.api.motan.transport.ProviderMessageRouter;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * @author maijunsheng
@@ -35,7 +34,7 @@
 public class DefaultRpcProtocol extends AbstractProtocol {
 
     // 多个service可能在相同端口进行服务暴露，因此来自同个端口的请求需要进行路由以找到相应的服务，同时不在该端口暴露的服务不应该被找到
-    private Map<String, ProviderMessageRouter> ipPort2RequestRouter = new HashMap<String, ProviderMessageRouter>();
+    private ConcurrentHashMap<String, ProviderMessageRouter> ipPort2RequestRouter = new ConcurrentHashMap<String, ProviderMessageRouter>();
 
     @Override
     protected <T> Exporter<T> createExporter(Provider<T> provider, URL url) {

File: motan-core/src/main/java/com/weibo/api/motan/protocol/v2motan/MotanV2Codec.java
Patch:
@@ -96,7 +96,9 @@ public byte[] encode(Channel channel, Object message) throws IOException {
                 putMap(buf, request.getAttachments());
 
                 header.setRequestId(request.getRequestId());
-                body = serialization.serializeMulti(request.getArguments());
+                if(request.getArguments() != null){
+                    body = serialization.serializeMulti(request.getArguments());
+                }
 
             } else if (message instanceof Response) {
                 Response response = (Response) message;

File: motan-core/src/main/java/com/weibo/api/motan/protocol/v2motan/MotanV2Protocol.java
Patch:
@@ -29,8 +29,7 @@
 import com.weibo.api.motan.transport.TransportException;
 import org.apache.commons.lang3.StringUtils;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import static com.weibo.api.motan.common.MotanConstants.M2_PROXY_PROTOCOL;
 
@@ -42,7 +41,7 @@
 public class MotanV2Protocol extends AbstractProtocol {
 
     public static final String DEFAULT_CODEC = "motan2";
-    private Map<String, ProviderMessageRouter> ipPort2RequestRouter = new HashMap<String, ProviderMessageRouter>();
+    private ConcurrentHashMap<String, ProviderMessageRouter> ipPort2RequestRouter = new ConcurrentHashMap<String, ProviderMessageRouter>();
 
     @Override
     protected <T> Exporter<T> createExporter(Provider<T> provider, URL url) {

File: motan-core/src/main/java/com/weibo/api/motan/serialize/SimpleSerialization.java
Patch:
@@ -80,14 +80,14 @@ public <T> T deserialize(byte[] bytes, Class<T> clz) throws IOException {
             case 0:
                 return null;
             case 1:
-                if (clz == String.class) {
+                if (clz == String.class || clz == Object.class) {
                     String str = getString(buffer);
                     return (T) str;
                 } else {
                     throw new MotanServiceException("SimpleSerialization not support type:" + clz);
                 }
             case 2:
-                if (clz == Map.class) {
+                if (clz == Map.class || clz == Object.class) {
                     Map<String, String> map = new HashMap<String, String>();
                     int size = buffer.getInt();
                     if (size > 0) {

File: motan-core/src/main/java/com/weibo/api/motan/transport/ProviderMessageRouter.java
Patch:
@@ -47,7 +47,7 @@
  * 
  */
 public class ProviderMessageRouter implements MessageHandler {
-    private Map<String, Provider<?>> providers = new HashMap<String, Provider<?>>();
+    protected Map<String, Provider<?>> providers = new HashMap<String, Provider<?>>();
 
     // 所有暴露出去的方法计数
     // 比如：messageRouter 里面涉及2个Service: ServiceA 有5个public method，ServiceB

File: motan-core/src/main/java/com/weibo/api/motan/util/ByteUtil.java
Patch:
@@ -156,7 +156,7 @@ public static byte[] gzip(byte[] data) throws IOException {
     public static byte[] unGzip(byte[] data) throws IOException {
         GZIPInputStream gzip = null;
         try {
-            new GZIPInputStream(new ByteArrayInputStream(data));
+            gzip = new GZIPInputStream(new ByteArrayInputStream(data));
             byte[] buf = new byte[2048];
             int size = -1;
             ByteArrayOutputStream bos = new ByteArrayOutputStream(data.length + 1024);

File: motan-core/src/main/java/com/weibo/api/motan/rpc/DefaultProvider.java
Patch:
@@ -77,7 +77,7 @@ public Response invoke(Request request) {
                 response.setException(new MotanServiceException("provider has encountered a fatal error!", t));
             }
             //对于Throwable,也记录日志
-            LoggerUtil.error("Exception caught when during method invocation. request:" + request.toString(), e);
+            LoggerUtil.error("Exception caught when during method invocation. request:" + request.toString(), t);
         }
         // 传递rpc版本和attachment信息方便不同rpc版本的codec使用。
         response.setRpcProtocolVersion(request.getRpcProtocolVersion());

File: motan-core/src/main/java/com/weibo/api/motan/rpc/DefaultProvider.java
Patch:
@@ -63,7 +63,8 @@ public Response invoke(Request request) {
             response.setValue(value);
         } catch (Exception e) {
             if (e.getCause() != null) {
-                LoggerUtil.error("Exception caught when method invoke: " + e.getCause());
+                //服务发生错误时，有机会显示stack trace
+                LoggerUtil.error("Exception caught when method invoke: " + e.getCause(), e);
                 response.setException(new MotanBizException("provider call process error", e.getCause()));
             } else {
                 response.setException(new MotanBizException("provider call process error", e));

File: motan-extension/protocol-extension/motan-protocol-restful/src/main/java/com/weibo/api/motan/protocol/restful/support/RestfulInjectorFactory.java
Patch:
@@ -69,9 +69,8 @@ public Object invoke(HttpRequest request, HttpResponse httpResponse, Object reso
 
         return resp.getValue();
       }catch(Exception e){
-        Throwable cause = e.getCause();
-        if(cause != null && cause instanceof RuntimeException){
-          throw (RuntimeException) cause;
+        if(e != null && e instanceof RuntimeException){
+          throw (RuntimeException) e;
         }
 
         throw new InternalServerErrorException("provider call process error:" + e.getMessage(), e);

File: motan-extension/protocol-extension/motan-protocol-restful/src/main/java/com/weibo/api/motan/protocol/restful/support/RpcExceptionMapper.java
Patch:
@@ -28,7 +28,7 @@ public class RpcExceptionMapper implements ExceptionMapper<Exception>{
   public Response toResponse(Exception exception){
     HttpRequest httpRequest = ResteasyProviderFactory.getContextData(HttpRequest.class);
     // 当为rpc调用时,序列化异常
-    if(httpRequest != null & !RestfulUtil.decodeAttachments(httpRequest.getMutableHeaders()).isEmpty()){
+    if(httpRequest != null & RestfulUtil.isRpcRequest(httpRequest.getMutableHeaders())){
       return RestfulUtil.serializeError(exception);
     }
 

File: motan-manager/src/main/java/com/weibo/MotanManagerApp.java
Patch:
@@ -25,7 +25,8 @@
  * @since 2017-06-29
  */
 @SpringBootApplication
-@ImportResource(locations = {"classpath:spring-mybatis.xml", "classpath:spring-security.xml"})
+//@ImportResource(locations = {"classpath:spring-mybatis.xml", "classpath:spring-security.xml"})
+@ImportResource(locations = {"classpath:spring-security.xml"})
 public class MotanManagerApp {
     public static void main(String[] args) {
         SpringApplication.run(MotanManagerApp.class, args);

File: motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/AnnotationBean.java
Patch:
@@ -202,7 +202,7 @@ public Object postProcessAfterInitialization(Object bean, String beanName) throw
                 serviceConfig.setBeanFactory(beanFactory);
 
                 if (service.basicService() != null && service.basicService().length() > 0) {
-                    serviceConfig.setBasicServiceConfig(beanFactory.getBean(service.basicService(), BasicServiceInterfaceConfig.class));
+                    serviceConfig.setBasicService(beanFactory.getBean(service.basicService(), BasicServiceInterfaceConfig.class));
                 }
 
                 if (service.export() != null && service.export().length() > 0) {

File: motan-springsupport/src/main/java/com/weibo/api/motan/config/springsupport/AnnotationBean.java
Patch:
@@ -202,7 +202,7 @@ public Object postProcessAfterInitialization(Object bean, String beanName) throw
                 serviceConfig.setBeanFactory(beanFactory);
 
                 if (service.basicService() != null && service.basicService().length() > 0) {
-                    serviceConfig.setBasicServiceConfig(beanFactory.getBean(service.basicService(), BasicServiceInterfaceConfig.class));
+                    serviceConfig.setBasicService(beanFactory.getBean(service.basicService(), BasicServiceInterfaceConfig.class));
                 }
 
                 if (service.export() != null && service.export().length() > 0) {

File: motan-core/src/main/java/com/weibo/api/motan/proxy/RefererInvocationHandler.java
Patch:
@@ -150,9 +150,7 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl
      * @return
      */
     public boolean isLocalMethod(Method method){
-        String methodName = method.getName();
-        if("toString".equals(methodName) || "equals".equals(methodName) 
-                || "hashCode".equals(methodName) ||"finalize".equals(methodName)){
+        if(method.getDeclaringClass().equals(Object.class)){
             try{
                 Method interfaceMethod = clz.getDeclaredMethod(method.getName(), method.getParameterTypes());
                 return false;

File: motan-core/src/main/java/com/weibo/api/motan/util/ConcurrentHashSet.java
Patch:
@@ -21,14 +21,15 @@
 import java.util.Iterator;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
 public class ConcurrentHashSet<E> extends AbstractSet<E> implements Set<E>, java.io.Serializable {
 
     private static final long serialVersionUID = -8672117787651310382L;
 
     private static final Object PRESENT = new Object();
 
-    private final ConcurrentHashMap<E, Object> map;
+    private final ConcurrentMap<E, Object> map;
 
     public ConcurrentHashSet() {
         map = new ConcurrentHashMap<E, Object>();

File: motan-core/src/test/java/com/weibo/api/motan/cluster/loadbalance/ActiveWeightLoadBalanceTest.java
Patch:
@@ -70,7 +70,7 @@ private void allAvailableCluster(int refererSize) {
         if (refererSize <= ActiveWeightLoadBalance.MAX_REFERER_COUNT) {
             Assert.assertEquals(referer.activeRefererCount(), lowActive);
         } else {
-            Assert.assertTrue(refererSize - ActiveWeightLoadBalance.MAX_REFERER_COUNT >= referer.activeRefererCount());
+            Assert.assertTrue(refererSize - ActiveWeightLoadBalance.MAX_REFERER_COUNT - 1 >= referer.activeRefererCount());
         }
 
         List<Referer> referersHolder = new ArrayList<Referer>();
@@ -102,7 +102,7 @@ private void partOfUnAvailableCluster(int refererSize, int unAvailableSize) {
         if (availableSize <= ActiveWeightLoadBalance.MAX_REFERER_COUNT) {
             Assert.assertTrue(referer.activeRefererCount() - lowActive - unAvailableSize <= 0);
         } else {
-            Assert.assertTrue(refererSize - ActiveWeightLoadBalance.MAX_REFERER_COUNT + unAvailableSize >= referer.activeRefererCount());
+            Assert.assertTrue(refererSize - ActiveWeightLoadBalance.MAX_REFERER_COUNT + unAvailableSize -1 >= referer.activeRefererCount());
         }
 
         List<Referer> referersHolder = new ArrayList<Referer>();

File: motan-transport-netty/src/main/java/com/weibo/api/motan/transport/netty/NettyClient.java
Patch:
@@ -237,7 +237,7 @@ private void initClientBootstrap() {
 
 		// 实际上，极端情况下，connectTimeout会达到500ms，因为netty nio的实现中，是依赖BossThread来控制超时，
 		// 如果为了严格意义的timeout，那么需要应用端进行控制。
-		int timeout = getUrl().getIntParameter(URLParamType.requestTimeout.getName(), URLParamType.requestTimeout.getIntValue());
+		int timeout = getUrl().getIntParameter(URLParamType.connectTimeout.getName(), URLParamType.connectTimeout.getIntValue());
         if (timeout <= 0) {
             throw new MotanFrameworkException("NettyClient init Error: timeout(" + timeout + ") <= 0 is forbid.",
                     MotanErrorMsgConstant.FRAMEWORK_INIT_ERROR);

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/ActiveWeightLoadBalance.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Comparator;
 import java.util.List;
 import java.util.Random;
+import java.util.concurrent.ThreadLocalRandom;
 
 import com.weibo.api.motan.core.extension.SpiMeta;
 import com.weibo.api.motan.rpc.Referer;
@@ -43,14 +44,13 @@
  */
 @SpiMeta(name = "activeWeight")
 public class ActiveWeightLoadBalance<T> extends AbstractLoadBalance<T> {
-    private static Random random = new Random();
 
     @Override
     protected Referer<T> doSelect(Request request) {
         List<Referer<T>> referers = getReferers();
 
         int refererSize = referers.size();
-        int startIndex = random.nextInt(refererSize);
+        int startIndex = ThreadLocalRandom.current().nextInt(refererSize);
         int currentCursor = 0;
         int currentAvailableCursor = 0;
 
@@ -83,7 +83,7 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
         List<Referer<T>> referers = getReferers();
 
         int refererSize = referers.size();
-        int startIndex = random.nextInt(refererSize);
+        int startIndex = ThreadLocalRandom.current().nextInt(refererSize);
         int currentCursor = 0;
         int currentAvailableCursor = 0;
 

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/ConfigurableWeightLoadBalance.java
Patch:
@@ -21,6 +21,8 @@
 import com.weibo.api.motan.rpc.Request;
 import com.weibo.api.motan.util.CollectionUtil;
 import com.weibo.api.motan.util.LoggerUtil;
+import com.weibo.api.motan.util.MathUtil;
+
 import org.apache.commons.lang3.StringUtils;
 
 import java.util.*;
@@ -200,7 +202,7 @@ Referer<T> next() {
             String group = randomKeyList.get(ThreadLocalRandom.current().nextInt(randomKeySize));
             AtomicInteger ai = cursors.get(group);
             List<Referer<T>> referers = groupReferers.get(group);
-            return referers.get(ai.getAndIncrement() % referers.size());
+            return referers.get(MathUtil.getPositive(ai.getAndIncrement()) % referers.size());
         }
 
         // 求最大公约数

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/LocalFirstLoadBalance.java
Patch:
@@ -23,6 +23,7 @@
 import com.weibo.api.motan.util.NetUtils;
 
 import java.util.*;
+import java.util.concurrent.ThreadLocalRandom;
 
 /**
  * "本地服务优先" 负载均衡
@@ -42,7 +43,6 @@
 @SpiMeta(name = "localFirst")
 public class LocalFirstLoadBalance<T> extends AbstractLoadBalance<T> {
     public static final int MAX_REFERER_COUNT = 10;
-    private static Random random = new Random();
 
     public static long ipToLong(final String addr) {
         final String[] addressBytes = addr.split("\\.");
@@ -107,7 +107,7 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
         }
 
         int refererSize = referers.size();
-        int startIndex = random.nextInt(refererSize);
+        int startIndex = ThreadLocalRandom.current().nextInt(refererSize);
         int currentCursor = 0;
         int currentAvailableCursor = 0;
 

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/RandomLoadBalance.java
Patch:
@@ -17,6 +17,7 @@
 package com.weibo.api.motan.cluster.loadbalance;
 
 import java.util.List;
+import java.util.concurrent.ThreadLocalRandom;
 
 import com.weibo.api.motan.core.extension.SpiMeta;
 import com.weibo.api.motan.rpc.Referer;
@@ -36,7 +37,7 @@ public class RandomLoadBalance<T> extends AbstractLoadBalance<T> {
     protected Referer<T> doSelect(Request request) {
         List<Referer<T>> referers = getReferers();
 
-        int idx = (int) (Math.random() * referers.size());
+        int idx = (int) (ThreadLocalRandom.current().nextDouble() * referers.size());
         for (int i = 0; i < referers.size(); i++) {
             Referer<T> ref = referers.get((i + idx) % referers.size());
             if (ref.isAvailable()) {
@@ -50,7 +51,7 @@ protected Referer<T> doSelect(Request request) {
     protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder) {
         List<Referer<T>> referers = getReferers();
 
-        int idx = (int) (Math.random() * referers.size());
+        int idx = (int) (ThreadLocalRandom.current().nextDouble() * referers.size());
         for (int i = 0; i < referers.size(); i++) {
             Referer<T> referer = referers.get((i + idx) % referers.size());
             if (referer.isAvailable()) {

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/RoundRobinLoadBalance.java
Patch:
@@ -22,6 +22,7 @@
 import com.weibo.api.motan.core.extension.SpiMeta;
 import com.weibo.api.motan.rpc.Referer;
 import com.weibo.api.motan.rpc.Request;
+import com.weibo.api.motan.util.MathUtil;
 
 /**
  * 
@@ -65,6 +66,6 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
 
     // get positive int
     private int getNextPositive() {
-        return 0x7fffffff & idx.incrementAndGet();
+        return MathUtil.getPositive(idx.incrementAndGet());
     }
 }

File: motan-core/src/main/java/com/weibo/api/motan/filter/AccessStatisticFilter.java
Patch:
@@ -30,6 +30,8 @@
  */
 @SpiMeta(name = "statistic")
 public class AccessStatisticFilter implements Filter {
+    protected static Application RPC_SERVICES = new Application(ApplicationInfo.STATISTIC, "rpc_service");
+
     @Override
     public Response filter(Caller<?> caller, Request request) {
         long start = System.currentTimeMillis();
@@ -68,7 +70,7 @@ public Response filter(Caller<?> caller, Request request) {
             String statName =
                     caller.getUrl().getProtocol() + MotanConstants.PROTOCOL_SEPARATOR + MotanFrameworkUtil.getGroupMethodString(request);
             if (caller instanceof Provider) {
-                application = new Application(ApplicationInfo.STATISTIC, "rpc_service");
+                application = RPC_SERVICES;
                 StatsUtil.accessStatistic(statName, application, end, end - start, bizProcessTime, accessStatus);
             }
             application = ApplicationInfo.getApplication(caller.getUrl());

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/ConsistentHashLoadBalance.java
Patch:
@@ -83,9 +83,9 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
 
     private int getHash(Request request) {
         if (request.getArguments() == null || request.getArguments().length == 0) {
-            return request.hashCode();
+            return 0x7fffffff & request.hashCode();
         } else {
-            return Arrays.hashCode(request.getArguments());
+            return 0x7fffffff & Arrays.hashCode(request.getArguments());
         }
     }
 

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/AbstractLoadBalance.java
Patch:
@@ -34,6 +34,7 @@
  */
 
 public abstract class AbstractLoadBalance<T> implements LoadBalance<T> {
+    public static final int MAX_REFERER_COUNT = 10;
 
     private List<Referer<T>> referers;
 

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/ActiveWeightLoadBalance.java
Patch:
@@ -43,7 +43,6 @@
  */
 @SpiMeta(name = "activeWeight")
 public class ActiveWeightLoadBalance<T> extends AbstractLoadBalance<T> {
-    public static final int MAX_REFERER_COUNT = 10;
     private static Random random = new Random();
 
     @Override

File: motan-core/src/main/java/com/weibo/api/motan/registry/support/command/CommandServiceManager.java
Patch:
@@ -74,7 +74,7 @@ public void notifyService(URL serviceUrl, URL registryUrl, List<URL> urls) {
         }
 
         URL urlCopy = serviceUrl.createCopy();
-        String groupName = urlCopy.getParameter(URLParamType.group.getName());
+        String groupName = urlCopy.getParameter(URLParamType.group.getName(), URLParamType.group.getValue());
         groupServiceCache.put(groupName, urls);
 
         List<URL> finalResult = new ArrayList<URL>();
@@ -311,7 +311,7 @@ private List<URL> mergeResult(URL url, Map<String, Integer> weights) {
 
     private List<URL> discoverOneGroup(URL urlCopy) {
         LoggerUtil.info("CommandServiceManager discover one group. url:" + urlCopy.toSimpleString());
-        String group = urlCopy.getParameter(URLParamType.group.getName());
+        String group = urlCopy.getParameter(URLParamType.group.getName(), URLParamType.group.getValue());
         List<URL> list = groupServiceCache.get(group);
         if (list == null) {
             list = registry.discoverService(urlCopy);

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulRegistry.java
Patch:
@@ -23,7 +23,7 @@ public class ConsulRegistry extends CommandFailbackRegistry {
 
     // service local cache. key: group, value: <service interface name, url list>
     private ConcurrentHashMap<String, ConcurrentHashMap<String, List<URL>>> serviceCache = new ConcurrentHashMap<String, ConcurrentHashMap<String, List<URL>>>();
-    // command local cache. key: group, value: service interface name
+    // command local cache. key: group, value: command content
     private ConcurrentHashMap<String, String> commandCache = new ConcurrentHashMap<String, String>();
 
     // record lookup service thread, insure each group start only one thread, <group, lastConsulIndexId>

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulConstants.java
Patch:
@@ -9,7 +9,9 @@ public class ConsulConstants {
 	/**
 	 * motan协议在consul tag中的前缀
 	 */
-	public static final String CONSUL_TAG_MOTAN_PROTOCOL = "protocol";
+	public static final String CONSUL_TAG_MOTAN_PROTOCOL = "protocol_";
+
+	public static final String CONSUL_TAG_MOTAN_URL = "URL_";
 
 	/**
 	 * motan rpc 在consul中存储command的目录

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulRegistry.java
Patch:
@@ -340,7 +340,7 @@ public CommandLookupThread(String group) {
 
         @Override
         public void run() {
-            LoggerUtil.info("start group lookup thread. lookup interval: " + lookupInterval + "ms, group: " + group);
+            LoggerUtil.info("start command lookup thread. lookup interval: " + lookupInterval + "ms, group: " + group);
             while (true) {
                 try {
                     sleep(lookupInterval);

File: motan-core/src/main/java/com/weibo/api/motan/cluster/support/ClusterSupport.java
Patch:
@@ -305,7 +305,7 @@ private List<URL> parseDirectUrls(String directUrlStr) {
         String[] durlArr = MotanConstants.COMMA_SPLIT_PATTERN.split(directUrlStr);
         List<URL> directUrls = new ArrayList<URL>();
         for (String dus : durlArr) {
-            URL du = URL.valueOf(dus);
+            URL du = URL.valueOf(StringTools.urlDecode(dus));
             if (du != null) {
                 directUrls.add(du);
             }

File: motan-core/src/main/java/com/weibo/api/motan/config/RefererConfig.java
Patch:
@@ -157,7 +157,7 @@ private ClusterSupport<T> createClusterSupport(URL refUrl, ConfigHandler configH
                         durl.setHost(hostPort[0].trim());
                         durl.setPort(Integer.parseInt(hostPort[1].trim()));
                         durl.addParameter(URLParamType.nodeType.getName(), MotanConstants.NODE_TYPE_SERVICE);
-                        duBuf.append(StringTools.urlDecode(durl.toFullStr())).append(MotanConstants.COMMA_SEPARATOR);
+                        duBuf.append(StringTools.urlEncode(durl.toFullStr())).append(MotanConstants.COMMA_SEPARATOR);
                     }
                 }
                 if (duBuf.length() > 0) {

File: motan-core/src/main/java/com/weibo/api/motan/protocol/support/ProtocolFilterDecorator.java
Patch:
@@ -83,7 +83,8 @@ private <T> Referer<T> decorateWithFilter(Referer<T> referer, URL url) {
             lastRef = new Referer<T>() {
                 @Override
                 public Response call(Request request) {
-                    if (!f.getClass().getAnnotation(Activation.class).retry() && request.getRetries() != 0) {
+                    Activation activation = f.getClass().getAnnotation(Activation.class);
+                    if (activation != null && !activation.retry() && request.getRetries() != 0) {
                         return lf.call(request);
                     }
                     return f.filter(lf, request);

File: motan-core/src/main/java/com/weibo/api/motan/cluster/support/ClusterSupport.java
Patch:
@@ -305,7 +305,7 @@ private List<URL> parseDirectUrls(String directUrlStr) {
         String[] durlArr = MotanConstants.COMMA_SPLIT_PATTERN.split(directUrlStr);
         List<URL> directUrls = new ArrayList<URL>();
         for (String dus : durlArr) {
-            URL du = URL.valueOf(dus);
+            URL du = URL.valueOf(StringTools.urlDecode(dus));
             if (du != null) {
                 directUrls.add(du);
             }

File: motan-core/src/main/java/com/weibo/api/motan/config/RefererConfig.java
Patch:
@@ -157,7 +157,7 @@ private ClusterSupport<T> createClusterSupport(URL refUrl, ConfigHandler configH
                         durl.setHost(hostPort[0].trim());
                         durl.setPort(Integer.parseInt(hostPort[1].trim()));
                         durl.addParameter(URLParamType.nodeType.getName(), MotanConstants.NODE_TYPE_SERVICE);
-                        duBuf.append(StringTools.urlDecode(durl.toFullStr())).append(MotanConstants.COMMA_SEPARATOR);
+                        duBuf.append(StringTools.urlEncode(durl.toFullStr())).append(MotanConstants.COMMA_SEPARATOR);
                     }
                 }
                 if (duBuf.length() > 0) {

File: motan-core/src/main/java/com/weibo/api/motan/protocol/support/ProtocolFilterDecorator.java
Patch:
@@ -83,7 +83,8 @@ private <T> Referer<T> decorateWithFilter(Referer<T> referer, URL url) {
             lastRef = new Referer<T>() {
                 @Override
                 public Response call(Request request) {
-                    if (!f.getClass().getAnnotation(Activation.class).retry() && request.getRetries() != 0) {
+                    Activation activation = f.getClass().getAnnotation(Activation.class);
+                    if (activation != null && !activation.retry() && request.getRetries() != 0) {
                         return lf.call(request);
                     }
                     return f.filter(lf, request);

File: motan-registry-zookeeper/src/main/java/com/weibo/api/motan/registry/zookeeper/ZookeeperRegistryFactory.java
Patch:
@@ -37,7 +37,7 @@ public class ZookeeperRegistryFactory extends AbstractRegistryFactory {
     @Override
     protected Registry createRegistry(URL registryUrl) {
         try {
-            int timeout = registryUrl.getIntParameter(URLParamType.requestTimeout.getName(), URLParamType.requestTimeout.getIntValue());
+            int timeout = registryUrl.getIntParameter(URLParamType.connectTimeout.getName(), URLParamType.connectTimeout.getIntValue());
             int sessionTimeout =
                     registryUrl.getIntParameter(URLParamType.registrySessionTimeout.getName(),
                             URLParamType.registrySessionTimeout.getIntValue());

File: motan-registry-zookeeper/src/main/java/com/weibo/api/motan/registry/zookeeper/ZookeeperRegistryFactory.java
Patch:
@@ -37,7 +37,7 @@ public class ZookeeperRegistryFactory extends AbstractRegistryFactory {
     @Override
     protected Registry createRegistry(URL registryUrl) {
         try {
-            int timeout = registryUrl.getIntParameter(URLParamType.requestTimeout.getName(), URLParamType.requestTimeout.getIntValue());
+            int timeout = registryUrl.getIntParameter(URLParamType.connectTimeout.getName(), URLParamType.connectTimeout.getIntValue());
             int sessionTimeout =
                     registryUrl.getIntParameter(URLParamType.registrySessionTimeout.getName(),
                             URLParamType.registrySessionTimeout.getIntValue());

File: motan-core/src/main/java/com/weibo/api/motan/exception/MotanErrorMsgConstant.java
Patch:
@@ -38,6 +38,7 @@ public class MotanErrorMsgConstant {
     public static final int FRAMEWORK_EXPORT_ERROR_CODE = 20005;
     public static final int FRAMEWORK_SERVER_ERROR_CODE = 20006;
     public static final int FRAMEWORK_REFER_ERROR_CODE = 20007;
+    public static final int FRAMEWORK_REGISTER_ERROR_CODE = 20008;
     // biz exception
     public static final int BIZ_DEFAULT_ERROR_CODE = 30001;
     /**
@@ -62,7 +63,7 @@ public class MotanErrorMsgConstant {
             new MotanErrorMsg(503, FRAMEWORK_ENCODE_ERROR_CODE, "framework encode error");
     public static final MotanErrorMsg FRAMEWORK_DECODE_ERROR =
             new MotanErrorMsg(503, FRAMEWORK_DECODE_ERROR_CODE, "framework decode error");
-    public static final MotanErrorMsg FRAMEWORK_INIT_ERROR = new MotanErrorMsg(503, FRAMEWORK_INIT_ERROR_CODE, "framework init error");
+    public static final MotanErrorMsg FRAMEWORK_INIT_ERROR = new MotanErrorMsg(500, FRAMEWORK_INIT_ERROR_CODE, "framework init error");
     public static final MotanErrorMsg FRAMEWORK_EXPORT_ERROR =
             new MotanErrorMsg(503, FRAMEWORK_EXPORT_ERROR_CODE, "framework export error");
     public static final MotanErrorMsg FRAMEWORK_REFER_ERROR = new MotanErrorMsg(503, FRAMEWORK_REFER_ERROR_CODE, "framework refer error");

File: motan-core/src/main/java/com/weibo/api/motan/exception/MotanErrorMsgConstant.java
Patch:
@@ -38,6 +38,7 @@ public class MotanErrorMsgConstant {
     public static final int FRAMEWORK_EXPORT_ERROR_CODE = 20005;
     public static final int FRAMEWORK_SERVER_ERROR_CODE = 20006;
     public static final int FRAMEWORK_REFER_ERROR_CODE = 20007;
+    public static final int FRAMEWORK_REGISTER_ERROR_CODE = 20008;
     // biz exception
     public static final int BIZ_DEFAULT_ERROR_CODE = 30001;
     /**
@@ -62,7 +63,7 @@ public class MotanErrorMsgConstant {
             new MotanErrorMsg(503, FRAMEWORK_ENCODE_ERROR_CODE, "framework encode error");
     public static final MotanErrorMsg FRAMEWORK_DECODE_ERROR =
             new MotanErrorMsg(503, FRAMEWORK_DECODE_ERROR_CODE, "framework decode error");
-    public static final MotanErrorMsg FRAMEWORK_INIT_ERROR = new MotanErrorMsg(503, FRAMEWORK_INIT_ERROR_CODE, "framework init error");
+    public static final MotanErrorMsg FRAMEWORK_INIT_ERROR = new MotanErrorMsg(500, FRAMEWORK_INIT_ERROR_CODE, "framework init error");
     public static final MotanErrorMsg FRAMEWORK_EXPORT_ERROR =
             new MotanErrorMsg(503, FRAMEWORK_EXPORT_ERROR_CODE, "framework export error");
     public static final MotanErrorMsg FRAMEWORK_REFER_ERROR = new MotanErrorMsg(503, FRAMEWORK_REFER_ERROR_CODE, "framework refer error");

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/LocalFirstLoadBalance.java
Patch:
@@ -101,7 +101,7 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
 
         List<Referer<T>> localReferers = searchLocalReferer(referers, NetUtils.getLocalAddress().getHostAddress());
 
-        if (localReferers.isEmpty()) {
+        if (!localReferers.isEmpty()) {
             Collections.sort(localReferers, new LowActivePriorityComparator<T>());
             refersHolder.addAll(localReferers);
         }
@@ -131,8 +131,8 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
 
     private List<Referer<T>> searchLocalReferer(List<Referer<T>> referers, String localhost) {
         List<Referer<T>> localReferers = new ArrayList<Referer<T>>();
+        long local = ipToLong(localhost);
         for (Referer<T> referer : referers) {
-            long local = ipToLong(localhost);
             long tmp = ipToLong(referer.getUrl().getHost());
             if (local != 0 && local == tmp) {
                 if (referer.isAvailable()) {

File: motan-demo/motan-demo-server/src/main/java/com/weibo/motan/demo/server/DemoRpcServer.java
Patch:
@@ -27,7 +27,6 @@ public static void main(String[] args) throws InterruptedException {
         ApplicationContext applicationContext = new ClassPathXmlApplicationContext(new String[] {"classpath*:motan_demo_server.xml"});
         MotanSwitcherUtil.setSwitcherValue(MotanConstants.REGISTRY_HEARTBEAT_SWITCHER, true);
         System.out.println("server start...");
-
     }
 
 }

File: motan-manager/src/main/java/com/weibo/controller/IndexController.java
Patch:
@@ -28,7 +28,6 @@ public class IndexController {
 
     @RequestMapping(value = {"/", "/index"})
     public String index() {
-        System.out.println("index");
         return "index";
     }
 }

File: motan-manager/src/main/java/com/weibo/service/RegistryService.java
Patch:
@@ -19,7 +19,6 @@
 import com.alibaba.fastjson.JSONObject;
 
 import java.util.List;
-import java.util.Map;
 
 /**
  * Created by Zhang Yu on 2015/11/2 0002.

File: motan-registry-zookeeper/src/main/java/com/weibo/api/motan/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -187,7 +187,7 @@ private String toNodeTypePath(URL url, ZkNodeType nodeType) {
         if (nodeType == ZkNodeType.AVAILABLE_SERVER) {
             type = "server";
         } else if (nodeType == ZkNodeType.UNAVAILABLE_SERVER) {
-            type = "unavailbleServer";
+            type = "unavailableServer";
         } else if (nodeType == ZkNodeType.CLIENT) {
             type = "client";
         } else {

File: motan-core/src/main/java/com/weibo/api/motan/cluster/loadbalance/LocalFirstLoadBalance.java
Patch:
@@ -101,7 +101,7 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
 
         List<Referer<T>> localReferers = searchLocalReferer(referers, NetUtils.getLocalAddress().getHostAddress());
 
-        if (localReferers.isEmpty()) {
+        if (!localReferers.isEmpty()) {
             Collections.sort(localReferers, new LowActivePriorityComparator<T>());
             refersHolder.addAll(localReferers);
         }
@@ -131,8 +131,8 @@ protected void doSelectToHolder(Request request, List<Referer<T>> refersHolder)
 
     private List<Referer<T>> searchLocalReferer(List<Referer<T>> referers, String localhost) {
         List<Referer<T>> localReferers = new ArrayList<Referer<T>>();
+        long local = ipToLong(localhost);
         for (Referer<T> referer : referers) {
-            long local = ipToLong(localhost);
             long tmp = ipToLong(referer.getUrl().getHost());
             if (local != 0 && local == tmp) {
                 if (referer.isAvailable()) {

File: motan-demo/motan-demo-client/src/main/java/com/weibo/motan/demo/client/MotanApiClientDemo.java
Patch:
@@ -44,6 +44,7 @@ public static void main(String[] args) {
         protocol.setId("motan");
         protocol.setName("motan");
         motanDemoServiceReferer.setProtocol(protocol);
+        motanDemoServiceReferer.setDirectUrl("localhost:8002");
 
         // 使用服务
         MotanDemoService service = motanDemoServiceReferer.getRef();

File: motan-registry-zookeeper/src/main/java/com/weibo/api/motan/registry/zookeeper/ZookeeperRegistry.java
Patch:
@@ -188,8 +188,10 @@ private String toNodeTypePath(URL url, ZkNodeType nodeType) {
             type = "server";
         } else if (nodeType == ZkNodeType.UNAVAILABLE_SERVER) {
             type = "unavailbleServer";
-        } else {
+        } else if (nodeType == ZkNodeType.CLIENT) {
             type = "client";
+        } else {
+            throw new MotanFrameworkException(String.format("Failed to get nodeTypePath, url: %s type: %s", url, nodeType.toString()));
         }
         return toServicePath(url) + MotanConstants.PATH_SEPARATOR + type;
     }

File: motan-registry-consul/src/main/java/com/weibo/api/motan/registry/consul/ConsulConstants.java
Patch:
@@ -55,6 +55,7 @@ public class ConsulConstants {
 	/**
 	 * consul心跳检测开关。
 	 */
+	@Deprecated
 	public static final String CONSUL_PROCESS_HEARTBEAT_SWITCHER = "feature.consul.heartbeat";
 
 	/**

File: motan-core/src/test/java/com/weibo/api/motan/cluster/loadbalance/ConfigurableWeightLoadBalanceTest.java
Patch:
@@ -59,7 +59,7 @@ public void testDoSelect() {
                 float total = size * (j + 1);
                 float ratio = counter.get(key).get() * 10 / total;
                 int weight = groupWeight[Integer.parseInt(key.substring("group".length()))];
-                Assert.assertTrue(Math.abs(weight - ratio) < 1); // 权重误差不超过阈值。
+                Assert.assertTrue(Math.abs(weight - ratio) < 2); // 权重误差不超过阈值。
 
             }
         }

