File: blade-core/src/test/java/com/hellokaton/blade/BladeTest.java
Patch:
@@ -126,7 +126,7 @@ public void testAddStatics() {
             options.addStatic("/assets/");
         });
 
-        assertEquals(7, blade.staticOptions().getPaths().size());
+        assertEquals(5, blade.staticOptions().getPaths().size());
         assertEquals(Boolean.TRUE, blade.staticOptions().getPaths().contains("/assets/"));
         assertEquals(Boolean.FALSE, blade.staticOptions().getPaths().contains("/hello/"));
     }

File: blade-core/src/test/java/com/hellokaton/blade/mvc/route/ANYBuilderTest.java
Patch:
@@ -24,7 +24,7 @@ public void testCreateRouteBuilder() throws Exception {
 
         Route route = routeMatcher.lookupRoute("GET", "/");
         Assert.assertNotNull(route);
-        Assert.assertEquals("GET\t/\t/", route.toString());
+        Assert.assertEquals("GET\t/", route.toString());
     }
 
     @Path

File: blade-kit/src/test/java/com/hellokaton/blade/kit/JsonKitTest.java
Patch:
@@ -64,7 +64,9 @@ public void test4() {
         childBean.setRepeatField("sss");
         String json = JsonKit.toString(childBean);
 
-        Assert.assertEquals("{\"repeatField\":\"sss\",\"childField\":\"child\",\"superField\":\"super\"}", json);
+        Map<String, Object> expectedMap = JsonKit.fromJson("{\"repeatField\":\"sss\",\"childField\":\"child\",\"superField\":\"super\"}", Map.class);
+        Map<String, Object> actualMap = JsonKit.fromJson(json, Map.class);
+        Assert.assertEquals(expectedMap, actualMap);
 
         ChildBean formJson = JsonKit.fromJson(json, ChildBean.class);
 

File: blade-kit/src/test/java/com/hellokaton/blade/kit/JsonKitTest.java
Patch:
@@ -64,7 +64,9 @@ public void test4() {
         childBean.setRepeatField("sss");
         String json = JsonKit.toString(childBean);
 
-        Assert.assertEquals("{\"repeatField\":\"sss\",\"childField\":\"child\",\"superField\":\"super\"}", json);
+        Map<String, Object> expectedMap = JsonKit.fromJson("{\"repeatField\":\"sss\",\"childField\":\"child\",\"superField\":\"super\"}", Map.class);
+        Map<String, Object> actualMap = JsonKit.fromJson(json, Map.class);
+        Assert.assertEquals(expectedMap, actualMap);
 
         ChildBean formJson = JsonKit.fromJson(json, ChildBean.class);
 

File: blade-core/src/main/java/com/hellokaton/blade/kit/BladeKit.java
Patch:
@@ -272,7 +272,7 @@ public static void logAddRoute(Logger log, Route route) {
                 break;
         }
         String msg = (route.getHttpMethod().equals(HttpMethod.BEFORE) || route.getHttpMethod().equals(HttpMethod.AFTER)) ? " hook" : "route";
-        log.info("{}Add {} {} {}", getStartedSymbol(), msg, method, route.getOriginalPath());
+        log.info("{}Add {} {} {}", getStartedSymbol(), msg, method, route.getPath());
     }
 
     public static void logWebSocket(Logger log, String path) {

File: blade-core/src/main/java/com/hellokaton/blade/mvc/BladeConst.java
Patch:
@@ -84,7 +84,9 @@ public interface BladeConst {
     /**
      * A request processing ends the elapsed time, in milliseconds.
      */
-    String REQUEST_COST_TIME = "costTime";
+    String REQUEST_COST_TIME_ATTR = "costTime";
+
+    String REQUEST_TO_STATIC_ATTR = "_to_static";
 
     String NEW_LINE = "\r\n";
 

File: blade-core/src/main/java/com/hellokaton/blade/mvc/http/Response.java
Patch:
@@ -9,7 +9,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.io.InputStream;
 import java.util.Map;
 import java.util.Objects;
 import java.util.Set;
@@ -259,6 +258,8 @@ default void render(String view) {
      */
     void redirect(String newUri);
 
+    void toStatic(StaticFileBody body);
+
     void write(File file) throws IOException;
 
     void write(String fileName, File file) throws IOException;

File: blade-core/src/main/java/com/hellokaton/blade/server/NettyHttpConst.java
Patch:
@@ -8,7 +8,6 @@
  */
 public interface NettyHttpConst {
 
-    String METHOD_GET = "GET";
     String SLASH = "/";
     char CHAR_SLASH = '/';
     char CHAR_POINT = '.';

File: blade-core/src/test/java/com/hellokaton/blade/BladeTest.java
Patch:
@@ -91,7 +91,6 @@ public void testStart() {
     public void testAppName() {
         Blade blade = Blade.create();
         String anyString = StringKit.rand(10);
-        blade.appName(anyString);
         assertEquals(anyString, blade.environment().getOrNull(ENV_KEY_APP_NAME));
     }
 

File: blade-core/src/main/java/com/hellokaton/blade/server/RouteMethodHandler.java
Patch:
@@ -91,11 +91,11 @@ public void handle(WebContext webContext) throws Exception {
         }
     }
 
-    public FullHttpResponse handleResponse(Request request, com.hellokaton.blade.mvc.http.Response response, ChannelHandlerContext context) {
+    public FullHttpResponse handleResponse(Request request, Response response, ChannelHandlerContext context) {
         Session session = request.session();
         if (null != session) {
             Cookie cookie = new Cookie();
-            cookie.name(WebContext.sessionKey());
+            cookie.name(WebContext.blade().httpOptions().getSessionKey());
             cookie.value(session.id());
             cookie.httpOnly(true);
             cookie.secure(request.isSecure());

File: blade-core/src/main/java/com/hellokaton/blade/test/BladeTestRunner.java
Patch:
@@ -32,7 +32,7 @@ protected Statement withBeforeClasses(final Statement statement) {
         return new Statement() {
             @Override
             public void evaluate() throws Throwable {
-                blade = Blade.of().start(mainCls).await();
+                blade = Blade.create().start(mainCls).await();
                 junitStatement.evaluate();
             }
         };

File: blade-core/src/test/java/PkgNpeTest.java
Patch:
@@ -7,7 +7,7 @@
 public class PkgNpeTest {
 
     public static void main(String[] args) {
-        Blade.of()
+        Blade.create()
                 .start();
     }
 }

File: blade-core/src/test/java/com/hellokaton/blade/BaseTestCase.java
Patch:
@@ -25,7 +25,7 @@ public class BaseTestCase {
     protected String firefoxUA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0";
 
     protected com.hellokaton.blade.mvc.http.HttpRequest mockHttpRequest(String methodName) {
-        WebContext.init(Blade.of(),"/");
+        WebContext.init(Blade.create(),"/");
         com.hellokaton.blade.mvc.http.HttpRequest request = mock(com.hellokaton.blade.mvc.http.HttpRequest.class);
         when(request.method()).thenReturn(methodName);
         when(request.url()).thenReturn("/");

File: blade-core/src/test/java/com/hellokaton/blade/event/EventManagerTest.java
Patch:
@@ -13,7 +13,7 @@ public class EventManagerTest {
     public void testManager() {
         EventManager eventManager = new EventManager();
         eventManager.addEventListener(EventType.SERVER_STARTED, b -> System.out.println("server started"));
-        eventManager.fireEvent(EventType.SERVER_STARTED, new Event().attribute("blade", Blade.of()));
+        eventManager.fireEvent(EventType.SERVER_STARTED, new Event().attribute("blade", Blade.create()));
     }
 
 }

File: blade-core/src/test/java/com/hellokaton/blade/ioc/ValueDefineTest.java
Patch:
@@ -16,7 +16,7 @@ public class ValueDefineTest {
 
     @Before
     public void before() {
-        app = Blade.of();
+        app = Blade.create();
         app.scanPackages("com.hellokaton.blade.model","com.hellokaton.blade.ioc");
         app.listen(10087).start().await();
     }

File: blade-core/src/test/java/com/hellokaton/blade/mvc/handler/ExceptionHandlerTest.java
Patch:
@@ -27,7 +27,7 @@ public void before() {
         when(request.header("Accept")).thenReturn("text/html");
         response = mock(Response.class);
 
-        WebContext.init(Blade.of(), "/");
+        WebContext.init(Blade.create(), "/");
         WebContext.set(new WebContext(request, response, null));
     }
 

File: blade-core/src/test/java/com/hellokaton/blade/server/ServerTest.java
Patch:
@@ -12,14 +12,14 @@ public class ServerTest {
     @Test
     public void testCreateServer() throws Exception {
         Server server = new NettyServer();
-        server.start(Blade.of().listen(10086));
+        server.start(Blade.create().listen(10086));
         server.stop();
     }
 
     @Test
     public void testStart() throws Exception {
         NettyServer nettyServer = new NettyServer();
-        nettyServer.start(Blade.of().listen(10087));
+        nettyServer.start(Blade.create().listen(10087));
         nettyServer.stop();
     }
 }

File: blade-core/src/test/java/netty_hello/Hello.java
Patch:
@@ -21,7 +21,7 @@ public class Hello {
     private static final StringBody hello = StringBody.of("Hello World.");
 
     public static void main(String[] args) {
-        Blade.of()
+        Blade.create()
                 .get("/", ctx -> {
                     String[] chars = new String[]{"Here a special char \" that not escaped", "And Another \\ char"};
                     ctx.json(chars);

File: src/main/java/com/blade/ioc/SimpleIoc.java
Patch:
@@ -7,6 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * The default IOC container implementation

File: src/main/java/com/blade/ioc/SimpleIoc.java
Patch:
@@ -7,6 +7,7 @@
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * The default IOC container implementation

File: src/main/java/com/blade/ioc/SimpleIoc.java
Patch:
@@ -1,12 +1,12 @@
 package com.blade.ioc;
 
-import com.blade.ioc.annotation.Bean;
 import com.blade.ioc.bean.BeanDefine;
 import com.blade.kit.IocKit;
 import com.blade.mvc.WebContext;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.*;
+import java.util.concurrent.ConcurrentHashMap;
 
 /**
  * The default IOC container implementation

File: src/main/java/com/blade/mvc/route/Route.java
Patch:
@@ -5,7 +5,6 @@
 import lombok.AllArgsConstructor;
 import lombok.Builder;
 import lombok.EqualsAndHashCode;
-import lombok.NoArgsConstructor;
 
 import java.lang.reflect.Method;
 import java.util.HashMap;
@@ -56,6 +55,7 @@ public class Route {
     /**
      * Url path params
      */
+    @Builder.Default
     private Map<String, String> pathParams = new HashMap<>(8);
 
     public Route() {

File: src/main/java/com/blade/mvc/ui/RestResponse.java
Patch:
@@ -1,7 +1,6 @@
 package com.blade.mvc.ui;
 
 import com.blade.kit.DateKit;
-import com.blade.kit.StringKit;
 import lombok.Builder;
 import lombok.Data;
 

File: src/main/java/com/blade/Blade.java
Patch:
@@ -652,7 +652,7 @@ public String env(String key, String defaultValue) {
      * @return blade
      */
     public Blade listen(int port) {
-        Assert.greaterThan(port, 0, "server port not is negative number.");
+        Assert.greaterThan(port, 0, "server port is not negative number.");
         this.environment.set(ENV_KEY_SERVER_PORT, port);
         return this;
     }
@@ -666,7 +666,7 @@ public Blade listen(int port) {
      * @return blade
      */
     public Blade listen(@NonNull String address, int port) {
-        Assert.greaterThan(port, 0, "server port not is negative number.");
+        Assert.greaterThan(port, 0, "server port is not negative number.");
         this.environment.set(ENV_KEY_SERVER_ADDRESS, address);
         this.environment.set(ENV_KEY_SERVER_PORT, port);
         return this;
@@ -1084,4 +1084,4 @@ private void loadConfig(String[] args) {
 
     }
 
-}
\ No newline at end of file
+}

File: src/test/java/com/blade/BaseTestCase.java
Patch:
@@ -1,5 +1,6 @@
 package com.blade;
 
+import com.blade.mvc.WebContext;
 import com.blade.mvc.http.HttpMethod;
 import com.blade.mvc.http.Response;
 import com.mashape.unirest.http.Unirest;
@@ -23,6 +24,7 @@ public class BaseTestCase {
     protected String firefoxUA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0";
 
     protected com.blade.mvc.http.HttpRequest mockHttpRequest(String methodName) {
+        WebContext.init(Blade.of(),"/");
         com.blade.mvc.http.HttpRequest request = mock(com.blade.mvc.http.HttpRequest.class);
         when(request.method()).thenReturn(methodName);
         when(request.url()).thenReturn("/");

File: src/main/java/com/blade/ioc/SimpleIoc.java
Patch:
@@ -17,7 +17,7 @@
 @Slf4j
 public class SimpleIoc implements Ioc {
 
-    private final Map<String, BeanDefine> pool = new HashMap<>(32);
+    private final Map<String, BeanDefine> pool = new ConcurrentHashMap<>(32);
 
     /**
      * Add user-defined objects
@@ -192,4 +192,4 @@ private BeanDefine createBeanDefine(Class<?> beanClass, boolean isSingleton) {
         return null;
     }
 
-}
\ No newline at end of file
+}

File: src/test/java/com/blade/BaseTestCase.java
Patch:
@@ -1,5 +1,6 @@
 package com.blade;
 
+import com.blade.mvc.WebContext;
 import com.blade.mvc.http.HttpMethod;
 import com.blade.mvc.http.Response;
 import com.mashape.unirest.http.Unirest;
@@ -23,6 +24,7 @@ public class BaseTestCase {
     protected String firefoxUA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0";
 
     protected com.blade.mvc.http.HttpRequest mockHttpRequest(String methodName) {
+        WebContext.init(Blade.of(),"/");
         com.blade.mvc.http.HttpRequest request = mock(com.blade.mvc.http.HttpRequest.class);
         when(request.method()).thenReturn(methodName);
         when(request.url()).thenReturn("/");

File: src/main/java/com/blade/kit/json/BeanSerializer.java
Patch:
@@ -42,8 +42,9 @@ public static Object serialize(SerializeMapping serializeMapping, Object bean) t
         }
 
         if (bean instanceof Map) {
-            Map map = (Map) bean;
-            map.forEach((Object key, Object value) -> {
+            Map beanMap = (Map) bean;
+            Map map = new HashMap(beanMap.size());
+            beanMap.forEach((Object key, Object value) -> {
                 try {
                     map.put(key, serialize(serializeMapping, value));
                 } catch (Exception e) {

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -41,7 +41,7 @@
 @Slf4j
 public class RouteMatcher {
 
-    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/(([^:/]*):([^/]+))|(\\.\\*)");
+    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/(?:([^:/]*):([^/]+))|(\\.\\*)");
     private static final String  METHOD_NAME           = "handle";
 
     // Storage URL and route

File: src/main/java/com/blade/kit/json/BeanSerializer.java
Patch:
@@ -42,8 +42,8 @@ public static Object serialize(SerializeMapping serializeMapping, Object bean) t
         }
 
         if (bean instanceof Map) {
-            Map map = (Map) bean;
-            map.forEach((Object key, Object value) -> {
+            Map map = new HashMap();
+            ((Map) bean).forEach((Object key, Object value) -> {
                 try {
                     map.put(key, serialize(serializeMapping, value));
                 } catch (Exception e) {

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -41,7 +41,7 @@
 @Slf4j
 public class RouteMatcher {
 
-    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/(([^:/]*):([^/]+))|(\\.\\*)");
+    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/(?:([^:/]*):([^/]+))|(\\.\\*)");
     private static final String  METHOD_NAME           = "handle";
 
     // Storage URL and route

File: src/main/java/com/blade/task/TaskStruct.java
Patch:
@@ -32,6 +32,7 @@
 public class TaskStruct {
 
     private Schedule schedule;
+    private String   cron;
     private Method   method;
     private Class<?> type;
 

File: src/main/java/com/blade/mvc/http/Request.java
Patch:
@@ -290,7 +290,7 @@ default boolean queryBoolean(@NonNull String name, Boolean defaultValue) {
     default String address() {
         String address = WebKit.ipAddress(this);
         if (StringKit.isBlank(address) || UNKNOWN_MAGIC.equalsIgnoreCase(address)) {
-            address = remoteAddress().split(":")[0].substring(1);
+            address = remoteAddress().split(":")[0];
         }
         if (StringKit.isBlank(address)) {
             address = "Unknown";

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -41,7 +41,7 @@
 @Slf4j
 public class RouteMatcher {
 
-    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/([^:/]*):([^/]+)");
+    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/(([^:/]*):([^/]+))|(\\.\\*)");
     private static final String  METHOD_NAME           = "handle";
 
     // Storage URL and route
@@ -429,4 +429,4 @@ public RouteMatcher addWebSocket(@NonNull String path,@NonNull WebSocketHandler
         return this;
     }
 
-}
\ No newline at end of file
+}

File: src/main/java/com/blade/mvc/http/Request.java
Patch:
@@ -290,7 +290,7 @@ default boolean queryBoolean(@NonNull String name, Boolean defaultValue) {
     default String address() {
         String address = WebKit.ipAddress(this);
         if (StringKit.isBlank(address) || UNKNOWN_MAGIC.equalsIgnoreCase(address)) {
-            address = remoteAddress().split(":")[0].substring(1);
+            address = remoteAddress().split(":")[0];
         }
         if (StringKit.isBlank(address)) {
             address = "Unknown";

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -41,7 +41,7 @@
 @Slf4j
 public class RouteMatcher {
 
-    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/([^:/]*):([^/]+)");
+    private static final Pattern PATH_VARIABLE_PATTERN = Pattern.compile("/(([^:/]*):([^/]+))|(\\.\\*)");
     private static final String  METHOD_NAME           = "handle";
 
     // Storage URL and route
@@ -429,4 +429,4 @@ public RouteMatcher addWebSocket(@NonNull String path,@NonNull WebSocketHandler
         return this;
     }
 
-}
\ No newline at end of file
+}

File: src/main/java/com/blade/mvc/handler/WebSocketHandlerWrapper.java
Patch:
@@ -6,6 +6,7 @@
 import com.blade.mvc.annotation.OnMessage;
 import com.blade.mvc.annotation.OnOpen;
 import com.blade.mvc.websocket.WebSocketContext;
+import io.netty.util.concurrent.FastThreadLocal;
 import lombok.extern.slf4j.Slf4j;
 
 import java.lang.annotation.Annotation;
@@ -27,7 +28,7 @@ public final class WebSocketHandlerWrapper implements WebSocketHandler {
 
     private final Map<String,Class<?>> handlers = new HashMap<>(4);
     private final Map<String, Map<Class<? extends Annotation>, Method>> methodCache = new HashMap<>(4);
-    private final ThreadLocal<String> path = ThreadLocal.withInitial(() -> null);
+    private final FastThreadLocal<String> path = new FastThreadLocal<>();
     private final Blade blade;
 
     public static WebSocketHandlerWrapper init(Blade blade) {

File: src/test/java/netty_hello/BaseWebSocketHandler.java
Patch:
@@ -14,11 +14,11 @@ public abstract class BaseWebSocketHandler {
 
     @OnOpen
     public void OnOpen(WebSocketContext ctx) {
-        System.out.println("ws from annotation @OnOpen:" + ctx.getSession().getUuid());
+        System.out.println("ws from annotation @OnOpen:" + ctx.session().uuid());
     }
 
     @OnClose
     public void OnClose(WebSocketContext ctx) {
-        System.out.println("ws from annotation @OnClose:" + ctx.getSession().getUuid() + " disconnect");
+        System.out.println("ws from annotation @OnClose:" + ctx.session().uuid() + " disconnect");
     }
 }

File: src/test/java/netty_hello/CustomWebSocketHandler.java
Patch:
@@ -18,16 +18,16 @@ public class CustomWebSocketHandler implements WebSocketHandler {
     @Override
     public void onConnect(WebSocketContext ctx) {
         cService.sayHello();
-        System.out.println("ws from implements interface:onConnect:"+ctx.getSession().getUuid());
+        System.out.println("ws from implements interface:onConnect:"+ctx.session().uuid());
     }
 
     @Override
     public void onText(WebSocketContext ctx) {
-        System.out.println("ws from implements interface:onText:"+ctx.getSession().getUuid() + " said:" + ctx.getReqText());
+        System.out.println("ws from implements interface:onText:"+ctx.session().uuid() + " said:" + ctx.message());
     }
 
     @Override
     public void onDisConnect(WebSocketContext ctx) {
-        System.out.println("ws from implements interface:onDisConnect:"+ctx.getSession().getUuid() + " disconnect");
+        System.out.println("ws from implements interface:onDisConnect:"+ctx.session().uuid() + " disconnect");
     }
 }

File: src/test/java/netty_hello/CustomWebSocketHandlerAnno.java
Patch:
@@ -14,6 +14,6 @@ public class CustomWebSocketHandlerAnno extends BaseWebSocketHandler {
 
     @OnMessage
     public void OnMessage(WebSocketContext ctx) {
-        System.out.println("ws from annotation @OnMessage:" + ctx.getSession().getUuid() + " said:" + ctx.getReqText());
+        System.out.println("ws from annotation @OnMessage:" + ctx.session().uuid() + " said:" + ctx.message());
     }
 }

File: src/main/java/com/blade/mvc/handler/WebSocketHandlerWrapper.java
Patch:
@@ -6,6 +6,7 @@
 import com.blade.mvc.annotation.OnMessage;
 import com.blade.mvc.annotation.OnOpen;
 import com.blade.mvc.websocket.WebSocketContext;
+import io.netty.util.concurrent.FastThreadLocal;
 import lombok.extern.slf4j.Slf4j;
 
 import java.lang.annotation.Annotation;
@@ -27,7 +28,7 @@ public final class WebSocketHandlerWrapper implements WebSocketHandler {
 
     private final Map<String,Class<?>> handlers = new HashMap<>(4);
     private final Map<String, Map<Class<? extends Annotation>, Method>> methodCache = new HashMap<>(4);
-    private final ThreadLocal<String> path = ThreadLocal.withInitial(() -> null);
+    private final FastThreadLocal<String> path = new FastThreadLocal<>();
     private final Blade blade;
 
     public static WebSocketHandlerWrapper init(Blade blade) {

File: src/test/java/netty_hello/BaseWebSocketHandler.java
Patch:
@@ -14,11 +14,11 @@ public abstract class BaseWebSocketHandler {
 
     @OnOpen
     public void OnOpen(WebSocketContext ctx) {
-        System.out.println("ws from annotation @OnOpen:" + ctx.getSession().getUuid());
+        System.out.println("ws from annotation @OnOpen:" + ctx.session().uuid());
     }
 
     @OnClose
     public void OnClose(WebSocketContext ctx) {
-        System.out.println("ws from annotation @OnClose:" + ctx.getSession().getUuid() + " disconnect");
+        System.out.println("ws from annotation @OnClose:" + ctx.session().uuid() + " disconnect");
     }
 }

File: src/test/java/netty_hello/CustomWebSocketHandler.java
Patch:
@@ -18,16 +18,16 @@ public class CustomWebSocketHandler implements WebSocketHandler {
     @Override
     public void onConnect(WebSocketContext ctx) {
         cService.sayHello();
-        System.out.println("ws from implements interface:onConnect:"+ctx.getSession().getUuid());
+        System.out.println("ws from implements interface:onConnect:"+ctx.session().uuid());
     }
 
     @Override
     public void onText(WebSocketContext ctx) {
-        System.out.println("ws from implements interface:onText:"+ctx.getSession().getUuid() + " said:" + ctx.getReqText());
+        System.out.println("ws from implements interface:onText:"+ctx.session().uuid() + " said:" + ctx.message());
     }
 
     @Override
     public void onDisConnect(WebSocketContext ctx) {
-        System.out.println("ws from implements interface:onDisConnect:"+ctx.getSession().getUuid() + " disconnect");
+        System.out.println("ws from implements interface:onDisConnect:"+ctx.session().uuid() + " disconnect");
     }
 }

File: src/test/java/netty_hello/CustomWebSocketHandlerAnno.java
Patch:
@@ -14,6 +14,6 @@ public class CustomWebSocketHandlerAnno extends BaseWebSocketHandler {
 
     @OnMessage
     public void OnMessage(WebSocketContext ctx) {
-        System.out.println("ws from annotation @OnMessage:" + ctx.getSession().getUuid() + " said:" + ctx.getReqText());
+        System.out.println("ws from annotation @OnMessage:" + ctx.session().uuid() + " said:" + ctx.message());
     }
 }

File: src/main/java/com/blade/server/netty/WebSocketHandler.java
Patch:
@@ -7,6 +7,7 @@
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.handler.codec.http.HttpRequest;
 import io.netty.handler.codec.http.websocketx.*;
+import io.netty.util.ReferenceCountUtil;
 import lombok.extern.slf4j.Slf4j;
 
 /**
@@ -37,6 +38,7 @@ protected void channelRead0(ChannelHandlerContext ctx, Object msg) {
             initHandlerWrapper();
             handleWebSocketFrame(ctx, (WebSocketFrame) msg);
         } else {
+            ReferenceCountUtil.retain(msg);
             ctx.fireChannelRead(msg);
         }
     }
@@ -61,6 +63,7 @@ private void handleHttpRequest(ChannelHandlerContext ctx, HttpRequest req) {
                 this.handler.onConnect(this.context);
             }
         } else {
+            ReferenceCountUtil.retain(req);
             ctx.fireChannelRead(req);
         }
     }

File: src/test/java/netty_hello/WebSocketDemo.java
Patch:
@@ -13,6 +13,7 @@ public class WebSocketDemo {
     public static void main(String[] args) {
         Blade.of()
                 .get("/hello", ctx -> ctx.text("get route"))
+                .post("/post", ctx -> ctx.text(ctx.request().query("param","null")))
                 .webSocket("/websocket", new WebSocketHandler() {
                     @Override
                     public void onConnect(WebSocketContext ctx) {

File: src/main/java/com/blade/kit/IOKit.java
Patch:
@@ -53,17 +53,17 @@ public static String readToString(String file) throws IOException {
     }
 
     public static String readToString(BufferedReader bufferedReader) {
-        return bufferedReader.lines().collect(Collectors.joining());
+        return bufferedReader.lines().collect(Collectors.joining(System.lineSeparator()));
     }
 
     public static String readToString(Path path) throws IOException {
         BufferedReader bufferedReader = Files.newBufferedReader(path);
-        return bufferedReader.lines().collect(Collectors.joining());
+        return bufferedReader.lines().collect(Collectors.joining(System.lineSeparator()));
     }
 
     public static String readToString(InputStream input) throws IOException {
         try (BufferedReader buffer = new BufferedReader(new InputStreamReader(input, "UTF-8"))) {
-            return buffer.lines().collect(Collectors.joining("\n"));
+            return buffer.lines().collect(Collectors.joining(System.lineSeparator()));
         }
     }
 

File: src/main/java/com/blade/kit/IOKit.java
Patch:
@@ -53,17 +53,17 @@ public static String readToString(String file) throws IOException {
     }
 
     public static String readToString(BufferedReader bufferedReader) {
-        return bufferedReader.lines().collect(Collectors.joining());
+        return bufferedReader.lines().collect(Collectors.joining(System.lineSeparator()));
     }
 
     public static String readToString(Path path) throws IOException {
         BufferedReader bufferedReader = Files.newBufferedReader(path);
-        return bufferedReader.lines().collect(Collectors.joining());
+        return bufferedReader.lines().collect(Collectors.joining(System.lineSeparator()));
     }
 
     public static String readToString(InputStream input) throws IOException {
         try (BufferedReader buffer = new BufferedReader(new InputStreamReader(input, "UTF-8"))) {
-            return buffer.lines().collect(Collectors.joining("\n"));
+            return buffer.lines().collect(Collectors.joining(System.lineSeparator()));
         }
     }
 

File: src/main/java/com/blade/kit/BladeKit.java
Patch:
@@ -138,7 +138,7 @@ public static <T> void notNullThen(T value, Consumer<T> consumer) {
         }
     }
 
-    public static boolean isInJar() {
+    public static boolean runtimeIsJAR() {
         return Const.CLASSPATH.endsWith(".jar");
     }
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -31,7 +31,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.13.ALPHA";
+    String       VERSION                    = "2.0.13.BETA";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/ui/template/DefaultEngine.java
Patch:
@@ -45,7 +45,7 @@ public void render(ModelAndView modelAndView, Writer writer) throws TemplateExce
                 BufferedReader reader  = new BufferedReader(new InputStreamReader(input));
                 body = IOKit.readToString(reader);
             } else {
-                if (BladeKit.isInJar()) {
+                if (BladeKit.runtimeIsJAR()) {
                     viewPath = PATH_SEPARATOR + TEMPLATE_PATH + PATH_SEPARATOR + view;
 
                     InputStream    in     = getClass().getResourceAsStream(viewPath);

File: src/main/java/com/blade/server/netty/HttpServerInitializer.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.blade.Blade;
 import com.blade.kit.DateKit;
-import com.blade.kit.StringKit;
 import com.blade.mvc.Const;
 import io.netty.channel.ChannelInitializer;
 import io.netty.channel.ChannelPipeline;
@@ -37,7 +36,7 @@ public HttpServerInitializer(SslContext sslCtx, Blade blade, ScheduledExecutorSe
         this.sslCtx = sslCtx;
         this.blade = blade;
         this.useGZIP = blade.environment().getBoolean(Const.ENV_KEY_GZIP_ENABLE, false);
-        this.isWebSocket = StringKit.isNotEmpty(blade.webSocketPath());
+        this.isWebSocket = blade.routeMatcher().getWebSockets().size() > 0;
         this.httpServerHandler = new HttpServerHandler();
 
         service.scheduleWithFixedDelay(() -> date = DateKit.gmtDate(LocalDateTime.now()), 1000, 1000, TimeUnit.MILLISECONDS);

File: src/test/java/com/blade/BladeTest.java
Patch:
@@ -188,7 +188,6 @@ public void testWatchEnvChange() {
 
     @Test
     public void testWebSocket() {
-        Assert.assertNull(Blade.of().webSocketHandler());
         Blade blade = Blade.of().webSocket("/", new WebSocketHandler() {
             @Override
             public void onConnect(WebSocketContext ctx) {
@@ -205,7 +204,6 @@ public void onDisConnect(WebSocketContext ctx) {
                 System.out.println("on disconnect.");
             }
         });
-        Assert.assertNotNull(blade.webSocketHandler());
     }
 
     @Test

File: src/test/java/netty_hello/WebSocketDemo.java
Patch:
@@ -11,9 +11,9 @@
 public class WebSocketDemo {
 
     public static void main(String[] args) {
-        Blade.me()
-                .get("/hello", ctx -> {})
-                .webSocket("/webscoket", new WebSocketHandler() {
+        Blade.of()
+                .get("/hello", ctx -> ctx.text("get route"))
+                .webSocket("/websocket", new WebSocketHandler() {
                     @Override
                     public void onConnect(WebSocketContext ctx) {
                         System.out.println("客户端连接上了: " + ctx.getSession());

File: src/test/java/netty_hello/WebSocketDemo.java
Patch:
@@ -11,9 +11,9 @@
 public class WebSocketDemo {
 
     public static void main(String[] args) {
-        Blade.me()
-                .get("/hello", ctx -> {})
-                .webSocket("/webscoket", new WebSocketHandler() {
+        Blade.of()
+                .get("/hello", ctx -> ctx.text("get route"))
+                .webSocket("/websocket", new WebSocketHandler() {
                     @Override
                     public void onConnect(WebSocketContext ctx) {
                         System.out.println("客户端连接上了: " + ctx.getSession());

File: src/main/java/com/blade/server/netty/StaticFileHandler.java
Patch:
@@ -135,7 +135,7 @@ public void handle(WebContext webContext) throws Exception {
             // gradle resources path
             File resourcesDirectory = new File(new File(Const.class.getResource("/").getPath()).getParent() + "/resources");
             if (resourcesDirectory.isDirectory()) {
-                file = new File(resourcesDirectory.getPath() + "/resources/" + cleanUri.substring(1));
+              file = new File(resourcesDirectory.getPath() + "/" + cleanUri.substring(1));
                 if (file.isHidden() || !file.exists()) {
                     log404(log, method, uri);
                     throw new NotFoundException(uri);

File: src/main/java/com/blade/server/netty/HttpServerHandler.java
Patch:
@@ -18,6 +18,7 @@
 import com.blade.exception.BladeException;
 import com.blade.exception.NotFoundException;
 import com.blade.kit.BladeCache;
+import com.blade.mvc.RouteContext;
 import com.blade.mvc.WebContext;
 import com.blade.mvc.handler.ExceptionHandler;
 import com.blade.mvc.http.*;
@@ -146,7 +147,7 @@ private WebContext executeLogic(WebContext webContext) {
                 staticFileHandler.handle(webContext);
             } else {
                 if (HttpMethod.OPTIONS.name().equals(method) && null != WebContext.blade().corsMiddleware()) {
-                    WebContext.blade().corsMiddleware().execute(request, webContext.getResponse());
+                    WebContext.blade().corsMiddleware().handle(new RouteContext(webContext.getRequest(), webContext.getResponse()));
                 } else {
                     Route route = routeMatcher.lookupRoute(method, uri);
                     if (null != route) {

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -16,6 +16,7 @@
  * 2017/6/5
  */
 public class Hello {
+
     private static final StringBody hello = StringBody.of("Hello World.");
 
     public static void main(String[] args) {
@@ -78,6 +79,7 @@ public static void main(String[] args) {
                     }
 
                 })
+                .enableCors(true)
                 .event(EventType.ENVIRONMENT_CHANGED, new ConfigChanged())
                 .event(EventType.SESSION_DESTROY, e -> {
                     System.out.println("session 失效了");

File: src/main/java/com/blade/server/netty/StaticFileHandler.java
Patch:
@@ -135,7 +135,7 @@ public void handle(WebContext webContext) throws Exception {
             // gradle resources path
             File resourcesDirectory = new File(new File(Const.class.getResource("/").getPath()).getParent() + "/resources");
             if (resourcesDirectory.isDirectory()) {
-                file = new File(resourcesDirectory.getPath() + "/resources/" + cleanUri.substring(1));
+              file = new File(resourcesDirectory.getPath() + "/" + cleanUri.substring(1));
                 if (file.isHidden() || !file.exists()) {
                     log404(log, method, uri);
                     throw new NotFoundException(uri);

File: src/main/java/com/blade/Blade.java
Patch:
@@ -535,17 +535,17 @@ public Class<?> bootClass() {
      * @return blade
      */
     public Blade enableCors(boolean enableCors) {
-        this.enableCors(new CorsConfiger(), enableCors);
+        this.enableCors(enableCors, new CorsConfiger());
         return this;
     }
 
     /**
      * Set whether to config  cors
-     * @param corsConfig config cors
      * @param enableCors enable cors
+     * @param corsConfig config cors
      * @return blade
      */
-    public Blade enableCors(CorsConfiger corsConfig, boolean enableCors) {
+    public Blade enableCors(boolean enableCors, CorsConfiger corsConfig) {
         this.environment.set(ENV_KEY_CORS_ENABLE, enableCors);
         if (enableCors) {
             this.use(new CorsMiddleware(corsConfig));

File: src/main/java/com/blade/Blade.java
Patch:
@@ -849,11 +849,11 @@ public Blade start() {
      */
     public Blade start(Class<?> mainCls, String... args) {
         try {
-            Assert.packageNotEmpty(mainCls,"your main class is empty of package.");
             this.loadConfig(args);
 
             this.bootClass = mainCls;
             eventManager.fireEvent(EventType.SERVER_STARTING, new Event().attribute("blade", this));
+
             Thread thread = new Thread(() -> {
                 try {
                     server.start(Blade.this);

File: src/main/java/com/blade/server/netty/MergeRequestHandler.java
Patch:
@@ -43,7 +43,7 @@ protected void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {
             httpRequest.setNettyRequest((io.netty.handler.codec.http.HttpRequest) msg);
             return;
         }
-        if (msg instanceof HttpContent) {
+        if (null != httpRequest && msg instanceof HttpContent) {
             httpRequest.appendContent((HttpContent) msg);
         }
         if (msg instanceof LastHttpContent) {

File: src/main/java/com/blade/mvc/http/Request.java
Patch:
@@ -318,7 +318,7 @@ default String contentType() {
      * @return Return current request is a AJAX request
      */
     default boolean isAjax() {
-        return "XMLHttpRequest".equals(header("x-requested-with"));
+        return "XMLHttpRequest".equals(header("X-Requested-With")) || "XMLHttpRequest".equals(header("x-requested-with"));
     }
 
     /**

File: src/main/java/com/blade/Blade.java
Patch:
@@ -535,17 +535,17 @@ public Class<?> bootClass() {
      * @return blade
      */
     public Blade enableCors(boolean enableCors) {
-        this.enableCors(new CorsConfiger(), enableCors);
+        this.enableCors(enableCors, new CorsConfiger());
         return this;
     }
 
     /**
      * Set whether to config  cors
-     * @param corsConfig config cors
      * @param enableCors enable cors
+     * @param corsConfig config cors
      * @return blade
      */
-    public Blade enableCors(CorsConfiger corsConfig, boolean enableCors) {
+    public Blade enableCors(boolean enableCors, CorsConfiger corsConfig) {
         this.environment.set(ENV_KEY_CORS_ENABLE, enableCors);
         if (enableCors) {
             this.use(new CorsMiddleware(corsConfig));

File: src/main/java/com/blade/Blade.java
Patch:
@@ -849,7 +849,7 @@ public Blade start() {
      */
     public Blade start(Class<?> mainCls, String... args) {
         try {
-            Assert.packageNotEmpty(bootClass,"your main class is empty of package.");
+            Assert.packageNotEmpty(mainCls,"your main class is empty of package.");
             this.loadConfig(args);
 
             this.bootClass = mainCls;

File: src/main/java/com/blade/Blade.java
Patch:
@@ -849,6 +849,7 @@ public Blade start() {
      */
     public Blade start(Class<?> mainCls, String... args) {
         try {
+            Assert.packageNotEmpty(bootClass,"your main class is empty of package.");
             this.loadConfig(args);
 
             this.bootClass = mainCls;

File: src/main/java/com/blade/Blade.java
Patch:
@@ -857,6 +857,7 @@ public Blade start(Class<?> mainCls, String... args) {
      */
     public Blade start(Class<?> bootClass, @NonNull String address, int port, String... args) {
         try {
+            Assert.packageNotEmpty(bootClass,"your main class is empty of package.");
             this.loadConfig(args);
             this.environment.set(ENV_KEY_SERVER_ADDRESS, address);
 

File: src/main/java/com/blade/server/netty/RouteMethodHandler.java
Patch:
@@ -27,7 +27,6 @@
 import io.netty.channel.ChannelFutureListener;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.*;
-import io.netty.handler.codec.http.HttpResponse;
 import io.netty.handler.stream.ChunkedStream;
 import lombok.extern.slf4j.Slf4j;
 import lombok.var;
@@ -37,8 +36,6 @@
 import java.io.StringWriter;
 import java.lang.reflect.Method;
 import java.nio.charset.StandardCharsets;
-import java.util.HashMap;
-import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 

File: src/main/java/com/blade/server/netty/HttpServerHandler.java
Patch:
@@ -74,8 +74,7 @@ public class HttpServerHandler extends SimpleChannelInboundHandler<HttpObject> {
             Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors() * 2);
 
     @Override
-    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
-        super.channelUnregistered(ctx);
+    public void channelInactive(ChannelHandlerContext ctx) {
         if (LOCAL_CONTEXT_THREAD_LOCAL.get() != null && LOCAL_CONTEXT_THREAD_LOCAL.get().hasDecoder()) {
             LOCAL_CONTEXT_THREAD_LOCAL.get().decoder().cleanFiles();
         }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -84,7 +84,7 @@ public interface Const {
     // netty default config
     int DEFAULT_SO_BACKLOG          = 1024;
     int DEFAULT_ACCEPT_THREAD_COUNT = 1;
-    int DEFAULT_IO_THREAD_COUNT     = Runtime.getRuntime().availableProcessors();
+    int DEFAULT_IO_THREAD_COUNT     = 0;
 
     /**
      * A request processing ends the elapsed time, in milliseconds.

File: src/main/java/com/blade/server/netty/HttpServerHandler.java
Patch:
@@ -65,7 +65,7 @@ public class HttpServerHandler extends SimpleChannelInboundHandler<HttpObject> {
     private static final RouteMatcher                  ROUTE_MATCHER              = WebContext.blade().routeMatcher();
 
     static final boolean ALLOW_COST =
-            WebContext.blade().environment().getBoolean(ENV_KEY_HTTP_REQUEST_COST, false);
+            WebContext.blade().environment().getBoolean(ENV_KEY_HTTP_REQUEST_COST, true);
 
     public static final boolean PERFORMANCE =
             WebContext.blade().environment().getBoolean(ENV_KEY_PERFORMANCE, false);

File: src/main/java/com/blade/server/netty/LogicRunner.java
Patch:
@@ -78,6 +78,7 @@ public LogicRunner handle() {
     }
 
     public void finishWrite() {
+        WebContext.set(webContext);
         routeHandler.finishWrite(webContext);
         WebContext.remove();
         isFinished = true;

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String[] args) {
                 })
                 .post("/hello", ctx -> ctx.text("Hello World."))
                 .post("/body", ctx -> {
-                    ctx.text("Hello World.");
+                    ctx.text(ctx.bodyToString());
                 })
                 .put("/hello", ctx -> ctx.text("Hello World."))
                 .delete("/hello", ctx -> ctx.text("Hello World."))

File: src/main/java/com/blade/server/Server.java
Patch:
@@ -14,10 +14,9 @@ public interface Server {
      * Start blade application
      *
      * @param blade blade instance
-     * @param args  command arguments
      * @throws Exception
      */
-    void start(Blade blade, String[] args) throws Exception;
+    void start(Blade blade) throws Exception;
 
     /**
      * Join current server

File: src/main/java/com/blade/server/netty/AsyncRunner.java
Patch:
@@ -61,7 +61,6 @@ public AsyncRunner handle() {
     }
 
     public void finishWrite() {
-        System.out.println("finishWrite 线程: " + Thread.currentThread());
         routeHandler.finishWrite(webContext.getHandlerContext(), request, response);
         WebContext.remove();
         isFinished = true;

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -101,7 +101,7 @@ public class NettyServer implements Server {
     private volatile boolean isStop;
 
     @Override
-    public void start(Blade blade, String[] args) throws Exception {
+    public void start(Blade blade) throws Exception {
         this.blade = blade;
         this.environment = blade.environment();
         this.processors = blade.processors();

File: src/test/java/com/blade/server/ServerTest.java
Patch:
@@ -13,14 +13,14 @@ public class ServerTest {
     @Test
     public void testCreateServer() throws Exception {
         Server server = new NettyServer();
-        server.start(Blade.me().listen(10086), null);
+        server.start(Blade.me().listen(10086));
         server.stop();
     }
 
     @Test
     public void testStart() throws Exception {
         NettyServer nettyServer = new NettyServer();
-        nettyServer.start(Blade.me().listen(10087), new String[]{"--server.address=127.0.0.1"});
+        nettyServer.start(Blade.of().listen(10087));
         nettyServer.stop();
     }
 }

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -17,7 +17,6 @@
 public class Hello {
 
     public static void main(String[] args) {
-
         Blade.of()
 //                .devMode(false)
 //                .environment(Const.ENV_KEY_NETTY_WORKERS, Runtime.getRuntime().availableProcessors())

File: src/main/java/com/blade/kit/ReflectKit.java
Patch:
@@ -1,6 +1,7 @@
 package com.blade.kit;
 
 import com.blade.exception.BladeException;
+import com.blade.exception.NewInstanceException;
 import lombok.experimental.UtilityClass;
 import lombok.extern.slf4j.Slf4j;
 
@@ -41,8 +42,8 @@ public static <T> T newInstance(Type type) {
             }
             return clazz.newInstance();
         } catch (Exception e) {
-            log.warn("new instance fail", e.getMessage());
-            return null;
+            log.warn("new instance fail :{}", e.getCause().toString());
+            throw new NewInstanceException(e.getCause().toString());
         }
     }
 

File: src/main/java/com/blade/kit/BladeCache.java
Patch:
@@ -28,7 +28,7 @@ public class BladeCache {
         PADDING_METHOD_STR.put("POST", StringKit.padRight("POST", 6));
         PADDING_METHOD_STR.put("DELETE", StringKit.padRight("DELETE", 6));
         PADDING_METHOD_STR.put("PUT", StringKit.padRight("PUT", 6));
-        PADDING_METHOD_STR.put("OPTION", StringKit.padRight("OPTION", 6));
+        PADDING_METHOD_STR.put("OPTIONS", StringKit.padRight("OPTIONS", 6));
         PADDING_METHOD_STR.put("HEAD", StringKit.padRight("HEAD", 6));
     }
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -31,7 +31,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.10.RELEASE";
+    String       VERSION                    = "2.0.11.ALPHA";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/server/netty/HttpServerDispatcher.java
Patch:
@@ -61,7 +61,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest req) {
         String method = BladeCache.getPaddingMethod(request.method());
 
         // set context request and response
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, ctx));
 
         try {
             if (isStaticFile(uri)) {

File: src/test/java/com/blade/mvc/handler/ExceptionHandlerTest.java
Patch:
@@ -28,7 +28,7 @@ public void before() {
         response = mock(Response.class);
 
         WebContext.init(Blade.me(), "/");
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, null));
     }
 
     @Test

File: src/test/java/com/blade/security/BasicAuthMiddlewareTest.java
Patch:
@@ -61,7 +61,7 @@ public void testAuthSuccess() throws Exception {
                 .targetType(AuthHandler.class)
                 .target(new AuthHandler()).build());
 
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, null));
 
         AuthOption authOption = AuthOption.builder().build();
         authOption.addUser("admin", "123456");
@@ -93,7 +93,7 @@ public void testAuthFail() throws Exception {
                 .targetType(AuthHandler.class)
                 .target(new AuthHandler()).build());
 
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, null));
 
         AuthOption authOption = AuthOption.builder().build();
         authOption.addUser("admin", "123456");

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -31,7 +31,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.10.RELEASE";
+    String       VERSION                    = "2.0.11.ALPHA";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/server/netty/HttpServerDispatcher.java
Patch:
@@ -61,7 +61,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest req) {
         String method = BladeCache.getPaddingMethod(request.method());
 
         // set context request and response
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, ctx));
 
         try {
             if (isStaticFile(uri)) {

File: src/test/java/com/blade/mvc/handler/ExceptionHandlerTest.java
Patch:
@@ -28,7 +28,7 @@ public void before() {
         response = mock(Response.class);
 
         WebContext.init(Blade.me(), "/");
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, null));
     }
 
     @Test

File: src/test/java/com/blade/security/BasicAuthMiddlewareTest.java
Patch:
@@ -61,7 +61,7 @@ public void testAuthSuccess() throws Exception {
                 .targetType(AuthHandler.class)
                 .target(new AuthHandler()).build());
 
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, null));
 
         AuthOption authOption = AuthOption.builder().build();
         authOption.addUser("admin", "123456");
@@ -93,7 +93,7 @@ public void testAuthFail() throws Exception {
                 .targetType(AuthHandler.class)
                 .target(new AuthHandler()).build());
 
-        WebContext.set(new WebContext(request, response));
+        WebContext.set(new WebContext(request, response, null));
 
         AuthOption authOption = AuthOption.builder().build();
         authOption.addUser("admin", "123456");

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -31,7 +31,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.9.RELEASE";
+    String       VERSION                    = "2.0.10.RELEASE";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";
@@ -40,8 +40,7 @@ public interface Const {
     String       HTTP_DATE_FORMAT           = "EEE, dd MMM yyyy HH:mm:ss zzz";
     String       INTERNAL_SERVER_ERROR_HTML = "<center><h1>500 Internal Server Error</h1><hr/></center>";
     String       DEFAULT_THREAD_NAME        = "_(:3」∠)_";
-    List<String> PLUGIN_PACKAGE_NAME        = new ArrayList<>(
-            Collections.singletonList("com.blade.plugin"));
+    List<String> PLUGIN_PACKAGE_NAME        = new ArrayList<>(Collections.singletonList("com.blade.plugin"));
     List<String> DEFAULT_STATICS            = new ArrayList<>(
             Arrays.asList("/favicon.ico", "/robots.txt", "/static", "/upload", "/webjars/"));
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -31,7 +31,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.9.RELEASE";
+    String       VERSION                    = "2.0.10.RELEASE";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";
@@ -40,8 +40,7 @@ public interface Const {
     String       HTTP_DATE_FORMAT           = "EEE, dd MMM yyyy HH:mm:ss zzz";
     String       INTERNAL_SERVER_ERROR_HTML = "<center><h1>500 Internal Server Error</h1><hr/></center>";
     String       DEFAULT_THREAD_NAME        = "_(:3」∠)_";
-    List<String> PLUGIN_PACKAGE_NAME        = new ArrayList<>(
-            Collections.singletonList("com.blade.plugin"));
+    List<String> PLUGIN_PACKAGE_NAME        = new ArrayList<>(Collections.singletonList("com.blade.plugin"));
     List<String> DEFAULT_STATICS            = new ArrayList<>(
             Arrays.asList("/favicon.ico", "/robots.txt", "/static", "/upload", "/webjars/"));
 

File: src/main/java/com/blade/kit/AsmKit.java
Patch:
@@ -31,6 +31,7 @@
  * @since 1.6.6
  */
 @UtilityClass
+@Deprecated
 public class AsmKit {
 
     /**

File: src/main/java/com/blade/server/netty/RouteMethodHandler.java
Patch:
@@ -317,14 +317,12 @@ public void handle(ChannelHandlerContext ctx, Request request, Response response
 
         // execution middleware
         if (hasMiddleware && !invokeMiddleware(routeMatcher.getMiddleware(), context)) {
-            handleResponse(request, context.response(), ctx);
             return;
         }
         context.injectParameters();
 
         // web hook before
         if (hasBeforeHook && !invokeHook(routeMatcher.getBefore(uri), context)) {
-            handleResponse(request, context.response(), ctx);
             return;
         }
 

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -2,9 +2,7 @@
 
 import com.blade.Blade;
 import com.blade.event.EventType;
-import com.blade.mvc.WebContext;
 import com.blade.mvc.http.EmptyBody;
-import com.mashape.unirest.http.Unirest;
 
 import java.io.File;
 import java.util.Random;
@@ -55,6 +53,7 @@ public static void main(String[] args) {
                 })
 //                .showFileList(true)
                 .gzip(true)
+                .enableCors(true)
                 .start();
     }
 

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -53,7 +53,8 @@ public static void main(String[] args) {
                 .event(EventType.SESSION_DESTROY, e -> {
                     System.out.println("session 失效了");
                 })
-                .showFileList(true)
+//                .showFileList(true)
+                .gzip(true)
                 .start();
     }
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.9.ALPHA3";
+    String       VERSION                    = "2.0.9-SNAPSHOT";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -342,7 +342,9 @@ public static HttpRequest build(FullHttpRequest fullHttpRequest, String remoteAd
             httpRequest.uri = cleanUri;
         }
 
-        httpRequest.session = SESSION_HANDLER.createSession(httpRequest);
+        if (null != SESSION_HANDLER) {
+            httpRequest.session = SESSION_HANDLER.createSession(httpRequest);
+        }
         return httpRequest;
     }
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.9.ALPHA2";
+    String       VERSION                    = "2.0.9.ALPHA3";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/server/netty/RouteMethodHandler.java
Patch:
@@ -314,15 +314,13 @@ public void handle(ChannelHandlerContext ctx, Request request, Response response
 
         // execution middleware
         if (hasMiddleware && !invokeMiddleware(routeMatcher.getMiddleware(), context)) {
-            context.body(EmptyBody.empty());
             handleResponse(context.response(), ctx, keepAlive);
             return;
         }
         context.injectParameters();
 
         // web hook before
         if (hasBeforeHook && !invokeHook(routeMatcher.getBefore(uri), context)) {
-            context.body(EmptyBody.empty());
             handleResponse(context.response(), ctx, keepAlive);
             return;
         }

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -227,9 +227,11 @@ private void startServer(long startMs) throws Exception {
         var appName = environment.get(ENV_KEY_APP_NAME, "Blade");
         var url     = Ansi.BgRed.and(Ansi.Black).format(" %s:%d ", address, port);
 
+        var protocol = SSL ? "https" : "http";
+
         log.info("{}{} initialize successfully, Time elapsed: {} ms", getStartedSymbol(), appName, (System.currentTimeMillis() - startMs));
         log.info("{}Blade start with {}", getStartedSymbol(), url);
-        log.info("{}Open browser access http://{}:{} ⚡\r\n", getStartedSymbol(), address.replace(DEFAULT_SERVER_ADDRESS, LOCAL_IP_ADDRESS), port);
+        log.info("{}Open browser access {}://{}:{} ⚡\r\n", getStartedSymbol(), protocol, address.replace(DEFAULT_SERVER_ADDRESS, LOCAL_IP_ADDRESS), port);
 
         blade.eventManager().fireEvent(EventType.SERVER_STARTED, blade);
     }

File: src/main/java/com/blade/mvc/route/Route.java
Patch:
@@ -52,7 +52,8 @@ public class Route {
      */
     private Method action;
 
-    private int sort;
+    @Builder.Default
+    private int sort = Integer.MAX_VALUE;
 
     /**
      * Url path params

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.blade.ioc.annotation.Order;
 import com.blade.kit.*;
+import com.blade.mvc.RouteContext;
 import com.blade.mvc.handler.RouteHandler;
 import com.blade.mvc.handler.RouteHandler0;
 import com.blade.mvc.hook.Signature;
@@ -60,11 +61,10 @@ private Route addRoute(HttpMethod httpMethod, String path, RouteHandler0 handler
 
     private Route addRoute(HttpMethod httpMethod, String path, RouteHandler handler, String methodName) throws NoSuchMethodException {
         Class<?> handleType = handler.getClass();
-        Method   method     = handleType.getMethod(methodName, Request.class, Response.class);
+        Method   method     = handleType.getMethod(methodName, RouteContext.class);
         return addRoute(httpMethod, path, handler, RouteHandler.class, method);
     }
 
-
     Route addRoute(Route route) {
         String     path           = route.getPath();
         HttpMethod httpMethod     = route.getHttpMethod();

File: src/test/java/com/blade/EnvironmentTest.java
Patch:
@@ -187,7 +187,9 @@ public void testAddAll() {
 
         Assert.assertEquals(1, environment.size());
 
-        environment.addAll(Collections.singletonMap("aa", "bb"));
+        Map<String, String> map = Collections.singletonMap("aa", "bb");
+
+        environment.addAll(map);
         Assert.assertEquals(2, environment.size());
     }
 

File: src/test/java/com/blade/kit/IOKitTest.java
Patch:
@@ -26,16 +26,16 @@ public void testCloseQuietly() throws FileNotFoundException {
 
     @Test
     public void testReadToString() throws IOException, URISyntaxException {
-        String content = IOKit.readToString(IOKitTest.class.getResourceAsStream("/app.properties"));
+        String content = IOKit.readToString(IOKitTest.class.getResourceAsStream("/application.properties"));
         Assert.assertEquals(true, StringKit.isNotBlank(content));
 
-        content = IOKit.readToString(Paths.get(IOKitTest.class.getResource("/app.properties").toURI()).toString());
+        content = IOKit.readToString(Paths.get(IOKitTest.class.getResource("/application.properties").toURI()).toString());
         Assert.assertEquals(true, StringKit.isNotBlank(content));
     }
 
     @Test
     public void testCopyFile() throws IOException {
-        IOKit.copyFile(new File(IOKitTest.class.getResource("/app.properties").getPath()), new File("./tmp.properties"));
+        IOKit.copyFile(new File(IOKitTest.class.getResource("/application.properties").getPath()), new File("./tmp.properties"));
         File tmp = new File("./tmp.properties");
         Assert.assertEquals(true, tmp.exists() && tmp.isFile());
         tmp.delete();

File: src/test/java/com/blade/mvc/HttpResponseTest.java
Patch:
@@ -74,10 +74,10 @@ public void testHeaders() {
         when(mockResponse.headers()).thenReturn(new HashMap<>());
 
         Response response = new HttpResponse(mockResponse);
-        assertEquals(0, response.headers().size());
+        assertEquals(3, response.headers().size());
 
         response.header("a", "123");
-        assertEquals(1, response.headers().size());
+        assertEquals(4, response.headers().size());
     }
 
     @Test
@@ -88,7 +88,7 @@ public void testHeader() {
         when(mockResponse.headers()).thenReturn(Collections.singletonMap("Server", "Nginx"));
 
         Response response = new HttpResponse(mockResponse);
-        assertEquals(1, response.headers().size());
+        assertEquals(4, response.headers().size());
         assertEquals("Nginx", response.headers().get("Server"));
     }
 

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -83,7 +83,7 @@ private void init(FullHttpRequest fullHttpRequest) {
             this.parameters.putAll(parameters);
         }
 
-        if (HttpConst.METHOD_POST.equals(this.method) && !isJsonRequest()) {
+        if (HttpConst.METHOD_POST.equals(this.method) && isFormRequest()) {
             HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(HTTP_DATA_FACTORY, fullHttpRequest);
             decoder.getBodyHttpDatas().forEach(this::parseData);
         }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.8.RELEASE";
+    String       VERSION                    = "2.0.9-SNAPSHOT";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -9,7 +9,6 @@
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.buffer.Unpooled;
-import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.http.FullHttpRequest;
 import io.netty.handler.codec.http.HttpHeaders;
 import io.netty.handler.codec.http.HttpUtil;
@@ -36,6 +35,7 @@ public class HttpRequest implements Request {
 
     private static final HttpDataFactory HTTP_DATA_FACTORY = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);
     private static final SessionHandler  SESSION_HANDLER   = WebContext.sessionManager() != null ? new SessionHandler(WebContext.blade()) : null;
+    private static final ByteBuf         EMPTY_BUF         = Unpooled.copiedBuffer("", CharsetUtil.UTF_8);
 
     static {
         DiskFileUpload.deleteOnExitTemporaryFile = true;
@@ -44,7 +44,7 @@ public class HttpRequest implements Request {
         DiskAttribute.baseDirectory = null;
     }
 
-    private ByteBuf body = Unpooled.copiedBuffer("", CharsetUtil.UTF_8);
+    private ByteBuf body = EMPTY_BUF;
     private String  remoteAddress;
     private String  uri;
     private String  url;
@@ -83,7 +83,7 @@ private void init(FullHttpRequest fullHttpRequest) {
             this.parameters.putAll(parameters);
         }
 
-        if (HttpConst.METHOD_POST.equals(this.method)) {
+        if (HttpConst.METHOD_POST.equals(this.method) && !isJsonRequest()) {
             HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(HTTP_DATA_FACTORY, fullHttpRequest);
             decoder.getBodyHttpDatas().forEach(this::parseData);
         }

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -35,6 +35,9 @@ public static void main(String[] args) {
                         e.printStackTrace();
                     }
                 })
+                .before("/*", (request, response) -> {
+                    System.out.println("Before...");
+                })
                 .get("/rand", ((request, response) -> {
                     try {
                         TimeUnit.MILLISECONDS.sleep(new Random().nextInt(1000));

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -62,7 +62,7 @@ public class HttpRequest implements Request {
     private void init(FullHttpRequest fullHttpRequest) {
         // headers
         HttpHeaders httpHeaders = fullHttpRequest.headers();
-        if (httpHeaders.isEmpty()) {
+        if (!httpHeaders.isEmpty()) {
             this.headers = new HashMap<>(httpHeaders.size());
             Iterator<Map.Entry<String, String>> entryIterator = httpHeaders.iteratorAsString();
             while (entryIterator.hasNext()) {

File: src/test/java/com/blade/mvc/ui/RestResponseTest.java
Patch:
@@ -35,7 +35,6 @@ public void testOk() {
     @Test
     public void testFail(){
         Assert.assertEquals(false, RestResponse.fail().isSuccess());
-        Assert.assertEquals(500, RestResponse.fail(500).getCode());
         Assert.assertEquals("error", RestResponse.fail("error").getMsg());
         Assert.assertEquals("error", RestResponse.fail(500, "error").getMsg());
     }

File: src/main/java/com/blade/validator/SimpleValidation.java
Patch:
@@ -31,7 +31,7 @@ public static <T> SimpleValidation<T> from(Predicate<T> predicate, String onErro
 
     @Override
     public ValidationResult test(T param) {
-        return predicate.test(param) ? ValidationResult.fail(onErrorMessage) : ValidationResult.ok();
+        return predicate.test(param) ? ValidationResult.ok() : ValidationResult.fail(onErrorMessage);
     }
 
 }
\ No newline at end of file

File: src/main/java/com/blade/Blade.java
Patch:
@@ -541,7 +541,9 @@ public Blade listen(@NonNull String address, int port) {
     public Blade use(@NonNull WebHook... middleware) {
         if (!BladeKit.isEmpty(middleware)) {
             this.middleware.addAll(Arrays.asList(middleware));
-            this.register(middleware);
+            for (WebHook webHook : middleware) {
+                this.register(webHook);
+            }
         }
         return this;
     }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.8-R1";
+    String       VERSION                    = "2.0.8-R2";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/test/java/com/blade/model/Person.java
Patch:
@@ -1,16 +1,17 @@
 package com.blade.model;
 
 import lombok.Data;
-import lombok.NoArgsConstructor;
 
 @Data
-@NoArgsConstructor
 public class Person {
 
     private String name;
     private String text;
     private int age;
 
+    public Person() {
+    }
+
     public Person(String name, String text, int age) {
         this.name = name;
         this.text = text;

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -60,6 +60,7 @@ public interface Const {
     String ENV_KEY_SESSION_TIMEOUT           = "http.session.timeout";
     String ENV_KEY_AUTH_USERNAME             = "http.auth.username";
     String ENV_KEY_AUTH_PASSWORD             = "http.auth.password";
+    String ENV_KEY_HTTP_CACHE_TIMEOUT        = "http.cache.timeout";
     String ENV_KEY_PAGE_404                  = "mvc.view.404";
     String ENV_KEY_PAGE_500                  = "mvc.view.500";
     String ENV_KEY_STATIC_DIRS               = "mvc.statics";

File: src/main/java/com/blade/server/netty/HttpConst.java
Patch:
@@ -35,7 +35,7 @@ public interface HttpConst {
     CharSequence LAST_MODIFIED  = AsciiString.cached("Last-Modified");
     CharSequence SERVER         = AsciiString.cached("Server");
     CharSequence SET_COOKIE     = AsciiString.cached("Set-Cookie");
-    CharSequence KEEP_ALIVE     = AsciiString.cached("Keep-Alive");
+    CharSequence KEEP_ALIVE     = AsciiString.cached("keep-alive");
 
     String CONTENT_TYPE_HTML = "text/html; charset=UTF-8";
 

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -39,7 +39,7 @@
 @Slf4j
 public class HttpRequest implements Request {
 
-    private static final HttpDataFactory HTTP_DATA_FACTORY = new DefaultHttpDataFactory(DefaultHttpDataFactory.MAXSIZE);
+    private static final HttpDataFactory HTTP_DATA_FACTORY = new DefaultHttpDataFactory(DefaultHttpDataFactory.MINSIZE);
     private static final SessionHandler  SESSION_HANDLER   = WebContext.sessionManager() != null ? new SessionHandler(WebContext.blade()) : null;
 
     static {
@@ -124,7 +124,7 @@ private void parseData(InterfaceHttpData data) {
                     break;
             }
         } catch (IOException e) {
-            log.error("parse request parameter error", e);
+            log.error("Parse request parameter error", e);
         } finally {
             data.release();
         }

File: src/main/java/com/blade/server/netty/HttpConst.java
Patch:
@@ -13,7 +13,7 @@
  * @date 2017/10/16
  */
 public interface HttpConst {
-    String IF_MODIFIED_SINCE   = "IF_MODIFIED_SINCE";
+    String IF_MODIFIED_SINCE   = "If-Modified-Since";
     String USER_AGENT          = "User-Agent";
     String CONTENT_TYPE_STRING = "Content-Type";
     String COOKIE_STRING       = "Cookie";

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.8-BETA2";
+    String       VERSION                    = "2.0.8-BETA3";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/kit/json/BeanSerializer.java
Patch:
@@ -24,7 +24,7 @@ public static Object serialize(SerializeMapping serializeMapping, Object bean) t
             return null;
         }
 
-        if (ReflectKit.isPrimitive(bean) || bean instanceof Number || bean instanceof Date
+        if (ReflectKit.isPrimitive(bean.getClass()) || bean instanceof Number || bean instanceof Date
                 || bean instanceof LocalDate || bean instanceof LocalDateTime) {
             return bean;
         }
@@ -312,7 +312,7 @@ public static <T, A> T[] deserialize(Class<T> componentType, A[] array) throws E
 
     public static <T> T deserialize(Class<T> klass, Object object) {
         try {
-            if (ReflectKit.isPrimitive(object)) {
+            if (ReflectKit.isPrimitive(object.getClass())) {
                 return (T) ReflectKit.convert(klass, object.toString());
             } else if (object instanceof Map) {
                 if (Map.class.isAssignableFrom(klass)) {

File: src/main/java/com/blade/kit/json/SampleJsonSerializer.java
Patch:
@@ -23,7 +23,7 @@ public static String serialize(Object object) throws IllegalArgumentException {
                     .replace("\t", "\\t").replace("\r", "\\r")
                     .replace("\f", "\\f").replace("\n", "\\n") + '\"';
         }
-        if (ReflectKit.isPrimitive(object)) {
+        if (ReflectKit.isPrimitive(object.getClass())) {
             return object.toString();
         }
         if (object instanceof Date || object instanceof BigDecimal) {

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -36,7 +36,7 @@ public static void main(String[] args) {
                     }
                     response.success();
                 }))
-                .use(new CsrfMiddleware())
+//                .use(new CsrfMiddleware())
                 .event(EventType.ENVIRONMENT_CHANGED, new ConfigChanged())
                 .start(Hello.class, args);
     }

File: src/main/java/com/blade/kit/BladeKit.java
Patch:
@@ -248,6 +248,9 @@ public static String getPrefixSymbol() {
     public static void logAddRoute(Logger log, Route route) {
         String method = StringKit.padRight(route.getHttpMethod().name(), 6);
         switch (route.getHttpMethod()) {
+            case ALL:
+                method = ColorKit.blankAndWhite(method);
+                break;
             case GET:
                 method = ColorKit.greenAndWhite(method);
                 break;

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.8-ALPHA2";
+    String       VERSION                    = "2.0.8-ALPHA3";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/kit/ReflectKit.java
Patch:
@@ -48,6 +48,9 @@ public static <T> T newInstance(Class<T> cls) {
     public static Object convert(Class<?> type, String value) {
 
         if (StringKit.isBlank(value)) {
+            if (type.equals(String.class)) {
+                return value;
+            }
             if (type.equals(int.class) || type.equals(double.class) ||
                     type.equals(short.class) || type.equals(long.class) ||
                     type.equals(byte.class) || type.equals(float.class)) {

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.8-ALPHA1";
+    String       VERSION                    = "2.0.8-ALPHA2";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/handler/RequestExecution.java
Patch:
@@ -111,7 +111,6 @@ public void run() {
             }
 
             // execute
-            signature.setRoute(route);
             this.routeHandle(signature);
 
             // webHook

File: src/main/java/com/blade/kit/ReflectKit.java
Patch:
@@ -48,6 +48,9 @@ public static <T> T newInstance(Class<T> cls) {
     public static Object convert(Class<?> type, String value) {
 
         if (StringKit.isBlank(value)) {
+            if (type.equals(String.class)) {
+                return value;
+            }
             if (type.equals(int.class) || type.equals(double.class) ||
                     type.equals(short.class) || type.equals(long.class) ||
                     type.equals(byte.class) || type.equals(float.class)) {

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.8-ALPHA1";
+    String       VERSION                    = "2.0.8-ALPHA2";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/handler/RequestExecution.java
Patch:
@@ -111,7 +111,6 @@ public void run() {
             }
 
             // execute
-            signature.setRoute(route);
             this.routeHandle(signature);
 
             // webHook

File: src/main/java/com/blade/kit/BladeKit.java
Patch:
@@ -164,8 +164,8 @@ public static String getCurrentClassPath() {
         } else {
             path = url.getPath();
         }
-        if (isWindows() && (path.startsWith("/") || path.startsWith("\\"))) {
-            return path.substring(1);
+        if (isWindows()) {
+            return path.replaceFirst("^/(.:/)", "$1");
         }
         return path;
     }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -34,7 +34,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.7-R1";
+    String       VERSION                    = "2.0.7-R2";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = BladeKit.getCurrentClassPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/Request.java
Patch:
@@ -416,7 +416,7 @@ default String header(@NonNull String name, @NonNull String defaultValue) {
      * @return set attribute value and return current request instance
      */
     default Request attribute(@NonNull String name, Object value) {
-        if (null != value) attributes().put(name, value);
+        this.attributes().put(name, value);
         return this;
     }
 

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -4,6 +4,7 @@
 import com.blade.event.EventType;
 
 /**
+ * 增强功能
  * @author biezhi
  * 2017/6/5
  */

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.7-ALPHA";
+    String       VERSION                    = "2.0.7-beta1";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.6-RELEASE";
+    String       VERSION                    = "2.0.6-R1";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.6-RELEASE";
+    String       VERSION                    = "2.0.6-R1";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/server/netty/StaticFileHandler.java
Patch:
@@ -298,7 +298,7 @@ private static String sanitizeUri(String uri) {
         // Gladle resources path
         File resourcesDirectory = new File(new File(Const.class.getResource("/").getPath()).getParent() + "/resources");
         if (resourcesDirectory.isDirectory()) {
-            return resourcesDirectory.getPath() + "/resources" + uri.substring(1);
+            return resourcesDirectory.getPath() + "/resources/" + uri.substring(1);
         }
         // Maven resources path
         return Const.CLASSPATH + File.separator + uri.substring(1);

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -148,7 +148,7 @@ private void startServer(long startTime) throws Exception {
         b.option(ChannelOption.SO_REUSEADDR, true);
         b.childOption(ChannelOption.SO_REUSEADDR, true);
 
-        int acceptThreadCount = environment.getInt(ENC_KEY_NETTY_ACCEPT_THREAD_COUNT, 0);
+        int acceptThreadCount = environment.getInt(ENC_KEY_NETTY_ACCEPT_THREAD_COUNT, 1);
         int ioThreadCount     = environment.getInt(ENV_KEY_NETTY_IO_THREAD_COUNT, 0);
 
         // enable epoll

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -149,7 +149,7 @@ private void startServer(long startTime) throws Exception {
         b.option(ChannelOption.SO_REUSEADDR, true);
         b.childOption(ChannelOption.SO_REUSEADDR, true);
 
-        int acceptThreadCount = environment.getInt(ENC_KEY_NETTY_ACCEPT_THREAD_COUNT, 0);
+        int acceptThreadCount = environment.getInt(ENC_KEY_NETTY_ACCEPT_THREAD_COUNT, 1);
         int ioThreadCount     = environment.getInt(ENV_KEY_NETTY_IO_THREAD_COUNT, 0);
 
         // enable epoll

File: src/main/java/com/blade/mvc/http/Request.java
Patch:
@@ -378,7 +378,8 @@ default String cookie(@NonNull String name, @NonNull String defaultValue) {
      * @return Return header information
      */
     default String header(@NonNull String name) {
-        return headers().getOrDefault(name, "");
+        String header = headers().getOrDefault(name, "");
+        return StringKit.isBlank(header) ? headers().getOrDefault(name.toLowerCase(), "") : header;
     }
 
     /**

File: src/main/java/com/blade/kit/StringKit.java
Patch:
@@ -75,7 +75,7 @@ public static boolean isAnyBlank(String... values) {
         if (CollectionKit.isEmpty(values)) {
             return true;
         }
-        return Stream.of(values).filter(StringKit::isBlank).count() > 0;
+        return Stream.of(values).filter(StringKit::isBlank).count() == values.length;
     }
 
     /**

File: src/main/java/com/blade/mvc/http/Cookie.java
Patch:
@@ -10,7 +10,7 @@ public class Cookie {
 
     private String  name     = null;
     private String  value    = null;
-    private String  domain   = "";
+    private String  domain   = null;
     private String  path     = "/";
     private long    maxAge   = -1;
     private boolean secure   = false;

File: src/test/java/com/blade/event/EventTest.java
Patch:
@@ -14,6 +14,7 @@ public void testEventAndBlade(){
         Event event = new Event(EventType.SERVER_STARTED, "hello");
         Assert.assertEquals("SERVER_STARTED", event.eventType.name());
         Assert.assertNotNull(event.data());
+        Assert.assertEquals("hello", event.data());
     }
 
 }
\ No newline at end of file

File: src/test/java/com/blade/mvc/route/RouteTest.java
Patch:
@@ -70,9 +70,9 @@ public void testPathParams() {
 
     @Test
     public void testRobotsRequest() throws Exception {
-        start(app.get("/:id", (req, res) -> req.pathInt("id")));
-        String body = bodyToString("/robots.txt");
-        System.out.println(body);
+//        start(app.get("/:id", (req, res) -> req.pathInt("id")));
+//        String body = bodyToString("/robots.txt");
+//        System.out.println(body);
     }
 
 }

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -143,7 +143,7 @@ private void startServer(long startTime) throws Exception {
         b.option(ChannelOption.SO_REUSEADDR, true);
         b.childOption(ChannelOption.SO_REUSEADDR, true);
 
-        int acceptThreadCount = environment.getInt(ENV_KEY_NETTY_ACCECPT_THREAD_COUNT, 0);
+        int acceptThreadCount = environment.getInt(ENC_KEY_NETTY_ACCEPT_THREAD_COUNT, 0);
         int ioThreadCount     = environment.getInt(ENV_KEY_NETTY_IO_THREAD_COUNT, 0);
 
         // enable epoll

File: src/main/java/com/blade/mvc/http/Request.java
Patch:
@@ -267,7 +267,7 @@ default double queryDouble(@NonNull String name, double defaultValue) {
     default String address() {
         String address = WebKit.ipAddress(this);
         if (StringKit.isBlank(address) || UNKNOWN_MAGIC.equalsIgnoreCase(address)) {
-            address = remoteAddress().split(":")[0];
+            address = remoteAddress().split(":")[0].substring(1);
         }
         if (StringKit.isBlank(address)) {
             address = "Unknown";

File: src/test/java/io/example/blog/controller/AuthController.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.blade.mvc.annotation.GetRoute;
 import com.blade.mvc.annotation.Path;
+import io.example.blog.model.User;
 
 /**
  * @author biezhi
@@ -11,8 +12,8 @@
 public class AuthController {
 
     @GetRoute("login")
-    public void login() {
-        System.out.println("login");
+    public void login(User user) {
+        System.out.println("login: " + user);
     }
 
 }

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -134,7 +134,7 @@ public void route(String path, Class<?> clazz, String methodName, HttpMethod htt
                 }
             }
         } catch (Exception e) {
-            log.error("", e);
+            log.error("Add route method error", e);
         }
     }
 

File: src/test/java/com/blade/mvc/route/RouteBuilderTest.java
Patch:
@@ -18,7 +18,7 @@ public void testCreateRouteBuilder() throws Exception {
         RouteMatcher routeMatcher = new RouteMatcher();
         RouteBuilder routeBuilder = new RouteBuilder(routeMatcher);
         routeBuilder.addRouter(DemoController.class, new DemoController());
-        routeBuilder.addWebHook(WebHook.class, (WebHook) signature -> true);
+        routeBuilder.addWebHook(WebHook.class, "/*", (WebHook) signature -> true);
 
         routeMatcher.register();
 

File: src/test/java/io/example/blog/hooks/Hook3.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.blade.ioc.annotation.Bean;
 import com.blade.ioc.annotation.Order;
+import com.blade.mvc.annotation.UrlPattern;
 import com.blade.mvc.hook.Signature;
 import com.blade.mvc.hook.WebHook;
 
@@ -11,6 +12,7 @@
  */
 @Order(3)
 @Bean
+@UrlPattern(values = "/auth/*")
 public class Hook3 implements WebHook {
 
     @Override

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.5-RELEASE";
+    String       VERSION                    = "2.0.6-Alpha1";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/server/netty/HttpServerHandler.java
Patch:
@@ -92,7 +92,7 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest fullHttpR
             Route route = routeMatcher.lookupRoute(request.method(), uri);
             if (null == route) {
                 log.warn("Not Found\t{}", uri);
-                throw new NotFoundException();
+                throw new NotFoundException(uri);
             }
 
             log.info("{}\t{}\t{}", request.protocol(), request.method(), uri);

File: src/main/java/com/blade/server/netty/StaticFileHandler.java
Patch:
@@ -77,7 +77,7 @@ public Boolean handle(ChannelHandlerContext ctx, Request request, Response respo
             InputStream input = StaticFileHandler.class.getResourceAsStream("/META-INF/resources" + uri);
             if (null == input) {
                 log.warn("Not Found\t{}", uri);
-                throw new NotFoundException();
+                throw new NotFoundException(uri);
             } else {
                 if (http304(ctx, request, -1)) {
                     return false;
@@ -108,7 +108,7 @@ public Boolean handle(ChannelHandlerContext ctx, Request request, Response respo
         File file = new File(path);
         if (file.isHidden() || !file.exists()) {
             log.warn("Not Found\t{}", uri);
-            throw new NotFoundException();
+            throw new NotFoundException(uri);
         }
 
         if (file.isDirectory() && showFileList) {

File: src/test/java/com/blade/exception/NotFoundExceptionTest.java
Patch:
@@ -13,7 +13,7 @@ public class NotFoundExceptionTest {
     @Test
     public void testNotFoundException() throws Exception {
         try {
-            throw new NotFoundException();
+            throw new NotFoundException("/hello");
         } catch (NotFoundException e) {
             assertEquals(e.getStatus(), 404);
             assertEquals(e.getName(), "Not Found");

File: src/test/java/com/blade/mvc/handler/ExceptionHandlerTest.java
Patch:
@@ -47,7 +47,7 @@ public void testInternalErrorException() throws Exception {
     public void testNotFoundException() throws Exception {
         DefaultExceptionHandler handler = new DefaultExceptionHandler();
         try {
-            throw new NotFoundException();
+            throw new NotFoundException("/hello");
         } catch (BladeException e) {
             handler.handle(e);
         }
@@ -59,7 +59,7 @@ public void testNotFoundException() throws Exception {
     public void testNotWriteBodyIfNotHtmlRequest() throws Exception {
         DefaultExceptionHandler handler = new DefaultExceptionHandler();
         try {
-            throw new NotFoundException();
+            throw new NotFoundException("/hello");
         } catch (BladeException e) {
             handler.handle(e);
         }

File: src/main/java/com/blade/kit/json/Ason.java
Patch:
@@ -73,6 +73,6 @@ public Short getShort(String key) {
 
     @Override
     public String toString() {
-        return JsonSerializer.serialize(this);
+        return SampleJsonSerializer.serialize(this);
     }
 }

File: src/main/java/com/blade/kit/json/SampleJsonSerializer.java
Patch:
@@ -9,7 +9,7 @@
 import java.util.Date;
 import java.util.Map;
 
-public class JsonSerializer {
+public class SampleJsonSerializer {
 
     private       int    position;
     private final char[] buffer;
@@ -69,10 +69,10 @@ public static String serialize(Object object) throws IllegalArgumentException {
      * @throws ParseException thrown when parsing a illegal json text
      */
     public static Object deserialize(String json) throws ParseException {
-        return new JsonSerializer(json).nextValue();
+        return new SampleJsonSerializer(json).nextValue();
     }
 
-    private JsonSerializer(String string) {
+    private SampleJsonSerializer(String string) {
         this.buffer = string.toCharArray();
         this.position = -1;
     }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.5-ALPHA3";
+    String       VERSION                    = "2.0.5-B1";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -59,7 +59,7 @@ public interface Const {
     String ENV_KEY_SERVER_PORT             = "server.port";
     String ENV_KEY_SSL                     = "server.ssl.enable";
     String ENV_KEY_SSL_CERT                = "server.ssl.cert-path";
-    String ENV_KEY_SSL_PRIVATEKEY          = "server.ssl.private-key-path";
+    String ENE_KEY_SSL_PRIVATE_KEY         = "server.ssl.private-key-path";
     String ENV_KEY_NETTY_BOOS_GROUP_NAME   = "server.netty.boos-name";
     String ENV_KEY_NETTY_WORKER_GROUP_NAME = "server.netty.worker-name";
     String ENV_KEY_NETTY_THREAD_COUNT      = "server.netty.thread-count";

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -133,7 +133,7 @@ private void startServer(long startTime) throws Exception {
         SslContext sslCtx = null;
         if (SSL) {
             String certFilePath   = environment.get(ENV_KEY_SSL_CERT, "");
-            String privateKeyPath = environment.get(ENV_KEY_SSL_PRIVATEKEY, "");
+            String privateKeyPath = environment.get(ENE_KEY_SSL_PRIVATE_KEY, "");
             log.info("⬢ SSL CertChainFile  Path: {}", certFilePath);
             log.info("⬢ SSL PrivateKeyFile Path: {}", privateKeyPath);
             sslCtx = SslContextBuilder.forServer(new File(certFilePath), new File(privateKeyPath)).build();

File: src/main/java/com/blade/kit/WebKit.java
Patch:
@@ -31,6 +31,9 @@ public static String ipAddr(Request request) {
         if (StringKit.isBlank(ipAddress) || UNKNOWN_MAGIC.equalsIgnoreCase(ipAddress)) {
             ipAddress = request.header("X-Real-IP");
         }
+        if (StringKit.isBlank(ipAddress) || UNKNOWN_MAGIC.equalsIgnoreCase(ipAddress)) {
+            ipAddress = request.header("Host");
+        }
         if (StringKit.isBlank(ipAddress)) {
             ipAddress = "127.0.0.1";
         }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.4-RELEASE";
+    String       VERSION                    = "2.0.5-SNAPSHOT";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -51,7 +51,7 @@ public class HttpRequest implements Request {
 
     private Map<String, String>       headers    = null;
     private Map<String, Object>       attributes = null;
-    private Map<String, List<String>> parameters = null;
+    private Map<String, List<String>> parameters = new HashMap<>();
     private Map<String, String>       pathParams = null;
     private Map<String, Cookie>       cookies    = new HashMap<>(4);
     private Map<String, FileItem>     fileItems  = new HashMap<>(4);

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.4-R2";
+    String       VERSION                    = "2.0.4-R3";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -72,7 +72,8 @@ private void init(FullHttpRequest fullHttpRequest) {
         // request query parameters
         Map<String, List<String>> parameters = new QueryStringDecoder(fullHttpRequest.uri(), CharsetUtil.UTF_8).parameters();
         if (null != parameters) {
-            this.parameters = parameters;
+            this.parameters = new HashMap<>();
+            this.parameters.putAll(parameters);
         } else {
             this.parameters = new HashMap<>();
         }

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -51,7 +51,7 @@ public class HttpRequest implements Request {
 
     private Map<String, String>       headers    = null;
     private Map<String, Object>       attributes = null;
-    private Map<String, List<String>> parameters = null;
+    private Map<String, List<String>> parameters = new HashMap<>();
     private Map<String, String>       pathParams = null;
     private Map<String, Cookie>       cookies    = new HashMap<>(4);
     private Map<String, FileItem>     fileItems  = new HashMap<>(4);

File: src/test/java/com/blade/mvc/handler/ExceptionHandlerTest.java
Patch:
@@ -57,15 +57,14 @@ public void testNotFoundException() throws Exception {
 
     @Test
     public void testNotWriteBodyIfNotHtmlRequest() throws Exception {
-        when(request.header("Accept")).thenReturn("");
         DefaultExceptionHandler handler = new DefaultExceptionHandler();
         try {
             throw new NotFoundException();
         } catch (BladeException e) {
             handler.handle(e);
         }
         verify(response).status(404);
-        verify(response, never()).html(any(String.class));
+        verify(response).html(any(String.class));
     }
 
 }

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -72,8 +72,7 @@ private void init(FullHttpRequest fullHttpRequest) {
         // request query parameters
         Map<String, List<String>> parameters = new QueryStringDecoder(fullHttpRequest.uri(), CharsetUtil.UTF_8).parameters();
         if (null != parameters) {
-            this.parameters = new HashMap<>(parameters.size());
-            this.parameters.putAll(parameters);
+            this.parameters = parameters;
         } else {
             this.parameters = Collections.EMPTY_MAP;
         }

File: src/main/java/com/blade/mvc/http/HttpResponse.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.blade.exception.NotFoundException;
 import com.blade.kit.StringKit;
-import com.blade.mvc.Const;
 import com.blade.mvc.WebContext;
 import com.blade.mvc.ui.ModelAndView;
 import com.blade.mvc.wrapper.OutputStreamWrapper;
@@ -61,7 +60,7 @@ public Response contentType(@NonNull CharSequence contentType) {
 
     @Override
     public String contentType() {
-        return String.valueOf(null == this.contentType ? Const.CONTENT_TYPE_HTML : this.contentType);
+        return null == this.contentType ? null : String.valueOf(this.contentType);
     }
 
     @Override

File: src/test/java/com/blade/mvc/RequestTest.java
Patch:
@@ -177,11 +177,11 @@ public void testAddress() throws Exception {
     @Test
     public void testContentType() throws Exception {
         start(
-                app.get("/c1", (request, response) -> response.text(response.contentType()))
+                app.get("/c1", (request, response) -> response.html("Hello"))
                         .get("/c2", (request, response) -> response.contentType("application/json; charset=UTF-8").text(response.contentType()))
         );
 
-        assertEquals(Const.CONTENT_TYPE_HTML, bodyToString("/c1"));
+        assertEquals(Const.CONTENT_TYPE_HTML, get("/c1").asString().getHeaders().getFirst("Content-Type"));
         assertEquals(Const.CONTENT_TYPE_JSON, bodyToString("/c2"));
     }
 

File: src/test/java/com/blade/mvc/ResponseTest.java
Patch:
@@ -62,12 +62,11 @@ public void testNotFound() throws Exception {
     @Test
     public void testContentType() throws Exception {
         start(
-                app.get("/c1", ((request, response) -> response.text(response.contentType())))
+                app.get("/c1", ((request, response) -> response.html("Hello")))
                         .get("/c2", ((request, response) -> response.contentType("a/b").text(response.contentType())))
         );
-        String c1 = bodyToString("/c1");
         String c2 = bodyToString("/c2");
-        assertEquals(Const.CONTENT_TYPE_HTML, c1);
+        assertEquals(Const.CONTENT_TYPE_HTML, get("/c1").asString().getHeaders().getFirst(CONTENT_TYPE));
         assertEquals("a/b", c2);
     }
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.4-R1";
+    String       VERSION                    = "2.0.4-R2";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -58,7 +58,7 @@ public class HttpRequest implements Request {
 
     private void init(FullHttpRequest fullHttpRequest) {
         // headers
-        HttpHeaders httpHeaders = fullHttpRequest.trailingHeaders();
+        HttpHeaders httpHeaders = fullHttpRequest.headers();
         if (httpHeaders.size() > 0) {
             this.headers = new HashMap<>(httpHeaders.size());
             httpHeaders.forEach((header) -> headers.put(header.getKey(), header.getValue()));
@@ -72,7 +72,8 @@ private void init(FullHttpRequest fullHttpRequest) {
         // request query parameters
         Map<String, List<String>> parameters = new QueryStringDecoder(fullHttpRequest.uri(), CharsetUtil.UTF_8).parameters();
         if (null != parameters) {
-            this.parameters = parameters;
+            this.parameters = new HashMap<>(parameters.size());
+            this.parameters.putAll(parameters);
         } else {
             this.parameters = Collections.EMPTY_MAP;
         }

File: src/main/java/com/blade/mvc/http/HttpResponse.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.blade.exception.NotFoundException;
 import com.blade.kit.StringKit;
+import com.blade.mvc.Const;
 import com.blade.mvc.WebContext;
 import com.blade.mvc.ui.ModelAndView;
 import com.blade.mvc.wrapper.OutputStreamWrapper;
@@ -60,7 +61,7 @@ public Response contentType(@NonNull CharSequence contentType) {
 
     @Override
     public String contentType() {
-        return String.valueOf(this.contentType);
+        return String.valueOf(null == this.contentType ? Const.CONTENT_TYPE_HTML : this.contentType);
     }
 
     @Override

File: src/main/java/com/blade/Environment.java
Patch:
@@ -161,10 +161,11 @@ public static Environment of(@NonNull String location) {
      * @return return Environment instance
      */
     private static Environment loadClasspath(@NonNull String classpath) {
+        String path = classpath;
         if (classpath.startsWith(HttpConst.SLASH)) {
-            classpath = classpath.substring(1);
+            path = classpath.substring(1);
         }
-        InputStream is = getDefault().getResourceAsStream(classpath);
+        InputStream is = getDefault().getResourceAsStream(path);
         if (null == is) {
             return new Environment();
         }

File: src/main/java/com/blade/kit/json/BeanSerializer.java
Patch:
@@ -42,7 +42,7 @@ public static Object serialize(SerializeMapping serializeMapping, Object bean) t
 
         if (bean instanceof Map) {
             Map map = (Map) bean;
-            map.forEach((key, value) -> {
+            map.forEach((Object key, Object value) -> {
                 try {
                     map.put(key, serialize(serializeMapping, value));
                 } catch (Exception e) {

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -246,7 +246,7 @@ private void initConfig() {
         }
 
         String templatePath = environment.get(ENV_KEY_TEMPLATE_PATH, "templates");
-        if (templatePath.charAt(0) == CHAR_SLAT) {
+        if (templatePath.charAt(0) == HttpConst.CHAR_SLASH) {
             templatePath = templatePath.substring(1);
         }
         if (templatePath.endsWith(HttpConst.SLASH)) {

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -36,8 +36,6 @@ public interface Const {
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";
     String       CONTENT_TYPE_JSON          = "application/json; charset=UTF-8";
     String       CONTENT_TYPE_TEXT          = "text/plain; charset=UTF-8";
-    String       X_POWER_BY                 = "X-Powered-By";
-    String       HEADER_SERVER              = "Server";
     String       HTTP_DATE_FORMAT           = "EEE, dd MMM yyyy HH:mm:ss zzz";
     String       INTERNAL_SERVER_ERROR_HTML = "<center><h1>500 Internal Server Error</h1><hr/></center>";
     List<String> PLUGIN_PACKAGE_NAME        = Arrays.asList("com.blade.plugin");

File: src/main/java/com/blade/ioc/reader/JarReaderImpl.java
Patch:
@@ -1,5 +1,6 @@
 package com.blade.ioc.reader;
 
+import lombok.EqualsAndHashCode;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -19,6 +20,7 @@
  * @author <a href="mailto:biezhi.me@gmail.com" target="_blank">biezhi</a>
  * @since 1.0
  */
+@EqualsAndHashCode
 public class JarReaderImpl extends AbstractClassReader implements ClassReader {
 
     private static final Logger log = LoggerFactory.getLogger(JarReaderImpl.class);

File: src/main/java/com/blade/kit/json/JsonSerializer.java
Patch:
@@ -208,13 +208,13 @@ else if (tmp <= 'f' && tmp >= 'a')
             while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0)
                 c = this.buffer[++position];
             String substr = new String(buffer, startPosition, position-- - startPosition);
-            if (substr.equalsIgnoreCase("true")) {
+            if ("true".equalsIgnoreCase(substr)) {
                 return (Boolean.TRUE);
             }
-            if (substr.equalsIgnoreCase("false")) {
+            if ("false".equalsIgnoreCase(substr)) {
                 return (Boolean.FALSE);
             }
-            if (substr.equalsIgnoreCase("null")) {
+            if ("null".equalsIgnoreCase(substr)) {
                 return null;
             }
 

File: src/main/java/com/blade/mvc/handler/MethodArgument.java
Patch:
@@ -220,7 +220,7 @@ private static Object parseModel(Class<?> argType, Request request, String name)
 
         for (Field field : fields) {
             field.setAccessible(true);
-            if (field.getName().equals("serialVersionUID")) {
+            if ("serialVersionUID".equals(field.getName())) {
                 continue;
             }
             Optional<String> fieldValue = request.query(field.getName());

File: src/main/java/com/blade/mvc/http/HttpRequest.java
Patch:
@@ -67,7 +67,7 @@ private void init(FullHttpRequest fullHttpRequest) {
         // request query parameters
         this.parameters.putAll(new QueryStringDecoder(fullHttpRequest.uri(), CharsetUtil.UTF_8).parameters());
 
-        if (!fullHttpRequest.method().name().equals("GET")) {
+        if (!"GET".equals(fullHttpRequest.method().name())) {
             HttpPostRequestDecoder decoder = new HttpPostRequestDecoder(HTTP_DATA_FACTORY, fullHttpRequest);
             decoder.getBodyHttpDatas().stream().forEach(this::parseData);
         }

File: src/main/java/com/blade/kit/AsmKit.java
Patch:
@@ -73,6 +73,7 @@ public static String[] getMethodParamNames(final Method m) throws IOException {
             return null;
         }
         cr.accept(new ClassVisitor(Opcodes.ASM5) {
+            @Override
             public MethodVisitor visitMethod(final int access, final String name, final String desc, final String signature, final String[] exceptions) {
                 final Type[] args = Type.getArgumentTypes(desc);
                 // 方法名相同并且参数个数相同
@@ -81,6 +82,7 @@ public MethodVisitor visitMethod(final int access, final String name, final Stri
                 }
                 MethodVisitor v = super.visitMethod(access, name, desc, signature, exceptions);
                 return new MethodVisitor(Opcodes.ASM5, v) {
+                    @Override
                     public void visitLocalVariable(String name, String desc, String signature, Label start, Label end, int index) {
                         int i = index - 1;
                         // 如果是静态方法，则第一就是参数

File: src/main/java/com/blade/mvc/ui/HtmlCreator.java
Patch:
@@ -147,6 +147,7 @@ public HtmlCreator center(String text) {
         return this;
     }
 
+    @Override
     public String toString() {
         return html.toString();
     }

File: src/main/java/com/blade/security/web/filter/InputFilter.java
Patch:
@@ -76,6 +76,7 @@ public InputFilter htmlFilter() {
         return this;
     }
 
+    @Override
     public String toString() {
         return this.value;
     }

File: src/main/java/com/blade/kit/Hashids.java
Patch:
@@ -27,6 +27,8 @@ public class Hashids {
     private static final String DEFAULT_SEPS     = "cfhistuCFHISTU";
     private static final String DEFAULT_SALT     = "";
 
+    private static final Pattern PATTERN = Pattern.compile("[\\w\\W]{1,12}");
+
     private static final int    DEFAULT_MIN_HASH_LENGTH = 0;
     private static final int    MIN_ALPHABET_LENGTH     = 16;
     private static final double SEP_DIV                 = 3.5;
@@ -176,7 +178,7 @@ public String encodeHex(String hexa) {
         }
 
         final List<Long> matched = new ArrayList<Long>();
-        final Matcher    matcher = Pattern.compile("[\\w\\W]{1,12}").matcher(hexa);
+        final Matcher    matcher = PATTERN.matcher(hexa);
 
         while (matcher.find()) {
             matched.add(Long.parseLong("1" + matcher.group(), 16));

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.3-alpha2";
+    String       VERSION                    = "2.0.3-beta";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -30,7 +30,7 @@ public interface Const {
     int          DEFAULT_SERVER_PORT        = 9000;
     String       DEFAULT_SERVER_ADDRESS     = "0.0.0.0";
     String       LOCAL_IP_ADDRESS           = "127.0.0.1";
-    String       VERSION                    = "2.0.3-alpha2";
+    String       VERSION                    = "2.0.3-beta";
     String       WEB_JARS                   = "/webjars/";
     String       CLASSPATH                  = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML          = "text/html; charset=UTF-8";

File: src/main/java/com/blade/Blade.java
Patch:
@@ -422,7 +422,8 @@ public Blade await() {
 
     public void stop() {
         eventManager.fireEvent(EventType.SERVER_STOPPING, this);
-        nettyServer.stop();
+        nettyServer.stopAndWait();
         eventManager.fireEvent(EventType.SERVER_STOPPED, this);
     }
+
 }

File: src/main/java/com/blade/server/Server.java
Patch:
@@ -16,4 +16,6 @@ public interface Server {
 
     void stop();
 
+    void stopAndWait();
+
 }

File: src/test/java/com/blade/BaseTestCase.java
Patch:
@@ -1,6 +1,5 @@
 package com.blade;
 
-import com.blade.mvc.handler.RouteHandler;
 import com.mashape.unirest.http.Unirest;
 import com.mashape.unirest.request.HttpRequest;
 import com.mashape.unirest.request.HttpRequestWithBody;
@@ -15,7 +14,6 @@
 @Slf4j
 public class BaseTestCase {
 
-    protected RouteHandler OK_HANDLER = (req, res) -> res.text("OK");
     protected Blade app;
     private   String origin    = "http://127.0.0.1:10086";
     protected String firefoxUA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0";

File: src/main/java/com/blade/Blade.java
Patch:
@@ -422,7 +422,8 @@ public Blade await() {
 
     public void stop() {
         eventManager.fireEvent(EventType.SERVER_STOPPING, this);
-        nettyServer.stop();
+        nettyServer.stopAndWait();
         eventManager.fireEvent(EventType.SERVER_STOPPED, this);
     }
+
 }

File: src/main/java/com/blade/server/Server.java
Patch:
@@ -16,4 +16,6 @@ public interface Server {
 
     void stop();
 
+    void stopAndWait();
+
 }

File: src/test/java/com/blade/BaseTestCase.java
Patch:
@@ -1,6 +1,5 @@
 package com.blade;
 
-import com.blade.mvc.handler.RouteHandler;
 import com.mashape.unirest.http.Unirest;
 import com.mashape.unirest.request.HttpRequest;
 import com.mashape.unirest.request.HttpRequestWithBody;
@@ -15,7 +14,6 @@
 @Slf4j
 public class BaseTestCase {
 
-    protected RouteHandler OK_HANDLER = (req, res) -> res.text("OK");
     protected Blade app;
     private   String origin    = "http://127.0.0.1:10086";
     protected String firefoxUA = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0";

File: src/test/java/com/blade/mvc/handler/RequestInvokerTest.java
Patch:
@@ -39,6 +39,9 @@ public void testRequestHandlerWebHook() throws Exception {
         signature.setRoute(Route.builder()
                 .target(new IndexController())
                 .action(IndexController.class.getMethod("users", String.class))
+                .httpMethod(HttpMethod.GET)
+                .targetType(IndexController.class)
+                .path("/users")
                 .build());
 
         Route route = new RouteMatcher().addRoute("/*", new BladeWebHookType(), HttpMethod.BEFORE);

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -268,10 +268,10 @@ public void stop() {
         try {
             log.info("⬢ Blade shutdown");
             if (this.bossGroup != null) {
-                this.bossGroup.shutdownGracefully().sync();
+                this.bossGroup.shutdownGracefully();
             }
             if (this.workerGroup != null) {
-                this.workerGroup.shutdownGracefully().sync();
+                this.workerGroup.shutdownGracefully();
             }
             if (bossExecutors != null) {
                 bossExecutors.shutdown();

File: src/main/java/com/blade/server/netty/HttpServerHandler.java
Patch:
@@ -67,16 +67,18 @@ protected void channelRead0(ChannelHandlerContext ctx, FullHttpRequest fullHttpR
         Signature signature = Signature.builder().request(request).response(response).build();
 
         try {
+
             // request uri
             String uri = request.uri();
-            log.info("{}\t{}\t{}", request.protocol(), request.method(), uri);
 
             // write session
             WebContext.set(new WebContext(request, response));
 
             if (isStaticFile(uri)) {
                 staticFileHandler.handle(ctx, request, response);
                 return;
+            } else {
+                log.info("{}\t{}\t{}", request.protocol(), request.method(), uri);
             }
 
             Route route = routeMatcher.lookupRoute(request.method(), uri);

File: src/main/java/com/blade/server/netty/StaticFileHandler.java
Patch:
@@ -26,6 +26,7 @@
 import java.io.InputStream;
 import java.io.RandomAccessFile;
 import java.net.URLConnection;
+import java.net.URLDecoder;
 import java.time.Instant;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
@@ -70,7 +71,8 @@ public Boolean handle(ChannelHandlerContext ctx, Request request, Response respo
             return false;
         }
 
-        String uri = request.uri();
+        String uri = URLDecoder.decode(request.uri(), "UTF-8");
+        log.info("{}\t{}\t{}", request.protocol(), request.method(), uri);
 
         if (uri.startsWith(Const.WEB_JARS)) {
             InputStream input = StaticFileHandler.class.getResourceAsStream("/META-INF/resources" + uri);

File: src/main/java/com/blade/mvc/handler/DefaultExceptionHandler.java
Patch:
@@ -11,8 +11,7 @@
 import java.io.StringWriter;
 import java.util.Optional;
 
-import static com.blade.mvc.Const.ENV_KEY_PAGE_404;
-import static com.blade.mvc.Const.ENV_KEY_PAGE_500;
+import static com.blade.mvc.Const.*;
 
 /**
  * Default exception handler implements
@@ -84,7 +83,7 @@ private void render500(Request request, Response response) {
             if (blade.devMode()) {
                 response.html("<h1>" + request.attribute("title") + "</h1><p>" + request.attribute("message") + "</p>");
             } else {
-                response.body("Internal Server Error");
+                response.html(INTERNAL_SERVER_ERROR_HTML);
             }
         }
     }

File: src/test/java/io/example/blog/Application.java
Patch:
@@ -22,6 +22,7 @@ public static void main(String[] args) {
         map.put("jdk", 1.8);
 
         Blade.me()
+                .devMode(false)
                 .use((invoker) -> {
                     System.out.println("hello...");
                     return true;

File: src/test/java/io/example/blog/controller/IndexController.java
Patch:
@@ -12,7 +12,6 @@
 import io.example.blog.service.AService;
 
 import java.io.File;
-import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
@@ -28,8 +27,8 @@ public class IndexController {
     private AService aService;
 
     @GetRoute(value = "/hello")
-    public void index(@Param Date text, Response response) {
-        System.out.println(text);
+    public void index(Response response) {
+        int a = 1/0;
         response.text("hello world!");
     }
 

File: src/main/java/com/blade/mvc/annotation/CookieParam.java
Patch:
@@ -13,8 +13,6 @@
 @Documented
 public @interface CookieParam {
 
-    boolean required() default false;
-
     String value() default "";
 
     String defaultValue() default "";

File: src/main/java/com/blade/mvc/annotation/HeaderParam.java
Patch:
@@ -13,8 +13,6 @@
 @Documented
 public @interface HeaderParam {
 
-    boolean required() default false;
-
     String value() default "";
 
     String defaultValue() default "";

File: src/main/java/com/blade/mvc/annotation/Param.java
Patch:
@@ -13,8 +13,6 @@
 @Documented
 public @interface Param {
 
-    boolean required() default false;
-
     String name() default "";
 
     String defaultValue() default "";

File: src/main/java/com/blade/mvc/annotation/QueryParam.java
Patch:
@@ -16,8 +16,6 @@
 @Documented
 public @interface QueryParam {
 
-    boolean required() default false;
-
     String name() default "";
 
     String defaultValue() default "";

File: src/test/java/io/example/blog/controller/IndexController.java
Patch:
@@ -12,6 +12,7 @@
 import io.example.blog.service.AService;
 
 import java.io.File;
+import java.util.Date;
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Optional;
@@ -27,7 +28,8 @@ public class IndexController {
     private AService aService;
 
     @GetRoute(value = "/hello")
-    public void index(Response response) {
+    public void index(@Param Date text, Response response) {
+        System.out.println(text);
         response.text("hello world!");
     }
 

File: src/main/java/com/blade/mvc/handler/DefaultExceptionHandler.java
Patch:
@@ -36,8 +36,11 @@ public void handle(Exception e) {
     private void handleException(Exception e, Request request, Response response) {
         e.printStackTrace();
         response.status(500);
+
         request.attribute("title", "500 Internal Server Error");
         request.attribute("message", e.getMessage());
+        request.attribute("stackTrace", getStackTrace(e));
+
         this.render500(request, response);
     }
 

File: src/main/java/com/blade/mvc/ui/template/DefaultEngine.java
Patch:
@@ -34,6 +34,8 @@ public void render(ModelAndView modelAndView, Writer writer) throws BladeExcepti
 
             Map<String, Object> attributes = new HashMap<>();
             attributes.putAll(request.attributes());
+            attributes.putAll(modelAndView.getModel());
+
             Session session = request.session();
             if (null != session) {
                 attributes.putAll(session.attributes());

File: src/main/java/com/blade/mvc/http/HttpResponse.java
Patch:
@@ -140,6 +140,9 @@ public Response removeCookie(@NonNull String name) {
             cookie.setValue("");
             cookie.setMaxAge(-1);
         });
+        Cookie nettyCookie = new DefaultCookie(name, "");
+        nettyCookie.setMaxAge(-1);
+        this.cookies.add(nettyCookie);
         return this;
     }
 

File: src/main/java/com/blade/kit/ReflectKit.java
Patch:
@@ -38,6 +38,7 @@ public static Object convert(Class<?> type, String value) {
             if (type.equals(boolean.class)) {
                 return false;
             }
+            return null;
         }
 
         if (type.equals(int.class) || type.equals(Integer.class)) {

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -29,7 +29,7 @@ public interface Const {
 
     int          DEFAULT_SERVER_PORT    = 9000;
     String       DEFAULT_SERVER_ADDRESS = "0.0.0.0";
-    String       VERSION                = "2.0.1-beta2";
+    String       VERSION                = "2.0.1";
     String       WEB_JARS               = "/webjars/";
     String       CLASSPATH              = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML      = "text/html; charset=UTF-8";

File: src/main/java/com/blade/mvc/http/HttpResponse.java
Patch:
@@ -202,7 +202,7 @@ public void render(@NonNull ModelAndView modelAndView) {
         StringWriter sw = new StringWriter();
         try {
             templateEngine.render(modelAndView, sw);
-            ByteBuf          buffer   = Unpooled.wrappedBuffer(sw.toString().getBytes());
+            ByteBuf          buffer   = Unpooled.wrappedBuffer(sw.toString().getBytes("utf-8"));
             FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(statusCode), buffer);
             this.send(response);
         } catch (Exception e) {

File: src/main/java/com/blade/mvc/http/HttpResponse.java
Patch:
@@ -202,7 +202,7 @@ public void render(@NonNull ModelAndView modelAndView) {
         StringWriter sw = new StringWriter();
         try {
             templateEngine.render(modelAndView, sw);
-            ByteBuf          buffer   = Unpooled.wrappedBuffer(sw.toString().getBytes());
+            ByteBuf          buffer   = Unpooled.wrappedBuffer(sw.toString().getBytes("utf-8"));
             FullHttpResponse response = new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.valueOf(statusCode), buffer);
             this.send(response);
         } catch (Exception e) {

File: src/main/java/com/blade/mvc/handler/MethodArgument.java
Patch:
@@ -140,6 +140,7 @@ private static Object getQueryParam(Class<?> argType, QueryParam queryParam, Str
             }
             return getRequestParam(argType, val.get());
         } else {
+            name = queryParam.name();
             return parseModel(argType, request, name);
         }
     }
@@ -157,6 +158,7 @@ private static Object getParam(Class<?> argType, Param param, String paramName,
             }
             return getRequestParam(argType, val.get());
         } else {
+            name = param.name();
             return parseModel(argType, request, name);
         }
     }
@@ -212,7 +214,7 @@ private static Object parseModel(Class<?> argType, Request request, String name)
                     continue;
                 }
                 Optional<String> fieldValue = request.query(field.getName());
-                if (null != name) {
+                if (StringKit.isNotBlank(name)) {
                     String fieldName = name + "[" + field.getName() + "]";
                     fieldValue = request.query(fieldName);
                 }

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -31,7 +31,7 @@ public interface Const {
     String       DEFAULT_SERVER_ADDRESS = "0.0.0.0";
     String       VERSION                = "2.0.1-alpha3";
     String       WEB_JARS               = "/webjars/";
-    String       CLASSPATH              = new File(Const.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getPath();
+    String       CLASSPATH              = new File(Const.class.getResource("/").getPath()).getPath();
     String       CONTENT_TYPE_HTML      = "text/html; charset=UTF-8";
     String       CONTENT_TYPE_JSON      = "application/json; charset=UTF-8";
     String       CONTENT_TYPE_TEXT      = "text/plain; charset=UTF-8";

File: src/test/java/com/blade/RequestTest.java
Patch:
@@ -282,10 +282,10 @@ public void testFileItems() throws Exception {
                         })
         );
 
-        String body = post("/upload1").part("file1", "a.txt", new File(Const.CLASSPATH + "log_config.txt")).body();
+        String body = post("/upload1").part("file1", "a.txt", new File(Const.CLASSPATH + File.separator + "log_config.txt")).body();
         assertThat(body, is("{\"file1\":{\"name\":\"file1\",\"fileName\":\"a.txt\",\"contentType\":\"text/plain\",\"length\":1551}}"));
 
-        body = post("/upload2").part("file1", "a.txt", new File(Const.CLASSPATH + "log_config.txt")).body();
+        body = post("/upload2").part("file1", "a.txt", new File(Const.CLASSPATH + File.separator + "log_config.txt")).body();
         assertThat(body, is("{\"name\":\"file1\",\"fileName\":\"a.txt\",\"contentType\":\"text/plain\",\"length\":1551}"));
     }
 

File: src/test/java/io/example/blog/controller/IndexController.java
Patch:
@@ -88,7 +88,7 @@ public void empty() {
 
     @GetRoute(value = "download")
     public void download(Response response) throws Exception {
-        String path = Const.CLASSPATH + "static/a.txt";
+        String path = Const.CLASSPATH + File.separator + "static/a.txt";
         response.download("文件.txt", new File(path));
     }
 

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.blade.mvc;
 
+import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 
@@ -28,9 +29,9 @@ public interface Const {
 
     int          DEFAULT_SERVER_PORT    = 9000;
     String       DEFAULT_SERVER_ADDRESS = "0.0.0.0";
-    String       VERSION                = "2.0.1-alpha2";
+    String       VERSION                = "2.0.1-alpha3";
     String       WEB_JARS               = "/webjars/";
-    String       CLASSPATH              = Const.class.getResource("/").getPath();
+    String       CLASSPATH              = new File(Const.class.getProtectionDomain().getCodeSource().getLocation().getPath()).getPath();
     String       CONTENT_TYPE_HTML      = "text/html; charset=UTF-8";
     String       CONTENT_TYPE_JSON      = "application/json; charset=UTF-8";
     String       CONTENT_TYPE_TEXT      = "text/plain; charset=UTF-8";

File: src/main/java/com/blade/mvc/ui/template/DefaultEngine.java
Patch:
@@ -27,7 +27,7 @@ public class DefaultEngine implements TemplateEngine {
     public void render(ModelAndView modelAndView, Writer writer) throws BladeException {
         String view = modelAndView.getView();
         String viewPath = Const.CLASSPATH + TEMPLATE_PATH + File.separator + view;
-        viewPath = viewPath.replace("//", "/");
+        viewPath = viewPath.replace("[//]", "/");
         try {
             Request request = WebContext.request();
             String body = IOKit.readToString(viewPath);

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -199,9 +199,7 @@ private void loadConfig(String[] args) {
     private void initConfig() {
 
         if (null != blade.bootClass()) {
-            if (blade.scanPackages().size() == 1 && blade.scanPackages().contains(PLUGIN_PACKAGE_NAME)) {
-                blade.scanPackages(blade.bootClass().getPackage().getName());
-            }
+            blade.scanPackages(blade.bootClass().getPackage().getName());
         }
 
         DefaultUI.printBanner();

File: src/main/java/com/blade/security/web/csrf/CsrfMiddleware.java
Patch:
@@ -1,5 +1,6 @@
 package com.blade.security.web.csrf;
 
+import com.blade.kit.StringKit;
 import com.blade.kit.UUID;
 import com.blade.mvc.WebContext;
 import com.blade.mvc.hook.Signature;
@@ -52,7 +53,7 @@ public boolean before(Signature signature) {
         } else {
             Method method = signature.getAction();
             ValidToken validToken = method.getAnnotation(ValidToken.class);
-            if (null != validToken || signature.getRequest().query(csrfConfig.getKey()).isPresent()) {
+            if (null != validToken || StringKit.equals(Boolean.TRUE.toString(), signature.getRequest().header(csrfConfig.getValidId()))) {
                 return validation();
             }
         }

File: src/main/java/com/blade/mvc/hook/Signature.java
Patch:
@@ -48,7 +48,7 @@ public void setRoute(Route route) throws BladeException {
         }
     }
 
-    public void initParameters() throws BladeException {
+    private void initParameters() throws BladeException {
         try {
             if (null != this.action) {
                 this.parameters = MethodArgument.getArgs(this);

File: src/main/java/com/blade/security/web/xss/XssMiddleware.java
Patch:
@@ -1,4 +1,4 @@
-package com.blade.security.web;
+package com.blade.security.web.xss;
 
 import com.blade.mvc.hook.Signature;
 import com.blade.mvc.hook.WebHook;

File: src/test/java/io/example/blog/Application.java
Patch:
@@ -1,7 +1,7 @@
 package io.example.blog;
 
 import com.blade.Blade;
-import com.blade.mvc.middlewares.CsrfMiddleware;
+import com.blade.security.web.csrf.CsrfMiddleware;
 
 import java.util.HashMap;
 import java.util.Map;

File: src/main/java/com/blade/mvc/http/HttpResponse.java
Patch:
@@ -158,7 +158,7 @@ public Map<String, String> cookies() {
     }
 
     @Override
-    public void donwload(@NonNull String fileName, @NonNull File file) throws Exception {
+    public void download(@NonNull String fileName, @NonNull File file) throws Exception {
         try {
             if (null == file || !file.exists() || !file.isFile()) {
                 Assert.throwException("please check the file is effective!");

File: src/main/java/com/blade/mvc/http/Response.java
Patch:
@@ -224,7 +224,7 @@ default void body(@NonNull ByteBuf byteBuf) {
      * @param fileName give client file name
      * @param file
      */
-    void donwload(String fileName, File file) throws Exception;
+    void download(String fileName, File file) throws Exception;
 
     /**
      * Render view

File: src/main/java/com/blade/Blade.java
Patch:
@@ -281,7 +281,7 @@ public Blade await() {
         try {
             latch.await();
         } catch (Exception e) {
-            log.error("awit error", e);
+            log.error("await error", e);
             Thread.currentThread().interrupt();
         }
         return this;

File: src/main/java/com/blade/server/netty/NettyServer.java
Patch:
@@ -77,7 +77,7 @@ public void start(Blade blade, String[] args) throws Exception {
         this.environment = blade.environment();
 
         long initStart = System.currentTimeMillis();
-        log.info("Environment: jdk.version\t\t=> {}", System.getProperty("java.version"));
+        log.info("Environment: jdk.version\t\t\t=> {}", System.getProperty("java.version"));
         log.info("Environment: user.dir\t\t\t=> {}", System.getProperty("user.dir"));
         log.info("Environment: java.io.tmpdir\t\t=> {}", System.getProperty("java.io.tmpdir"));
         log.info("Environment: user.timezone\t\t=> {}", System.getProperty("user.timezone"));

File: src/main/java/com/blade/ioc/reader/AbstractClassReader.java
Patch:
@@ -59,10 +59,10 @@ private Set<ClassInfo> findClassByPackage(final String packageName, final String
             log.warn("The package [{}] not found.", packageName);
         }
         // 如果存在 就获取包下的所有文件 包括目录
-        File[] dirfiles = accept(dir, recursive);
+        File[] dirFiles = accept(dir, recursive);
         // 循环所有文件
-        if (null != dirfiles && dirfiles.length > 0) {
-            for (File file : dirfiles) {
+        if (null != dirFiles && dirFiles.length > 0) {
+            for (File file : dirFiles) {
                 // 如果是目录 则继续扫描
                 if (file.isDirectory()) {
                     findClassByPackage(packageName + '.' + file.getName(), file.getAbsolutePath(), parent, annotation, recursive, classes);

File: src/main/java/com/blade/Blade.java
Patch:
@@ -281,7 +281,7 @@ public Blade await() {
         try {
             latch.await();
         } catch (Exception e) {
-            log.error("awit error", e);
+            log.error("await error", e);
             Thread.currentThread().interrupt();
         }
         return this;

File: src/main/java/com/blade/ioc/OrderComparator.java
Patch:
@@ -5,6 +5,8 @@
 import java.util.Comparator;
 
 /**
+ * Bean order by
+ *
  * @author biezhi
  *         2017/6/2
  */

File: src/main/java/com/blade/mvc/Const.java
Patch:
@@ -8,7 +8,7 @@
  */
 public interface Const {
 
-    String VERSION = "2.0.0-beta";
+    String VERSION = "2.0.0";
 
     String CLASSPATH = Const.class.getResource("/").getPath();
 

File: src/main/java/com/blade/mvc/handler/RouteViewResolve.java
Patch:
@@ -1,7 +1,7 @@
 package com.blade.mvc.handler;
 
 import com.blade.Blade;
-import com.blade.BladeException;
+import com.blade.exception.BladeException;
 import com.blade.ioc.Ioc;
 import com.blade.kit.ReflectKit;
 import com.blade.mvc.annotation.JSON;
@@ -25,7 +25,7 @@ public RouteViewResolve(Blade blade) {
         this.templateEngine = blade.templateEngine();
     }
 
-    public boolean handle(Request request, Response response, Route route) {
+    public boolean handle(Request request, Response response, Route route) throws Exception {
         try {
             Method actionMethod = route.getAction();
             Object target = route.getTarget();

File: src/main/java/com/blade/mvc/route/RouteMatcher.java
Patch:
@@ -1,6 +1,6 @@
 package com.blade.mvc.route;
 
-import com.blade.BladeException;
+import com.blade.exception.BladeException;
 import com.blade.ioc.annotation.Order;
 import com.blade.kit.*;
 import com.blade.mvc.hook.Invoker;
@@ -188,7 +188,7 @@ public void delRoute(String key) {
         }
     }
 
-    public Route lookupRoute(String httpMethod, String path) {
+    public Route lookupRoute(String httpMethod, String path) throws BladeException {
         path = parsePath(path);
         String routeKey = path + '#' + httpMethod.toUpperCase();
         Route route = staticRoutes.get(routeKey);

File: src/main/java/com/blade/mvc/ui/template/DefaultEngine.java
Patch:
@@ -1,6 +1,6 @@
 package com.blade.mvc.ui.template;
 
-import com.blade.BladeException;
+import com.blade.exception.BladeException;
 import com.blade.kit.IOKit;
 import com.blade.mvc.Const;
 import com.blade.mvc.WebContext;
@@ -24,7 +24,7 @@ public class DefaultEngine implements TemplateEngine {
     public static String TEMPLATE_PATH = "templates";
 
     @Override
-    public void render(ModelAndView modelAndView, Writer writer) {
+    public void render(ModelAndView modelAndView, Writer writer) throws BladeException {
         String view = modelAndView.getView();
         String viewPath = Const.CLASSPATH + TEMPLATE_PATH + File.separator + view;
         viewPath = viewPath.replace("//", "/");

File: src/main/java/com/blade/mvc/ui/template/TemplateEngine.java
Patch:
@@ -1,5 +1,6 @@
 package com.blade.mvc.ui.template;
 
+import com.blade.exception.BladeException;
 import com.blade.mvc.ui.ModelAndView;
 
 import java.io.Writer;
@@ -12,6 +13,6 @@
  */
 public interface TemplateEngine {
 
-    void render(ModelAndView modelAndView, Writer writer);
+    void render(ModelAndView modelAndView, Writer writer) throws BladeException;
 
 }
\ No newline at end of file

File: src/main/java/com/blade/server/Server.java
Patch:
@@ -3,6 +3,8 @@
 import com.blade.Blade;
 
 /**
+ * Blade web server
+ *
  * @author biezhi
  *         2017/6/6
  */

File: src/main/java/com/blade/server/netty/RequestHandler.java
Patch:
@@ -1,5 +1,6 @@
 package com.blade.server.netty;
 
+import com.blade.exception.BladeException;
 import com.blade.mvc.http.Request;
 import com.blade.mvc.http.Response;
 import io.netty.channel.ChannelHandlerContext;
@@ -11,6 +12,6 @@
 @FunctionalInterface
 public interface RequestHandler<R> {
 
-    R handle(ChannelHandlerContext ctx, Request request, Response response);
+    R handle(ChannelHandlerContext ctx, Request request, Response response) throws BladeException;
 
 }

File: src/main/java/com/blade/server/netty/StaticFileHandler.java
Patch:
@@ -1,7 +1,7 @@
 package com.blade.server.netty;
 
 import com.blade.Blade;
-import com.blade.BladeException;
+import com.blade.exception.BladeException;
 import com.blade.kit.DateKit;
 import com.blade.kit.IOKit;
 import com.blade.kit.StringKit;
@@ -61,7 +61,7 @@ public StaticFileHandler(Blade blade) {
      * @throws Exception
      */
     @Override
-    public Boolean handle(ChannelHandlerContext ctx, Request request, Response response) {
+    public Boolean handle(ChannelHandlerContext ctx, Request request, Response response) throws BladeException {
         if (!"GET".equals(request.method())) {
             sendError(ctx, METHOD_NOT_ALLOWED);
             return false;

File: src/test/java/netty_hello/Hello.java
Patch:
@@ -1,7 +1,6 @@
 package netty_hello;
 
 import com.blade.Blade;
-import com.blade.mvc.Const;
 
 /**
  * @author biezhi
@@ -10,11 +9,10 @@
 public class Hello {
 
     public static void main(String[] args) {
-
         Blade.me()
 //                .devMode(false)
 //                .environment(Const.ENV_KEY_NETTY_WORKERS, Runtime.getRuntime().availableProcessors())
                 .get("/hello", ((request, response) -> response.text("Hello World.")))
-                .start(args);
+                .start(Hello.class, args);
     }
 }

