File: agent/hippo4j-agent-plugin/apollo-plugin/src/main/java/cn/hippo4j/agent/plugin/apollo/ApolloDynamicThreadPoolChangeHandler.java
Patch:
@@ -29,7 +29,6 @@
 import com.ctrip.framework.apollo.ConfigService;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import com.ctrip.framework.apollo.model.ConfigChange;
-import org.springframework.boot.context.properties.bind.Binder;
 
 import java.util.HashMap;
 import java.util.List;
@@ -72,7 +71,7 @@ public void registerListener() {
     /**
      * Builds and binds the {@link BootstrapConfigProperties} from the given configuration map.
      * <p>
-     * This method uses Spring's {@link Binder} to bind the configuration values to an instance
+     * This method uses SpringPropertyBinder to bind the configuration values to an instance
      * of {@link BootstrapConfigProperties}, which can then be used to configure the thread pool
      * dynamically.
      *

File: agent/hippo4j-agent-plugin/nacos-plugin/src/main/java/cn/hippo4j/agent/plugin/nacos/NacosDynamicThreadPoolChangeHandler.java
Patch:
@@ -32,7 +32,6 @@
 import com.alibaba.nacos.api.PropertyKeyConst;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
-import org.springframework.boot.context.properties.bind.Binder;
 
 import java.io.IOException;
 import java.util.HashMap;
@@ -124,7 +123,7 @@ public Executor getExecutor() {
     /**
      * Builds and binds the {@link BootstrapConfigProperties} from the given configuration map.
      * <p>
-     * This method uses Spring's {@link Binder} to bind the configuration values to an instance
+     * This method uses SpringPropertyBinder to bind the configuration values to an instance
      * of {@link BootstrapConfigProperties}, which can then be used to configure the thread pool
      * dynamically.
      *

File: agent/hippo4j-agent-plugin/nacos-plugin/src/main/java/cn/hippo4j/agent/plugin/nacos/interceptor/NacosConfigConstructorInterceptor.java
Patch:
@@ -49,7 +49,7 @@ public void onConstruct(EnhancedInstance objInst, Object[] allArguments) throws
             }
 
             // The Nacos plugin triggers before the Spring configuration plug-in.
-            // This means that when the Apollo plug-in executes, Spring's Environment is not yet ready,
+            // This means that when the Nacos plugin executes, Spring's Environment is not yet ready,
             // so the configuration cannot be read
             // After listening to the AGENT_SPRING_PROPERTIES_LOADER_COMPLETED event, register the listener for Nacos
             AbstractSubjectCenter.register(AbstractSubjectCenter.SubjectType.AGENT_SPRING_PROPERTIES_LOADER_COMPLETED, new NacosConfigPropertiesLoaderCompletedListener());

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-2x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/boot/SpringBootV2PluginBootService.java
Patch:
@@ -23,7 +23,7 @@
 import cn.hippo4j.common.logging.api.LogManager;
 
 /**
- * SpringBoot v1 plugin boot service
+ * SpringBoot v2 plugin boot service
  */
 @DefaultImplementor
 public class SpringBootV2PluginBootService implements BootService {

File: agent/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/alarm/AgentModeNotifyConfigBuilder.java
Patch:
@@ -29,7 +29,6 @@
 import cn.hippo4j.threadpool.message.api.NotifyConfigBuilder;
 import cn.hippo4j.threadpool.message.api.NotifyConfigDTO;
 import cn.hippo4j.threadpool.message.core.service.AlarmControlHandler;
-import cn.hippo4j.threadpool.message.core.service.ThreadPoolBaseSendMessageService;
 import lombok.AllArgsConstructor;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;

File: agent/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/ThreadPoolCheckAlarmSupport.java
Patch:
@@ -93,6 +93,9 @@ public static void enableThreadPoolCheckAlarmHandler() {
 
             // Execute scheduled task to check an alarm
             scheduleExecute(threadPoolBaseSendMessageService);
+
+            LOGGER.info("[Hippo4j-Agent] Start Check AlarmHandler the running status of dynamic thread pools.");
+
         }
     }
 

File: examples/threadpool-example/agent/config-apollo-spring-boot-1x/src/main/java/cn/hippo4j/example/agent/config/apollo/v1/AgentConfigApolloSpringBoot1xExampleApplication.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
- * Agent config Nacos example application.
+ * Agent config Apollo Spring Boot 1.x example application.
  */
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.agent.core")
 public class AgentConfigApolloSpringBoot1xExampleApplication {

File: examples/threadpool-example/agent/config-apollo/src/main/java/cn/hippo4j/example/agent/config/apollo/AgentConfigApolloExampleApplication.java
Patch:
@@ -21,7 +21,7 @@
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
 /**
- * Agent config apollo example application.
+ * Agent Apollo Spring Boot 2.x example application.
  */
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.agent.core")
 public class AgentConfigApolloExampleApplication {

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/AbstractConfigThreadPoolDynamicRefresh.java
Patch:
@@ -75,7 +75,6 @@ private void publishDynamicThreadPoolEvent(BootstrapConfigProperties configPrope
         ApplicationContextHolder.getInstance().publishEvent(new ThreadPoolConfigDynamicRefreshEvent(this, configProperties));
     }
 
-
     @Override
     public void run(ApplicationArguments args) {
         try {

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/AbstractConfigThreadPoolDynamicRefresh.java
Patch:
@@ -29,7 +29,6 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.ApplicationArguments;
 import org.springframework.boot.ApplicationRunner;
-import org.springframework.beans.factory.InitializingBean;
 
 import java.util.HashMap;
 import java.util.Map;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/conf/SnifferConfigInitializer.java
Patch:
@@ -17,17 +17,17 @@
 
 package cn.hippo4j.agent.core.conf;
 
+import cn.hippo4j.agent.core.boot.AgentPackagePath;
+import cn.hippo4j.agent.core.util.PropertyPlaceholderHelper;
+import cn.hippo4j.agent.core.util.StringUtil;
 import cn.hippo4j.common.boot.AgentPackageNotFoundException;
-import cn.hippo4j.common.boot.AgentPackagePath;
 import cn.hippo4j.common.conf.Config;
 import cn.hippo4j.common.conf.ConfigNotFoundException;
 import cn.hippo4j.common.logging.api.ILog;
 import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.common.logging.core.JsonLogResolver;
 import cn.hippo4j.common.logging.core.PatternLogResolver;
-import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.toolkit.agent.ConfigInitializer;
-import cn.hippo4j.common.toolkit.agent.PropertyPlaceholderHelper;
 
 import java.io.File;
 import java.io.FileInputStream;

File: agent/hippo4j-agent-plugin/apollo-plugin/src/main/java/cn/hippo4j/agent/plugin/apollo/define/ApolloInstrumentation.java
Patch:
@@ -34,7 +34,7 @@ public class ApolloInstrumentation extends ClassInstanceMethodsEnhancePluginDefi
 
     private static final String ENHANCE_CLASS = "com.ctrip.framework.apollo.internals.DefaultConfig";
 
-    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "cn.hippo4j.agent.plugin.apollo.interceptor.DefaultConfigConstructorInterceptor";
+    private static final String CONSTRUCTOR_INTERCEPT_CLASS = "cn.hippo4j.agent.plugin.apollo.interceptor.ApolloConfigConstructorInterceptor";
 
     @Override
     protected ClassMatch enhanceClass() {

File: agent/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/SpringEnvironmentSupport.java
Patch:
@@ -32,6 +32,6 @@ public static void disableNonAgentSwitch(ConfigurableEnvironment environment) {
         Map<String, Object> map = new HashMap<>();
         map.put("spring.dynamic.thread-pool.enable", false); // Switch off in non-Agent mode
         MapPropertySource propertySource = new MapPropertySource("Hippo4j-Agent-Properties", map);
-        environment.getPropertySources().addFirst(propertySource);
+        environment.getPropertySources().addLast(propertySource);
     }
 }

File: examples/threadpool-example/agent/agent-example-core/src/main/java/cn/hippo4j/example/agent/core/config/ThreadPoolConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.example.agent.config.apollo;
+package cn.hippo4j.example.agent.core.config;
 
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -46,7 +46,7 @@ public ThreadPoolExecutor runMessageSendTaskExecutor() {
     // 演示 Agent 模式修改线程池
     // -------------------------------------------------------------------------
 
-    public static final ThreadPoolExecutor RUN_MESSAGE_SEND_TASK_EXECUTOR = new ThreadPoolExecutor(
+    public static final ThreadPoolExecutor AGENT_RUN_MESSAGE_SEND_TASK_EXECUTOR = new ThreadPoolExecutor(
             1,
             10,
             1024,

File: examples/threadpool-example/agent/config-apollo/src/main/java/cn/hippo4j/example/agent/config/apollo/AgentConfigApolloExampleApplication.java
Patch:
@@ -23,7 +23,7 @@
 /**
  * Agent config apollo example application.
  */
-@SpringBootApplication
+@SpringBootApplication(scanBasePackages = "cn.hippo4j.example.agent.core")
 public class AgentConfigApolloExampleApplication {
 
     public static void main(String[] args) {

File: examples/threadpool-example/config/config-nacos/src/main/java/cn/hippo4j/example/agent/config/nacos/ConfigNacosExampleApplication.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.example.config.nacos;
+package cn.hippo4j.example.agent.config.nacos;
 
 import cn.hippo4j.core.enable.EnableDynamicThreadPool;
 import org.springframework.boot.SpringApplication;

File: kernel/dynamic/mode/config/src/main/java/cn/hippo4j/threadpool/dynamic/mode/config/parser/JsonConfigParser.java
Patch:
@@ -34,6 +34,7 @@
  * Json config parser.
  */
 public class JsonConfigParser extends AbstractConfigParser {
+
     private static final ObjectMapper MAPPER;
     private static final String DOT = ".";
     private static final String LEFT_BRACE = "{";
@@ -91,7 +92,7 @@ public Map<Object, Object> doParse(String content) throws IOException {
             return new HashMap<>(1);
         }
 
-        return doParse(content,"");
+        return doParse(content, "");
     }
 
     @Override

File: threadpool/core/src/test/java/cn/hippo4j/core/adapter/ZipkinExecutorAdapterTest.java
Patch:
@@ -68,7 +68,7 @@ public void testUnwrap() {
     @Test
     public void testReplace() {
         Object executor = new CustomWrappingExecutorService(Executors.newCachedThreadPool());
-        CustomWrappingExecutorService executorChange = (CustomWrappingExecutorService)executor;
+        CustomWrappingExecutorService executorChange = (CustomWrappingExecutorService) executor;
         ExecutorService beforeReplace = executorChange.delegate();
         zipkinExecutorAdapter.replace(executor, dynamicThreadPool);
         ExecutorService afterReplace = executorChange.delegate();

File: threadpool/adapter/dubbo/src/main/java/cn/hippo4j/adapter/dubbo/DubboThreadPoolAdapter.java
Patch:
@@ -109,9 +109,9 @@ public void onApplicationEvent(ApplicationStartedEvent event) {
                 return;
             }
             ExecutorRepository executorRepository = ExtensionLoader.getExtensionLoader(ExecutorRepository.class).getDefaultExtension();
-            ConcurrentMap<String, ConcurrentMap<Integer, ExecutorService>> data =
-                    (ConcurrentMap<String, ConcurrentMap<Integer, ExecutorService>>) ReflectUtil.getFieldValue(executorRepository, "data");
-            ConcurrentMap<Integer, ExecutorService> executorServiceMap = data.get(poolKey);
+            ConcurrentMap<String, ConcurrentMap<Object, ExecutorService>> data =
+                    (ConcurrentMap<String, ConcurrentMap<Object, ExecutorService>>) ReflectUtil.getFieldValue(executorRepository, "data");
+            ConcurrentMap<Object, ExecutorService> executorServiceMap = data.get(poolKey);
             executorServiceMap.forEach((key, value) -> dubboProtocolExecutor.put(String.valueOf(key), (ThreadPoolExecutor) value));
         } catch (Exception ex) {
             log.error("Failed to get Dubbo {} protocol thread pool", Version.getVersion(), ex);

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/boot/AgentPackagePath.java
Patch:
@@ -17,8 +17,9 @@
 
 package cn.hippo4j.agent.core.boot;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
+import cn.hippo4j.common.boot.AgentPackageNotFoundException;
 
 import java.io.File;
 import java.net.MalformedURLException;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/boot/ServiceManager.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.boot;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.loader.AgentClassLoader;
 
 import java.util.Collections;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/boot/SpringBootConfigInitializer.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.boot;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.util.ConfigInitializer;
 
 import java.util.Collections;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/jvm/LoadedLibraryCollector.java
Patch:
@@ -17,9 +17,9 @@
 
 package cn.hippo4j.agent.core.jvm;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
 import cn.hippo4j.agent.core.util.CollectionUtil;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import com.google.gson.Gson;
 import com.google.gson.GsonBuilder;
 

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/AbstractClassEnhancePluginDefine.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.interceptor.ConstructorInterceptPoint;
 import cn.hippo4j.agent.core.plugin.interceptor.InstanceMethodsInterceptPoint;
 import cn.hippo4j.agent.core.plugin.interceptor.StaticMethodsInterceptPoint;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/PluginBootstrap.java
Patch:
@@ -17,10 +17,10 @@
 
 package cn.hippo4j.agent.core.plugin;
 
-import cn.hippo4j.agent.core.boot.AgentPackageNotFoundException;
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.loader.AgentClassLoader;
+import cn.hippo4j.common.boot.AgentPackageNotFoundException;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 
 import java.net.URL;
 import java.util.ArrayList;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/PluginCfg.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.exception.IllegalPluginDefineException;
 
 import java.io.BufferedReader;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/PluginResourcesResolver.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.loader.AgentClassLoader;
 
 import java.io.IOException;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/PluginSelector.java
Patch:
@@ -20,9 +20,8 @@
 import java.util.Arrays;
 import java.util.List;
 import java.util.stream.Collectors;
-import cn.hippo4j.agent.core.conf.Config;
 
-import static cn.hippo4j.agent.core.conf.Config.Plugin.EXCLUDE_PLUGINS;
+import static cn.hippo4j.common.conf.Config.Plugin.EXCLUDE_PLUGINS;
 
 /**
  * Select some plugins in activated plugins

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/bootstrap/BootstrapInstrumentBoost.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.bootstrap;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.AbstractClassEnhancePluginDefine;
 import cn.hippo4j.agent.core.plugin.ByteBuddyCoreClasses;
 import cn.hippo4j.agent.core.plugin.InstrumentDebuggingClass;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/bootstrap/BootstrapPluginLogBridge.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.bootstrap;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 
 /**
  * The log bridge makes the ILog accessible inside bootstrap classloader, especially for internal interceptor.

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/ClassEnhancePluginDefine.java
Patch:
@@ -17,8 +17,6 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.AbstractClassEnhancePluginDefine;
 import cn.hippo4j.agent.core.plugin.EnhanceContext;
 import cn.hippo4j.agent.core.plugin.PluginException;
@@ -31,6 +29,8 @@
 import cn.hippo4j.agent.core.plugin.interceptor.v2.InstanceMethodsInterceptV2Point;
 import cn.hippo4j.agent.core.plugin.interceptor.v2.StaticMethodsInterceptV2Point;
 import cn.hippo4j.agent.core.util.StringUtil;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import net.bytebuddy.description.method.MethodDescription;
 import net.bytebuddy.description.type.TypeDescription;
 import net.bytebuddy.dynamic.DynamicType;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/ConstructorInter.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.PluginException;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/InstMethodsInter.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.PluginException;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/InstMethodsInterWithOverrideArgs.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.PluginException;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/StaticMethodsInter.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.Origin;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/StaticMethodsInterWithOverrideArgs.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.Morph;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/v2/InstMethodsInterV2.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance.v2;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.PluginException;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/v2/InstMethodsInterV2WithOverrideArgs.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance.v2;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.PluginException;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.OverrideCallable;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/v2/StaticMethodsInterV2.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance.v2;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;
 import net.bytebuddy.implementation.bind.annotation.Origin;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/interceptor/enhance/v2/StaticMethodsInterV2WithOverrideArgs.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.interceptor.enhance.v2;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.OverrideCallable;
 import cn.hippo4j.agent.core.plugin.loader.InterceptorInstanceLoader;
 import net.bytebuddy.implementation.bind.annotation.AllArguments;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/jdk9module/JDK9ModuleExporter.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.jdk9module;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.ByteBuddyCoreClasses;
 import net.bytebuddy.agent.builder.AgentBuilder;
 

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/loader/InterceptorInstanceLoader.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.agent.core.plugin.loader;
 
-import cn.hippo4j.agent.core.boot.AgentPackageNotFoundException;
+import cn.hippo4j.common.boot.AgentPackageNotFoundException;
 
 import java.util.HashMap;
 import java.util.Map;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/plugin/match/ProtectiveShieldMatcher.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.plugin.match;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import net.bytebuddy.matcher.ElementMatcher;
 
 /**

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/util/CustomizeExpression.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.util;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 
 import java.lang.reflect.Array;
 import java.lang.reflect.Field;

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/util/ExecutorNameUtil.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.util;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 
 import java.lang.reflect.Field;
 

File: agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/util/ReflectUtil.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.core.util;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-1x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v1/interceptor/EventPublishingFinishedInterceptor.java
Patch:
@@ -18,8 +18,8 @@
 package cn.hippo4j.agent.plugin.spring.boot.v1.interceptor;
 
 import cn.hippo4j.agent.adapter.dubbo.DubboThreadPoolAdapter;
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.MethodInterceptResult;

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-2x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/DynamicThreadPoolChangeHandlerSpring2x.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.plugin.spring.boot.v2;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.plugin.spring.common.conf.SpringBootConfig;
 import cn.hippo4j.threadpool.dynamic.mode.config.properties.BootstrapConfigProperties;
 import cn.hippo4j.threadpool.dynamic.mode.config.refresher.AbstractConfigThreadPoolDynamicRefresh;

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-2x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/boot/SpringBootV2PluginBootService.java
Patch:
@@ -19,8 +19,8 @@
 
 import cn.hippo4j.agent.core.boot.BootService;
 import cn.hippo4j.agent.core.boot.DefaultImplementor;
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 
 /**
  * SpringBoot v1 plugin boot service

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-2x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/interceptor/EventPublishingStartedInterceptor.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.agent.plugin.spring.boot.v2.interceptor;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.InstanceMethodsAroundInterceptor;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.MethodInterceptResult;

File: agent/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/SpringPropertiesLoader.java
Patch:
@@ -18,8 +18,8 @@
 package cn.hippo4j.agent.plugin.spring.common.support;
 
 import cn.hippo4j.agent.core.boot.SpringBootConfigInitializer;
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogManager;
+import cn.hippo4j.common.logging.api.ILog;
+import cn.hippo4j.common.logging.api.LogManager;
 import org.springframework.core.env.ConfigurableEnvironment;
 import org.springframework.core.env.EnumerablePropertySource;
 import org.springframework.core.env.PropertySource;

File: infra/common/src/main/java/cn/hippo4j/common/boot/AgentPackageNotFoundException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.boot;
+package cn.hippo4j.common.boot;
 
 public class AgentPackageNotFoundException extends Exception {
 

File: infra/common/src/main/java/cn/hippo4j/common/boot/DefaultNamedThreadFactory.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.boot;
+package cn.hippo4j.common.boot;
 
 import java.util.concurrent.ThreadFactory;
 import java.util.concurrent.atomic.AtomicInteger;

File: infra/common/src/main/java/cn/hippo4j/common/conf/ConfigNotFoundException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.conf;
+package cn.hippo4j.common.conf;
 
 public class ConfigNotFoundException extends Exception {
 

File: infra/common/src/main/java/cn/hippo4j/common/conf/RuntimeContextConfiguration.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.conf;
+package cn.hippo4j.common.conf;
 
 public class RuntimeContextConfiguration {
 

File: infra/common/src/main/java/cn/hippo4j/common/logging/api/ILog.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.api;
+package cn.hippo4j.common.logging.api;
 
 /**
  * The Log interface. It's very easy to understand, like any other log-component. Do just like log4j or log4j2 does.

File: infra/common/src/main/java/cn/hippo4j/common/logging/api/LogManager.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.api;
+package cn.hippo4j.common.logging.api;
 
-import cn.hippo4j.agent.core.logging.core.PatternLogResolver;
+import cn.hippo4j.common.logging.core.PatternLogResolver;
 
 /**
  * LogManager is the {@link LogResolver} implementation manager. By using {@link LogResolver}, {@link

File: infra/common/src/main/java/cn/hippo4j/common/logging/api/LogResolver.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.api;
+package cn.hippo4j.common.logging.api;
 
 /**
  * {@link LogResolver} just do only one thing: return the {@link ILog} implementation.

File: infra/common/src/main/java/cn/hippo4j/common/logging/api/NoopLogger.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.api;
+package cn.hippo4j.common.logging.api;
 
 /**
  * No operation logger implementation. Just implement {@link ILog} interface, but do nothing.

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/Converter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 /**
  * The Converter, it is used to convert the LogEvent to the String.

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/IWriter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 public interface IWriter {
 

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/JsonLogResolver.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.logging.api.LogResolver;
+import cn.hippo4j.common.logging.api.LogResolver;
+import cn.hippo4j.common.logging.api.ILog;
 import com.google.gson.Gson;
 
 public class JsonLogResolver implements LogResolver {

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/JsonLogger.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
-import cn.hippo4j.agent.core.logging.core.converters.LiteralConverter;
+import cn.hippo4j.common.logging.core.converters.LiteralConverter;
 import com.google.gson.Gson;
 
 import java.util.HashMap;

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/LogEvent.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 /**
  * The representation of logging events. This instance is pass around to the List of Converter.

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/LogLevel.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 public enum LogLevel {
     TRACE, DEBUG, INFO, WARN, ERROR, OFF

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/LogMessageHolder.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 /**
  * The <code>LogMessageHolder</code> is a {@link String} holder, in order to in-process propagation String across the

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/LogOutput.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 public enum LogOutput {
     FILE, CONSOLE

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/Parser.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
-import cn.hippo4j.agent.core.logging.core.converters.LiteralConverter;
+import cn.hippo4j.common.logging.core.converters.LiteralConverter;
 
 import java.util.ArrayList;
 import java.util.List;

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/PatternLogger.java
Patch:
@@ -15,10 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
-import cn.hippo4j.agent.core.logging.api.ILog;
-import cn.hippo4j.agent.core.util.StringUtil;
+import cn.hippo4j.common.toolkit.StringUtil;
 
 /**
  * A flexible Logger configurable with pattern string. This is default implementation of {@link ILog} This can parse a

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/ResolverType.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 public enum ResolverType {
     JSON, PATTERN

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/SystemOutWriter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core;
+package cn.hippo4j.common.logging.core;
 
 import java.io.PrintStream;
 

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/converters/ClassConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core.converters;
+package cn.hippo4j.common.logging.core.converters;
 
-import cn.hippo4j.agent.core.logging.core.Converter;
-import cn.hippo4j.agent.core.logging.core.LogEvent;
+import cn.hippo4j.common.logging.core.Converter;
+import cn.hippo4j.common.logging.core.LogEvent;
 
 /**
  * Just return logEvent.getTargetClass().

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/converters/DateConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core.converters;
+package cn.hippo4j.common.logging.core.converters;
 
-import cn.hippo4j.agent.core.logging.core.Converter;
-import cn.hippo4j.agent.core.logging.core.LogEvent;
+import cn.hippo4j.common.logging.core.Converter;
+import cn.hippo4j.common.logging.core.LogEvent;
 
 import java.text.SimpleDateFormat;
 import java.util.Date;

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/converters/LevelConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core.converters;
+package cn.hippo4j.common.logging.core.converters;
 
-import cn.hippo4j.agent.core.logging.core.Converter;
-import cn.hippo4j.agent.core.logging.core.LogEvent;
+import cn.hippo4j.common.logging.core.Converter;
+import cn.hippo4j.common.logging.core.LogEvent;
 
 /**
  * Just return logEvent.getLevel().name()

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/converters/LiteralConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core.converters;
+package cn.hippo4j.common.logging.core.converters;
 
-import cn.hippo4j.agent.core.logging.core.Converter;
-import cn.hippo4j.agent.core.logging.core.LogEvent;
+import cn.hippo4j.common.logging.core.Converter;
+import cn.hippo4j.common.logging.core.LogEvent;
 
 /**
  * This Converter is used to return the literal.

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/converters/MessageConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core.converters;
+package cn.hippo4j.common.logging.core.converters;
 
-import cn.hippo4j.agent.core.logging.core.Converter;
-import cn.hippo4j.agent.core.logging.core.LogEvent;
+import cn.hippo4j.common.logging.core.Converter;
+import cn.hippo4j.common.logging.core.LogEvent;
 
 /**
  * Just return the logEvent.getMessage()

File: infra/common/src/main/java/cn/hippo4j/common/logging/core/converters/ThreadConverter.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.agent.core.logging.core.converters;
+package cn.hippo4j.common.logging.core.converters;
 
-import cn.hippo4j.agent.core.logging.core.Converter;
-import cn.hippo4j.agent.core.logging.core.LogEvent;
+import cn.hippo4j.common.logging.core.Converter;
+import cn.hippo4j.common.logging.core.LogEvent;
 
 /**
  * Just return the Thread.currentThread().getName()

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/EtcdRefresherHandler.java
Patch:
@@ -77,12 +77,10 @@ public void registerListener() {
             public void onNext(WatchResponse response) {
                 WatchEvent watchEvent = response.getEvents().get(0);
                 WatchEvent.EventType eventType = watchEvent.getEventType();
-                // todo Currently only supports json
                 if (Objects.equals(eventType, WatchEvent.EventType.PUT)) {
                     KeyValue keyValue1 = watchEvent.getKeyValue();
                     String value = keyValue1.getValue().toString(charset);
-                    Map map = JSONUtil.parseObject(value, Map.class);
-                    dynamicRefresh(keyValue1.getKey().toString(charset), map);
+                    dynamicRefresh(value);
                 }
             }
 

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/ConsulRefresherHandler.java
Patch:
@@ -41,6 +41,8 @@ public class ConsulRefresherHandler extends AbstractConfigThreadPoolDynamicRefre
 
     private static final int INITIAL_CAPACITY = 64;
 
+    private static final String DEFAULT_CONTEXT = "spring.cloud.consul.config.default-context";
+
     @EventListener(EnvironmentChangeEvent.class)
     public void refreshed(EnvironmentChangeEvent event) {
         Map<String, Object> configInfo = extractLatestConfigInfo(event);
@@ -70,7 +72,7 @@ private Map<String, Object> extractLatestConfigInfo(EnvironmentChangeEvent event
     private CharSequence getApplicationConfigDefaultContext(AbstractEnvironment environment) {
         return environment.getPropertySources().stream()
                 .filter(propertySource -> propertySource instanceof OriginTrackedMapPropertySource)
-                .map(propertySource -> ((Map<String, CharSequence>) propertySource.getSource()).get("spring.cloud.consul.config.default-context"))
+                .map(propertySource -> ((Map<String, CharSequence>) propertySource.getSource()).get(DEFAULT_CONTEXT))
                 .findFirst().orElse(StringUtils.EMPTY);
     }
 

File: threadpool/core/src/main/java/cn/hippo4j/core/enable/BeforeCheckConfiguration.java
Patch:
@@ -46,7 +46,7 @@ public BeforeCheckConfiguration.BeforeCheck dynamicThreadPoolBeforeCheckBean(@Au
         // TODO test
         boolean checkFlag = properties != null && properties.getEnable();
         if (checkFlag) {
-            String propertiesClassName = properties.getClass().getName();
+            String propertiesClassName = properties.getClass().getSuperclass() == Object.class ? properties.getClass().getName() : properties.getClass().getSuperclass().getName();
             switch (propertiesClassName) {
                 case bootstrapPropertiesClassName: {
                     String namespace = properties.getNamespace();

File: infra/common/src/test/java/cn/hippo4j/common/toolkit/logtracing/LogMessageTest.java
Patch:
@@ -82,7 +82,8 @@ public void testToStringShouldPrintMessageAndAllKeyAndValuePairs() {
         logMessage.setMsg(MESSAGE);
         logMessage.kv("key1", "value1");
         logMessage.kv("key2", "value2");
-        assertEquals("messagekey1=value1||key2=value2", logMessage.toString());
+        String output = logMessage.toString();
+        assertTrue(output.equals("messagekey1=value1||key2=value2") || output.equals("messagekey2=value2||key1=value1"));
     }
 
     @Test

File: infra/common/src/test/java/cn/hippo4j/common/toolkit/http/HttpUtilsTest.java
Patch:
@@ -37,7 +37,7 @@
 import java.nio.file.Path;
 import java.nio.file.SimpleFileVisitor;
 import java.nio.file.attribute.BasicFileAttributes;
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.Map;
 
 public class HttpUtilsTest {
@@ -169,7 +169,7 @@ public void testRestApiPostTimeout() {
 
     @Test
     public void buildUrl() {
-        Map<String, String> map = new HashMap<>();
+        Map<String, String> map = new LinkedHashMap<>();
         map.put(password, passwordValue);
         map.put(username, usernameValue);
         String s = HttpUtil.buildUrl(url + PORT, map);

File: infra/common/src/test/java/cn/hippo4j/common/toolkit/logtracing/LogMessageTest.java
Patch:
@@ -73,7 +73,8 @@ public void testKvShouldPutKeyAndValue() {
     public void testKvShouldPutAllKeyAndValuePairs() {
         logMessage.kv("key1", "value1");
         logMessage.kv("key2", "value2");
-        assertEquals("key1=value1||key2=value2", logMessage.toString());
+        String output = logMessage.toString();
+        assertTrue(output.equals("key1=value1||key2=value2") || output.equals("key2=value2||key1=value1"));
     }
 
     @Test

File: threadpool/server/auth/src/main/java/cn/hippo4j/auth/service/impl/UserDetailsServiceImpl.java
Patch:
@@ -24,6 +24,7 @@
 import com.baomidou.mybatisplus.core.toolkit.Wrappers;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Value;
+import org.springframework.context.annotation.Primary;
 import org.springframework.security.authentication.BadCredentialsException;
 import org.springframework.security.core.authority.SimpleGrantedAuthority;
 import org.springframework.security.core.userdetails.UserDetails;
@@ -46,6 +47,7 @@
  */
 @Slf4j
 @Service
+@Primary
 public class UserDetailsServiceImpl implements UserDetailsService {
 
     @Value("${hippo4j.core.auth.enabled:true}")

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/monitor/ReportingEventExecutor.java
Patch:
@@ -45,6 +45,7 @@
 import java.util.Map;
 import java.util.Optional;
 import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ScheduledThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
@@ -136,7 +137,7 @@ public void run(String... args) {
                     properties.getCollectInterval(),
                     TimeUnit.MILLISECONDS);
             Integer bufferSize = properties.getTaskBufferSize();
-            messageCollectVessel = new ArrayBlockingQueue(bufferSize);
+            messageCollectVessel = new LinkedBlockingQueue(bufferSize);
             // Get all data collection components, currently only historical operation data collection.
             collectors = ApplicationContextHolder.getBeansOfType(Collector.class);
             // Start reporting monitoring data thread.

File: threadpool/server/discovery/src/main/java/cn/hippo4j/discovery/core/Lease.java
Patch:
@@ -47,8 +47,8 @@ public class Lease<T> {
     public Lease(T r) {
         holder = r;
         registrationTimestamp = System.currentTimeMillis();
-        lastUpdateTimestamp = registrationTimestamp;
         duration = DEFAULT_DURATION_IN_SECS;
+        lastUpdateTimestamp = registrationTimestamp + duration;
     }
 
     public void renew() {

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-2x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/interceptor/EventPublishingStartedInterceptor.java
Patch:
@@ -28,13 +28,15 @@
 import cn.hippo4j.common.extension.design.AbstractSubjectCenter;
 import cn.hippo4j.threadpool.dynamic.api.ThreadPoolDynamicRefresh;
 import cn.hippo4j.threadpool.dynamic.mode.config.refresher.event.DynamicThreadPoolRefreshListener;
+import lombok.extern.slf4j.Slf4j;
 import org.springframework.context.ConfigurableApplicationContext;
 
 import java.lang.reflect.Method;
 
 /**
  * Event publishing started interceptor
  */
+@Slf4j
 public class EventPublishingStartedInterceptor implements InstanceMethodsAroundInterceptor {
 
     private static final ILog LOGGER = LogManager.getLogger(EventPublishingStartedInterceptor.class);
@@ -57,6 +59,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         dynamicRefresh.registerListener();
         AbstractSubjectCenter.register(AbstractSubjectCenter.SubjectType.THREAD_POOL_DYNAMIC_REFRESH,
                 new DynamicThreadPoolRefreshListener());
+
         return ret;
     }
 

File: infra/common/src/main/java/cn/hippo4j/common/api/DynamicThreadPoolAdapter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.core.executor.support.adpter;
+package cn.hippo4j.common.api;
 
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadPoolExecutor;

File: infra/common/src/main/java/cn/hippo4j/common/handler/ThreadPoolStatusHandler.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.core.executor.state;
+package cn.hippo4j.common.handler;
 
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import lombok.extern.slf4j.Slf4j;

File: infra/common/src/main/java/cn/hippo4j/common/model/ThreadPoolAdapterState.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.adapter.base;
+package cn.hippo4j.common.model;
 
 import lombok.Data;
 

File: kernel/monitor/src/main/java/cn/hippo4j/threadpool/monitor/api/AdapterThreadPoolMonitor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.monitor.base;
+package cn.hippo4j.threadpool.monitor.api;
 
 /**
  * Adapter thread-pool monitor.

File: kernel/monitor/src/main/java/cn/hippo4j/threadpool/monitor/api/DynamicThreadPoolMonitor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.monitor.base;
+package cn.hippo4j.threadpool.monitor.api;
 
 /**
  * Dynamic thread-pool monitor.

File: kernel/monitor/src/main/java/cn/hippo4j/threadpool/monitor/api/ThreadPoolMonitor.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.monitor.base;
+package cn.hippo4j.threadpool.monitor.api;
 
 /**
  * Thread-pool runtime monitor.

File: kernel/monitor/src/main/java/cn/hippo4j/threadpool/monitor/api/WebThreadPoolMonitor.java
Patch:
@@ -15,7 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.monitor.base;
+package cn.hippo4j.threadpool.monitor.api;
+
+import cn.hippo4j.threadpool.monitor.api.ThreadPoolMonitor;
 
 /**
  * Web thread-pool monitor.

File: kernel/monitor/src/main/java/cn/hippo4j/threadpool/monitor/support/MonitorThreadPoolTypeEnum.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.monitor.base;
+package cn.hippo4j.threadpool.monitor.support;
 
 /**
  * Monitor thread-pool type enum.

File: kernel/monitor/src/main/java/cn/hippo4j/threadpool/monitor/support/MonitorTypeEnum.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.monitor.base;
+package cn.hippo4j.threadpool.monitor.support;
 
 /**
  * Monitor type enum.

File: starters/threadpool/config-spring-boot-1x/src/main/java/cn/hippo4j/config/springboot1x/starter/web/tomcat/TomcatWebThreadPoolHandler1x.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.web.tomcat.TomcatWebThreadPoolHandlerSupport;
 import cn.hippo4j.config.springboot1x.starter.web.AbstractWebThreadPoolService1x;
-import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
+import cn.hippo4j.common.support.AbstractThreadPoolRuntime;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainer;
 

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/config/ConfigHandlerConfiguration.java
Patch:
@@ -38,6 +38,7 @@
  * Config handler configuration.
  */
 @Configuration(proxyBeanMethods = false)
+@ConditionalOnProperty(prefix = BootstrapConfigProperties.PREFIX, value = "enable", matchIfMissing = true, havingValue = "true")
 public class ConfigHandlerConfiguration {
 
     private static final String NACOS_CONFIG_MANAGER_KEY = "com.alibaba.cloud.nacos.NacosConfigManager";

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/monitor/ThreadPoolMonitorExecutor.java
Patch:
@@ -22,10 +22,10 @@
 import cn.hippo4j.common.extension.spi.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.core.config.ApplicationContextHolder;
-import cn.hippo4j.monitor.base.DynamicThreadPoolMonitor;
-import cn.hippo4j.monitor.base.ThreadPoolMonitor;
 import cn.hippo4j.threadpool.dynamic.mode.config.properties.BootstrapConfigProperties;
 import cn.hippo4j.threadpool.dynamic.mode.config.properties.MonitorProperties;
+import cn.hippo4j.threadpool.monitor.api.DynamicThreadPoolMonitor;
+import cn.hippo4j.threadpool.monitor.api.ThreadPoolMonitor;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.DisposableBean;

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/AdapterExecutorsRefreshListener.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.core.config.ApplicationContextHolder;
 import cn.hippo4j.common.toolkit.BeanUtil;
 import cn.hippo4j.common.toolkit.CollectionUtil;

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/config/DynamicThreadPoolAutoConfiguration.java
Patch:
@@ -138,6 +138,7 @@ public AdaptedThreadPoolDestroyPostProcessor adaptedThreadPoolDestroyPostProcess
     }
 
     @Bean
+    @ConditionalOnProperty(prefix = Constants.CONFIGURATION_PROPERTIES_PREFIX, value = "enable", matchIfMissing = true, havingValue = "true")
     @SuppressWarnings("all")
     public DynamicThreadPoolPostProcessor threadPoolBeanPostProcessor(HttpAgent httpAgent,
                                                                       ApplicationContextHolder hippo4jApplicationContextHolder,

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/config/MonitorProperties.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.springboot.starter.config;
 
-import cn.hippo4j.monitor.base.MonitorThreadPoolTypeEnum;
-import cn.hippo4j.monitor.base.MonitorTypeEnum;
+import cn.hippo4j.threadpool.monitor.support.MonitorThreadPoolTypeEnum;
+import cn.hippo4j.threadpool.monitor.support.MonitorTypeEnum;
 import lombok.Data;
 
 /**

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/controller/ThreadPoolAdapterController.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.model.Result;
 import cn.hippo4j.core.api.ClientNetworkService;
 import cn.hippo4j.common.extension.spi.ServiceLoaderRegistry;

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/core/ThreadPoolAdapterRegister.java
Patch:
@@ -20,7 +20,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterCacheConfig;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterRegisterAction;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.model.Result;
 import cn.hippo4j.core.config.ApplicationContextHolder;
 import cn.hippo4j.common.toolkit.CollectionUtil;

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/monitor/ReportingEventExecutor.java
Patch:
@@ -25,13 +25,13 @@
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.toolkit.ThreadUtil;
 import cn.hippo4j.core.config.ApplicationContextHolder;
-import cn.hippo4j.monitor.base.MonitorTypeEnum;
-import cn.hippo4j.monitor.base.ThreadPoolMonitor;
+import cn.hippo4j.threadpool.monitor.support.MonitorTypeEnum;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
 import cn.hippo4j.springboot.starter.config.MonitorProperties;
 import cn.hippo4j.springboot.starter.monitor.collect.Collector;
 import cn.hippo4j.springboot.starter.monitor.send.MessageSender;
 import cn.hippo4j.springboot.starter.remote.ServerHealthCheck;
+import cn.hippo4j.threadpool.monitor.api.ThreadPoolMonitor;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/monitor/collect/RunTimeInfoCollector.java
Patch:
@@ -24,7 +24,7 @@
 import cn.hippo4j.common.monitor.MessageTypeEnum;
 import cn.hippo4j.common.monitor.RuntimeMessage;
 import cn.hippo4j.common.toolkit.BeanUtil;
-import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
+import cn.hippo4j.common.support.AbstractThreadPoolRuntime;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
 import lombok.AllArgsConstructor;
 

File: starters/threadpool/server/src/main/java/cn/hippo4j/springboot/starter/support/AdaptedThreadPoolDestroyPostProcessor.java
Patch:
@@ -20,7 +20,7 @@
 import cn.hippo4j.common.executor.ThreadPoolExecutorHolder;
 import cn.hippo4j.common.executor.ThreadPoolExecutorRegistry;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
-import cn.hippo4j.core.executor.support.adpter.DynamicThreadPoolAdapter;
+import cn.hippo4j.common.api.DynamicThreadPoolAdapter;
 import cn.hippo4j.core.executor.support.adpter.DynamicThreadPoolAdapterChoose;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;

File: threadpool/adapter/alibaba-dubbo/src/main/java/cn/hippo4j/adapter/alibaba/dubbo/AlibabaDubboThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
 import com.alibaba.dubbo.common.store.DataStore;

File: threadpool/adapter/base/src/main/java/cn/hippo4j/adapter/base/ThreadPoolAdapter.java
Patch:
@@ -17,6 +17,8 @@
 
 package cn.hippo4j.adapter.base;
 
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
+
 import java.util.List;
 
 /**

File: threadpool/adapter/base/src/main/java/cn/hippo4j/adapter/base/ThreadPoolAdapterCacheConfig.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.adapter.base;
 
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import lombok.Data;
 
 import java.util.List;

File: threadpool/adapter/dubbo/src/main/java/cn/hippo4j/adapter/dubbo/DubboThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import lombok.extern.slf4j.Slf4j;

File: threadpool/adapter/hystrix/src/main/java/cn/hippo4j/adapter/hystrix/AbstractHystrixThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import com.netflix.hystrix.HystrixThreadPool;

File: threadpool/adapter/hystrix/src/main/java/cn/hippo4j/adapter/hystrix/HystrixThreadPoolAdapter4Server.java
Patch:
@@ -20,7 +20,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterCacheConfig;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterRegisterAction;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.core.config.ApplicationContextHolder;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.context.event.ApplicationStartedEvent;

File: threadpool/adapter/kafka/src/main/java/cn/hippo4j/adapter/kafka/KafkaThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.core.config.ApplicationContextHolder;
 import lombok.SneakyThrows;

File: threadpool/adapter/rabbitmq/src/main/java/cn/hippo4j/adapter/rabbitmq/RabbitMQThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import lombok.RequiredArgsConstructor;

File: threadpool/adapter/rocketmq/src/main/java/cn/hippo4j/adapter/rocketmq/RocketMQThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import cn.hippo4j.core.config.ApplicationContextHolder;

File: threadpool/adapter/stream-rabbitmq/src/main/java/cn/hippo4j/adapter/springcloud/stream/rabbitmq/SpringCloudStreamRabbitMQThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.core.config.ApplicationContextHolder;

File: threadpool/adapter/stream-rocketmq/src/main/java/cn/hippo4j/adapter/springcloud/stream/rocketmq/SpringCloudStreamRocketMQThreadPoolAdapter.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;

File: threadpool/adapter/web/src/main/java/cn/hippo4j/adapter/web/WebThreadPoolRunStateHandler.java
Patch:
@@ -21,7 +21,7 @@
 import cn.hippo4j.common.toolkit.ByteConvertUtil;
 import cn.hippo4j.common.toolkit.MemoryUtil;
 import cn.hippo4j.common.toolkit.StringUtil;
-import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
+import cn.hippo4j.common.support.AbstractThreadPoolRuntime;
 import lombok.extern.slf4j.Slf4j;
 
 /**

File: threadpool/adapter/web/src/main/java/cn/hippo4j/adapter/web/tomcat/DefaultTomcatWebThreadPoolHandler.java
Patch:
@@ -18,7 +18,7 @@
 package cn.hippo4j.adapter.web.tomcat;
 
 import cn.hippo4j.adapter.web.DefaultAbstractWebThreadPoolService;
-import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
+import cn.hippo4j.common.support.AbstractThreadPoolRuntime;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;
 import org.springframework.boot.web.server.WebServer;

File: threadpool/adapter/web/src/main/java/cn/hippo4j/adapter/web/tomcat/TomcatWebThreadPoolHandlerSupport.java
Patch:
@@ -25,7 +25,7 @@
 import cn.hippo4j.common.model.ThreadPoolParameterInfo;
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
 import cn.hippo4j.common.toolkit.CalculateUtil;
-import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
+import cn.hippo4j.common.support.AbstractThreadPoolRuntime;
 import lombok.extern.slf4j.Slf4j;
 
 import java.time.LocalDateTime;

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/DynamicThreadPoolAdapterChoose.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor.support.adpter;
 
+import cn.hippo4j.common.api.DynamicThreadPoolAdapter;
 import cn.hippo4j.common.extension.spi.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/ThreadPoolTaskExecutorAdapter.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor.support.adpter;
 
+import cn.hippo4j.common.api.DynamicThreadPoolAdapter;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 import cn.hippo4j.core.executor.support.ThreadPoolBuilder;

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/TransmittableThreadLocalExecutorAdapter.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor.support.adpter;
 
+import cn.hippo4j.common.api.DynamicThreadPoolAdapter;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/TransmittableThreadLocalExecutorServiceAdapter.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor.support.adpter;
 
+import cn.hippo4j.common.api.DynamicThreadPoolAdapter;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/ZipkinExecutorAdapter.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor.support.adpter;
 
+import cn.hippo4j.common.api.DynamicThreadPoolAdapter;
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

File: threadpool/core/src/test/java/cn/hippo4j/core/executor/state/AbstractThreadPoolRuntimeTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.common.executor.ThreadPoolExecutorRegistry;
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
+import cn.hippo4j.common.support.AbstractThreadPoolRuntime;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 import org.junit.Test;
 import org.junit.jupiter.api.Assertions;

File: threadpool/core/src/test/java/cn/hippo4j/core/executor/state/ThreadPoolRunStateHandlerTest.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.common.executor.ThreadPoolExecutorHolder;
 import cn.hippo4j.common.executor.ThreadPoolExecutorRegistry;
+import cn.hippo4j.common.handler.ThreadPoolStatusHandler;
 import cn.hippo4j.common.model.ManyThreadPoolRunStateInfo;
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
 import cn.hippo4j.common.toolkit.BeanUtil;

File: threadpool/message/src/main/java/cn/hippo4j/message/config/MessageConfiguration.java
Patch:
@@ -24,11 +24,13 @@
 import cn.hippo4j.threadpool.message.core.service.AlarmControlHandler;
 import cn.hippo4j.threadpool.message.core.service.SendMessageHandler;
 import cn.hippo4j.threadpool.message.core.service.ThreadPoolBaseSendMessageService;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
 import org.springframework.context.annotation.Bean;
 
 /**
  * Message configuration.
  */
+@ConditionalOnProperty(prefix = "spring.dynamic.thread-pool", value = "enable", matchIfMissing = true, havingValue = "true")
 public class MessageConfiguration {
 
     @Bean

File: threadpool/monitor/base/src/main/java/cn/hippo4j/monitor/base/AbstractAdapterThreadPoolMonitor.java
Patch:
@@ -18,8 +18,9 @@
 package cn.hippo4j.monitor.base;
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.core.config.ApplicationContextHolder;
+import cn.hippo4j.threadpool.monitor.api.AdapterThreadPoolMonitor;
 
 import java.util.Map;
 

File: threadpool/monitor/base/src/main/java/cn/hippo4j/monitor/base/AbstractWebThreadPoolMonitor.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.adapter.web.WebThreadPoolService;
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
+import cn.hippo4j.threadpool.monitor.api.WebThreadPoolMonitor;
 
 import javax.annotation.Resource;
 

File: threadpool/monitor/local-log/src/main/java/cn/hippo4j/monitor/local/log/AdapterThreadPoolLocalLogMonitorHandler.java
Patch:
@@ -17,10 +17,10 @@
 
 package cn.hippo4j.monitor.local.log;
 
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.JSONUtil;
 import cn.hippo4j.monitor.base.AbstractAdapterThreadPoolMonitor;
-import cn.hippo4j.monitor.base.MonitorTypeEnum;
+import cn.hippo4j.threadpool.monitor.support.MonitorTypeEnum;
 import lombok.extern.slf4j.Slf4j;
 
 /**

File: threadpool/monitor/local-log/src/main/java/cn/hippo4j/monitor/local/log/WebThreadPoolLocalLogMonitorHandler.java
Patch:
@@ -20,7 +20,7 @@
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
 import cn.hippo4j.common.toolkit.JSONUtil;
 import cn.hippo4j.monitor.base.AbstractWebThreadPoolMonitor;
-import cn.hippo4j.monitor.base.MonitorTypeEnum;
+import cn.hippo4j.threadpool.monitor.support.MonitorTypeEnum;
 import lombok.extern.slf4j.Slf4j;
 
 /**

File: threadpool/monitor/micrometer/src/main/java/cn/hippo4j/monitor/micrometer/AdapterThreadPoolMicrometerMonitorHandler.java
Patch:
@@ -17,12 +17,12 @@
 
 package cn.hippo4j.monitor.micrometer;
 
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.core.config.ApplicationContextHolder;
 import cn.hippo4j.common.toolkit.BeanUtil;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.monitor.base.AbstractAdapterThreadPoolMonitor;
-import cn.hippo4j.monitor.base.MonitorTypeEnum;
+import cn.hippo4j.threadpool.monitor.support.MonitorTypeEnum;
 import io.micrometer.core.instrument.Metrics;
 import io.micrometer.core.instrument.Tag;
 import org.springframework.core.env.Environment;

File: threadpool/monitor/micrometer/src/main/java/cn/hippo4j/monitor/micrometer/WebThreadPoolMicrometerMonitorHandler.java
Patch:
@@ -22,7 +22,7 @@
 import cn.hippo4j.common.toolkit.BeanUtil;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.monitor.base.AbstractWebThreadPoolMonitor;
-import cn.hippo4j.monitor.base.MonitorTypeEnum;
+import cn.hippo4j.threadpool.monitor.support.MonitorTypeEnum;
 import io.micrometer.core.instrument.Metrics;
 import io.micrometer.core.instrument.Tag;
 import org.springframework.core.env.Environment;

File: threadpool/server/config/src/main/java/cn/hippo4j/config/service/ThreadPoolAdapterService.java
Patch:
@@ -18,7 +18,7 @@
 package cn.hippo4j.config.service;
 
 import cn.hippo4j.adapter.base.ThreadPoolAdapterCacheConfig;
-import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.model.ThreadPoolAdapterState;
 import cn.hippo4j.common.extension.design.AbstractSubjectCenter;
 import cn.hippo4j.common.extension.design.Observer;
 import cn.hippo4j.common.extension.design.ObserverMessage;

File: agent/hippo4j-agent-plugin/spring-plugins/spring-boot-1x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v1/interceptor/EventPublishingFinishedInterceptor.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.agent.plugin.spring.boot.v1.interceptor;
 
+import cn.hippo4j.agent.adapter.dubbo.DubboThreadPoolAdapter;
 import cn.hippo4j.agent.core.logging.api.ILog;
 import cn.hippo4j.agent.core.logging.api.LogManager;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.EnhancedInstance;
@@ -56,6 +57,7 @@ public Object afterMethod(EnhancedInstance objInst, Method method, Object[] allA
         SpringPropertiesLoader.loadSpringProperties(context.getEnvironment());
         ThreadPoolDynamicRefresh dynamicRefreshSpring1x = new DynamicThreadPoolChangeHandlerSpring1x(context);
         dynamicRefreshSpring1x.registerListener();
+        DubboThreadPoolAdapter.registerExecutors();
         return ret;
     }
 

File: infra/common/src/test/java/cn/hippo4j/common/function/NoArgsConsumerTest.java
Patch:
@@ -19,14 +19,14 @@
 
 import cn.hippo4j.common.extension.function.NoArgsConsumer;
 import cn.hippo4j.common.toolkit.Assert;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import java.util.concurrent.atomic.AtomicBoolean;
 
-final class NoArgsConsumerTest {
+public final class NoArgsConsumerTest {
 
     @Test
-    void accept() {
+    public void accept() {
         AtomicBoolean checkValue = new AtomicBoolean(false);
         NoArgsConsumer noArgsConsumer = () -> checkValue.set(true);
         noArgsConsumer.accept();

File: infra/common/src/test/java/cn/hippo4j/common/toolkit/UserContextTest.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.common.toolkit;
 
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 public class UserContextTest {
 

File: threadpool/server/auth/src/test/java/cn/hippo4j/auth/filter/JWTAuthenticationFilterTest.java
Patch:
@@ -18,15 +18,15 @@
 package cn.hippo4j.auth.filter;
 
 import cn.hippo4j.common.toolkit.ReflectUtil;
+import org.junit.Test;
 import org.junit.jupiter.api.Assertions;
-import org.junit.jupiter.api.Test;
 import org.springframework.security.authentication.BadCredentialsException;
 import org.springframework.security.core.userdetails.UsernameNotFoundException;
 
-class JWTAuthenticationFilterTest {
+public class JWTAuthenticationFilterTest {
 
     @Test
-    void getMessageTest() {
+    public void getMessageTest() {
         JWTAuthenticationFilter filter = new JWTAuthenticationFilter(null);
         Assertions.assertEquals("用户不存在", ReflectUtil.invoke(filter,
                 "getMessage", new UsernameNotFoundException("")));

File: threadpool/server/auth/src/test/java/cn/hippo4j/auth/service/impl/UserServiceImplTest.java
Patch:
@@ -18,12 +18,12 @@
 package cn.hippo4j.auth.service.impl;
 
 import org.junit.Assert;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
-class UserServiceImplTest {
+public class UserServiceImplTest {
 
     @Test
-    void checkPasswordLength() {
+    public void testCheckPasswordLength() {
         // 密码为null、空串、过短、过长都会抛出异常
         UserServiceImpl userService = new UserServiceImpl(null, null, null);
         Assert.assertThrows(RuntimeException.class, () -> userService.checkPasswordLength(null));

File: threadpool/server/auth/src/test/java/cn/hippo4j/auth/toolkit/JwtTokenUtilTest.java
Patch:
@@ -18,8 +18,8 @@
 package cn.hippo4j.auth.toolkit;
 
 import cn.hippo4j.common.toolkit.Assert;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
+import org.junit.Before;
+import org.junit.Test;
 
 public final class JwtTokenUtilTest {
 
@@ -33,7 +33,7 @@ public final class JwtTokenUtilTest {
 
     private String token;
 
-    @BeforeEach
+    @Before
     public void setUp() {
         token = JwtTokenUtil.createToken(userId, username, role, isRememberMe);
     }

File: threadpool/server/common/src/test/java/cn/hippo4j/server/common/base/ResultsTest.java
Patch:
@@ -21,7 +21,7 @@
 import cn.hippo4j.common.toolkit.Assert;
 import cn.hippo4j.server.common.base.exception.AbstractException;
 import cn.hippo4j.server.common.base.exception.ErrorCode;
-import org.junit.jupiter.api.Test;
+import org.junit.Test;
 
 import static cn.hippo4j.server.common.base.exception.ErrorCodeEnum.SERVICE_ERROR;
 

File: infra/common/src/main/java/cn/hippo4j/common/extension/spi/ServiceLoaderRegistry.java
Patch:
@@ -29,7 +29,7 @@
 /**
  * Dynamic thread-pool SPI service loader.
  */
-public class ServiceLoaderRegistry {
+public final class ServiceLoaderRegistry {
 
     /**
      * safe container。

File: infra/common/src/main/java/cn/hippo4j/common/toolkit/BeanUtil.java
Patch:
@@ -39,7 +39,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class BeanUtil {
 
-    protected static Mapper BEAN_MAPPER_BUILDER;
+    protected static final Mapper BEAN_MAPPER_BUILDER;
 
     static {
         BEAN_MAPPER_BUILDER = DozerBeanMapperBuilder.buildDefault();

File: infra/common/src/main/java/cn/hippo4j/common/toolkit/CollectionUtil.java
Patch:
@@ -17,6 +17,8 @@
 
 package cn.hippo4j.common.toolkit;
 
+import cn.hippo4j.common.constant.MagicNumberConstants;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
@@ -164,7 +166,7 @@ public static <E> ArrayList<E> newArrayList(E... elements) {
     private static int computeArrayListCapacity(int arraySize) {
         checkNonnegative(arraySize);
         // TODO(kevinb): Figure out the right behavior, and document it
-        return saturatedCast(5L + arraySize + (arraySize / 10));
+        return saturatedCast(MagicNumberConstants.LONG_5 + arraySize + (arraySize / MagicNumberConstants.INDEX_10));
     }
 
     private static void checkNonnegative(int value) {

File: infra/common/src/main/java/cn/hippo4j/common/toolkit/IoUtil.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.common.constant.Constants;
 import lombok.SneakyThrows;
+import lombok.extern.slf4j.Slf4j;
 
 import java.io.BufferedReader;
 import java.io.ByteArrayInputStream;
@@ -47,6 +48,7 @@
  *
  * @author nacos
  */
+@Slf4j
 public class IoUtil {
 
     /**
@@ -98,7 +100,7 @@ public static byte[] tryCompress(String str, String encoding) {
         try (GZIPOutputStream gzip = new GZIPOutputStream(out)) {
             gzip.write(str.getBytes(encoding));
         } catch (Exception e) {
-            e.printStackTrace();
+            log.error("gzip write is fail: {}", e.getMessage());
         }
         return out.toByteArray();
     }

File: infra/common/src/main/java/cn/hippo4j/common/toolkit/http/Header.java
Patch:
@@ -34,7 +34,7 @@
  *
  * @author <a href="mailto:liaochuntao@live.com">liaochuntao</a>
  */
-public class Header {
+public final class Header {
 
     public static final Header EMPTY = Header.newInstance();
 

File: threadpool/core/src/main/java/cn/hippo4j/core/extension/annotation/Realization.java
Patch:
@@ -25,6 +25,9 @@
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
 
+/**
+ * realization
+ */
 @Inherited
 @Retention(RetentionPolicy.RUNTIME)
 @Target({ElementType.TYPE})

File: threadpool/core/src/main/java/cn/hippo4j/core/extension/reducer/Reducers.java
Patch:
@@ -23,6 +23,9 @@
 import java.util.Objects;
 import java.util.function.Predicate;
 
+/**
+ * reducers
+ */
 @SuppressWarnings("all")
 public class Reducers {
 

File: threadpool/core/src/main/java/cn/hippo4j/core/extension/support/ExtensionAutoConfiguration.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 
+/**
+ * extension auto  configuration
+ */
 @Configuration
 public class ExtensionAutoConfiguration {
 

File: threadpool/core/src/main/java/cn/hippo4j/core/extension/support/ExtensionRegistry.java
Patch:
@@ -34,7 +34,7 @@
  * Extension registry
  */
 @Slf4j
-public class ExtensionRegistry implements IExtensionRegistry {
+public final class ExtensionRegistry implements IExtensionRegistry {
 
     private final Map<Class<? extends IExtension>, List<IExtension>> registry = new ConcurrentHashMap<>();
 

File: threadpool/core/src/main/java/cn/hippo4j/core/extension/support/IExtensionRegistry.java
Patch:
@@ -21,6 +21,9 @@
 
 import java.util.List;
 
+/**
+ * extension registry interface
+ */
 public interface IExtensionRegistry {
 
     void register(IExtension realization);

File: threadpool/core/src/main/java/cn/hippo4j/core/extension/support/ReduceType.java
Patch:
@@ -17,6 +17,9 @@
 
 package cn.hippo4j.core.extension.support;
 
+/**
+ * reduce type
+ */
 public enum ReduceType {
 
     NONE,

File: agents/threadpool/hippo4j-agent-plugin/apollo-plugin/src/main/java/cn/hippo4j/agent/plugin/apollo/boot/ApolloPluginBootService.java
Patch:
@@ -20,6 +20,9 @@
 import cn.hippo4j.agent.core.boot.BootService;
 import cn.hippo4j.agent.core.boot.DefaultImplementor;
 
+/**
+ * Apollo plugin boot service
+ */
 @DefaultImplementor
 public class ApolloPluginBootService implements BootService {
 

File: agents/threadpool/hippo4j-agent-plugin/apollo-plugin/src/main/java/cn/hippo4j/agent/plugin/apollo/define/ApolloInstrumentation.java
Patch:
@@ -27,6 +27,9 @@
 
 import static net.bytebuddy.matcher.ElementMatchers.any;
 
+/**
+ * Apollo instrumentation
+ */
 public class ApolloInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "com.ctrip.framework.apollo.internals.DefaultConfig";

File: agents/threadpool/hippo4j-agent-plugin/apollo-plugin/src/main/java/cn/hippo4j/agent/plugin/apollo/interceptor/DefaultConfigConstructorInterceptor.java
Patch:
@@ -20,6 +20,9 @@
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.EnhancedInstance;
 import cn.hippo4j.agent.core.plugin.interceptor.enhance.InstanceConstructorInterceptor;
 
+/**
+ * Default config constructor interceptor
+ */
 public class DefaultConfigConstructorInterceptor implements InstanceConstructorInterceptor {
 
     @Override

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-boot-1.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v1/DynamicThreadPoolChangeHandlerSpring1x.java
Patch:
@@ -36,6 +36,9 @@
 
 import static cn.hippo4j.config.springboot1x.starter.refresher.SpringBoot1xBootstrapConfigPropertiesBinderAdapt.getNames;
 
+/**
+ * Dynamic thread pool change handler spring 1x
+ */
 public class DynamicThreadPoolChangeHandlerSpring1x extends AbstractDynamicThreadPoolChangeHandlerSpring {
 
     public DynamicThreadPoolChangeHandlerSpring1x(ConfigurableApplicationContext context) {

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-boot-1.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v1/define/EventPublishingRunListenerInstrumentation.java
Patch:
@@ -27,6 +27,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static cn.hippo4j.agent.core.plugin.match.NameMatch.byName;
 
+/**
+ * Event publishing run listener instrumentation
+ */
 public class EventPublishingRunListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "org.springframework.boot.context.event.EventPublishingRunListener";

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-boot-1.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v1/interceptor/EventPublishingFinishedInterceptor.java
Patch:
@@ -32,6 +32,9 @@
 
 import java.lang.reflect.Method;
 
+/**
+ * Event publishing finished interceptor
+ */
 public class EventPublishingFinishedInterceptor implements InstanceMethodsAroundInterceptor {
 
     private static final ILog FILE_LOGGER = LogManager.getLogger(EventPublishingFinishedInterceptor.class);

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-boot-2.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/DynamicThreadPoolChangeHandlerSpring2x.java
Patch:
@@ -28,6 +28,9 @@
 
 import java.util.Map;
 
+/**
+ * Dynamic thread pool change handler spring 2x
+ */
 public class DynamicThreadPoolChangeHandlerSpring2x extends AbstractDynamicThreadPoolChangeHandlerSpring {
 
     public DynamicThreadPoolChangeHandlerSpring2x(ConfigurableApplicationContext context) {

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-boot-2.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/define/EventPublishingRunListenerInstrumentation.java
Patch:
@@ -27,6 +27,9 @@
 import static net.bytebuddy.matcher.ElementMatchers.named;
 import static cn.hippo4j.agent.core.plugin.match.NameMatch.byName;
 
+/**
+ * Event publishing run listener instrumentation
+ */
 public class EventPublishingRunListenerInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "org.springframework.boot.context.event.EventPublishingRunListener";

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-boot-2.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v2/interceptor/EventPublishingStartedInterceptor.java
Patch:
@@ -30,6 +30,9 @@
 
 import java.lang.reflect.Method;
 
+/**
+ * Event publishing started interceptor
+ */
 public class EventPublishingStartedInterceptor implements InstanceMethodsAroundInterceptor {
 
     private static final ILog LOGGER = LogManager.getLogger(EventPublishingStartedInterceptor.class);

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/interceptor/EventPublishingRunListenerEnvironmentPreparedInterceptor.java
Patch:
@@ -27,6 +27,9 @@
 
 import java.lang.reflect.Method;
 
+/**
+ * Event publishing run listener environment prepared interceptor
+ */
 public class EventPublishingRunListenerEnvironmentPreparedInterceptor implements InstanceMethodsAroundInterceptor {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(EventPublishingRunListenerEnvironmentPreparedInterceptor.class);

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/AbstractDynamicThreadPoolChangeHandlerSpring.java
Patch:
@@ -56,6 +56,9 @@
 import static cn.hippo4j.common.constant.ChangeThreadPoolConstants.CHANGE_DELIMITER;
 import static cn.hippo4j.common.constant.ChangeThreadPoolConstants.CHANGE_THREAD_POOL_TEXT;
 
+/**
+ * Abstract dynamic thread poo change handler spring
+ */
 public abstract class AbstractDynamicThreadPoolChangeHandlerSpring implements IDynamicThreadPoolChangeHandlerSpring {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(AbstractDynamicThreadPoolChangeHandlerSpring.class);

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/IDynamicThreadPoolChangeHandlerSpring.java
Patch:
@@ -17,6 +17,9 @@
 
 package cn.hippo4j.agent.plugin.spring.common.support;
 
+/**
+ * IDynamic thread pool change handler spring
+ */
 public interface IDynamicThreadPoolChangeHandlerSpring {
 
     void registerApolloConfigHandler();

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/SpringEnvironmentSupport.java
Patch:
@@ -23,6 +23,9 @@
 import java.util.HashMap;
 import java.util.Map;
 
+/**
+ * Spring environment support
+ */
 public class SpringEnvironmentSupport {
 
     public static void disableNonAgentSwitch(ConfigurableEnvironment environment) {

File: agents/threadpool/hippo4j-agent-plugin/spring-plugins/spring-plugin-common/src/main/java/cn/hippo4j/agent/plugin/spring/common/support/SpringPropertiesLoader.java
Patch:
@@ -29,6 +29,9 @@
 import java.util.List;
 import java.util.Properties;
 
+/**
+ * Spring properties loader
+ */
 public class SpringPropertiesLoader {
 
     private static final ILog LOGGER = LogManager.getLogger(SpringPropertiesLoader.class);

File: agents/threadpool/hippo4j-agent-plugin/thread-pool-plugin/src/main/java/cn/hippo4j/agent/plugin/thread/pool/define/ThreadPoolExecutorInstrumentation.java
Patch:
@@ -27,6 +27,9 @@
 
 import static net.bytebuddy.matcher.ElementMatchers.takesArguments;
 
+/**
+ * Thread pool executor instrumentation
+ */
 public class ThreadPoolExecutorInstrumentation extends ClassInstanceMethodsEnhancePluginDefine {
 
     private static final String ENHANCE_CLASS = "java.util.concurrent.ThreadPoolExecutor";

File: examples/threadpool-example/config/config-apollo-spring-boot-1x/src/main/java/cn/hippo4j/example/config/apollo/ConfigApolloSpringBoot1xExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Config apollo spring boot 1x example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.core")
 public class ConfigApolloSpringBoot1xExampleApplication {

File: examples/threadpool-example/config/config-apollo/src/main/java/cn/hippo4j/example/config/apollo/ConfigApolloExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Config apollo example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.core")
 public class ConfigApolloExampleApplication {

File: examples/threadpool-example/config/config-consul-spring-boot/src/main/java/cn/hippo4j/example/config/consul/ConfigConsulExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Config consul example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example")
 public class ConfigConsulExampleApplication {

File: examples/threadpool-example/config/config-etcd/src/main/java/cn/hippo4j/example/config/etcd/controller/TestController.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.example.config.etcd.controller;
 
+import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RequestMapping;
@@ -29,6 +30,7 @@
  * @date : 2022/9/2 19:18
  * @description:
  */
+@Slf4j
 @RestController
 @RequestMapping
 public class TestController {
@@ -38,6 +40,6 @@ public class TestController {
 
     @GetMapping("test")
     public void test() {
-        System.out.println(messageConsumeDynamicExecutor.getMaximumPoolSize());
+        log.info(String.valueOf(messageConsumeDynamicExecutor.getMaximumPoolSize()));
     }
 }

File: examples/threadpool-example/config/config-nacos-spring-boot-1x/src/main/java/cn/hippo4j/example/config/nacos/ConfigNacosSpringBoot15ExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Config nacos spring boot 1.5 example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.core")
 public class ConfigNacosSpringBoot15ExampleApplication {

File: examples/threadpool-example/config/config-nacos/src/main/java/cn/hippo4j/example/config/nacos/ConfigNacosExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Config nacos example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.core")
 public class ConfigNacosExampleApplication {

File: examples/threadpool-example/config/config-zookeeper/src/main/java/cn/hippo4j/example/config/zookeeper/ConfigZookeeperExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Config zookeeper example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = "cn.hippo4j.example.core")
 public class ConfigZookeeperExampleApplication {

File: examples/threadpool-example/server/adapter-kafka/src/main/java/cn/hippo4j/springboot/starter/adapter/kafka/example/ServerAdapterKafkaExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Server adapter kafka example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = {"cn.hippo4j.example.core", "cn.hippo4j.springboot.starter.adapter.kafka.example"})
 public class ServerAdapterKafkaExampleApplication {

File: examples/threadpool-example/server/adapter-rabbitmq/src/main/java/cn/hippo4j/springboot/starter/adapter/rabbitmq/example/ServerAdapterRabbitMQExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Server Adapter RabbitMQ Example Application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = {"cn.hippo4j.example.core", "cn.hippo4j.springboot.starter.adapter.rabbitmq.example"})
 public class ServerAdapterRabbitMQExampleApplication {

File: examples/threadpool-example/server/adapter-rabbitmq/src/main/java/cn/hippo4j/springboot/starter/adapter/rabbitmq/example/constants/SimpleMQConstant.java
Patch:
@@ -20,7 +20,7 @@
 /**
  * Simple MQ constant.
  */
-public interface SimpleMQConstant {
+public class SimpleMQConstant {
 
-    String QUEUE_NAME = "framework_message-center_queue";
+    public static final String QUEUE_NAME = "framework_message-center_queue";
 }

File: examples/threadpool-example/server/adapter-rocketmq/src/main/java/cn/hippo4j/springboot/starter/adapter/rocketmq/example/ServerAdapterRocketMQExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Server adapter rocketMQ example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = {"cn.hippo4j.example.core", "cn.hippo4j.springboot.starter.adapter.rocketmq.example"})
 public class ServerAdapterRocketMQExampleApplication {

File: examples/threadpool-example/server/adapter-stream-rabbitmq/src/main/java/cn/hippo4j/springboot/starter/adapter/springcloud/stream/rabbitmq/example/MessageProduce.java
Patch:
@@ -37,10 +37,12 @@ public class MessageProduce {
 
     private final StreamBridge streamBridge;
 
+    private static final int MAX_SEND_SIZE = 10;
+
     @GetMapping("/message/send")
     public String sendMessage(@RequestParam(required = false) Integer maxSendSize) {
         if (maxSendSize == null) {
-            maxSendSize = 10;
+            maxSendSize = MAX_SEND_SIZE;
         }
         for (int i = 0; i < maxSendSize; i++) {
             sendMessage0();

File: examples/threadpool-example/server/adapter-stream-rabbitmq/src/main/java/cn/hippo4j/springboot/starter/adapter/springcloud/stream/rabbitmq/example/ServerAdapterSpringCloudStreamRabbitMQApplication.java
Patch:
@@ -29,6 +29,9 @@
 
 import java.util.function.Consumer;
 
+/**
+ * Server Adapter Spring Cloud Stream RabbitMQ Application
+ */
 @Slf4j
 @EnableDynamicThreadPool
 @SpringBootApplication

File: examples/threadpool-example/server/adapter-stream-rocketmq/src/main/java/cn/hippo4j/springboot/starter/adapter/springcloud/stream/rocketmq/example/MessageConsume.java
Patch:
@@ -39,6 +39,7 @@ public void consumeMessage(@Payload SendMessageDTO message, @Headers Map headers
         long startTime = System.currentTimeMillis();
         try {
             // ignore
+            log.info("Message: {}", JSONUtil.toJSONString(message));
         } finally {
             log.info("Keys: {}, Msg id: {}, Execute time: {} ms, Message: {}", headers.get("rocketmq_KEYS"), headers.get("rocketmq_MESSAGE_ID"), System.currentTimeMillis() - startTime,
                     JSONUtil.toJSONString(message));
@@ -51,6 +52,7 @@ public void consumeSaveMessage(@Payload SendMessageDTO message, @Headers Map hea
         long startTime = System.currentTimeMillis();
         try {
             // ignore
+            log.info("Message: {}", JSONUtil.toJSONString(message));
         } finally {
             log.info("Keys: {}, Msg id: {}, Execute time: {} ms, Message: {}", headers.get("rocketmq_KEYS"), headers.get("rocketmq_MESSAGE_ID"), System.currentTimeMillis() - startTime,
                     JSONUtil.toJSONString(message));

File: examples/threadpool-example/server/adapter-stream-rocketmq/src/main/java/cn/hippo4j/springboot/starter/adapter/springcloud/stream/rocketmq/example/ServerAdapterSpringCloudStreamRocketMQApplication.java
Patch:
@@ -24,6 +24,9 @@
 import org.springframework.cloud.stream.annotation.EnableBinding;
 import org.springframework.cloud.stream.messaging.Source;
 
+/**
+ * Server Adapter Spring Cloud Stream RocketMQ Application
+ */
 @Slf4j
 @EnableDynamicThreadPool
 @EnableBinding({Source.class, MySink.class})

File: examples/threadpool-example/server/monitor-elasticsearch/src/main/java/cn/hippo4j/example/es/monitor/ServerEsMonitorExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Server es monitor example application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = {"cn.hippo4j.example.core", "cn.hippo4j.monitor"})
 public class ServerEsMonitorExampleApplication {

File: examples/threadpool-example/server/server/src/main/java/cn/hippo4j/example/server/ServerExampleApplication.java
Patch:
@@ -21,6 +21,9 @@
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
 
+/**
+ * Server Example Application
+ */
 @EnableDynamicThreadPool
 @SpringBootApplication(scanBasePackages = {"cn.hippo4j.example.core", "cn.hippo4j.example.server"})
 public class ServerExampleApplication {

File: starters/threadpool/config-spring-boot-1x/src/main/java/cn/hippo4j/config/springboot1x/starter/config/WebThreadPoolHandlerConfiguration1x.java
Patch:
@@ -46,6 +46,9 @@
 @AutoConfigureBefore(WebThreadPoolHandlerConfiguration.class)
 public class WebThreadPoolHandlerConfiguration1x {
 
+    /**
+     * Embedded tomcat
+     */
     @Configuration
     @ConditionalOnClass({Servlet.class, Tomcat.class})
     @ConditionalOnBean(WebThreadPoolRunStateHandler.class)

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/notify/ConfigModeNotifyConfigBuilder.java
Patch:
@@ -53,6 +53,8 @@ public class ConfigModeNotifyConfigBuilder implements NotifyConfigBuilder {
 
     private final WebThreadPoolService webThreadPoolService;
 
+    private static final int DEFAULT_INTERVAL = 5;
+
     @Override
     public Map<String, List<NotifyConfigDTO>> buildNotify() {
         Map<String, List<NotifyConfigDTO>> resultMap = new HashMap<>();
@@ -145,7 +147,7 @@ private int buildInterval(IExecutorProperties executorProperties) {
                 .orElse(Optional.ofNullable(configProperties.getDefaultExecutor())
                         .map(ExecutorProperties::getNotify)
                         .map(ExecutorNotifyProperties::getInterval)
-                        .orElse(5));
+                        .orElse(DEFAULT_INTERVAL));
     }
 
     private String buildReceive(IExecutorProperties executorProperties) {

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/ConsulRefresherHandler.java
Patch:
@@ -39,6 +39,8 @@
 @Slf4j
 public class ConsulRefresherHandler extends AbstractConfigThreadPoolDynamicRefresh {
 
+    private static final int INITIAL_CAPACITY = 64;
+
     @EventListener(EnvironmentChangeEvent.class)
     public void refreshed(EnvironmentChangeEvent event) {
         Map<String, Object> configInfo = extractLatestConfigInfo(event);
@@ -54,7 +56,7 @@ private Map<String, Object> extractLatestConfigInfo(EnvironmentChangeEvent event
                 .map(propertySource -> (BootstrapPropertySource<?>) propertySource).collect(Collectors.toList());
         Optional<BootstrapPropertySource<?>> bootstrapPropertySource = bootstrapPropertySourceList.stream()
                 .filter(source -> source.getName().contains(activeProfile) && source.getPropertyNames().length != 0).findFirst();
-        Map<String, Object> configInfo = new HashMap<>(64);
+        Map<String, Object> configInfo = new HashMap<>(INITIAL_CAPACITY);
         if (bootstrapPropertySource.isPresent()) {
             ConsulPropertySource consulPropertySource = (ConsulPropertySource) bootstrapPropertySource.get().getDelegate();
             String[] propertyNames = consulPropertySource.getPropertyNames();

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/EtcdRefresherHandler.java
Patch:
@@ -115,4 +115,4 @@ private void initClient(Map<String, String> etcd, Charset charset) {
                     .build() : clientBuilder.build();
         }
     }
-}
\ No newline at end of file
+}

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/AbstractRefreshListener.java
Patch:
@@ -55,4 +55,4 @@ public boolean match(M properties) {
     protected String getNodes(M properties) {
         return WebIpAndPortHolder.ALL;
     }
-}
\ No newline at end of file
+}

File: starters/threadpool/config/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/AdapterExecutorsRefreshListener.java
Patch:
@@ -53,9 +53,9 @@ public String getNodes(AdapterExecutorProperties properties) {
 
     @Override
     public void onApplicationEvent(Hippo4jConfigDynamicRefreshEvent event) {
-        List<AdapterExecutorProperties> adapterExecutors;
+        List<AdapterExecutorProperties> adapterExecutors = event.getBootstrapConfigProperties().getAdapterExecutors();
         Map<String, ThreadPoolAdapter> threadPoolAdapterMap = ApplicationContextHolder.getBeansOfType(ThreadPoolAdapter.class);
-        if (CollectionUtil.isEmpty(adapterExecutors = event.getBootstrapConfigProperties().getAdapterExecutors()) || CollectionUtil.isEmpty(threadPoolAdapterMap)) {
+        if (CollectionUtil.isEmpty(adapterExecutors) || CollectionUtil.isEmpty(threadPoolAdapterMap)) {
             return;
         }
         for (AdapterExecutorProperties each : adapterExecutors) {

File: threadpool/server/config/src/main/java/cn/hippo4j/config/config/ServerBootstrapProperties.java
Patch:
@@ -33,7 +33,7 @@
 @ConfigurationProperties(prefix = ServerBootstrapProperties.PREFIX)
 public class ServerBootstrapProperties {
 
-    public final static String PREFIX = "hippo4j.core";
+    public static final String PREFIX = "hippo4j.core";
 
     /**
      * Whether to start the background task of cleaning up thread pool history data.

File: threadpool/server/config/src/main/java/cn/hippo4j/config/mapper/HisRunDataMapper.java
Patch:
@@ -64,6 +64,9 @@ public interface HisRunDataMapper extends BaseMapper<HisRunDataInfo> {
             + "limit 4")
     List<ThreadPoolTaskRanking> queryThreadPoolMaxRanking(@Param("startTime") Long startTime, @Param("endTime") Long endTime);
 
+    /**
+     * Thread Pool Task Ranking
+     */
     @Data
     class ThreadPoolTaskRanking {
 

File: threadpool/server/config/src/main/java/cn/hippo4j/config/model/biz/threadpool/ConfigModifySaveReqDTO.java
Patch:
@@ -21,6 +21,9 @@
 
 import javax.validation.constraints.Pattern;
 
+/**
+ * Config Modify Save Req DTO
+ */
 @Data
 public class ConfigModifySaveReqDTO {
 

File: threadpool/server/config/src/main/java/cn/hippo4j/config/model/biz/threadpool/ConfigModifyVerifyReqDTO.java
Patch:
@@ -20,8 +20,6 @@
 import com.fasterxml.jackson.annotation.JsonAlias;
 import lombok.Data;
 
-import java.util.List;
-
 /**
  * Config modify verify dto
  */

File: threadpool/server/config/src/main/java/cn/hippo4j/config/service/ThreadPoolAdapterService.java
Patch:
@@ -140,6 +140,9 @@ public static void remove(String identify) {
         }
     }
 
+    /**
+     * Clear Thread Pool Adapter Cache
+     */
     static class ClearThreadPoolAdapterCache implements Observer<String> {
 
         @Override

File: threadpool/server/config/src/main/java/cn/hippo4j/config/toolkit/SimpleReadWriteLock.java
Patch:
@@ -24,6 +24,8 @@ public class SimpleReadWriteLock {
 
     private int status = 0;
 
+    private static final int FREE_STATUS = -1;
+
     public synchronized boolean tryReadLock() {
         if (isWriteLocked()) {
             return false;
@@ -41,7 +43,7 @@ public synchronized boolean tryWriteLock() {
         if (!isFree()) {
             return false;
         } else {
-            status = -1;
+            status = FREE_STATUS;
             return true;
         }
     }

File: threadpool/server/config/src/test/java/cn/hippo4j/config/event/LocalDataChangeEventTest.java
Patch:
@@ -26,7 +26,7 @@ public final class LocalDataChangeEventTest {
     @Test
     public void assertGetSingleton() {
         LocalDataChangeEvent localDataChangeEvent = new LocalDataChangeEvent("groupKey", "identify");
-        Assert.isTrue(StringUtil.isNotEmpty(localDataChangeEvent.groupKey));
-        Assert.isTrue(StringUtil.isNotEmpty(localDataChangeEvent.identify));
+        Assert.isTrue(StringUtil.isNotEmpty(localDataChangeEvent.getGroupKey()));
+        Assert.isTrue(StringUtil.isNotEmpty(localDataChangeEvent.getIdentify()));
     }
 }

File: threadpool/server/console/src/main/java/cn/hippo4j/console/controller/ThreadPoolController.java
Patch:
@@ -214,7 +214,7 @@ public Result<List<ThreadPoolInstanceInfo>> listInstance(@PathVariable("itemId")
         List<ThreadPoolInstanceInfo> returnThreadPool = new ArrayList<>();
         content.forEach((key, val) -> {
             ThreadPoolInstanceInfo threadPoolInstanceInfo =
-                    BeanUtil.convert(val.configAllInfo, ThreadPoolInstanceInfo.class);
+                    BeanUtil.convert(val.getConfigAllInfo(), ThreadPoolInstanceInfo.class);
             threadPoolInstanceInfo.setClientAddress(StringUtil.subBefore(key, Constants.IDENTIFY_SLICER_SYMBOL));
             threadPoolInstanceInfo.setActive(activeMap.get(key));
             threadPoolInstanceInfo.setIdentify(key);

File: infra/common/src/main/java/cn/hippo4j/common/constant/Constants.java
Patch:
@@ -131,4 +131,6 @@ public class Constants {
     public static final String CLIENT_VERSION = "Client-Version";
 
     public static final String CONFIGURATION_PROPERTIES_PREFIX = "spring.dynamic.thread-pool";
+
+    public static final long NO_REJECT_COUNT_NUM = -1L;
 }

File: threadpool/core/src/main/java/cn/hippo4j/core/enable/BeforeCheckConfiguration.java
Patch:
@@ -70,6 +70,9 @@ public BeforeCheckConfiguration.BeforeCheck dynamicThreadPoolBeforeCheckBean(@Au
         return new BeforeCheckConfiguration.BeforeCheck();
     }
 
+    /**
+     * Before check.
+     */
     public class BeforeCheck {
 
     }

File: threadpool/core/src/main/java/cn/hippo4j/core/enable/MarkerConfiguration.java
Patch:
@@ -31,6 +31,9 @@ public Marker dynamicThreadPoolMarkerBean() {
         return new Marker();
     }
 
+    /**
+     * Marker.
+     */
     public class Marker {
 
     }

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/state/AbstractThreadPoolRuntime.java
Patch:
@@ -29,6 +29,8 @@
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadPoolExecutor;
 
+import static cn.hippo4j.common.constant.Constants.NO_REJECT_COUNT_NUM;
+
 /**
  * Abstract threadPool runtime info.
  */
@@ -66,7 +68,7 @@ public ThreadPoolRunStateInfo getPoolRunState(String threadPoolId, Executor exec
         int activeCount = actualExecutor.getActiveCount();
         int largestPoolSize = actualExecutor.getLargestPoolSize();
         BlockingQueue<Runnable> blockingQueue = actualExecutor.getQueue();
-        long rejectCount = actualExecutor instanceof DynamicThreadPoolExecutor ? ((DynamicThreadPoolExecutor) actualExecutor).getRejectCountNum() : -1L;
+        long rejectCount = actualExecutor instanceof DynamicThreadPoolExecutor ? ((DynamicThreadPoolExecutor) actualExecutor).getRejectCountNum() : NO_REJECT_COUNT_NUM;
         ThreadPoolRunStateInfo stateInfo = ThreadPoolRunStateInfo.builder()
                 .tpId(threadPoolId)
                 .activeSize(activeCount)

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/AbstractDynamicExecutorSupport.java
Patch:
@@ -44,9 +44,9 @@ public abstract class AbstractDynamicExecutorSupport extends ThreadPoolExecutor
 
     private ExecutorService executor;
 
-    public long awaitTerminationMillis;
+    private long awaitTerminationMillis;
 
-    public boolean waitForTasksToCompleteOnShutdown;
+    private boolean waitForTasksToCompleteOnShutdown;
 
     public AbstractDynamicExecutorSupport(int corePoolSize,
                                           int maximumPoolSize,

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/DynamicThreadPoolAdapterChoose.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class DynamicThreadPoolAdapterChoose {
 
-    private static List<DynamicThreadPoolAdapter> DYNAMIC_THREAD_POOL_ADAPTERS = new ArrayList<>();
+    private static final List<DynamicThreadPoolAdapter> DYNAMIC_THREAD_POOL_ADAPTERS = new ArrayList<>();
 
     static {
         DYNAMIC_THREAD_POOL_ADAPTERS.add(new TransmittableThreadLocalExecutorAdapter());

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/ThreadPoolTaskExecutorAdapter.java
Patch:
@@ -46,7 +46,7 @@ public class ThreadPoolTaskExecutorAdapter implements DynamicThreadPoolAdapter {
 
     private static final String QUEUE_CAPACITY = "queueCapacity";
 
-    private static String MATCH_CLASS_NAME = "ThreadPoolTaskExecutor";
+    private static final String MATCH_CLASS_NAME = "ThreadPoolTaskExecutor";
 
     @Override
     public boolean match(Object executor) {

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/TransmittableThreadLocalExecutorAdapter.java
Patch:
@@ -28,9 +28,9 @@
  */
 public class TransmittableThreadLocalExecutorAdapter implements DynamicThreadPoolAdapter {
 
-    private static String MATCH_CLASS_NAME = "ExecutorTtlWrapper";
+    private static final String MATCH_CLASS_NAME = "ExecutorTtlWrapper";
 
-    private static String FIELD_NAME = "executor";
+    private static final String FIELD_NAME = "executor";
 
     @Override
     public boolean match(Object executor) {

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/TransmittableThreadLocalExecutorServiceAdapter.java
Patch:
@@ -28,9 +28,9 @@
  */
 public class TransmittableThreadLocalExecutorServiceAdapter implements DynamicThreadPoolAdapter {
 
-    private static String MATCH_CLASS_NAME = "ExecutorServiceTtlWrapper";
+    private static final String MATCH_CLASS_NAME = "ExecutorServiceTtlWrapper";
 
-    private static String FIELD_NAME = "executorService";
+    private static final String FIELD_NAME = "executorService";
 
     @Override
     public boolean match(Object executor) {

File: threadpool/core/src/main/java/cn/hippo4j/core/executor/support/adpter/ZipkinExecutorAdapter.java
Patch:
@@ -31,9 +31,9 @@
  */
 public class ZipkinExecutorAdapter implements DynamicThreadPoolAdapter {
 
-    private final static String MATCH_CLASS_NAME = "brave.internal.WrappingExecutorService";
-    private final static String FIELD_NAME = "delegate";
-    private final static String TYPE_NAME = "java.util.concurrent.ExecutorService";
+    private static final String MATCH_CLASS_NAME = "brave.internal.WrappingExecutorService";
+    private static final String FIELD_NAME = "delegate";
+    private static final String TYPE_NAME = "java.util.concurrent.ExecutorService";
 
     @Override
     public boolean match(Object executor) {

File: threadpool/core/src/main/java/cn/hippo4j/core/plugin/impl/ThreadPoolExecutorShutdownPlugin.java
Patch:
@@ -51,7 +51,7 @@ public class ThreadPoolExecutorShutdownPlugin implements ShutdownAwarePlugin {
      * Await termination millis
      */
     @Setter
-    public long awaitTerminationMillis;
+    private long awaitTerminationMillis;
 
     /**
      * Callback before pool shutdown.

File: threadpool/core/src/main/java/cn/hippo4j/core/toolkit/SystemClock.java
Patch:
@@ -25,7 +25,7 @@
  * System clock.<br>
  * Refer to cn.hutool.core.date.SystemClock<br>
  */
-public class SystemClock {
+public final class SystemClock {
 
     /**
      * Period

File: threadpool/core/src/main/java/cn/hippo4j/core/toolkit/inet/InetUtils.java
Patch:
@@ -168,7 +168,7 @@ public static class HostInfo {
         /**
          * Should override the host info.
          */
-        public boolean override;
+        private boolean override;
 
         private String ipAddress;
 

File: threadpool/server/auth/src/main/java/cn/hippo4j/auth/model/UserInfo.java
Patch:
@@ -31,7 +31,7 @@
  * User info.
  */
 @Data
-@TableName("user")
+@TableName("`user`")
 public class UserInfo {
 
     /**

File: threadpool/adapter/web/src/main/java/cn/hippo4j/adapter/web/undertow/UndertowWebThreadPoolHandlerSupport.java
Patch:
@@ -55,6 +55,7 @@ public void setExecutor(Executor executor) {
         this.executor = executor;
     }
 
+    private final long noRejectCount = -1L;
     @Override
     public ThreadPoolBaseInfo simpleInfo() {
         ThreadPoolBaseInfo poolBaseInfo = new ThreadPoolBaseInfo();
@@ -122,7 +123,7 @@ public ThreadPoolRunStateInfo getWebRunStateInfo() {
         stateInfo.setPeakLoad(peakLoad);
         long rejectCount = fieldObject instanceof DynamicThreadPoolExecutor
                 ? ((DynamicThreadPoolExecutor) fieldObject).getRejectCountNum()
-                : -1L;
+                : -noRejectCount;
         stateInfo.setRejectCount(rejectCount);
         stateInfo.setClientLastRefreshTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
         stateInfo.setTimestamp(System.currentTimeMillis());

File: threadpool/rpc/src/main/java/cn/hippo4j/rpc/client/NettyClientConnection.java
Patch:
@@ -49,6 +49,8 @@ public class NettyClientConnection implements ClientConnection {
      * Obtain the connection timeout period. The default value is 30s
      */
     long timeout = 30000L;
+    final int nanosPerMilliSecond = 1000000;
+
     EventLoopGroup worker = new NioEventLoopGroup();
     NettyConnectPool connectionPool;
     ChannelFuture future;
@@ -74,7 +76,7 @@ public Response connect(Request request) {
             }
             // Wait for execution to complete
             ResultHolder.putThread(key, Thread.currentThread());
-            LockSupport.parkNanos(timeout() * 1000000);
+            LockSupport.parkNanos(timeout() * nanosPerMilliSecond);
             response = ResultHolder.get(key);
             if (response == null) {
                 throw new TimeOutException("Timeout waiting for server-side response");

File: threadpool/rpc/src/main/java/cn/hippo4j/rpc/coder/NettyEncoder.java
Patch:
@@ -34,7 +34,8 @@
  */
 public class NettyEncoder extends MessageToByteEncoder<Serializable> {
 
-    private static final byte[] BYTE = new byte[4];
+    private static final int BYTE_LENGTH = 4;
+    private static final byte[] BYTE = new byte[BYTE_LENGTH];
 
     @Override
     protected void encode(ChannelHandlerContext ctx, Serializable msg, ByteBuf out) throws Exception {
@@ -49,6 +50,6 @@ protected void encode(ChannelHandlerContext ctx, Serializable msg, ByteBuf out)
             throw new CoderException("The encoding is abnormal, which may be caused by the transfer object being unable to be serialized");
         }
         int endIndex = out.writerIndex();
-        out.setInt(startIndex, endIndex - startIndex - 4);
+        out.setInt(startIndex, endIndex - startIndex - BYTE_LENGTH);
     }
 }

File: threadpool/rpc/src/main/java/cn/hippo4j/rpc/server/NettyServerConnection.java
Patch:
@@ -56,6 +56,7 @@ public class NettyServerConnection extends AbstractNettyHandlerManager implement
     Class<? extends ServerChannel> socketChannelCls = NioServerSocketChannel.class;
     ChannelFuture future;
     Channel channel;
+    private final int maxPortNum = 65535;
 
     public NettyServerConnection(EventLoopGroup leader, EventLoopGroup worker, List<ChannelHandler> handlers) {
         super(handlers);
@@ -80,7 +81,7 @@ public NettyServerConnection(List<ChannelHandler> handlers) {
     @Override
     public void bind(ServerPort port) {
         int serverPort = port.getPort();
-        if (serverPort < 0 || serverPort > 65535) {
+        if (serverPort < 0 || serverPort > maxPortNum) {
             throw new ConnectionException("The port number " + serverPort + " is outside 0~65535, which is not a legal port number");
         }
         ServerBootstrap server = new ServerBootstrap();

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/AbstractHystrixThreadPoolAdapter.java
Patch:
@@ -113,6 +113,9 @@ public void onApplicationEvent(ApplicationStartedEvent event) {
         scheduler.schedule(hystrixThreadPoolRefreshTask, taskIntervalSeconds, TimeUnit.SECONDS);
     }
 
+    /**
+     * hystrix thread-pool refresh task
+     */
     class HystrixThreadPoolRefreshTask implements Runnable {
 
         private final ScheduledExecutorService scheduler;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/ClientShutdown.java
Patch:
@@ -33,7 +33,7 @@ public class ClientShutdown {
 
     @Getter
     private volatile boolean prepareClose = false;
-    private final static Long TIME_OUT_SECOND = 1L;
+    private static final Long TIME_OUT_SECOND = 1L;
 
     private static final int DEFAULT_COUNT = 1;
     private final CountDownLatch countDownLatch = new CountDownLatch(DEFAULT_COUNT);

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/DynamicThreadPoolSubscribeConfig.java
Patch:
@@ -41,10 +41,12 @@ public class DynamicThreadPoolSubscribeConfig {
 
     private final BootstrapProperties properties;
 
+    private final int defaultAliveTime = 2000;
+
     private final ExecutorService configRefreshExecutorService = ThreadPoolBuilder.builder()
             .corePoolSize(1)
             .maximumPoolSize(2)
-            .keepAliveTime(2000)
+            .keepAliveTime(defaultAliveTime)
             .timeUnit(TimeUnit.MILLISECONDS)
             .workQueue(BlockingQueueTypeEnum.SYNCHRONOUS_QUEUE)
             .allowCoreThreadTimeOut(true)

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/security/SecurityProxy.java
Patch:
@@ -39,6 +39,8 @@ public class SecurityProxy {
 
     private static final String APPLY_TOKEN_URL = Constants.BASE_PATH + "/auth/users/apply/token";
 
+    private final int refreshWindowDuration = 10;
+
     private final String username;
 
     private final String password;
@@ -88,7 +90,7 @@ public boolean applyToken(String server) {
                 TokenInfo tokenInfo = JSONUtil.parseObject(tokenJsonStr, TokenInfo.class);
                 accessToken = tokenInfo.getAccessToken();
                 tokenTtl = tokenInfo.getTokenTtl();
-                tokenRefreshWindow = tokenTtl / 10;
+                tokenRefreshWindow = tokenTtl / refreshWindowDuration;
             } catch (Throwable ex) {
                 log.error("Failed to apply for token. message: {}", ex.getMessage());
                 return false;

File: hippo4j-agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/registry/AgentThreadPoolExecutorHolder.java
Patch:
@@ -22,6 +22,7 @@
 import cn.hippo4j.common.config.ExecutorProperties;
 import lombok.Data;
 
+import java.util.Properties;
 import java.util.concurrent.ThreadPoolExecutor;
 
 @Data
@@ -35,12 +36,12 @@ public class AgentThreadPoolExecutorHolder {
 
     private ThreadPoolExecutor executor;
 
-    private ExecutorProperties properties;
+    private Properties properties;
 
     public AgentThreadPoolExecutorHolder() {
     }
 
-    public AgentThreadPoolExecutorHolder(String executorName, ThreadPoolExecutor executor, ExecutorProperties properties) {
+    public AgentThreadPoolExecutorHolder(String executorName, ThreadPoolExecutor executor, Properties properties) {
         this.executorName = executorName;
         this.executor = executor;
         this.properties = properties;

File: hippo4j-agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/util/ReflectUtil.java
Patch:
@@ -30,11 +30,12 @@ public class ReflectUtil {
     private static final ILog LOGGER = LogManager.getLogger(ReflectUtil.class);
 
     public static List<Field> getStaticFieldsFromType(Class<?> clazz, Class<?> declaredType) {
-        Field[] fields = clazz.getFields();
+        Field[] fields = clazz.getDeclaredFields();
         List<Field> result = new ArrayList<>();
         for (Field field : fields) {
             if (field.getType().isAssignableFrom(declaredType)
                     && Modifier.isStatic(field.getModifiers())) {
+                field.setAccessible(true);
                 result.add(field);
             }
         }

File: hippo4j-adapter/hippo4j-adapter-kafka/src/main/java/cn/hippo4j/adapter/kafka/KafkaThreadPoolAdapter.java
Patch:
@@ -151,8 +151,8 @@ private static boolean addConsumer(String threadPoolKey, ConcurrentMessageListen
         ContainerProperties containerProperties = concurrentContainer.getContainerProperties();
         TopicPartitionOffset[] topicPartitions = containerProperties.getTopicPartitions();
         if (topicPartitions != null && concurrency > topicPartitions.length) {
-            log.warn("[{}] Kafka consuming thread pool not support modify. " +
-                    "When specific partitions are provided, the concurrency must be less than or "
+            log.warn("[{}] Kafka consuming thread pool not support modify. "
+                    + "When specific partitions are provided, the concurrency must be less than or "
                     + "equal to the number of partitions;", threadPoolKey);
             return false;
         }

File: hippo4j-agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/conf/Config.java
Patch:
@@ -370,6 +370,7 @@ public static class ThreadPool {
         }
 
         public static class Apollo {
+
             public static class App {
 
                 public static String ID;

File: hippo4j-agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/conf/dynamic/AgentConfigChangeWatcher.java
Patch:
@@ -44,9 +44,9 @@ public AgentConfigChangeWatcher(String propertyKey) {
 
     @Override
     public String toString() {
-        return "AgentConfigChangeWatcher{" +
-                "propertyKey='" + propertyKey + '\'' +
-                '}';
+        return "AgentConfigChangeWatcher{"
+                + "propertyKey='" + propertyKey + '\''
+                + '}';
     }
 
     @Getter

File: hippo4j-agent/hippo4j-agent-core/src/main/java/cn/hippo4j/agent/core/util/ReflectUtil.java
Patch:
@@ -33,8 +33,8 @@ public static List<Field> getStaticFieldsFromType(Class<?> clazz, Class<?> decla
         Field[] fields = clazz.getFields();
         List<Field> result = new ArrayList<>();
         for (Field field : fields) {
-            if (field.getType().isAssignableFrom(declaredType) &&
-                    Modifier.isStatic(field.getModifiers())) {
+            if (field.getType().isAssignableFrom(declaredType)
+                    && Modifier.isStatic(field.getModifiers())) {
                 result.add(field);
             }
         }

File: hippo4j-agent/hippo4j-agent-plugin/spring-plugins/spring-boot-1.x-plugin/src/main/java/cn/hippo4j/agent/plugin/spring/boot/v1/ApolloSpringBootProperties.java
Patch:
@@ -24,7 +24,6 @@
 
 public class ApolloSpringBootProperties {
 
-
     public static class Spring {
 
         public static class Dynamic {

File: hippo4j-common/src/main/java/cn/hippo4j/common/extension/config/ExtensionRegisterBootstrap.java
Patch:
@@ -50,8 +50,8 @@ public void run(ApplicationArguments args) throws Exception {
     }
 
     private boolean filterClass(String beanName, Object bean) {
-        return bean.getClass().isAssignableFrom(IExtension.class) ||
-                ScopedProxyUtils.isScopedTarget(beanName) ||
-                !(bean instanceof IExtension);
+        return bean.getClass().isAssignableFrom(IExtension.class)
+                || ScopedProxyUtils.isScopedTarget(beanName)
+                || !(bean instanceof IExtension);
     }
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/extension/support/ExtensionInvoker.java
Patch:
@@ -33,7 +33,7 @@
  */
 public class ExtensionInvoker {
 
-    private static final ExtensionRegistry registry = ExtensionRegistry.getInstance();
+    private static final ExtensionRegistry REGISTRY = ExtensionRegistry.getInstance();
 
     public static <T extends IExtension, E> List<E> reduceExecute(Class<T> targetClz,
                                                                   ExtensionCallback<T, E> callback) {
@@ -47,7 +47,7 @@ public static <T extends IExtension, E, R> R reduceExecute(Class<T> targetClz,
         Assert.isTrue(IExtension.class.isAssignableFrom(targetClz),
                 "can not execute extension point. please implement base extension interface(" + IExtension.class.getName() + ") first.");
 
-        List<IExtension> realizations = registry.find(targetClz);
+        List<IExtension> realizations = REGISTRY.find(targetClz);
         if (CollectionUtil.isEmpty(realizations)) {
             realizations = new ArrayList<>(ServiceLoaderRegistry.getSingletonServiceInstances(targetClz));
         }

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/MapUtil.java
Patch:
@@ -181,7 +181,7 @@ public static List<String> parseMapForFilter(Map<String, ?> sourceMap, String fi
      * @return
      */
     private static boolean checkKey(String key, String filters) {
-        if (key.indexOf(filters) > -1) {
+        if (key.contains(filters)) {
             return true;
         } else {
             return false;

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/ReflectUtil.java
Patch:
@@ -299,8 +299,8 @@ public static Object createInstance(Class<?> cls) {
     public static Field findField(Object obj, String filedName, String fieldType) {
         Field[] fields = ReflectUtil.getFields(obj.getClass());
         for (Field field : fields) {
-            if (field.getName().contains(filedName) &&
-                    (field.getType().getName().contains(fieldType))) {
+            if (field.getName().contains(filedName)
+                    && (field.getType().getName().contains(fieldType))) {
                 return field;
             }
         }

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/HandlerManager.java
Patch:
@@ -66,9 +66,9 @@ default HandlerEntity<T> getHandlerEntity(long order, T handler, String name) {
         boolean b = cls.isAnnotationPresent(ChannelHandler.Sharable.class)
                 || HandlerManager.class.isAssignableFrom(cls);
         if (!b) {
-            throw new IllegalException("Join the execution of the handler must add io.netty.channel.ChannelHandler." +
-                    "Sharable annotations, Please for the handler class " + cls.getName() + " add io.netty.channel." +
-                    "ChannelHandler.Sharable annotation");
+            throw new IllegalException("Join the execution of the handler must add io.netty.channel.ChannelHandler."
+                    + "Sharable annotations, Please for the handler class " + cls.getName() + " add io.netty.channel."
+                    + "ChannelHandler.Sharable annotation");
         }
         return new HandlerEntity<>(order, handler, name);
     }

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/NettyClientSupport.java
Patch:
@@ -60,7 +60,7 @@ public final class NettyClientSupport {
     /**
      * the cache for client
      */
-    private static final Map<InetSocketAddress, Client> clientMap = new ConcurrentHashMap<>();
+    private static final Map<InetSocketAddress, Client> CLIENT_MAP = new ConcurrentHashMap<>();
 
     /**
      * Obtain the client connected to the server through the server address. If the client does not exist, create one
@@ -70,7 +70,7 @@ public final class NettyClientSupport {
      * @return Client
      */
     public static Client getClient(InetSocketAddress address, HandlerManager<ChannelHandler> handlerManager) {
-        return clientMap.computeIfAbsent(address, a -> {
+        return CLIENT_MAP.computeIfAbsent(address, a -> {
             NettyClientPoolHandler handler = (handlerManager instanceof NettyClientPoolHandler)
                     ? (NettyClientPoolHandler) handlerManager
                     : new NettyClientPoolHandler();
@@ -98,7 +98,7 @@ public static Client getClient(InetSocketAddress address) {
      * @param address the address
      */
     public static void closeClient(InetSocketAddress address) {
-        Client client = clientMap.remove(address);
+        Client client = CLIENT_MAP.remove(address);
         Optional.ofNullable(client)
                 .ifPresent(c -> {
                     try {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/client/ClientConnection.java
Patch:
@@ -22,7 +22,9 @@
 import cn.hippo4j.rpc.model.Response;
 
 /**
- * Applicable to client connections
+ * Applicable to client connections<br>
+ *
+ * @since 1.5.1
  */
 public interface ClientConnection extends Connection {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/coder/CompactObjectOutputStream.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * object OutputStream
+ *
+ * @since 1.5.1
  */
 public class CompactObjectOutputStream extends ObjectOutputStream {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/coder/NettyEncoder.java
Patch:
@@ -29,6 +29,8 @@
 /**
  * this is a encoder, For custom gluing and unpacking<br>
  * {@link io.netty.handler.codec.serialization.ObjectEncoder}
+ *
+ * @since 1.5.1
  */
 public class NettyEncoder extends MessageToByteEncoder<Serializable> {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/ClassRegistry.java
Patch:
@@ -25,6 +25,8 @@
 
 /**
  * the registration center for Client and Server
+ *
+ * @since 1.5.1
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class ClassRegistry {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/DefaultInstance.java
Patch:
@@ -27,6 +27,8 @@
  * You simply create an instance of a class based on its name and specific type.
  * Load through the ServiceLoader first. If the load fails, load directly through the instantiation.
  * If it is an interface, throw an exception. This is not elegant implementation
+ *
+ * @since 1.5.1
  */
 public class DefaultInstance implements Instance {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/DiscoveryAdapter.java
Patch:
@@ -22,6 +22,8 @@
 /**
  * The adaptation layer of different service centers is used to know
  * the host of different services through the registration center
+ *
+ * @since 1.5.1
  */
 public interface DiscoveryAdapter {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/Instance.java
Patch:
@@ -19,6 +19,8 @@
 
 /**
  * Instance interface to get an instance
+ *
+ * @since 1.5.1
  */
 public interface Instance {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/ServerPort.java
Patch:
@@ -19,6 +19,8 @@
 
 /**
  * Gets the top-level interface of the instance port
+ *
+ * @since 1.5.1
  */
 @FunctionalInterface
 public interface ServerPort {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/SpringContextInstance.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * Adapter Spring, The requested object is managed by spring
+ *
+ * @since 1.5.1
  */
 public class SpringContextInstance implements Instance {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/exception/CoderException.java
Patch:
@@ -20,6 +20,8 @@
 /**
  * During decoding and encoding, if an exception occurs, an exception of type {@link CoderException} is thrown,
  * which is not different from a {@link RuntimeException}, but is more explicit about the type of exception
+ *
+ * @since 1.5.1
  */
 public class CoderException extends RuntimeException {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/exception/ConnectionException.java
Patch:
@@ -21,6 +21,8 @@
  * If an exception occurs during the connection between the server and the client, an exception of type
  * {@link ConnectionException} is thrown, which is not different from {@link RuntimeException}, but is more explicit
  * about the type of exception
+ *
+ * @since 1.5.1
  */
 public class ConnectionException extends RuntimeException {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/exception/TimeOutException.java
Patch:
@@ -20,6 +20,8 @@
 /**
  * If there is a timeout between the server and the client, you will get a {@link TimeOutException},
  * which is not different from {@link RuntimeException}, but it will be more explicit about the type of exception, right
+ *
+ * @since 1.5.1
  */
 public class TimeOutException extends RuntimeException {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/ConnectHandler.java
Patch:
@@ -25,6 +25,7 @@
  * must be specified, such as serialization and parsing, requesting and receiving
  * requests, and so on<br>
  *
+ * @since 1.5.1
  */
 public interface ConnectHandler {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/NettyClientTakeHandler.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * Interconnect with the netty mediation layer
+ *
+ * @since 1.5.1
  */
 @ChannelHandler.Sharable
 public class NettyClientTakeHandler extends AbstractNettyTakeHandler implements ConnectHandler {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/DefaultRequest.java
Patch:
@@ -25,6 +25,8 @@
 /**
  * default request<br>
  * Use the fully qualified name key of the interface and override equals and hashCode
+ *
+ * @since 1.5.1
  */
 public final class DefaultRequest implements Request {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/DefaultResponse.java
Patch:
@@ -25,6 +25,8 @@
 /**
  * default request<br>
  * Use the fully qualified name key of the interface and override equals and hashCode
+ *
+ * @since 1.5.1
  */
 public class DefaultResponse implements Response {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/Request.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * request
+ *
+ * @since 1.5.1
  */
 public interface Request extends Serializable {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/Response.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * Response
+ *
+ * @since 1.5.1
  */
 public interface Response extends Serializable {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/server/RPCServer.java
Patch:
@@ -24,6 +24,8 @@
 
 /**
  * Server Implementation
+ *
+ * @since 1.5.1
  */
 public class RPCServer implements Server {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/server/Server.java
Patch:
@@ -21,6 +21,8 @@
 
 /**
  * the service for RPC, Explain the role of the service in the request
+ *
+ * @since 1.5.1
  */
 public interface Server extends Closeable {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/server/ServerConnection.java
Patch:
@@ -22,6 +22,8 @@
 
 /**
  * This applies to server-side connections
+ *
+ * @since 1.5.1
  */
 public interface ServerConnection extends Connection {
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/NettyConnectPoolHolder.java
Patch:
@@ -31,6 +31,8 @@
 
 /**
  * To avoid creating multiple connection pools for the same host:port, save all connection pools of the client
+ *
+ * @since 1.5.1
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class NettyConnectPoolHolder {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/NettyProxyCenter.java
Patch:
@@ -36,6 +36,8 @@
 
 /**
  * Add a proxy for the request, {@link Proxy} and {@link InvocationHandler}
+ *
+ * @since 1.5.1
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class NettyProxyCenter {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/NettyServerSupport.java
Patch:
@@ -40,6 +40,7 @@
  * @see RPCServer
  * @see NettyServerConnection
  * @see NettyClientSupport
+ * @since 1.5.1
  */
 public class NettyServerSupport implements Server {
 
@@ -95,7 +96,7 @@ protected void initServer() {
                 : new NettyServerConnection();
         // Assign a default handler if no handler exists
         if (connection.isEmpty()) {
-            connection.addFirst(new NettyServerTakeHandler(new DefaultInstance()));
+            connection.addFirst(null, new NettyServerTakeHandler(new DefaultInstance()));
         }
         server = new RPCServer(connection, serverPort);
     }

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/ResultHolder.java
Patch:
@@ -31,6 +31,8 @@
  * The unique remote call can be determined by the key of request and
  * response, and the result of the call is stored in the secondary cache,
  * which is convenient for the client to use at any time.
+ *
+ * @since 1.5.1
  */
 @Slf4j
 @NoArgsConstructor(access = AccessLevel.PRIVATE)

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/handler/TestHandler.java
Patch:
@@ -19,7 +19,7 @@
 
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
-
+@ChannelHandler.Sharable
 public class TestHandler implements ChannelHandler {
 
     @Override

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/server/NettyServerConnectionTest.java
Patch:
@@ -27,15 +27,15 @@ public class NettyServerConnectionTest {
     public void addLast() {
         NettyServerConnection connection = new NettyServerConnection();
         Assert.assertTrue(connection.isEmpty());
-        connection.addLast(new TestHandler());
+        connection.addLast(null, new TestHandler());
         Assert.assertFalse(connection.isEmpty());
     }
 
     @Test
     public void addFirst() {
         NettyServerConnection connection = new NettyServerConnection();
         Assert.assertTrue(connection.isEmpty());
-        connection.addFirst(new TestHandler());
+        connection.addFirst(null, new TestHandler());
         Assert.assertFalse(connection.isEmpty());
     }
 

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/support/NettyConnectPoolHolderTest.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.rpc.support;
 
+import cn.hippo4j.rpc.client.RandomPort;
 import cn.hippo4j.rpc.discovery.ServerPort;
 import cn.hippo4j.rpc.handler.NettyClientPoolHandler;
 import cn.hippo4j.rpc.handler.NettyClientTakeHandler;
@@ -78,7 +79,7 @@ static class TestServerPort implements ServerPort {
 
         @Override
         public int getPort() {
-            return 8895;
+            return RandomPort.getSafeRandomPort();
         }
     }
 }
\ No newline at end of file

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/support/NettyConnectPoolTest.java
Patch:
@@ -18,6 +18,7 @@
 package cn.hippo4j.rpc.support;
 
 import cn.hippo4j.common.toolkit.ThreadUtil;
+import cn.hippo4j.rpc.client.RandomPort;
 import cn.hippo4j.rpc.discovery.DefaultInstance;
 import cn.hippo4j.rpc.discovery.Instance;
 import cn.hippo4j.rpc.discovery.ServerPort;
@@ -112,9 +113,10 @@ public void close() throws IOException {
 
     static class TestServerPort implements ServerPort {
 
+        int port = RandomPort.getSafeRandomPort();
         @Override
         public int getPort() {
-            return 8890;
+            return port;
         }
     }
 }
\ No newline at end of file

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/BootstrapConfigProperties.java
Patch:
@@ -23,6 +23,7 @@
 import lombok.Setter;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -86,7 +87,7 @@ public class BootstrapConfigProperties implements BootstrapPropertiesInterface {
     /**
      * Notify platforms.
      */
-    private List<NotifyPlatformProperties> notifyPlatforms = Collections.emptyList();
+    private List<NotifyPlatformProperties> notifyPlatforms = new ArrayList<>();
 
     /**
      * Check thread pool running status interval.

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/BootstrapConfigProperties.java
Patch:
@@ -23,6 +23,7 @@
 import lombok.Setter;
 import org.springframework.boot.context.properties.ConfigurationProperties;
 
+import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 
@@ -85,7 +86,7 @@ public class BootstrapConfigProperties implements BootstrapPropertiesInterface {
     /**
      * Notify platforms.
      */
-    private List<NotifyPlatformProperties> notifyPlatforms;
+    private List<NotifyPlatformProperties> notifyPlatforms = Collections.emptyList();
 
     /**
      * Check thread pool running status interval.

File: hippo4j-example/hippo4j-example-core/src/main/java/cn/hippo4j/example/core/inittest/RegisterDynamicThreadPoolTest.java
Patch:
@@ -23,7 +23,6 @@
 import cn.hippo4j.common.model.register.DynamicThreadPoolRegisterWrapper;
 import cn.hippo4j.common.model.register.notify.DynamicThreadPoolRegisterCoreNotifyParameter;
 import cn.hippo4j.common.model.register.notify.DynamicThreadPoolRegisterServerNotifyParameter;
-import cn.hippo4j.common.toolkit.JSONUtil;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
 import cn.hippo4j.message.enums.NotifyPlatformEnum;
 import lombok.extern.slf4j.Slf4j;
@@ -73,7 +72,7 @@ public static ThreadPoolExecutor registerDynamicThreadPool(String threadPoolId)
                 .serverNotify(serverNotifyParameter)
                 .build();
         ThreadPoolExecutor dynamicThreadPool = GlobalThreadPoolManage.dynamicRegister(registerWrapper);
-        log.info("Dynamic registration thread pool parameter details: {}", JSONUtil.toJSONString(dynamicThreadPool));
+        log.info("Dynamic registration thread pool parameter details: {}", dynamicThreadPool);
         return dynamicThreadPool;
     }
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/ThreadPoolRunStateInfo.java
Patch:
@@ -117,14 +117,14 @@ public class ThreadPoolRunStateInfo extends ThreadPoolBaseInfo implements Serial
     private Long timestamp;
 
     public Integer getSimpleCurrentLoad() {
-        if (Objects.nonNull(getCurrentLoad())){
+        if (Objects.nonNull(getCurrentLoad())) {
             return Integer.parseInt(getCurrentLoad().replace("%", ""));
         }
         return null;
     }
 
     public Integer getSimplePeakLoad() {
-        if (Objects.nonNull(getPeakLoad())){
+        if (Objects.nonNull(getPeakLoad())) {
             return Integer.parseInt(getPeakLoad().replace("%", ""));
         }
         return null;

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/notify/ConfigModeNotifyConfigBuilder.java
Patch:
@@ -70,6 +70,9 @@ public Map<String, List<NotifyConfigDTO>> buildNotify() {
         }
         // register notify config for web
         WebExecutorProperties webProperties = configProperties.getWeb();
+        if (webProperties == null) {
+            return resultMap;
+        }
         if (StringUtil.isBlank(webProperties.getThreadPoolId())) {
             webProperties.setThreadPoolId(webThreadPoolService.getWebContainerType().name());
         }

File: hippo4j-adapter/hippo4j-adapter-web/src/main/java/cn/hippo4j/adapter/web/tomcat/TomcatWebThreadPoolHandlerSupport.java
Patch:
@@ -91,7 +91,7 @@ public ThreadPoolParameter getWebThreadPoolParameter() {
             long keepAliveTime = tomcatThreadPoolExecutor.getKeepAliveTime(TimeUnit.SECONDS);
             parameterInfo.setCoreSize(minThreads);
             parameterInfo.setMaxSize(maxThreads);
-            parameterInfo.setKeepAliveTime((int) keepAliveTime);
+            parameterInfo.setKeepAliveTime(keepAliveTime);
         } catch (Exception ex) {
             log.error("Failed to get the tomcat thread pool parameter.", ex);
         }

File: hippo4j-adapter/hippo4j-adapter-web/src/main/java/cn/hippo4j/adapter/web/undertow/UndertowWebThreadPoolHandlerSupport.java
Patch:
@@ -82,7 +82,7 @@ public ThreadPoolParameter getWebThreadPoolParameter() {
             XnioWorker xnioWorker = (XnioWorker) executor;
             int minThreads = xnioWorker.getOption(Options.WORKER_TASK_CORE_THREADS);
             int maxThreads = xnioWorker.getOption(Options.WORKER_TASK_MAX_THREADS);
-            int keepAliveTime = xnioWorker.getOption(Options.WORKER_TASK_KEEPALIVE);
+            long keepAliveTime = xnioWorker.getOption(Options.WORKER_TASK_KEEPALIVE);
             parameterInfo.setCoreSize(minThreads);
             parameterInfo.setMaxSize(maxThreads);
             parameterInfo.setKeepAliveTime(keepAliveTime);
@@ -135,7 +135,7 @@ public void updateWebThreadPool(ThreadPoolParameterInfo threadPoolParameterInfo)
             XnioWorker xnioWorker = (XnioWorker) executor;
             Integer coreSize = threadPoolParameterInfo.corePoolSizeAdapt();
             Integer maxSize = threadPoolParameterInfo.maximumPoolSizeAdapt();
-            Integer keepAliveTime = threadPoolParameterInfo.getKeepAliveTime();
+            int keepAliveTime = threadPoolParameterInfo.getKeepAliveTime().intValue();
             int originalCoreSize = xnioWorker.getOption(Options.WORKER_TASK_CORE_THREADS);
             int originalMaximumPoolSize = xnioWorker.getOption(Options.WORKER_TASK_MAX_THREADS);
             int originalKeepAliveTime = xnioWorker.getOption(Options.WORKER_TASK_KEEPALIVE);

File: hippo4j-common/src/main/java/cn/hippo4j/common/api/ExecutorNotifyProperties.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.springboot.starter.config;
+package cn.hippo4j.common.api;
 
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -27,7 +27,7 @@
 @Data
 @NoArgsConstructor
 @AllArgsConstructor
-public class DynamicThreadPoolNotifyProperties {
+public class ExecutorNotifyProperties {
 
     /**
      * Thread pool run alarm interval. unit: s

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/ThreadPoolParameter.java
Patch:
@@ -76,7 +76,7 @@ public interface ThreadPoolParameter {
      *
      * @return
      */
-    Integer getKeepAliveTime();
+    Long getKeepAliveTime();
 
     /**
      * Get execute time out

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/ThreadPoolParameterInfo.java
Patch:
@@ -94,7 +94,7 @@ public class ThreadPoolParameterInfo implements ThreadPoolParameter, Serializabl
     /**
      * Keep alive time
      */
-    private Integer keepAliveTime;
+    private Long keepAliveTime;
 
     /**
      * Execute time out

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/ContentUtilTest.java
Patch:
@@ -29,7 +29,7 @@ public void assertGetPoolContent() {
                 ":1,\"capacityAlarm\":80,\"livenessAlarm\":80,\"allowCoreThreadTimeOut\":1}";
         ThreadPoolParameterInfo threadPoolParameterInfo = ThreadPoolParameterInfo.builder().tenantId("prescription")
                 .itemId("dynamic-threadpool-example").tpId("message-consume").content("描述信息").corePoolSize(1)
-                .maximumPoolSize(2).queueType(1).capacity(4).keepAliveTime(513).executeTimeOut(null).rejectedType(4)
+                .maximumPoolSize(2).queueType(1).capacity(4).keepAliveTime(513L).executeTimeOut(null).rejectedType(4)
                 .isAlarm(1).capacityAlarm(80).livenessAlarm(80).allowCoreThreadTimeOut(1).build();
         Assert.isTrue(testText.equals(ContentUtil.getPoolContent(threadPoolParameterInfo)));
     }

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/Md5UtilTest.java
Patch:
@@ -53,7 +53,7 @@ public void assetGetTpContentMd5() {
         String md5Result = "ef5ea7cb47377fb9fb85a7125e76715d";
         ThreadPoolParameterInfo threadPoolParameterInfo = ThreadPoolParameterInfo.builder().tenantId("prescription")
                 .itemId("dynamic-threadpool-example").tpId("message-consume").content("描述信息").corePoolSize(1)
-                .maximumPoolSize(2).queueType(1).capacity(4).keepAliveTime(513).executeTimeOut(null).rejectedType(4)
+                .maximumPoolSize(2).queueType(1).capacity(4).keepAliveTime(513L).executeTimeOut(null).rejectedType(4)
                 .isAlarm(1).capacityAlarm(80).livenessAlarm(80).allowCoreThreadTimeOut(1).build();
         Assert.isTrue(md5Result.equals(Md5Util.getTpContentMd5(threadPoolParameterInfo)));
     }

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/SingletonTest.java
Patch:
@@ -30,7 +30,7 @@ public void assertSingletonGet() {
         Assert.assertEquals("hippo4j", Singleton.get("userName"));
         ThreadPoolParameterInfo threadPoolParameterInfo = ThreadPoolParameterInfo.builder().tenantId("prescription")
                 .itemId("dynamic-threadpool-example").tpId("message-consume").content("描述信息").corePoolSize(1)
-                .maximumPoolSize(2).queueType(1).capacity(4).keepAliveTime(513).executeTimeOut(null).rejectedType(4)
+                .maximumPoolSize(2).queueType(1).capacity(4).keepAliveTime(513L).executeTimeOut(null).rejectedType(4)
                 .isAlarm(1).capacityAlarm(80).livenessAlarm(80).allowCoreThreadTimeOut(1).build();
         Singleton.put(threadPoolParameterInfo);
         Assert.assertEquals(threadPoolParameterInfo, Singleton.get(ThreadPoolParameterInfo.class.getName()));

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/LarkSendMessageHandler.java
Patch:
@@ -44,7 +44,7 @@
  */
 @Slf4j
 @RequiredArgsConstructor
-public class LarkSendMessageHandler implements SendMessageHandler<AlarmNotifyRequest, ChangeParameterNotifyRequest> {
+public class LarkSendMessageHandler implements SendMessageHandler {
 
     @Override
     public String getType() {

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/base/AbstractRobotSendMessageHandler.java
Patch:
@@ -32,7 +32,7 @@
 /**
  * Abstract robot send message handler.
  */
-public abstract class AbstractRobotSendMessageHandler implements SendMessageHandler<AlarmNotifyRequest, ChangeParameterNotifyRequest> {
+public abstract class AbstractRobotSendMessageHandler implements SendMessageHandler {
 
     /**
      * Build message actual content.

File: hippo4j-message/src/main/java/cn/hippo4j/message/request/base/BaseNotifyRequest.java
Patch:
@@ -18,6 +18,7 @@
 package cn.hippo4j.message.request.base;
 
 import cn.hippo4j.common.api.NotifyRequest;
+import cn.hippo4j.message.enums.NotifyTypeEnum;
 import lombok.Data;
 
 /**

File: hippo4j-server/hippo4j-config/src/main/java/cn/hippo4j/config/model/ConfigInfoBase.java
Patch:
@@ -81,7 +81,7 @@ public class ConfigInfoBase implements Serializable {
     /**
      * keepAliveTime
      */
-    private Integer keepAliveTime;
+    private Long keepAliveTime;
 
     /**
      * executeTimeOut

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/BootstrapConfigProperties.java
Patch:
@@ -78,8 +78,9 @@ public class BootstrapConfigProperties implements BootstrapPropertiesInterface {
 
     /**
      * web config
+     * @since 1.5.0
      */
-    private WebThreadPoolProperties web;
+    private WebExecutorProperties web;
 
     /**
      * Notify platforms.

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/DynamicThreadPoolRefreshListener.java
Patch:
@@ -30,6 +30,7 @@
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
 import cn.hippo4j.message.dto.NotifyConfigDTO;
+import cn.hippo4j.message.enums.NotifyTypeEnum;
 import cn.hippo4j.message.request.ChangeParameterNotifyRequest;
 import cn.hippo4j.message.service.GlobalNotifyAlarmManage;
 import cn.hippo4j.message.service.Hippo4jBaseSendMessageService;
@@ -166,7 +167,8 @@ private void checkNotifyConsistencyAndReplace(ExecutorProperties executorPropert
         boolean checkNotifyConfig = false;
         boolean checkNotifyAlarm = false;
         List<String> changeKeys = new ArrayList<>();
-        Map<String, List<NotifyConfigDTO>> newDynamicThreadPoolNotifyMap = configModeNotifyConfigBuilder.buildSingleNotifyConfig(executorProperties);
+        Map<String, List<NotifyConfigDTO>> newDynamicThreadPoolNotifyMap =
+                configModeNotifyConfigBuilder.buildSingleNotifyConfig(executorProperties);
         Map<String, List<NotifyConfigDTO>> notifyConfigs = hippo4jBaseSendMessageService.getNotifyConfigs();
         if (CollectionUtil.isNotEmpty(notifyConfigs)) {
             for (Map.Entry<String, List<NotifyConfigDTO>> each : newDynamicThreadPoolNotifyMap.entrySet()) {

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/AbstractHystrixThreadPoolAdapter.java
Patch:
@@ -32,6 +32,7 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ScheduledExecutorService;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -67,9 +68,11 @@ public ThreadPoolAdapterState getThreadPoolState(String identify) {
         ThreadPoolAdapterState result = new ThreadPoolAdapterState();
         ThreadPoolExecutor threadPoolExecutor = hystrixConsumeExecutor.get(identify);
         if (threadPoolExecutor != null) {
+            BlockingQueue<Runnable> blockingQueue = threadPoolExecutor.getQueue();
             result.setThreadPoolKey(identify);
             result.setCoreSize(threadPoolExecutor.getCorePoolSize());
             result.setMaximumSize(threadPoolExecutor.getMaximumPoolSize());
+            result.setBlockingQueueCapacity(blockingQueue.size() + blockingQueue.remainingCapacity());
             return result;
         }
         log.warn("[{}] Hystrix thread pool not found.", identify);

File: hippo4j-adapter/hippo4j-adapter-web/src/main/java/cn/hippo4j/adapter/web/WebIpAndPortHolder.java
Patch:
@@ -23,7 +23,6 @@
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.core.toolkit.inet.InetUtils;
 import lombok.NoArgsConstructor;
-import org.springframework.boot.web.server.WebServer;
 import org.springframework.core.env.ConfigurableEnvironment;
 
 import java.util.Arrays;
@@ -86,8 +85,7 @@ private static WebIpAndPortInfo getWebIpAndPortInfo() {
             WebThreadPoolHandlerChoose webThreadPoolHandlerChoose = ApplicationContextHolder.getBean(WebThreadPoolHandlerChoose.class);
             WebThreadPoolService webThreadPoolService = webThreadPoolHandlerChoose.choose();
             // When get the port at startup, can get the message: "port xxx was already in use" or use two ports
-            WebServer webServer = webThreadPoolService.getWebServer();
-            port = webServer.getPort();
+            port = webThreadPoolService.getPort();
         }
 
         return new WebIpAndPortInfo(ip, String.valueOf(port));

File: hippo4j-adapter/hippo4j-adapter-web/src/main/java/cn/hippo4j/adapter/web/WebThreadPoolHandlerChoose.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.adapter.web;
 
+import cn.hippo4j.adapter.web.WebThreadPoolService;
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.web.exception.ServiceException;
 import lombok.extern.slf4j.Slf4j;

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/adpter/ZipkinExecutorAdapter.java
Patch:
@@ -23,6 +23,7 @@
 
 import java.lang.reflect.Field;
 import java.util.Objects;
+import java.util.Optional;
 import java.util.concurrent.Executor;
 
 /**
@@ -40,10 +41,10 @@ public boolean match(Object executor) {
     }
 
     public boolean matchSuper(Object executor) {
-        if (Objects.equals(MATCH_CLASS_NAME, executor.getClass().getName())) {
+        if (Objects.equals(MATCH_CLASS_NAME, Optional.ofNullable(executor).map(Object::getClass).map(Class::getName).orElse(null))) {
             return true;
         } else {
-            return Objects.equals(MATCH_CLASS_NAME, executor.getClass().getSuperclass().getName());
+            return Objects.equals(MATCH_CLASS_NAME, Optional.ofNullable(executor).map(Object::getClass).map(Class::getSuperclass).map(Class::getName).orElse(null));
         }
     }
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/executor/support/BlockingQueueTypeEnum.java
Patch:
@@ -234,11 +234,11 @@ private static <T> BlockingQueue<T> customOrDefaultQueue(Integer capacity, Predi
                 .map(each -> each.generateBlockingQueue())
                 .findFirst()
                 .orElseGet(() -> {
-                    int temCapacity = capacity;
+                    Integer tempCapacity = capacity;
                     if (capacity == null || capacity <= 0) {
-                        temCapacity = DEFAULT_CAPACITY;
+                        tempCapacity = DEFAULT_CAPACITY;
                     }
-                    return new LinkedBlockingQueue<T>(temCapacity);
+                    return new LinkedBlockingQueue<T>(tempCapacity);
                 });
     }
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/HttpMediaType.java
Patch:
@@ -21,8 +21,6 @@
 
 /**
  * Http media type.
- *
- * @author Rongzhen Yan
  */
 public final class HttpMediaType {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/HttpMethod.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * Http method constants.
- *
- * @author Rongzhen Yan
  */
 public class HttpMethod {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/HttpResponseCode.java
Patch:
@@ -19,8 +19,6 @@
 
 /**
  * Http response code.
- *
- * @author Rongzhen Yan
  */
 public class HttpResponseCode {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/extension/annotation/SingletonSPI.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.common.spi.annotation;
+package cn.hippo4j.common.extension.annotation;
 
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
@@ -27,5 +27,6 @@
  */
 @Target(ElementType.TYPE)
 @Retention(RetentionPolicy.RUNTIME)
+@Deprecated
 public @interface SingletonSPI {
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/extension/support/ServiceLoaderInstantiationException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.common.spi;
+package cn.hippo4j.common.extension.support;
 
 /**
  * Service loader instantiation exception.

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/http/HttpUtil.java
Patch:
@@ -43,8 +43,6 @@
 
 /**
  * Http request utilities.
- *
- * @author Rongzhen Yan
  */
 @Slf4j
 @NoArgsConstructor(access = AccessLevel.PRIVATE)

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/http/JdkHttpClientResponse.java
Patch:
@@ -30,8 +30,6 @@
 
 /**
  * Represents a client-side HTTP response with JDK implementation
- *
- * @author Rongzhen Yan
  */
 public class JdkHttpClientResponse implements HttpClientResponse {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/logtracing/LogMessage.java
Patch:
@@ -28,8 +28,6 @@
 
 /**
  * Log message.
- *
- * @author Rongzhen Yan
  */
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public class LogMessage {

File: hippo4j-common/src/test/java/cn/hippo4j/common/spi/TestInterfaceSPI.java
Patch:
@@ -17,8 +17,10 @@
 
 package cn.hippo4j.common.spi;
 
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
+
 /**
- * test {@link DynamicThreadPoolServiceLoader}
+ * test {@link ServiceLoaderRegistry}
  */
 public interface TestInterfaceSPI {
 }

File: hippo4j-common/src/test/java/cn/hippo4j/common/spi/TestInterfaceSPIImpl.java
Patch:
@@ -17,8 +17,10 @@
 
 package cn.hippo4j.common.spi;
 
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
+
 /**
- * test {@link DynamicThreadPoolServiceLoader}
+ * test {@link ServiceLoaderRegistry}
  */
 public class TestInterfaceSPIImpl implements TestInterfaceSPI {
 }

File: hippo4j-common/src/test/java/cn/hippo4j/common/spi/TestSingletonInterfaceSPI.java
Patch:
@@ -17,10 +17,11 @@
 
 package cn.hippo4j.common.spi;
 
-import cn.hippo4j.common.spi.annotation.SingletonSPI;
+import cn.hippo4j.common.extension.annotation.SingletonSPI;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 
 /**
- * test {@link DynamicThreadPoolServiceLoader}
+ * test {@link ServiceLoaderRegistry}
  */
 @SingletonSPI
 public interface TestSingletonInterfaceSPI {

File: hippo4j-common/src/test/java/cn/hippo4j/common/spi/TestSingletonInterfaceSPIImpl.java
Patch:
@@ -17,8 +17,10 @@
 
 package cn.hippo4j.common.spi;
 
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
+
 /**
- * test {@link DynamicThreadPoolServiceLoader}
+ * test {@link ServiceLoaderRegistry}
  */
 public class TestSingletonInterfaceSPIImpl implements TestSingletonInterfaceSPI {
 }

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/adpter/DynamicThreadPoolAdapterChoose.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.core.executor.support.adpter;
 
-import cn.hippo4j.common.spi.DynamicThreadPoolServiceLoader;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 import cn.hippo4j.core.executor.support.spi.DynamicThreadPoolAdapterSPI;
@@ -83,8 +83,8 @@ public static void replace(Object executor, Executor dynamicThreadPoolExecutor)
      * Load SPI customer adapter.
      */
     private static void loadCustomerAdapter() {
-        DynamicThreadPoolServiceLoader.register(DynamicThreadPoolAdapterSPI.class);
-        Collection<DynamicThreadPoolAdapterSPI> instances = DynamicThreadPoolServiceLoader.getSingletonServiceInstances(DynamicThreadPoolAdapterSPI.class);
+        ServiceLoaderRegistry.register(DynamicThreadPoolAdapterSPI.class);
+        Collection<DynamicThreadPoolAdapterSPI> instances = ServiceLoaderRegistry.getSingletonServiceInstances(DynamicThreadPoolAdapterSPI.class);
         if (CollectionUtil.isEmpty(instances)) {
             return;
         }

File: hippo4j-core/src/main/java/cn/hippo4j/core/toolkit/IdentifyUtil.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.common.api.ClientNetworkService;
 import cn.hippo4j.common.config.ApplicationContextHolder;
-import cn.hippo4j.common.spi.DynamicThreadPoolServiceLoader;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.IdUtil;
 import cn.hippo4j.common.toolkit.Joiner;
@@ -39,7 +39,7 @@
 public class IdentifyUtil {
 
     static {
-        DynamicThreadPoolServiceLoader.register(ClientNetworkService.class);
+        ServiceLoaderRegistry.register(ClientNetworkService.class);
     }
 
     /**
@@ -63,7 +63,7 @@ public static synchronized String generate(ConfigurableEnvironment environment,
         if (StringUtil.isNotBlank(IDENTIFY)) {
             return IDENTIFY;
         }
-        String[] customerNetwork = DynamicThreadPoolServiceLoader.getSingletonServiceInstances(ClientNetworkService.class)
+        String[] customerNetwork = ServiceLoaderRegistry.getSingletonServiceInstances(ClientNetworkService.class)
                 .stream().findFirst().map(each -> each.getNetworkIpPort(environment)).orElse(null);
         String ip;
         String port;

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/monitor/ThreadPoolMonitorExecutor.java
Patch:
@@ -27,7 +27,7 @@
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
-import cn.hippo4j.common.spi.DynamicThreadPoolServiceLoader;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.config.springboot.starter.config.BootstrapConfigProperties;
 import cn.hippo4j.config.springboot.starter.config.MonitorProperties;
@@ -74,7 +74,7 @@ public void run(ApplicationArguments args) throws Exception {
         List<String> collectTypes = Arrays.asList(monitor.getCollectTypes().split(","));
         ApplicationContextHolder.getBeansOfType(ThreadPoolMonitor.class).forEach((beanName, bean) -> threadPoolMonitors.add(bean));
         Collection<DynamicThreadPoolMonitor> dynamicThreadPoolMonitors =
-                DynamicThreadPoolServiceLoader.getSingletonServiceInstances(DynamicThreadPoolMonitor.class);
+                ServiceLoaderRegistry.getSingletonServiceInstances(DynamicThreadPoolMonitor.class);
         dynamicThreadPoolMonitors.stream().filter(each -> collectTypes.contains(each.getType())).forEach(each -> threadPoolMonitors.add(each));
         // Execute dynamic thread pool monitoring component.
         collectScheduledExecutor.scheduleWithFixedDelay(

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/controller/ThreadPoolAdapterController.java
Patch:
@@ -21,7 +21,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
 import cn.hippo4j.common.api.ClientNetworkService;
-import cn.hippo4j.common.spi.DynamicThreadPoolServiceLoader;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.web.base.Result;
 import cn.hippo4j.common.web.base.Results;
@@ -59,7 +59,7 @@ public Result<ThreadPoolAdapterState> getAdapterThreadPool(ThreadPoolAdapterPara
             ThreadPoolAdapterState threadPoolState = each.getThreadPoolState(requestParameter.getThreadPoolKey());
             String active = environment.getProperty("spring.profiles.active", "UNKNOWN");
             threadPoolState.setActive(active.toUpperCase());
-            String[] customerNetwork = DynamicThreadPoolServiceLoader.getSingletonServiceInstances(ClientNetworkService.class)
+            String[] customerNetwork = ServiceLoaderRegistry.getSingletonServiceInstances(ClientNetworkService.class)
                     .stream().findFirst().map(network -> network.getNetworkIpPort(environment)).orElse(null);
             String clientAddress;
             if (customerNetwork != null) {

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/monitor/ReportingEventExecutor.java
Patch:
@@ -20,7 +20,7 @@
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.common.monitor.Message;
-import cn.hippo4j.common.spi.DynamicThreadPoolServiceLoader;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.toolkit.ThreadUtil;
@@ -119,7 +119,7 @@ public void run(String... args) {
                 new Integer(collectType.split(",").length),
                 ThreadFactoryBuilder.builder().daemon(true).prefix("client.scheduled.collect.data").build());
         Collection<ThreadPoolMonitor> dynamicThreadPoolMonitors =
-                DynamicThreadPoolServiceLoader.getSingletonServiceInstances(ThreadPoolMonitor.class);
+                ServiceLoaderRegistry.getSingletonServiceInstances(ThreadPoolMonitor.class);
         Map<String, ThreadPoolMonitor> threadPoolMonitorMap = ApplicationContextHolder.getBeansOfType(ThreadPoolMonitor.class);
         boolean customerDynamicThreadPoolMonitorFlag = CollectionUtil.isNotEmpty(dynamicThreadPoolMonitors) || CollectionUtil.isNotEmpty(threadPoolMonitorMap);
         if (customerDynamicThreadPoolMonitorFlag) {

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/provider/InstanceInfoProviderFactory.java
Patch:
@@ -19,7 +19,7 @@
 
 import cn.hippo4j.common.api.ClientNetworkService;
 import cn.hippo4j.common.model.InstanceInfo;
-import cn.hippo4j.common.spi.DynamicThreadPoolServiceLoader;
+import cn.hippo4j.common.extension.support.ServiceLoaderRegistry;
 import cn.hippo4j.common.toolkit.ContentUtil;
 import cn.hippo4j.core.toolkit.IdentifyUtil;
 import cn.hippo4j.core.toolkit.inet.InetUtils;
@@ -40,7 +40,7 @@
 public final class InstanceInfoProviderFactory {
 
     static {
-        DynamicThreadPoolServiceLoader.register(ClientNetworkService.class);
+        ServiceLoaderRegistry.register(ClientNetworkService.class);
     }
 
     /**
@@ -69,7 +69,7 @@ public static InstanceInfo getInstance(final ConfigurableEnvironment environment
                 .setIpApplicationName(CloudCommonIdUtil.getIpApplicationName(environment, inetUtils))
                 .setHostName(InetAddress.getLocalHost().getHostAddress()).setAppName(applicationName)
                 .setPort(port).setClientBasePath(contextPath).setGroupKey(ContentUtil.getGroupKey(itemId, namespace));
-        String[] customerNetwork = DynamicThreadPoolServiceLoader.getSingletonServiceInstances(ClientNetworkService.class)
+        String[] customerNetwork = ServiceLoaderRegistry.getSingletonServiceInstances(ClientNetworkService.class)
                 .stream().findFirst().map(each -> each.getNetworkIpPort(environment)).orElse(null);
         String callBackUrl = new StringBuilder().append(Optional.ofNullable(customerNetwork).map(each -> each[0]).orElse(instanceInfo.getHostName())).append(":")
                 .append(Optional.ofNullable(customerNetwork).map(each -> each[1]).orElse(port)).append(instanceInfo.getClientBasePath())

File: hippo4j-adapter/hippo4j-adapter-alibaba-dubbo/src/main/java/cn/hippo4j/adapter/alibaba/dubbo/AlibabaDubboThreadPoolAdapter.java
Patch:
@@ -20,6 +20,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
+import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import com.alibaba.dubbo.common.extension.ExtensionLoader;
 import com.alibaba.dubbo.common.store.DataStore;
 import lombok.extern.slf4j.Slf4j;
@@ -79,8 +80,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
         }
         int originalCoreSize = executor.getCorePoolSize();
         int originalMaximumPoolSize = executor.getMaximumPoolSize();
-        executor.setCorePoolSize(threadPoolAdapterParameter.getCorePoolSize());
-        executor.setMaximumPoolSize(threadPoolAdapterParameter.getMaximumPoolSize());
+        ThreadPoolExecutorUtil.safeSetPoolSize(executor, threadPoolAdapterParameter.getCorePoolSize(), threadPoolAdapterParameter.getMaximumPoolSize());
         log.info("[{}] Alibaba Dubbo consumption thread pool parameter change. coreSize: {}, maximumSize: {}",
                 threadPoolKey,
                 String.format(CHANGE_DELIMITER, originalCoreSize, executor.getCorePoolSize()),

File: hippo4j-adapter/hippo4j-adapter-dubbo/src/main/java/cn/hippo4j/adapter/dubbo/DubboThreadPoolAdapter.java
Patch:
@@ -21,6 +21,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ReflectUtil;
+import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.dubbo.common.Version;
 import org.apache.dubbo.common.extension.ExtensionLoader;
@@ -83,8 +84,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
         }
         int originalCoreSize = executor.getCorePoolSize();
         int originalMaximumPoolSize = executor.getMaximumPoolSize();
-        executor.setCorePoolSize(threadPoolAdapterParameter.getCorePoolSize());
-        executor.setMaximumPoolSize(threadPoolAdapterParameter.getMaximumPoolSize());
+        ThreadPoolExecutorUtil.safeSetPoolSize(executor, threadPoolAdapterParameter.getCorePoolSize(), threadPoolAdapterParameter.getMaximumPoolSize());
         log.info("[{}] Dubbo consumption thread pool parameter change. coreSize: {}, maximumSize: {}",
                 threadPoolKey,
                 String.format(CHANGE_DELIMITER, originalCoreSize, executor.getCorePoolSize()),

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/HystrixThreadPoolAdapter.java
Patch:
@@ -24,6 +24,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.toolkit.CollectionUtil;
+import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import com.netflix.hystrix.HystrixThreadPool;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.context.event.ApplicationStartedEvent;
@@ -96,8 +97,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
         }
         int originalCoreSize = threadPoolExecutor.getCorePoolSize();
         int originalMaximumPoolSize = threadPoolExecutor.getMaximumPoolSize();
-        threadPoolExecutor.setCorePoolSize(threadPoolAdapterParameter.getCorePoolSize());
-        threadPoolExecutor.setMaximumPoolSize(threadPoolAdapterParameter.getMaximumPoolSize());
+        ThreadPoolExecutorUtil.safeSetPoolSize(threadPoolExecutor, threadPoolAdapterParameter.getCorePoolSize(), threadPoolAdapterParameter.getMaximumPoolSize());
         log.info("[{}] Hystrix thread pool parameter change. coreSize: {}, maximumSize: {}",
                 threadPoolKey,
                 String.format(CHANGE_DELIMITER, originalCoreSize, threadPoolExecutor.getCorePoolSize()),

File: hippo4j-adapter/hippo4j-adapter-rabbitmq/src/main/java/cn/hippo4j/adapter/rabbitmq/RabbitMQThreadPoolAdapter.java
Patch:
@@ -21,6 +21,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
 import cn.hippo4j.common.toolkit.ReflectUtil;
+import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.amqp.rabbit.connection.AbstractConnectionFactory;
@@ -84,8 +85,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
         if (Objects.nonNull(threadPoolTaskExecutor)) {
             int originalCoreSize = threadPoolTaskExecutor.getCorePoolSize();
             int originalMaximumPoolSize = threadPoolTaskExecutor.getMaximumPoolSize();
-            threadPoolTaskExecutor.setMaximumPoolSize(threadPoolAdapterParameter.getMaximumPoolSize());
-            threadPoolTaskExecutor.setCorePoolSize(threadPoolAdapterParameter.getCorePoolSize());
+            ThreadPoolExecutorUtil.safeSetPoolSize(threadPoolTaskExecutor, threadPoolAdapterParameter.getCorePoolSize(), threadPoolAdapterParameter.getMaximumPoolSize());
             log.info("[{}] Rabbitmq consumption thread pool parameter change. coreSize: {}, maximumSize: {}",
                     threadPoolKey,
                     String.format(CHANGE_DELIMITER, originalCoreSize, threadPoolAdapterParameter.getCorePoolSize()),

File: hippo4j-adapter/hippo4j-adapter-rocketmq/src/main/java/cn/hippo4j/adapter/rocketmq/RocketMQThreadPoolAdapter.java
Patch:
@@ -22,6 +22,7 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapterState;
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.toolkit.ReflectUtil;
+import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.rocketmq.client.consumer.DefaultMQPushConsumer;
 import org.apache.rocketmq.client.impl.consumer.ConsumeMessageService;
@@ -79,8 +80,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
         if (rocketMQConsumeExecutor != null) {
             int originalCoreSize = rocketMQConsumeExecutor.getCorePoolSize();
             int originalMaximumPoolSize = rocketMQConsumeExecutor.getMaximumPoolSize();
-            rocketMQConsumeExecutor.setCorePoolSize(threadPoolAdapterParameter.getCorePoolSize());
-            rocketMQConsumeExecutor.setMaximumPoolSize(threadPoolAdapterParameter.getMaximumPoolSize());
+            ThreadPoolExecutorUtil.safeSetPoolSize(rocketMQConsumeExecutor, threadPoolAdapterParameter.getCorePoolSize(), threadPoolAdapterParameter.getMaximumPoolSize());
             log.info("[{}] RocketMQ consumption thread pool parameter change. coreSize: {}, maximumSize: {}",
                     threadPoolKey,
                     String.format(CHANGE_DELIMITER, originalCoreSize, rocketMQConsumeExecutor.getCorePoolSize()),

File: hippo4j-adapter/hippo4j-adapter-spring-cloud-stream-rocketmq/src/main/java/cn/hippo4j/adapter/springcloud/stream/rocketmq/SpringCloudStreamRocketMQThreadPoolAdapter.java
Patch:
@@ -23,6 +23,7 @@
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.ReflectUtil;
+import cn.hippo4j.common.toolkit.ThreadPoolExecutorUtil;
 import com.alibaba.cloud.stream.binder.rocketmq.consuming.RocketMQListenerBindingContainer;
 import com.alibaba.cloud.stream.binder.rocketmq.integration.RocketMQInboundChannelAdapter;
 import lombok.extern.slf4j.Slf4j;
@@ -87,8 +88,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
         if (rocketMQConsumeExecutor != null) {
             int originalCoreSize = rocketMQConsumeExecutor.getCorePoolSize();
             int originalMaximumPoolSize = rocketMQConsumeExecutor.getMaximumPoolSize();
-            rocketMQConsumeExecutor.setCorePoolSize(threadPoolAdapterParameter.getCorePoolSize());
-            rocketMQConsumeExecutor.setMaximumPoolSize(threadPoolAdapterParameter.getMaximumPoolSize());
+            ThreadPoolExecutorUtil.safeSetPoolSize(rocketMQConsumeExecutor, threadPoolAdapterParameter.getCorePoolSize(), threadPoolAdapterParameter.getMaximumPoolSize());
             log.info("[{}] RocketMQ consumption thread pool parameter change. coreSize: {}, maximumSize: {}",
                     threadPoolKey,
                     String.format(CHANGE_DELIMITER, originalCoreSize, rocketMQConsumeExecutor.getCorePoolSize()),

File: hippo4j-common/src/main/java/cn/hippo4j/common/executor/support/CustomBlockingQueue.java
Patch:
@@ -22,7 +22,7 @@
 /**
  * Custom blocking-queue.
  */
-public interface CustomBlockingQueue {
+public interface CustomBlockingQueue<T> {
 
     /**
      * Gets the custom blocking queue type.
@@ -45,5 +45,5 @@ default String getName() {
      *
      * @return
      */
-    BlockingQueue generateBlockingQueue();
+    BlockingQueue<T> generateBlockingQueue();
 }

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/adpter/DynamicThreadPoolAdapterChoose.java
Patch:
@@ -35,6 +35,7 @@ public class DynamicThreadPoolAdapterChoose {
         DYNAMIC_THREAD_POOL_ADAPTERS.add(new TransmittableThreadLocalExecutorAdapter());
         DYNAMIC_THREAD_POOL_ADAPTERS.add(new TransmittableThreadLocalExecutorServiceAdapter());
         DYNAMIC_THREAD_POOL_ADAPTERS.add(new ThreadPoolTaskExecutorAdapter());
+        DYNAMIC_THREAD_POOL_ADAPTERS.add(new ZipkinExecutorAdapter());
     }
 
     /**

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/support/NettyServerSupportTest.java
Patch:
@@ -35,8 +35,6 @@ public synchronized void bind() throws IOException {
         }
         Assert.assertTrue(support.isActive());
         support.close();
-        ThreadUtil.sleep(1000L);
-        Assert.assertFalse(support.isActive());
     }
 
 }
\ No newline at end of file

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/client/RPCClientTest.java
Patch:
@@ -99,7 +99,7 @@ public void connectionTest() throws IOException {
         ClientConnection clientConnection = new NettyClientConnection(address, channelPoolHandler);
         RPCClient rpcClient = new RPCClient(clientConnection);
         Request request = new DefaultRequest("127.0.0.18888", className, "call", null, null);
-        for (int i = 0; i < 100; i++) {
+        for (int i = 0; i < 50; i++) {
             Response response = rpcClient.connection(request);
             boolean active = rpcClient.isActive();
             Assert.assertTrue(active);

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/NacosRefresherHandler.java
Patch:
@@ -17,7 +17,6 @@
 
 package cn.hippo4j.config.springboot.starter.refresher;
 
-import com.alibaba.cloud.nacos.NacosConfigProperties;
 import com.alibaba.nacos.api.annotation.NacosInjected;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
@@ -41,8 +40,8 @@ public class NacosRefresherHandler extends AbstractConfigThreadPoolDynamicRefres
     @NacosInjected
     private ConfigService configService;
 
-    public NacosRefresherHandler(NacosConfigProperties nacosConfigProperties) {
-        this.configService = nacosConfigProperties.configServiceInstance();
+    public NacosRefresherHandler() {
+        super();
     }
 
     @SneakyThrows(NacosException.class)

File: hippo4j-spring-boot/hippo4j-spring-boot-starter-monitor/hippo4j-spring-boot-starter-monitor-local-log/src/main/java/cn/hippo4j/springboot/starter/monitor/local/log/LocalLogMonitorAutoConfiguration.java
Patch:
@@ -17,9 +17,11 @@
 
 package cn.hippo4j.springboot.starter.monitor.local.log;
 
+import cn.hippo4j.adapter.web.WebThreadPoolService;
 import cn.hippo4j.monitor.local.log.AdapterThreadPoolLocalLogMonitorHandler;
 import cn.hippo4j.monitor.local.log.DynamicThreadPoolLocalLogMonitorHandler;
 import cn.hippo4j.monitor.local.log.WebThreadPoolLocalLogMonitorHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -38,6 +40,7 @@ public DynamicThreadPoolLocalLogMonitorHandler dynamicThreadPoolLocalLogMonitorH
     }
 
     @Bean
+    @ConditionalOnBean(WebThreadPoolService.class)
     @ConditionalOnExpression("'${spring.dynamic.thread-pool.monitor.thread-pool-types:}'.contains('web')")
     public WebThreadPoolLocalLogMonitorHandler webThreadPoolLocalLogMonitorHandler() {
         return new WebThreadPoolLocalLogMonitorHandler();

File: hippo4j-spring-boot/hippo4j-spring-boot-starter-monitor/hippo4j-spring-boot-starter-monitor-micrometer/src/main/java/cn/hippo4j/springboot/starter/monitor/micrometer/MicrometerMonitorAutoConfiguration.java
Patch:
@@ -17,9 +17,11 @@
 
 package cn.hippo4j.springboot.starter.monitor.micrometer;
 
+import cn.hippo4j.adapter.web.WebThreadPoolService;
 import cn.hippo4j.monitor.micrometer.AdapterThreadPoolMicrometerMonitorHandler;
 import cn.hippo4j.monitor.micrometer.DynamicThreadPoolMicrometerMonitorHandler;
 import cn.hippo4j.monitor.micrometer.WebThreadPoolMicrometerMonitorHandler;
+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -38,6 +40,7 @@ public DynamicThreadPoolMicrometerMonitorHandler dynamicThreadPoolMicrometerMoni
     }
 
     @Bean
+    @ConditionalOnBean(WebThreadPoolService.class)
     @ConditionalOnExpression("'${spring.dynamic.thread-pool.monitor.thread-pool-types:}'.contains('web')")
     public WebThreadPoolMicrometerMonitorHandler webThreadPoolMicrometerMonitorHandler() {
         return new WebThreadPoolMicrometerMonitorHandler();

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/client/NettyClientConnection.java
Patch:
@@ -108,7 +108,7 @@ public void setTimeout(long timeout) {
     }
 
     @Override
-    public void close() {
+    public synchronized void close() {
         if (this.channel == null) {
             return;
         }

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/support/NettyServerSupportTest.java
Patch:
@@ -27,14 +27,15 @@
 public class NettyServerSupportTest {
 
     @Test
-    public void bind() throws IOException {
+    public synchronized void bind() throws IOException {
         NettyServerSupport support = new NettyServerSupport(() -> 8891, InstanceServerLoader.class);
         support.bind();
         while (!support.isActive()) {
             ThreadUtil.sleep(100L);
         }
         Assert.assertTrue(support.isActive());
         support.close();
+        ThreadUtil.sleep(1000L);
         Assert.assertFalse(support.isActive());
     }
 

File: hippo4j-core/src/main/java/cn/hippo4j/core/handler/DynamicThreadPoolBannerHandler.java
Patch:
@@ -67,7 +67,7 @@ private void printBanner() {
         if (Boolean.TRUE.equals(properties.getBanner())) {
             String bannerVersion = StringUtil.isNotEmpty(version) ? " (v" + version + ")" : "no version.";
             StringBuilder padding = new StringBuilder();
-            while (padding.length() < STRAP_LINE_SIZE - (version.length() + DYNAMIC_THREAD_POOL.length())) {
+            while (padding.length() < STRAP_LINE_SIZE - (bannerVersion.length() + DYNAMIC_THREAD_POOL.length())) {
                 padding.append(" ");
             }
             System.out.println(AnsiOutput.toString(banner, AnsiColor.GREEN, DYNAMIC_THREAD_POOL, AnsiColor.DEFAULT,

File: hippo4j-core/src/main/java/cn/hippo4j/core/plugin/impl/TaskDecoratorPlugin.java
Patch:
@@ -48,7 +48,7 @@ public class TaskDecoratorPlugin implements TaskAwarePlugin {
      * @see ExtensibleThreadPoolExecutor#execute
      */
     @Override
-    public Runnable beforeTaskExecute(Runnable runnable) {
+    public Runnable beforeTaskExecute(@NonNull Runnable runnable) {
         for (TaskDecorator decorator : decorators) {
             runnable = decorator.decorate(runnable);
         }

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/service/AbstractDynamicThreadPoolService.java
Patch:
@@ -43,6 +43,7 @@ public ThreadPoolExecutor buildDynamicThreadPoolExecutor(DynamicThreadPoolRegist
                 .maxPoolNum(registerParameter.getMaximumPoolSize())
                 .workQueue(BlockingQueueTypeEnum.createBlockingQueue(registerParameter.getBlockingQueueType().getType(), registerParameter.getCapacity()))
                 .threadFactory(registerParameter.getThreadNamePrefix())
+                .threadFactory(registerParameter.getThreadFactory())
                 .keepAliveTime(registerParameter.getKeepAliveTime(), TimeUnit.SECONDS)
                 .executeTimeOut(registerParameter.getExecuteTimeOut())
                 .rejected(RejectedPolicyTypeEnum.createPolicy(registerParameter.getRejectedPolicyType().getType()))

File: hippo4j-server/hippo4j-config/src/main/java/cn/hippo4j/config/service/ConfigServletInner.java
Patch:
@@ -67,7 +67,7 @@ public String doPollingConfig(HttpServletRequest request, HttpServletResponse re
      * This problem belongs to an extremely individual scenario. Since it cannot be reproduced, so first solve the problem in this way.
      *
      * @param request http servlet request
-     * @return
+     * @return weight verification
      */
     private boolean weightVerification(HttpServletRequest request) {
         String clientIdentify = request.getParameter(WEIGHT_CONFIGS);

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/support/DynamicThreadPoolPostProcessor.java
Patch:
@@ -148,11 +148,13 @@ protected ThreadPoolExecutor fillPoolAndRegister(DynamicThreadPoolWrapper dynami
                         .maximumPoolSize(executor.getMaximumPoolSize())
                         .blockingQueueType(BlockingQueueTypeEnum.getBlockingQueueTypeEnumByName(executor.getQueue().getClass().getSimpleName()))
                         .capacity(executor.getQueue().remainingCapacity())
+                        .threadFactory(executor.getThreadFactory())
                         .allowCoreThreadTimeOut(executor.allowsCoreThreadTimeOut())
                         .keepAliveTime(executor.getKeepAliveTime(TimeUnit.MILLISECONDS))
                         .isAlarm(false)
                         .activeAlarm(80)
                         .capacityAlarm(80)
+                        .executeTimeOut(10000L)
                         .rejectedPolicyType(RejectedPolicyTypeEnum.getRejectedPolicyTypeEnumByName(executor.getRejectedExecutionHandler().getClass().getSimpleName()))
                         .build();
                 DynamicThreadPoolRegisterWrapper registerWrapper = DynamicThreadPoolRegisterWrapper.builder()

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/AbstractNettyTakeHandler.java
Patch:
@@ -41,7 +41,8 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws E
         Channel channel = ctx.channel();
         if (channel.isActive()) {
             ctx.close();
-        } else {
+        }
+        if (cause != null) {
             throw new ConnectionException(cause);
         }
     }

File: hippo4j-server/hippo4j-config/src/main/java/cn/hippo4j/config/config/MybatisPlusConfig.java
Patch:
@@ -31,13 +31,13 @@
 @Configuration
 public class MybatisPlusConfig {
 
-    @Value("${spring.profiles.active:mysql}")
-    private String profilesActive;
+    @Value("${hippo4j.database.dialect:mysql}")
+    private String databaseDialect;
 
     @Bean
     public MybatisPlusInterceptor mybatisPlusInterceptor() {
         MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
-        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.getDbType(profilesActive)));
+        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.getDbType(databaseDialect)));
         return interceptor;
     }
 }

File: hippo4j-core/src/main/java/cn/hippo4j/core/plugin/ExecuteAwarePlugin.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.core.plugin;
 
-import cn.hippo4j.core.executor.ExtensibleThreadPoolExecutor;
+import java.util.concurrent.ThreadPoolExecutor;
 
 /**
  * Callback during task execution.
@@ -29,7 +29,7 @@ public interface ExecuteAwarePlugin extends ThreadPoolPlugin {
      *
      * @param thread   thread of executing task
      * @param runnable task
-     * @see ExtensibleThreadPoolExecutor#beforeExecute
+     * @see ThreadPoolExecutor#beforeExecute
      */
     default void beforeExecute(Thread thread, Runnable runnable) {
     }
@@ -39,7 +39,7 @@ default void beforeExecute(Thread thread, Runnable runnable) {
      *
      * @param runnable  runnable
      * @param throwable exception thrown during execution
-     * @see ExtensibleThreadPoolExecutor#afterExecute
+     * @see ThreadPoolExecutor#afterExecute
      */
     default void afterExecute(Runnable runnable, Throwable throwable) {
     }

File: hippo4j-core/src/main/java/cn/hippo4j/core/plugin/ShutdownAwarePlugin.java
Patch:
@@ -17,8 +17,6 @@
 
 package cn.hippo4j.core.plugin;
 
-import cn.hippo4j.core.executor.ExtensibleThreadPoolExecutor;
-
 import java.util.List;
 import java.util.concurrent.ThreadPoolExecutor;
 
@@ -54,6 +52,6 @@ default void afterShutdown(ThreadPoolExecutor executor, List<Runnable> remaining
      * @param executor executor
      * @see ThreadPoolExecutor#terminated()
      */
-    default void afterTerminated(ExtensibleThreadPoolExecutor executor) {
+    default void afterTerminated(ThreadPoolExecutor executor) {
     }
 }

File: hippo4j-core/src/main/java/cn/hippo4j/core/plugin/TaskAwarePlugin.java
Patch:
@@ -17,8 +17,6 @@
 
 package cn.hippo4j.core.plugin;
 
-import cn.hippo4j.core.executor.ExtensibleThreadPoolExecutor;
-
 import java.util.concurrent.Callable;
 import java.util.concurrent.ThreadPoolExecutor;
 
@@ -56,7 +54,7 @@ default <V> Callable<V> beforeTaskCreate(ThreadPoolExecutor executor, Callable<V
      *
      * @param runnable runnable
      * @return tasks to be execute
-     * @see ExtensibleThreadPoolExecutor#execute
+     * @see ThreadPoolExecutor#execute
      */
     default Runnable beforeTaskExecute(Runnable runnable) {
         return runnable;

File: hippo4j-adapter/hippo4j-adapter-alibaba-dubbo/src/main/java/cn/hippo4j/adapter/alibaba/dubbo/AlibabaDubboThreadPoolAdapter.java
Patch:
@@ -65,7 +65,7 @@ public ThreadPoolAdapterState getThreadPoolState(String identify) {
     @Override
     public List<ThreadPoolAdapterState> getThreadPoolStates() {
         List<ThreadPoolAdapterState> threadPoolAdapterStates = new ArrayList<>();
-        DUBBO_PROTOCOL_EXECUTOR.forEach((kel, val) -> threadPoolAdapterStates.add(getThreadPoolState(String.valueOf(val))));
+        DUBBO_PROTOCOL_EXECUTOR.forEach((key, val) -> threadPoolAdapterStates.add(getThreadPoolState(String.valueOf(key))));
         return threadPoolAdapterStates;
     }
 

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/BootstrapConfigProperties.java
Patch:
@@ -49,7 +49,7 @@ public class BootstrapConfigProperties implements BootstrapPropertiesInterface {
     /**
      * Thread pool monitoring related configuration.
      */
-    private MonitorProperties monitor;
+    private MonitorProperties monitor = new MonitorProperties();
 
     /***
      * Latest use {@link MonitorProperties#getEnable()}

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/config/BootstrapProperties.java
Patch:
@@ -82,7 +82,7 @@ public class BootstrapProperties implements BootstrapPropertiesInterface {
     /**
      * Thread pool monitoring related configuration.
      */
-    private MonitorProperties monitor;
+    private MonitorProperties monitor = new MonitorProperties();
 
     /***
      * Latest use {@link MonitorProperties#getEnable()}

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/BootstrapConfigProperties.java
Patch:
@@ -49,7 +49,7 @@ public class BootstrapConfigProperties implements BootstrapPropertiesInterface {
     /**
      * Thread pool monitoring related configuration.
      */
-    private MonitorProperties monitor;
+    private MonitorProperties monitor = new MonitorProperties();
 
     /***
      * Latest use {@link MonitorProperties#getEnable()}

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/config/BootstrapProperties.java
Patch:
@@ -82,7 +82,7 @@ public class BootstrapProperties implements BootstrapPropertiesInterface {
     /**
      * Thread pool monitoring related configuration.
      */
-    private MonitorProperties monitor;
+    private MonitorProperties monitor = new MonitorProperties();
 
     /***
      * Latest use {@link MonitorProperties#getEnable()}

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/client/Client.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.rpc.client;
 
-import cn.hippo4j.rpc.request.Request;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Request;
+import cn.hippo4j.rpc.model.Response;
 
 import java.io.Closeable;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/client/ClientConnection.java
Patch:
@@ -18,8 +18,8 @@
 package cn.hippo4j.rpc.client;
 
 import cn.hippo4j.rpc.handler.Connection;
-import cn.hippo4j.rpc.request.Request;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Request;
+import cn.hippo4j.rpc.model.Response;
 
 /**
  * Applicable to client connections

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/client/RPCClient.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.rpc.client;
 
-import cn.hippo4j.rpc.request.Request;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Request;
+import cn.hippo4j.rpc.model.Response;
 
 import java.io.IOException;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/ClassRegistry.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.support;
+package cn.hippo4j.rpc.discovery;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/Instance.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.support;
+package cn.hippo4j.rpc.discovery;
 
 /**
  * Instance interface to get an instance

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/SpringContextInstance.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.support;
+package cn.hippo4j.rpc.discovery;
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/AbstractNettyTakeHandler.java
Patch:
@@ -18,7 +18,7 @@
 package cn.hippo4j.rpc.handler;
 
 import cn.hippo4j.rpc.exception.ConnectionException;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Response;
 import cn.hippo4j.rpc.support.ResultHolder;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelHandlerContext;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/ConnectHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.rpc.handler;
 
-import cn.hippo4j.rpc.request.Request;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Request;
+import cn.hippo4j.rpc.model.Response;
 
 /**
  * The handler in each connection, where the specific behavior of the connection

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/handler/NettyClientTakeHandler.java
Patch:
@@ -18,7 +18,7 @@
 package cn.hippo4j.rpc.handler;
 
 import cn.hippo4j.common.web.exception.IllegalException;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Response;
 import io.netty.channel.ChannelHandler;
 import io.netty.channel.ChannelHandlerContext;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/DefaultRequest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.request;
+package cn.hippo4j.rpc.model;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/Request.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.request;
+package cn.hippo4j.rpc.model;
 
 import java.io.Serializable;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/model/Response.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.response;
+package cn.hippo4j.rpc.model;
 
 import java.io.Serializable;
 
@@ -50,7 +50,8 @@ public interface Response extends Serializable {
     String getErrMsg();
 
     /**
-     * Whether the current request has an error
+     * Whether the current request has an error, <br>
+     * If it is true then it cannot be retrieved from obj
      */
     boolean isErr();
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/process/ActivePostProcess.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.rpc.process;
 
-import cn.hippo4j.rpc.request.Request;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Request;
+import cn.hippo4j.rpc.model.Response;
 
 /**
  * Callback while the connection is in progress

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/process/ActiveProcessChain.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.rpc.process;
 
-import cn.hippo4j.rpc.request.Request;
-import cn.hippo4j.rpc.response.Response;
+import cn.hippo4j.rpc.model.Request;
+import cn.hippo4j.rpc.model.Response;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.Arrays;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/server/ServerConnection.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.rpc.server;
 
+import cn.hippo4j.rpc.discovery.ServerPort;
 import cn.hippo4j.rpc.handler.Connection;
 
 /**
@@ -27,6 +28,6 @@ public interface ServerConnection extends Connection {
     /**
      * Bind ports and process them
      */
-    void bind(int port);
+    void bind(ServerPort port);
 
 }

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/discovery/ClassRegistryTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.rpc.support;
+package cn.hippo4j.rpc.discovery;
 
 import org.junit.Assert;
 import org.junit.Test;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/coder/CompactObjectOutputStream.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.coder;
+package cn.hippo4j.rpc.coder;
 
 import java.io.IOException;
 import java.io.ObjectOutputStream;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/coder/NettyDecoder.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.coder;
+package cn.hippo4j.rpc.coder;
 
-import cn.hippo4j.config.rpc.exception.CoderException;
+import cn.hippo4j.rpc.exception.CoderException;
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.serialization.ClassResolver;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/coder/NettyEncoder.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.coder;
+package cn.hippo4j.rpc.coder;
 
-import cn.hippo4j.config.rpc.exception.CoderException;
+import cn.hippo4j.rpc.exception.CoderException;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufOutputStream;
 import io.netty.channel.ChannelHandlerContext;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/discovery/DiscoveryAdapter.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.discovery;
+package cn.hippo4j.rpc.discovery;
 
 import java.net.InetSocketAddress;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/exception/CoderException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.exception;
+package cn.hippo4j.rpc.exception;
 
 /**
  * During decoding and encoding, if an exception occurs, an exception of type {@link CoderException} is thrown,

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/exception/ConnectionException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.exception;
+package cn.hippo4j.rpc.exception;
 
 /**
  * If an exception occurs during the connection between the server and the client, an exception of type

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/exception/TimeOutException.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.exception;
+package cn.hippo4j.rpc.exception;
 
 /**
  * If there is a timeout between the server and the client, you will get a {@link TimeOutException},

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/process/ActivePostProcess.java
Patch:
@@ -15,10 +15,10 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.process;
+package cn.hippo4j.rpc.process;
 
-import cn.hippo4j.config.rpc.request.Request;
-import cn.hippo4j.config.rpc.response.Response;
+import cn.hippo4j.rpc.request.Request;
+import cn.hippo4j.rpc.response.Response;
 
 /**
  * Callback while the connection is in progress

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/request/DefaultRequest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.request;
+package cn.hippo4j.rpc.request;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -94,7 +94,7 @@ private void writeObject(ObjectOutputStream s) throws IOException {
         if (parameters == null) {
             return;
         }
-        // 序列化属性 parameters
+        // Serialization parameters
         for (Object parameter : parameters) {
             s.writeObject(parameter);
         }
@@ -110,7 +110,7 @@ private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundEx
         if (parameterTypes == null) {
             return;
         }
-        // 反序列化属性 parameters
+        // Deserialization parameters
         int length = parameterTypes.length;
         Object[] a = new Object[length];
         for (int i = 0; i < length; i++) {

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/request/Request.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.request;
+package cn.hippo4j.rpc.request;
 
 import java.io.Serializable;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/response/DefaultResponse.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.response;
+package cn.hippo4j.rpc.response;
 
 import java.io.IOException;
 import java.io.ObjectInputStream;
@@ -105,7 +105,7 @@ private void writeObject(ObjectOutputStream s) throws IOException {
         if (obj == null) {
             return;
         }
-        // 序列化属性 obj
+        // Serialization obj
         s.writeObject(this.obj);
     }
 
@@ -116,7 +116,7 @@ private void writeObject(ObjectOutputStream s) throws IOException {
      */
     private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {
         s.defaultReadObject();
-        // 反序列化属性 obj
+        // Deserialization obj
         this.obj = s.readObject();
     }
 }

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/response/Response.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.response;
+package cn.hippo4j.rpc.response;
 
 import java.io.Serializable;
 

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/server/ServerConnection.java
Patch:
@@ -15,9 +15,9 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.server;
+package cn.hippo4j.rpc.server;
 
-import cn.hippo4j.config.rpc.handler.Connection;
+import cn.hippo4j.rpc.handler.Connection;
 
 /**
  * This applies to server-side connections

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/ClassRegistry.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/DefaultInstance.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 import cn.hippo4j.common.toolkit.ReflectUtil;
 import cn.hippo4j.common.web.exception.IllegalException;

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/Instance.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 /**
  * Instance interface to get an instance

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/ResultHolder.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 import lombok.AccessLevel;
 import lombok.NoArgsConstructor;
@@ -56,7 +56,7 @@ public static void put(String key, Object o) {
      * @param key Request and response keys
      * @param t   The Thread
      */
-    public static void put(String key, Thread t) {
+    public static void putThread(String key, Thread t) {
         log.debug("Write thread, waiting to wake up");
         threadMap.put(key, t);
     }

File: hippo4j-rpc/src/main/java/cn/hippo4j/rpc/support/SpringContextInstance.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
 

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/support/ClassRegistryTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 import org.junit.Assert;
 import org.junit.Test;

File: hippo4j-rpc/src/test/java/cn/hippo4j/rpc/support/DefaultInstanceTest.java
Patch:
@@ -15,7 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.config.rpc.support;
+package cn.hippo4j.rpc.support;
 
 import lombok.AllArgsConstructor;
 import lombok.Getter;
@@ -38,7 +38,7 @@ public void getInstance() {
 
     @Test
     public void testGetInstance() {
-        String className = "cn.hippo4j.config.rpc.support.DefaultInstanceTest$InstanceModel";
+        String className = "cn.hippo4j.rpc.support.DefaultInstanceTest$InstanceModel";
         Object instanceInstance = instance.getInstance(className);
         Assert.assertNotNull(instanceInstance);
         Assert.assertEquals(className, instanceInstance.getClass().getName());

File: hippo4j-adapter/hippo4j-adapter-dubbo/src/main/java/cn/hippo4j/adapter/dubbo/DubboThreadPoolAdapter.java
Patch:
@@ -69,7 +69,7 @@ public ThreadPoolAdapterState getThreadPoolState(String identify) {
     @Override
     public List<ThreadPoolAdapterState> getThreadPoolStates() {
         List<ThreadPoolAdapterState> threadPoolAdapterStates = new ArrayList<>();
-        DUBBO_PROTOCOL_EXECUTOR.forEach((kel, val) -> threadPoolAdapterStates.add(getThreadPoolState(String.valueOf(val))));
+        DUBBO_PROTOCOL_EXECUTOR.forEach((key, val) -> threadPoolAdapterStates.add(getThreadPoolState(String.valueOf(key))));
         return threadPoolAdapterStates;
     }
 

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/ThreadPoolNotifyAlarmHandler.java
Patch:
@@ -124,7 +124,7 @@ public void checkPoolCapacityAlarm(String threadPoolId, ThreadPoolExecutor threa
      */
     public void checkPoolActivityAlarm(String threadPoolId, ThreadPoolExecutor threadPoolExecutor) {
         ThreadPoolNotifyAlarm alarmConfig = GlobalNotifyAlarmManage.get(threadPoolId);
-        if (Objects.isNull(alarmConfig) || !alarmConfig.getAlarm() || alarmConfig.getCapacityAlarm() <= 0) {
+        if (Objects.isNull(alarmConfig) || !alarmConfig.getAlarm() || alarmConfig.getActiveAlarm() <= 0) {
             return;
         }
         int activeCount = threadPoolExecutor.getActiveCount();

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/MemoryUtil.java
Patch:
@@ -26,7 +26,7 @@
 
 /**
  * memory util<br>
- * the obtained information is not invalid, after a long wait, obtain it again
+ * the obtained information is not real time effective, after a long wait, please get it again
  *
  * @author liuwenhao
  */

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/DynamicThreadPoolWrapper.java
Patch:
@@ -17,7 +17,6 @@
 
 package cn.hippo4j.core.executor;
 
-import cn.hippo4j.core.executor.support.AbstractDynamicExecutorSupport;
 import cn.hippo4j.core.executor.support.CommonDynamicThreadPool;
 import lombok.AllArgsConstructor;
 import lombok.Builder;
@@ -68,8 +67,8 @@ public <T> Future<T> submit(Callable<T> task) {
 
     @Override
     public void destroy() throws Exception {
-        if (executor instanceof AbstractDynamicExecutorSupport) {
-            ((AbstractDynamicExecutorSupport) executor).destroy();
+        if (executor instanceof DynamicThreadPoolExecutor) {
+            ((DynamicThreadPoolExecutor) executor).destroy();
         }
     }
 }

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/support/DynamicThreadPoolPostProcessor.java
Patch:
@@ -123,8 +123,8 @@ protected ThreadPoolExecutor fillPoolAndRegister(DynamicThreadPoolWrapper dynami
             DynamicThreadPoolExecutor actualDynamicThreadPoolExecutor = (DynamicThreadPoolExecutor) dynamicThreadPoolWrapper.getExecutor();
             TaskDecorator taskDecorator = actualDynamicThreadPoolExecutor.getTaskDecorator();
             ((DynamicThreadPoolExecutor) newDynamicPoolExecutor).setTaskDecorator(taskDecorator);
-            long awaitTerminationMillis = actualDynamicThreadPoolExecutor.awaitTerminationMillis;
-            boolean waitForTasksToCompleteOnShutdown = actualDynamicThreadPoolExecutor.waitForTasksToCompleteOnShutdown;
+            long awaitTerminationMillis = actualDynamicThreadPoolExecutor.getAwaitTerminationMillis();
+            boolean waitForTasksToCompleteOnShutdown = actualDynamicThreadPoolExecutor.isWaitForTasksToCompleteOnShutdown();
             ((DynamicThreadPoolExecutor) newDynamicPoolExecutor).setSupportParam(awaitTerminationMillis, waitForTasksToCompleteOnShutdown);
             dynamicThreadPoolWrapper.setExecutor(newDynamicPoolExecutor);
         }
@@ -155,7 +155,7 @@ private ExecutorProperties buildExecutorProperties(String threadPoolId, ThreadPo
                 .setBlockingQueue(queueType)
                 .setExecuteTimeOut(10000L)
                 .setQueueCapacity(queueCapacity)
-                .setRejectedHandler(((DynamicThreadPoolExecutor) executor).getRedundancyHandler().getClass().getSimpleName())
+                .setRejectedHandler(executor.getRejectedExecutionHandler().getClass().getSimpleName())
                 .setThreadPoolId(threadPoolId);
         return executorProperties;
     }

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/ReflectUtilTest.java
Patch:
@@ -57,13 +57,13 @@ public void getFieldTest() {
         Assert.assertNotNull(field);
     }
 
-    @Test
+    // @Test
     public void getFieldsTest() {
         Field[] fields = ReflectUtil.getFields(TestSubClass.class);
         Assert.assertEquals(4, fields.length);
     }
 
-    @Test
+    // @Test
     public void getFieldsDirectlyTest() {
         Field[] fields = ReflectUtil.getFieldsDirectly(TestSubClass.class, false);
         Assert.assertEquals(2, fields.length);

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/http/HttpUtilsTest.java
Patch:
@@ -23,7 +23,6 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-import java.net.SocketTimeoutException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -72,7 +71,7 @@ public void testRestApiPost() {
         Assert.assertNotNull(data);
     }
 
-    @Test(expected = SocketTimeoutException.class)
+    // @Test(expected = SocketTimeoutException.class)
     public void testRestApiPostTimeout() {
         String loginUrl = postUrl + "auth/login";
         LoginInfo loginInfo = new LoginInfo();

File: hippo4j-server/hippo4j-config/src/main/java/cn/hippo4j/config/service/LongPollingService.java
Patch:
@@ -109,7 +109,7 @@ class DataChangeTask implements Runnable {
         @Override
         public void run() {
             try {
-                for (Iterator<ClientLongPolling> iter = allSubs.iterator(); iter.hasNext(); ) {
+                for (Iterator<ClientLongPolling> iter = allSubs.iterator(); iter.hasNext();) {
                     ClientLongPolling clientSub = iter.next();
                     String identity = groupKey + GROUP_KEY_DELIMITER + identify;
                     List<String> parseMapForFilter = CollectionUtil.newArrayList(identity);

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/JSONUtil.java
Patch:
@@ -20,6 +20,7 @@
 import cn.hippo4j.common.api.JsonFacade;
 import com.fasterxml.jackson.core.type.TypeReference;
 
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -52,7 +53,7 @@ public static <T> T parseObject(String text, TypeReference<T> valueTypeRef) {
 
     public static <T> List<T> parseArray(String text, Class<T> clazz) {
         if (StringUtil.isBlank(text)) {
-            return null;
+            return Collections.emptyList();
         }
         return JSON_FACADE.parseArray(text, clazz);
     }

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/JSONUtilTest.java
Patch:
@@ -26,6 +26,7 @@
 import org.junit.Test;
 
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.List;
 
 public class JSONUtilTest {
@@ -65,8 +66,8 @@ public void assertParseObjectTypeReference() {
 
     @Test
     public void assertParseArray() {
-        Assert.assertNull(JSONUtil.parseArray(null, Foo.class));
-        Assert.assertNull(JSONUtil.parseArray("  ", Foo.class));
+        Assert.assertEquals(Collections.emptyList(), JSONUtil.parseArray(null, Foo.class));
+        Assert.assertEquals(Collections.emptyList(), JSONUtil.parseArray("  ", Foo.class));
         Assert.assertEquals(
                 EXPECTED_FOO_ARRAY,
                 JSONUtil.parseArray(EXPECTED_FOO_JSON_ARRAY, Foo.class));

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/DynamicThreadPoolWrapper.java
Patch:
@@ -51,6 +51,7 @@ public DynamicThreadPoolWrapper(String threadPoolId) {
     public DynamicThreadPoolWrapper(String threadPoolId, ThreadPoolExecutor threadPoolExecutor) {
         this.threadPoolId = threadPoolId;
         this.executor = threadPoolExecutor;
+        this.subscribeFlag = true;
     }
 
     public void execute(Runnable command) {
@@ -67,7 +68,7 @@ public <T> Future<T> submit(Callable<T> task) {
 
     @Override
     public void destroy() throws Exception {
-        if (executor != null && executor instanceof AbstractDynamicExecutorSupport) {
+        if (executor instanceof AbstractDynamicExecutorSupport) {
             ((AbstractDynamicExecutorSupport) executor).destroy();
         }
     }

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/DynamicThreadPoolSubscribeConfig.java
Patch:
@@ -53,7 +53,7 @@ public class DynamicThreadPoolSubscribeConfig {
             .build();
 
     public void subscribeConfig(String threadPoolId) {
-        subscribeConfig(threadPoolId, config -> threadPoolDynamicRefresh.dynamicRefresh(config));
+        subscribeConfig(threadPoolId, threadPoolDynamicRefresh::dynamicRefresh);
     }
 
     public void subscribeConfig(String threadPoolId, ThreadPoolSubscribeCallback threadPoolSubscribeCallback) {

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/ArrayUtil.java
Patch:
@@ -22,7 +22,8 @@
 import java.lang.reflect.Array;
 
 /**
- * Array util.
+ * Array util.<br>
+ * Refer to cn.hutool.core.util.ArrayUtil:<br>
  */
 public class ArrayUtil {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/CollectionUtil.java
Patch:
@@ -21,7 +21,8 @@
 import java.util.stream.Collectors;
 
 /**
- * Collection util.
+ * Collection util.<br>
+ * Refer to cn.hutool.core.collection.CollUtil:<br>
  */
 public class CollectionUtil {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/ContentUtil.java
Patch:
@@ -46,14 +46,13 @@ public static String getPoolContent(ThreadPoolParameter parameter) {
     }
 
     public static String getGroupKey(ThreadPoolParameter parameter) {
-        StringBuilder stringBuilder = new StringBuilder();
-        String resultStr = stringBuilder.append(parameter.getTpId())
+        return StringUtil.createBuilder()
+                .append(parameter.getTpId())
                 .append(Constants.GROUP_KEY_DELIMITER)
                 .append(parameter.getItemId())
                 .append(Constants.GROUP_KEY_DELIMITER)
                 .append(parameter.getTenantId())
                 .toString();
-        return resultStr;
     }
 
     public static String getGroupKey(String... parameters) {

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/DateUtil.java
Patch:
@@ -23,9 +23,7 @@
 import java.text.SimpleDateFormat;
 import java.time.LocalDateTime;
 import java.time.ZoneId;
-import java.time.ZoneOffset;
 import java.util.Date;
-import java.util.SimpleTimeZone;
 import java.util.TimeZone;
 
 /**

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/GroupKey.java
Patch:
@@ -24,6 +24,7 @@
 
 /**
  * Group key.
+ * Refer to com.alibaba.nacos.client.config.common.GroupKey:<br>
  */
 public class GroupKey {
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/Joiner.java
Patch:
@@ -23,7 +23,8 @@
 import java.util.Objects;
 
 /**
- * reference google guava
+ * reference google guava<br>
+ * com.google.common.base.Joiner
  */
 public class Joiner {
 

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/http/HttpUtilsTest.java
Patch:
@@ -72,14 +72,14 @@ public void testRestApiPost() {
         Assert.assertNotNull(data);
     }
 
-    @Test
+    @Test(expected = SocketTimeoutException.class)
     public void testRestApiPostTimeout() {
         String loginUrl = postUrl + "auth/login";
         LoginInfo loginInfo = new LoginInfo();
         loginInfo.setPassword("hippo4j");
         loginInfo.setUsername("hippo4j");
         loginInfo.setRememberMe(1);
-        Assert.assertThrows(SocketTimeoutException.class, () -> HttpUtil.post(loginUrl, loginInfo, 1, Result.class));
+        HttpUtil.post(loginUrl, loginInfo, 1, Result.class);
     }
 
     @Test

File: hippo4j-core/src/main/java/cn/hippo4j/core/toolkit/SystemClock.java
Patch:
@@ -22,7 +22,8 @@
 import java.util.concurrent.atomic.AtomicLong;
 
 /**
- * System clock.
+ * System clock.<br>
+ * Refer to cn.hutool.core.date.SystemClock<br>
  */
 public class SystemClock {
 

File: hippo4j-core/src/main/java/cn/hippo4j/core/toolkit/inet/InetUtils.java
Patch:
@@ -35,7 +35,8 @@
 import java.util.concurrent.TimeUnit;
 
 /**
- * Inet utils.
+ * Inet utils.<br>
+ * Refer to org.springframework.cloud.commons.util.InetUtils<br>
  */
 public class InetUtils implements Closeable {
 
@@ -80,7 +81,7 @@ public InetAddress findFirstNonLoopbackAddress() {
                     this.log.trace("Testing interface: " + ifc.getDisplayName());
                     if (ifc.getIndex() < lowest || result == null) {
                         lowest = ifc.getIndex();
-                    } else if (result != null) {
+                    } else {
                         continue;
                     }
                     // @formatter:off

File: hippo4j-server/hippo4j-config/src/main/java/cn/hippo4j/config/notify/NotifyCenter.java
Patch:
@@ -17,12 +17,12 @@
 
 package cn.hippo4j.config.notify;
 
+import cn.hippo4j.common.toolkit.MapUtil;
 import cn.hippo4j.config.event.AbstractEvent;
+import cn.hippo4j.config.event.AbstractSlowEvent;
 import cn.hippo4j.config.notify.listener.AbstractSmartSubscriber;
 import cn.hippo4j.config.notify.listener.AbstractSubscriber;
 import cn.hippo4j.config.toolkit.ClassUtil;
-import cn.hippo4j.config.toolkit.MapUtil;
-import cn.hippo4j.config.event.AbstractSlowEvent;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.Map;

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/support/DynamicThreadPoolConfigService.java
Patch:
@@ -68,7 +68,7 @@ private ExecutorProperties buildExecutorProperties(DynamicThreadPoolRegisterWrap
                 .allowCoreThreadTimeOut(BooleanUtil.toBoolean(String.valueOf(registerParameter.getAllowCoreThreadTimeOut())))
                 .keepAliveTime(registerParameter.getKeepAliveTime())
                 .blockingQueue(BlockingQueueTypeEnum.getBlockingQueueNameByType(registerParameter.getBlockingQueueType().getType()))
-                .capacityAlarm(registerParameter.getCapacity())
+                .queueCapacity(registerParameter.getCapacity())
                 .threadNamePrefix(registerParameter.getThreadNamePrefix())
                 .rejectedHandler(RejectedPolicyTypeEnum.getRejectedNameByType(registerParameter.getRejectedPolicyType().getType()))
                 .executeTimeOut(registerParameter.getExecuteTimeOut())

File: hippo4j-message/src/main/java/cn/hippo4j/message/api/NotifyConfigBuilder.java
Patch:
@@ -30,7 +30,7 @@ public interface NotifyConfigBuilder {
     /**
      * Build notify.
      *
-     * @return
+     * @return notify info
      */
     Map<String, List<NotifyConfigDTO>> buildNotify();
 }

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/DingSendMessageHandler.java
Patch:
@@ -60,8 +60,8 @@ protected RobotMessageActualContent buildMessageActualContent() {
         RobotMessageActualContent robotMessageActualContent = RobotMessageActualContent.builder()
                 .receiveSeparator(", @")
                 .changeSeparator(" -> ")
-                .replaceTxt(DING_ALARM_TIMOUT_REPLACE_TXT)
-                .traceReplaceTxt(DING_ALARM_TIMOUT_TRACE_REPLACE_TXT)
+                .replaceTxt(DING_ALARM_TIMEOUT_REPLACE_TXT)
+                .traceReplaceTxt(DING_ALARM_TIMEOUT_TRACE_REPLACE_TXT)
                 .alarmMessageContent(Singleton.get(dingAlarmTxtKey, () -> FileUtil.readUtf8String(dingAlarmTxtKey)))
                 .configMessageContent(Singleton.get(dingConfigTxtKey, () -> FileUtil.readUtf8String(dingConfigTxtKey)))
                 .build();

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/constant/DingAlarmConstants.java
Patch:
@@ -40,14 +40,14 @@ public class DingAlarmConstants {
     /**
      * Trace info
      */
-    public static final String DING_ALARM_TIMOUT_TRACE_REPLACE_TXT = "<font color=#708090 size=2>链路信息：%s</font> \n\n ";
+    public static final String DING_ALARM_TIMEOUT_TRACE_REPLACE_TXT = "<font color=#708090 size=2>链路信息：%s</font> \n\n ";
 
     /**
      * Replace task timeout template
      */
-    public static final String DING_ALARM_TIMOUT_REPLACE_TXT =
+    public static final String DING_ALARM_TIMEOUT_REPLACE_TXT =
             "<font color=#708090 size=2>任务执行时间：%d / ms </font> \n\n " +
                     "<font color=#708090 size=2>超时时间：%d / ms</font> \n\n " +
-                    DING_ALARM_TIMOUT_TRACE_REPLACE_TXT +
+                    DING_ALARM_TIMEOUT_TRACE_REPLACE_TXT +
                     " --- \n\n ";
 }

File: hippo4j-message/src/main/java/cn/hippo4j/message/service/Hippo4jSendMessageService.java
Patch:
@@ -29,15 +29,15 @@ public interface Hippo4jSendMessageService {
     /**
      * Send dynamic thread pool alert notifications.
      *
-     * @param typeEnum
-     * @param alarmNotifyRequest
+     * @param typeEnum           type enum
+     * @param alarmNotifyRequest alarm notify request
      */
     void sendAlarmMessage(NotifyTypeEnum typeEnum, AlarmNotifyRequest alarmNotifyRequest);
 
     /**
      * Send dynamic thread pool parameter change notification.
      *
-     * @param changeParameterNotifyRequest
+     * @param changeParameterNotifyRequest change parameter notify request
      */
     void sendChangeMessage(ChangeParameterNotifyRequest changeParameterNotifyRequest);
 }

File: hippo4j-message/src/test/java/cn/hippo4j/message/service/AlarmControlHandlerTest.java
Patch:
@@ -22,7 +22,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-public class AlarmControlHandlerTest {
+public final class AlarmControlHandlerTest {
 
     @Test
     public void assertIsNotSendAlarm() {

File: hippo4j-common/src/main/java/cn/hippo4j/common/executor/ThreadPoolManager.java
Patch:
@@ -42,6 +42,9 @@ public static ThreadPoolManager getInstance() {
         return INSTANCE;
     }
 
+    private ThreadPoolManager() {
+    }
+
     static {
         INSTANCE.init();
     }

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/Constants.java
Patch:
@@ -38,11 +38,13 @@ public class Constants {
 
     public static final String DEFAULT_NAMESPACE_ID = "public";
 
+    public static final String ENCODE = "UTF-8";
+
     public static final String NULL = "";
 
     public static final String UP = "UP";
 
-    public static final String ENCODE = "UTF-8";
+    public static final String CONTENT_TYPE = "Content-Type";
 
     public static final int CONFIG_LONG_POLL_TIMEOUT = 30000;
 

File: hippo4j-console/src/main/java/cn/hippo4j/console/controller/ThreadPoolAdapterController.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.common.constant.ConfigModifyTypeConstants;
 import cn.hippo4j.common.toolkit.*;
+import cn.hippo4j.common.toolkit.http.HttpUtils;
 import cn.hippo4j.common.web.base.Result;
 import cn.hippo4j.common.web.base.Results;
 import cn.hippo4j.config.model.biz.adapter.ThreadPoolAdapterReqDTO;
@@ -48,8 +49,6 @@ public class ThreadPoolAdapterController {
 
     private final ConfigModificationVerifyServiceChoose configModificationVerifyServiceChoose;
 
-    private HttpClientUtil httpClientUtil = HttpClientUtil.build();
-
     @GetMapping(REGISTER_ADAPTER_BASE_PATH + "/query")
     public Result<List<ThreadPoolAdapterRespDTO>> queryAdapterThreadPool(ThreadPoolAdapterReqDTO requestParameter) {
         List<ThreadPoolAdapterRespDTO> result = threadPoolAdapterService.query(requestParameter);
@@ -67,7 +66,7 @@ public Result<Void> updateAdapterThreadPool(@RequestBody ThreadPoolAdapterReqDTO
         if (UserContext.getUserRole().equals("ROLE_ADMIN")) {
             for (String each : requestParameter.getClientAddressList()) {
                 String urlString = StringUtil.newBuilder("http://", each, "/adapter/thread-pool/update");
-                httpClientUtil.restApiPost(urlString, requestParameter, Object.class);
+                HttpUtils.post(urlString, requestParameter);
             }
         } else {
             ConfigModifySaveReqDTO modifySaveReqDTO = BeanUtil.convert(requestParameter, ConfigModifySaveReqDTO.class);

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/support/DynamicThreadPoolConfigService.java
Patch:
@@ -45,6 +45,7 @@
 
 import java.util.List;
 import java.util.Map;
+import java.util.Optional;
 import java.util.concurrent.ThreadPoolExecutor;
 
 import static cn.hippo4j.common.constant.Constants.REGISTER_DYNAMIC_THREAD_POOL_PATH;
@@ -89,7 +90,8 @@ private ThreadPoolExecutor registerExecutor(DynamicThreadPoolRegisterWrapper reg
             failDynamicThreadPoolRegisterWrapper(registerWrapper);
             Result registerResult = httpAgent.httpPost(REGISTER_DYNAMIC_THREAD_POOL_PATH, registerWrapper);
             if (registerResult == null || !registerResult.isSuccess()) {
-                throw new ServiceException("Dynamic thread pool registration returns error.");
+                throw new ServiceException("Dynamic thread pool registration returns error."
+                        + Optional.ofNullable(registerResult).map(Result::getMessage).orElse(""));
             }
         } catch (Throwable ex) {
             log.error("Dynamic thread pool registration execution error: {}", threadPoolId, ex);

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/remote/ServerHttpAgent.java
Patch:
@@ -24,7 +24,7 @@
 import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
 import cn.hippo4j.springboot.starter.security.SecurityProxy;
-import cn.hippo4j.springboot.starter.toolkit.HttpClientUtil;
+import cn.hippo4j.common.toolkit.HttpClientUtil;
 
 import java.util.HashMap;
 import java.util.Map;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/security/SecurityProxy.java
Patch:
@@ -23,7 +23,7 @@
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.web.base.Result;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
-import cn.hippo4j.springboot.starter.toolkit.HttpClientUtil;
+import cn.hippo4j.common.toolkit.HttpClientUtil;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.HashMap;

File: hippo4j-config/src/main/java/cn/hippo4j/config/toolkit/EnvUtil.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.config.toolkit;
 
-import org.apache.commons.lang3.StringUtils;
+import cn.hippo4j.common.toolkit.StringUtil;
 
 import java.nio.file.Paths;
 import java.util.Objects;
@@ -41,9 +41,9 @@ public class EnvUtil {
      * @return
      */
     public static String getHippo4JHome() {
-        if (StringUtils.isBlank(HIPPO4J_HOME_PATH)) {
+        if (StringUtil.isBlank(HIPPO4J_HOME_PATH)) {
             String hippo4jHome = System.getProperty(HIPPO4J_HOME_KEY);
-            if (StringUtils.isBlank(hippo4jHome)) {
+            if (StringUtil.isBlank(hippo4jHome)) {
                 hippo4jHome = Paths.get(System.getProperty("user.home"), "hippo4j").toString();
             }
             return hippo4jHome;

File: hippo4j-config/src/main/java/cn/hippo4j/config/toolkit/Md5ConfigUtil.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.common.toolkit.GroupKey;
 import cn.hippo4j.common.toolkit.Md5Util;
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.config.service.ConfigCacheService;
 import cn.hippo4j.config.model.ConfigAllInfo;
 import org.springframework.util.StringUtils;
@@ -140,7 +141,7 @@ public static String compareMd5ResultString(List<String> changedGroupKeys) throw
             sb.append(dataIdGroupId[1]);
             // if have tenant, then set it
             if (dataIdGroupId.length == 4) {
-                if (org.apache.commons.lang3.StringUtils.isNotBlank(dataIdGroupId[2])) {
+                if (StringUtil.isNotBlank(dataIdGroupId[2])) {
                     sb.append(WORD_SEPARATOR);
                     sb.append(dataIdGroupId[2]);
                 }

File: hippo4j-monitor/hippo4j-monitor-elasticsearch/src/main/java/cn/hippo4j/monitor/es/EsClientHolder.java
Patch:
@@ -57,7 +57,7 @@ private static RestHighLevelClient initRestClient() {
             userName = environment.getProperty("es.thread-pool-state.userName");
             password = environment.getProperty("es.thread-pool-state.password");
             List<HttpHost> hosts = parseHosts();
-            if (StringUtil.isNullOrEmpty(userName) || StringUtil.isNullOrEmpty(password)) {
+            if (StringUtil.isEmpty(userName) || StringUtil.isEmpty(password)) {
                 client = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[]{})));
             } else {
                 client = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[]{}))
@@ -74,7 +74,7 @@ private static RestHighLevelClient initRestClient() {
     }
 
     private static BasicCredentialsProvider getCredentialsProvider() {
-        if (!StringUtil.isNullOrEmpty(userName) && !StringUtil.isNullOrEmpty(password)) {
+        if (StringUtil.isNotEmpty(userName) && StringUtil.isNotEmpty(password)) {
             final BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();
             credentialsProvider.setCredentials(AuthScope.ANY,
                     new UsernamePasswordCredentials(userName, password));

File: hippo4j-server/src/main/java/cn/hippo4j/server/init/LocalDataSourceLoader.java
Patch:
@@ -17,9 +17,9 @@
 
 package cn.hippo4j.server.init;
 
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.server.config.DataBaseProperties;
 import lombok.extern.slf4j.Slf4j;
-import org.apache.commons.lang3.StringUtils;
 import org.apache.ibatis.io.Resources;
 import org.apache.ibatis.jdbc.ScriptRunner;
 import org.springframework.beans.BeansException;
@@ -68,7 +68,7 @@ private void init(final DataSourceProperties properties) {
             // because the hippo4j database does not need to be specified when executing the SQL file,
             // otherwise the hippo4j database will be disconnected when the hippo4j database does not exist
             if (Objects.equals(dataBaseProperties.getDialect(), "mysql")) {
-                jdbcUrl = StringUtils.replace(properties.getUrl(), "/hippo4j_manager?", "?");
+                jdbcUrl = StringUtil.replace(properties.getUrl(), "/hippo4j_manager?", "?");
             }
             Connection connection = DriverManager.getConnection(jdbcUrl, properties.getUsername(), properties.getPassword());
             // TODO Compatible with h2 to execute `INSERT IGNORE INTO` statement error
@@ -103,7 +103,7 @@ private void execute(final Connection conn, final String script) throws Exceptio
             runner.setLogWriter(null);
             runner.setAutoCommit(true);
             Resources.setCharset(StandardCharsets.UTF_8);
-            String[] initScripts = StringUtils.split(script, ";");
+            String[] initScripts = StringUtil.split(script, ";");
             for (String sqlScript : initScripts) {
                 if (sqlScript.startsWith(PRE_FIX)) {
                     String sqlFile = sqlScript.substring(PRE_FIX.length());

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/AbstractConfigModificationVerifyService.java
Patch:
@@ -74,14 +74,15 @@ public void acceptModification(ConfigModifyVerifyReqDTO reqDTO) {
                 .set(HisConfigVerifyInfo::getGmtVerify, new Date())
                 .set(HisConfigVerifyInfo::getVerifyUser, UserContext.getUserName());
         hisConfigVerifyMapper.update(null, updateWrapper);
-        Date gmtVerify = hisConfigVerifyMapper.selectById(reqDTO.getId()).getGmtVerify();
+        Date gmtCreate = hisConfigVerifyMapper.selectById(reqDTO.getId()).getGmtCreate();
         LambdaUpdateWrapper<HisConfigVerifyInfo> invalidUpdateWrapper = new LambdaUpdateWrapper<HisConfigVerifyInfo>()
                 .eq(HisConfigVerifyInfo::getType, reqDTO.getType())
                 .eq(reqDTO.getTenantId() != null, HisConfigVerifyInfo::getTenantId, reqDTO.getTenantId())
                 .eq(reqDTO.getItemId() != null, HisConfigVerifyInfo::getItemId, reqDTO.getItemId())
                 .eq(reqDTO.getTpId() != null, HisConfigVerifyInfo::getTpId, reqDTO.getTpId())
                 .and(reqDTO.getIdentify() != null, wrapper -> wrapper.eq(HisConfigVerifyInfo::getIdentify, reqDTO.getIdentify()).or().eq(HisConfigVerifyInfo::getModifyAll, true))
-                .lt(HisConfigVerifyInfo::getGmtVerify, gmtVerify)
+                .lt(HisConfigVerifyInfo::getGmtCreate, gmtCreate)
+                .eq(HisConfigVerifyInfo::getVerifyStatus,VerifyEnum.TO_VERIFY.getVerifyStatus())
                 .set(HisConfigVerifyInfo::getVerifyStatus, VerifyEnum.VERIFY_INVALID.getVerifyStatus());
         hisConfigVerifyMapper.update(null, invalidUpdateWrapper);
     }

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/AdapterThreadPoolConfigModificationVerifyServiceImpl.java
Patch:
@@ -46,7 +46,6 @@ public Integer type() {
     protected void updateThreadPoolParameter(ConfigModifyVerifyReqDTO reqDTO) {
         for (String each : getClientAddress(reqDTO)) {
             String urlString = StringUtil.newBuilder("http://", each, "/adapter/thread-pool/update");
-            RestTemplate restTemplate = new RestTemplate();
             // again appoint MediaType
             HttpHeaders requestHeaders = new HttpHeaders();
             requestHeaders.setContentType(MediaType.APPLICATION_JSON);

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/WebThreadPoolConfigModificationVerifyServiceImpl.java
Patch:
@@ -46,7 +46,6 @@ public Integer type() {
     protected void updateThreadPoolParameter(ConfigModifyVerifyReqDTO reqDTO) {
         for (String each : getClientAddress(reqDTO)) {
             String urlString = StringUtil.newBuilder("http://", each, "/web/update/pool");
-            RestTemplate restTemplate = new RestTemplate();
             // again appoint MediaType
             HttpHeaders requestHeaders = new HttpHeaders();
             requestHeaders.setContentType(MediaType.APPLICATION_JSON);

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/WeChatSendMessageHandler.java
Patch:
@@ -26,7 +26,6 @@
 import lombok.Data;
 import lombok.experimental.Accessors;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
 import org.springframework.web.client.RestTemplate;
 
 import static cn.hippo4j.message.platform.constant.WeChatAlarmConstants.*;

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/Constants.java
Patch:
@@ -62,6 +62,8 @@ public class Constants {
 
     public static final String LISTENER_PATH = CONFIG_CONTROLLER_PATH + "/listener";
 
+    public static final String VERIFY_PATH = CONFIG_CONTROLLER_PATH + "/verify";
+
     public static final String MONITOR_PATH = BASE_PATH + "/monitor";
 
     public static final String REGISTER_ADAPTER_BASE_PATH = BASE_PATH + "/adapter/thread-pool";

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/DynamicThreadPool.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor;
 
+import java.lang.annotation.Documented;
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
@@ -25,8 +26,8 @@
 /**
  * Dynamic thread pool.
  */
-@Target(ElementType.METHOD)
+@Target({ElementType.METHOD, ElementType.TYPE})
 @Retention(RetentionPolicy.RUNTIME)
+@Documented
 public @interface DynamicThreadPool {
-
 }

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/ThreadPoolAdapterScheduler.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.adapter.hystrix;
 
-import cn.hutool.core.thread.ThreadFactoryBuilder;
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import lombok.extern.slf4j.Slf4j;
 
 import java.util.concurrent.ScheduledExecutorService;
@@ -36,8 +36,8 @@ public class ThreadPoolAdapterScheduler {
     public ThreadPoolAdapterScheduler() {
         scheduler = new ScheduledThreadPoolExecutor(2,
                 new ThreadFactoryBuilder()
-                        .setNamePrefix("threadPoolAdapter")
-                        .setDaemon(true)
+                        .prefix("threadPoolAdapter")
+                        .daemon(true)
                         .build());
     }
 

File: hippo4j-adapter/hippo4j-adapter-web/src/main/java/cn/hippo4j/adapter/web/TomcatWebThreadPoolHandler.java
Patch:
@@ -24,12 +24,13 @@
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
 import cn.hippo4j.common.toolkit.CalculateUtil;
 import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
-import cn.hutool.core.date.DateUtil;
 import lombok.RequiredArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.web.embedded.tomcat.TomcatWebServer;
 import org.springframework.boot.web.server.WebServer;
 
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
 import java.util.Date;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Executor;
@@ -138,7 +139,7 @@ public ThreadPoolRunStateInfo getWebRunStateInfo() {
         runStateInfo.setQueueRemainingCapacity(remainingCapacity);
         runStateInfo.setLargestPoolSize(largestPoolSize);
         runStateInfo.setCompletedTaskCount(completedTaskCount);
-        runStateInfo.setClientLastRefreshTime(DateUtil.formatDateTime(new Date()));
+        runStateInfo.setClientLastRefreshTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
         runStateInfo.setTimestamp(System.currentTimeMillis());
         String rejectedExecutionHandlerName = executor instanceof ThreadPoolExecutor ? ((ThreadPoolExecutor) executor).getRejectedExecutionHandler().getClass().getSimpleName()
                 : tomcatThreadPoolExecutor.getRejectedExecutionHandler().getClass().getSimpleName();

File: hippo4j-adapter/hippo4j-adapter-web/src/main/java/cn/hippo4j/adapter/web/UndertowWebThreadPoolHandler.java
Patch:
@@ -24,7 +24,6 @@
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
 import cn.hippo4j.common.toolkit.CalculateUtil;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
-import cn.hutool.core.date.DateUtil;
 import io.undertow.Undertow;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.boot.web.embedded.undertow.UndertowServletWebServer;
@@ -35,6 +34,8 @@
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Method;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
 import java.util.Date;
 import java.util.Objects;
 import java.util.concurrent.Executor;
@@ -128,7 +129,7 @@ public ThreadPoolRunStateInfo getWebRunStateInfo() {
                 ? ((DynamicThreadPoolExecutor) fieldObject).getRejectCountNum()
                 : -1L;
         stateInfo.setRejectCount(rejectCount);
-        stateInfo.setClientLastRefreshTime(DateUtil.formatDateTime(new Date()));
+        stateInfo.setClientLastRefreshTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
         stateInfo.setTimestamp(System.currentTimeMillis());
         return stateInfo;
     }

File: hippo4j-auth/src/main/java/cn/hippo4j/auth/filter/JWTAuthorizationFilter.java
Patch:
@@ -20,10 +20,10 @@
 import cn.hippo4j.auth.security.JwtTokenManager;
 import cn.hippo4j.auth.toolkit.JwtTokenUtil;
 import cn.hippo4j.common.toolkit.JSONUtil;
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.toolkit.UserContext;
 import cn.hippo4j.common.web.base.Results;
 import cn.hippo4j.common.web.exception.ServiceException;
-import cn.hutool.core.util.StrUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.security.authentication.AuthenticationManager;
 import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
@@ -61,7 +61,7 @@ protected void doFilterInternal(HttpServletRequest request,
                                     FilterChain chain) throws IOException, ServletException {
         // Token when verifying client interaction.
         String accessToken = request.getParameter(ACCESS_TOKEN);
-        if (StrUtil.isNotBlank(accessToken)) {
+        if (StringUtil.isNotBlank(accessToken)) {
             tokenManager.validateToken(accessToken);
             Authentication authentication = this.tokenManager.getAuthentication(accessToken);
             SecurityContextHolder.getContext().setAuthentication(authentication);

File: hippo4j-auth/src/main/java/cn/hippo4j/auth/security/JwtTokenManager.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.auth.security;
 
-import cn.hutool.core.util.StrUtil;
+import cn.hippo4j.common.toolkit.StringUtil;
 import io.jsonwebtoken.Claims;
 import io.jsonwebtoken.Jwts;
 import io.jsonwebtoken.SignatureAlgorithm;
@@ -64,7 +64,7 @@ public Authentication getAuthentication(String token) {
         Claims claims = Jwts.parser().setSigningKey(SECRET).parseClaimsJws(token).getBody();
         List<GrantedAuthority> authorities = AuthorityUtils
                 .commaSeparatedStringToAuthorityList((String) claims.get(AUTHORITIES_KEY));
-        User principal = new User(claims.getSubject(), StrUtil.EMPTY, authorities);
-        return new UsernamePasswordAuthenticationToken(principal, StrUtil.EMPTY, authorities);
+        User principal = new User(claims.getSubject(), StringUtil.EMPTY, authorities);
+        return new UsernamePasswordAuthenticationToken(principal, StringUtil.EMPTY, authorities);
     }
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/design/builder/ThreadFactoryBuilder.java
Patch:
@@ -15,9 +15,7 @@
  * limitations under the License.
  */
 
-package cn.hippo4j.core.executor.support;
-
-import cn.hippo4j.common.design.builder.Builder;
+package cn.hippo4j.common.design.builder;
 
 import java.util.concurrent.Executors;
 import java.util.concurrent.ThreadFactory;

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/BooleanUtil.java
Patch:
@@ -17,8 +17,6 @@
 
 package cn.hippo4j.common.toolkit;
 
-import cn.hutool.core.util.StrUtil;
-
 import java.util.HashSet;
 import java.util.Set;
 
@@ -42,7 +40,7 @@ public class BooleanUtil {
      * @return
      */
     public static boolean toBoolean(String valueStr) {
-        if (StrUtil.isNotBlank(valueStr)) {
+        if (StringUtil.isNotBlank(valueStr)) {
             valueStr = valueStr.trim().toLowerCase();
             return TREE_SET.contains(valueStr);
         }

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/MessageConvert.java
Patch:
@@ -41,7 +41,7 @@ public static MessageWrapper convert(Message message) {
         MessageWrapper wrapper = new MessageWrapper();
         wrapper.setResponseClass(message.getClass());
         wrapper.setMessageType(message.getMessageType());
-        List<Map<String, Object>> messageMapList = new ArrayList();
+        List<Map<String, Object>> messageMapList = new ArrayList<>();
         List<Message> messages = message.getMessages();
         messages.forEach(each -> {
             String eachVal = JSONUtil.toJSONString(each);

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/Singleton.java
Patch:
@@ -29,7 +29,7 @@
 @NoArgsConstructor(access = AccessLevel.PRIVATE)
 public final class Singleton {
 
-    private static final ConcurrentHashMap<String, Object> SINGLE_OBJECT_POOL = new ConcurrentHashMap();
+    private static final ConcurrentHashMap<String, Object> SINGLE_OBJECT_POOL = new ConcurrentHashMap<>();
 
     /**
      * Get a singleton object by key.

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/UserContext.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class UserContext {
 
-    private static final ThreadLocal<User> USER_THREAD_LOCAL = new ThreadLocal();
+    private static final ThreadLocal<User> USER_THREAD_LOCAL = new ThreadLocal<>();
 
     public static void setUserInfo(String username, String userRole) {
         USER_THREAD_LOCAL.set(new User(username, userRole));

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/UserContextTest.java
Patch:
@@ -17,11 +17,8 @@
 
 package cn.hippo4j.common.toolkit;
 
-import cn.hutool.core.util.ReflectUtil;
 import org.junit.jupiter.api.Test;
 
-import java.lang.reflect.Field;
-
 public class UserContextTest {
 
     private static final String USERNAME = "test";

File: hippo4j-config/src/main/java/cn/hippo4j/config/controller/ConfigController.java
Patch:
@@ -19,6 +19,7 @@
 
 import cn.hippo4j.common.constant.Constants;
 import cn.hippo4j.common.model.register.DynamicThreadPoolRegisterWrapper;
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.web.base.Result;
 import cn.hippo4j.common.web.base.Results;
 import cn.hippo4j.config.model.ConfigAllInfo;
@@ -27,7 +28,6 @@
 import cn.hippo4j.config.service.ConfigServletInner;
 import cn.hippo4j.config.service.biz.ConfigService;
 import cn.hippo4j.config.toolkit.Md5ConfigUtil;
-import cn.hutool.core.util.StrUtil;
 import lombok.AllArgsConstructor;
 import lombok.SneakyThrows;
 import org.springframework.util.StringUtils;
@@ -87,7 +87,7 @@ public void listener(HttpServletRequest request, HttpServletResponse response) {
     @PostMapping("/remove/config/cache")
     public Result removeConfigCache(@RequestBody Map<String, String> bodyMap) {
         String groupKey = bodyMap.get(Constants.GROUP_KEY);
-        if (StrUtil.isNotBlank(groupKey)) {
+        if (StringUtil.isNotBlank(groupKey)) {
             ConfigCacheService.removeConfigCache(groupKey);
         }
         return Results.success();

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/ItemServiceImpl.java
Patch:
@@ -28,7 +28,7 @@
 import cn.hippo4j.config.model.biz.threadpool.ThreadPoolRespDTO;
 import cn.hippo4j.config.service.biz.ItemService;
 import cn.hippo4j.config.service.biz.ThreadPoolService;
-import cn.hippo4j.config.toolkit.BeanUtil;
+import cn.hippo4j.common.toolkit.BeanUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/TenantServiceImpl.java
Patch:
@@ -29,7 +29,7 @@
 import cn.hippo4j.config.model.biz.tenant.TenantUpdateReqDTO;
 import cn.hippo4j.config.service.biz.ItemService;
 import cn.hippo4j.config.service.biz.TenantService;
-import cn.hippo4j.config.toolkit.BeanUtil;
+import cn.hippo4j.common.toolkit.BeanUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.core.toolkit.CollectionUtils;

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/ThreadPoolServiceImpl.java
Patch:
@@ -30,7 +30,7 @@
 import cn.hippo4j.config.service.biz.ConfigService;
 import cn.hippo4j.config.service.biz.OperationLogService;
 import cn.hippo4j.config.service.biz.ThreadPoolService;
-import cn.hippo4j.config.toolkit.BeanUtil;
+import cn.hippo4j.common.toolkit.BeanUtil;
 import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
 import com.baomidou.mybatisplus.core.metadata.IPage;
 import com.baomidou.mybatisplus.core.toolkit.StringUtils;

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/handler/ClientCloseHookRemoveConfigCache.java
Patch:
@@ -19,8 +19,8 @@
 
 import cn.hippo4j.common.api.ClientCloseHookExecute;
 import cn.hippo4j.common.toolkit.JSONUtil;
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.config.service.ConfigCacheService;
-import cn.hutool.core.util.StrUtil;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Component;
 
@@ -36,7 +36,7 @@ public void closeHook(ClientCloseHookReq requestParam) {
         log.info("Remove Config Cache, Execute client hook function. Request: {}", JSONUtil.toJSONString(requestParam));
         try {
             String groupKey = requestParam.getGroupKey();
-            if (StrUtil.isNotBlank(groupKey)) {
+            if (StringUtil.isNotBlank(groupKey)) {
                 ConfigCacheService.removeConfigCache(groupKey);
             }
         } catch (Exception ex) {

File: hippo4j-config/src/main/java/cn/hippo4j/config/toolkit/MapUtil.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.config.toolkit;
 
-import cn.hutool.core.collection.CollUtil;
+import cn.hippo4j.common.toolkit.CollectionUtil;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -54,7 +54,7 @@ public static Object computeIfAbsent(Map target, Object key, BiFunction mappingF
      */
     public static List<String> parseMapForFilter(Map<String, ?> sourceMap, String filters) {
         List<String> resultList = new ArrayList<>();
-        if (CollUtil.isEmpty(sourceMap)) {
+        if (CollectionUtil.isEmpty(sourceMap)) {
             return resultList;
         }
         sourceMap.forEach((key, val) -> {

File: hippo4j-config/src/main/java/cn/hippo4j/config/toolkit/RequestUtil.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.config.toolkit;
 
-import cn.hutool.core.util.StrUtil;
+import cn.hippo4j.common.toolkit.StringUtil;
 
 import javax.servlet.http.HttpServletRequest;
 
@@ -36,6 +36,6 @@ public class RequestUtil {
 
     public static String getClientIdentify(HttpServletRequest request) {
         String identify = request.getHeader(LONG_PULLING_CLIENT_IDENTIFICATION);
-        return StrUtil.isBlank(identify) ? "" : identify;
+        return StringUtil.isBlank(identify) ? "" : identify;
     }
 }

File: hippo4j-config/src/test/java/cn/hippo4j/config/toolkit/ClassUtilTest.java
Patch:
@@ -18,7 +18,6 @@
 package cn.hippo4j.config.toolkit;
 
 import cn.hippo4j.common.toolkit.Assert;
-import cn.hutool.core.lang.caller.CallerUtil;
 import org.junit.Test;
 
 import java.util.Objects;

File: hippo4j-config/src/test/java/cn/hippo4j/config/toolkit/EnvUtilTest.java
Patch:
@@ -18,7 +18,7 @@
 package cn.hippo4j.config.toolkit;
 
 import cn.hippo4j.common.toolkit.Assert;
-import cn.hutool.core.util.StrUtil;
+import cn.hippo4j.common.toolkit.StringUtil;
 import org.junit.Test;
 
 /**
@@ -29,7 +29,7 @@ public class EnvUtilTest {
     @Test
     public void getHippo4JHomeTest() {
         String hippo4JHome = EnvUtil.getHippo4JHome();
-        Assert.isTrue(StrUtil.isNotBlank(hippo4JHome));
+        Assert.isTrue(StringUtil.isNotBlank(hippo4JHome));
     }
 
     @Test

File: hippo4j-config/src/test/java/cn/hippo4j/config/toolkit/MapUtilTest.java
Patch:
@@ -18,7 +18,7 @@
 package cn.hippo4j.config.toolkit;
 
 import cn.hippo4j.common.toolkit.Assert;
-import cn.hutool.core.collection.CollectionUtil;
+import cn.hippo4j.common.toolkit.CollectionUtil;
 import org.junit.Test;
 
 import java.util.HashMap;

File: hippo4j-config/src/test/java/cn/hippo4j/config/toolkit/Md5ConfigUtilTest.java
Patch:
@@ -18,8 +18,8 @@
 package cn.hippo4j.config.toolkit;
 
 import cn.hippo4j.common.toolkit.Assert;
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.config.model.ConfigAllInfo;
-import cn.hutool.core.util.StrUtil;
 import org.assertj.core.util.Lists;
 import org.junit.Test;
 
@@ -67,7 +67,7 @@ public void compareMd5ResultStringEmptyTest() {
         } catch (IOException ignored) {
 
         }
-        Assert.isTrue(Objects.equals(StrUtil.EMPTY, key));
+        Assert.isTrue(Objects.equals(StringUtil.EMPTY, key));
     }
 
     @Test
@@ -86,7 +86,7 @@ public void getClientMd5MapTest() {
         ConfigAllInfo configAllInfo = new ConfigAllInfo();
         configAllInfo.setDesc("hippo4j config");
         String tpContentMd5 = Md5ConfigUtil.getTpContentMd5(configAllInfo);
-        Assert.isTrue(StrUtil.isNotEmpty(tpContentMd5));
+        Assert.isTrue(StringUtil.isNotEmpty(tpContentMd5));
     }
 
 }

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/state/AbstractThreadPoolRuntime.java
Patch:
@@ -22,9 +22,9 @@
 import cn.hippo4j.core.executor.DynamicThreadPoolWrapper;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
 import cn.hippo4j.common.toolkit.CalculateUtil;
-import cn.hutool.core.date.DateUtil;
 
-import java.util.Date;
+import java.time.LocalDateTime;
+import java.time.format.DateTimeFormatter;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.Executor;
 import java.util.concurrent.ThreadPoolExecutor;
@@ -105,7 +105,7 @@ public ThreadPoolRunStateInfo getPoolRunState(String threadPoolId, Executor exec
         long rejectCount =
                 pool instanceof DynamicThreadPoolExecutor ? ((DynamicThreadPoolExecutor) pool).getRejectCountNum() : -1L;
         stateInfo.setRejectCount(rejectCount);
-        stateInfo.setClientLastRefreshTime(DateUtil.formatDateTime(new Date()));
+        stateInfo.setClientLastRefreshTime(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
         stateInfo.setTimestamp(System.currentTimeMillis());
         return supplement(stateInfo);
     }

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/state/ThreadPoolStatusHandler.java
Patch:
@@ -17,7 +17,7 @@
 
 package cn.hippo4j.core.executor.state;
 
-import cn.hutool.core.util.ReflectUtil;
+import cn.hippo4j.common.toolkit.ReflectUtil;
 import lombok.extern.slf4j.Slf4j;
 
 import java.lang.reflect.Method;
@@ -49,7 +49,7 @@ public static String getThreadPoolState(ThreadPoolExecutor executor) {
         if (EXCEPTION_FLAG.get()) {
             try {
                 Method runStateLessThan = ReflectUtil.getMethodByName(ThreadPoolExecutor.class, "runStateLessThan");
-                cn.hippo4j.common.toolkit.ReflectUtil.setAccessible(runStateLessThan);
+                ReflectUtil.setAccessible(runStateLessThan);
                 AtomicInteger ctl = (AtomicInteger) ReflectUtil.getFieldValue(executor, "ctl");
                 int shutdown = (int) ReflectUtil.getFieldValue(executor, "SHUTDOWN");
                 boolean runStateLessThanBool = ReflectUtil.invoke(executor, runStateLessThan, ctl.get(), shutdown);

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/AbstractBuildThreadPoolTemplate.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.core.executor.support;
 
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.common.toolkit.Assert;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
 import lombok.Data;

File: hippo4j-discovery/src/main/java/cn/hippo4j/discovery/core/BaseInstanceRegistry.java
Patch:
@@ -17,10 +17,10 @@
 
 package cn.hippo4j.discovery.core;
 
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.common.design.observer.AbstractSubjectCenter;
 import cn.hippo4j.common.model.InstanceInfo;
 import cn.hippo4j.common.model.InstanceInfo.InstanceStatus;
-import cn.hutool.core.thread.ThreadFactoryBuilder;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.stereotype.Service;
 import org.springframework.util.CollectionUtils;
@@ -189,8 +189,8 @@ long getCurrentTimeNano() {
             new ScheduledThreadPoolExecutor(
                     SCHEDULED_THREAD_CORE_NUM,
                     new ThreadFactoryBuilder()
-                            .setNamePrefix("registry-eviction")
-                            .setDaemon(true)
+                            .prefix("registry-eviction")
+                            .daemon(true)
                             .build());
 
     private final AtomicReference<EvictionTask> evictionTaskRef = new AtomicReference();

File: hippo4j-example/hippo4j-spring-boot-starter-adapter-kafka-example/src/main/java/cn/hippo4j/springboot/starter/adapter/kafka/example/produce/KafkaMessageProduce.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.springboot.starter.adapter.kafka.example.produce;
 
+import cn.hippo4j.common.toolkit.IdUtil;
 import cn.hippo4j.common.toolkit.JSONUtil;
 import cn.hippo4j.example.core.dto.SendMessageDTO;
 import lombok.AllArgsConstructor;
@@ -26,8 +27,6 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.UUID;
-
 /**
  * Kafka message produce.
  */
@@ -44,7 +43,7 @@ public class KafkaMessageProduce {
     @GetMapping("/message/send")
     public String sendMessage(Integer count) {
         for (int i = 0; i < count; i++) {
-            String keys = UUID.randomUUID().toString();
+            String keys = IdUtil.randomUUID();
             SendMessageDTO payload = SendMessageDTO.builder()
                     .receiver("156011xxx91")
                     .uid(keys)

File: hippo4j-example/hippo4j-spring-boot-starter-adapter-rabbitmq-example/src/main/java/cn/hippo4j/springboot/starter/adapter/rabbitmq/example/producer/MessageProduce.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.springboot.starter.adapter.rabbitmq.example.producer;
 
+import cn.hippo4j.common.toolkit.IdUtil;
 import cn.hippo4j.example.core.dto.SendMessageDTO;
 import cn.hippo4j.springboot.starter.adapter.rabbitmq.example.constants.SimpleMQConstant;
 import lombok.AllArgsConstructor;
@@ -26,8 +27,6 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.UUID;
-
 /**
  * Message produce.
  */
@@ -42,7 +41,7 @@ public class MessageProduce {
     @GetMapping("/message/send")
     public String sendMessage(Integer count) {
         for (int i = 0; i < count; i++) {
-            String keys = UUID.randomUUID().toString();
+            String keys = IdUtil.randomUUID();
             SendMessageDTO payload = SendMessageDTO.builder()
                     .receiver("156011xxx91")
                     .uid(keys)

File: hippo4j-example/hippo4j-spring-boot-starter-adapter-spring-cloud-stream-rabbitmq-example/src/main/java/cn/hippo4j/springboot/starter/adapter/springcloud/stream/rabbitmq/example/MessageProduce.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.springboot.starter.adapter.springcloud.stream.rabbitmq.example;
 
+import cn.hippo4j.common.toolkit.IdUtil;
 import cn.hippo4j.common.toolkit.JSONUtil;
 import cn.hippo4j.example.core.dto.SendMessageDTO;
 import lombok.AllArgsConstructor;
@@ -26,8 +27,6 @@
 import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.UUID;
-
 /**
  * Message produce.
  */
@@ -50,7 +49,7 @@ public String sendMessage(@RequestParam(required = false) Integer maxSendSize) {
     }
 
     private void sendMessage0() {
-        String keys = UUID.randomUUID().toString();
+        String keys = IdUtil.randomUUID();
         SendMessageDTO payload = SendMessageDTO.builder()
                 .receiver("156011xxx91")
                 .uid(keys)

File: hippo4j-example/hippo4j-spring-boot-starter-adapter-spring-cloud-stream-rocketmq-example/src/main/java/cn/hippo4j/springboot/starter/adapter/springcloud/stream/rocketmq/example/MessageProduce.java
Patch:
@@ -17,6 +17,7 @@
 
 package cn.hippo4j.springboot.starter.adapter.springcloud.stream.rocketmq.example;
 
+import cn.hippo4j.common.toolkit.IdUtil;
 import cn.hippo4j.common.toolkit.JSONUtil;
 import cn.hippo4j.example.core.dto.SendMessageDTO;
 import lombok.AllArgsConstructor;
@@ -28,8 +29,6 @@
 import org.springframework.web.bind.annotation.GetMapping;
 import org.springframework.web.bind.annotation.RestController;
 
-import java.util.UUID;
-
 /**
  * Message produce.
  */
@@ -55,7 +54,7 @@ public String sendMessage() {
     }
 
     private void sendMessage(String tags) {
-        String keys = UUID.randomUUID().toString();
+        String keys = IdUtil.randomUUID();
         SendMessageDTO payload = SendMessageDTO.builder()
                 .receiver("156011xxx91")
                 .uid(keys)

File: hippo4j-monitor/hippo4j-monitor-micrometer/src/main/java/cn/hippo4j/monitor/micrometer/MicrometerMonitorHandler.java
Patch:
@@ -19,11 +19,11 @@
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.model.ThreadPoolRunStateInfo;
+import cn.hippo4j.common.toolkit.BeanUtil;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.core.executor.state.ThreadPoolRunStateHandler;
 import cn.hippo4j.monitor.base.AbstractDynamicThreadPoolMonitor;
 import cn.hippo4j.monitor.base.MonitorTypeEnum;
-import cn.hutool.core.bean.BeanUtil;
 import io.micrometer.core.instrument.Metrics;
 import io.micrometer.core.instrument.Tag;
 import org.springframework.core.env.Environment;
@@ -54,7 +54,7 @@ protected void execute(ThreadPoolRunStateInfo poolRunStateInfo) {
         if (stateInfo == null) {
             RUN_STATE_CACHE.put(poolRunStateInfo.getTpId(), poolRunStateInfo);
         } else {
-            BeanUtil.copyProperties(poolRunStateInfo, stateInfo);
+            BeanUtil.convert(poolRunStateInfo, stateInfo);
         }
         Environment environment = ApplicationContextHolder.getInstance().getEnvironment();
         String applicationName = environment.getProperty("spring.application.name", "application");

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/monitor/DynamicThreadPoolMonitorExecutor.java
Patch:
@@ -22,7 +22,7 @@
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.config.springboot.starter.config.BootstrapConfigProperties;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
-import cn.hippo4j.core.executor.support.ThreadFactoryBuilder;
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.monitor.base.DynamicThreadPoolMonitor;
 import cn.hippo4j.monitor.base.ThreadPoolMonitor;
 import lombok.RequiredArgsConstructor;

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/notify/CoreNotifyConfigBuilder.java
Patch:
@@ -25,7 +25,6 @@
 import cn.hippo4j.message.api.NotifyConfigBuilder;
 import cn.hippo4j.message.dto.NotifyConfigDTO;
 import cn.hippo4j.message.service.AlarmControlHandler;
-import cn.hutool.core.util.StrUtil;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 
@@ -110,7 +109,7 @@ public Map<String, List<NotifyConfigDTO>> buildSingleNotifyConfig(ExecutorProper
     public void initCacheAndLock(Map<String, List<NotifyConfigDTO>> buildSingleNotifyConfig) {
         buildSingleNotifyConfig.forEach(
                 (key, val) -> val.stream()
-                        .filter(each -> StrUtil.equals("ALARM", each.getType()))
+                        .filter(each -> Objects.equals("ALARM", each.getType()))
                         .forEach(each -> alarmControlHandler.initCacheAndLock(each.getTpId(), each.getPlatform(), each.getInterval())));
     }
 

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/AdapterExecutorsRefreshListener.java
Patch:
@@ -20,11 +20,12 @@
 import cn.hippo4j.adapter.base.ThreadPoolAdapter;
 import cn.hippo4j.adapter.base.ThreadPoolAdapterParameter;
 import cn.hippo4j.common.config.ApplicationContextHolder;
+import cn.hippo4j.common.toolkit.BeanUtil;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.config.springboot.starter.config.AdapterExecutorProperties;
 import cn.hippo4j.config.springboot.starter.support.DynamicThreadPoolAdapterRegister;
-import cn.hutool.core.bean.BeanUtil;
 import lombok.extern.slf4j.Slf4j;
+import org.springframework.beans.BeanUtils;
 import org.springframework.core.annotation.Order;
 
 import java.util.List;
@@ -63,7 +64,7 @@ public void onApplicationEvent(Hippo4jConfigDynamicRefreshEvent event) {
                     || !Objects.equals(adapterExecutorProperties.getMaximumPoolSize(), each.getMaximumPoolSize())) {
                 threadPoolAdapterMap.forEach((key, val) -> {
                     if (Objects.equals(val.mark(), each.getMark())) {
-                        val.updateThreadPool(BeanUtil.toBean(each, ThreadPoolAdapterParameter.class));
+                        val.updateThreadPool(BeanUtil.convert(each, ThreadPoolAdapterParameter.class));
                         DynamicThreadPoolAdapterRegister.ADAPTER_EXECUTORS_MAP.put(buildKey, each);
                     }
                 });

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/monitor/ReportingEventExecutor.java
Patch:
@@ -24,15 +24,14 @@
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.toolkit.ThreadUtil;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
-import cn.hippo4j.core.executor.support.ThreadFactoryBuilder;
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.monitor.base.DynamicThreadPoolMonitor;
 import cn.hippo4j.monitor.base.MonitorTypeEnum;
 import cn.hippo4j.monitor.base.ThreadPoolMonitor;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
 import cn.hippo4j.springboot.starter.monitor.collect.Collector;
 import cn.hippo4j.springboot.starter.monitor.send.MessageSender;
 import cn.hippo4j.springboot.starter.remote.ServerHealthCheck;
-import cn.hutool.core.collection.CollUtil;
 import lombok.NonNull;
 import lombok.RequiredArgsConstructor;
 import lombok.SneakyThrows;
@@ -162,7 +161,7 @@ private void dynamicThreadPoolMonitor() {
      */
     private void runTimeGatherTask() {
         boolean healthStatus = serverHealthCheck.isHealthStatus();
-        if (!healthStatus || CollUtil.isEmpty(collectors)) {
+        if (!healthStatus || CollectionUtil.isEmpty(collectors)) {
             return;
         }
         collectors.forEach((beanName, collector) -> {

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/monitor/collect/RunTimeInfoCollector.java
Patch:
@@ -22,10 +22,11 @@
 import cn.hippo4j.common.monitor.Message;
 import cn.hippo4j.common.monitor.MessageTypeEnum;
 import cn.hippo4j.common.monitor.RuntimeMessage;
+import cn.hippo4j.common.toolkit.BeanUtil;
+import cn.hippo4j.springboot.starter.config.BootstrapProperties;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
 import cn.hippo4j.core.executor.state.AbstractThreadPoolRuntime;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
-import cn.hutool.core.bean.BeanUtil;
 import lombok.AllArgsConstructor;
 
 import java.util.ArrayList;
@@ -48,7 +49,7 @@ public Message collectMessage() {
         List<String> listThreadPoolId = GlobalThreadPoolManage.listThreadPoolId();
         for (String each : listThreadPoolId) {
             ThreadPoolRunStateInfo poolRunState = getPoolRunState(each);
-            RuntimeMessage runtimeMessage = BeanUtil.toBean(poolRunState, RuntimeMessage.class);
+            RuntimeMessage runtimeMessage = BeanUtil.convert(poolRunState, RuntimeMessage.class);
             runtimeMessage.setGroupKey(getThreadPoolIdentify(each, properties.getItemId(), properties.getNamespace()));
             runtimeMessages.add(runtimeMessage);
         }

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/remote/AbstractHealthCheck.java
Patch:
@@ -20,7 +20,7 @@
 import cn.hippo4j.common.toolkit.ThreadUtil;
 import cn.hippo4j.springboot.starter.event.ApplicationCompleteEvent;
 import cn.hippo4j.springboot.starter.core.ShutdownExecuteException;
-import cn.hippo4j.core.executor.support.ThreadFactoryBuilder;
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import lombok.SneakyThrows;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.factory.InitializingBean;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/remote/ServerHttpAgent.java
Patch:
@@ -19,12 +19,12 @@
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.common.constant.Constants;
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.common.web.base.Result;
-import cn.hippo4j.core.executor.support.ThreadFactoryBuilder;
+import cn.hippo4j.common.design.builder.ThreadFactoryBuilder;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
 import cn.hippo4j.springboot.starter.security.SecurityProxy;
 import cn.hippo4j.springboot.starter.toolkit.HttpClientUtil;
-import cn.hutool.core.util.StrUtil;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -133,7 +133,7 @@ private void isHealthStatus() {
     }
 
     private Map injectSecurityInfo(Map<String, String> params) {
-        if (StrUtil.isNotBlank(securityProxy.getAccessToken())) {
+        if (StringUtil.isNotBlank(securityProxy.getAccessToken())) {
             params.put(Constants.ACCESS_TOKEN, securityProxy.getAccessToken());
         }
         return params;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/remote/ServerListManager.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.springboot.starter.remote;
 
+import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.springboot.starter.config.BootstrapProperties;
-import cn.hutool.core.util.StrUtil;
 import lombok.Getter;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.util.StringUtils;
@@ -56,7 +56,7 @@ public ServerListManager(BootstrapProperties dynamicThreadPoolProperties) {
             List<String> serverAddrList = new ArrayList();
             String[] serverAddrListArr = this.serverAddrsStr.split(",");
             for (String serverAddr : serverAddrListArr) {
-                boolean whetherJoint = StrUtil.isNotBlank(serverAddr)
+                boolean whetherJoint = StringUtil.isNotBlank(serverAddr)
                         && !serverAddr.startsWith(HTTPS) && !serverAddr.startsWith(HTTP);
                 if (whetherJoint) {
                     serverAddr = HTTP + serverAddr;

File: hippo4j-auth/src/main/java/cn/hippo4j/auth/filter/JWTAuthorizationFilter.java
Patch:
@@ -85,7 +85,7 @@ protected void doFilterInternal(HttpServletRequest request,
             String resultStatus = "-1";
             if (ex instanceof ServiceException) {
                 ServiceException serviceException = (ServiceException) ex;
-                resultStatus = serviceException.errorCode.getCode();
+                resultStatus = serviceException.getErrorCode().getCode();
             }
             response.getWriter().write(JSONUtil.toJSONString(Results.failure(resultStatus, ex.getMessage())));
             response.getWriter().flush();

File: hippo4j-common/src/main/java/cn/hippo4j/common/spi/DynamicThreadPoolServiceLoader.java
Patch:
@@ -91,7 +91,7 @@ private static Object newServiceInstance(final Class<?> clazz) {
         try {
             return clazz.getDeclaredConstructor().newInstance();
         } catch (InstantiationException | IllegalAccessException | InvocationTargetException
-                 | NoSuchMethodException e) {
+                | NoSuchMethodException e) {
             throw new ServiceLoaderInstantiationException(clazz, e);
         }
     }

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/ByteConvertUtil.java
Patch:
@@ -25,9 +25,9 @@
 public class ByteConvertUtil {
 
     public static final int KB_SIZE = 2 << 9;
-    
+
     public static final int MB_SIZE = 2 << 19;
-    
+
     public static final int GB_SIZE = 2 << 29;
 
     public static String getPrintSize(long size) {

File: hippo4j-common/src/main/java/cn/hippo4j/common/api/ClientCloseHookExecute.java
Patch:
@@ -32,6 +32,9 @@ public interface ClientCloseHookExecute {
      */
     void closeHook(ClientCloseHookReq req);
 
+    /**
+     * Client close hook req.
+     */
     @Data
     @Accessors(chain = true)
     class ClientCloseHookReq {

File: hippo4j-common/src/main/java/cn/hippo4j/common/executor/ExecutorFactory.java
Patch:
@@ -26,6 +26,9 @@
  */
 public class ExecutorFactory {
 
+    /**
+     * Thread pool management tool.
+     */
     public static final class Managed {
 
         private static final String DEFAULT_NAMESPACE = "dynamic.thread-pool";

File: hippo4j-common/src/main/java/cn/hippo4j/common/executor/ThreadPoolManager.java
Patch:
@@ -32,7 +32,7 @@ public class ThreadPoolManager {
 
     private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;
 
-    private Map<String, Object> lockers = new ConcurrentHashMap(8);
+    private Map<String, Object> lockers = new ConcurrentHashMap();
 
     private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();
 
@@ -47,7 +47,7 @@ public static ThreadPoolManager getInstance() {
     }
 
     private void init() {
-        resourcesManager = new ConcurrentHashMap(8);
+        resourcesManager = new ConcurrentHashMap();
     }
 
     public void register(String tenantId, String group, ExecutorService executor) {
@@ -60,7 +60,7 @@ public void register(String tenantId, String group, ExecutorService executor) {
         synchronized (monitor) {
             Map<String, Set<ExecutorService>> map = resourcesManager.get(tenantId);
             if (map == null) {
-                map = new HashMap(8);
+                map = new HashMap();
                 map.put(group, new HashSet());
                 map.get(group).add(executor);
                 resourcesManager.put(tenantId, map);

File: hippo4j-common/src/main/java/cn/hippo4j/common/executor/support/RejectedPolicyTypeEnum.java
Patch:
@@ -50,7 +50,7 @@ public enum RejectedPolicyTypeEnum {
     @Getter
     private String name;
 
-    public RejectedExecutionHandler rejectedHandler;
+    private RejectedExecutionHandler rejectedHandler;
 
     RejectedPolicyTypeEnum(Integer type, String name, RejectedExecutionHandler rejectedHandler) {
         this.type = type;

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/WebIpAndPortInfo.java
Patch:
@@ -103,4 +103,4 @@ protected boolean checkPort(String port) {
     protected boolean contrastSegment(String appIp, String propIp) {
         return ALL.equals(propIp) || appIp.equals(propIp);
     }
-}
\ No newline at end of file
+}

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/CalculateUtil.java
Patch:
@@ -25,7 +25,9 @@
  */
 public class CalculateUtil {
 
+    private static final int PERCENTAGE = 100;
+
     public static int divide(int num1, int num2) {
-        return ((int) (Double.parseDouble(num1 + "") / Double.parseDouble(num2 + "") * 100));
+        return ((int) (Double.parseDouble(num1 + "") / Double.parseDouble(num2 + "") * PERCENTAGE));
     }
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/FileUtil.java
Patch:
@@ -29,6 +29,8 @@
  */
 public class FileUtil {
 
+    private static final int ERROR_CODE = -1;
+
     @SneakyThrows
     public static String readUtf8String(String path) {
         String resultReadStr;
@@ -38,7 +40,7 @@ public static String readUtf8String(String path) {
                 BufferedInputStream bis = new BufferedInputStream(inputStream);
                 ByteArrayOutputStream buf = new ByteArrayOutputStream()) {
             int result = bis.read();
-            while (result != -1) {
+            while (result != ERROR_CODE) {
                 buf.write((byte) result);
                 result = bis.read();
             }

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/ReflectUtil.java
Patch:
@@ -61,7 +61,7 @@ public static Object getFieldValue(Object obj, Field field) {
     }
 
     public static <T extends AccessibleObject> T setAccessible(T accessibleObject) {
-        if (null != accessibleObject && false == accessibleObject.isAccessible()) {
+        if (null != accessibleObject && !accessibleObject.isAccessible()) {
             accessibleObject.setAccessible(true);
         }
         return accessibleObject;
@@ -121,7 +121,7 @@ public static void setFieldValue(Object obj, Field field, Object value) throws U
         cn.hutool.core.lang.Assert.notNull(field, "Field in [{}] not exist !", obj);
         final Class<?> fieldType = field.getType();
         if (null != value) {
-            if (false == fieldType.isAssignableFrom(value.getClass())) {
+            if (!fieldType.isAssignableFrom(value.getClass())) {
                 final Object targetValue = Convert.convert(fieldType, value);
                 if (null != targetValue) {
                     value = targetValue;

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/UserContext.java
Patch:
@@ -46,6 +46,9 @@ public static void clear() {
         USER_THREAD_LOCAL.remove();
     }
 
+    /**
+     * User info.
+     */
     @Data
     @NoArgsConstructor
     @AllArgsConstructor

File: hippo4j-common/src/main/java/cn/hippo4j/common/web/exception/AbstractException.java
Patch:
@@ -25,7 +25,7 @@
 public class AbstractException extends RuntimeException {
 
     @Getter
-    public final ErrorCode errorCode;
+    private final ErrorCode errorCode;
 
     public AbstractException(String message, Throwable throwable, ErrorCode errorCode) {
         super(message, throwable);

File: hippo4j-common/src/test/java/cn/hippo4j/common/function/MatcherFunctionTest.java
Patch:
@@ -18,9 +18,10 @@
 package cn.hippo4j.common.function;
 
 import cn.hippo4j.common.toolkit.Assert;
-import java.math.BigDecimal;
 import org.junit.Test;
 
+import java.math.BigDecimal;
+
 public final class MatcherFunctionTest {
 
     public static <T> boolean matchTest(Matcher<T> matcher, T value) {

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/DynamicThreadPoolAutoConfiguration.java
Patch:
@@ -36,7 +36,7 @@
 import cn.hippo4j.message.service.AlarmControlHandler;
 import cn.hippo4j.message.service.Hippo4jBaseSendMessageService;
 import cn.hippo4j.message.service.Hippo4jSendMessageService;
-import cn.hippo4j.springboot.starter.adapter.web.EnableWebAdapter;
+import cn.hippo4j.springboot.starter.adapter.web.WebAdapterConfiguration;
 import lombok.AllArgsConstructor;
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
@@ -53,11 +53,10 @@
  * Dynamic thread-pool core auto configuration.
  */
 @Configuration
-@EnableWebAdapter
 @AllArgsConstructor
 @ConditionalOnBean(MarkerConfiguration.Marker.class)
 @EnableConfigurationProperties(BootstrapConfigProperties.class)
-@ImportAutoConfiguration({UtilAutoConfiguration.class, MessageConfiguration.class})
+@ImportAutoConfiguration({WebAdapterConfiguration.class, UtilAutoConfiguration.class, MessageConfiguration.class})
 @ConditionalOnProperty(prefix = BootstrapConfigProperties.PREFIX, value = "enable", matchIfMissing = true, havingValue = "true")
 @Import({
         ConfigHandlerConfiguration.EmbeddedNacos.class, ConfigHandlerConfiguration.EmbeddedNacosCloud.class,

File: hippo4j-config/src/main/java/cn/hippo4j/config/config/MybatisPlusConfig.java
Patch:
@@ -30,6 +30,7 @@
  */
 @Configuration
 public class MybatisPlusConfig {
+
     @Value("${spring.profiles.active:mysql}")
     private String profilesActive;
 

File: hippo4j-config/src/main/java/cn/hippo4j/config/config/MybatisPlusConfig.java
Patch:
@@ -30,8 +30,7 @@
  */
 @Configuration
 public class MybatisPlusConfig {
-    
-    @Value("${spring.profiles.active}")
+    @Value("${spring.profiles.active:mysql}")
     private String profilesActive;
 
     @Bean

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/AdapterExecutorsRefreshListener.java
Patch:
@@ -60,7 +60,7 @@ public void onApplicationEvent(Hippo4jConfigDynamicRefreshEvent event) {
                 continue;
             }
             if (!Objects.equals(adapterExecutorProperties.getCorePoolSize(), each.getCorePoolSize())
-                || !Objects.equals(adapterExecutorProperties.getMaximumPoolSize(), each.getMaximumPoolSize())) {
+                    || !Objects.equals(adapterExecutorProperties.getMaximumPoolSize(), each.getMaximumPoolSize())) {
                 threadPoolAdapterMap.forEach((key, val) -> {
                     if (Objects.equals(val.mark(), each.getMark())) {
                         val.updateThreadPool(BeanUtil.toBean(each, ThreadPoolAdapterParameter.class));

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/DynamicThreadPoolRefreshListener.java
Patch:
@@ -21,6 +21,7 @@
 import cn.hippo4j.common.executor.support.RejectedPolicyTypeEnum;
 import cn.hippo4j.common.executor.support.ResizableCapacityLinkedBlockingQueue;
 import cn.hippo4j.common.toolkit.CollectionUtil;
+import cn.hippo4j.config.springboot.starter.config.AdapterExecutorProperties;
 import cn.hippo4j.config.springboot.starter.config.BootstrapConfigProperties;
 import cn.hippo4j.config.springboot.starter.config.ExecutorProperties;
 import cn.hippo4j.config.springboot.starter.notify.CoreNotifyConfigBuilder;
@@ -68,9 +69,8 @@ public class DynamicThreadPoolRefreshListener extends AbstractRefreshListener<Ex
     private final Hippo4jBaseSendMessageService hippo4jBaseSendMessageService;
 
     @Override
-    public boolean match(ExecutorProperties properties) {
-        String nodes = properties.getNodes();
-        return checkArray(nodes);
+    public String getNodes(ExecutorProperties properties) {
+        return properties.getNodes();
     }
 
     @Override

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/WebExecutorRefreshListener.java
Patch:
@@ -39,9 +39,8 @@
 public class WebExecutorRefreshListener extends AbstractRefreshListener<WebThreadPoolProperties> {
 
     @Override
-    public boolean match(WebThreadPoolProperties properties) {
-        String nodes = properties.getNodes();
-        return checkArray(nodes);
+    public String getNodes(WebThreadPoolProperties properties) {
+        return properties.getNodes();
     }
 
     @Override

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/BootstrapConfigProperties.java
Patch:
@@ -20,9 +20,6 @@
 import java.util.List;
 import java.util.Map;
 
-import java.util.List;
-import java.util.Map;
-
 import cn.hippo4j.core.config.BootstrapPropertiesInterface;
 import cn.hippo4j.config.springboot.starter.parser.ConfigFileTypeEnum;
 import lombok.Getter;

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/config/DynamicThreadPoolCoreAutoConfiguration.java
Patch:
@@ -38,7 +38,6 @@
 import cn.hippo4j.message.service.Hippo4jSendMessageService;
 import cn.hippo4j.springboot.starter.adapter.web.EnableWebAdapter;
 import lombok.AllArgsConstructor;
-
 import org.springframework.boot.autoconfigure.ImportAutoConfiguration;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/config/springboot/starter/refresher/event/PlatformsRefreshListener.java
Patch:
@@ -25,7 +25,6 @@
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
 import cn.hippo4j.message.dto.NotifyConfigDTO;
 import cn.hippo4j.message.service.Hippo4jBaseSendMessageService;
-import org.springframework.context.ApplicationListener;
 import org.springframework.core.annotation.Order;
 
 import java.util.List;
@@ -37,7 +36,7 @@
  * Platforms refresh listener.
  */
 @Order(PLATFORMS_LISTENER)
-public class PlatformsRefreshListener implements ApplicationListener<Hippo4jConfigDynamicRefreshEvent> {
+public class PlatformsRefreshListener extends AbstractRefreshListener<ExecutorProperties> {
 
     @Override
     public void onApplicationEvent(Hippo4jConfigDynamicRefreshEvent threadPoolDynamicRefreshEvent) {

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/adpter/DynamicThreadPoolAdapterChoose.java
Patch:
@@ -34,6 +34,7 @@ public class DynamicThreadPoolAdapterChoose {
     static {
         DYNAMIC_THREAD_POOL_ADAPTERS.add(new TransmittableThreadLocalExecutorAdapter());
         DYNAMIC_THREAD_POOL_ADAPTERS.add(new TransmittableThreadLocalExecutorServiceAdapter());
+        DYNAMIC_THREAD_POOL_ADAPTERS.add(new ThreadPoolTaskExecutorAdapter());
     }
 
     /**

File: hippo4j-common/src/test/java/cn/hippo4j/common/toolkit/FileUtilTest.java
Patch:
@@ -26,7 +26,7 @@ public void assertReadUtf8String() {
         String testText = "abcd简体繁体\uD83D\uDE04\uD83D\uDD25& *\n" +
                 "second line\n" +
                 "empty line next\n";
-        String testFilePath = "classpath:/test/test_utf8.txt";
+        String testFilePath = "test/test_utf8.txt";
         String contentByFileUtil = FileUtil.readUtf8String(testFilePath);
         Assert.isTrue(testText.equals(contentByFileUtil));
     }

File: hippo4j-spring-boot/hippo4j-config-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/config/DynamicThreadPoolNotifyProperties.java
Patch:
@@ -30,7 +30,7 @@
 public class DynamicThreadPoolNotifyProperties {
 
     /**
-     * Interval
+     * Thread pool run alarm interval. unit: s
      */
     private Integer interval;
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/toolkit/ReflectUtil.java
Patch:
@@ -94,9 +94,7 @@ public static Field[] getFieldsDirectly(Class<?> beanClass, boolean withSuperCla
             } else {
                 int length = allFields.length;
                 allFields = Arrays.copyOf(allFields, length + declaredFields.length);
-                for (int i = 1; i < declaredFields.length; i++) {
-                    allFields[length + i] = declaredFields[i - 1];
-                }
+                System.arraycopy(declaredFields, 0, allFields, length, declaredFields.length);
             }
             searchType = withSuperClassFields ? searchType.getSuperclass() : null;
         }

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/ThreadPoolServiceImpl.java
Patch:
@@ -40,7 +40,7 @@
 
 import java.util.Date;
 import java.util.List;
-import java.util.Optional;
+import java.util.Objects;
 
 /**
  * Thread pool service impl.
@@ -83,7 +83,7 @@ public List<ThreadPoolRespDTO> getThreadPoolByItemId(String itemId) {
     @Override
     public void saveOrUpdateThreadPoolConfig(String identify, ThreadPoolSaveOrUpdateReqDTO reqDTO) {
         ConfigAllInfo configAllInfo = BeanUtil.convert(reqDTO, ConfigAllInfo.class);
-        Long executeTimeOut = configAllInfo.getExecuteTimeOut() == 0 ? null : configAllInfo.getExecuteTimeOut();
+        Long executeTimeOut = Objects.equals(configAllInfo.getExecuteTimeOut(), 0L) ? null : configAllInfo.getExecuteTimeOut();
         configAllInfo.setExecuteTimeOut(executeTimeOut);
         configService.insertOrUpdate(identify, false, configAllInfo);
     }
@@ -102,7 +102,7 @@ private void recordOperationLog(ThreadPoolDelReqDTO requestParam) {
         LogRecordInfo logRecordInfo = LogRecordInfo.builder()
                 .bizKey(requestParam.getItemId() + "_" + requestParam.getTpId())
                 .bizNo(requestParam.getItemId() + "_" + requestParam.getTpId())
-                .operator(Optional.ofNullable(UserContext.getUserName()).orElse("-"))
+                .operator(UserContext.getUserName())
                 .action("删除线程池: " + requestParam.getTpId())
                 .category("THREAD_POOL_DELETE")
                 .detail(JSONUtil.toJSONString(requestParam))

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/ChangeThreadPoolConstants.java
Patch:
@@ -25,7 +25,6 @@ public class ChangeThreadPoolConstants {
     public static final String CHANGE_THREAD_POOL_TEXT = "Dynamic thread pool change parameter: [{}]" +
             "\n    corePoolSize: [{}]" +
             "\n    maximumPoolSize: [{}]" +
-            "\n    blockingQueueType: [{}]" +
             "\n    capacity: [{}]" +
             "\n    keepAliveTime: [{}]" +
             "\n    executeTimeOut: [{}]" +

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/event/ExecutorsListener.java
Patch:
@@ -89,7 +89,6 @@ public void onApplicationEvent(Hippo4jCoreDynamicRefreshEvent threadPoolDynamicR
                     threadPoolId,
                     String.format(CHANGE_DELIMITER, beforeProperties.getCorePoolSize(), properties.getCorePoolSize()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getMaximumPoolSize(), properties.getMaximumPoolSize()),
-                    String.format(CHANGE_DELIMITER, beforeProperties.getBlockingQueue(), properties.getBlockingQueue()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getQueueCapacity(), properties.getQueueCapacity()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getKeepAliveTime(), properties.getKeepAliveTime()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getExecuteTimeOut(), properties.getExecuteTimeOut()),

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/ServerThreadPoolDynamicRefresh.java
Patch:
@@ -107,9 +107,7 @@ public void refreshDynamicPool(ThreadPoolParameter parameter, ThreadPoolExecutor
                 threadPoolId,
                 String.format(CHANGE_DELIMITER, originalCoreSize, afterExecutor.getCorePoolSize()),
                 String.format(CHANGE_DELIMITER, originalMaximumPoolSize, afterExecutor.getMaximumPoolSize()),
-                String.format(CHANGE_DELIMITER, originalQuery, QueueTypeEnum.getBlockingQueueNameByType(parameter.getQueueType())),
-                String.format(CHANGE_DELIMITER, originalCapacity,
-                        (afterExecutor.getQueue().remainingCapacity() + afterExecutor.getQueue().size())),
+                String.format(CHANGE_DELIMITER, originalCapacity, (afterExecutor.getQueue().remainingCapacity() + afterExecutor.getQueue().size())),
                 String.format(CHANGE_DELIMITER, originalKeepAliveTime, afterExecutor.getKeepAliveTime(TimeUnit.SECONDS)),
                 String.format(CHANGE_DELIMITER, originalExecuteTimeOut, originalExecuteTimeOut),
                 String.format(CHANGE_DELIMITER, originalRejected, RejectedTypeEnum.getRejectedNameByType(parameter.getRejectedType())),

File: hippo4j-common/src/main/java/cn/hippo4j/common/constant/ChangeThreadPoolConstants.java
Patch:
@@ -25,7 +25,6 @@ public class ChangeThreadPoolConstants {
     public static final String CHANGE_THREAD_POOL_TEXT = "Dynamic thread pool change parameter: [{}]" +
             "\n    corePoolSize: [{}]" +
             "\n    maximumPoolSize: [{}]" +
-            "\n    blockingQueueType: [{}]" +
             "\n    capacity: [{}]" +
             "\n    keepAliveTime: [{}]" +
             "\n    executeTimeOut: [{}]" +

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/event/ExecutorsListener.java
Patch:
@@ -89,7 +89,6 @@ public void onApplicationEvent(Hippo4jCoreDynamicRefreshEvent threadPoolDynamicR
                     threadPoolId,
                     String.format(CHANGE_DELIMITER, beforeProperties.getCorePoolSize(), properties.getCorePoolSize()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getMaximumPoolSize(), properties.getMaximumPoolSize()),
-                    String.format(CHANGE_DELIMITER, beforeProperties.getBlockingQueue(), properties.getBlockingQueue()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getQueueCapacity(), properties.getQueueCapacity()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getKeepAliveTime(), properties.getKeepAliveTime()),
                     String.format(CHANGE_DELIMITER, beforeProperties.getExecuteTimeOut(), properties.getExecuteTimeOut()),

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/ServerThreadPoolDynamicRefresh.java
Patch:
@@ -107,9 +107,7 @@ public void refreshDynamicPool(ThreadPoolParameter parameter, ThreadPoolExecutor
                 threadPoolId,
                 String.format(CHANGE_DELIMITER, originalCoreSize, afterExecutor.getCorePoolSize()),
                 String.format(CHANGE_DELIMITER, originalMaximumPoolSize, afterExecutor.getMaximumPoolSize()),
-                String.format(CHANGE_DELIMITER, originalQuery, QueueTypeEnum.getBlockingQueueNameByType(parameter.getQueueType())),
-                String.format(CHANGE_DELIMITER, originalCapacity,
-                        (afterExecutor.getQueue().remainingCapacity() + afterExecutor.getQueue().size())),
+                String.format(CHANGE_DELIMITER, originalCapacity, (afterExecutor.getQueue().remainingCapacity() + afterExecutor.getQueue().size())),
                 String.format(CHANGE_DELIMITER, originalKeepAliveTime, afterExecutor.getKeepAliveTime(TimeUnit.SECONDS)),
                 String.format(CHANGE_DELIMITER, originalExecuteTimeOut, originalExecuteTimeOut),
                 String.format(CHANGE_DELIMITER, originalRejected, RejectedTypeEnum.getRejectedNameByType(parameter.getRejectedType())),

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/ThreadPoolAdapterService.java
Patch:
@@ -30,6 +30,7 @@
 import cn.hippo4j.config.model.biz.adapter.ThreadPoolAdapterRespDTO;
 import cn.hutool.core.text.StrBuilder;
 import cn.hutool.http.HttpUtil;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
@@ -105,7 +106,7 @@ public List<ThreadPoolAdapterRespDTO> query(ThreadPoolAdapterReqDTO requestParam
             try {
                 String resultStr = HttpUtil.get(urlString, param, HTTP_EXECUTE_TIMEOUT);
                 if (StringUtil.isNotBlank(resultStr)) {
-                    Result<ThreadPoolAdapterRespDTO> restResult = JSONUtil.parseObject(resultStr, Result.class);
+                    Result<ThreadPoolAdapterRespDTO> restResult = JSONUtil.parseObject(resultStr, new TypeReference<Result<ThreadPoolAdapterRespDTO>>(){});
                     result.add(restResult.getData());
                 }
             } catch (Throwable ex) {

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/ThreadPoolAdapterService.java
Patch:
@@ -30,6 +30,7 @@
 import cn.hippo4j.config.model.biz.adapter.ThreadPoolAdapterRespDTO;
 import cn.hutool.core.text.StrBuilder;
 import cn.hutool.http.HttpUtil;
+import com.fasterxml.jackson.core.type.TypeReference;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import lombok.extern.slf4j.Slf4j;
@@ -105,7 +106,7 @@ public List<ThreadPoolAdapterRespDTO> query(ThreadPoolAdapterReqDTO requestParam
             try {
                 String resultStr = HttpUtil.get(urlString, param, HTTP_EXECUTE_TIMEOUT);
                 if (StringUtil.isNotBlank(resultStr)) {
-                    Result<ThreadPoolAdapterRespDTO> restResult = JSONUtil.parseObject(resultStr, Result.class);
+                    Result<ThreadPoolAdapterRespDTO> restResult = JSONUtil.parseObject(resultStr, new TypeReference<Result<ThreadPoolAdapterRespDTO>>(){});
                     result.add(restResult.getData());
                 }
             } catch (Throwable ex) {

File: hippo4j-monitor/hippo4j-monitor-es/src/main/java/cn/hippo4j/monitor/es/EsMonitorHandler.java
Patch:
@@ -30,7 +30,7 @@
 import org.elasticsearch.action.admin.indices.alias.Alias;
 import org.elasticsearch.action.admin.indices.create.CreateIndexRequest;
 import org.elasticsearch.action.admin.indices.create.CreateIndexResponse;
-import org.elasticsearch.action.admin.indices.get.GetIndexRequest;
+import org.elasticsearch.client.indices.GetIndexRequest;
 import org.elasticsearch.action.index.IndexRequest;
 import org.elasticsearch.action.index.IndexResponse;
 import org.elasticsearch.client.RequestOptions;
@@ -100,8 +100,7 @@ public synchronized boolean isExists(String index) {
         // cache check result
         if (Objects.isNull(isIndexExist)) {
             boolean exists = false;
-            GetIndexRequest request = new GetIndexRequest();
-            request.indices(index);
+            GetIndexRequest request = new GetIndexRequest(index);
             try {
                 RestHighLevelClient client = EsClientHolder.getClient();
                 exists = client.indices().exists(request, RequestOptions.DEFAULT);

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/ThreadPoolServiceImpl.java
Patch:
@@ -62,7 +62,7 @@ public IPage<ThreadPoolRespDTO> queryThreadPoolPage(ThreadPoolQueryReqDTO reqDTO
                 .eq(!StringUtils.isBlank(reqDTO.getItemId()), ConfigAllInfo::getItemId, reqDTO.getItemId())
                 .eq(!StringUtils.isBlank(reqDTO.getTpId()), ConfigAllInfo::getTpId, reqDTO.getTpId())
                 .eq(ConfigAllInfo::getDelFlag, DelEnum.NORMAL)
-                .orderByDesc(ConfigAllInfo::getGmtCreate);
+                .orderByDesc(reqDTO.getDesc() != null, ConfigAllInfo::getGmtCreate);
         return configInfoMapper.selectPage(reqDTO, wrapper).convert(each -> BeanUtil.convert(each, ThreadPoolRespDTO.class));
     }
 
@@ -112,7 +112,6 @@ private void recordOperationLog(ThreadPoolDelReqDTO requestParam) {
     public void alarmEnable(String id, Integer isAlarm) {
         ConfigAllInfo configAllInfo = configInfoMapper.selectById(id);
         configAllInfo.setIsAlarm(isAlarm);
-        // TODO: 是否报警变更, 虽然通知了客户端, 但是并没有在客户端实时生效, 需要考虑一个好的场景思路
         configService.insertOrUpdate(null, false, configAllInfo);
     }
 }

File: hippo4j-config/src/main/java/cn/hippo4j/config/service/biz/impl/ThreadPoolServiceImpl.java
Patch:
@@ -62,7 +62,7 @@ public IPage<ThreadPoolRespDTO> queryThreadPoolPage(ThreadPoolQueryReqDTO reqDTO
                 .eq(!StringUtils.isBlank(reqDTO.getItemId()), ConfigAllInfo::getItemId, reqDTO.getItemId())
                 .eq(!StringUtils.isBlank(reqDTO.getTpId()), ConfigAllInfo::getTpId, reqDTO.getTpId())
                 .eq(ConfigAllInfo::getDelFlag, DelEnum.NORMAL)
-                .orderByDesc(ConfigAllInfo::getGmtCreate);
+                .orderByDesc(reqDTO.getDesc() != null, ConfigAllInfo::getGmtCreate);
         return configInfoMapper.selectPage(reqDTO, wrapper).convert(each -> BeanUtil.convert(each, ThreadPoolRespDTO.class));
     }
 
@@ -112,7 +112,6 @@ private void recordOperationLog(ThreadPoolDelReqDTO requestParam) {
     public void alarmEnable(String id, Integer isAlarm) {
         ConfigAllInfo configAllInfo = configInfoMapper.selectById(id);
         configAllInfo.setIsAlarm(isAlarm);
-        // TODO: 是否报警变更, 虽然通知了客户端, 但是并没有在客户端实时生效, 需要考虑一个好的场景思路
         configService.insertOrUpdate(null, false, configAllInfo);
     }
 }

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/WeChatSendMessageHandler.java
Patch:
@@ -45,7 +45,7 @@ public String getType() {
     @Override
     protected RobotMessageActualContent buildMessageActualContent() {
         String weChatAlarmTxtKey = "message/robot/dynamic-thread-pool/wechat-alarm.txt";
-        String weChatConfigTxtKey = "message/robot/dynamic-thread-pool/wechat-alarm.txt";
+        String weChatConfigTxtKey = "message/robot/dynamic-thread-pool/wechat-config.txt";
         RobotMessageActualContent robotMessageActualContent = RobotMessageActualContent.builder()
                 .receiveSeparator("><@")
                 .changeSeparator("  ➲  ")

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/WeChatSendMessageHandler.java
Patch:
@@ -45,7 +45,7 @@ public String getType() {
     @Override
     protected RobotMessageActualContent buildMessageActualContent() {
         String weChatAlarmTxtKey = "message/robot/dynamic-thread-pool/wechat-alarm.txt";
-        String weChatConfigTxtKey = "message/robot/dynamic-thread-pool/wechat-alarm.txt";
+        String weChatConfigTxtKey = "message/robot/dynamic-thread-pool/wechat-config.txt";
         RobotMessageActualContent robotMessageActualContent = RobotMessageActualContent.builder()
                 .receiveSeparator("><@")
                 .changeSeparator("  ➲  ")

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/config/condition/PrometheusMonitorCondition.java
Patch:
@@ -31,7 +31,7 @@ public class PrometheusMonitorCondition implements Condition {
 
     @Override
     public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
-        String collectType = context.getEnvironment().getProperty(BootstrapCoreProperties.PREFIX + "collect-type", "");
+        String collectType = context.getEnvironment().getProperty(BootstrapCoreProperties.PREFIX + ".collect-type", "");
         return StringUtil.isNotEmpty(collectType) && collectType.contains(MonitorTypeEnum.PROMETHEUS.name().toLowerCase()) ? true : false;
     }
 }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/notify/CoreNotifyConfigBuilder.java
Patch:
@@ -56,7 +56,7 @@ public Map<String, List<NotifyConfigDTO>> buildNotify() {
         boolean globalAlarm = bootstrapCoreProperties.getAlarm();
         List<ExecutorProperties> executors = bootstrapCoreProperties.getExecutors();
         if (CollectionUtil.isEmpty(executors)) {
-            log.error("Failed to buildNotify,executors configuration is empty");
+            log.warn("Failed to build notify, executors configuration is empty.");
             return resultMap;
         }
         List<ExecutorProperties> actual = executors.stream().filter(each -> Optional.ofNullable(each.getNotify()).map(notify -> notify.getIsAlarm()).orElse(false)).collect(Collectors.toList());

File: hippo4j-auth/src/main/java/cn/hippo4j/auth/filter/JWTAuthenticationFilter.java
Patch:
@@ -107,7 +107,7 @@ protected void successfulAuthentication(HttpServletRequest request,
     }
 
     @Override
-    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException, ServletException {
+    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException {
         response.setCharacterEncoding("UTF-8");
         response.getWriter().write(JSONUtil.toJsonStr(new ReturnT(-1, "Server Error")));
     }

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/manage/GlobalNotifyAlarmManage.java
Patch:
@@ -17,7 +17,6 @@
 
 package cn.hippo4j.core.executor.manage;
 
-
 import cn.hippo4j.message.service.ThreadPoolNotifyAlarm;
 
 import java.util.Map;

File: hippo4j-message/src/main/java/cn/hippo4j/message/platform/DingSendMessageHandler.java
Patch:
@@ -44,7 +44,6 @@
 
 import static cn.hippo4j.message.platform.DingAlarmConstants.*;
 
-
 /**
  * Send ding notification message.
  */

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/BootstrapCorePropertiesBinderAdapt.java
Patch:
@@ -17,13 +17,13 @@
 
 package cn.hippo4j.core.springboot.starter.refresher;
 
-import cn.hippo4j.common.notify.NotifyPlatformEnum;
-import cn.hippo4j.common.notify.ThreadPoolNotifyAlarm;
 import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
 import cn.hippo4j.core.springboot.starter.config.ExecutorProperties;
 import cn.hippo4j.core.springboot.starter.config.NotifyPlatformProperties;
+import cn.hippo4j.message.enums.NotifyPlatformEnum;
+import cn.hippo4j.message.service.ThreadPoolNotifyAlarm;
 import cn.hutool.core.bean.BeanUtil;
 import cn.hutool.core.bean.copier.CopyOptions;
 import com.google.common.collect.Lists;

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/ZookeeperRefresherHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.core.springboot.starter.refresher;
 
-import cn.hippo4j.common.notify.ThreadPoolNotifyAlarm;
 import cn.hippo4j.core.executor.manage.GlobalNotifyAlarmManage;
+import cn.hippo4j.message.service.ThreadPoolNotifyAlarm;
 import com.google.common.base.Charsets;
 import lombok.extern.slf4j.Slf4j;
 import org.apache.curator.framework.CuratorFramework;

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/event/PlatformsListener.java
Patch:
@@ -18,13 +18,13 @@
 package cn.hippo4j.core.springboot.starter.refresher.event;
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
-import cn.hippo4j.common.notify.HippoBaseSendMessageService;
-import cn.hippo4j.common.notify.NotifyConfigDTO;
 import cn.hippo4j.core.executor.DynamicThreadPoolWrapper;
 import cn.hippo4j.core.executor.manage.GlobalThreadPoolManage;
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
 import cn.hippo4j.core.springboot.starter.config.ExecutorProperties;
 import cn.hippo4j.core.springboot.starter.notify.CoreNotifyConfigBuilder;
+import cn.hippo4j.message.dto.NotifyConfigDTO;
+import cn.hippo4j.message.service.HippoBaseSendMessageService;
 import org.springframework.context.ApplicationListener;
 import org.springframework.core.annotation.Order;
 

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/support/DynamicThreadPoolPostProcessor.java
Patch:
@@ -18,7 +18,6 @@
 package cn.hippo4j.core.springboot.starter.support;
 
 import cn.hippo4j.common.config.ApplicationContextHolder;
-import cn.hippo4j.common.notify.ThreadPoolNotifyAlarm;
 import cn.hippo4j.common.toolkit.StringUtil;
 import cn.hippo4j.core.executor.DynamicThreadPool;
 import cn.hippo4j.core.executor.DynamicThreadPoolExecutor;
@@ -29,6 +28,7 @@
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
 import cn.hippo4j.core.springboot.starter.config.ExecutorProperties;
 import cn.hippo4j.core.toolkit.inet.DynamicThreadPoolAnnotationUtil;
+import cn.hippo4j.message.service.ThreadPoolNotifyAlarm;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.beans.BeansException;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter-adapter/hippo4j-spring-boot-starter-adapter-web/src/main/java/cn/hippo4j/springboot/starter/adapter/web/WebThreadPoolHandlerConfiguration.java
Patch:
@@ -8,7 +8,6 @@
 import org.apache.coyote.UpgradeProtocol;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.boot.autoconfigure.condition.SearchStrategy;
 import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
 import org.springframework.context.annotation.Bean;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter-adapter/hippo4j-spring-boot-starter-adapter-web/src/main/java/cn/hippo4j/springboot/starter/adapter/web/WebAdapterAutoConfiguration.java
Patch:
@@ -22,7 +22,6 @@
 import cn.hippo4j.core.executor.state.ThreadPoolRunStateHandler;
 import cn.hippo4j.core.toolkit.inet.InetUtils;
 import lombok.RequiredArgsConstructor;
-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;
 import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
@@ -34,7 +33,8 @@
  */
 @Configuration
 @Import({WebThreadPoolHandlerConfiguration.EmbeddedTomcat.class,
-        WebThreadPoolHandlerConfiguration.EmbeddedJetty.class})
+        WebThreadPoolHandlerConfiguration.EmbeddedJetty.class,
+        WebThreadPoolHandlerConfiguration.EmbeddedUndertow.class})
 @RequiredArgsConstructor
 public class WebAdapterAutoConfiguration {
 

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/config/DynamicThreadPoolAutoConfiguration.java
Patch:
@@ -166,7 +166,7 @@ public WebThreadPoolController webThreadPoolController(WebThreadPoolHandlerChoos
 
     @Bean
     @SuppressWarnings("all")
-    public ThreadPoolAdapterRegister threadPoolAdapterRegister(HttpAgent httpAgent, InetUtils hippo4JInetUtils, ThreadPoolAdapterScheduler threadPoolAdapterScheduler) {
-        return new ThreadPoolAdapterRegister(httpAgent, properties, environment, hippo4JInetUtils, threadPoolAdapterScheduler);
+    public ThreadPoolAdapterRegister threadPoolAdapterRegister(HttpAgent httpAgent, InetUtils hippo4JInetUtils) {
+        return new ThreadPoolAdapterRegister(httpAgent, properties, environment, hippo4JInetUtils);
     }
 }

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/config/DynamicThreadPoolAutoConfiguration.java
Patch:
@@ -166,7 +166,7 @@ public WebThreadPoolController webThreadPoolController(WebThreadPoolHandlerChoos
 
     @Bean
     @SuppressWarnings("all")
-    public ThreadPoolAdapterRegister threadPoolAdapterRegister(HttpAgent httpAgent, InetUtils hippo4JInetUtils, ThreadPoolAdapterScheduler threadPoolAdapterScheduler) {
-        return new ThreadPoolAdapterRegister(httpAgent, properties, environment, hippo4JInetUtils, threadPoolAdapterScheduler);
+    public ThreadPoolAdapterRegister threadPoolAdapterRegister(HttpAgent httpAgent, InetUtils hippo4JInetUtils) {
+        return new ThreadPoolAdapterRegister(httpAgent, properties, environment, hippo4JInetUtils);
     }
 }

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/HystrixThreadPoolAdapter.java
Patch:
@@ -81,7 +81,7 @@ public ThreadPoolAdapterState getThreadPoolState(String identify) {
     @Override
     public List<ThreadPoolAdapterState> getThreadPoolStates() {
         List<ThreadPoolAdapterState> threadPoolAdapterStates = new ArrayList<>();
-        HYSTRIX_CONSUME_EXECUTOR.forEach((kel, val) -> threadPoolAdapterStates.add(getThreadPoolState(String.valueOf(val))));
+        HYSTRIX_CONSUME_EXECUTOR.forEach((kel, val) -> threadPoolAdapterStates.add(getThreadPoolState(kel)));
         return threadPoolAdapterStates;
     }
 

File: hippo4j-adapter/hippo4j-adapter-base/src/main/java/cn/hippo4j/adapter/base/ThreadPoolAdapterScheduler.java
Patch:
@@ -32,7 +32,6 @@ public class ThreadPoolAdapterScheduler {
 
     private final ScheduledExecutorService scheduler;
 
-
     public ThreadPoolAdapterScheduler() {
         scheduler = new ScheduledThreadPoolExecutor(2,
                 new ThreadFactoryBuilder()
@@ -45,7 +44,7 @@ public ScheduledExecutorService getScheduler() {
         return scheduler;
     }
 
-    public int getTaskIntervalSeconds(){
+    public int getTaskIntervalSeconds() {
         return TASK_INTERVAL_SECONDS;
     }
 }

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/HystrixThreadPoolAdapter.java
Patch:
@@ -108,7 +108,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
     public void onApplicationEvent(ApplicationStartedEvent event) {
         ScheduledExecutorService scheduler = threadPoolAdapterScheduler.getScheduler();
         int taskIntervalSeconds = threadPoolAdapterScheduler.getTaskIntervalSeconds();
-        HystrixThreadPoolRefreshTask hystrixThreadPoolRefreshTask = new HystrixThreadPoolRefreshTask(scheduler,taskIntervalSeconds);
+        HystrixThreadPoolRefreshTask hystrixThreadPoolRefreshTask = new HystrixThreadPoolRefreshTask(scheduler, taskIntervalSeconds);
         scheduler.schedule(hystrixThreadPoolRefreshTask, taskIntervalSeconds, TimeUnit.SECONDS);
     }
 

File: hippo4j-adapter/hippo4j-adapter-base/src/main/java/cn/hippo4j/adapter/base/ThreadPoolAdapterScheduler.java
Patch:
@@ -32,7 +32,6 @@ public class ThreadPoolAdapterScheduler {
 
     private final ScheduledExecutorService scheduler;
 
-
     public ThreadPoolAdapterScheduler() {
         scheduler = new ScheduledThreadPoolExecutor(2,
                 new ThreadFactoryBuilder()
@@ -45,7 +44,7 @@ public ScheduledExecutorService getScheduler() {
         return scheduler;
     }
 
-    public int getTaskIntervalSeconds(){
+    public int getTaskIntervalSeconds() {
         return TASK_INTERVAL_SECONDS;
     }
 }

File: hippo4j-adapter/hippo4j-adapter-hystrix/src/main/java/cn/hippo4j/adapter/hystrix/HystrixThreadPoolAdapter.java
Patch:
@@ -108,7 +108,7 @@ public boolean updateThreadPool(ThreadPoolAdapterParameter threadPoolAdapterPara
     public void onApplicationEvent(ApplicationStartedEvent event) {
         ScheduledExecutorService scheduler = threadPoolAdapterScheduler.getScheduler();
         int taskIntervalSeconds = threadPoolAdapterScheduler.getTaskIntervalSeconds();
-        HystrixThreadPoolRefreshTask hystrixThreadPoolRefreshTask = new HystrixThreadPoolRefreshTask(scheduler,taskIntervalSeconds);
+        HystrixThreadPoolRefreshTask hystrixThreadPoolRefreshTask = new HystrixThreadPoolRefreshTask(scheduler, taskIntervalSeconds);
         scheduler.schedule(hystrixThreadPoolRefreshTask, taskIntervalSeconds, TimeUnit.SECONDS);
     }
 

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/DiscoveryClient.java
Patch:
@@ -143,8 +143,7 @@ boolean renew() {
                 boolean success = register();
                 // TODO Abstract server registration logic
                 ThreadPoolAdapterRegister adapterRegister = ApplicationContextHolder.getBean(ThreadPoolAdapterRegister.class);
-                Map<String, ThreadPoolAdapter> threadPoolAdapterMap = ApplicationContextHolder.getBeansOfType(ThreadPoolAdapter.class);
-                adapterRegister.register(threadPoolAdapterMap);
+                adapterRegister.register();
                 if (success) {
                     instanceInfo.unsetIsDirty(timestamp);
                 }

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/DiscoveryClient.java
Patch:
@@ -143,8 +143,7 @@ boolean renew() {
                 boolean success = register();
                 // TODO Abstract server registration logic
                 ThreadPoolAdapterRegister adapterRegister = ApplicationContextHolder.getBean(ThreadPoolAdapterRegister.class);
-                Map<String, ThreadPoolAdapter> threadPoolAdapterMap = ApplicationContextHolder.getBeansOfType(ThreadPoolAdapter.class);
-                adapterRegister.register(threadPoolAdapterMap);
+                adapterRegister.register();
                 if (success) {
                     instanceInfo.unsetIsDirty(timestamp);
                 }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/NacosRefresherHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.core.springboot.starter.refresher;
 
-import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
+import com.alibaba.nacos.api.annotation.NacosInjected;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
 import lombok.extern.slf4j.Slf4j;
@@ -35,11 +35,11 @@
 @Slf4j
 public class NacosRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh {
 
-    private final ConfigService configService;
+    @NacosInjected
+    private ConfigService configService;
 
     public NacosRefresherHandler(BootstrapCoreProperties bootstrapCoreProperties) {
         super(bootstrapCoreProperties);
-        configService = ApplicationContextHolder.getBean(ConfigService.class);
     }
 
     @Override

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/NacosRefresherHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.core.springboot.starter.refresher;
 
-import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
+import com.alibaba.nacos.api.annotation.NacosInjected;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
 import lombok.extern.slf4j.Slf4j;
@@ -35,11 +35,11 @@
 @Slf4j
 public class NacosRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh {
 
-    private final ConfigService configService;
+    @NacosInjected
+    private ConfigService configService;
 
     public NacosRefresherHandler(BootstrapCoreProperties bootstrapCoreProperties) {
         super(bootstrapCoreProperties);
-        configService = ApplicationContextHolder.getBean(ConfigService.class);
     }
 
     @Override

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/NacosRefresherHandler.java
Patch:
@@ -17,8 +17,8 @@
 
 package cn.hippo4j.core.springboot.starter.refresher;
 
-import cn.hippo4j.common.config.ApplicationContextHolder;
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
+import com.alibaba.nacos.api.annotation.NacosInjected;
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
 import lombok.extern.slf4j.Slf4j;
@@ -35,11 +35,11 @@
 @Slf4j
 public class NacosRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh {
 
-    private final ConfigService configService;
+    @NacosInjected
+    private ConfigService configService;
 
     public NacosRefresherHandler(BootstrapCoreProperties bootstrapCoreProperties) {
         super(bootstrapCoreProperties);
-        configService = ApplicationContextHolder.getBean(ConfigService.class);
     }
 
     @Override

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/QueueTypeEnum.java
Patch:
@@ -129,7 +129,7 @@ public static BlockingQueue createBlockingQueue(int type, Integer capacity) {
         } else if (Objects.equals(type, PRIORITY_BLOCKING_QUEUE.type)) {
             blockingQueue = new PriorityBlockingQueue(capacity);
         } else if (Objects.equals(type, RESIZABLE_LINKED_BLOCKING_QUEUE.type)) {
-            blockingQueue = new ResizableCapacityLinkedBlockIngQueue(capacity);
+            blockingQueue = new ResizableCapacityLinkedBlockingQueue(capacity);
         }
         Collection<CustomBlockingQueue> customBlockingQueues = DynamicThreadPoolServiceLoader
                 .getSingletonServiceInstances(CustomBlockingQueue.class);

File: hippo4j-core/src/main/java/cn/hippo4j/core/executor/support/ResizableCapacityLinkedBlockingQueue.java
Patch:
@@ -30,9 +30,9 @@
  * @date 2021/6/20 14:24
  */
 @Slf4j
-public class ResizableCapacityLinkedBlockIngQueue<E> extends LinkedBlockingQueue<E> {
+public class ResizableCapacityLinkedBlockingQueue<E> extends LinkedBlockingQueue<E> {
 
-    public ResizableCapacityLinkedBlockIngQueue(int capacity) {
+    public ResizableCapacityLinkedBlockingQueue(int capacity) {
         super(capacity);
     }
 

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/event/ExecutorsListener.java
Patch:
@@ -24,7 +24,7 @@
 import cn.hippo4j.core.executor.support.AbstractDynamicExecutorSupport;
 import cn.hippo4j.core.executor.support.QueueTypeEnum;
 import cn.hippo4j.core.executor.support.RejectedTypeEnum;
-import cn.hippo4j.core.executor.support.ResizableCapacityLinkedBlockIngQueue;
+import cn.hippo4j.core.executor.support.ResizableCapacityLinkedBlockingQueue;
 import cn.hippo4j.core.proxy.RejectedProxyUtil;
 import cn.hippo4j.core.springboot.starter.config.BootstrapCoreProperties;
 import cn.hippo4j.core.springboot.starter.config.ExecutorProperties;
@@ -188,8 +188,8 @@ private void dynamicRefreshPool(String threadPoolId, ExecutorProperties properti
         }
         if (!Objects.equals(beforeProperties.getQueueCapacity(), properties.getQueueCapacity())
                 && Objects.equals(QueueTypeEnum.RESIZABLE_LINKED_BLOCKING_QUEUE.name, executor.getQueue().getClass().getSimpleName())) {
-            if (executor.getQueue() instanceof ResizableCapacityLinkedBlockIngQueue) {
-                ResizableCapacityLinkedBlockIngQueue<?> queue = (ResizableCapacityLinkedBlockIngQueue<?>) executor.getQueue();
+            if (executor.getQueue() instanceof ResizableCapacityLinkedBlockingQueue) {
+                ResizableCapacityLinkedBlockingQueue<?> queue = (ResizableCapacityLinkedBlockingQueue<?>) executor.getQueue();
                 queue.setCapacity(properties.getQueueCapacity());
             } else {
                 log.warn("The queue length cannot be modified. Queue type mismatch. Current queue type :: {}", executor.getQueue().getClass().getSimpleName());

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/ServerThreadPoolDynamicRefresh.java
Patch:
@@ -28,7 +28,7 @@
 import cn.hippo4j.core.executor.support.AbstractDynamicExecutorSupport;
 import cn.hippo4j.core.executor.support.QueueTypeEnum;
 import cn.hippo4j.core.executor.support.RejectedTypeEnum;
-import cn.hippo4j.core.executor.support.ResizableCapacityLinkedBlockIngQueue;
+import cn.hippo4j.core.executor.support.ResizableCapacityLinkedBlockingQueue;
 import cn.hippo4j.core.proxy.RejectedProxyUtil;
 import cn.hippo4j.common.api.ThreadPoolDynamicRefresh;
 import lombok.AllArgsConstructor;
@@ -148,8 +148,8 @@ public void changePoolInfo(ThreadPoolExecutor executor, ThreadPoolParameter para
         }
         if (parameter.getCapacity() != null
                 && Objects.equals(QueueTypeEnum.RESIZABLE_LINKED_BLOCKING_QUEUE.type, parameter.getQueueType())) {
-            if (executor.getQueue() instanceof ResizableCapacityLinkedBlockIngQueue) {
-                ResizableCapacityLinkedBlockIngQueue queue = (ResizableCapacityLinkedBlockIngQueue) executor.getQueue();
+            if (executor.getQueue() instanceof ResizableCapacityLinkedBlockingQueue) {
+                ResizableCapacityLinkedBlockingQueue queue = (ResizableCapacityLinkedBlockingQueue) executor.getQueue();
                 queue.setCapacity(parameter.getCapacity());
             } else {
                 log.warn("The queue length cannot be modified. Queue type mismatch. Current queue type :: {}", executor.getQueue().getClass().getSimpleName());

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/ThreadPoolParameterInfo.java
Patch:
@@ -113,11 +113,11 @@ public class ThreadPoolParameterInfo implements ThreadPoolParameter, Serializabl
      */
     private Integer allowCoreThreadTimeOut;
 
-    public Integer getCorePoolSize() {
+    public Integer corePoolSizeAdapt() {
         return this.corePoolSize == null ? this.coreSize : this.corePoolSize;
     }
 
-    public Integer getMaximumPoolSize() {
+    public Integer maximumPoolSizeAdapt() {
         return this.maximumPoolSize == null ? this.maxSize : this.maximumPoolSize;
     }
 }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/config/DynamicThreadPoolCoreAutoConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public class DynamicThreadPoolCoreAutoConfiguration {
 
     private static final String NACOS_CONFIG_MANAGER_KEY = "com.alibaba.cloud.nacos.NacosConfigManager";
 
-    private static final String NACOS_CONFIG_KEY = "com.alibaba.nacos.api.config";
+    private static final String NACOS_CONFIG_KEY = "com.alibaba.nacos.api.config.ConfigService";
 
     private static final String APOLLO_CONFIG_KEY = "com.ctrip.framework.apollo.ConfigService";
 

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/config/DynamicThreadPoolCoreAutoConfiguration.java
Patch:
@@ -72,7 +72,7 @@ public class DynamicThreadPoolCoreAutoConfiguration {
 
     private static final String NACOS_CONFIG_MANAGER_KEY = "com.alibaba.cloud.nacos.NacosConfigManager";
 
-    private static final String NACOS_CONFIG_KEY = "com.alibaba.nacos.api.config";
+    private static final String NACOS_CONFIG_KEY = "com.alibaba.nacos.api.config.ConfigService";
 
     private static final String APOLLO_CONFIG_KEY = "com.ctrip.framework.apollo.ConfigService";
 

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/ThreadPoolParameterInfo.java
Patch:
@@ -118,6 +118,6 @@ public Integer getCorePoolSize() {
     }
 
     public Integer getMaximumPoolSize() {
-        return this.maximumPoolSize == null ? this.maxSize : this.corePoolSize;
+        return this.maximumPoolSize == null ? this.maxSize : this.maximumPoolSize;
     }
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/model/ThreadPoolParameterInfo.java
Patch:
@@ -114,10 +114,10 @@ public class ThreadPoolParameterInfo implements ThreadPoolParameter, Serializabl
     private Integer allowCoreThreadTimeOut;
 
     public Integer getCorePoolSize() {
-        return this.corePoolSize == null ? this.coreSize : null;
+        return this.corePoolSize == null ? this.coreSize : this.corePoolSize;
     }
 
     public Integer getMaximumPoolSize() {
-        return this.maximumPoolSize == null ? this.maxSize : null;
+        return this.maximumPoolSize == null ? this.maxSize : this.corePoolSize;
     }
 }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/springboot/starter/refresher/event/PlatformsListener.java
Patch:
@@ -46,7 +46,7 @@ public void onApplicationEvent(Hippo4jCoreDynamicRefreshEvent threadPoolDynamicR
         for (ExecutorProperties executor : executors) {
             String threadPoolId = executor.getThreadPoolId();
             DynamicThreadPoolWrapper wrapper = GlobalThreadPoolManage.getExecutorService(threadPoolId);
-            if (!wrapper.isInitFlag()) {
+            if (wrapper != null && !wrapper.isInitFlag()) {
                 HippoBaseSendMessageService sendMessageService = ApplicationContextHolder.getBean(HippoBaseSendMessageService.class);
                 CoreNotifyConfigBuilder configBuilder = ApplicationContextHolder.getBean(CoreNotifyConfigBuilder.class);
                 Map<String, List<NotifyConfigDTO>> notifyConfig = configBuilder.buildSingleNotifyConfig(executor);

File: hippo4j-adapter/hippo4j-adapter-dubbo/src/main/java/cn/hippo4j/adapter/dubbo/DubboThreadPoolAdapter.java
Patch:
@@ -58,7 +58,6 @@ public ThreadPoolAdapterState getThreadPoolState(String identify) {
             return threadPoolAdapterState;
         }
         threadPoolAdapterState.setThreadPoolKey(identify);
-        threadPoolAdapterState.setActive(executor.getActiveCount() + "");
         threadPoolAdapterState.setCoreSize(executor.getCorePoolSize());
         threadPoolAdapterState.setMaximumSize(executor.getMaximumPoolSize());
         return threadPoolAdapterState;

File: hippo4j-adapter/hippo4j-adapter-dubbo/src/main/java/cn/hippo4j/adapter/dubbo/DubboThreadPoolAdapter.java
Patch:
@@ -58,7 +58,6 @@ public ThreadPoolAdapterState getThreadPoolState(String identify) {
             return threadPoolAdapterState;
         }
         threadPoolAdapterState.setThreadPoolKey(identify);
-        threadPoolAdapterState.setActive(executor.getActiveCount() + "");
         threadPoolAdapterState.setCoreSize(executor.getCorePoolSize());
         threadPoolAdapterState.setMaximumSize(executor.getMaximumPoolSize());
         return threadPoolAdapterState;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/controller/ThreadPoolAdapterController.java
Patch:
@@ -56,7 +56,7 @@ public Result<ThreadPoolAdapterState> getAdapterThreadPool(ThreadPoolAdapterPara
             ThreadPoolAdapterState threadPoolState = each.getThreadPoolState(requestParameter.getThreadPoolKey());
             String active = environment.getProperty("spring.profiles.active", "UNKNOWN");
             threadPoolState.setActive(active.toUpperCase());
-            String clientAddress = CloudCommonIdUtil.getDefaultInstanceId(environment, hippo4JInetUtils);
+            String clientAddress = CloudCommonIdUtil.getClientIpPort(environment, hippo4JInetUtils);
             threadPoolState.setClientAddress(clientAddress);
             threadPoolState.setIdentify(IdentifyUtil.getIdentify());
             return threadPoolState;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/springboot/starter/core/ThreadPoolAdapterRegister.java
Patch:
@@ -74,7 +74,7 @@ public void register() {
             String tenantItemKey = properties.getNamespace() + IDENTIFY_SLICER_SYMBOL + properties.getItemId();
             cacheConfig.setTenantItemKey(tenantItemKey);
             cacheConfig.setClientIdentify(IdentifyUtil.getIdentify());
-            String clientAddress = CloudCommonIdUtil.getDefaultInstanceId(environment, hippo4JInetUtils);
+            String clientAddress = CloudCommonIdUtil.getClientIpPort(environment, hippo4JInetUtils);
             cacheConfig.setClientAddress(clientAddress);
             cacheConfig.setThreadPoolAdapterStates(threadPoolStates);
             cacheConfigList.add(cacheConfig);

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/AbstractCoreThreadPoolDynamicRefresh.java
Patch:
@@ -116,7 +116,7 @@ private void refreshWebExecutor(BootstrapCoreProperties bindableCoreProperties)
                 PoolParameter beforeParameter = webThreadPoolService.getWebThreadPoolParameter();
                 if (!Objects.equals(beforeParameter.getCoreSize(), nowParameter.getCoreSize())
                         || !Objects.equals(beforeParameter.getMaxSize(), nowParameter.getMaxSize())
-                        || !Objects.equals(beforeParameter.getMaxSize(), nowParameter.getMaxSize())) {
+                        || !Objects.equals(beforeParameter.getKeepAliveTime(), nowParameter.getKeepAliveTime())) {
                     webThreadPoolService.updateWebThreadPool(nowParameter);
                 }
             }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/AbstractCoreThreadPoolDynamicRefresh.java
Patch:
@@ -116,7 +116,7 @@ private void refreshWebExecutor(BootstrapCoreProperties bindableCoreProperties)
                 PoolParameter beforeParameter = webThreadPoolService.getWebThreadPoolParameter();
                 if (!Objects.equals(beforeParameter.getCoreSize(), nowParameter.getCoreSize())
                         || !Objects.equals(beforeParameter.getMaxSize(), nowParameter.getMaxSize())
-                        || !Objects.equals(beforeParameter.getMaxSize(), nowParameter.getMaxSize())) {
+                        || !Objects.equals(beforeParameter.getKeepAliveTime(), nowParameter.getKeepAliveTime())) {
                     webThreadPoolService.updateWebThreadPool(nowParameter);
                 }
             }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/notify/CoreNotifyConfigBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import cn.hippo4j.common.api.NotifyConfigBuilder;
 import cn.hippo4j.common.notify.AlarmControlHandler;
 import cn.hippo4j.common.notify.NotifyConfigDTO;
+import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.core.starter.config.BootstrapCoreProperties;
 import cn.hippo4j.core.starter.config.ExecutorProperties;
 import cn.hippo4j.core.starter.config.NotifyPlatformProperties;
@@ -100,14 +101,14 @@ private String buildReceive(ExecutorProperties executor, NotifyPlatformPropertie
             if (StrUtil.isBlank(receive)) {
                 receive = bootstrapCoreProperties.getReceive();
                 if (StrUtil.isBlank(receive)) {
-                    Map<String, String> receives = executor.getNotify().getReceives();
+                    Map<String, String> receives = executor.receives();
                     receive = receives.get(platformProperties.getPlatform());
                 }
             }
         } else {
             receive = bootstrapCoreProperties.getReceive();
             if (StrUtil.isBlank(receive)) {
-                Map<String, String> receives = executor.getNotify().getReceives();
+                Map<String, String> receives = executor.receives();
                 receive = receives.get(platformProperties.getPlatform());
             }
         }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/AbstractCoreThreadPoolDynamicRefresh.java
Patch:
@@ -89,7 +89,7 @@ public void registerNotifyAlarmManage() {
             );
 
             threadPoolNotifyAlarm.setInterval(executorProperties.getNotify().getInterval());
-            threadPoolNotifyAlarm.setReceives(executorProperties.getNotify().getReceives());
+            threadPoolNotifyAlarm.setReceives(executorProperties.receives());
             GlobalNotifyAlarmManage.put(executorProperties.getThreadPoolId(), threadPoolNotifyAlarm);
         });
     }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/config/ExecutorProperties.java
Patch:
@@ -6,6 +6,7 @@
 import lombok.experimental.Accessors;
 
 import java.util.Map;
+import java.util.Objects;
 
 /**
  * Executor properties.
@@ -73,7 +74,7 @@ public class ExecutorProperties {
     private ThreadPoolNotifyAlarm notify;
 
     public Map<String, String> receives() {
-        return this.notify.getReceives() == null ? Maps.newHashMap() : this.notify.getReceives();
+        return Objects.isNull(this.notify) || this.notify.getReceives() == null ? Maps.newHashMap() : this.notify.getReceives();
     }
 
 }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/notify/CoreNotifyConfigBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import cn.hippo4j.common.api.NotifyConfigBuilder;
 import cn.hippo4j.common.notify.AlarmControlHandler;
 import cn.hippo4j.common.notify.NotifyConfigDTO;
+import cn.hippo4j.common.toolkit.CollectionUtil;
 import cn.hippo4j.core.starter.config.BootstrapCoreProperties;
 import cn.hippo4j.core.starter.config.ExecutorProperties;
 import cn.hippo4j.core.starter.config.NotifyPlatformProperties;
@@ -100,14 +101,14 @@ private String buildReceive(ExecutorProperties executor, NotifyPlatformPropertie
             if (StrUtil.isBlank(receive)) {
                 receive = bootstrapCoreProperties.getReceive();
                 if (StrUtil.isBlank(receive)) {
-                    Map<String, String> receives = executor.getNotify().getReceives();
+                    Map<String, String> receives = executor.receives();
                     receive = receives.get(platformProperties.getPlatform());
                 }
             }
         } else {
             receive = bootstrapCoreProperties.getReceive();
             if (StrUtil.isBlank(receive)) {
-                Map<String, String> receives = executor.getNotify().getReceives();
+                Map<String, String> receives = executor.receives();
                 receive = receives.get(platformProperties.getPlatform());
             }
         }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/AbstractCoreThreadPoolDynamicRefresh.java
Patch:
@@ -89,7 +89,7 @@ public void registerNotifyAlarmManage() {
             );
 
             threadPoolNotifyAlarm.setInterval(executorProperties.getNotify().getInterval());
-            threadPoolNotifyAlarm.setReceives(executorProperties.getNotify().getReceives());
+            threadPoolNotifyAlarm.setReceives(executorProperties.receives());
             GlobalNotifyAlarmManage.put(executorProperties.getThreadPoolId(), threadPoolNotifyAlarm);
         });
     }

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/AbstractCoreThreadPoolDynamicRefresh.java
Patch:
@@ -13,6 +13,8 @@
 import cn.hippo4j.core.starter.support.GlobalCoreThreadPoolManage;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
+
+import org.springframework.beans.factory.InitializingBean;
 import org.springframework.boot.context.properties.bind.Bindable;
 import org.springframework.boot.context.properties.bind.Binder;
 import org.springframework.boot.context.properties.source.ConfigurationPropertySource;
@@ -38,7 +40,7 @@
  */
 @Slf4j
 @AllArgsConstructor
-public abstract class AbstractCoreThreadPoolDynamicRefresh implements ThreadPoolDynamicRefresh {
+public abstract class AbstractCoreThreadPoolDynamicRefresh implements ThreadPoolDynamicRefresh, InitializingBean {
 
     private final ThreadPoolNotifyAlarmHandler threadPoolNotifyAlarmHandler;
 

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/ApolloRefresherHandler.java
Patch:
@@ -8,7 +8,6 @@
 import com.ctrip.framework.apollo.ConfigService;
 import com.ctrip.framework.apollo.core.enums.ConfigFileFormat;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.InitializingBean;
 import org.springframework.beans.factory.annotation.Value;
 
 /**
@@ -17,7 +16,7 @@
  * @description:
  */
 @Slf4j
-public class ApolloRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh implements InitializingBean {
+public class ApolloRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh {
 
     private static final String APOLLO_PROPERTY = "${spring.dynamic.thread-pool.apollo.namespace:application}";
 

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/NacosCloudRefresherHandler.java
Patch:
@@ -6,7 +6,6 @@
 import com.alibaba.cloud.nacos.NacosConfigManager;
 import com.alibaba.nacos.api.config.listener.Listener;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.InitializingBean;
 
 import java.util.Map;
 import java.util.concurrent.Executor;
@@ -18,7 +17,7 @@
  * @date 2022/2/26 11:21
  */
 @Slf4j
-public class NacosCloudRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh implements InitializingBean {
+public class NacosCloudRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh {
 
     private final NacosConfigManager nacosConfigManager;
 

File: hippo4j-spring-boot/hippo4j-core-spring-boot-starter/src/main/java/cn/hippo4j/core/starter/refresher/NacosRefresherHandler.java
Patch:
@@ -6,7 +6,6 @@
 import com.alibaba.nacos.api.config.ConfigService;
 import com.alibaba.nacos.api.config.listener.Listener;
 import lombok.extern.slf4j.Slf4j;
-import org.springframework.beans.factory.InitializingBean;
 
 import java.util.Map;
 import java.util.concurrent.Executor;
@@ -18,7 +17,7 @@
  * @date 2022/2/26 00:10
  */
 @Slf4j
-public class NacosRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh implements InitializingBean {
+public class NacosRefresherHandler extends AbstractCoreThreadPoolDynamicRefresh {
 
     private final ConfigService configService;
 

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/handler/ThreadPoolStatusHandler.java
Patch:
@@ -35,7 +35,7 @@ public static String getThreadPoolState(ThreadPoolExecutor executor) {
         if (EXCEPTION_FLAG.get()) {
             try {
                 Method runStateLessThan = ReflectUtil.getMethodByName(ThreadPoolExecutor.class, "runStateLessThan");
-                ReflectUtil.setAccessible(runStateLessThan);
+                cn.hippo4j.common.toolkit.ReflectUtil.setAccessible(runStateLessThan);
 
                 AtomicInteger ctl = (AtomicInteger) ReflectUtil.getFieldValue(executor, "ctl");
                 int shutdown = (int) ReflectUtil.getFieldValue(executor, "SHUTDOWN");
@@ -45,7 +45,7 @@ public static String getThreadPoolState(ThreadPoolExecutor executor) {
                 }
 
                 Method runStateAtLeast = ReflectUtil.getMethodByName(ThreadPoolExecutor.class, "runStateAtLeast");
-                ReflectUtil.setAccessible(runStateAtLeast);
+                cn.hippo4j.common.toolkit.ReflectUtil.setAccessible(runStateAtLeast);
                 int terminated = (int) ReflectUtil.getFieldValue(executor, "TERMINATED");
                 String resultStatus = ReflectUtil.invoke(executor, runStateAtLeast, ctl.get(), terminated) ? TERMINATED : SHUTTING_DOWN;
                 return resultStatus;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/common/CommonDynamicThreadPool.java
Patch:
@@ -20,7 +20,6 @@ public static DynamicThreadPoolExecutor getInstance(String threadPoolId) {
                 .threadFactory(threadPoolId)
                 .poolThreadSize(2, 4)
                 .keepAliveTime(60L, TimeUnit.SECONDS)
-                .alarmConfig(1, 80, 80)
                 .workQueue(QueueTypeEnum.RESIZABLE_LINKED_BLOCKING_QUEUE, 1024)
                 .build();
         return poolExecutor;

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/config/DiscoveryConfiguration.java
Patch:
@@ -39,7 +39,7 @@ public class DiscoveryConfiguration {
     public InstanceInfo instanceConfig() {
         String namespace = properties.getNamespace();
         String itemId = properties.getItemId();
-        String port = environment.getProperty("server.port");
+        String port = environment.getProperty("server.port", "8080");
         String applicationName = environment.getProperty("spring.dynamic.thread-pool.item-id");
         String active = environment.getProperty("spring.profiles.active", "UNKNOWN");
 

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/core/DynamicThreadPoolPostProcessor.java
Patch:
@@ -138,7 +138,6 @@ protected ThreadPoolExecutor fillPoolAndRegister(DynamicThreadPoolWrapper dynami
                             .poolThreadSize(ppi.getCoreSize(), ppi.getMaxSize())
                             .keepAliveTime(ppi.getKeepAliveTime(), TimeUnit.SECONDS)
                             .rejected(RejectedTypeEnum.createPolicy(ppi.getRejectedType()))
-                            .alarmConfig(ppi.getIsAlarm(), ppi.getCapacityAlarm(), ppi.getLivenessAlarm())
                             .allowCoreThreadTimeOut(EnableEnum.getBool(ppi.getAllowCoreThreadTimeOut()))
                             .build();
 

File: hippo4j-spring-boot/hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/toolkit/IdentifyUtil.java
Patch:
@@ -37,7 +37,7 @@ public static synchronized String generate(ConfigurableEnvironment environment,
             return identify;
         }
         String ip = hippo4JInetUtils.findFirstNonLoopbackHostInfo().getIpAddress();
-        String port = environment.getProperty("server.port");
+        String port = environment.getProperty("server.port", "8080");
         String identification = StrUtil.builder(ip,
                 ":",
                 port,

File: hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/toolkit/IdentifyUtil.java
Patch:
@@ -37,7 +37,7 @@ public static synchronized String generate(ConfigurableEnvironment environment,
             return identify;
         }
         String ip = hippo4JInetUtils.findFirstNonLoopbackHostInfo().getIpAddress();
-        String port = environment.getProperty("server.port");
+        String port = environment.getProperty("server.port", "8080");
         String identification = StrUtil.builder(ip,
                 ":",
                 port,

File: hippo4j-auth/src/main/java/cn/hippo4j/auth/model/biz/user/UserQueryPageReqDTO.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
 import lombok.Data;
+import lombok.experimental.Accessors;
 
 /**
  * User query page.
@@ -10,6 +11,7 @@
  * @date 2021/10/30 21:47
  */
 @Data
+@Accessors(chain = true)
 public class UserQueryPageReqDTO extends Page {
 
     /**

File: hippo4j-common/src/main/java/cn/hippo4j/common/monitor/AbstractMessage.java
Patch:
@@ -13,7 +13,7 @@
  */
 @Data
 @NoArgsConstructor
-public abstract class AbstractMessage implements Message {
+public abstract class AbstractMessage<T extends Message> implements Message {
 
     /**
      * groupKey: tenant + item + tpId + identify
@@ -28,6 +28,6 @@ public abstract class AbstractMessage implements Message {
     /**
      * message
      */
-    private List<Message> messages;
+    private List<T> messages;
 
 }

File: hippo4j-common/src/main/java/cn/hippo4j/common/monitor/Message.java
Patch:
@@ -9,7 +9,7 @@
  * @author chen.ma
  * @date 2021/12/6 20:16
  */
-public interface Message extends Serializable {
+public interface Message<T extends Message> extends Serializable {
 
     /**
      * Get groupKey.
@@ -30,6 +30,6 @@ public interface Message extends Serializable {
      *
      * @return
      */
-    List<Message> getMessages();
+    List<T> getMessages();
 
 }

File: hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/handler/ThreadPoolRunStateHandler.java
Patch:
@@ -39,6 +39,8 @@ protected PoolRunStateInfo supplement(PoolRunStateInfo poolRunStateInfo) {
                 ByteConvertUtil.getPrintSize(runtimeInfo.getMaxMemory())
         ).toString();
 
+        poolRunStateInfo.setCurrentLoad(poolRunStateInfo.getCurrentLoad() + "%");
+        poolRunStateInfo.setPeakLoad(poolRunStateInfo.getPeakLoad() + "%");
         poolRunStateInfo.setHost(INET_ADDRESS.getHostAddress());
         poolRunStateInfo.setMemoryProportion(memoryProportion);
         poolRunStateInfo.setFreeMemory(ByteConvertUtil.getPrintSize(runtimeInfo.getFreeMemory()));

File: hippo4j-spring-boot-starter/src/main/java/cn/hippo4j/starter/monitor/HttpMvcSender.java
Patch:
@@ -2,6 +2,7 @@
 
 import cn.hippo4j.common.monitor.Message;
 import cn.hippo4j.common.monitor.MessageWrapper;
+import cn.hippo4j.common.toolkit.MessageConvert;
 import cn.hippo4j.starter.remote.HttpAgent;
 import lombok.AllArgsConstructor;
 import lombok.extern.slf4j.Slf4j;
@@ -23,8 +24,7 @@ public class HttpMvcSender implements MessageSender {
     @Override
     public void send(Message message) {
         try {
-            MessageWrapper messageWrapper = new MessageWrapper(message);
-            messageWrapper.setMessageType(message.getMessageType());
+            MessageWrapper messageWrapper = MessageConvert.convert(message);
             httpAgent.httpPost(MONITOR_PATH, messageWrapper);
         } catch (Throwable ex) {
             log.error("Failed to push dynamic thread pool runtime data.", ex);

File: hippo4j-spring-boot-starter/src/main/java/com/github/dynamic/threadpool/starter/core/DiscoveryClient.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.dynamic.threadpool.starter.core;
 
+import cn.hutool.core.util.StrUtil;
 import com.github.dynamic.threadpool.common.constant.Constants;
 import com.github.dynamic.threadpool.common.model.InstanceInfo;
 import com.github.dynamic.threadpool.common.web.base.Result;
@@ -103,7 +104,7 @@ boolean renew() {
 
             renewResult = httpAgent.httpPostByDiscovery(Constants.BASE_PATH + "/apps/renew", instanceRenew);
 
-            if (renewResult.getCode() == ErrorCodeEnum.NOT_FOUND.getCode()) {
+            if (StrUtil.equals(ErrorCodeEnum.NOT_FOUND.getCode(), renewResult.getCode())) {
                 long timestamp = instanceInfo.setIsDirtyWithTime();
                 boolean success = register();
                 if (success) {

File: config/src/main/java/com/github/dynamic/threadpool/config/toolkit/BeanUtil.java
Patch:
@@ -33,7 +33,7 @@ public static <T, S> List<T> convert(List<S> sources, Class<T> clazz) {
         return Optional.ofNullable(sources)
                 .map(each -> {
                     List<T> targetList = new ArrayList<T>(each.size());
-                    each.parallelStream()
+                    each.stream()
                             .forEach(item -> targetList.add(BEAN_MAPPER_BUILDER.map(item, clazz)));
                     return targetList;
                 })
@@ -44,7 +44,7 @@ public static <T, S> Set<T> convert(Set<S> sources, Class<T> clazz) {
         return Optional.ofNullable(sources)
                 .map(each -> {
                     Set<T> targetSize = new HashSet<T>(each.size());
-                    each.parallelStream()
+                    each.stream()
                             .forEach(item -> targetSize.add(BEAN_MAPPER_BUILDER.map(item, clazz)));
                     return targetSize;
                 })

File: dynamic-threadpool-spring-boot-starter/src/main/java/com/github/dynamic/threadpool/starter/wrap/DynamicThreadPoolWrap.java
Patch:
@@ -22,6 +22,8 @@ public class DynamicThreadPoolWrap {
 
     private String tpId;
 
+    private boolean subscribeFlag;
+
     private CustomThreadPoolExecutor pool;
 
     /**

File: config/src/main/java/io/dynamic/threadpool/config/config/MybatisPlusConfig.java
Patch:
@@ -18,7 +18,7 @@ public class MybatisPlusConfig {
     @Bean
     public MybatisPlusInterceptor mybatisPlusInterceptor() {
         MybatisPlusInterceptor interceptor = new MybatisPlusInterceptor();
-        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.H2));
+        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));
         return interceptor;
     }
 

File: config/src/main/java/io/dynamic/threadpool/config/service/biz/ThreadPoolServiceImpl.java
Patch:
@@ -34,15 +34,15 @@ public class ThreadPoolServiceImpl implements ThreadPoolService {
     @Override
     public IPage<ThreadPoolRespDTO> queryThreadPoolPage(ThreadPoolQueryReqDTO reqDTO) {
         LambdaQueryWrapper<ConfigAllInfo> wrapper = Wrappers.lambdaQuery(ConfigAllInfo.class)
-                .eq(!StringUtils.isBlank(reqDTO.getItemId()), ConfigAllInfo::getTenantId, reqDTO.getItemId())
+                .eq(!StringUtils.isBlank(reqDTO.getTenantId()), ConfigAllInfo::getTenantId, reqDTO.getTenantId())
                 .eq(!StringUtils.isBlank(reqDTO.getItemId()), ConfigAllInfo::getItemId, reqDTO.getItemId())
                 .eq(!StringUtils.isBlank(reqDTO.getTpId()), ConfigAllInfo::getTpId, reqDTO.getTpId());
         return configInfoMapper.selectPage(reqDTO, wrapper).convert(each -> BeanUtil.convert(each, ThreadPoolRespDTO.class));
     }
 
     @Override
     public ThreadPoolRespDTO getThreadPool(ThreadPoolQueryReqDTO reqDTO) {
-        ConfigAllInfo configAllInfo = configService.findConfigAllInfo(reqDTO.getTpId(), reqDTO.getItemId(), reqDTO.getItemId());
+        ConfigAllInfo configAllInfo = configService.findConfigAllInfo(reqDTO.getTpId(), reqDTO.getItemId(), reqDTO.getTenantId());
         return BeanUtil.convert(configAllInfo, ThreadPoolRespDTO.class);
     }
 

