File: scribejava-apis/src/main/java/com/github/scribejava/apis/instagram/InstagramAccessTokenErrorResponse.java
Patch:
@@ -19,7 +19,7 @@ public class InstagramAccessTokenErrorResponse extends OAuthResponseException {
     private final String errorType;
     private final int code;
     private final String errorMessage;
-    private final Response response;
+    private final transient Response response;
 
     public InstagramAccessTokenErrorResponse(String errorType, int code, String errorMessage, Response response)
             throws IOException {

File: scribejava-apis/src/main/java/com/github/scribejava/apis/instagram/InstagramService.java
Patch:
@@ -72,6 +72,9 @@ public Future<OAuth2AccessToken> getLongLivedAccessToken(OAuth2AccessToken acces
      *
      * @param accessToken short-lived access token
      * @return long-lived access token with filled expireIn and refreshToken
+     * @throws java.lang.InterruptedException
+     * @throws java.util.concurrent.ExecutionException
+     * @throws java.io.IOException
      */
     public OAuth2AccessToken getLongLivedAccessToken(OAuth2AccessToken accessToken)
             throws InterruptedException, ExecutionException, IOException {

File: scribejava-core/src/main/java/com/github/scribejava/core/httpclient/jdk/JDKHttpFuture.java
Patch:
@@ -8,6 +8,8 @@
 /**
  * Fake Future. Just to have Future API for the default JDK Http client. It's NOT Async in any way. Just facade.<br>
  * That's it. Sync execution with Async methods. This class does NOT provide any async executions.
+ *
+ * @param <V>
  */
 public class JDKHttpFuture<V> implements Future<V> {
 

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthResponseException.java
Patch:
@@ -8,7 +8,7 @@ public class OAuthResponseException extends OAuthException {
 
     private static final long serialVersionUID = 1309424849700276816L;
 
-    private final Response response;
+    private final transient Response response;
 
     public OAuthResponseException(Response rawResponse) throws IOException {
         super(rawResponse.getBody());

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth10aService.java
Patch:
@@ -39,7 +39,7 @@ public OAuth1RequestToken getRequestToken() throws IOException, InterruptedExcep
         final OAuthRequest request = prepareRequestTokenRequest();
 
         log("sending request...");
-        try (Response response = execute(request)) {
+        try ( Response response = execute(request)) {
             if (isDebug()) {
                 final String body = response.getBody();
                 log("response status code: %s", response.getCode());
@@ -105,7 +105,7 @@ public OAuth1AccessToken getAccessToken(OAuth1RequestToken requestToken, String
             log("obtaining access token from %s", api.getAccessTokenEndpoint());
         }
         final OAuthRequest request = prepareAccessTokenRequest(requestToken, oauthVerifier);
-        try (Response response = execute(request)) {
+        try ( Response response = execute(request)) {
             return api.getAccessTokenExtractor().extract(response);
         }
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuth2AccessToken.java
Patch:
@@ -5,11 +5,9 @@
 
 /**
  * Represents an OAuth 2 Access token.
- * <p>
  * http://tools.ietf.org/html/rfc6749#section-5.1
  *
  * @see <a href="https://tools.ietf.org/html/rfc6749#section-4.1.4">OAuth 2 Access Token Specification</a>
- * </p>
  */
 public class OAuth2AccessToken extends Token {
 

File: scribejava-core/src/main/java/com/github/scribejava/core/base64/Java8Base64.java
Patch:
@@ -3,7 +3,7 @@
 public class Java8Base64 extends Base64 {
 
     private static final com.github.scribejava.java8.base64.Java8Base64 JAVA8_BASE64
-            = new com.github.scribejava.java8.base64.Java8Base64();
+            = isAvailable() ? new com.github.scribejava.java8.base64.Java8Base64() : null;
 
     @Override
     protected String internalEncode(byte[] bytes) {

File: scribejava-apis/src/main/java/com/github/scribejava/apis/FacebookApi.java
Patch:
@@ -13,9 +13,6 @@
 import com.github.scribejava.core.oauth2.clientauthentication.ClientAuthentication;
 import com.github.scribejava.core.oauth2.clientauthentication.RequestBodyAuthenticationScheme;
 
-/**
- * Facebook API
- */
 public class FacebookApi extends DefaultApi20 {
 
     private final String version;

File: scribejava-apis/src/main/java/com/github/scribejava/apis/polar/PolarOAuthService.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.scribejava.apis.polar;
 
-import com.github.scribejava.core.builder.api.DefaultApi20;
+import com.github.scribejava.apis.PolarAPI;
 import com.github.scribejava.core.httpclient.HttpClient;
 import com.github.scribejava.core.httpclient.HttpClientConfig;
 import com.github.scribejava.core.model.OAuthConstants;
@@ -13,7 +13,7 @@
 
 public class PolarOAuthService extends OAuth20Service {
 
-    public PolarOAuthService(DefaultApi20 api, String apiKey, String apiSecret, String callback, String defaultScope,
+    public PolarOAuthService(PolarAPI api, String apiKey, String apiSecret, String callback, String defaultScope,
             String responseType, OutputStream debugStream, String userAgent, HttpClientConfig httpClientConfig,
             HttpClient httpClient) {
         super(api, apiKey, apiSecret, callback, defaultScope, responseType, debugStream, userAgent, httpClientConfig,

File: scribejava-apis/src/test/java/com/github/scribejava/apis/facebook/FacebookAccessTokenJsonExtractorTest.java
Patch:
@@ -29,7 +29,7 @@ public void run() throws Throwable {
                 }
             });
 
-            assertEquals("This authorization code has been used.", fateR.getMessage());
+            assertEquals("This authorization code has been used.", fateR.getErrorMessage());
             assertEquals("OAuthException", fateR.getType());
             assertEquals(100, fateR.getCodeInt());
             assertEquals("DtxvtGRaxbB", fateR.getFbtraceId());

File: scribejava-apis/src/test/java/com/github/scribejava/apis/facebook/FacebookAccessTokenJsonExtractorTest.java
Patch:
@@ -26,7 +26,7 @@ public void shouldThrowExceptionIfResponseIsError() throws IOException {
             assertEquals("OAuthException", fateR.getType());
             assertEquals(100, fateR.getCodeInt());
             assertEquals("DtxvtGRaxbB", fateR.getFbtraceId());
-            assertEquals(body, fateR.getRawResponse());
+            assertEquals(body, fateR.getResponse().getBody());
         }
     }
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/fitbit/FitBitJsonTokenExtractorTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.scribejava.apis.fitbit;
 
 import com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse;
+import com.github.scribejava.core.model.Response;
 import com.github.scribejava.core.oauth2.OAuth2Error;
 import java.io.IOException;
 
@@ -28,7 +29,7 @@ public void testErrorExtraction() throws IOException {
                 new ThrowingRunnable() {
             @Override
             public void run() throws Throwable {
-                extractor.generateError(ERROR_JSON);
+                extractor.generateError(new Response(403, null, null, ERROR_JSON));
             }
         });
         assertSame(OAuth2Error.INVALID_GRANT, thrown.getError());

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -438,7 +438,7 @@ public Void convert(Response response) throws IOException {
 
     private void checkForErrorRevokeToken(Response response) throws IOException {
         if (response.getCode() != 200) {
-            OAuth2AccessTokenJsonExtractor.instance().generateError(response.getBody());
+            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
         }
     }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/revoke/OAuth2RevokeTokenResponseConverter.java
Patch:
@@ -8,7 +8,7 @@ public class OAuth2RevokeTokenResponseConverter {
 
     public Void convert(Response response) throws IOException {
         if (response.getCode() != 200) {
-            OAuth2AccessTokenJsonExtractor.instance().generateError(response.getBody());
+            OAuth2AccessTokenJsonExtractor.instance().generateError(response);
         }
         return null;
     }

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/AWeberExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/DiggExample.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FlickrExample.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FoursquareExample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FreelancerExample.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExample.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExampleWithScopes.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MediaWikiExample.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MeetupExample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Px500Example.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SinaWeiboExample.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SkyrockExample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TrelloExample.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TumblrExample.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TwitterExample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/UcozExample.java
Patch:
@@ -37,7 +37,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.print(">>");
         final String oauthVerifier = in.nextLine();
         System.out.println();
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/XingExample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/YahooExample.java
Patch:
@@ -43,7 +43,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
+        // Trade the Request Token and Verifier for the Access Token
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthRequest.java
Patch:
@@ -360,7 +360,7 @@ public byte[] getByteArrayPayload() {
         if (byteArrayPayload != null) {
             return byteArrayPayload;
         }
-        final String body = bodyParams.asString();
+        final String body = bodyParams.asFormUrlEncodedString();
         try {
             return body.getBytes(getCharset());
         } catch (UnsupportedEncodingException uee) {

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthRequest.java
Patch:
@@ -360,7 +360,7 @@ public byte[] getByteArrayPayload() {
         if (byteArrayPayload != null) {
             return byteArrayPayload;
         }
-        final String body = bodyParams.asFormUrlEncodedString();
+        final String body = bodyParams.asString();
         try {
             return body.getBytes(getCharset());
         } catch (UnsupportedEncodingException uee) {

File: scribejava-core/src/test/java/com/github/scribejava/core/model/RequestTest.java
Patch:
@@ -29,8 +29,7 @@ public void shouldGetQueryStringParameters() {
 
     @Test
     public void shouldSetBodyParamsAndAddContentLength() {
-        assertEquals("param=value&param%20with%20spaces=value%20with%20spaces",
-                new String(postRequest.getByteArrayPayload()));
+        assertEquals("param=value&param with spaces=value with spaces", new String(postRequest.getByteArrayPayload()));
     }
 
     @Test

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/PolarAPI20Example.java
Patch:
@@ -28,10 +28,10 @@ private PolarAPI20Example() {
 	public static void main(String... args) throws Exception {
 
 		// Replace these with your client id and secret fron your app
-		final String clientId = "1a86ac29-7ea3-473a-81d9-8ea582214558";
-		final String clientSecret = "0dc23e1d-b677-4da0-bb14-311949898a95";
+		final String clientId = "your api client";
+		final String clientSecret = "your api secret";
 		final String scope = "accesslink.read_all";
-		final String callback = "http://localhost";
+		final String callback = "your api callback";
 		final OAuth20Service service = new ServiceBuilder(clientId).apiSecret(clientSecret).defaultScope(scope)
 			//your callback URL to store and handle the authorization code sent by Polar
 			.callback(callback).build(PolarAPI20.instance());

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilderOAuth10a.java
Patch:
@@ -26,8 +26,10 @@ public interface ServiceBuilderOAuth10a extends ServiceBuilderCommon {
     @Override
     ServiceBuilderOAuth10a userAgent(String userAgent);
 
+    @Override
     ServiceBuilderOAuth10a debugStream(OutputStream debugStream);
 
+    @Override
     ServiceBuilderOAuth10a debug();
 
     /**

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/DefaultApi20.java
Patch:
@@ -125,7 +125,7 @@ public String getAuthorizationUrl(String responseType, String apiKey, String cal
     @Deprecated
     public OAuth20Service createService(String apiKey, String apiSecret, String callback, String defaultScope,
             String responseType, String userAgent, HttpClientConfig httpClientConfig, HttpClient httpClient) {
-        return createService(apiKey, apiSecret, callback, defaultScope, responseType, userAgent, httpClientConfig,
+        return createService(apiKey, apiSecret, callback, defaultScope, responseType, null, userAgent, httpClientConfig,
                 httpClient);
     }
 

File: scribejava-core/src/test/java/com/github/scribejava/core/AbstractClientTest.java
Patch:
@@ -44,7 +44,8 @@ public Response getResponse() {
 
     @Before
     public void setUp() {
-        oAuthService = new OAuth20Service(null, "test", "test", null, null, null, null, null, createNewClient());
+        oAuthService = new OAuth20Service(null, "test", "test", null, null, null, System.out, null, null,
+                createNewClient());
     }
 
     @After

File: scribejava-core/src/test/java/com/github/scribejava/core/AbstractClientTest.java
Patch:
@@ -44,7 +44,8 @@ public Response getResponse() {
 
     @Before
     public void setUp() {
-        oAuthService = new OAuth20Service(null, "test", "test", null, null, null, null, null, createNewClient());
+        oAuthService = new OAuth20Service(null, "test", "test", null, null, null, System.out, null, null,
+                createNewClient());
     }
 
     @After

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java
Patch:
@@ -165,19 +165,19 @@ private enum BodyType {
         BYTE_ARRAY {
             @Override
             RequestBody createBody(MediaType mediaType, Object bodyContents) {
-                return RequestBody.create(mediaType, (byte[]) bodyContents);
+                return RequestBody.create((byte[]) bodyContents, mediaType);
             }
         },
         STRING {
             @Override
             RequestBody createBody(MediaType mediaType, Object bodyContents) {
-                return RequestBody.create(mediaType, (String) bodyContents);
+                return RequestBody.create((String) bodyContents, mediaType);
             }
         },
         FILE {
             @Override
             RequestBody createBody(MediaType mediaType, Object bodyContents) {
-                return RequestBody.create(mediaType, (File) bodyContents);
+                return RequestBody.create((File) bodyContents, mediaType);
             }
         };
 

File: scribejava-httpclient-okhttp/src/test/java/com/github/scribejava/httpclient/okhttp/OAuthAsyncCompletionHandlerTest.java
Patch:
@@ -78,7 +78,7 @@ public void shouldReleaseLatchOnSuccess() throws Exception {
                 .protocol(Protocol.HTTP_1_1)
                 .code(200)
                 .message("ok")
-                .body(ResponseBody.create(MediaType.get("text/plain"), new byte[0]))
+                .body(ResponseBody.create(new byte[0], MediaType.get("text/plain")))
                 .build();
         handler.onResponse(call, response);
         assertNotNull(callback.getResponse());
@@ -98,7 +98,7 @@ public void shouldReleaseLatchOnIOException() throws Exception {
                 .protocol(Protocol.HTTP_1_1)
                 .code(200)
                 .message("ok")
-                .body(ResponseBody.create(MediaType.get("text/plain"), new byte[0]))
+                .body(ResponseBody.create(new byte[0], MediaType.get("text/plain")))
                 .build();
         handler.onResponse(call, response);
         assertNull(callback.getResponse());
@@ -124,7 +124,7 @@ public void shouldReportOAuthException() throws Exception {
                 .protocol(Protocol.HTTP_1_1)
                 .code(200)
                 .message("ok")
-                .body(ResponseBody.create(MediaType.get("text/plain"), new byte[0]))
+                .body(ResponseBody.create(new byte[0], MediaType.get("text/plain")))
                 .build();
         handler.onResponse(call, response);
         assertNull(callback.getResponse());

File: scribejava-apis/src/main/java/com/github/scribejava/apis/openid/OpenIdJsonTokenExtractor.java
Patch:
@@ -23,7 +23,8 @@ public static OpenIdJsonTokenExtractor instance() {
     @Override
     protected OpenIdOAuth2AccessToken createToken(String accessToken, String tokenType, Integer expiresIn,
             String refreshToken, String scope, JsonNode response, String rawResponse) {
+        final JsonNode idToken = response.get("id_token");
         return new OpenIdOAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope,
-                response.get("id_token").asText(), rawResponse);
+                idToken == null ? null : idToken.asText(), rawResponse);
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/openid/OpenIdJsonTokenExtractor.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis.openid;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor;
-import java.util.Map;
 
 /**
  * additionally parses OpenID id_token
@@ -22,8 +22,8 @@ public static OpenIdJsonTokenExtractor instance() {
 
     @Override
     protected OpenIdOAuth2AccessToken createToken(String accessToken, String tokenType, Integer expiresIn,
-            String refreshToken, String scope, Map<String, String> response, String rawResponse) {
+            String refreshToken, String scope, JsonNode response, String rawResponse) {
         return new OpenIdOAuth2AccessToken(accessToken, tokenType, expiresIn, refreshToken, scope,
-                response.get("id_token"), rawResponse);
+                response.get("id_token").asText(), rawResponse);
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/salesforce/SalesforceJsonTokenExtractor.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis.salesforce;
 
+import com.fasterxml.jackson.databind.JsonNode;
 import com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor;
-import java.util.Map;
 
 /**
  * This extractor parses in addition to the standard Extractor the instance_url
@@ -23,8 +23,8 @@ public static SalesforceJsonTokenExtractor instance() {
 
     @Override
     protected SalesforceToken createToken(String accessToken, String tokenType, Integer expiresIn,
-            String refreshToken, String scope, Map<String, String> response, String rawResponse) {
+            String refreshToken, String scope, JsonNode response, String rawResponse) {
         return new SalesforceToken(accessToken, tokenType, expiresIn, refreshToken, scope,
-                extractRequiredParameter(response, "instance_url", rawResponse), rawResponse);
+                extractRequiredParameter(response, "instance_url", rawResponse).asText(), rawResponse);
     }
 }

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/AsanaExample.java
Patch:
@@ -42,8 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Box20Example.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         //pass access_type=offline to get refresh token
         final Map<String, String> additionalParams = new HashMap<>();
         additionalParams.put("access_type", "offline");
-        //force to reget refresh token (if usera are asked not the first time)
+        //force to reget refresh token (if user are asked not the first time)
         additionalParams.put("prompt", "consent");
         final String authorizationUrl = service.createAuthorizationUrlBuilder()
                 .state(secretState)
@@ -68,8 +68,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/DataportenExample.java
Patch:
@@ -58,8 +58,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/DiscordExample.java
Patch:
@@ -61,8 +61,7 @@ public static void main(String... args) throws IOException, ExecutionException,
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(if your curious it looks like this: " + accessToken

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncApacheExample.java
Patch:
@@ -62,8 +62,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
                 System.out.println();
             }
 
-            // Trade the Request Token and Verfier for the Access Token
-            System.out.println("Trading the Request Token for an Access Token...");
+            System.out.println("Trading the Authorization Code for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessTokenAsync(code).get();
             System.out.println("Got the Access Token!");
             System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncNingExample.java
Patch:
@@ -70,8 +70,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
                 System.out.println();
             }
 
-            // Trade the Request Token and Verfier for the Access Token
-            System.out.println("Trading the Request Token for an Access Token...");
+            System.out.println("Trading the Authorization Code for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessTokenAsync(code).get();
             System.out.println("Got the Access Token!");
             System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookExample.java
Patch:
@@ -59,8 +59,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FitbitApi20Example.java
Patch:
@@ -48,8 +48,7 @@ public static void main(String... args) throws Exception {
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken oauth2AccessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(if your curious it looks like this: " + oauth2AccessToken

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Foursquare2Example.java
Patch:
@@ -44,8 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GitHubAsyncOkHttpExample.java
Patch:
@@ -62,8 +62,7 @@ public static void main(String... args) throws IOException, ExecutionException,
                 System.out.println();
             }
 
-            // Trade the Request Token and Verfier for the Access Token
-            System.out.println("Trading the Request Token for an Access Token...");
+            System.out.println("Trading the Authorization Code for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
             System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GitHubExample.java
Patch:
@@ -58,8 +58,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20AsyncAHCExample.java
Patch:
@@ -55,7 +55,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             //https://developers.google.com/identity/protocols/OAuth2WebServer#preparing-to-start-the-oauth-20-flow
             final Map<String, String> additionalParams = new HashMap<>();
             additionalParams.put("access_type", "offline");
-            //force to reget refresh token (if usera are asked not the first time)
+            //force to reget refresh token (if user are asked not the first time)
             additionalParams.put("prompt", "consent");
             final String authorizationUrl = service.createAuthorizationUrlBuilder()
                     .state(secretState)
@@ -82,8 +82,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
                 System.out.println();
             }
 
-            // Trade the Request Token and Verfier for the Access Token
-            System.out.println("Trading the Request Token for an Access Token...");
+            System.out.println("Trading the Authorization Code for an Access Token...");
             OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
             System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20Example.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         //https://developers.google.com/identity/protocols/OAuth2WebServer#preparing-to-start-the-oauth-20-flow
         final Map<String, String> additionalParams = new HashMap<>();
         additionalParams.put("access_type", "offline");
-        //force to reget refresh token (if usera are asked not the first time)
+        //force to reget refresh token (if user are asked not the first time)
         additionalParams.put("prompt", "consent");
         final String authorizationUrl = service.createAuthorizationUrlBuilder()
                 .state(secretState)
@@ -70,8 +70,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20RevokeExample.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         //https://developers.google.com/identity/protocols/OAuth2WebServer#preparing-to-start-the-oauth-20-flow
         final Map<String, String> additionalParams = new HashMap<>();
         additionalParams.put("access_type", "offline");
-        //force to reget refresh token (if usera are asked not the first time)
+        //force to reget refresh token (if user are asked not the first time)
         additionalParams.put("prompt", "consent");
         final String authorizationUrl = service.createAuthorizationUrlBuilder()
                 .state(secretState)
@@ -70,8 +70,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20WithPKCEExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         //https://developers.google.com/identity/protocols/OAuth2WebServer#preparing-to-start-the-oauth-20-flow
         final Map<String, String> additionalParams = new HashMap<>();
         additionalParams.put("access_type", "offline");
-        //force to reget refresh token (if usera are asked not the first time)
+        //force to reget refresh token (if user are asked not the first time)
         additionalParams.put("prompt", "consent");
 
         final AuthorizationUrlBuilder authorizationUrlBuilder = service.createAuthorizationUrlBuilder()
@@ -75,8 +75,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(AccessTokenRequestParams.create(code)
                 .pkceCodeVerifier(authorizationUrlBuilder.getPkce().getCodeVerifier()));
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/HHExample.java
Patch:
@@ -46,8 +46,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/HiOrgServerExample.java
Patch:
@@ -63,8 +63,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/KeycloakExample.java
Patch:
@@ -49,8 +49,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedIn20Example.java
Patch:
@@ -49,8 +49,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LiveExample.java
Patch:
@@ -44,8 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruAsyncExample.java
Patch:
@@ -57,8 +57,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             final String code = in.nextLine();
             System.out.println();
 
-            // Trade the Request Token and Verfier for the Access Token
-            System.out.println("Trading the Request Token for an Access Token...");
+            System.out.println("Trading the Authorization Code for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
             System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruExample.java
Patch:
@@ -46,8 +46,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MicrosoftAzureActiveDirectory20Example.java
Patch:
@@ -42,8 +42,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.print(">>");
         final String code = in.nextLine();
         System.out.println();
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MicrosoftAzureActiveDirectoryExample.java
Patch:
@@ -47,8 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/NaverExample.java
Patch:
@@ -60,8 +60,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/OdnoklassnikiExample.java
Patch:
@@ -48,9 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
-
+        System.out.println("Trading the Authorization Code for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/PinterestExample.java
Patch:
@@ -45,8 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/RenrenExample.java
Patch:
@@ -55,8 +55,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/StackExchangeExample.java
Patch:
@@ -63,8 +63,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println();
         }
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TutByExample.java
Patch:
@@ -45,8 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/ViadeoExample.java
Patch:
@@ -44,8 +44,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExample.java
Patch:
@@ -51,8 +51,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String code = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(AccessTokenRequestParams.create(code)
                 .scope(customScope));
         System.out.println("Got the Access Token!");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExternalHttpExample.java
Patch:
@@ -63,8 +63,7 @@ public static void main(String... args) throws IOException, InterruptedException
             final String code = in.nextLine();
             System.out.println();
 
-            // Trade the Request Token and Verfier for the Access Token
-            System.out.println("Trading the Request Token for an Access Token...");
+            System.out.println("Trading the Authorization Code for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
             System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Yahoo20Example.java
Patch:
@@ -56,8 +56,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String oauthVerifier = in.nextLine();
         System.out.println();
 
-        // Trade the Request Token and Verfier for the Access Token
-        System.out.println("Trading the Request Token for an Access Token...");
+        System.out.println("Trading the Authorization Code for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(oauthVerifier);
         System.out.println("Got the Access Token!");
         System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");

File: scribejava-core/src/test/java/com/github/scribejava/core/oauth/OAuth20ServiceUnit.java
Patch:
@@ -19,7 +19,7 @@ class OAuth20ServiceUnit extends OAuth20Service {
 
     static final String TOKEN = "ae82980abab675c646a070686d5558ad";
     static final String STATE = "123";
-    static final String EXPIRES = "3600";
+    static final int EXPIRES = 3600;
     private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();
 
     OAuth20ServiceUnit(DefaultApi20 api, String apiKey, String apiSecret, String callback, String defaultScope,
@@ -33,7 +33,7 @@ protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request) {
     }
 
     private String prepareRawResponse(OAuthRequest request) {
-        final Map<String, String> response = new HashMap<>();
+        final Map<String, Object> response = new HashMap<>();
         response.put(OAuthConstants.ACCESS_TOKEN, TOKEN);
         response.put(OAuthConstants.STATE, STATE);
         response.put("expires_in", EXPIRES);

File: scribejava-apis/src/main/java/com/github/scribejava/apis/fitbit/FitBitJsonTokenExtractor.java
Patch:
@@ -2,6 +2,7 @@
 
 import com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor;
 import com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse;
+import com.github.scribejava.core.oauth2.OAuth2Error;
 
 import java.util.regex.Pattern;
 
@@ -37,9 +38,9 @@ public void generateError(String response) {
         final String errorInString = extractParameter(response, ERROR_REGEX_PATTERN, true);
         final String errorDescription = extractParameter(response, ERROR_DESCRIPTION_REGEX_PATTERN, false);
 
-        OAuth2AccessTokenErrorResponse.ErrorCode errorCode;
+        OAuth2Error errorCode;
         try {
-            errorCode = OAuth2AccessTokenErrorResponse.ErrorCode.parseFrom(errorInString);
+            errorCode = OAuth2Error.parseFrom(errorInString);
         } catch (IllegalArgumentException iaE) {
             //non oauth standard error code
             errorCode = null;

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/OAuth2AccessTokenJsonExtractor.java
Patch:
@@ -8,6 +8,7 @@
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse;
 import com.github.scribejava.core.model.Response;
+import com.github.scribejava.core.oauth2.OAuth2Error;
 import com.github.scribejava.core.utils.Preconditions;
 
 /**
@@ -64,9 +65,9 @@ public void generateError(String response) {
             errorUri = null;
         }
 
-        OAuth2AccessTokenErrorResponse.ErrorCode errorCode;
+        OAuth2Error errorCode;
         try {
-            errorCode = OAuth2AccessTokenErrorResponse.ErrorCode.parseFrom(errorInString);
+            errorCode = OAuth2Error.parseFrom(errorInString);
         } catch (IllegalArgumentException iaE) {
             //non oauth standard error code
             errorCode = null;

File: scribejava-core/src/test/java/com/github/scribejava/core/extractors/OAuth2AccessTokenJsonExtractorTest.java
Patch:
@@ -3,6 +3,7 @@
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuth2AccessTokenErrorResponse;
 import com.github.scribejava.core.model.Response;
+import com.github.scribejava.core.oauth2.OAuth2Error;
 import org.junit.Test;
 
 import java.io.IOException;
@@ -66,6 +67,7 @@ public void shouldThrowExceptionIfResponseIsError() throws IOException {
             fail();
         } catch (OAuth2AccessTokenErrorResponse oaer) {
             assertEquals(OAuth2AccessTokenErrorResponse.ErrorCode.INVALID_GRANT, oaer.getErrorCode());
+            assertEquals(OAuth2Error.INVALID_GRANT, oaer.getError());
             assertEquals("unknown, invalid, or expired refresh token", oaer.getErrorDescription());
         }
     }

File: scribejava-httpclient-ahc/src/main/java/com/github/scribejava/httpclient/ahc/OAuthAsyncCompletionHandler.java
Patch:
@@ -48,4 +48,4 @@ public void onThrowable(Throwable t) {
             callback.onThrowable(t);
         }
     }
-};
+}

File: scribejava-httpclient-okhttp/src/test/java/com/github/scribejava/httpclient/okhttp/MockCall.java
Patch:
@@ -49,7 +49,7 @@ public boolean isExecuted() {
     }
 
     @Override
-    public Call clone() {
+    public MockCall clone() {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 

File: scribejava-httpclient-apache/src/main/java/com/github/scribejava/httpclient/apache/OAuthAsyncCompletionHandler.java
Patch:
@@ -17,6 +17,7 @@
 import com.github.scribejava.core.model.OAuthRequest.ResponseConverter;
 import com.github.scribejava.core.model.Response;
 import java.io.IOException;
+import org.apache.http.HttpEntity;
 
 public class OAuthAsyncCompletionHandler<T> implements FutureCallback<HttpResponse> {
 
@@ -42,8 +43,9 @@ public void completed(HttpResponse httpResponse) {
 
             final StatusLine statusLine = httpResponse.getStatusLine();
 
+            final HttpEntity httpEntity = httpResponse.getEntity();
             final Response response = new Response(statusLine.getStatusCode(), statusLine.getReasonPhrase(), headersMap,
-                    httpResponse.getEntity().getContent());
+                    httpEntity == null ? null : httpEntity.getContent());
 
             @SuppressWarnings("unchecked")
             final T t = converter == null ? (T) response : converter.convert(response);

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MicrosoftAzureActiveDirectory20Example.java
Patch:
@@ -25,7 +25,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String clientSecret = "client secret here";
         final OAuth20Service service = new ServiceBuilder(clientId)
                 .apiSecret(clientSecret)
-                .scope("openid")
+                .scope("openid User.Read")
                 .callback("http://www.example.com/oauth_callback/")
                 .build(MicrosoftAzureActiveDirectory20Api.instance());
         final Scanner in = new Scanner(System.in, "UTF-8");

File: scribejava-apis/src/main/java/com/github/scribejava/apis/microsoftazureactivedirectory/BaseMicrosoftAzureActiveDirectoryApi.java
Patch:
@@ -9,7 +9,7 @@ public abstract class BaseMicrosoftAzureActiveDirectoryApi extends DefaultApi20
     protected static final String COMMON_TENANT = "common";
 
     private static final String MSFT_LOGIN_URL = "https://login.microsoftonline.com/";
-    private static final String TOKEN_URI = "/oauth2/token";
+    private static final String OAUTH_2 = "/oauth2";
     private final String tenant;
 
     protected BaseMicrosoftAzureActiveDirectoryApi() {
@@ -22,12 +22,12 @@ protected BaseMicrosoftAzureActiveDirectoryApi(String tenant) {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return MSFT_LOGIN_URL + tenant + TOKEN_URI;
+        return MSFT_LOGIN_URL + tenant + OAUTH_2 + getEndpointVersionPath() + "/token";
     }
 
     @Override
     protected String getAuthorizationBaseUrl() {
-        return MSFT_LOGIN_URL + tenant + getEndpointVersionPath() + "/oauth2/authorize";
+        return MSFT_LOGIN_URL + tenant + OAUTH_2 + getEndpointVersionPath() + "/authorize";
     }
 
     @Override

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuthService.java
Patch:
@@ -110,6 +110,9 @@ public Response execute(OAuthRequest request) throws InterruptedException, Execu
         } else if (request.getStringPayload() != null) {
             return httpClient.execute(userAgent, request.getHeaders(), request.getVerb(), request.getCompleteUrl(),
                     request.getStringPayload());
+        } else if (request.getMultipartPayload() != null) {
+            return httpClient.execute(userAgent, request.getHeaders(), request.getVerb(), request.getCompleteUrl(),
+                    request.getMultipartPayload());
         } else if (request.getMultipartPayloads() != null) {
             return httpClient.execute(userAgent, request.getHeaders(), request.getVerb(), request.getCompleteUrl(),
                     request.getMultipartPayloads());

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -254,7 +254,7 @@ public String getVersion() {
     }
 
     public void signRequest(String accessToken, OAuthRequest request) {
-        api.getSignatureType().signRequest(accessToken, request);
+        api.getBearerSignature().signRequest(accessToken, request);
     }
 
     public void signRequest(OAuth2AccessToken accessToken, OAuthRequest request) {

File: scribejava-core/src/main/java/com/github/scribejava/core/httpclient/MultipartPayload.java
Patch:
@@ -18,7 +18,8 @@ public MultipartPayload(String boundary) {
     public byte[] getStartBoundary(BodyPartPayload bodyPart) {
         return ("--" + boundary + "\r\n"
                 + "Content-Disposition: " + bodyPart.getContentDisposition() + "\r\n"
-                + (bodyPart.getContentType() == null ? "" : "Content-Type: " + bodyPart.getContentType() + "\r\n")
+                + (bodyPart.getContentType() == null
+                ? "" : HttpClient.CONTENT_TYPE + ": " + bodyPart.getContentType() + "\r\n")
                 + "\r\n").getBytes();
     }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/OAuth2AccessTokenExtractor.java
Patch:
@@ -39,7 +39,7 @@ public static OAuth2AccessTokenExtractor instance() {
     @Override
     public OAuth2AccessToken extract(Response response) throws IOException {
         if (response.getCode() != 200) {
-            throw new OAuthException("Response code not 200 but " + response.getCode());
+            throw new OAuthException("Response code is not 200 but '" + response.getCode() + '\'');
         }
         final String body = response.getBody();
         Preconditions.checkEmptyString(body,

File: scribejava-core/src/main/java/com/github/scribejava/core/httpclient/jdk/JDKHttpClient.java
Patch:
@@ -79,7 +79,7 @@ private <T> Future<T> doExecuteAsync(String userAgent, Map<String, String> heade
                 callback.onCompleted(t);
             }
             return new JDKHttpFuture<>(t);
-        } catch (Throwable e) {
+        } catch (IOException | RuntimeException e) {
             if (callback != null) {
                 callback.onThrowable(e);
             }

File: scribejava-core/src/main/java/com/github/scribejava/core/httpclient/jdk/JDKHttpFuture.java
Patch:
@@ -11,18 +11,18 @@
  */
 public class JDKHttpFuture<V> implements Future<V> {
 
-    private final Throwable exception;
+    private final Exception exception;
     private final V response;
 
-    public JDKHttpFuture(Throwable exception) {
+    public JDKHttpFuture(Exception exception) {
         this(null, exception);
     }
 
     public JDKHttpFuture(V response) {
         this(response, null);
     }
 
-    private JDKHttpFuture(V response, Throwable exception) {
+    private JDKHttpFuture(V response, Exception exception) {
         this.response = response;
         this.exception = exception;
     }

File: scribejava-core/src/test/java/com/github/scribejava/core/extractors/OAuth2AccessTokenExtractorTest.java
Patch:
@@ -61,7 +61,7 @@ public void shouldExtractTokenFromResponseWithManyParameters() throws IOExceptio
     @Test(expected = OAuthException.class)
     public void shouldThrowExceptionIfErrorResponse() throws IOException {
         final String response = "";
-        this.extractor.extract(error(response));
+        extractor.extract(error(response));
     }
 
     @Test(expected = OAuthException.class)
@@ -85,7 +85,7 @@ private static Response ok(String body) {
         return new Response(200, /* message */ null, /* headers */ Collections.<String, String>emptyMap(), body);
     }
 
-    private static Response error(final String body) {
+    private static Response error(String body) {
         return new Response(400, /* message */ null, /* headers */ Collections.<String, String>emptyMap(), body);
     }
 }

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FitbitApi20Example.java
Patch:
@@ -58,7 +58,7 @@ public static void main(String... args) throws Exception {
 
         if (!(oauth2AccessToken instanceof FitBitOAuth2AccessToken)) {
             System.out.println("oauth2AccessToken is not instance of FitBitOAuth2AccessToken. Strange enough. exit.");
-            System.exit(0);
+            return;
         }
 
         final FitBitOAuth2AccessToken accessToken = (FitBitOAuth2AccessToken) oauth2AccessToken;

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/DefaultApi20.java
Patch:
@@ -84,7 +84,6 @@ public String getAuthorizationUrl(OAuthConfig config, Map<String, String> additi
     /**
      * Returns the URL where you should redirect your users to authenticate your application.
      *
-     * @param config OAuth 2.0 configuration param object
      * @param additionalParams any additional GET params to add to the URL
      * @return the URL where you should redirect your users
      */

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/OAuth2AccessTokenJsonExtractor.java
Patch:
@@ -19,7 +19,7 @@ public class OAuth2AccessTokenJsonExtractor implements TokenExtractor<OAuth2Acce
     private static final Pattern TOKEN_TYPE_REGEX_PATTERN = Pattern.compile("\"token_type\"\\s*:\\s*\"(\\S*?)\"");
     private static final Pattern EXPIRES_IN_REGEX_PATTERN = Pattern.compile("\"expires_in\"\\s*:\\s*\"?(\\d*?)\"?\\D");
     private static final Pattern REFRESH_TOKEN_REGEX_PATTERN = Pattern.compile("\"refresh_token\"\\s*:\\s*\"(\\S*?)\"");
-    private static final Pattern SCOPE_REGEX_PATTERN = Pattern.compile("\"scope\"\\s*:\\s*\"(\\S*?)\"");
+    private static final Pattern SCOPE_REGEX_PATTERN = Pattern.compile("\"scope\"\\s*:\\s*\"([^\"]*?)\"");
     private static final Pattern ERROR_REGEX_PATTERN = Pattern.compile("\"error\"\\s*:\\s*\"(\\S*?)\"");
     private static final Pattern ERROR_DESCRIPTION_REGEX_PATTERN
             = Pattern.compile("\"error_description\"\\s*:\\s*\"([^\"]*?)\"");

File: scribejava-apis/src/main/java/com/github/scribejava/apis/UcozApi.java
Patch:
@@ -8,7 +8,7 @@
 import com.github.scribejava.core.model.OAuth1RequestToken;
 
 public class UcozApi extends DefaultApi10a {
-    private static final String AUTHORIZE_URL = "http://uapi.ucoz.com/accounts/oauthauthorizetoken?oauth_token=%s";
+    private static final String AUTHORIZE_URL = "http://uapi.ucoz.com/accounts/oauthauthorizetoken";
 
     protected UcozApi() {
     }
@@ -32,8 +32,8 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(OAuth1RequestToken requestToken) {
-        return String.format(AUTHORIZE_URL, requestToken.getToken());
+    public String getAuthorizationBaseUrl() {
+        return AUTHORIZE_URL;
     }
 
     @Override

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/PinterestExample.java
Patch:
@@ -14,7 +14,7 @@
 
 public final class PinterestExample {
 
-    private static final String PROTECTED_RESOURCE_URL = "https://api.pinterest.com/v1/me/?access_token?access_token=";
+    private static final String PROTECTED_RESOURCE_URL = "https://api.pinterest.com/v1/me/";
 
     private PinterestExample() {
     }
@@ -26,7 +26,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final OAuth20Service service = new ServiceBuilder(apiKey)
                 .apiSecret(apiSecret)
                 .scope("read_public,write_public,read_relationships,write_relationships")
-                .callback("https://localhost:9000/") // Add as valid callback in developer portal
+                .callback("https://localhost/") // Add as valid callback in developer portal
                 .build(PinterestApi.instance());
         final Scanner in = new Scanner(System.in);
 
@@ -53,7 +53,7 @@ public static void main(String... args) throws IOException, InterruptedException
 
         // Now let's go and ask for a protected resource!
         System.out.println("Now we're going to access a protected resource...");
-        final OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL + accessToken.getAccessToken());
+        final OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL);
         service.signRequest(accessToken, request);
         final Response response = service.execute(request);
         System.out.println("Got it! Lets see what we found...");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SalesforceExample.java
Patch:
@@ -94,6 +94,7 @@ public static void main(String... args) throws IOException, NoSuchAlgorithmExcep
         System.out.println("Full URL: " + url);
 
         final OAuthRequest request = new OAuthRequest(Verb.GET, url);
+        service.signRequest(salesforceAccessToken, request);
         final Response response = service.execute(request);
         System.out.println();
         System.out.println(response.getCode());

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuth2AccessTokenErrorResponse.java
Patch:
@@ -27,9 +27,6 @@ public enum ErrorCode {
     public OAuth2AccessTokenErrorResponse(ErrorCode errorCode, String errorDescription, URI errorUri,
             String rawResponse) {
         super(rawResponse);
-        if (errorCode == null) {
-            throw new IllegalArgumentException("errorCode must not be null");
-        }
         this.errorCode = errorCode;
         this.errorDescription = errorDescription;
         this.errorUri = errorUri;

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/AWeberExample.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Box20Example.java
Patch:
@@ -69,7 +69,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
 
         System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/DataportenExample.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/DiggExample.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/EtsyExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String[] args) throws InterruptedException, ExecutionExc
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncApacheExample.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             System.out.println("Trading the Request Token for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessTokenAsync(code).get();
             System.out.println("Got the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncNingExample.java
Patch:
@@ -74,7 +74,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             System.out.println("Trading the Request Token for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessTokenAsync(code).get();
             System.out.println("Got the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookExample.java
Patch:
@@ -63,7 +63,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FlickrExample.java
Patch:
@@ -51,7 +51,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Foursquare2Example.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FoursquareExample.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FrappeExample.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FreelancerExample.java
Patch:
@@ -37,7 +37,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Fetching the Request Token...");
         final OAuth1RequestToken requestToken = service.getRequestToken();
         System.out.println("Got the Request Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + requestToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + requestToken.getRawResponse() + "')");
         System.out.println();
 
         System.out.println("Now go and authorize ScribeJava here:");
@@ -51,7 +51,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GitHubAsyncOkHttpExample.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String... args) throws IOException, ExecutionException,
             System.out.println("Trading the Request Token for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GitHubExample.java
Patch:
@@ -62,7 +62,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20AsyncAHCExample.java
Patch:
@@ -83,13 +83,13 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             System.out.println("Trading the Request Token for an Access Token...");
             OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
 
             System.out.println("Refreshing the Access Token...");
             accessToken = service.refreshAccessToken(accessToken.getRefreshToken());
             System.out.println("Refreshed the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20Example.java
Patch:
@@ -71,12 +71,12 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
 
         System.out.println("Refreshing the Access Token...");
         accessToken = service.refreshAccessToken(accessToken.getRefreshToken());
         System.out.println("Refreshed the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20RevokeExample.java
Patch:
@@ -71,7 +71,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
 
         // Now let's go and ask for a protected resource!
         System.out.println("Now we're going to access a protected resource...");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20WithPKCEExample.java
Patch:
@@ -75,12 +75,12 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         OAuth2AccessToken accessToken = service.getAccessToken(code, authUrlWithPKCE.getPkce().getCodeVerifier());
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
 
         System.out.println("Refreshing the Access Token...");
         accessToken = service.refreshAccessToken(accessToken.getRefreshToken());
         System.out.println("Refreshed the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/HHExample.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         System.out.println("Now we're going to access a protected resource...");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/ImgurExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Kaixin20Example.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedIn20Example.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExample.java
Patch:
@@ -46,7 +46,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExampleWithScopes.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LiveExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruAsyncExample.java
Patch:
@@ -60,7 +60,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             System.out.println("Trading the Request Token for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruExample.java
Patch:
@@ -49,7 +49,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         System.out.println("Now we're going to access a protected resource...");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MeetupExample.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MicrosoftAzureActiveDirectoryExample.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MisfitExample.java
Patch:
@@ -50,7 +50,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/NaverExample.java
Patch:
@@ -64,7 +64,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/NeteaseWeiboExample.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/OdnoklassnikiExample.java
Patch:
@@ -52,13 +52,13 @@ public static void main(String... args) throws IOException, InterruptedException
 
         OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         System.out.println("Refreshing the Access Token...");
         accessToken = service.refreshAccessToken(accessToken.getRefreshToken());
         System.out.println("Refreshed the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/PinterestExample.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Px500Example.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/RenrenExample.java
Patch:
@@ -58,7 +58,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SalesforceExample.java
Patch:
@@ -76,7 +76,7 @@ public static void main(String... args) throws IOException, NoSuchAlgorithmExcep
         }
         System.out.println("Got the Access Token!");
 
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         System.out.println("instance_url is: " + salesforceAccessToken.getInstanceUrl());

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SalesforceNingAsyncExample.java
Patch:
@@ -77,7 +77,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             }
             System.out.println("Got the Access Token!");
 
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
             System.out.println("Instance is: " + salesforceAccessToken.getInstanceUrl());

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SinaWeibo2Example.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SinaWeiboExample.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SkyrockExample.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SohuWeiboExample.java
Patch:
@@ -53,7 +53,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/StackExchangeExample.java
Patch:
@@ -67,7 +67,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TheThingsNetworkV1StagingExample.java
Patch:
@@ -69,7 +69,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TheThingsNetworkV2PreviewExample.java
Patch:
@@ -66,7 +66,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TrelloExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TumblrExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TutByExample.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TwitterExample.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/UcozExample.java
Patch:
@@ -40,7 +40,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/ViadeoExample.java
Patch:
@@ -47,7 +47,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExample.java
Patch:
@@ -48,7 +48,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth2AccessToken accessToken = service.getAccessToken(code);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExternalHttpExample.java
Patch:
@@ -65,7 +65,7 @@ public static void main(String... args) throws IOException, InterruptedException
             System.out.println("Trading the Request Token for an Access Token...");
             final OAuth2AccessToken accessToken = service.getAccessToken(code);
             System.out.println("Got the Access Token!");
-            System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse()
+            System.out.println("(The raw response looks like this: " + accessToken.getRawResponse()
                     + "')");
             System.out.println();
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/XingExample.java
Patch:
@@ -45,7 +45,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/YahooExample.java
Patch:
@@ -46,7 +46,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println("Trading the Request Token for an Access Token...");
         final OAuth1AccessToken accessToken = service.getAccessToken(requestToken, oauthVerifier);
         System.out.println("Got the Access Token!");
-        System.out.println("(if your curious the raw answer looks like this: " + accessToken.getRawResponse() + "')");
+        System.out.println("(The raw response looks like this: " + accessToken.getRawResponse() + "')");
         System.out.println();
 
         // Now let's go and ask for a protected resource!

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilder.java
Patch:
@@ -4,7 +4,6 @@
 import com.github.scribejava.core.httpclient.HttpClient;
 import com.github.scribejava.core.httpclient.HttpClientConfig;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.oauth.OAuthService;
 import com.github.scribejava.core.utils.Preconditions;
 
@@ -15,7 +14,7 @@
  */
 public class ServiceBuilder {
 
-    private String callback = OAuthConstants.OUT_OF_BAND;
+    private String callback;
     private String apiKey;
     private String apiSecret;
     private String scope;
@@ -38,7 +37,6 @@ public ServiceBuilder(String apiKey) {
      * @return the {@link ServiceBuilder} instance for method chaining
      */
     public ServiceBuilder callback(String callback) {
-        Preconditions.checkNotNull(callback, "Callback can't be null");
         this.callback = callback;
         return this;
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthConstants.java
Patch:
@@ -17,7 +17,6 @@ public interface OAuthConstants {
     String PARAM_PREFIX = "oauth_";
     String TOKEN = "oauth_token";
     String TOKEN_SECRET = "oauth_token_secret";
-    String OUT_OF_BAND = "oob";
     String VERIFIER = "oauth_verifier";
     String HEADER = "Authorization";
     String SCOPE = "scope";

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
-import revoke.TokenTypeHint;
+import com.github.scribejava.core.revoke.TokenTypeHint;
 
 public class OAuth20Service extends OAuthService {
 

File: scribejava-core/src/main/java/com/github/scribejava/core/revoke/OAuth2RevokeTokenResponseConverter.java
Patch:
@@ -1,4 +1,4 @@
-package revoke;
+package com.github.scribejava.core.revoke;
 
 import com.github.scribejava.core.extractors.OAuth2AccessTokenJsonExtractor;
 import com.github.scribejava.core.model.Response;

File: scribejava-core/src/main/java/com/github/scribejava/core/revoke/TokenTypeHint.java
Patch:
@@ -1,4 +1,4 @@
-package revoke;
+package com.github.scribejava.core.revoke;
 
 /**
  *

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthConstants.java
Patch:
@@ -32,6 +32,7 @@ public interface OAuthConstants {
     String REFRESH_TOKEN = "refresh_token";
     String GRANT_TYPE = "grant_type";
     String AUTHORIZATION_CODE = "authorization_code";
+    String CLIENT_CREDENTIALS = "client_credentials";
     String STATE = "state";
     String USERNAME = "username";
     String PASSWORD = "password";

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthConstants.java
Patch:
@@ -32,6 +32,7 @@ public interface OAuthConstants {
     String REFRESH_TOKEN = "refresh_token";
     String GRANT_TYPE = "grant_type";
     String AUTHORIZATION_CODE = "authorization_code";
+    String CLIENT_CREDENTIALS = "client_credentials";
     String STATE = "state";
     String USERNAME = "username";
     String PASSWORD = "password";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExternalHttpExample.java
Patch:
@@ -14,7 +14,7 @@
 import org.asynchttpclient.DefaultAsyncHttpClient;
 import org.asynchttpclient.DefaultAsyncHttpClientConfig;
 
-public final class VkontakteExternalHttpExample {
+public class VkontakteExternalHttpExample {
 
     private static final String NETWORK_NAME = "Vkontakte.ru";
     private static final String PROTECTED_RESOURCE_URL = "https://api.vk.com/method/users.get";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/YahooExample.java
Patch:
@@ -12,7 +12,7 @@
 import java.io.IOException;
 import java.util.concurrent.ExecutionException;
 
-public final class YahooExample {
+public class YahooExample {
 
     private static final String PROTECTED_RESOURCE_URL
             = "http://social.yahooapis.com/v1/user/A6ROU63MXWDCW3Y5MGCYWVHDJI/profile/status?format=json";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExampleWithScopes.java
Patch:
@@ -28,7 +28,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final OAuth10aService service = new ServiceBuilder()
                 .apiKey(clientId)
                 .apiSecret(clientSecret)
-                .build(new LinkedInApi("foo", "bar", "baz"));
+                .build(LinkedInApi.instance("foo", "bar", "baz"));
         final Scanner in = new Scanner(System.in);
 
         System.out.println("=== LinkedIn's OAuth Workflow ===");

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth10aService.java
Patch:
@@ -76,7 +76,7 @@ protected OAuthRequest prepareRequestTokenRequest() {
         return request;
     }
 
-    private void addOAuthParams(OAuthRequest request, String tokenSecret) {
+    protected void addOAuthParams(OAuthRequest request, String tokenSecret) {
         final OAuthConfig config = getConfig();
         request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());
         request.addOAuthParameter(OAuthConstants.NONCE, api.getTimestampService().getNonce());
@@ -178,7 +178,7 @@ private String getSignature(OAuthRequest request, String tokenSecret) {
         return signature;
     }
 
-    private void appendSignature(OAuthRequest request) {
+    protected void appendSignature(OAuthRequest request) {
         final OAuthConfig config = getConfig();
         @SuppressWarnings("deprecation")
         final OAuth1SignatureType signatureType

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth10aService.java
Patch:
@@ -75,7 +75,7 @@ protected OAuthRequest prepareRequestTokenRequest() {
         return request;
     }
 
-    private void addOAuthParams(OAuthRequest request, String tokenSecret) {
+    protected void addOAuthParams(OAuthRequest request, String tokenSecret) {
         final OAuthConfig config = getConfig();
         request.addOAuthParameter(OAuthConstants.TIMESTAMP, api.getTimestampService().getTimestampInSeconds());
         request.addOAuthParameter(OAuthConstants.NONCE, api.getTimestampService().getNonce());
@@ -177,7 +177,7 @@ private String getSignature(OAuthRequest request, String tokenSecret) {
         return signature;
     }
 
-    private void appendSignature(OAuthRequest request) {
+    protected void appendSignature(OAuthRequest request) {
         final OAuthConfig config = getConfig();
         switch (config.getSignatureType()) {
             case Header:

File: scribejava-apis/src/main/java/com/github/scribejava/apis/BoxApi20.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 
 /**
  * Box.com Api
@@ -31,7 +31,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/Foursquare2Api.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.Verb;
 
 public class Foursquare2Api extends DefaultApi20 {
@@ -33,7 +33,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/KaixinApi20.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.Verb;
 
 /**
@@ -36,7 +36,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LinkedInApi20.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.scribejava.apis.service.LinkedIn20ServiceImpl;
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.OAuthConfig;
 import com.github.scribejava.core.oauth.OAuth20Service;
 
@@ -35,7 +35,7 @@ public OAuth20Service createService(OAuthConfig config) {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LiveApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.Verb;
 
 public class LiveApi extends DefaultApi20 {
@@ -33,7 +33,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/MisfitApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 
 public class MisfitApi extends DefaultApi20 {
 
@@ -28,7 +28,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/NaverApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 
 public class NaverApi extends DefaultApi20 {
     protected NaverApi() {
@@ -29,7 +29,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/OdnoklassnikiApi.java
Patch:
@@ -2,7 +2,7 @@
 
 import com.github.scribejava.apis.service.OdnoklassnikiServiceImpl;
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.OAuthConfig;
 import com.github.scribejava.core.oauth.OAuth20Service;
 
@@ -35,7 +35,7 @@ public OAuth20Service createService(OAuthConfig config) {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/PinterestApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 
 public class PinterestApi extends DefaultApi20 {
 
@@ -27,7 +27,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/RenrenApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.Verb;
 
 /**
@@ -36,7 +36,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SinaWeiboApi20.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 
 /**
  * SinaWeibo OAuth 2.0 api.
@@ -30,7 +30,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/StackExchangeApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.extractors.OAuth2AccessTokenExtractor;
 import com.github.scribejava.core.extractors.TokenExtractor;
 import com.github.scribejava.core.model.OAuth2AccessToken;
@@ -39,7 +39,7 @@ public TokenExtractor<OAuth2AccessToken> getAccessTokenExtractor() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ViadeoApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.Verb;
 
 public class ViadeoApi extends DefaultApi20 {
@@ -33,7 +33,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/VkontakteApi.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.apis;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.Verb;
 
 public class VkontakteApi extends DefaultApi20 {
@@ -33,7 +33,7 @@ protected String getAuthorizationBaseUrl() {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FreelancerExample.java
Patch:
@@ -7,7 +7,6 @@
 import com.github.scribejava.core.model.OAuth1RequestToken;
 import com.github.scribejava.core.model.OAuthRequest;
 import com.github.scribejava.core.model.Response;
-import com.github.scribejava.core.model.SignatureType;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.oauth.OAuth10aService;
 import java.io.IOException;
@@ -26,7 +25,6 @@ private FreelancerExample() {
 
     public static void main(String... args) throws IOException, InterruptedException, ExecutionException {
         final OAuth10aService service = new ServiceBuilder()
-                .signatureType(SignatureType.QueryString)
                 .apiKey("your client id")
                 .apiSecret("your client secret")
                 .scope(SCOPE)

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/DefaultApi20.java
Patch:
@@ -91,7 +91,7 @@ public OAuth20Service createService(OAuthConfig config) {
         return new OAuth20Service(this, config);
     }
 
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_AUTHORIZATION_REQUEST_HEADER_FIELD;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_AUTHORIZATION_REQUEST_HEADER_FIELD;
     }
 }

File: scribejava-core/src/test/java/com/github/scribejava/core/oauth/OAuth20ApiUnit.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.core.oauth;
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
-import com.github.scribejava.core.builder.api.SignatureType;
+import com.github.scribejava.core.builder.api.OAuth2SignatureType;
 import com.github.scribejava.core.model.OAuthConfig;
 
 class OAuth20ApiUnit extends DefaultApi20 {
@@ -22,7 +22,7 @@ public OAuth20Service createService(OAuthConfig config) {
     }
 
     @Override
-    public SignatureType getSignatureType() {
-        return SignatureType.BEARER_URI_QUERY_PARAMETER;
+    public OAuth2SignatureType getSignatureType() {
+        return OAuth2SignatureType.BEARER_URI_QUERY_PARAMETER;
     }
 }

File: scribejava-httpclient-okhttp/src/test/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClientTest.java
Patch:
@@ -27,7 +27,7 @@ public class OkHttpHttpClientTest {
     public void setUp() {
         final HttpClient client = new OkHttpHttpClient(new OkHttpClient());
         oAuthService = new OAuth20Service(null,
-                new OAuthConfig("test", "test", null, null, null, null, null, null, null, null, client));
+                new OAuthConfig("test", "test", null, null, null, null, null, null, null, client));
     }
 
 

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/OAuth2AccessTokenJsonExtractor.java
Patch:
@@ -50,8 +50,10 @@ public OAuth2AccessToken extract(Response response) throws IOException {
 
     /**
      * Related documentation: https://tools.ietf.org/html/rfc6749#section-5.2
+     *
+     * @param response response
      */
-    private static void generateError(String response) {
+    protected void generateError(String response) {
         final String errorInString = extractParameter(response, ERROR_REGEX, true);
         final String errorDescription = extractParameter(response, ERROR_DESCRIPTION_REGEX, false);
         final String errorUriInString = extractParameter(response, ERROR_URI_REGEX, false);

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SalesforceExample.java
Patch:
@@ -87,7 +87,6 @@ public static void main(String... args) throws IOException, NoSuchAlgorithmExcep
         System.out.println("Full URL: " + url);
 
         final OAuthRequest request = new OAuthRequest(Verb.GET, url);
-        request.addHeader("Authorization", "Bearer " + accessToken.getAccessToken());
         final Response response = service.execute(request);
         System.out.println();
         System.out.println(response.getCode());

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SalesforceNingAsyncExample.java
Patch:
@@ -83,7 +83,6 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
             System.out.println();
             System.out.println("Full URL: " + url);
             final OAuthRequest request = new OAuthRequest(Verb.GET, url);
-            request.addHeader("Authorization", "Bearer " + accessToken.getAccessToken());
             final Response response = service.execute(request, null).get();
             System.out.println();
             System.out.println(response.getCode());

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthRequestAsync.java
Patch:
@@ -8,6 +8,9 @@
 public class OAuthRequestAsync extends OAuthRequest {
 
     /**
+     *
+     * @param verb verb
+     * @param url url
      *
      * @deprecated use {@link OAuthRequest#OAuthRequest(com.github.scribejava.core.model.Verb, java.lang.String) }
      */

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -187,7 +187,7 @@ public String getVersion() {
 
     @Override
     public void signRequest(OAuth2AccessToken accessToken, OAuthRequest request) {
-        request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getAccessToken());
+        api.getSignatureType().signRequest(accessToken, request);
     }
 
     /**

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TheThingsNetworkV1StagingExample.java
Patch:
@@ -90,7 +90,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println();
         System.out.println(response.getCode());
 
-        if(response.getCode()==401) {
+        if (response.getCode() == 401) {
             System.out.println("Not authorised: "+response.getBody());
         } else {
             System.out.println("You should see a JSON array of your registered applications:");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TheThingsNetworkV2PreviewExample.java
Patch:
@@ -87,7 +87,7 @@ public static void main(String... args) throws IOException, InterruptedException
         System.out.println();
         System.out.println(response.getCode());
 
-        if(response.getCode()==401) {
+        if (response.getCode() == 401) {
             System.out.println("Not authorised: "+response.getBody());
         } else {
             System.out.println("You should see a JSON array of your registered applications:");

File: scribejava-core/src/main/java/com/github/scribejava/core/httpclient/HttpClient.java
Patch:
@@ -11,6 +11,9 @@
 import java.util.concurrent.Future;
 
 public interface HttpClient {
+    String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
+    String CONTENT_TYPE = "Content-Type";
+    String CONTENT_LENGTH = "Content-Length";
 
     void close() throws IOException;
 

File: scribejava-core/src/main/java/com/github/scribejava/core/model/AbstractRequest.java
Patch:
@@ -14,9 +14,6 @@
  */
 public abstract class AbstractRequest {
 
-    public static final String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
-    public static final String CONTENT_TYPE = "Content-Type";
-    protected static final String CONTENT_LENGTH = "Content-Length";
     private static final String OAUTH_PREFIX = "oauth_";
 
     private final String url;

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncNingExample.java
Patch:
@@ -7,11 +7,9 @@
 import java.util.concurrent.ExecutionException;
 import com.github.scribejava.apis.FacebookApi;
 import com.github.scribejava.core.builder.ServiceBuilder;
-import com.github.scribejava.core.model.ForceTypeOfHttpRequest;
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuthRequestAsync;
 import com.github.scribejava.core.model.Response;
-import com.github.scribejava.core.model.ScribeJavaConfig;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.oauth.OAuth20Service;
 import java.io.IOException;
@@ -29,7 +27,6 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
         final String clientId = "your client id";
         final String clientSecret = "your client secret";
         final String secretState = "secret" + new Random().nextInt(999_999);
-        ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.FORCE_ASYNC_ONLY_HTTP_REQUESTS);
         final NingHttpClientConfig clientConfig = new NingHttpClientConfig(new AsyncHttpClientConfig.Builder()
                 .setMaxConnections(5)
                 .setRequestTimeout(10_000)

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20AsyncAHCExample.java
Patch:
@@ -5,12 +5,10 @@
 import com.github.scribejava.apis.GoogleApi20;
 import com.github.scribejava.httpclient.ahc.AhcHttpClientConfig;
 import com.github.scribejava.core.builder.ServiceBuilder;
-import com.github.scribejava.core.model.ForceTypeOfHttpRequest;
 import com.github.scribejava.core.httpclient.HttpClientConfig;
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuthRequestAsync;
 import com.github.scribejava.core.model.Response;
-import com.github.scribejava.core.model.ScribeJavaConfig;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.oauth.OAuth20Service;
 import java.io.IOException;
@@ -32,7 +30,6 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
         final String clientId = "your client id";
         final String clientSecret = "your client secret";
         final String secretState = "secret" + new Random().nextInt(999_999);
-        ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.FORCE_ASYNC_ONLY_HTTP_REQUESTS);
         final HttpClientConfig clientConfig = new AhcHttpClientConfig(new DefaultAsyncHttpClientConfig.Builder()
                 .setMaxConnections(5)
                 .setRequestTimeout(10_000)

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SalesforceNingAsyncExample.java
Patch:
@@ -11,10 +11,8 @@
 import com.github.scribejava.apis.salesforce.SalesforceToken;
 import com.github.scribejava.httpclient.ning.NingHttpClientConfig;
 import com.github.scribejava.core.builder.ServiceBuilder;
-import com.github.scribejava.core.model.ForceTypeOfHttpRequest;
 import com.github.scribejava.core.model.OAuthRequestAsync;
 import com.github.scribejava.core.model.Response;
-import com.github.scribejava.core.model.ScribeJavaConfig;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.oauth.OAuth20Service;
 import com.ning.http.client.AsyncHttpClientConfig;
@@ -35,7 +33,6 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
         final String clientId = "your client id";
         final String clientSecret = "your client secret";
 
-        ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.FORCE_ASYNC_ONLY_HTTP_REQUESTS);
         final NingHttpClientConfig clientConfig = new NingHttpClientConfig(new AsyncHttpClientConfig.Builder()
                 .setMaxConnections(5)
                 .setRequestTimeout(10_000)

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExternalHttpExample.java
Patch:
@@ -3,11 +3,9 @@
 import java.util.Scanner;
 import com.github.scribejava.core.builder.ServiceBuilder;
 import com.github.scribejava.apis.VkontakteApi;
-import com.github.scribejava.core.model.ForceTypeOfHttpRequest;
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuthRequestAsync;
 import com.github.scribejava.core.model.Response;
-import com.github.scribejava.core.model.ScribeJavaConfig;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.oauth.OAuth20Service;
 import com.github.scribejava.httpclient.ahc.AhcHttpClient;
@@ -28,7 +26,6 @@ public static void main(String... args) throws IOException, InterruptedException
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";
-        ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.FORCE_ASYNC_ONLY_HTTP_REQUESTS);
 
         //create any http client externally
         final DefaultAsyncHttpClientConfig httpClientConfig = new DefaultAsyncHttpClientConfig.Builder()

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GitHubAsyncOkHttpExample.java
Patch:
@@ -8,7 +8,6 @@
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.oauth.OAuth20Service;
 import com.github.scribejava.httpclient.okhttp.OkHttpHttpClientConfig;
-import okhttp3.OkHttpClient;
 
 import java.io.IOException;
 import java.util.Random;
@@ -28,13 +27,12 @@ public static void main(String... args) throws IOException, ExecutionException,
         final String clientId = "your client id";
         final String clientSecret = "your client secret";
         final String secretState = "secret" + new Random().nextInt(999_999);
-        final OkHttpClient.Builder okHttpBuilder = new OkHttpClient.Builder();
         final OAuth20Service service = new ServiceBuilder()
                 .apiKey(clientId)
                 .apiSecret(clientSecret)
                 .state(secretState)
                 .callback("http://www.example.com/oauth_callback/")
-                .httpClientConfig(new OkHttpHttpClientConfig(okHttpBuilder))
+                .httpClientConfig(OkHttpHttpClientConfig.defaultConfig())
                 .build(GitHubApi.instance());
         final Scanner in = new Scanner(System.in, "UTF-8");
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20AsyncAHCExample.java
Patch:
@@ -6,7 +6,7 @@
 import com.github.scribejava.httpclient.ahc.AhcHttpClientConfig;
 import com.github.scribejava.core.builder.ServiceBuilder;
 import com.github.scribejava.core.model.ForceTypeOfHttpRequest;
-import com.github.scribejava.core.model.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClientConfig;
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuthRequestAsync;
 import com.github.scribejava.core.model.Response;
@@ -33,7 +33,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
         final String clientSecret = "your client secret";
         final String secretState = "secret" + new Random().nextInt(999_999);
         ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.FORCE_ASYNC_ONLY_HTTP_REQUESTS);
-        final HttpClient.Config clientConfig = new AhcHttpClientConfig(new DefaultAsyncHttpClientConfig.Builder()
+        final HttpClientConfig clientConfig = new AhcHttpClientConfig(new DefaultAsyncHttpClientConfig.Builder()
                 .setMaxConnections(5)
                 .setRequestTimeout(10_000)
                 .setPooledConnectionIdleTimeout(1_000)

File: scribejava-core/src/main/java/com/github/scribejava/core/httpclient/HttpClientProvider.java
Patch:
@@ -1,8 +1,6 @@
 package com.github.scribejava.core.httpclient;
 
-import com.github.scribejava.core.model.HttpClient;
-
 public interface HttpClientProvider {
 
-    HttpClient createClient(HttpClient.Config httpClientConfig);
+    HttpClient createClient(HttpClientConfig httpClientConfig);
 }

File: scribejava-httpclient-ahc/src/main/java/com/github/scribejava/httpclient/ahc/AhcProvider.java
Patch:
@@ -1,12 +1,13 @@
 package com.github.scribejava.httpclient.ahc;
 
 import com.github.scribejava.core.httpclient.HttpClientProvider;
-import com.github.scribejava.core.model.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClientConfig;
 
 public class AhcProvider implements HttpClientProvider {
 
     @Override
-    public HttpClient createClient(HttpClient.Config config) {
+    public HttpClient createClient(HttpClientConfig config) {
         if (config instanceof AhcHttpClientConfig) {
             return new AhcHttpClient((AhcHttpClientConfig) config);
         }

File: scribejava-httpclient-ning/src/main/java/com/github/scribejava/httpclient/ning/NingProvider.java
Patch:
@@ -1,12 +1,13 @@
 package com.github.scribejava.httpclient.ning;
 
 import com.github.scribejava.core.httpclient.HttpClientProvider;
-import com.github.scribejava.core.model.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClientConfig;
 
 public class NingProvider implements HttpClientProvider {
 
     @Override
-    public HttpClient createClient(HttpClient.Config httpClientConfig) {
+    public HttpClient createClient(HttpClientConfig httpClientConfig) {
         if (httpClientConfig instanceof NingHttpClientConfig) {
             return new NingHttpClient((NingHttpClientConfig) httpClientConfig);
         }

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java
Patch:
@@ -1,7 +1,7 @@
 package com.github.scribejava.httpclient.okhttp;
 
 import com.github.scribejava.core.model.AbstractRequest;
-import com.github.scribejava.core.model.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClient;
 import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
 import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.OAuthRequestAsync;
@@ -28,7 +28,8 @@ public class OkHttpHttpClient implements HttpClient {
     private final OkHttpClient client;
 
     public OkHttpHttpClient(OkHttpHttpClientConfig config) {
-        client = config.getClientBuilder().build();
+        final OkHttpClient.Builder clientBuilder = config.getClientBuilder();
+        client = clientBuilder == null ? new OkHttpClient() : clientBuilder.build();
     }
 
     public OkHttpHttpClient(OkHttpClient client) {

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpProvider.java
Patch:
@@ -1,12 +1,13 @@
 package com.github.scribejava.httpclient.okhttp;
 
 import com.github.scribejava.core.httpclient.HttpClientProvider;
-import com.github.scribejava.core.model.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClientConfig;
 
 public class OkHttpProvider implements HttpClientProvider {
 
     @Override
-    public HttpClient createClient(HttpClient.Config config) {
+    public HttpClient createClient(HttpClientConfig config) {
         if (config instanceof OkHttpHttpClientConfig) {
             return new OkHttpHttpClient((OkHttpHttpClientConfig) config);
         }

File: scribejava-httpclient-okhttp/src/test/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClientTest.java
Patch:
@@ -1,6 +1,6 @@
 package com.github.scribejava.httpclient.okhttp;
 
-import com.github.scribejava.core.model.HttpClient;
+import com.github.scribejava.core.httpclient.HttpClient;
 import com.github.scribejava.core.model.OAuthConfig;
 import com.github.scribejava.core.model.OAuthRequestAsync;
 import com.github.scribejava.core.model.Response;

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExternalHttpExample.java
Patch:
@@ -30,7 +30,7 @@ public static void main(String... args) throws IOException, InterruptedException
         final String clientSecret = "your client secret";
         ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.FORCE_ASYNC_ONLY_HTTP_REQUESTS);
 
-        //create any http cleint externally
+        //create any http client externally
         final DefaultAsyncHttpClientConfig httpClientConfig = new DefaultAsyncHttpClientConfig.Builder()
                 .setMaxConnections(5)
                 .setRequestTimeout(10_000)

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OAuthAsyncCompletionHandler.java
Patch:
@@ -58,8 +58,8 @@ public void onResponse(Call call, okhttp3.Response okHttpResponse) throws IOExce
             final Response response = new Response(okHttpResponse.code(),
                                                     okHttpResponse.message(),
                                                     headersMap,
-                                                    okHttpResponse.body().string(),
-                                                    null); // cannot return both body String and InputStream
+                                                    null, // cannot return both body String and InputStream
+                                                    okHttpResponse.body().byteStream());
 
             @SuppressWarnings("unchecked")
             final T t = converter == null ? (T) response : converter.convert(response);

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java
Patch:
@@ -47,7 +47,7 @@ public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers,
 
         // prepare body
         RequestBody body = null;
-        if (bodyContents != null && !bodyContents.isEmpty() && HttpMethod.permitsRequestBody(method)) {
+        if (bodyContents != null && HttpMethod.permitsRequestBody(method)) {
             final String contentType = headers.containsKey(AbstractRequest.CONTENT_TYPE) ?
                                          headers.get(AbstractRequest.CONTENT_TYPE) : DEFAULT_CONTENT_TYPE;
             body = RequestBody.create(MediaType.parse(contentType), bodyContents);

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OAuthAsyncCompletionHandler.java
Patch:
@@ -62,7 +62,8 @@ public void onResponse(Call call, okhttp3.Response okHttpResponse) throws IOExce
                                                     null); // cannot return both body String and InputStream
 
             @SuppressWarnings("unchecked")
-            final T t = result = converter == null ? (T) response : converter.convert(response);
+            final T t = converter == null ? (T) response : converter.convert(response);
+            result = t;
             if (callback != null) {
                 callback.onCompleted(t);
             }

File: scribejava-httpclient-okhttp/src/main/java/com/github/scribejava/httpclient/okhttp/OkHttpHttpClient.java
Patch:
@@ -47,8 +47,8 @@ public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers,
                 requestBuilder.get();
                 break;
             case POST:
-                String contentType = headers.containsKey(AbstractRequest.CONTENT_TYPE) ?
-                                       headers.get(AbstractRequest.CONTENT_TYPE) : DEFAULT_CONTENT_TYPE;
+                final String contentType = headers.containsKey(AbstractRequest.CONTENT_TYPE) ?
+                                             headers.get(AbstractRequest.CONTENT_TYPE) : DEFAULT_CONTENT_TYPE;
 
                 requestBuilder.post(RequestBody.create(MediaType.parse(contentType), bodyContents));
                 break;

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilder.java
Patch:
@@ -178,7 +178,7 @@ private OAuthConfig createConfig() {
      * @param api will build Service for this API
      * @return fully configured {@link S}
      */
-    public <S extends OAuthService> S build(BaseApi<S> api) {
+    public <S extends OAuthService<?>> S build(BaseApi<S> api) {
         return api.createService(createConfig());
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/BaseApi.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.scribejava.core.model.OAuthConfig;
 import com.github.scribejava.core.oauth.OAuthService;
 
-public interface BaseApi<T extends OAuthService> {
+public interface BaseApi<T extends OAuthService<?>> {
 
     T createService(OAuthConfig config);
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/model/AbstractRequest.java
Patch:
@@ -25,7 +25,7 @@ public abstract class AbstractRequest {
     private final ParameterList bodyParams = new ParameterList();
     private final Map<String, String> headers = new HashMap<>();
     private boolean followRedirects = true;
-    private final OAuthService service;
+    private final OAuthService<?> service;
 
     private String payload;
     private String charset;
@@ -41,7 +41,7 @@ public abstract class AbstractRequest {
      * @param url resource URL
      * @param service OAuthService
      */
-    public AbstractRequest(Verb verb, String url, OAuthService service) {
+    public AbstractRequest(Verb verb, String url, OAuthService<?> service) {
         this.verb = verb;
         this.url = url;
         this.service = service;
@@ -285,7 +285,7 @@ public boolean isFollowRedirects() {
         return followRedirects;
     }
 
-    public OAuthService getService() {
+    public OAuthService<?> getService() {
         return service;
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthRequest.java
Patch:
@@ -12,7 +12,7 @@ public class OAuthRequest extends AbstractRequest {
 
     private HttpURLConnection connection;
 
-    public OAuthRequest(Verb verb, String url, OAuthService service) {
+    public OAuthRequest(Verb verb, String url, OAuthService<?> service) {
         super(verb, url, service);
     }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthRequestAsync.java
Patch:
@@ -8,7 +8,7 @@
 
 public class OAuthRequestAsync extends AbstractRequest {
 
-    public OAuthRequestAsync(Verb verb, String url, OAuthService service) {
+    public OAuthRequestAsync(Verb verb, String url, OAuthService<?> service) {
         super(verb, url, service);
     }
 
@@ -17,7 +17,7 @@ public <T> Future<T> sendAsync(OAuthAsyncRequestCallback<T> callback, ResponseCo
         if (ForceTypeOfHttpRequest.FORCE_SYNC_ONLY_HTTP_REQUESTS == forceTypeOfHttpRequest) {
             throw new OAuthException("Cannot use async operations, only sync");
         }
-        final OAuthService service = getService();
+        final OAuthService<?> service = getService();
         final OAuthConfig config = service.getConfig();
         if (ForceTypeOfHttpRequest.PREFER_SYNC_ONLY_HTTP_REQUESTS == forceTypeOfHttpRequest) {
             config.log("Cannot use async operations, only sync");

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth10aService.java
Patch:
@@ -19,7 +19,7 @@
 /**
  * OAuth 1.0a implementation of {@link OAuthService}
  */
-public class OAuth10aService extends OAuthService {
+public class OAuth10aService extends OAuthService<OAuth1AccessToken> {
 
     private static final String VERSION = "1.0";
     private final DefaultApi10a api;
@@ -134,6 +134,7 @@ protected void prepareAccessTokenRequest(AbstractRequest request, OAuth1RequestT
         appendSignature(request);
     }
 
+    @Override
     public void signRequest(OAuth1AccessToken token, AbstractRequest request) {
         final OAuthConfig config = getConfig();
         config.log("signing request: " + request.getCompleteUrl());

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -16,7 +16,7 @@
 import com.github.scribejava.core.model.Response;
 import java.util.Map;
 
-public class OAuth20Service extends OAuthService {
+public class OAuth20Service extends OAuthService<OAuth2AccessToken> {
 
     private static final String VERSION = "2.0";
     private final DefaultApi20 api;
@@ -169,6 +169,7 @@ public String getVersion() {
         return VERSION;
     }
 
+    @Override
     public void signRequest(OAuth2AccessToken accessToken, AbstractRequest request) {
         request.addQuerystringParameter(OAuthConstants.ACCESS_TOKEN, accessToken.getAccessToken());
     }

File: scribejava-core/src/test/java/com/github/scribejava/core/model/ForceTypeOfHttpRequestTest.java
Patch:
@@ -20,7 +20,7 @@ public class ForceTypeOfHttpRequestTest {
     @Before
     public void setUp() {
         ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.NONE);
-        final OAuthService oAuthService = new OAuth20Service(null, new OAuthConfig("test", "test"));
+        final OAuthService<?> oAuthService = new OAuth20Service(null, new OAuthConfig("test", "test"));
         request = new OAuthRequest(Verb.GET, "http://example.com?qsparam=value&other+param=value+with+spaces",
                 oAuthService);
         requestAsync = new OAuthRequestAsync(Verb.GET, "http://example.com?qsparam=value&other+param=value+with+spaces",

File: scribejava-core/src/test/java/com/github/scribejava/core/model/RequestTest.java
Patch:
@@ -14,7 +14,7 @@ public class RequestTest {
     private OAuthRequest getRequest;
     private OAuthRequest postRequest;
     private ConnectionStub connection;
-    private OAuthService oAuthService;
+    private OAuthService<?> oAuthService;
 
     @Before
     public void setUp() throws MalformedURLException {

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -88,7 +88,7 @@ protected <T extends AbstractRequest> T createAccessTokenRequest(String code, T
 
     public final OAuth2AccessToken refreshAccessToken(String refreshToken) throws IOException {
         final OAuthRequest request = createRefreshTokenRequest(refreshToken,
-                new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint(), this));
+                new OAuthRequest(api.getAccessTokenVerb(), api.getRefreshTokenEndpoint(), this));
 
         return sendAccessTokenRequestSync(request);
     }

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Box20Example.java
Patch:
@@ -16,7 +16,7 @@
 public final class Box20Example {
 
     private static final String NETWORK_NAME = "Box";
-    private static final String PROTECTED_RESOURCE_URL = "https://app.box.com/profile";
+    private static final String PROTECTED_RESOURCE_URL = "https://api.box.com/2.0/users/me";
 
     private Box20Example() {
     }

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TheThingsNetworkV1StagingExample.java
Patch:
@@ -13,12 +13,12 @@
 import java.util.Random;
 import java.util.Scanner;
 
-public final class TTNV1Example {
+public final class TheThingsNetworkV1StagingExample {
 
     private static final String NETWORK_NAME = "TTNv1staging";
     private static final String PROTECTED_RESOURCE_URL = "https://account.thethingsnetwork.org/applications";
 
-    private TTNV1Example() {
+    private TheThingsNetworkV1StagingExample() {
     }
 
     public static void main(String... args) throws IOException {

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TheThingsNetworkV2PreviewExample.java
Patch:
@@ -12,13 +12,13 @@
 import java.util.Random;
 import java.util.Scanner;
 
-public final class TTNV2Example {
+public final class TheThingsNetworkV2PreviewExample {
 
     private static final String NETWORK_NAME = "TTNv2preview";
     private static final String PROTECTED_RESOURCE_URL =
             "https://preview.account.thethingsnetwork.org/api/v2/applications";
 
-    private TTNV2Example() {
+    private TheThingsNetworkV2PreviewExample() {
     }
 
     public static void main(String... args) throws IOException {

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Box20Example.java
Patch:
@@ -24,7 +24,7 @@ private Box20Example() {
     public static void main(String... args) throws IOException {
         //Replace these with your client id and secret
         final String clientId = "your client id";
-        final string clientSecret = "your client secret";
+        final String clientSecret = "your client secret";
         final String secretState = "secret" + new Random().nextInt(999_999);
         final OAuth20Service service = new ServiceBuilder()
                 .apiKey(clientId)

File: scribejava-apis/src/main/java/com/github/scribejava/apis/BoxApi20.java
Patch:
@@ -8,7 +8,7 @@
 public class BoxApi20 extends DefaultApi20 {
 
 
-    protected BoxApi20() {  
+    protected BoxApi20() {
     }
 
     private static class InstanceHolder {

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Box20Example.java
Patch:
@@ -23,7 +23,7 @@ private Box20Example() {
 
     public static void main(String... args) throws IOException {
         //Replace these with your client id and secret
-        final String clientId ="your client id";
+        final String clientId = "your client id";
         final string clientSecret = "your client secret";
         final String secretState = "secret" + new Random().nextInt(999_999);
         final OAuth20Service service = new ServiceBuilder()
@@ -109,4 +109,4 @@ public static void main(String... args) throws IOException {
         }
     }
 
-}
\ No newline at end of file
+}

File: scribejava-apis/src/main/java/com/github/scribejava/apis/NaverApi.java
Patch:
@@ -17,10 +17,12 @@ public static NaverApi instance() {
         return NaverApi.InstanceHolder.INSTANCE;
     }
 
+    @Override
     public String getAccessTokenEndpoint() {
         return "https://nid.naver.com/oauth2.0/token?grant_type=authorization_code";
     }
 
+    @Override
     protected String getAuthorizationBaseUrl() {
         return "https://nid.naver.com/oauth2.0/authorize";
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/TokenExtractor.java
Patch:
@@ -15,8 +15,9 @@ public interface TokenExtractor<T extends Token> {
     /**
      * Extracts the concrete type of token from the contents of an Http Response
      *
-     * @param response the contents of the response
+     * @param response the whole response
      * @return OAuth access token
+     * @throws java.io.IOException in case of troubles while getting body from the response
      */
     T extract(Response response) throws IOException, OAuthException;
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -34,7 +34,7 @@ public OAuth20Service(DefaultApi20 api, OAuthConfig config) {
 
     //sync version, protected to facilitate mocking
     protected OAuth2AccessToken sendAccessTokenRequestSync(OAuthRequest request) throws IOException {
-        return api.getAccessTokenExtractor().extract(request.send().getBody());
+        return api.getAccessTokenExtractor().extract(request.send());
     }
 
     //async version, protected to facilitate mocking
@@ -44,7 +44,7 @@ protected Future<OAuth2AccessToken> sendAccessTokenRequestAsync(OAuthRequestAsyn
         return request.sendAsync(callback, new OAuthRequestAsync.ResponseConverter<OAuth2AccessToken>() {
             @Override
             public OAuth2AccessToken convert(Response response) throws IOException {
-                return getApi().getAccessTokenExtractor().extract(response.getBody());
+                return getApi().getAccessTokenExtractor().extract(response);
             }
         });
     }

File: scribejava-httpclient-ahc/src/main/java/com/github/scribejava/httpclient/ahc/AhcHttpClient.java
Patch:
@@ -14,6 +14,7 @@
 import java.util.concurrent.Future;
 
 import static com.github.scribejava.core.model.AbstractRequest.DEFAULT_CONTENT_TYPE;
+import org.asynchttpclient.BoundRequestBuilder;
 
 public class AhcHttpClient implements HttpClient {
 
@@ -32,14 +33,13 @@ public void close() throws IOException {
     public <T> Future<T> executeAsync(String userAgent, Map<String, String> headers, Verb httpVerb, String completeUrl,
                                       String bodyContents, OAuthAsyncRequestCallback<T> callback,
                                       OAuthRequestAsync.ResponseConverter<T> converter) {
-        final org.asynchttpclient.BoundRequestBuilder boundRequestBuilder;
+        final BoundRequestBuilder boundRequestBuilder;
         switch (httpVerb) {
             case GET:
                 boundRequestBuilder = client.prepareGet(completeUrl);
                 break;
             case POST:
-                org.asynchttpclient.BoundRequestBuilder requestBuilder
-                        = client.preparePost(completeUrl);
+                BoundRequestBuilder requestBuilder = client.preparePost(completeUrl);
                 if (!headers.containsKey(AbstractRequest.CONTENT_TYPE)) {
                     requestBuilder = requestBuilder.addHeader(AbstractRequest.CONTENT_TYPE, DEFAULT_CONTENT_TYPE);
                 }

File: scribejava-httpclient-ahc/src/main/java/com/github/scribejava/httpclient/ahc/OAuthAsyncCompletionHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.github.scribejava.core.async.ahc;
+package com.github.scribejava.httpclient.ahc;
 
 import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
 import com.github.scribejava.core.model.OAuthRequestAsync;

File: scribejava-httpclient-ning/src/main/java/com/github/scribejava/httpclient/ning/OAuthAsyncCompletionHandler.java
Patch:
@@ -1,4 +1,4 @@
-package com.github.scribejava.core.async.ning;
+package com.github.scribejava.httpclient.ning;
 
 import com.github.scribejava.core.model.OAuthAsyncRequestCallback;
 import com.github.scribejava.core.model.OAuthRequestAsync;

File: scribejava-core/src/test/java/com/github/scribejava/core/utils/MapUtilsTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.scribejava.core.utils;
 
+import java.util.LinkedHashMap;
 import java.util.HashMap;
 import java.util.Map;
 import org.junit.Assert;
@@ -9,7 +10,7 @@ public class MapUtilsTest {
 
     @Test
     public void shouldPrettyPrintMap() {
-        final Map<Integer, String> map = new HashMap<>();
+        final Map<Integer, String> map = new LinkedHashMap<>();
         map.put(1, "one");
         map.put(2, "two");
         map.put(3, "three");

File: scribejava-core/src/test/java/com/github/scribejava/core/utils/MapUtilsTest.java
Patch:
@@ -1,5 +1,6 @@
 package com.github.scribejava.core.utils;
 
+import java.util.LinkedHashMap;
 import java.util.HashMap;
 import java.util.Map;
 import org.junit.Assert;
@@ -9,7 +10,7 @@ public class MapUtilsTest {
 
     @Test
     public void shouldPrettyPrintMap() {
-        final Map<Integer, String> map = new HashMap<>();
+        final Map<Integer, String> map = new LinkedHashMap<>();
         map.put(1, "one");
         map.put(2, "two");
         map.put(3, "three");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncNingExample.java
Patch:
@@ -39,7 +39,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
                 .apiSecret(clientSecret)
                 .state(secretState)
                 .callback("http://www.example.com/oauth_callback/")
-                .asyncHttpClientConfig(clientConfig)
+                .asyncNingHttpClientConfig(clientConfig)
                 .build(FacebookApi.instance());
 
         final Scanner in = new Scanner(System.in, "UTF-8");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20AsyncAHCExample.java
Patch:
@@ -42,7 +42,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
                 .scope("profile") // replace with desired scope
                 .state(secretState)
                 .callback("http://example.com/callback")
-                .asyncHttpClientConfig(clientConfig)
+                .asyncAHCHttpClientConfig(clientConfig)
                 .build(GoogleApi20.instance());
         final Scanner in = new Scanner(System.in, "UTF-8");
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruAsyncExample.java
Patch:
@@ -35,7 +35,7 @@ public static void main(String... args) throws InterruptedException, ExecutionEx
                 .apiKey(clientId)
                 .apiSecret(clientSecret)
                 .callback("http://www.example.com/oauth_callback/")
-                .asyncHttpClientConfig(clientConfig)
+                .asyncNingHttpClientConfig(clientConfig)
                 .build(MailruApi.instance());
 
         final Scanner in = new Scanner(System.in, "UTF-8");

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GitHubApi.java
Patch:
@@ -27,7 +27,7 @@ public static GitHubApi instance() {
 
     @Override
     public Verb getAccessTokenVerb() {
-        return Verb.GET;
+        return Verb.POST;
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ConstantContactApi2.java
Patch:
@@ -6,7 +6,6 @@
 import com.github.scribejava.core.extractors.TokenExtractor;
 import com.github.scribejava.core.model.OAuth2AccessToken;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.utils.OAuthEncoder;
 
 public class ConstantContactApi2 extends DefaultApi20 {
@@ -28,7 +27,7 @@ public static ConstantContactApi2 instance() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://oauth2.constantcontact.com/oauth2/oauth/token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://oauth2.constantcontact.com/oauth2/oauth/token";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/Foursquare2Api.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.utils.OAuthEncoder;
 import com.github.scribejava.core.utils.Preconditions;
@@ -30,7 +29,7 @@ public Verb getAccessTokenVerb() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://foursquare.com/oauth2/access_token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://foursquare.com/oauth2/access_token";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/KaixinApi20.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.utils.OAuthEncoder;
 
@@ -33,7 +32,7 @@ public Verb getAccessTokenVerb() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://api.kaixin001.com/oauth2/access_token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://api.kaixin001.com/oauth2/access_token";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LiveApi.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.utils.OAuthEncoder;
 import com.github.scribejava.core.utils.Preconditions;
@@ -31,7 +30,7 @@ public Verb getAccessTokenVerb() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://login.live.com/oauth20_token.srf?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://login.live.com/oauth20_token.srf";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/PinterestApi.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.utils.OAuthEncoder;
 import com.github.scribejava.core.utils.Preconditions;
 
@@ -25,7 +24,7 @@ public static PinterestApi instance() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://api.pinterest.com/v1/oauth/token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://api.pinterest.com/v1/oauth/token";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/RenrenApi.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.utils.OAuthEncoder;
 
@@ -33,7 +32,7 @@ public Verb getAccessTokenVerb() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://graph.renren.com/oauth/token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://graph.renren.com/oauth/token";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SinaWeiboApi20.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.utils.OAuthEncoder;
 
 /**
@@ -27,7 +26,7 @@ public static SinaWeiboApi20 instance() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://api.weibo.com/oauth2/access_token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://api.weibo.com/oauth2/access_token";
     }
 
     @Override

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ViadeoApi.java
Patch:
@@ -2,7 +2,6 @@
 
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.Verb;
 import com.github.scribejava.core.utils.OAuthEncoder;
 import com.github.scribejava.core.utils.Preconditions;
@@ -31,7 +30,7 @@ public Verb getAccessTokenVerb() {
 
     @Override
     public String getAccessTokenEndpoint() {
-        return "https://secure.viadeo.com/oauth-provider/access_token2?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+        return "https://secure.viadeo.com/oauth-provider/access_token2";
     }
 
     @Override

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/HHExample.java
Patch:
@@ -24,7 +24,6 @@ public static void main(String... args) {
                 .apiKey(clientId)
                 .apiSecret(clientSecret)
                 .callback("http://your.site.com/callback")
-                .grantType("authorization_code")
                 .build(HHApi.instance());
         final Scanner in = new Scanner(System.in);
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/OdnoklassnikiExample.java
Patch:
@@ -4,7 +4,6 @@
 import com.github.scribejava.core.builder.ServiceBuilder;
 import com.github.scribejava.apis.OdnoklassnikiApi;
 import com.github.scribejava.core.model.OAuth2AccessToken;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.OAuthRequest;
 import com.github.scribejava.core.model.Response;
 import com.github.scribejava.core.model.Verb;
@@ -25,7 +24,6 @@ public static void main(String... args) {
         final OAuth20Service service = new ServiceBuilder()
                 .apiKey(clientId)
                 .apiSecret(secretKey)
-                .grantType(OAuthConstants.AUTHORIZATION_CODE)
                 .callback("http://your.site.com/callback")
                 .build(OdnoklassnikiApi.instance());
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TutByExample.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Scanner;
 
 import com.github.scribejava.core.builder.ServiceBuilder;
-import com.github.scribejava.core.model.OAuthConstants;
 import com.github.scribejava.core.model.OAuthRequest;
 import com.github.scribejava.core.model.Response;
 import com.github.scribejava.core.model.Verb;
@@ -24,7 +23,6 @@ public static void main(String... args) {
         final OAuth20Service service = new ServiceBuilder()
                 .apiKey(clientId)
                 .apiSecret(clientSecret)
-                .grantType(OAuthConstants.AUTHORIZATION_CODE)
                 .callback("http://www.example.com/oauth_callback/")
                 .build(TutByApi.instance());
         final Scanner in = new Scanner(System.in, "UTF-8");

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -87,9 +87,7 @@ protected <T extends AbstractRequest> T createAccessTokenRequest(String code, T
         if (config.hasScope()) {
             request.addParameter(OAuthConstants.SCOPE, config.getScope());
         }
-        if (config.hasGrantType()) {
-            request.addParameter(OAuthConstants.GRANT_TYPE, config.getGrantType());
-        }
+        request.addParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);
         return request;
     }
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/OdnoklassnikiExample.java
Patch:
@@ -25,7 +25,6 @@ public static void main(String... args) {
         final OAuth20Service service = new ServiceBuilder()
                 .apiKey(clientId)
                 .apiSecret(secretKey)
-                .scope("VALUABLE_ACCESS")
                 .grantType(OAuthConstants.AUTHORIZATION_CODE)
                 .callback("http://your.site.com/callback")
                 .build(OdnoklassnikiApi.instance());

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/AbstractServiceBuilder.java
Patch:
@@ -176,6 +176,7 @@ public String getResponseType() {
     /**
      * Returns the fully configured {@link S}
      *
+     * @param <S> OAuthService implementation (OAuth1/OAuth2/any API specific)
      * @param api will build Service for this API
      * @return fully configured {@link S}
      */

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/BaseApi.java
Patch:
@@ -3,7 +3,7 @@
 import com.github.scribejava.core.model.OAuthConfig;
 import com.github.scribejava.core.oauth.OAuthService;
 
-
 public interface BaseApi<T extends OAuthService> {
-	T createService(OAuthConfig config);
+
+    T createService(OAuthConfig config);
 }

File: scribejava-core/src/test/java/com/github/scribejava/core/oauth/OAuth20ApiUnit.java
Patch:
@@ -3,9 +3,8 @@
 import com.github.scribejava.core.builder.api.DefaultApi20;
 import com.github.scribejava.core.model.OAuthConfig;
 
-/**
- */
 class OAuth20ApiUnit extends DefaultApi20 {
+
     @Override
     public String getAccessTokenEndpoint() {
         return "http://localhost:8080/token";
@@ -16,6 +15,7 @@ public String getAuthorizationUrl(OAuthConfig config) {
         return "http://localhost:8080/authorize";
     }
 
+    @Override
     public OAuth20Service createService(OAuthConfig config) {
         return new OAuth20ServiceUnit(this, config);
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/DefaultApi20.java
Patch:
@@ -34,12 +34,12 @@ public TokenExtractor<OAuth2AccessToken> getAccessTokenExtractor() {
     }
 
     /**
-     * Returns the verb for the access token endpoint (defaults to GET)
+     * Returns the verb for the access token endpoint (defaults to POST)
      *
      * @return access token endpoint verb
      */
     public Verb getAccessTokenVerb() {
-        return Verb.GET;
+        return Verb.POST;
     }
 
     /**

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GoogleApi20.java
Patch:
@@ -14,7 +14,7 @@
 public class GoogleApi20 extends DefaultApi20 {
 
     private static final String AUTHORIZE_URL
-            = "https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=%s&redirect_uri=%s&scope=%s";
+            = "https://accounts.google.com/o/oauth2/auth?response_type=%s&client_id=%s&redirect_uri=%s&scope=%s";
 
     protected GoogleApi20() {
     }
@@ -39,8 +39,8 @@ public String getAccessTokenEndpoint() {
 
     @Override
     public String getAuthorizationUrl(OAuthConfig config) {
-        final StringBuilder sb = new StringBuilder(String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(
-                config.getCallback()), OAuthEncoder.encode(config.getScope())));
+        final StringBuilder sb = new StringBuilder(String.format(AUTHORIZE_URL, config.getResponseType(),
+                config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.getScope())));
 
         final String state = config.getState();
         if (state != null) {

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilder.java
Patch:
@@ -28,8 +28,8 @@ public ServiceBuilder readTimeout(Integer readTimeout) {
     protected OAuthConfig createConfig() {
         super.checkPreconditions();
         final OAuthConfig config = new OAuthConfig(getApiKey(), getApiSecret(), getCallback(), getSignatureType(),
-                getScope(), getDebugStream(), connectTimeout, readTimeout, getGrantType());
-        config.setState(getState());
+                getScope(), getDebugStream(), connectTimeout, readTimeout, getGrantType(), getState(),
+                getResponseType());
         return config;
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilderAsync.java
Patch:
@@ -25,8 +25,8 @@ public void checkPreconditions() {
     protected OAuthConfigAsync createConfig() {
         checkPreconditions();
         final OAuthConfigAsync configAsync = new OAuthConfigAsync(getApiKey(), getApiSecret(), getCallback(),
-                getSignatureType(), getScope(), getGrantType(), getDebugStream(), asyncHttpClientConfig);
-        configAsync.setState(getState());
+                getSignatureType(), getScope(), getGrantType(), getState(), getResponseType(), getDebugStream(),
+                asyncHttpClientConfig);
         configAsync.setAsyncHttpProviderClassName(asyncHttpProviderClassName);
         return configAsync;
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthConfigAsync.java
Patch:
@@ -13,8 +13,9 @@ public OAuthConfigAsync(String key, String secret) {
     }
 
     public OAuthConfigAsync(String key, String secret, String callback, SignatureType type, String scope,
-            String grantType, OutputStream stream, AsyncHttpClientConfig asyncHttpClientConfig) {
-        super(key, secret, callback, type, scope, stream, null, null, grantType);
+            String grantType, String state, String responseType, OutputStream stream,
+            AsyncHttpClientConfig asyncHttpClientConfig) {
+        super(key, secret, callback, type, scope, stream, null, null, grantType, state, responseType);
         this.asyncHttpClientConfig = asyncHttpClientConfig;
     }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/OAuth2AccessTokenExtractor.java
Patch:
@@ -8,7 +8,7 @@
 import com.github.scribejava.core.utils.Preconditions;
 
 /**
- * Default implementation of {@link TokenExtractor} for OAuth 2.0
+ * Custom implementation of {@link TokenExtractor} for OAuth 2.0
  */
 public class OAuth2AccessTokenExtractor implements TokenExtractor<OAuth2AccessToken> {
 

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/OAuth2AccessTokenJsonExtractor.java
Patch:
@@ -7,7 +7,7 @@
 import com.github.scribejava.core.utils.Preconditions;
 
 /**
- * JSON implementation of {@link TokenExtractor} for OAuth 2.0
+ * JSON (default) implementation of {@link TokenExtractor} for OAuth 2.0
  */
 public class OAuth2AccessTokenJsonExtractor implements TokenExtractor<OAuth2AccessToken> {
 

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth20Service.java
Patch:
@@ -80,7 +80,7 @@ protected <T extends AbstractRequest> T createAccessTokenRequest(Verifier verifi
 
     public final OAuth2AccessToken refreshAccessToken(String refreshToken) {
         final Response response = createRefreshTokenRequest(refreshToken,
-                new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint(), this)).send();
+                new OAuthRequest(api.getAccessTokenVerb(), api.getRefreshTokenEndpoint(), this)).send();
         return api.getAccessTokenExtractor().extract(response.getBody());
     }
 
@@ -92,7 +92,7 @@ public final Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshTok
     public final Future<OAuth2AccessToken> refreshAccessTokenAsync(String refreshToken,
             OAuthAsyncRequestCallback<OAuth2AccessToken> callback, ProxyServer proxyServer) {
         final OAuthRequestAsync request = createRefreshTokenRequest(refreshToken,
-                new OAuthRequestAsync(api.getAccessTokenVerb(), api.getAccessTokenEndpoint(), this));
+                new OAuthRequestAsync(api.getAccessTokenVerb(), api.getRefreshTokenEndpoint(), this));
         return request.sendAsync(callback, new OAuthRequestAsync.ResponseConverter<OAuth2AccessToken>() {
             @Override
             public OAuth2AccessToken convert(com.ning.http.client.Response response) throws IOException {

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/AbstractOAuth1TokenExtractor.java
Patch:
@@ -8,7 +8,7 @@
 import com.github.scribejava.core.utils.Preconditions;
 
 /**
- * Default implementation of {@link TokenExtractor} for OAuth 1.0a
+ * Abstract base implementation of {@link TokenExtractor} for OAuth 1.0a
  *
  * The process for extracting access and request tokens is similar so this class can do both things.
  *

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TumblrExample.java
Patch:
@@ -32,7 +32,7 @@ public static void main(String... args) {
         System.out.println("Got the Request Token!");
         System.out.println();
 
-        System.out.println("Now go and authorize Scribe here:");
+        System.out.println("Now go and authorize ScribeJava here:");
         System.out.println(service.getAuthorizationUrl(requestToken));
         System.out.println("And paste the verifier here");
         System.out.print(">>");

File: scribejava-apis/src/main/java/com/github/scribejava/apis/StackExchangeApi.java
Patch:
@@ -16,8 +16,7 @@
  */
 public class StackExchangeApi extends DefaultApi20 {
 
-    private static final String AUTHORIZE_URL
-    = "https://stackexchange.com/oauth?client_id=%s&redirect_uri=%s";
+    private static final String AUTHORIZE_URL = "https://stackexchange.com/oauth?client_id=%s&redirect_uri=%s";
 
     protected StackExchangeApi() {
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ConstantContactApi.java
Patch:
@@ -5,7 +5,8 @@
 
 public class ConstantContactApi extends DefaultApi10a {
 
-    private static final String AUTHORIZE_URL = "https://oauth.constantcontact.com/ws/oauth/confirm_access?oauth_token=%s";
+    private static final String AUTHORIZE_URL
+            = "https://oauth.constantcontact.com/ws/oauth/confirm_access?oauth_token=%s";
 
     private ConstantContactApi() {
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/DoktornaraboteApi.java
Patch:
@@ -13,7 +13,8 @@
 
 public class DoktornaraboteApi extends DefaultApi20 {
 
-    private static final String AUTHORIZE_URL = "http://auth.doktornarabote.ru/OAuth/Authorize?response_type=code&client_id=%s&redirect_uri=%s&scope=%s";
+    private static final String AUTHORIZE_URL
+            = "http://auth.doktornarabote.ru/OAuth/Authorize?response_type=code&client_id=%s&redirect_uri=%s&scope=%s";
     private static final String TOKEN_URL = "http://auth.doktornarabote.ru/OAuth/Token";
 
     private DoktornaraboteApi() {

File: scribejava-apis/src/main/java/com/github/scribejava/apis/FreelancerApi.java
Patch:
@@ -46,7 +46,8 @@ public String getAuthorizationUrl(Token requestToken) {
 
     public static class Sandbox extends FreelancerApi {
 
-        private static final String SANDBOX_AUTHORIZATION_URL = "http://www.sandbox.freelancer.com/users/api-token/auth.php";
+        private static final String SANDBOX_AUTHORIZATION_URL
+                = "http://www.sandbox.freelancer.com/users/api-token/auth.php";
 
         private Sandbox() {
         }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GoogleApi.java
Patch:
@@ -6,7 +6,8 @@
 
 public class GoogleApi extends DefaultApi10a {
 
-    private static final String AUTHORIZATION_URL = "https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=%s";
+    private static final String AUTHORIZATION_URL
+            = "https://www.google.com/accounts/OAuthAuthorizeToken?oauth_token=%s";
 
     private GoogleApi() {
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/HHApi.java
Patch:
@@ -13,7 +13,8 @@
 public class HHApi extends DefaultApi20 {
 
     private static final String AUTHORIZE_URL = "https://m.hh.ru/oauth/authorize?response_type=code&client_id=%s";
-    private static final String TOKEN_URL = "https://m.hh.ru/oauth/token?grant_type=" + OAuthConstants.AUTHORIZATION_CODE;
+    private static final String TOKEN_URL = "https://m.hh.ru/oauth/token?grant_type="
+            + OAuthConstants.AUTHORIZATION_CODE;
 
     private HHApi() {
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/OdnoklassnikiServiceImpl.java
Patch:
@@ -25,7 +25,9 @@ public void signRequest(Token accessToken, AbstractRequest request) {
             final String completeUrl = request.getCompleteUrl();
             final int queryIndex = completeUrl.indexOf('?');
             if (queryIndex != -1) {
-                final String sigSource = URLDecoder.decode(completeUrl.substring(queryIndex + 1).replace("&", ""), CharEncoding.UTF_8) + tokenDigest;
+                final String sigSource
+                        = URLDecoder.decode(completeUrl.substring(queryIndex + 1).replace("&", ""), CharEncoding.UTF_8)
+                        + tokenDigest;
                 request.addQuerystringParameter("sig", md5Hex(sigSource));
             }
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedIn20Example.java
Patch:
@@ -57,7 +57,8 @@ public static void main(String... args) {
             final String query = in.nextLine();
             System.out.println();
 
-            final OAuthRequest request = new OAuthRequest(Verb.GET, String.format(PROTECTED_RESOURCE_URL, query), service);
+            final OAuthRequest request = new OAuthRequest(Verb.GET, String.format(PROTECTED_RESOURCE_URL, query),
+                    service);
             request.addHeader("x-li-format", "json");
             request.addHeader("Accept-Language", "ru-RU");
             service.signRequest(accessToken, request);

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruAsyncExample.java
Patch:
@@ -15,7 +15,8 @@
 public abstract class MailruAsyncExample {
 
     private static final String NETWORK_NAME = "Mail.ru";
-    private static final String PROTECTED_RESOURCE_URL = "http://www.appsmail.ru/platform/api?method=users.getInfo&secure=1";
+    private static final String PROTECTED_RESOURCE_URL
+            = "http://www.appsmail.ru/platform/api?method=users.getInfo&secure=1";
     private static final Token EMPTY_TOKEN = null;
 
     public static void main(String... args) throws InterruptedException, ExecutionException {

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruExample.java
Patch:
@@ -13,7 +13,8 @@
 public abstract class MailruExample {
 
     private static final String NETWORK_NAME = "Mail.ru";
-    private static final String PROTECTED_RESOURCE_URL = "http://www.appsmail.ru/platform/api?method=users.getInfo&secure=1";
+    private static final String PROTECTED_RESOURCE_URL
+            = "http://www.appsmail.ru/platform/api?method=users.getInfo&secure=1";
     private static final Token EMPTY_TOKEN = null;
 
     public static void main(String... args) {

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/OdnoklassnikiExample.java
Patch:
@@ -56,7 +56,8 @@ public static void main(String... args) {
 
         // Now let's go and ask for a protected resource!
         System.out.println("Now we're going to access a protected resource...");
-        final OAuthRequest request = new OAuthRequest(Verb.GET, String.format(PROTECTED_RESOURCE_URL, publicKey), service);
+        final OAuthRequest request = new OAuthRequest(Verb.GET, String.format(PROTECTED_RESOURCE_URL, publicKey),
+                service);
         service.signRequest(accessToken, request);
         final Response response = request.send();
         System.out.println("Got it! Lets see what we found...");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/PinterestExample.java
Patch:
@@ -51,7 +51,8 @@ public static void main(String... args) {
 
         // Now let's go and ask for a protected resource!
         System.out.println("Now we're going to access a protected resource...");
-        final OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL + accessToken.getToken(), service);
+        final OAuthRequest request = new OAuthRequest(Verb.GET, PROTECTED_RESOURCE_URL + accessToken.getToken(),
+                service);
         service.signRequest(accessToken, request);
         final Response response = request.send();
         System.out.println("Got it! Lets see what we found...");

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TumblrExample.java
Patch:
@@ -18,7 +18,8 @@ public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("MY_CONSUMER_KEY")
                 .apiSecret("MY_CONSUMER_SECRET")
-                .callback("http://www.tumblr.com/connect/login_success.html") // OOB forbidden. We need an url and the better is on the tumblr website !
+                // OOB forbidden. We need an url and the better is on the tumblr website !
+                .callback("http://www.tumblr.com/connect/login_success.html")
                 .build(TumblrApi.instance());
         final Scanner in = new Scanner(System.in);
 

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilder.java
Patch:
@@ -29,8 +29,8 @@ public ServiceBuilder readTimeout(Integer readTimeout) {
     @Override
     protected OAuthConfig createConfig() {
         super.checkPreconditions();
-        final OAuthConfig config = new OAuthConfig(getApiKey(), getApiSecret(), getCallback(), getSignatureType(), getScope(), getDebugStream(),
-                connectTimeout, readTimeout, getGrantType());
+        final OAuthConfig config = new OAuthConfig(getApiKey(), getApiSecret(), getCallback(), getSignatureType(),
+                getScope(), getDebugStream(), connectTimeout, readTimeout, getGrantType());
         config.setState(getState());
         return config;
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilderAsync.java
Patch:
@@ -24,8 +24,8 @@ public void checkPreconditions() {
     @Override
     protected OAuthConfigAsync createConfig() {
         checkPreconditions();
-        final OAuthConfigAsync configAsync = new OAuthConfigAsync(getApiKey(), getApiSecret(), getCallback(), getSignatureType(), getScope(),
-                getGrantType(), getDebugStream(), asyncHttpClientConfig);
+        final OAuthConfigAsync configAsync = new OAuthConfigAsync(getApiKey(), getApiSecret(), getCallback(),
+                getSignatureType(), getScope(), getGrantType(), getDebugStream(), asyncHttpClientConfig);
         configAsync.setState(getState());
         configAsync.setAsyncHttpProviderClassName(asyncHttpProviderClassName);
         return configAsync;

File: scribejava-core/src/test/java/com/github/scribejava/core/extractors/TokenExtractorTest.java
Patch:
@@ -33,7 +33,8 @@ public void shouldExtractTokenFromInvertedOAuthStandardResponse() {
 
     @Test
     public void shouldExtractTokenFromResponseWithCallbackConfirmed() {
-        final String response = "oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03&callback_confirmed=true";
+        final String response = "oauth_token=hh5s93j4hdidpola&oauth_token_secret=hdhd0244k9j7ao03"
+                + "&callback_confirmed=true";
         final Token extracted = extractor.extract(response);
         assertEquals("hh5s93j4hdidpola", extracted.getToken());
         assertEquals("hdhd0244k9j7ao03", extracted.getSecret());

File: scribejava-core/src/test/java/com/github/scribejava/core/model/OAuthRequestTest.java
Patch:
@@ -11,7 +11,8 @@ public class OAuthRequestTest {
 
     @Before
     public void setUp() {
-        request = new OAuthRequest(Verb.GET, "http://example.com", new OAuth20Service(null, new OAuthConfig("test", "test")));
+        request = new OAuthRequest(Verb.GET, "http://example.com",
+                new OAuth20Service(null, new OAuthConfig("test", "test")));
     }
 
     @Test

File: scribejava-core/src/test/java/com/github/scribejava/core/model/RequestTest.java
Patch:
@@ -24,7 +24,8 @@ public void setUp() throws MalformedURLException {
         postRequest.addBodyParameter("param", "value");
         postRequest.addBodyParameter("param with spaces", "value with spaces");
         postRequest.setConnection(connection);
-        getRequest = new OAuthRequest(Verb.GET, "http://example.com?qsparam=value&other+param=value+with+spaces", oAuthService);
+        getRequest = new OAuthRequest(Verb.GET, "http://example.com?qsparam=value&other+param=value+with+spaces",
+                oAuthService);
         getRequest.setConnection(connection);
     }
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/AWeberExample.java
Patch:
@@ -12,7 +12,7 @@
 
 public abstract class AWeberExample {
 
-    //To get your consumer key/secret, and view API docs, see https://labs.aweber.com/docs	
+    //To get your consumer key/secret, and view API docs, see https://labs.aweber.com/docs
     private static final String ACCOUNT_RESOURCE_URL = "https://api.aweber.com/1.0/accounts/";
 
     private static final String CONSUMER_KEY = "";

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/AccessTokenExtractor.java
Patch:
@@ -15,5 +15,5 @@ public interface AccessTokenExtractor {
      * @param response the contents of the response
      * @return OAuth access token
      */
-    public Token extract(String response);
+    Token extract(String response);
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/RequestTokenExtractor.java
Patch:
@@ -15,5 +15,5 @@ public interface RequestTokenExtractor {
      * @param response the contents of the response
      * @return OAuth access token
      */
-    public Token extract(String response);
+    Token extract(String response);
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/services/TimestampService.java
Patch:
@@ -14,12 +14,12 @@ public interface TimestampService {
      *
      * @return timestamp
      */
-    public String getTimestampInSeconds();
+    String getTimestampInSeconds();
 
     /**
      * Returns a nonce (unique value for each request)
      *
      * @return nonce
      */
-    public String getNonce();
+    String getNonce();
 }

File: scribejava-core/src/test/java/com/github/scribejava/core/model/ResponseTest.java
Patch:
@@ -49,7 +49,7 @@ public void shouldHandleAConnectionWithErrors() throws Exception {
 
     private static class FaultyConnection extends ConnectionStub {
 
-        public FaultyConnection() throws Exception {
+        private FaultyConnection() throws Exception {
             super();
         }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/model/ParameterList.java
Patch:
@@ -73,7 +73,7 @@ public void addAll(ParameterList other) {
     public void addQuerystring(String queryString) {
         if (queryString != null && queryString.length() > 0) {
             for (String param : queryString.split(PARAM_SEPARATOR)) {
-                final String pair[] = param.split(PAIR_SEPARATOR);
+                final String[] pair = param.split(PAIR_SEPARATOR);
                 final String key = OAuthEncoder.decode(pair[0]);
                 final String value = pair.length > 1 ? OAuthEncoder.decode(pair[1]) : EMPTY_STRING;
                 params.add(new Parameter(key, value));

File: scribejava-core/src/test/java/com/github/scribejava/core/utils/OAuthEncoderTest.java
Patch:
@@ -53,8 +53,8 @@ public void shouldThrowExceptionIfStringToDecodeIsNull() {
     @Test
     public void shouldPercentEncodeCorrectlyTwitterCodingExamples() {
         // These tests are part of the Twitter dev examples here -> https://dev.twitter.com/docs/auth/percent-encoding-parameters
-        final String sources[] = {"Ladies + Gentlemen", "An encoded string!", "Dogs, Cats & Mice"};
-        final String encoded[] = {"Ladies%20%2B%20Gentlemen", "An%20encoded%20string%21", "Dogs%2C%20Cats%20%26%20Mice"};
+        final String[] sources = {"Ladies + Gentlemen", "An encoded string!", "Dogs, Cats & Mice"};
+        final String[] encoded = {"Ladies%20%2B%20Gentlemen", "An%20encoded%20string%21", "Dogs%2C%20Cats%20%26%20Mice"};
 
         for (int i = 0; i < sources.length; i++) {
             Assert.assertEquals(encoded[i], OAuthEncoder.encode(sources[i]));

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/OdnoklassnikiServiceImpl.java
Patch:
@@ -20,7 +20,7 @@ public OdnoklassnikiServiceImpl(DefaultApi20 api, OAuthConfig config) {
     public void signRequest(Token accessToken, AbstractRequest request) {
         // sig = md5( request_params_composed_string+ md5(access_token + application_secret_key)  )
         try {
-            final String tokenDigest = md5Hex((accessToken.getToken() + getConfig().getApiSecret()));
+            final String tokenDigest = md5Hex(accessToken.getToken() + getConfig().getApiSecret());
 
             final String completeUrl = request.getCompleteUrl();
             final int queryIndex = completeUrl.indexOf('?');

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuthService.java
Patch:
@@ -35,7 +35,7 @@ public OAuthService(OAuthConfig config) {
             if (ForceTypeOfHttpRequest.PREFER_SYNC_ONLY_HTTP_REQUESTS == forceTypeOfHttpRequest) {
                 config.log("Cannot use async operations, only sync");
             }
-            final OAuthConfigAsync asyncConfig = ((OAuthConfigAsync) config);
+            final OAuthConfigAsync asyncConfig = (OAuthConfigAsync) config;
             final String asyncHttpProviderClassName = asyncConfig.getAsyncHttpProviderClassName();
 
             asyncHttpClient = asyncHttpProviderClassName == null ? new AsyncHttpClient(asyncConfig.getAsyncHttpClientConfig())

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuth10aService.java
Patch:
@@ -174,6 +174,8 @@ private void appendSignature(AbstractRequest request) {
                     request.addQuerystringParameter(entry.getKey(), entry.getValue());
                 }
                 break;
+            default:
+                throw new IllegalStateException("Unknown new Signature Type '" + config.getSignatureType() + "'.");
         }
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/AWeberApi.java
Patch:
@@ -31,7 +31,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ConstantContactApi.java
Patch:
@@ -24,7 +24,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ConstantContactApi2.java
Patch:
@@ -20,7 +20,7 @@ public class ConstantContactApi2 extends DefaultApi20 {
     private static final AccessTokenExtractor ACCESS_TOKEN_EXTRACTOR = new AccessTokenExtractor() {
 
         @Override
-        public Token extract(final String response) {
+        public Token extract(String response) {
             Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
 
             final String regex = "\"access_token\"\\s*:\\s*\"([^&\"]+)\"";
@@ -51,7 +51,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/DiggApi.java
Patch:
@@ -30,7 +30,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/DoktornaraboteApi.java
Patch:
@@ -38,7 +38,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(
             config.getCallback(),
             "Must provide a valid url as callback. Doktornarabote does not support OOB");
@@ -64,7 +64,7 @@ public AccessTokenExtractor getAccessTokenExtractor() {
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new DoktornaraboteOAuthServiceImpl(this, config);
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/DropBoxApi.java
Patch:
@@ -22,7 +22,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return "https://www.dropbox.com/1/oauth/authorize?oauth_token=" + requestToken.getToken();
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/EvernoteApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(serviceUrl() + "/OAuth.action?oauth_token=%s", requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/FacebookApi.java
Patch:
@@ -27,7 +27,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(),
                 "Must provide a valid url as callback. Facebook does not support OOB");
         final StringBuilder sb = new StringBuilder(String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(

File: scribejava-apis/src/main/java/com/github/scribejava/apis/FlickrApi.java
Patch:
@@ -34,7 +34,7 @@ public String getAccessTokenEndpoint() {
      * {@inheritDoc}
      */
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return "https://www.flickr.com/services/oauth/authorize?oauth_token=" + requestToken.getToken();
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/Foursquare2Api.java
Patch:
@@ -29,7 +29,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Foursquare2 does not support OOB");
         return String.format(AUTHORIZATION_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/FoursquareApi.java
Patch:
@@ -29,7 +29,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/FreelancerApi.java
Patch:
@@ -40,7 +40,7 @@ public Verb getRequestTokenVerb() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 
@@ -70,7 +70,7 @@ public String getAccessTokenEndpoint() {
         }
 
         @Override
-        public String getAuthorizationUrl(final Token requestToken) {
+        public String getAuthorizationUrl(Token requestToken) {
             return String.format(SANDBOX_AUTHORIZATION_URL + "?oauth_token=%s", requestToken.getToken());
         }
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GetGlueApi.java
Patch:
@@ -31,7 +31,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GitHubApi.java
Patch:
@@ -27,7 +27,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. GitHub does not support OOB");
         final StringBuilder sb = new StringBuilder(String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback())));
         if (config.hasScope()) {

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GoogleApi.java
Patch:
@@ -40,7 +40,7 @@ public Verb getRequestTokenVerb() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/GoogleApi20.java
Patch:
@@ -37,7 +37,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         final StringBuilder sb = new StringBuilder(String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(
                 config.getCallback()), OAuthEncoder.encode(config.getScope())));
 
@@ -54,7 +54,7 @@ public AccessTokenExtractor getAccessTokenExtractor() {
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new GoogleOAuthServiceImpl(this, config);
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/HHApi.java
Patch:
@@ -37,7 +37,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         return String.format(AUTHORIZE_URL, config.getApiKey());
     }
 
@@ -47,7 +47,7 @@ public AccessTokenExtractor getAccessTokenExtractor() {
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new HHOAuthServiceImpl(this, config);
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ImgurApi.java
Patch:
@@ -40,16 +40,16 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         return String.format(AUTHORIZATION_URL, config.getApiKey(), isOob(config) ? "pin" : "code");
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new ImgurOAuthServiceImpl(this, config);
     }
 
-    public static boolean isOob(final OAuthConfig config) {
+    public static boolean isOob(OAuthConfig config) {
         return "oob".equals(config.getCallback());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/KaixinApi.java
Patch:
@@ -32,7 +32,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/KaixinApi20.java
Patch:
@@ -37,7 +37,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         // Append scope if present
         if (config.hasScope()) {
             return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LinkedInApi.java
Patch:
@@ -14,12 +14,12 @@ public LinkedInApi() {
         scopesAsString = null;
     }
 
-    public LinkedInApi(final String... scopes) {
+    public LinkedInApi(String... scopes) {
         if (scopes == null || scopes.length == 0) {
             scopesAsString = null;
         } else {
             final StringBuilder builder = new StringBuilder();
-            for (final String scope : scopes) {
+            for (String scope : scopes) {
                 builder.append('+').append(scope);
             }
             scopesAsString = "?scope=" + builder.substring(1);
@@ -46,7 +46,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LinkedInApi20.java
Patch:
@@ -40,7 +40,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. LinkedIn does not support OOB");
 
         if (config.hasScope()) {
@@ -58,7 +58,7 @@ public AccessTokenExtractor getAccessTokenExtractor() {
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new LinkedIn20ServiceImpl(this, config);
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LiveApi.java
Patch:
@@ -30,7 +30,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Live does not support OOB");
 
         // Append scope if present

File: scribejava-apis/src/main/java/com/github/scribejava/apis/LoveFilmApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/MailruApi.java
Patch:
@@ -37,7 +37,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Valid url is required for a callback. Mail.ru does not support OOB");
         if (config.hasScope()) { // Appending scope if present
             return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.
@@ -48,7 +48,7 @@ public String getAuthorizationUrl(final OAuthConfig config) {
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new MailruOAuthServiceImpl(this, config);
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/MeetupApi.java
Patch:
@@ -32,7 +32,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/MendeleyApi.java
Patch:
@@ -34,7 +34,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/MisoApi.java
Patch:
@@ -31,7 +31,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/NetProspexApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/NeteaseWeibooApi.java
Patch:
@@ -37,7 +37,7 @@ public String getAccessTokenEndpoint() {
      *
      * via http://open.t.163.com/wiki/index.php?title=%E8%AF%B7%E6%B1%82%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83Token(oauth/authorize)
      */
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 
@@ -49,7 +49,7 @@ public String getAuthorizationUrl(final Token requestToken) {
      * @param requestToken Token
      * @return String
      */
-    public String getAuthenticateUrl(final Token requestToken) {
+    public String getAuthenticateUrl(Token requestToken) {
         return String.format(AUTHENTICATE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/OdnoklassnikiApi.java
Patch:
@@ -37,7 +37,7 @@ public Verb getAccessTokenVerb() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Valid url is required for a callback. Odnoklassniki does not support OOB");
         if (config.hasScope()) {
             return String.format(
@@ -48,7 +48,7 @@ public String getAuthorizationUrl(final OAuthConfig config) {
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new OdnoklassnikiServiceImpl(this, config);
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/PinterestApi.java
Patch:
@@ -36,7 +36,7 @@ public Verb getAccessTokenVerb() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Pinterest does not support OOB");
 
         // Append scope if present

File: scribejava-apis/src/main/java/com/github/scribejava/apis/PlurkApi.java
Patch:
@@ -26,7 +26,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 
@@ -51,7 +51,7 @@ public static Mobile instance() {
         }
 
         @Override
-        public String getAuthorizationUrl(final Token requestToken) {
+        public String getAuthorizationUrl(Token requestToken) {
             return String.format(AUTHORIZATION_URL, requestToken.getToken());
         }
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/Px500Api.java
Patch:
@@ -29,7 +29,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/QWeiboApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/RenrenApi.java
Patch:
@@ -37,7 +37,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         // Append scope if present
         if (config.hasScope()) {
             return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SapoApi.java
Patch:
@@ -32,7 +32,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SimpleGeoApi.java
Patch:
@@ -32,7 +32,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return ENDPOINT;
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SinaWeiboApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SinaWeiboApi20.java
Patch:
@@ -43,7 +43,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         // Append scope if present
         if (config.hasScope()) {
             return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()), OAuthEncoder.encode(config.

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SkyrockApi.java
Patch:
@@ -38,7 +38,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(API_ENDPOINT + AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/SohuWeiboApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/TrelloApi.java
Patch:
@@ -29,7 +29,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/TumblrApi.java
Patch:
@@ -31,7 +31,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/TutByApi.java
Patch:
@@ -36,13 +36,13 @@ public Verb getAccessTokenVerb() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Valid url is required for a callback. Tut.by does not support OOB");
         return String.format(AUTHORIZE_URL, config.getApiKey(), OAuthEncoder.encode(config.getCallback()));
     }
 
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new TutByOAuthServiceImpl(this, config);
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/TwitterApi.java
Patch:
@@ -31,7 +31,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 
@@ -56,7 +56,7 @@ public static Authenticate instance() {
         }
 
         @Override
-        public String getAuthorizationUrl(final Token requestToken) {
+        public String getAuthorizationUrl(Token requestToken) {
             return String.format(AUTHENTICATE_URL, requestToken.getToken());
         }
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/UbuntuOneApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ViadeoApi.java
Patch:
@@ -35,7 +35,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Must provide a valid url as callback. Viadeo does not support OOB");
 
         // Append scope if present

File: scribejava-apis/src/main/java/com/github/scribejava/apis/VimeoApi.java
Patch:
@@ -29,7 +29,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/VkontakteApi.java
Patch:
@@ -33,7 +33,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final OAuthConfig config) {
+    public String getAuthorizationUrl(OAuthConfig config) {
         Preconditions.checkValidUrl(config.getCallback(), "Valid url is required for a callback. Vkontakte does not support OOB");
         if (config.hasScope()) { // Appending scope if present
             return String.format(

File: scribejava-apis/src/main/java/com/github/scribejava/apis/XingApi.java
Patch:
@@ -29,7 +29,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/YahooApi.java
Patch:
@@ -29,7 +29,7 @@ public String getRequestTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZE_URL, requestToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/YammerApi.java
Patch:
@@ -31,7 +31,7 @@ public String getAccessTokenEndpoint() {
     }
 
     @Override
-    public String getAuthorizationUrl(final Token requestToken) {
+    public String getAuthorizationUrl(Token requestToken) {
         return String.format(AUTHORIZATION_URL, requestToken.getToken());
     }
 

File: scribejava-apis/src/main/java/com/github/scribejava/apis/google/GoogleJsonTokenExtractor.java
Patch:
@@ -12,11 +12,11 @@ public class GoogleJsonTokenExtractor extends JsonTokenExtractor {
     private static final Pattern ID_TOKEN_PATTERN = Pattern.compile("\"id_token\"\\s*:\\s*\"(\\S*?)\"");
 
     @Override
-    public GoogleToken extract(final String response) {
+    public GoogleToken extract(String response) {
         return new GoogleToken(extractAccessToken(response), "", response, extractOpenIdToken(response));
     }
 
-    private String extractOpenIdToken(final String response) {
+    private String extractOpenIdToken(String response) {
         final Matcher matcher = ID_TOKEN_PATTERN.matcher(response);
         if (matcher.find()) {
             return matcher.group(1);

File: scribejava-apis/src/main/java/com/github/scribejava/apis/google/GoogleToken.java
Patch:
@@ -13,7 +13,7 @@ public class GoogleToken extends Token {
      */
     private final String openIdToken;
 
-    public GoogleToken(final String token, final String secret, final String rawResponse, final String openIdToken) {
+    public GoogleToken(String token, String secret, String rawResponse, String openIdToken) {
         super(token, secret, rawResponse);
         this.openIdToken = openIdToken;
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/DoktornaraboteOAuthServiceImpl.java
Patch:
@@ -8,12 +8,12 @@
 
 public class DoktornaraboteOAuthServiceImpl extends OAuth20Service {
 
-    public DoktornaraboteOAuthServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public DoktornaraboteOAuthServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    public void signRequest(final Token accessToken, final AbstractRequest request) {
+    public void signRequest(Token accessToken, AbstractRequest request) {
         request.addHeader("Authorization", "Bearer " + accessToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/GoogleOAuthServiceImpl.java
Patch:
@@ -9,12 +9,12 @@
 
 public class GoogleOAuthServiceImpl extends OAuth20Service {
 
-    public GoogleOAuthServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public GoogleOAuthServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    protected <T extends AbstractRequest> T createAccessTokenRequest(final Verifier verifier, final T request) {
+    protected <T extends AbstractRequest> T createAccessTokenRequest(Verifier verifier, T request) {
         super.createAccessTokenRequest(verifier, request);
         if (!getConfig().hasGrantType()) {
             request.addParameter(OAuthConstants.GRANT_TYPE, "authorization_code");

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/HHOAuthServiceImpl.java
Patch:
@@ -8,12 +8,12 @@
 
 public class HHOAuthServiceImpl extends OAuth20Service {
 
-    public HHOAuthServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public HHOAuthServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    public void signRequest(final Token accessToken, final AbstractRequest request) {
+    public void signRequest(Token accessToken, AbstractRequest request) {
         request.addHeader("Authorization", "Bearer " + accessToken.getToken());
     }
 }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/ImgurOAuthServiceImpl.java
Patch:
@@ -12,12 +12,12 @@
 
 public class ImgurOAuthServiceImpl extends OAuth20Service {
 
-    public ImgurOAuthServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public ImgurOAuthServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    public Token getAccessToken(final Token requestToken, final Verifier verifier) {
+    public Token getAccessToken(Token requestToken, Verifier verifier) {
         final OAuthRequest request = new OAuthRequest(getApi().getAccessTokenVerb(),
                 getApi().getAccessTokenEndpoint(), this);
         request.addBodyParameter(OAuthConstants.CLIENT_ID, getConfig().getApiKey());
@@ -35,7 +35,7 @@ public Token getAccessToken(final Token requestToken, final Verifier verifier) {
     }
 
     @Override
-    public void signRequest(final Token accessToken, final AbstractRequest request) {
+    public void signRequest(Token accessToken, AbstractRequest request) {
         request.addHeader("Authorization",
                 accessToken == null ? "Client-ID " + getConfig().getApiKey() : "Bearer " + accessToken.getToken());
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/LinkedIn20ServiceImpl.java
Patch:
@@ -10,17 +10,17 @@
 
 public class LinkedIn20ServiceImpl extends OAuth20Service {
 
-    public LinkedIn20ServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public LinkedIn20ServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    public void signRequest(final Token accessToken, final AbstractRequest request) {
+    public void signRequest(Token accessToken, AbstractRequest request) {
         request.addQuerystringParameter("oauth2_access_token", accessToken.getToken());
     }
 
     @Override
-    protected <T extends AbstractRequest> T createAccessTokenRequest(final Verifier verifier, final T request) {
+    protected <T extends AbstractRequest> T createAccessTokenRequest(Verifier verifier, T request) {
         super.createAccessTokenRequest(verifier, request);
         if (!getConfig().hasGrantType()) {
             request.addParameter(OAuthConstants.GRANT_TYPE, "authorization_code");

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/OdnoklassnikiServiceImpl.java
Patch:
@@ -12,12 +12,12 @@
 
 public class OdnoklassnikiServiceImpl extends OAuth20Service {
 
-    public OdnoklassnikiServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public OdnoklassnikiServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    public void signRequest(final Token accessToken, final AbstractRequest request) {
+    public void signRequest(Token accessToken, AbstractRequest request) {
         // sig = md5( request_params_composed_string+ md5(access_token + application_secret_key)  )
         try {
             final String tokenDigest = md5Hex((accessToken.getToken() + getConfig().getApiSecret()));

File: scribejava-apis/src/main/java/com/github/scribejava/apis/service/TutByOAuthServiceImpl.java
Patch:
@@ -9,12 +9,12 @@
 
 public class TutByOAuthServiceImpl extends OAuth20Service {
 
-    public TutByOAuthServiceImpl(final DefaultApi20 api, final OAuthConfig config) {
+    public TutByOAuthServiceImpl(DefaultApi20 api, OAuthConfig config) {
         super(api, config);
     }
 
     @Override
-    public void signRequest(final Token accessToken, final AbstractRequest request) {
+    public void signRequest(Token accessToken, AbstractRequest request) {
         request.addQuerystringParameter(OAuthConstants.TOKEN, accessToken.getToken());
     }
 

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/AWeberExample.java
Patch:
@@ -18,7 +18,7 @@ public abstract class AWeberExample {
     private static final String CONSUMER_KEY = "";
     private static final String CONSUMER_SECRET = "";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey(CONSUMER_KEY)
                 .apiSecret(CONSUMER_SECRET)

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/DiggExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class DiggExample {
     private static final String NETWORK_NAME = "Digg";
     private static final String PROTECTED_RESOURCE_URL = "http://services.digg.com/2.0/comment.digg";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "myKey";
         final String apiSecret = "mySecret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookAsyncExample.java
Patch:
@@ -21,7 +21,7 @@ public abstract class FacebookAsyncExample {
     private static final String PROTECTED_RESOURCE_URL = "https://graph.facebook.com/v2.2/me";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) throws InterruptedException, ExecutionException {
+    public static void main(String... args) throws InterruptedException, ExecutionException {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FacebookExample.java
Patch:
@@ -17,7 +17,7 @@ public abstract class FacebookExample {
     private static final String PROTECTED_RESOURCE_URL = "https://graph.facebook.com/v2.2/me";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FlickrExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class FlickrExample {
 
     private static final String PROTECTED_RESOURCE_URL = "http://api.flickr.com/services/rest/";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your_app_id";
         final String apiSecret = "your_api_secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Foursquare2Example.java
Patch:
@@ -15,7 +15,7 @@ public abstract class Foursquare2Example {
     private static final String PROTECTED_RESOURCE_URL = "https://api.foursquare.com/v2/users/self/friends?oauth_token=";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your client id";
         final String apiSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FoursquareExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class FoursquareExample {
 
     private static final String PROTECTED_RESOURCE_URL = "http://api.foursquare.com/v1/user";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your client id")
                 .apiSecret("your client secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/FreelancerExample.java
Patch:
@@ -19,7 +19,7 @@ public abstract class FreelancerExample {
     private static final String PROTECTED_RESOURCE_URL = "http://api.sandbox.freelancer.com/Job/getJobList.json";
     private static final String SCOPE = "http://api.sandbox.freelancer.com";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .signatureType(SignatureType.QueryString)
                 .apiKey("your client id")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GitHubExample.java
Patch:
@@ -17,7 +17,7 @@ public abstract class GitHubExample {
     private static final String PROTECTED_RESOURCE_URL = "https://api.github.com/user";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Google20Example.java
Patch:
@@ -17,7 +17,7 @@ public abstract class Google20Example {
     private static final String PROTECTED_RESOURCE_URL = "https://www.googleapis.com/plus/v1/people/me";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/GoogleExample.java
Patch:
@@ -17,7 +17,7 @@ public abstract class GoogleExample {
     private static final String PROTECTED_RESOURCE_URL = "https://docs.google.com/feeds/default/private/full/";
     private static final String SCOPE = "https://docs.google.com/feeds/";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("anonymous")
                 .apiSecret("anonymous")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/HHExample.java
Patch:
@@ -18,7 +18,7 @@ public abstract class HHExample {
     private static final String PROTECTED_RESOURCE_URL = "https://api.hh.ru/me";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/ImgurExample.java
Patch:
@@ -16,7 +16,7 @@ public abstract class ImgurExample {
     private static final String NETWORK_NAME = "Imgur";
     private static final String PROTECTED_RESOURCE_URL = "https://api.imgur.com/3/account/me";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your client id";
         final String apiSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Kaixin20Example.java
Patch:
@@ -16,7 +16,7 @@ public abstract class Kaixin20Example {
     private static final String PROTECTED_RESOURCE_URL = "https://api.kaixin001.com/users/me.json";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your api key";
         final String apiSecret = "your api secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedIn20Example.java
Patch:
@@ -16,7 +16,7 @@ public abstract class LinkedIn20Example {
     private static final String PROTECTED_RESOURCE_URL = "https://api.linkedin.com/v1/people/~:(%s)";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class LinkedInExample {
     private static final String PROTECTED_RESOURCE_URL
             = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your client id")
                 .apiSecret("your client secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LinkedInExampleWithScopes.java
Patch:
@@ -15,7 +15,7 @@ public abstract class LinkedInExampleWithScopes {
     private static final String PROTECTED_RESOURCE_URL
             = "http://api.linkedin.com/v1/people/~/connections:(id,last-name)";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         //  Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client id";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LiveExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class LiveExample {
     private static final String PROTECTED_RESOURCE_URL = "https://api.foursquare.com/v2/users/self/friends?oauth_token=";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "";
         final String apiSecret = "";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/LoveFilmExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class LoveFilmExample {
     private static final String NETWORK_NAME = "LoveFilm";
     private static final String PROTECTED_RESOURCE_URL = "https://api.lovefilm.com/users";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your_key";
         final String apiSecret = "your_secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruAsyncExample.java
Patch:
@@ -18,7 +18,7 @@ public abstract class MailruAsyncExample {
     private static final String PROTECTED_RESOURCE_URL = "http://www.appsmail.ru/platform/api?method=users.getInfo&secure=1";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) throws InterruptedException, ExecutionException {
+    public static void main(String... args) throws InterruptedException, ExecutionException {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MailruExample.java
Patch:
@@ -16,7 +16,7 @@ public abstract class MailruExample {
     private static final String PROTECTED_RESOURCE_URL = "http://www.appsmail.ru/platform/api?method=users.getInfo&secure=1";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/MeetupExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class MeetupExample {
 
     private static final String PROTECTED_RESOURCE_URL = "http://api.meetup.com/2/member/self";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your client id")
                 .apiSecret("your client secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/NeteaseWeiboExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class NeteaseWeiboExample {
     private static final String NETWORK_NAME = "NetEase(163.com) Weibo";
     private static final String PROTECTED_RESOURCE_URL = "http://api.t.163.com/account/verify_credentials.json";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your key";
         final String apiSecret = "your secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/OdnoklassnikiExample.java
Patch:
@@ -17,7 +17,7 @@ public abstract class OdnoklassnikiExample {
             = "http://api.odnoklassniki.ru/api/users/getCurrentUser?application_key=%1$s&format=JSON";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String publicKey = "your api secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/PinterestExample.java
Patch:
@@ -16,7 +16,7 @@ public abstract class PinterestExample {
     private static final String PROTECTED_RESOURCE_URL = "https://api.pinterest.com/v1/me/?access_token?access_token=";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your_app_id";
         final String apiSecret = "your_app_secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/Px500Example.java
Patch:
@@ -14,7 +14,7 @@ public abstract class Px500Example {
 
     private static final String PROTECTED_RESOURCE_URL = "https://api.500px.com/v1/";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your-api-key")
                 .apiSecret("your-api-secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SinaWeibo2Example.java
Patch:
@@ -16,7 +16,7 @@ public abstract class SinaWeibo2Example {
     private static final String PROTECTED_RESOURCE_URL = "https://api.weibo.com/2/account/get_uid.json";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your_api_key";
         final String apiSecret = "your_api_secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SinaWeiboExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class SinaWeiboExample {
     private static final String NETWORK_NAME = "SinaWeibo";
     private static final String PROTECTED_RESOURCE_URL = "http://api.t.sina.com.cn/account/verify_credentials.json";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your key";
         final String apiSecret = "your secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SkyrockExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class SkyrockExample {
 
     private static final String PROTECTED_RESOURCE_URL = "https://api.skyrock.com/v2/user/get.json";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your-api-key")
                 .apiSecret("your-api-secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/SohuWeiboExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class SohuWeiboExample {
     private static final String NETWORK_NAME = "SohuWeibo";
     private static final String PROTECTED_RESOURCE_URL = "http://api.t.sohu.com/account/verify_credentials.json";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your_key";
         final String apiSecret = "your_secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TrelloExample.java
Patch:
@@ -16,7 +16,7 @@ public abstract class TrelloExample {
     private static final String API_SECRET = "your_api_secret";
     private static final String PROTECTED_RESOURCE_URL = "https://trello.com/1/members/me";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey(API_KEY)
                 .apiSecret(API_SECRET)

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TumblrExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class TumblrExample {
 
     private static final String PROTECTED_RESOURCE_URL = "http://api.tumblr.com/v2/user/info";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("MY_CONSUMER_KEY")
                 .apiSecret("MY_CONSUMER_SECRET")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TutByExample.java
Patch:
@@ -19,7 +19,7 @@ public abstract class TutByExample {
     private static final String PROTECTED_RESOURCE_URL = "http://profile.tut.by/getInfo";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/TwitterExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class TwitterExample {
 
     private static final String PROTECTED_RESOURCE_URL = "https://api.twitter.com/1.1/account/verify_credentials.json";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your client id")
                 .apiSecret("your client secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/ViadeoExample.java
Patch:
@@ -16,7 +16,7 @@ public abstract class ViadeoExample {
     private static final String PROTECTED_RESOURCE_URL = "https://api.viadeo.com/me?user_detail=full";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your own api key and secret
         final String apiKey = "your_app_id";
         final String apiSecret = "your_api_secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/VkontakteExample.java
Patch:
@@ -20,7 +20,7 @@ public abstract class VkontakteExample {
     private static final String PROTECTED_RESOURCE_URL = "https://api.vk.com/method/friends.get";
     private static final Token EMPTY_TOKEN = null;
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         // Replace these with your client id and secret
         final String clientId = "your client id";
         final String clientSecret = "your client secret";

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/XingExample.java
Patch:
@@ -14,7 +14,7 @@ public abstract class XingExample {
 
     private static final String PROTECTED_RESOURCE_URL = "https://api.xing.com/v1/users/me";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your client id")
                 .apiSecret("your client secret")

File: scribejava-apis/src/test/java/com/github/scribejava/apis/examples/YahooExample.java
Patch:
@@ -15,7 +15,7 @@ public abstract class YahooExample {
     private static final String PROTECTED_RESOURCE_URL
             = "http://social.yahooapis.com/v1/user/A6ROU63MXWDCW3Y5MGCYWVHDJI/profile/status?format=json";
 
-    public static void main(final String... args) {
+    public static void main(String... args) {
         final OAuthService service = new ServiceBuilder()
                 .apiKey("your client id")
                 .apiSecret("your client secret")

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilder.java
Patch:
@@ -14,13 +14,13 @@ public class ServiceBuilder extends AbstractServiceBuilder<ServiceBuilder> {
     private Integer connectTimeout;
     private Integer readTimeout;
 
-    public ServiceBuilder connectTimeout(final Integer connectTimeout) {
+    public ServiceBuilder connectTimeout(Integer connectTimeout) {
         Preconditions.checkNotNull(connectTimeout, "Connection timeout can't be null");
         this.connectTimeout = connectTimeout;
         return this;
     }
 
-    public ServiceBuilder readTimeout(final Integer readTimeout) {
+    public ServiceBuilder readTimeout(Integer readTimeout) {
         Preconditions.checkNotNull(readTimeout, "Read timeout can't be null");
         this.readTimeout = readTimeout;
         return this;

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/ServiceBuilderAsync.java
Patch:
@@ -9,7 +9,7 @@ public class ServiceBuilderAsync extends AbstractServiceBuilder<ServiceBuilderAs
     private AsyncHttpClientConfig asyncHttpClientConfig;
     private String asyncHttpProviderClassName;
 
-    public ServiceBuilderAsync asyncHttpClientConfig(final AsyncHttpClientConfig asyncHttpClientConfig) {
+    public ServiceBuilderAsync asyncHttpClientConfig(AsyncHttpClientConfig asyncHttpClientConfig) {
         Preconditions.checkNotNull(asyncHttpClientConfig, "asyncHttpClientConfig can't be null");
         this.asyncHttpClientConfig = asyncHttpClientConfig;
         return this;
@@ -31,7 +31,7 @@ protected OAuthConfigAsync createConfig() {
         return configAsync;
     }
 
-    public ServiceBuilderAsync asyncHttpProviderClassName(final String asyncHttpProviderClassName) {
+    public ServiceBuilderAsync asyncHttpProviderClassName(String asyncHttpProviderClassName) {
         this.asyncHttpProviderClassName = asyncHttpProviderClassName;
         return this;
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/DefaultApi10a.java
Patch:
@@ -126,7 +126,7 @@ public Verb getRequestTokenVerb() {
     public abstract String getAuthorizationUrl(Token requestToken);
 
     @Override
-    public OAuth10aService createService(final OAuthConfig config) {
+    public OAuth10aService createService(OAuthConfig config) {
         return new OAuth10aService(this, config);
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/builder/api/DefaultApi20.java
Patch:
@@ -58,7 +58,7 @@ public Verb getAccessTokenVerb() {
      * {@inheritDoc}
      */
     @Override
-    public OAuth20Service createService(final OAuthConfig config) {
+    public OAuth20Service createService(OAuthConfig config) {
         return new OAuth20Service(this, config);
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/exceptions/OAuthConnectionException.java
Patch:
@@ -7,7 +7,7 @@ public class OAuthConnectionException extends OAuthException {
 
     private static final String MSG = "There was a problem while creating a connection to the remote service: ";
 
-    public OAuthConnectionException(final String url, final Exception e) {
+    public OAuthConnectionException(String url, Exception e) {
         super(MSG + url, e);
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/HeaderExtractorImpl.java
Patch:
@@ -23,12 +23,12 @@ public class HeaderExtractorImpl implements HeaderExtractor {
      * {@inheritDoc}
      */
     @Override
-    public String extract(final AbstractRequest request) {
+    public String extract(AbstractRequest request) {
         checkPreconditions(request);
         final Map<String, String> parameters = request.getOauthParameters();
         final StringBuilder header = new StringBuilder(parameters.size() * ESTIMATED_PARAM_LENGTH);
         header.append(PREAMBLE);
-        for (final Map.Entry<String, String> entry : parameters.entrySet()) {
+        for (Map.Entry<String, String> entry : parameters.entrySet()) {
             if (header.length() > PREAMBLE.length()) {
                 header.append(PARAM_SEPARATOR);
             }
@@ -43,7 +43,7 @@ public String extract(final AbstractRequest request) {
         return header.toString();
     }
 
-    private void checkPreconditions(final AbstractRequest request) {
+    private void checkPreconditions(AbstractRequest request) {
         Preconditions.checkNotNull(request, "Cannot extract a header from a null object");
 
         if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0) {

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/JsonTokenExtractor.java
Patch:
@@ -11,11 +11,11 @@ public class JsonTokenExtractor implements AccessTokenExtractor {
     private static final Pattern ACCESS_TOKEN_PATTERN = Pattern.compile("\"access_token\"\\s*:\\s*\"(\\S*?)\"");
 
     @Override
-    public Token extract(final String response) {
+    public Token extract(String response) {
         return new Token(extractAccessToken(response), "", response);
     }
 
-    protected String extractAccessToken(final String response) {
+    protected String extractAccessToken(String response) {
         Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");
         final Matcher matcher = ACCESS_TOKEN_PATTERN.matcher(response);
         if (matcher.find()) {

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/TokenExtractor20Impl.java
Patch:
@@ -20,7 +20,7 @@ public class TokenExtractor20Impl implements AccessTokenExtractor {
      * {@inheritDoc}
      */
     @Override
-    public Token extract(final String response) {
+    public Token extract(String response) {
         Preconditions.checkEmptyString(response,
                 "Response body is incorrect. Can't extract a token from an empty string");
 

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/TokenExtractorImpl.java
Patch:
@@ -23,15 +23,15 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
      * {@inheritDoc}
      */
     @Override
-    public Token extract(final String response) {
+    public Token extract(String response) {
         Preconditions.checkEmptyString(response,
                 "Response body is incorrect. Can't extract a token from an empty string");
         final String token = extract(response, TOKEN_REGEX);
         final String secret = extract(response, SECRET_REGEX);
         return new Token(token, secret, response);
     }
 
-    private String extract(final String response, final Pattern p) {
+    private String extract(String response, Pattern p) {
         final Matcher matcher = p.matcher(response);
         if (matcher.find() && matcher.groupCount() >= 1) {
             return OAuthEncoder.decode(matcher.group(1));

File: scribejava-core/src/main/java/com/github/scribejava/core/model/OAuthRequest.java
Patch:
@@ -67,12 +67,12 @@ private void createConnection() throws IOException {
     }
 
     void addHeaders() {
-        for (final Map.Entry<String, String> entry : getHeaders().entrySet()) {
+        for (Map.Entry<String, String> entry : getHeaders().entrySet()) {
             connection.setRequestProperty(entry.getKey(), entry.getValue());
         }
     }
 
-    void addBody(final byte[] content) throws IOException {
+    void addBody(byte[] content) throws IOException {
         connection.setRequestProperty(CONTENT_LENGTH, String.valueOf(content.length));
 
         if (connection.getRequestProperty(CONTENT_TYPE) == null) {
@@ -82,7 +82,7 @@ void addBody(final byte[] content) throws IOException {
         connection.getOutputStream().write(content);
     }
 
-    void setConnection(final HttpURLConnection connection) {
+    void setConnection(HttpURLConnection connection) {
         this.connection = connection;
     }
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/model/Parameter.java
Patch:
@@ -12,7 +12,7 @@ public class Parameter implements Comparable<Parameter> {
     private final String key;
     private final String value;
 
-    public Parameter(final String key, final String value) {
+    public Parameter(String key, String value) {
         this.key = key;
         this.value = value;
     }
@@ -22,7 +22,7 @@ public String asUrlEncodedPair() {
     }
 
     @Override
-    public boolean equals(final Object other) {
+    public boolean equals(Object other) {
         if (other == null) {
             return false;
         }
@@ -51,7 +51,7 @@ public int hashCode() {
     }
 
     @Override
-    public int compareTo(final Parameter parameter) {
+    public int compareTo(Parameter parameter) {
         final int keyDiff = key.compareTo(parameter.getKey());
 
         return keyDiff == 0 ? value.compareTo(parameter.getValue()) : keyDiff;

File: scribejava-core/src/main/java/com/github/scribejava/core/oauth/OAuthService.java
Patch:
@@ -25,7 +25,7 @@ public abstract class OAuthService {
     private final OAuthConfig config;
     private AsyncHttpClient asyncHttpClient;
 
-    public OAuthService(final OAuthConfig config) {
+    public OAuthService(OAuthConfig config) {
         this.config = config;
         final ForceTypeOfHttpRequest forceTypeOfHttpRequest = ScribeJavaConfig.getForceTypeOfHttpRequests();
         if (config instanceof OAuthConfigAsync) {

File: scribejava-core/src/main/java/com/github/scribejava/core/services/HMACSha1SignatureService.java
Patch:
@@ -27,7 +27,7 @@ public class HMACSha1SignatureService implements SignatureService {
      * {@inheritDoc}
      */
     @Override
-    public String getSignature(final String baseString, final String apiSecret, final String tokenSecret) {
+    public String getSignature(String baseString, String apiSecret, String tokenSecret) {
         try {
             Preconditions.checkEmptyString(baseString, "Base string cant be null or empty string");
             Preconditions.checkEmptyString(apiSecret, "Api secret cant be null or empty string");
@@ -37,7 +37,7 @@ public String getSignature(final String baseString, final String apiSecret, fina
         }
     }
 
-    private String doSign(final String toSign, final String keyString) throws UnsupportedEncodingException,
+    private String doSign(String toSign, String keyString) throws UnsupportedEncodingException,
             NoSuchAlgorithmException, InvalidKeyException {
         final SecretKeySpec key = new SecretKeySpec(keyString.getBytes(UTF8), HMAC_SHA1);
         final Mac mac = Mac.getInstance(HMAC_SHA1);
@@ -46,7 +46,7 @@ private String doSign(final String toSign, final String keyString) throws Unsupp
         return bytesToBase64String(bytes).replace(CARRIAGE_RETURN, EMPTY_STRING);
     }
 
-    private String bytesToBase64String(final byte[] bytes) {
+    private String bytesToBase64String(byte[] bytes) {
         return Base64Encoder.getInstance().encode(bytes);
     }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/services/RSASha1SignatureService.java
Patch:
@@ -26,7 +26,7 @@ public RSASha1SignatureService(PrivateKey privateKey) {
     @Override
     public String getSignature(String baseString, String apiSecret, String tokenSecret) {
         try {
-            Signature signature = Signature.getInstance(RSA_SHA1);
+            final Signature signature = Signature.getInstance(RSA_SHA1);
             signature.initSign(privateKey);
             signature.update(baseString.getBytes(UTF8));
             return bytesToBase64String(signature);

File: scribejava-core/src/main/java/com/github/scribejava/core/services/TimestampServiceImpl.java
Patch:
@@ -23,7 +23,7 @@ public TimestampServiceImpl() {
      */
     @Override
     public String getNonce() {
-        Long ts = getTs();
+        final Long ts = getTs();
         return String.valueOf(ts + timer.getRandomInteger());
     }
 

File: scribejava-core/src/main/java/com/github/scribejava/core/utils/MapUtils.java
Patch:
@@ -7,7 +7,7 @@
  */
 public abstract class MapUtils {
 
-    public static <K, V> String toString(final Map<K, V> map) {
+    public static <K, V> String toString(Map<K, V> map) {
         if (map == null) {
             return "";
         }
@@ -16,7 +16,7 @@ public static <K, V> String toString(final Map<K, V> map) {
         }
 
         final StringBuilder result = new StringBuilder();
-        for (final Map.Entry<K, V> entry : map.entrySet()) {
+        for (Map.Entry<K, V> entry : map.entrySet()) {
             result.append(String.format(", %s -> %s ", entry.getKey().toString(), entry.getValue().toString()));
         }
         return "{" + result.substring(1) + "}";

File: scribejava-core/src/main/java/com/github/scribejava/core/utils/StreamUtils.java
Patch:
@@ -22,8 +22,8 @@ public static String getStreamContents(InputStream is) {
         Preconditions.checkNotNull(is, "Cannot get String from a null object");
         try {
             final char[] buffer = new char[0x10000];
-            StringBuilder out = new StringBuilder();
-            Reader in = new InputStreamReader(is, "UTF-8");
+            final StringBuilder out = new StringBuilder();
+            final Reader in = new InputStreamReader(is, "UTF-8");
             int read;
             do {
                 read = in.read(buffer, 0, buffer.length);

File: scribejava-core/src/test/java/com/github/scribejava/core/builder/ServiceBuilderTest.java
Patch:
@@ -79,7 +79,7 @@ private OAuthConfig getConfig() {
         }
 
         @Override
-        public OAuth20Service createService(final OAuthConfig config) {
+        public OAuth20Service createService(OAuthConfig config) {
             this.config = config;
             return null;
         }
@@ -90,7 +90,7 @@ public String getAccessTokenEndpoint() {
         }
 
         @Override
-        public String getAuthorizationUrl(final OAuthConfig config) {
+        public String getAuthorizationUrl(OAuthConfig config) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }

File: scribejava-core/src/test/java/com/github/scribejava/core/extractors/JsonTokenExtractorTest.java
Patch:
@@ -11,7 +11,7 @@ public class JsonTokenExtractorTest {
 
     @Test
     public void shouldParseResponse() {
-        Token token = extractor.extract(response);
+        final Token token = extractor.extract(response);
         assertEquals(token.getToken(), "I0122HHJKLEM21F3WLPYHDKGKZULAUO4SGMV3ABKFTDT3T3X");
     }
 

File: scribejava-core/src/test/java/com/github/scribejava/core/model/ConnectionStub.java
Patch:
@@ -54,7 +54,7 @@ public int getTimesCalledInpuStream() {
 
     @Override
     public OutputStream getOutputStream() throws IOException {
-        ByteArrayOutputStream baos = new ByteArrayOutputStream();
+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();
         baos.write("contents".getBytes());
         return baos;
     }

File: scribejava-core/src/test/java/com/github/scribejava/core/model/RequestTest.java
Patch:
@@ -67,15 +67,15 @@ public void shouldSetPayloadAndHeaders() {
 
     @Test
     public void shouldAllowAddingQuerystringParametersAfterCreation() {
-        OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com?one=val", oAuthService);
+        final OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com?one=val", oAuthService);
         request.addQuerystringParameter("two", "other val");
         request.addQuerystringParameter("more", "params");
         assertEquals(3, request.getQueryStringParams().size());
     }
 
     @Test
     public void shouldReturnTheCompleteUrl() {
-        OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com?one=val", oAuthService);
+        final OAuthRequest request = new OAuthRequest(Verb.GET, "http://example.com?one=val", oAuthService);
         request.addQuerystringParameter("two", "other val");
         request.addQuerystringParameter("more", "params");
         assertEquals("http://example.com?one=val&two=other%20val&more=params", request.getCompleteUrl());

File: scribejava-core/src/test/java/com/github/scribejava/core/model/ResponseTest.java
Patch:
@@ -42,7 +42,7 @@ public void shouldParseBodyContentsOnlyOnce() {
 
     @Test
     public void shouldHandleAConnectionWithErrors() throws Exception {
-        Response errResponse = new Response(new FaultyConnection());
+        final Response errResponse = new Response(new FaultyConnection());
         assertEquals(400, errResponse.getCode());
         assertEquals("errors", errResponse.getBody());
     }

File: scribejava-core/src/test/java/com/github/scribejava/core/services/TimestampServiceTest.java
Patch:
@@ -18,13 +18,13 @@ public void setup() {
 
     @Test
     public void shouldReturnTimestampInSeconds() {
-        String expected = "1000";
+        final String expected = "1000";
         assertEquals(expected, service.getTimestampInSeconds());
     }
 
     @Test
     public void shouldReturnNonce() {
-        String expected = "1042";
+        final String expected = "1042";
         assertEquals(expected, service.getNonce());
     }
 

File: scribejava-core/src/test/java/com/github/scribejava/core/utils/MapUtilsTest.java
Patch:
@@ -12,7 +12,7 @@ public class MapUtilsTest {
 
     @Test
     public void shouldPrettyPrintMap() {
-        Map<Integer, String> map = new HashMap<Integer, String>();
+        final Map<Integer, String> map = new HashMap<Integer, String>();
         map.put(1, "one");
         map.put(2, "two");
         map.put(3, "three");
@@ -22,7 +22,7 @@ public void shouldPrettyPrintMap() {
 
     @Test
     public void shouldHandleEmptyMap() {
-        Map<Integer, String> map = new HashMap<Integer, String>();
+        final Map<Integer, String> map = new HashMap<Integer, String>();
         Assert.assertEquals("{}", MapUtils.toString(map));
     }
 

File: scribejava-core/src/test/java/com/github/scribejava/core/model/ConnectionStub.java
Patch:
@@ -17,7 +17,7 @@ public class ConnectionStub extends HttpURLConnection {
 
     private final Map<String, String> headers = new HashMap<>();
     private final Map<String, List<String>> responseHeaders = new HashMap<>();
-    private int inputStreamCalled = 0;
+    private int inputStreamCalled;
 
     public ConnectionStub() throws MalformedURLException {
         super(new URL("http://example.com"));

File: scribejava-core/src/main/java/com/github/scribejava/core/exceptions/OAuthException.java
Patch:
@@ -8,6 +8,8 @@
  */
 public class OAuthException extends RuntimeException {
 
+    private static final long serialVersionUID = 1L;
+
     /**
      * Default constructor
      *
@@ -35,6 +37,4 @@ public OAuthException(String message) {
     public OAuthException(Exception e) {
         super(e);
     }
-
-    private static final long serialVersionUID = 1L;
 }

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/HeaderExtractorImpl.java
Patch:
@@ -15,9 +15,9 @@
  */
 public class HeaderExtractorImpl implements HeaderExtractor {
 
+    public static final int ESTIMATED_PARAM_LENGTH = 20;
     private static final String PARAM_SEPARATOR = ", ";
     private static final String PREAMBLE = "OAuth ";
-    public static final int ESTIMATED_PARAM_LENGTH = 20;
 
     /**
      * {@inheritDoc}

File: scribejava-core/src/main/java/com/github/scribejava/core/model/AbstractRequest.java
Patch:
@@ -16,9 +16,9 @@
  */
 public abstract class AbstractRequest {
 
+    public static final String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
     protected static final String CONTENT_LENGTH = "Content-Length";
     protected static final String CONTENT_TYPE = "Content-Type";
-    public static final String DEFAULT_CONTENT_TYPE = "application/x-www-form-urlencoded";
     private static final String OAUTH_PREFIX = "oauth_";
 
     private final String url;

File: scribejava-core/src/test/java/com/github/scribejava/core/model/ForceTypeOfHttpRequestTest.java
Patch:
@@ -11,13 +11,13 @@
 
 public class ForceTypeOfHttpRequestTest {
 
+    @Rule
+    public ExpectedException expectedException = ExpectedException.none();
+
     private OAuthRequest request;
     private OAuthRequestAsync requestAsync;
     private OAuthService oAuthService;
 
-    @Rule
-    public ExpectedException expectedException = ExpectedException.none();
-
     @Before
     public void setUp() {
         ScribeJavaConfig.setForceTypeOfHttpRequests(ForceTypeOfHttpRequest.NONE);

File: scribejava-core/src/test/java/com/github/scribejava/core/services/RSASha1SignatureServiceTest.java
Patch:
@@ -9,7 +9,7 @@
 
 public class RSASha1SignatureServiceTest {
 
-    RSASha1SignatureService service = new RSASha1SignatureService(getPrivateKey());
+    private RSASha1SignatureService service = new RSASha1SignatureService(getPrivateKey());
 
     @Test
     public void shouldReturnSignatureMethodString() {

File: scribejava-core/src/main/java/com/github/scribejava/core/extractors/BaseStringExtractorImpl.java
Patch:
@@ -19,6 +19,7 @@ public class BaseStringExtractorImpl implements BaseStringExtractor {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String extract(AbstractRequest request) {
         checkPreconditions(request);
         String verb = OAuthEncoder.encode(getVerb(request));

File: scribejava-core/src/main/java/com/github/scribejava/core/services/RSASha1SignatureService.java
Patch:
@@ -23,6 +23,7 @@ public RSASha1SignatureService(PrivateKey privateKey) {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getSignature(String baseString, String apiSecret, String tokenSecret) {
         try {
             Signature signature = Signature.getInstance(RSA_SHA1);
@@ -41,6 +42,7 @@ private String bytesToBase64String(Signature signature) throws SignatureExceptio
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getSignatureMethod() {
         return METHOD;
     }

File: scribejava-core/src/main/java/com/github/scribejava/core/services/TimestampServiceImpl.java
Patch:
@@ -21,6 +21,7 @@ public TimestampServiceImpl() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getNonce() {
         Long ts = getTs();
         return String.valueOf(ts + timer.getRandomInteger());
@@ -29,6 +30,7 @@ public String getNonce() {
     /**
      * {@inheritDoc}
      */
+    @Override
     public String getTimestampInSeconds() {
         return String.valueOf(getTs());
     }

File: scribejava-apis/src/main/java/com/github/scribejava/apis/ImgurApi.java
Patch:
@@ -38,7 +38,7 @@ public OAuthService createService(final OAuthConfig config) {
         return new ImgurOAuthServiceImpl(this, config);
     }
 
-    public boolean isOob(final OAuthConfig config) {
+    public static boolean isOob(final OAuthConfig config) {
         return "oob".equals(config.getCallback());
     }
-}
\ No newline at end of file
+}

File: src/test/java/org/scribe/examples/TwitterExample.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args)
     System.out.println("Trading the Request Token for an Access Token...");
     Token accessToken = service.getAccessToken(requestToken, verifier);
     System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println("(if you're curious, it looks like this: " + accessToken + " )");
     System.out.println();
 
     // Now let's go and ask for a protected resource!

File: src/test/java/org/scribe/examples/TwitterExample.java
Patch:
@@ -41,7 +41,7 @@ public static void main(String[] args)
     System.out.println("Trading the Request Token for an Access Token...");
     Token accessToken = service.getAccessToken(requestToken, verifier);
     System.out.println("Got the Access Token!");
-    System.out.println("(if your curious it looks like this: " + accessToken + " )");
+    System.out.println("(if you're curious, it looks like this: " + accessToken + " )");
     System.out.println();
 
     // Now let's go and ask for a protected resource!

File: src/main/java/org/scribe/exceptions/OAuthConnectionException.java
Patch:
@@ -1,7 +1,7 @@
 package org.scribe.exceptions;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class OAuthConnectionException extends OAuthException
 {

File: src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
Patch:
@@ -38,7 +38,7 @@ private String getSortedAndEncodedParams(OAuthRequest request)
 
   private void checkPreconditions(OAuthRequest request)
   {
-    Preconditions.checkNotNull(request, "Cannot extract base string from null object");
+    Preconditions.checkNotNull(request, "Cannot extract base string from a null object");
 
     if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0)
     {

File: src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
Patch:
@@ -7,8 +7,7 @@
 import org.scribe.utils.*;
 
 /**
- * Default implementation of {@AccessTokenExtractor}. Conforms to OAuth 2.0
- *
+ * Default implementation of {@link AccessTokenExtractor}. Conforms to OAuth 2.0
  */
 public class TokenExtractor20Impl implements AccessTokenExtractor
 {

File: src/main/java/org/scribe/extractors/TokenExtractorImpl.java
Patch:
@@ -7,7 +7,7 @@
 import org.scribe.utils.*;
 
 /**
- * Default implementation of {@RequestTokenExtractor} and {@AccessTokenExtractor}. Conforms to OAuth 1.0a
+ * Default implementation of {@link RequestTokenExtractor} and {@link AccessTokenExtractor}. Conforms to OAuth 1.0a
  *
  * The process for extracting access and request tokens is similar so this class can do both things.
  * 

File: src/main/java/org/scribe/model/OAuthConfig.java
Patch:
@@ -72,7 +72,7 @@ public void log(String message)
       }
       catch (Exception e)
       {
-        throw new RuntimeException("there were problems while writting to the debug stream", e);
+        throw new RuntimeException("there were problems while writing to the debug stream", e);
       }
     }
   }

File: src/main/java/org/scribe/model/Parameter.java
Patch:
@@ -3,7 +3,7 @@
 import org.scribe.utils.*;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class Parameter implements Comparable<Parameter>
 {

File: src/main/java/org/scribe/model/ParameterList.java
Patch:
@@ -8,7 +8,7 @@
 import org.scribe.utils.Preconditions;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class ParameterList
 {

File: src/main/java/org/scribe/services/HMACSha1SignatureService.java
Patch:
@@ -7,7 +7,7 @@
 import org.scribe.utils.*;
 
 /**
- * HMAC-SHA1 implementation of {@SignatureService}
+ * HMAC-SHA1 implementation of {@link SignatureService}
  * 
  * @author Pablo Fernandez
  *

File: src/main/java/org/scribe/services/PlaintextSignatureService.java
Patch:
@@ -4,7 +4,7 @@
 import org.scribe.utils.*;
 
 /**
- * plaintext implementation of {@SignatureService}
+ * plaintext implementation of {@link SignatureService}
  *
  * @author Pablo Fernandez
  *

File: src/main/java/org/scribe/services/SignatureService.java
Patch:
@@ -22,7 +22,7 @@ public interface SignatureService
   /**
    * Returns the signature method/algorithm
    * 
-   * @return
+   * @return signature method/algorithm
    */
   public String getSignatureMethod();
 }

File: src/main/java/org/scribe/utils/MapUtils.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Map;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class MapUtils
 {

File: src/main/java/org/scribe/utils/OAuthEncoder.java
Patch:
@@ -7,7 +7,7 @@
 import org.scribe.exceptions.*;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class OAuthEncoder
 {

File: src/main/java/org/scribe/exceptions/OAuthConnectionException.java
Patch:
@@ -1,7 +1,7 @@
 package org.scribe.exceptions;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class OAuthConnectionException extends OAuthException
 {

File: src/main/java/org/scribe/extractors/BaseStringExtractorImpl.java
Patch:
@@ -38,7 +38,7 @@ private String getSortedAndEncodedParams(OAuthRequest request)
 
   private void checkPreconditions(OAuthRequest request)
   {
-    Preconditions.checkNotNull(request, "Cannot extract base string from null object");
+    Preconditions.checkNotNull(request, "Cannot extract base string from a null object");
 
     if (request.getOauthParameters() == null || request.getOauthParameters().size() <= 0)
     {

File: src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
Patch:
@@ -7,8 +7,7 @@
 import org.scribe.utils.*;
 
 /**
- * Default implementation of {@AccessTokenExtractor}. Conforms to OAuth 2.0
- *
+ * Default implementation of {@link AccessTokenExtractor}. Conforms to OAuth 2.0
  */
 public class TokenExtractor20Impl implements AccessTokenExtractor
 {

File: src/main/java/org/scribe/extractors/TokenExtractorImpl.java
Patch:
@@ -7,7 +7,7 @@
 import org.scribe.utils.*;
 
 /**
- * Default implementation of {@RequestTokenExtractor} and {@AccessTokenExtractor}. Conforms to OAuth 1.0a
+ * Default implementation of {@link RequestTokenExtractor} and {@link AccessTokenExtractor}. Conforms to OAuth 1.0a
  *
  * The process for extracting access and request tokens is similar so this class can do both things.
  * 

File: src/main/java/org/scribe/model/OAuthConfig.java
Patch:
@@ -72,7 +72,7 @@ public void log(String message)
       }
       catch (Exception e)
       {
-        throw new RuntimeException("there were problems while writting to the debug stream", e);
+        throw new RuntimeException("there were problems while writing to the debug stream", e);
       }
     }
   }

File: src/main/java/org/scribe/model/Parameter.java
Patch:
@@ -3,7 +3,7 @@
 import org.scribe.utils.*;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class Parameter implements Comparable<Parameter>
 {

File: src/main/java/org/scribe/model/ParameterList.java
Patch:
@@ -8,7 +8,7 @@
 import org.scribe.utils.Preconditions;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class ParameterList
 {

File: src/main/java/org/scribe/services/HMACSha1SignatureService.java
Patch:
@@ -7,7 +7,7 @@
 import org.scribe.utils.*;
 
 /**
- * HMAC-SHA1 implementation of {@SignatureService}
+ * HMAC-SHA1 implementation of {@link SignatureService}
  * 
  * @author Pablo Fernandez
  *

File: src/main/java/org/scribe/services/PlaintextSignatureService.java
Patch:
@@ -4,7 +4,7 @@
 import org.scribe.utils.*;
 
 /**
- * plaintext implementation of {@SignatureService}
+ * plaintext implementation of {@link SignatureService}
  *
  * @author Pablo Fernandez
  *

File: src/main/java/org/scribe/services/SignatureService.java
Patch:
@@ -22,7 +22,7 @@ public interface SignatureService
   /**
    * Returns the signature method/algorithm
    * 
-   * @return
+   * @return signature method/algorithm
    */
   public String getSignatureMethod();
 }

File: src/main/java/org/scribe/utils/MapUtils.java
Patch:
@@ -3,7 +3,7 @@
 import java.util.Map;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class MapUtils
 {

File: src/main/java/org/scribe/utils/OAuthEncoder.java
Patch:
@@ -7,7 +7,7 @@
 import org.scribe.exceptions.*;
 
 /**
- * @author: Pablo Fernandez
+ * @author Pablo Fernandez
  */
 public class OAuthEncoder
 {

File: src/main/java/org/scribe/extractors/JsonTokenExtractor.java
Patch:
@@ -20,7 +20,7 @@ public Token extract(String response)
     }
     else
     {
-      throw new OAuthException("Cannot extract an acces token. Response was: " + response);
+      throw new OAuthException("Cannot extract an access token. Response was: " + response);
     }
   }
 

File: src/main/java/org/scribe/extractors/JsonTokenExtractor.java
Patch:
@@ -20,7 +20,7 @@ public Token extract(String response)
     }
     else
     {
-      throw new OAuthException("Cannot extract an acces token. Response was: " + response);
+      throw new OAuthException("Cannot extract an access token. Response was: " + response);
     }
   }
 

File: src/main/java/org/scribe/oauth/OAuth10aServiceImpl.java
Patch:
@@ -4,6 +4,7 @@
 
 import org.scribe.builder.api.*;
 import org.scribe.model.*;
+import org.scribe.services.*;
 import org.scribe.utils.*;
 import java.util.concurrent.TimeUnit;
 
@@ -139,6 +140,7 @@ public String getAuthorizationUrl(Token requestToken)
   private String getSignature(OAuthRequest request, Token token)
   {
     config.log("generating signature...");
+    config.log("using base64 encoder: " + Base64Encoder.type());
     String baseString = api.getBaseStringExtractor().extract(request);
     String signature = api.getSignatureService().getSignature(baseString, config.getApiSecret(), token.getSecret());
 

File: src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
Patch:
@@ -16,6 +16,7 @@ public class HeaderExtractorImpl implements HeaderExtractor
 {
   private static final String PARAM_SEPARATOR = ", ";
   private static final String PREAMBLE = "OAuth ";
+  public static final int ESTIMATED_PARAM_LENGTH = 20;
 
   /**
    * {@inheritDoc}
@@ -24,7 +25,7 @@ public String extract(OAuthRequest request)
   {
     checkPreconditions(request);
     Map<String, String> parameters = request.getOauthParameters();
-    StringBuffer header = new StringBuffer(parameters.size() * 20);
+    StringBuilder header = new StringBuilder(parameters.size() * ESTIMATED_PARAM_LENGTH);
     header.append(PREAMBLE);
     for (Map.Entry<String, String> entry : parameters.entrySet())
     {

File: src/main/java/org/scribe/builder/api/PlurkApi.java
Patch:
@@ -26,7 +26,7 @@ public String getAccessTokenEndpoint()
     return ACCESS_TOKEN_URL;
   }
 
-  public class Mobile extends PlurkApi
+  public static class Mobile extends PlurkApi
   {
     private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";
 

File: src/main/java/org/scribe/extractors/HeaderExtractorImpl.java
Patch:
@@ -26,13 +26,13 @@ public String extract(OAuthRequest request)
     Map<String, String> parameters = request.getOauthParameters();
     StringBuffer header = new StringBuffer(parameters.size() * 20);
     header.append(PREAMBLE);
-    for (String key : parameters.keySet())
+    for (Map.Entry<String, String> entry : parameters.entrySet())
     {
       if(header.length() > PREAMBLE.length())
       { 
         header.append(PARAM_SEPARATOR);
       }
-      header.append(String.format("%s=\"%s\"", key, OAuthEncoder.encode(parameters.get(key))));
+      header.append(String.format("%s=\"%s\"", entry.getKey(), OAuthEncoder.encode(entry.getValue())));
     }
     return header.toString();
   }

File: src/main/java/org/scribe/model/Request.java
Patch:
@@ -4,7 +4,7 @@
 import java.net.*;
 import java.nio.charset.*;
 import java.util.*;
-import java.util.concurrent.TimeUnit;
+import java.util.concurrent.*;
 
 import org.scribe.exceptions.*;
 
@@ -189,7 +189,7 @@ public void addPayload(String payload)
    */
   public void addPayload(byte[] payload)
   {
-    this.bytePayload = payload;
+    this.bytePayload = payload.clone();
   }
 
   /**

File: src/main/java/org/scribe/services/HMACSha1SignatureService.java
Patch:
@@ -44,7 +44,7 @@ private String doSign(String toSign, String keyString) throws Exception
     Mac mac = Mac.getInstance(HMAC_SHA1);
     mac.init(key);
     byte[] bytes = mac.doFinal(toSign.getBytes(UTF8));
-    return new String(Base64.encodeBase64(bytes)).replace(CARRIAGE_RETURN, EMPTY_STRING);
+    return new String(Base64.encodeBase64(bytes), UTF8).replace(CARRIAGE_RETURN, EMPTY_STRING);
   }
 
   /**

File: src/main/java/org/scribe/services/RSASha1SignatureService.java
Patch:
@@ -11,6 +11,7 @@ public class RSASha1SignatureService implements SignatureService
 {
   private static final String METHOD = "RSA-SHA1";
   private static final String RSA_SHA1 = "SHA1withRSA";
+  private static final String UTF8 = "UTF-8";
 
   private PrivateKey privateKey;
 
@@ -28,8 +29,8 @@ public String getSignature(String baseString, String apiSecret, String tokenSecr
     {
       Signature signature = Signature.getInstance(RSA_SHA1);
       signature.initSign(privateKey);
-      signature.update(baseString.getBytes());
-      return new String(Base64.encodeBase64(signature.sign(), false));
+      signature.update(baseString.getBytes(UTF8));
+      return new String(Base64.encodeBase64(signature.sign(), false), UTF8);
     }
     catch (Exception e)
     {

File: src/main/java/org/scribe/services/TimestampServiceImpl.java
Patch:
@@ -53,14 +53,15 @@ void setTimer(Timer timer)
    */
   static class Timer
   {
+    private final Random rand = new Random();
     Long getMilis()
     {
       return System.currentTimeMillis();
     }
 
     Integer getRandomInteger()
     {
-      return new Random().nextInt();
+      return rand.nextInt();
     }
   }
 

File: src/main/java/org/scribe/builder/api/VkontakteApi.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class VkontakteApi extends DefaultApi20
 {
-  private static final String AUTHORIZE_URL = "https://api.vkontakte.ru/oauth/authorize?client_id=%s&redirect_uri=%s&response_type=code";
+  private static final String AUTHORIZE_URL = "https://oauth.vk.com/authorize?client_id=%s&redirect_uri=%s&response_type=code";
   private static final String SCOPED_AUTHORIZE_URL = String.format("%s&scope=%%s", AUTHORIZE_URL);
 
   @Override

File: src/main/java/org/scribe/builder/api/ConstantContactApi2.java
Patch:
@@ -34,7 +34,6 @@ public AccessTokenExtractor getAccessTokenExtractor()
     return new AccessTokenExtractor()
     {
 
-      @Override
       public Token extract(String response)
       {
         Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");

File: src/main/java/org/scribe/extractors/JsonTokenExtractor.java
Patch:
@@ -10,7 +10,6 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
-  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

File: src/main/java/org/scribe/builder/api/ConstantContactApi2.java
Patch:
@@ -34,7 +34,6 @@ public AccessTokenExtractor getAccessTokenExtractor()
     return new AccessTokenExtractor()
     {
 
-      @Override
       public Token extract(String response)
       {
         Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");

File: src/main/java/org/scribe/extractors/JsonTokenExtractor.java
Patch:
@@ -10,7 +10,6 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
-  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

File: src/main/java/org/scribe/builder/api/ConstantContactApi2.java
Patch:
@@ -45,7 +45,8 @@ public Token extract(String response)
         {
           String token = OAuthEncoder.decode(matcher.group(1));
           return new Token(token, "", response);
-        } else
+        } 
+        else
         {
           throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
         }

File: src/main/java/org/scribe/builder/api/FreelancerAPI.java
Patch:
@@ -1,7 +1,6 @@
 package org.scribe.builder.api;
 
-import org.scribe.model.Token;
-import org.scribe.model.Verb;
+import org.scribe.model.*;
 
 public class FreelancerAPI extends DefaultApi10a
 {

File: src/main/java/org/scribe/extractors/JsonTokenExtractor.java
Patch:
@@ -10,6 +10,7 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
+  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

File: src/main/java/org/scribe/extractors/JsonTokenExtractor.java
Patch:
@@ -10,7 +10,6 @@ public class JsonTokenExtractor implements AccessTokenExtractor
 {
   private Pattern accessTokenPattern = Pattern.compile("\"access_token\":\\s*\"(\\S*?)\"");
 
-  @Override
   public Token extract(String response)
   {
     Preconditions.checkEmptyString(response, "Cannot extract a token from a null or empty String");

File: src/main/java/org/scribe/model/OAuthConfig.java
Patch:
@@ -72,7 +72,7 @@ public void log(String message)
       }
       catch (Exception e)
       {
-        // do nothing.
+        throw new RuntimeException("there were problems while writting to the debug stream", e);
       }
     }
   }

File: src/test/java/org/scribe/builder/ServiceBuilderTest.java
Patch:
@@ -63,8 +63,7 @@ public void shouldAcceptAnScope()
   public static class ApiMock implements Api
   {
     public static OAuthConfig config;
-    
-    @Override
+
     public OAuthService createService(OAuthConfig config)
     {
       ApiMock.config = config;

File: src/main/java/org/scribe/model/Response.java
Patch:
@@ -28,10 +28,11 @@ public class Response
       code = connection.getResponseCode();
       headers = parseHeaders(connection);
       stream = wasSuccessful() ? connection.getInputStream() : connection.getErrorStream();
-    } catch (UnknownHostException e)
+    }
+    catch (UnknownHostException e)
     {
       code = 404;
-      body = EMPTY;
+      body = Response.EMPTY;
     }
   }
 

File: src/main/java/org/scribe/builder/api/MobilePlurkApi.java
Patch:
@@ -2,7 +2,7 @@
 
 import org.scribe.model.Token;
 
-public class PlurkApi extends DefaultApi10a
+public class MobilePlurkApi extends DefaultApi10a
 {
   private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
   private static final String AUTHORIZATION_URL = "http://www.plurk.com/m/authorize?oauth_token=%s";

File: src/test/java/org/scribe/examples/LiveExample.java
Patch:
@@ -21,7 +21,7 @@ public static void main(String[] args)
                                   .provider(LiveApi.class)
                                   .apiKey(apiKey)
                                   .apiSecret(apiSecret)
-		                  .scope('wl.basic')
+                                  .scope("wl.basic")
                                   .callback("http://localhost:9000/")
                                   .build();
     Scanner in = new Scanner(System.in);

File: src/test/java/org/scribe/examples/LiveExample.java
Patch:
@@ -21,7 +21,7 @@ public static void main(String[] args)
                                   .provider(LiveApi.class)
                                   .apiKey(apiKey)
                                   .apiSecret(apiSecret)
-		                  .scope('wl.basic')
+                                  .scope("wl.basic")
                                   .callback("http://localhost:9000/")
                                   .build();
     Scanner in = new Scanner(System.in);

File: src/main/java/org/scribe/builder/api/PlurkApi.java
Patch:
@@ -5,7 +5,7 @@
 public class PlurkApi extends DefaultApi10a
 {
   private static final String REQUEST_TOKEN_URL = "http://www.plurk.com/OAuth/request_token";
-  private static final String AUTHORIZE_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
+  private static final String AUTHORIZATION_URL = "http://www.plurk.com/OAuth/authorize?oauth_token=%s";
   private static final String ACCESS_TOKEN_URL = "http://www.plurk.com/OAuth/access_token";
 
   @Override
@@ -17,7 +17,7 @@ public String getRequestTokenEndpoint()
   @Override
   public String getAuthorizationUrl(Token requestToken)
   {
-    return String.format(AUTHORIZE_URL, requestToken.getToken());
+    return String.format(AUTHORIZATION_URL, requestToken.getToken());
   }
 
   @Override

File: src/main/java/org/scribe/builder/api/FacebookApi.java
Patch:
@@ -24,7 +24,7 @@ public String getAuthorizationUrl(OAuthConfig config)
     // Append scope if present
     if(config.hasScope())
     {
-     return String.format(SCOPED_AUTHORIZE_URL, formURLEncode(config.getCallback()), formURLEncode(config.getScope())); 
+     return String.format(SCOPED_AUTHORIZE_URL, config.getApiKey(), formURLEncode(config.getCallback()), formURLEncode(config.getScope())); 
     }
     else
     {

File: src/main/java/org/scribe/model/Request.java
Patch:
@@ -64,6 +64,7 @@ private void createConnection() throws IOException
     String effectiveUrl = URLUtils.appendParametersToQueryString(url, querystringParams);
     if (connection == null)
     {
+      System.setProperty("http.keepAlive", "false");
       connection = (HttpURLConnection) new URL(effectiveUrl).openConnection();
     }
   }

File: src/main/java/org/scribe/extractors/TokenExtractor20Impl.java
Patch:
@@ -25,9 +25,10 @@ public Token extract(String response)
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
     if (matcher.matches())
     {
-      String token = URLUtils.percentDecode(matcher.group(1));
+      String token = URLUtils.formURLDecode(matcher.group(1));
       return new Token(token, EMPTY_SECRET);
-    } else
+    } 
+    else
     {
       throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
     }

File: src/test/java/org/scribe/services/HMACSha1SignatureServiceTest.java
Patch:
@@ -3,7 +3,7 @@
 import static org.junit.Assert.*;
 
 import org.junit.*;
-import org.scribe.exceptions.OAuthException;
+import org.scribe.exceptions.*;
 
 public class HMACSha1SignatureServiceTest
 {
@@ -29,7 +29,7 @@ public void shouldReturnSignature()
     String apiSecret = "api secret";
     String tokenSecret = "token secret";
     String baseString = "base string";
-    String signature = "cyxvUDZY/5cQBcBiKulaNgnhN/w=";
+    String signature = "uGymw2KHOTWI699YEaoi5xyLT50=";
     assertEquals(signature, service.getSignature(baseString, apiSecret, tokenSecret));
   }
 

File: src/test/java/org/scribe/extractors/BaseStringExtractorTest.java
Patch:
@@ -23,7 +23,7 @@ public void setup()
   @Test
   public void shouldExtractBaseStringFromOAuthRequest()
   {
-    String expected = "GET&http%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E*%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String expected = "GET&http%3A%2F%2Fexample.com&oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
     String baseString = extractor.extract(request);
     assertEquals(expected, baseString);
   }
@@ -45,7 +45,7 @@ public void shouldThrowExceptionIfRquestHasNoOAuthParameters()
   @Test
   public void shouldProperlyEncodeSpaces()
   {
-    String expected = "GET&http%3A%2F%2Fexample.com&body%3Dthis%2520param%2520has%2520whitespace%26oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E*%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
+    String expected = "GET&http%3A%2F%2Fexample.com&body%3Dthis%2520param%2520has%2520whitespace%26oauth_callback%3Dhttp%253A%252F%252Fexample%252Fcallback%26oauth_consumer_key%3DAS%2523%2524%255E%252A%2540%2526%26oauth_signature%3DOAuth-Signature%26oauth_timestamp%3D123456";
     request.addBodyParameter("body", "this param has whitespace");
     assertEquals(expected, extractor.extract(request));
   }

File: src/test/java/org/scribe/extractors/HeaderExtractorTest.java
Patch:
@@ -24,7 +24,7 @@ public void setup()
   public void shouldExtractStandardHeader()
   {
     String expected = "OAuth oauth_callback=\"http%3A%2F%2Fexample%2Fcallback\", " + "oauth_signature=\"OAuth-Signature\", "
-        + "oauth_consumer_key=\"AS%23%24%5E*%40%26\", " + "oauth_timestamp=\"123456\"";
+        + "oauth_consumer_key=\"AS%23%24%5E%2A%40%26\", " + "oauth_timestamp=\"123456\"";
     String header = extractor.extract(request);
     assertEquals(expected, header);
   }

File: src/main/java/org/scribe/extractors/TokenExtractorImpl.java
Patch:
@@ -22,7 +22,7 @@ public class TokenExtractorImpl implements RequestTokenExtractor, AccessTokenExt
    */
   public Token extract(String response)
   {
-    Preconditions.checkEmptyString(response, "Cant extract a token from null object or an empty string.");
+    Preconditions.checkEmptyString(response, "Response body is incorrect. Can't extract a token from an empty string");
 
     Matcher matcher = Pattern.compile(TOKEN_REGEX).matcher(response);
     if (matcher.matches())
@@ -32,7 +32,7 @@ public Token extract(String response)
       return new Token(token, secret);
     } else
     {
-      throw new OAuthException("Could not find request token or secret in response: " + response, null);
+      throw new OAuthException("Response body is incorrect. Can't extract a token from this: '" + response + "'", null);
     }
   }
 }

File: src/main/java/org/scribe/model/OAuthRequest.java
Patch:
@@ -41,7 +41,7 @@ public void addOAuthParameter(String key, String value)
 
   private String checkKey(String key)
   {
-    if (!key.startsWith(OAUTH_PREFIX) || key.equals(OAuthConstants.SCOPE))
+    if (!key.startsWith(OAUTH_PREFIX) || !key.equals(OAuthConstants.SCOPE))
     {
       throw new IllegalArgumentException(String.format("OAuth parameters must either be %s or start with '%s'", OAuthConstants.SCOPE, OAUTH_PREFIX));
     } else

File: src/main/java/org/scribe/builder/api/GoogleApi.java
Patch:
@@ -5,12 +5,12 @@ public class GoogleApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "https://www.google.com/accounts/OAuthGetRequestToken"; 
+    return "https://www.google.com/accounts/OAuthGetAccessToken"; 
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "https://www.google.com/accounts/OAuthGetAccessToken";
+    return "https://www.google.com/accounts/OAuthGetRequestToken";
   }
 }

File: src/main/java/org/scribe/builder/api/GoogleApi.java
Patch:
@@ -5,12 +5,12 @@ public class GoogleApi extends DefaultApi10a
   @Override
   public String getAccessTokenEndpoint()
   {
-    return "https://www.google.com/accounts/OAuthGetRequestToken"; 
+    return "https://www.google.com/accounts/OAuthGetAccessToken"; 
   }
 
   @Override
   public String getRequestTokenEndpoint()
   {
-    return "https://www.google.com/accounts/OAuthGetAccessToken";
+    return "https://www.google.com/accounts/OAuthGetRequestToken";
   }
 }

File: src/main/java/org/scribe/model/Request.java
Patch:
@@ -245,4 +245,4 @@ public static enum Verb
   {
     GET, POST, PUT, DELETE
   }
-}
\ No newline at end of file
+}

