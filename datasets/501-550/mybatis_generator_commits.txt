File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/jdk14/Jdk14LoggingLogFactory.java
Patch:
@@ -23,4 +23,4 @@ public class Jdk14LoggingLogFactory implements AbstractLogFactory {
     public Log getLog(Class<?> clazz) {
         return new Jdk14LoggingImpl(clazz);
     }
-}
\ No newline at end of file
+}

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/nologging/NoLoggingLogFactory.java
Patch:
@@ -23,4 +23,4 @@ public class NoLoggingLogFactory implements AbstractLogFactory {
     public Log getLog(Class<?> clazz) {
         return new NoLoggingImpl();
     }
-}
\ No newline at end of file
+}

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/slf4j/Slf4jLoggingLogFactory.java
Patch:
@@ -23,4 +23,4 @@ public class Slf4jLoggingLogFactory implements AbstractLogFactory {
     public Log getLog(Class<?> clazz) {
         return new Slf4jImpl(clazz);
     }
-}
\ No newline at end of file
+}

File: eclipse/org.mybatis.generator.eclipse.ui/antsrc/org/mybatis/generator/eclipse/ui/ant/logging/slf4j/Slf4jLoggingLogFactory.java
Patch:
@@ -24,4 +24,4 @@ public class Slf4jLoggingLogFactory implements AbstractLogFactory {
     public Log getLog(Class<?> clazz) {
         return new Slf4jImpl(clazz);
     }
-}
\ No newline at end of file
+}

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/wizards/NewConfigFileWizard.java
Patch:
@@ -210,4 +210,4 @@ public void init(IWorkbench workbench, IStructuredSelection selection) {
     public void init(IWorkbench workbench, ISelection selection) {
         this.selection = selection;
     }
-}
\ No newline at end of file
+}

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/wizards/NewConfigFileWizardPage1.java
Patch:
@@ -237,4 +237,4 @@ public String getLocation() {
     public String getFileName() {
         return fileText.getText();
     }
-}
\ No newline at end of file
+}

File: core/mybatis-generator-systests-domtests/src/main/java/mbg/domtest/GenerateTestSourceFiles.java
Patch:
@@ -48,20 +48,20 @@ public static void main (String[] args) {
         }
     }
 
-    private void gatherGenerators(List<CompilationUnitGenerator> generators) throws InstantiationException, IllegalAccessException {
+    private void gatherGenerators(List<CompilationUnitGenerator> generators) throws ReflectiveOperationException {
         Reflections reflections = new Reflections("mbg.domtest.generators");
         Set<Class<? extends CompilationUnitGenerator>> classes = reflections.getSubTypesOf(CompilationUnitGenerator.class);
 
         for (Class<? extends CompilationUnitGenerator> clazz : classes) {
             if (clazz.getAnnotation(IgnoreDomTest.class) == null) {
-                generators.add(clazz.newInstance());
+                generators.add(clazz.getDeclaredConstructor().newInstance());
             } else {
                 System.out.println("Generator " + clazz.getName() + " ignored");
             }
         }
     }
 
-    private void run(File outputDirectory) throws IOException, InstantiationException, IllegalAccessException {
+    private void run(File outputDirectory) throws IOException, ReflectiveOperationException {
         setupOutputDirectry(outputDirectory);
 
         List<CompilationUnitGenerator> generators = new ArrayList<>();

File: eclipse/org.mybatis.generator.eclipse.test.utilities/src/org/mybatis/generator/eclipse/test/Utilities.java
Patch:
@@ -60,7 +60,7 @@ public static String getResourceAsString(InputStream resource) throws IOExceptio
 
     public static <T> T newInstance(Class<? extends T> type) {
         try {
-            return type.newInstance();
+            return type.getDeclaredConstructor().newInstance();
         } catch (Exception e) {
             throw new CantCreateInstanceException("error creating instance of class " + type.getName(), e);
         }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinModifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,8 @@ public enum KotlinModifier {
     PUBLIC("public"), //$NON-NLS-1$
     PRIVATE("private"), //$NON-NLS-1$
     DATA("data"), //$NON-NLS-1$
-    LATE_INIT("lateinit"); //$NON-NLS-1$
+    LATE_INIT("lateinit"), //$NON-NLS-1$
+    CONST("const"); //$NON-NLS-1$
 
     private final String value;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinModifier.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,8 @@ public enum KotlinModifier {
     PUBLIC("public"), //$NON-NLS-1$
     PRIVATE("private"), //$NON-NLS-1$
     DATA("data"), //$NON-NLS-1$
-    LATE_INIT("lateinit"); //$NON-NLS-1$
+    LATE_INIT("lateinit"), //$NON-NLS-1$
+    CONST("const"); //$NON-NLS-1$
 
     private final String value;
 

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/JavaCodeGenerationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@
 class JavaCodeGenerationTest {
 
     @ParameterizedTest
-    @MethodSource("generateJavaFiles")
+    @MethodSource("javaFileGenerator")
     void testJavaParse(GeneratedJavaFile generatedJavaFile) {
         DefaultJavaFormatter formatter = new DefaultJavaFormatter();
 
@@ -49,7 +49,7 @@ void testJavaParse(GeneratedJavaFile generatedJavaFile) {
         }
     }
 
-    static List<GeneratedJavaFile> generateJavaFiles() throws Exception {
+    static List<GeneratedJavaFile> javaFileGenerator() throws Exception {
         List<GeneratedJavaFile> generatedFiles = new ArrayList<>();
         generatedFiles.addAll(generateJavaFilesMybatis());
         generatedFiles.addAll(generateJavaFilesMybatisDsql());

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/KotlinCodeGenerationTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,14 +40,14 @@
 class KotlinCodeGenerationTest {
 
     @ParameterizedTest
-    @MethodSource("generateKotlinFiles")
+    @MethodSource("kotlinFileGenerator")
     void testKotlinParse(GeneratedKotlinFile generatedKotlinFile) {
         // for now, just let the test pass. if we find a good Kotlin parser, then mimic the
         // function of the Java test by trying to parse generated code
         assertTrue(true);
     }
 
-    static List<GeneratedKotlinFile> generateKotlinFiles() throws Exception {
+    static List<GeneratedKotlinFile> kotlinFileGenerator() throws Exception {
         JavaCodeGenerationTest.createDatabase();
         return generateKotlinFiles("/scripts/generatorConfig-kotlin.xml");
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -74,6 +74,8 @@ private PropertyRegistry() {}
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_DATE_FORMAT = "dateFormat"; //$NON-NLS-1$
+    public static final String COMMENT_GENERATOR_USE_LEGACY_GENERATED_ANNOTATION =
+            "useLegacyGeneratedAnnotation"; //$NON-NLS-1$
 
     public static final String COLUMN_OVERRIDE_FORCE_JAVA_TYPE = "forceJavaTypeIntoMapping"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -74,6 +74,8 @@ private PropertyRegistry() {}
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_DATE_FORMAT = "dateFormat"; //$NON-NLS-1$
+    public static final String COMMENT_GENERATOR_USE_LEGACY_GENERATED_ANNOTATION =
+            "useLegacyGeneratedAnnotation"; //$NON-NLS-1$
 
     public static final String COLUMN_OVERRIDE_FORCE_JAVA_TYPE = "forceJavaTypeIntoMapping"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/MyBatisGenerator.java
Patch:
@@ -23,6 +23,7 @@
 import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.OutputStreamWriter;
+import java.nio.charset.Charset;
 import java.sql.SQLException;
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -427,7 +428,7 @@ private void writeFile(File file, String content, String fileEncoding) throws IO
             if (fileEncoding == null) {
                 osw = new OutputStreamWriter(fos);
             } else {
-                osw = new OutputStreamWriter(fos, fileEncoding);
+                osw = new OutputStreamWriter(fos, Charset.forName(fileEncoding));
             }
 
             try (BufferedWriter bw = new BufferedWriter(osw)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -74,4 +74,6 @@ private PropertyRegistry() {}
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_DATE_FORMAT = "dateFormat"; //$NON-NLS-1$
+
+    public static final String COLUMN_OVERRIDE_FORCE_JAVA_TYPE = "forceJavaTypeIntoMapping"; //$NON-NLS-1$
 }

File: core/mybatis-generator-systests-mybatis3-java8/src/test/java/mbg/test/mb3/dsql/miscellaneous/AbstractAnnotatedMiscellaneousTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,6 +17,7 @@
 
 import static mbg.test.common.util.TestUtilities.createDatabase;
 
+import mbg.test.mb3.generated.dsql.miscellaneous.mapper.EnumordinaltestMapper;
 import org.apache.ibatis.datasource.unpooled.UnpooledDataSource;
 import org.apache.ibatis.mapping.Environment;
 import org.apache.ibatis.session.Configuration;
@@ -46,6 +47,7 @@ public void setUp() throws Exception {
         Environment environment = new Environment("test", new JdbcTransactionFactory(), ds);
         Configuration config = new Configuration(environment);
         config.addMapper(EnumtestMapper.class);
+        config.addMapper(EnumordinaltestMapper.class);
         config.addMapper(GeneratedalwaystestMapper.class);
         config.addMapper(GeneratedalwaystestnoupdatesMapper.class);
         config.addMapper(MyObjectMapper.class);

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/miscellaneous/AbstractAnnotatedMiscellaneousTest.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -15,6 +15,7 @@
  */
 package mbg.test.mb3.annotated.miscellaneous;
 
+import mbg.test.mb3.generated.annotated.miscellaneous.mapper.EnumordinaltestMapper;
 import org.junit.jupiter.api.BeforeEach;
 
 import mbg.test.mb3.AbstractTest;
@@ -31,6 +32,7 @@ public abstract class AbstractAnnotatedMiscellaneousTest extends AbstractTest {
     public void setUp() throws Exception {
         super.setUp();
         sqlSessionFactory.getConfiguration().addMapper(EnumtestMapper.class);
+        sqlSessionFactory.getConfiguration().addMapper(EnumordinaltestMapper.class);
         sqlSessionFactory.getConfiguration().addMapper(MyObjectMapper.class);
         sqlSessionFactory.getConfiguration().addMapper(RegexrenameMapper.class);
         sqlSessionFactory.getConfiguration().addMapper(GeneratedalwaystestMapper.class);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -74,4 +74,6 @@ private PropertyRegistry() {}
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_DATE_FORMAT = "dateFormat"; //$NON-NLS-1$
+
+    public static final String COLUMN_OVERRIDE_FORCE_JAVA_TYPE = "forceJavaTypeIntoMapping"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -79,4 +79,6 @@ public String toString() {
      * @return true, if is mergeable
      */
     public abstract boolean isMergeable();
+
+    public abstract String getFileEncoding();
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedJavaFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -78,6 +78,7 @@ public boolean isMergeable() {
         return true;
     }
 
+    @Override
     public String getFileEncoding() {
         return fileEncoding;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedKotlinFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,6 +55,7 @@ public boolean isMergeable() {
         return false;
     }
 
+    @Override
     public String getFileEncoding() {
         return fileEncoding;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -79,4 +79,6 @@ public String toString() {
      * @return true, if is mergeable
      */
     public abstract boolean isMergeable();
+
+    public abstract String getFileEncoding();
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedJavaFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -78,6 +78,7 @@ public boolean isMergeable() {
         return true;
     }
 
+    @Override
     public String getFileEncoding() {
         return fileEncoding;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedKotlinFile.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,6 +55,7 @@ public boolean isMergeable() {
         return false;
     }
 
+    @Override
     public String getFileEncoding() {
         return fileEncoding;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/kotlin/elements/InsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2021 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,8 +64,8 @@ public KotlinFunctionAndImports generateMethodAndImports() {
             functionAndImports.getImports().add(fieldNameAndImport.importString());
 
             function.addCodeLine("    map(" + fieldNameAndImport.fieldName() //$NON-NLS-1$
-                    + ").toProperty(\"" + column.getJavaProperty() //$NON-NLS-1$
-                    + "\")"); //$NON-NLS-1$
+                    + ") toProperty \"" + column.getJavaProperty() //$NON-NLS-1$
+                    + "\""); //$NON-NLS-1$
         }
 
         function.addCodeLine("}"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/kotlin/elements/InsertMultipleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2021 the original author or authors.
+ *    Copyright 2006-2022 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,8 +85,8 @@ public KotlinFunctionAndImports generateMethodAndImports() {
             functionAndImports.getImports().add(fieldNameAndImport.importString());
 
             function.addCodeLine("    map(" + fieldNameAndImport.fieldName() //$NON-NLS-1$
-                    + ").toProperty(\"" + column.getJavaProperty() //$NON-NLS-1$
-                    + "\")"); //$NON-NLS-1$
+                    + ") toProperty \"" + column.getJavaProperty() //$NON-NLS-1$
+                    + "\""); //$NON-NLS-1$
         }
 
         function.addCodeLine("}"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/MyBatisGenerator.java
Patch:
@@ -54,6 +54,8 @@
  */
 public class MyBatisGenerator {
 
+    private static final ProgressCallback NULL_PROGRESS_CALLBACK = new ProgressCallback() {};
+
     private final Configuration configuration;
 
     private final ShellCallback shellCallback;
@@ -211,7 +213,7 @@ public void generate(ProgressCallback callback, Set<String> contextIds,
             IOException, InterruptedException {
 
         if (callback == null) {
-            callback = new ProgressCallback() {};
+            callback = NULL_PROGRESS_CALLBACK;
         }
 
         generatedJavaFiles.clear();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinTypeRenderer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- *    Copyright 2006-2020 the original author or authors.
+ *    Copyright 2006-2021 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,6 +37,7 @@ public List<String> render(KotlinType kotlinType) {
                 + kotlinType.getType().getValue() + " " //$NON-NLS-1$
                 + kotlinType.getName();
         String renderedSuperTypes = kotlinType.getSuperTypes().stream()
+                .sorted()
                 .collect(CustomCollectors.joining(", ", " : ", "")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
 
         if (kotlinType.getNamedItems().isEmpty()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/ant/AntProgressCallback.java
Patch:
@@ -17,14 +17,14 @@
 
 import org.apache.tools.ant.Project;
 import org.apache.tools.ant.Task;
-import org.mybatis.generator.internal.NullProgressCallback;
+import org.mybatis.generator.api.ProgressCallback;
 
 /**
  * This callback logs progress messages with the Ant logger.
  *
  * @author Jeff Butler
  */
-public class AntProgressCallback extends NullProgressCallback {
+public class AntProgressCallback implements ProgressCallback {
 
     private final Task task;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/MyBatisGenerator.java
Patch:
@@ -36,7 +36,6 @@
 import org.mybatis.generator.exception.InvalidConfigurationException;
 import org.mybatis.generator.exception.ShellException;
 import org.mybatis.generator.internal.DefaultShellCallback;
-import org.mybatis.generator.internal.NullProgressCallback;
 import org.mybatis.generator.internal.ObjectFactory;
 import org.mybatis.generator.internal.XmlFileMergerJaxp;
 
@@ -212,7 +211,7 @@ public void generate(ProgressCallback callback, Set<String> contextIds,
             IOException, InterruptedException {
 
         if (callback == null) {
-            callback = new NullProgressCallback();
+            callback = new ProgressCallback() {};
         }
 
         generatedJavaFiles.clear();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/VerboseProgressCallback.java
Patch:
@@ -15,15 +15,13 @@
  */
 package org.mybatis.generator.api;
 
-import org.mybatis.generator.internal.NullProgressCallback;
-
 /**
  * A slightly more verbose progress callback.
  *
  * @author Jeff Butler
  *
  */
-public class VerboseProgressCallback extends NullProgressCallback {
+public class VerboseProgressCallback implements ProgressCallback {
 
     public VerboseProgressCallback() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/ant/AntProgressCallback.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2016 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedJavaFile.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,7 +60,7 @@ public String getTargetPackage() {
      * This method is required by the Eclipse Java merger. If you are not
      * running in Eclipse, or some other system that implements the Java merge
      * function, you may return null from this method.
-     * 
+     *
      * @return the CompilationUnit associated with this file, or null if the
      *         file is not mergeable.
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedKotlinFile.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedXmlFile.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ShellRunner.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@
 
 /**
  * This class allows the code generator to be run from the command line.
- * 
+ *
  * @author Jeff Butler
  */
 public class ShellRunner {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultJavaFormatter.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@
 /**
  * This class is the default formatter for generated Java.  This class will use the
  * built in DOM renderers.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultKotlinFormatter.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 /**
  * This class is the default formatter for generated Kotlin.  This class will use the
  * built in DOM renderers.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultXmlFormatter.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
 /**
  * This class is the default formatter for generated XML.  This class will use the
  * built in document renderer.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/AbstractJavaType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public abstract class AbstractJavaType extends JavaElement {
     private List<Field> fields = new ArrayList<>();
 
     private List<Method> methods = new ArrayList<>();
-    
+
     public AbstractJavaType(FullyQualifiedJavaType type) {
         this.type = type;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Field.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InitializationBlock.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InnerInterface.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 import java.util.TreeSet;
 
 public class Interface extends InnerInterface implements CompilationUnit {
-    
+
     private Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
 
     private Set<String> staticImports = new TreeSet<>();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaElement.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaVisibility.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 /**
  * Typesafe enum of possible Java visibility settings.
- * 
+ *
  * @author Jeff Butler
  */
 public enum JavaVisibility {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Parameter.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/PrimitiveTypeWrapper.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class PrimitiveTypeWrapper extends FullyQualifiedJavaType {
     /**
      * Use the static getXXXInstance methods to gain access to one of the type
      * wrappers.
-     * 
+     *
      * @param fullyQualifiedName
      *            fully qualified name of the wrapper type
      * @param toPrimitiveMethod

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TypeParameter.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/render/BodyLineRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -61,7 +61,7 @@ public List<String> render(List<String> bodyLines) {
 
         return lines;
     }
-    
+
     private boolean isCodeBlockStartExceptSwitchStatement(String line) {
         return line.endsWith("{") && !line.startsWith("switch"); //$NON-NLS-1$ //$NON-NLS-2$
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/render/ParameterRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public String render(Parameter parameter, CompilationUnit compilationUnit) {
                 + (parameter.isVarargs() ? "... " : "") //$NON-NLS-1$ //$NON-NLS-2$
                 + parameter.getName();
     }
-    
+
     // should return empty string if no annotations
     private String renderAnnotations(Parameter parameter) {
         return parameter.getAnnotations().stream()

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/render/TypeParameterRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinFunction.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinNamedItem.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@ protected KotlinNamedItem(AbstractBuilder<?> builder) {
         modifiers.addAll(builder.modifiers);
         annotations.addAll(builder.annotations);
     }
-    
+
     public String getName() {
         return name;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinNamedItemContainer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public KotlinNamedItemContainer(NamedItemContainerBuilder<?> builder) {
     public void addNamedItem(KotlinNamedItem namedItem) {
         namedItems.add(namedItem);
     }
-    
+
     public List<KotlinNamedItem> getNamedItems() {
         return namedItems;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinNamedItemVisitor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/KotlinType.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
@@ -47,7 +47,7 @@ private KotlinType(Builder builder) {
         constructorProperties.addAll(builder.constructorProperties);
         superTypes.addAll(builder.superTypes);
     }
-    
+
     public List<KotlinProperty> getConstructorProperties() {
         return constructorProperties;
     }
@@ -59,7 +59,7 @@ public Type getType() {
     public List<String> getSuperTypes() {
         return superTypes;
     }
-    
+
     public void addConstructorProperty(KotlinProperty property) {
         constructorProperties.add(property);
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinArgRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@ public String render(KotlinArg kotlinArg) {
                 + kotlinArg.getDataType().map(dt -> ": " + dt).orElse("") //$NON-NLS-1$ //$NON-NLS-2$
                 + kotlinArg.getInitializationString().map(s -> " = " + s).orElse(""); //$NON-NLS-1$ //$NON-NLS-2$
     }
-    
+
     private String renderAnnotations(KotlinArg kotlinArg) {
         return kotlinArg.getAnnotations().stream()
                 .collect(CustomCollectors.joining(" ", "", " ")); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinFileRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinFunctionRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinNamedItemRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinPropertyRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinRenderingUtilities.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/render/KotlinTypeRenderer.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Attribute.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/DocType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/DocTypeVisitor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,6 +17,6 @@
 
 public interface DocTypeVisitor<R> {
     R visit(PublicDocType docType);
-    
+
     R visit(SystemDocType docType);
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Document.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public XmlElement getRootElement() {
     public void setRootElement(XmlElement rootElement) {
         this.rootElement = rootElement;
     }
-    
+
     public Optional<DocType> getDocType() {
         return Optional.ofNullable(docType);
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/ElementVisitor.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,6 +17,6 @@
 
 public interface ElementVisitor<R> {
     R visit(TextElement element);
-    
+
     R visit(XmlElement element);
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/PublicDocType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/SystemDocType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/TextElement.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/VisitableElement.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/XmlElement.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public void addElement(int index, VisitableElement element) {
     public String getName() {
         return name;
     }
-    
+
     public boolean hasChildren() {
         return !elements.isEmpty();
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/render/AttributeRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/render/DocTypeRenderer.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractXmlGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/XmlConstants.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 /**
  * Constants for MyBatis XML IDs.
- * 
+ *
  * @author Jeff Butler
  */
 public class XmlConstants {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/MyBatis3FormattingUtilities.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -113,7 +113,7 @@ public static String getAliasedEscapedColumnName(
      * The aliased column name for a select statement generated by the example clauses. This is not appropriate for
      * selects in SqlMaps because the column is not escaped for MyBatis. If there is a table alias, the value will be
      * alias.columnName.
-     * 
+     *
      * <p>This method is used in the Example classes and the returned value will be in a Java string.
      * So we need to escape double quotes if they are the delimiters.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/AnnotatedClientGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/JavaMapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/MixedClientGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
 /**
  * This class overrides the base mapper to provide annotated methods for the
  * methods that don't require SQL provider support.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/SimpleAnnotatedClientGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/SimpleJavaClientGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/SqlProviderGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -75,7 +75,7 @@ public List<CompilationUnit> getCompilationUnits() {
         }
 
         List<CompilationUnit> answer = new ArrayList<>();
-        
+
         if (!topLevelClass.getMethods().isEmpty()
                 && context.getPlugins().providerGenerated(topLevelClass, introspectedTable)) {
             answer.add(topLevelClass);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/AbstractJavaMapperMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -32,7 +32,7 @@ public abstract class AbstractJavaMapperMethodGenerator extends
     public AbstractJavaMapperMethodGenerator() {
         super();
     }
-    
+
     protected String getResultAnnotation(Interface interfaze, IntrospectedColumn introspectedColumn,
             boolean idColumn, boolean constructorBased) {
         StringBuilder sb = new StringBuilder();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins().clientCountByExampleMethodGenerated(method,
                 interfaze, introspectedTable)) {
             addExtraImports(interfaze);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins().clientDeleteByExampleMethodGenerated(
                 method, interfaze, introspectedTable)) {
             addExtraImports(interfaze);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -83,7 +83,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins().clientDeleteByPrimaryKeyMethodGenerated(
                 method, interfaze, introspectedTable)) {
             addExtraImports(interfaze);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -50,7 +50,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins().clientInsertSelectiveMethodGenerated(
                 method, interfaze, introspectedTable)) {
             addExtraImports(interfaze);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -65,7 +65,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(interfaze, method);
-        
+
         if (context.getPlugins()
                 .clientSelectByExampleWithBLOBsMethodGenerated(method, interfaze,
                         introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(interfaze, method);
-        
+
         if (context.getPlugins()
                 .clientSelectByExampleWithoutBLOBsMethodGenerated(method,
                         interfaze, introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins()
                 .clientUpdateByExampleSelectiveMethodGenerated(method, interfaze,
                         introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -66,7 +66,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins()
                 .clientUpdateByExampleWithBLOBsMethodGenerated(method, interfaze,
                         introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -65,7 +65,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins()
                 .clientUpdateByExampleWithoutBLOBsMethodGenerated(method,
                         interfaze, introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -57,7 +57,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins()
                 .clientUpdateByPrimaryKeySelectiveMethodGenerated(method,
                         interfaze, introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -48,7 +48,7 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable);
 
         addMapperAnnotations(method);
-        
+
         if (context.getPlugins()
                 .clientUpdateByPrimaryKeyWithoutBLOBsMethodGenerated(method,
                         interfaze, introspectedTable)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedCountByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedDeleteByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedDeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/AbstractJavaProviderMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderSelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderUpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/BaseRecordGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/PrimaryKeyGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/SimpleModelGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/MixedMapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/SimpleXMLMapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/XMLMapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/BaseColumnListElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/BlobColumnListElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/CountByExampleElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/DeleteByExampleElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/DeleteByPrimaryKeyElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/ExampleWhereClauseElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/InsertElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/InsertSelectiveElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/ResultMapWithoutBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -159,7 +159,7 @@ private void addResultMapConstructorElements(XmlElement answer) {
 
         answer.addElement(constructor);
     }
-    
+
     private Attribute generateColumnAttribute(IntrospectedColumn introspectedColumn) {
         return new Attribute("column", //$NON-NLS-1$
                 MyBatis3FormattingUtilities.getRenamedColumnNameForResultMap(introspectedColumn));

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SelectByExampleWithBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SelectByExampleWithoutBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SelectByPrimaryKeyElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SimpleSelectAllElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -70,7 +70,7 @@ public void addElements(XmlElement parentElement) {
         sb.append(introspectedTable
                 .getAliasedFullyQualifiedTableNameAtRuntime());
         answer.addElement(new TextElement(sb.toString()));
-        
+
         String orderByClause = introspectedTable.getTableConfigurationProperty(
                 PropertyRegistry.TABLE_SELECT_ALL_ORDER_BY_CLAUSE);
         boolean hasOrderBy = StringUtility.stringHasValue(orderByClause);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SimpleSelectByPrimaryKeyElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByExampleSelectiveElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByExampleWithBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void addElements(XmlElement parentElement) {
                 ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getAllColumns()).iterator();
         while (iter.hasNext()) {
             IntrospectedColumn introspectedColumn = iter.next();
-            
+
             sb.append(MyBatis3FormattingUtilities
                     .getAliasedEscapedColumnName(introspectedColumn));
             sb.append(" = "); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByExampleWithoutBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeySelectiveElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeyWithBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeyWithoutBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ColumnOverride.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/CommentGeneratorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/Configuration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ConnectionFactoryConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/GeneratedKey.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,7 +25,7 @@
 /**
  * This class specifies that a key is auto-generated, either as an identity
  * column (post insert), or as some other query like a sequences (pre insert).
- * 
+ *
  * @author Jeff Butler
  */
 public class GeneratedKey {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/IgnoredColumn.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/IgnoredColumnException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/IgnoredColumnPattern.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/JDBCConnectionConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/JavaClientGeneratorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/JavaModelGeneratorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/JavaTypeResolverConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ModelType.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,7 +19,7 @@
 
 /**
  * Typesafe enum of different model types.
- * 
+ *
  * @author Jeff Butler
  */
 public enum ModelType {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PluginConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyHolder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/SqlMapGeneratorConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/TableConfiguration.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -316,7 +316,7 @@ public List<ColumnOverride> getColumnOverrides() {
      * Returns a List of Strings. The values are the columns
      * that were specified to be ignored in the table, but do not exist in the
      * table.
-     * 
+     *
      * @return a List of Strings - the columns that were improperly configured
      *         as ignored columns
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/TypedPropertyHolder.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public String getConfigurationType() {
     /**
      * Sets the value of the type specified in the configuration. If the special
      * value DEFAULT is specified, then the value will be ignored.
-     * 
+     *
      * @param configurationType
      *            the type specified in the configuration
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ParserEntityResolver.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ParserErrorHandler.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/InvalidConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/MultiMessageException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/ShellException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 /**
  * This class is used by the ShellCallback methods to denote unrecoverable
  * errors.
- * 
+ *
  * @author Jeff Butler
  */
 public class ShellException extends Exception {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/XMLParserException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultCommentGenerator.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -153,7 +153,7 @@ protected void addJavadocTag(JavaElement javaElement, boolean markAsDoNotDelete)
      * Returns a formated date string to include in the Javadoc tag and XML
      * comments. You may return null if you do not want the date in these
      * documentation elements.
-     * 
+     *
      * @return a string representing the current timestamp, or null
      */
     protected String getDateString() {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultShellCallback.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DomWriter.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@
  * This class is used to generate a String representation of an XML document. It
  * is very much based on the class dom.Writer from the Apache Xerces examples,
  * but I've simplified and updated it.
- * 
+ *
  * @author Andy Clark, IBM (Original work)
  * @author Jeff Butler (derivation)
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/NullProgressCallback.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,7 +20,7 @@
 /**
  * This class implements a progress callback that does nothing. It is used when
  * the client passes in a null for the ProgressCallback.
- * 
+ *
  * @author Jeff Butler
  */
 public class NullProgressCallback implements ProgressCallback {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseDialects.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -1,4 +1,4 @@
-/**
+/*
  *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/CustomCollectors.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/StringUtility.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/messages/Messages.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/Log.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/LogException.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/commons/JakartaCommonsLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/commons/JakartaCommonsLoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/jdk14/Jdk14LoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/jdk14/Jdk14LoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j/Log4jImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j/Log4jLoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j2/Log4j2AbstractLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j2/Log4j2Impl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j2/Log4j2LoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j2/Log4j2LoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/nologging/NoLoggingImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/nologging/NoLoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/slf4j/Slf4jImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/slf4j/Slf4jLocationAwareLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/slf4j/Slf4jLoggerImpl.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/slf4j/Slf4jLoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2017 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/MapperAnnotationPlugin.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2018 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public boolean validate(List<String> warnings) {
     public boolean clientGenerated(Interface interfaze, IntrospectedTable introspectedTable) {
 
         if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3) {
-            // don't need to do this for MYBATIS3_DSQL as that runtime already adds this annotation 
+            // don't need to do this for MYBATIS3_DSQL as that runtime already adds this annotation
             interfaze.addImportedType(
                     new FullyQualifiedJavaType("org.apache.ibatis.annotations.Mapper")); //$NON-NLS-1$
             interfaze.addAnnotation("@Mapper"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/dsql/DisableDeletePlugin.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
 
 /**
  * Disables all delete methods in the MyBatisDynamicSQLV2 runtime.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/dsql/DisableInsertPlugin.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
 
 /**
  * Disables all insert methods in the MyBatisDynamicSQLV2 runtime.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/dsql/DisableUpdatePlugin.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
 
 /**
  * Disables all update methods in the MyBatisDynamicSQLV2 runtime.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/dsql/ReadOnlyPlugin.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,7 +21,7 @@
 
 /**
  * Disables delete, insert, delete, and update methods in the MyBatisDynamicSQLV2 runtime.
- * 
+ *
  * @author Jeff Butler
  *
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/IntrospectedTableMyBatis3DynamicSqlImplV1.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public IntrospectedTableMyBatis3DynamicSqlImplV1() {
     }
 
     @Override
-    protected void calculateXmlMapperGenerator(AbstractJavaClientGenerator javaClientGenerator, 
+    protected void calculateXmlMapperGenerator(AbstractJavaClientGenerator javaClientGenerator,
             List<String> warnings,
             ProgressCallback progressCallback) {
         // no XML with dynamic SQL support

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/IntrospectedTableMyBatis3DynamicSqlImplV2.java
Patch:
@@ -1,5 +1,5 @@
-/**
- *    Copyright 2006-2019 the original author or authors.
+/*
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ConfigurationParser.java
Patch:
@@ -25,7 +25,6 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Properties;
-
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/XmlFileMergerJaxp.java
Patch:
@@ -25,7 +25,6 @@
 import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.List;
-
 import javax.xml.XMLConstants;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/FragmentGenerator.java
Patch:
@@ -164,7 +164,7 @@ public MethodParts getAnnotatedConstructorArgs() {
         }
 
         builder.withAnnotation("})") //$NON-NLS-1$
-            .withImports(imports);
+                .withImports(imports);
 
         return builder.build();
     }
@@ -240,7 +240,7 @@ public MethodParts getAnnotatedResults() {
         }
 
         builder.withAnnotation("})") //$NON-NLS-1$
-            .withImports(imports);
+                .withImports(imports);
 
         return builder.build();
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/kotlin/elements/KotlinFragmentGenerator.java
Patch:
@@ -141,7 +141,7 @@ public KotlinFunctionParts getAnnotatedResults() {
         }
 
         builder.withAnnotation("])") //$NON-NLS-1$
-            .withImports(imports);
+                .withImports(imports);
 
         return builder.build();
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/AbstractXmlElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2019 the original author or authors.
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ protected XmlElement getExampleIncludeElement() {
 
     protected XmlElement getUpdateByExampleIncludeElement() {
         XmlElement ifElement = new XmlElement("if"); //$NON-NLS-1$
-        ifElement.addAttribute(new Attribute("test", "_parameter != null")); //$NON-NLS-1$ //$NON-NLS-2$
+        ifElement.addAttribute(new Attribute("test", "example != null")); //$NON-NLS-1$ //$NON-NLS-2$
 
         XmlElement includeElement = new XmlElement("include"); //$NON-NLS-1$
         includeElement.addAttribute(new Attribute("refid", //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/AbstractXmlElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2019 the original author or authors.
+ *    Copyright 2006-2020 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -85,7 +85,7 @@ protected XmlElement getExampleIncludeElement() {
 
     protected XmlElement getUpdateByExampleIncludeElement() {
         XmlElement ifElement = new XmlElement("if"); //$NON-NLS-1$
-        ifElement.addAttribute(new Attribute("test", "_parameter != null")); //$NON-NLS-1$ //$NON-NLS-2$
+        ifElement.addAttribute(new Attribute("test", "example != null")); //$NON-NLS-1$ //$NON-NLS-2$
 
         XmlElement includeElement = new XmlElement("include"); //$NON-NLS-1$
         includeElement.addAttribute(new Attribute("refid", //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/CompositePlugin.java
Patch:
@@ -112,7 +112,7 @@ public List<GeneratedKotlinFile> contextGenerateAdditionalKotlinFiles(Introspect
     @Override
     public List<GeneratedKotlinFile> contextGenerateAdditionalKotlinFiles() {
         return plugins.stream()
-                .map(p -> p.contextGenerateAdditionalKotlinFiles())
+        		.map(Plugin::contextGenerateAdditionalKotlinFiles)
                 .flatMap(List::stream)
                 .collect(Collectors.toList());
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/Plugin.java
Patch:
@@ -1602,11 +1602,11 @@ default boolean clientBasicInsertMethodGenerated(KotlinFunction function, Kotlin
         return true;
     }
 
-    default public List<GeneratedKotlinFile> contextGenerateAdditionalKotlinFiles(IntrospectedTable introspectedTable) {
+    default List<GeneratedKotlinFile> contextGenerateAdditionalKotlinFiles(IntrospectedTable introspectedTable) {
         return Collections.emptyList();
     }
 
-    default public List<GeneratedKotlinFile> contextGenerateAdditionalKotlinFiles() {
+    default List<GeneratedKotlinFile> contextGenerateAdditionalKotlinFiles() {
         return Collections.emptyList();
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/kotlin/JavaToKotlinTypeConverter.java
Patch:
@@ -30,6 +30,7 @@
  *
  */
 public class JavaToKotlinTypeConverter {
+    private JavaToKotlinTypeConverter() {}
     
     private static Map<String, String> typeMap = new HashMap<>();
     

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/kotlin/KotlinMapperAndExtensionsGenerator.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-//import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
 import org.mybatis.generator.api.dom.kotlin.FullyQualifiedKotlinType;
 import org.mybatis.generator.api.dom.kotlin.KotlinFile;
 import org.mybatis.generator.api.dom.kotlin.KotlinType;
@@ -72,7 +71,7 @@ public KotlinMapperAndExtensionsGenerator(String project) {
     }
 
     protected void preCalculate() {
-        supportClassGenerator = new KotlinDynamicSqlSupportClassGenerator(introspectedTable);
+        supportClassGenerator = new KotlinDynamicSqlSupportClassGenerator(context, introspectedTable);
         recordType = new FullyQualifiedKotlinType(introspectedTable.getKotlinRecordType());
         resultMapId = recordType.getShortNameWithoutTypeArguments() + "Result"; //$NON-NLS-1$
         fragmentGenerator = new KotlinFragmentGenerator.Builder()
@@ -98,6 +97,7 @@ protected KotlinFile createMapperExtensionsFile() {
         
         KotlinFile kf = new KotlinFile(type.getShortNameWithoutTypeArguments() + "Extensions"); //$NON-NLS-1$
         kf.setPackage(type.getPackageName());
+        context.getCommentGenerator().addFileComment(kf);
         
         return kf;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/ObjectFactory.java
Patch:
@@ -314,7 +314,7 @@ public static IntrospectedTable createIntrospectedTable(
     public static IntrospectedTable createIntrospectedTableForValidation(Context context) {
         String type = context.getTargetRuntime();
         if (!stringHasValue(type)) {
-            type = IntrospectedTableMyBatis3Impl.class.getName();
+            type = IntrospectedTableMyBatis3DynamicSqlImplV2.class.getName();
         } else if ("MyBatis3".equalsIgnoreCase(type)) { //$NON-NLS-1$
             type = IntrospectedTableMyBatis3Impl.class.getName();
         } else if ("MyBatis3Simple".equalsIgnoreCase(type)) { //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/ObjectFactory.java
Patch:
@@ -314,7 +314,7 @@ public static IntrospectedTable createIntrospectedTable(
     public static IntrospectedTable createIntrospectedTableForValidation(Context context) {
         String type = context.getTargetRuntime();
         if (!stringHasValue(type)) {
-            type = IntrospectedTableMyBatis3Impl.class.getName();
+            type = IntrospectedTableMyBatis3DynamicSqlImplV2.class.getName();
         } else if ("MyBatis3".equalsIgnoreCase(type)) { //$NON-NLS-1$
             type = IntrospectedTableMyBatis3Impl.class.getName();
         } else if ("MyBatis3Simple".equalsIgnoreCase(type)) { //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/LogFactory.java
Patch:
@@ -105,7 +105,7 @@ private static void setImplementation(AbstractLogFactory factory) {
                 log.debug("Logging initialized using '" + factory + "' adapter."); //$NON-NLS-1$ //$NON-NLS-2$
             }
             theFactory = factory;
-        } catch (Exception t) {
+        } catch (Throwable t) {
             throw new LogException("Error setting Log implementation.  Cause: " + t.getMessage(), t); //$NON-NLS-1$
         }
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/MergeConstants.java
Patch:
@@ -51,7 +51,7 @@ public static boolean idStartsWithPrefix(String id) {
                 .anyMatch(id::startsWith);
     }
 
-    public static boolean comentContainsTag(String comment) {
+    public static boolean commentContainsTag(String comment) {
         return Arrays.stream(OLD_ELEMENT_TAGS)
                 .anyMatch(comment::contains);
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/XmlFileMergerJaxp.java
Patch:
@@ -203,7 +203,7 @@ private static boolean isNewFormatNode(Node node) {
             Node childNode = children.item(i);
             if (childNode != null && childNode.getNodeType() == Node.COMMENT_NODE) {
                 String commentData = ((Comment) childNode).getData();
-                return MergeConstants.comentContainsTag(commentData);
+                return MergeConstants.commentContainsTag(commentData);
             }
         }
         

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -523,6 +523,7 @@ private Map<ActualTableName, List<IntrospectedColumn>> getColumns(
 
             introspectedColumn.setTableAlias(tc.getAlias());
             introspectedColumn.setJdbcType(rs.getInt("DATA_TYPE")); //$NON-NLS-1$
+            introspectedColumn.setActualTypeName(rs.getString("TYPE_NAME")); //$NON-NLS-1$
             introspectedColumn.setLength(rs.getInt("COLUMN_SIZE")); //$NON-NLS-1$
             introspectedColumn.setActualColumnName(rs.getString("COLUMN_NAME")); //$NON-NLS-1$
             introspectedColumn

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -523,6 +523,7 @@ private Map<ActualTableName, List<IntrospectedColumn>> getColumns(
 
             introspectedColumn.setTableAlias(tc.getAlias());
             introspectedColumn.setJdbcType(rs.getInt("DATA_TYPE")); //$NON-NLS-1$
+            introspectedColumn.setActualTypeName(rs.getString("TYPE_NAME")); //$NON-NLS-1$
             introspectedColumn.setLength(rs.getInt("COLUMN_SIZE")); //$NON-NLS-1$
             introspectedColumn.setActualColumnName(rs.getString("COLUMN_NAME")); //$NON-NLS-1$
             introspectedColumn

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/Plugin.java
Patch:
@@ -67,7 +67,7 @@
  */
 public interface Plugin {
     
-    public enum ModelClassType {
+    enum ModelClassType {
         PRIMARY_KEY, 
         BASE_RECORD, 
         RECORD_WITH_BLOBS

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaDomUtils.java
Patch:
@@ -70,7 +70,7 @@ private static boolean typeIsInSamePackage(CompilationUnit compilationUnit,
     
     private static boolean typeIsAlreadyImported(CompilationUnit compilationUnit,
             FullyQualifiedJavaType fullyQualifiedJavaType) {
-	    String name = fullyQualifiedJavaType.getFullyQualifiedNameWithoutTypeParameters();
-	    return compilationUnit.getImportedTypes().stream().anyMatch(e -> e.getImportList().contains(name));
+        String name = fullyQualifiedJavaType.getFullyQualifiedNameWithoutTypeParameters();
+        return compilationUnit.getImportedTypes().stream().anyMatch(e -> e.getImportList().contains(name));
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaVisibility.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@ public enum JavaVisibility {
 
     private String value;
 
-    private JavaVisibility(String value) {
+    JavaVisibility(String value) {
         this.value = value;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/render/ElementRenderer.java
Patch:
@@ -17,9 +17,9 @@
 
 import java.util.stream.Stream;
 
-import org.mybatis.generator.api.dom.xml.VisitableElement;
 import org.mybatis.generator.api.dom.xml.ElementVisitor;
 import org.mybatis.generator.api.dom.xml.TextElement;
+import org.mybatis.generator.api.dom.xml.VisitableElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
 import org.mybatis.generator.internal.util.CustomCollectors;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/IntrospectedTableMyBatis3Impl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -195,7 +195,8 @@ protected String getModelProject() {
     }
     
     protected String getExampleProject() {
-        String project = context.getJavaModelGeneratorConfiguration().getProperty(PropertyRegistry.MODEL_GENERATOR_EXAMPLE_PROJECT);
+        String project = context.getJavaModelGeneratorConfiguration().getProperty(
+                PropertyRegistry.MODEL_GENERATOR_EXAMPLE_PROJECT);
         
         if (StringUtility.stringHasValue(project)) {
             return project;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/MyBatis3FormattingUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -114,8 +114,8 @@ public static String getAliasedEscapedColumnName(
      * selects in SqlMaps because the column is not escaped for MyBatis. If there is a table alias, the value will be
      * alias.columnName.
      * 
-     * <p>This method is used in the Example classes and the returned value will be in a Java string. So we need to escape
-     * double quotes if they are the delimiters.
+     * <p>This method is used in the Example classes and the returned value will be in a Java string.
+     * So we need to escape double quotes if they are the delimiters.
      *
      * @param introspectedColumn
      *            the introspected column

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderApplyWhereMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -160,7 +160,8 @@ public void addClassElements(TopLevelClass topLevelClass) {
             method.addParameter(new Parameter(NEW_BUILDER_IMPORT, "sql")); //$NON-NLS-1$
         }
         method.addParameter(new Parameter(fqjt, "example")); //$NON-NLS-1$
-        method.addParameter(new Parameter(FullyQualifiedJavaType.getBooleanPrimitiveInstance(), "includeExamplePhrase")); //$NON-NLS-1$
+        method.addParameter(new Parameter(FullyQualifiedJavaType.getBooleanPrimitiveInstance(),
+                "includeExamplePhrase")); //$NON-NLS-1$
         
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ModelType.java
Patch:
@@ -29,7 +29,7 @@ public enum ModelType {
 
     private final String type;
 
-    private ModelType(String type) {
+    ModelType(String type) {
         this.type = type;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/MyBatisGeneratorConfigurationParser.java
Patch:
@@ -725,8 +725,8 @@ String parsePropertyTokens(String s) {
             int markerEndIndex = s.indexOf(CLOSE, currentIndex);
             int nestedStartIndex = s.indexOf(OPEN, markerStartIndex + OPEN.length());
             while (nestedStartIndex > -1 && markerEndIndex > -1 && nestedStartIndex < markerEndIndex) {
-	            nestedStartIndex = s.indexOf(OPEN, nestedStartIndex + OPEN.length());
-	            markerEndIndex = s.indexOf(CLOSE, markerEndIndex + CLOSE.length());
+                nestedStartIndex = s.indexOf(OPEN, nestedStartIndex + OPEN.length());
+                markerEndIndex = s.indexOf(CLOSE, markerEndIndex + CLOSE.length());
             }
 
             if (markerEndIndex < 0) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/MultiMessageException.java
Patch:
@@ -20,9 +20,6 @@
 
 public class MultiMessageException extends Exception {
 
-    /**
-     * 
-     */
     private static final long serialVersionUID = -5358501949588130025L;
     private final List<String> errors = new ArrayList<>();
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/JDBCConnectionFactory.java
Patch:
@@ -28,9 +28,9 @@
 
 /**
  * This class assumes that classes are cached elsewhere for performance reasons,
- * but also to make sure that any native libraries are only loaded one time
- * (avoids the dreaded UnsatisfiedLinkError library loaded in another
- * classloader)
+ * but also to make sure that any native libraries are only loaded one time.
+ * This avoids the dreaded UnsatisfiedLinkError library loaded in another
+ * classloader.
  * 
  * @author Jeff Butler
  */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/NullProgressCallback.java
Patch:
@@ -25,9 +25,6 @@
  */
 public class NullProgressCallback implements ProgressCallback {
 
-    /**
-     * 
-     */
     public NullProgressCallback() {
         super();
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseDialects.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public enum DatabaseDialects {
 
     private String identityRetrievalStatement;
 
-    private DatabaseDialects(String identityRetrievalStatement) {
+    DatabaseDialects(String identityRetrievalStatement) {
         this.identityRetrievalStatement = identityRetrievalStatement;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/messages/Messages.java
Patch:
@@ -19,9 +19,6 @@
 import java.util.MissingResourceException;
 import java.util.ResourceBundle;
 
-/**
- * @author Jeff Butler
- */
 public class Messages {
     private static final String BUNDLE_NAME = "org.mybatis.generator.internal.util.messages.messages"; //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j2/Log4j2AbstractLoggerImpl.java
Patch:
@@ -25,9 +25,6 @@
 import org.mybatis.generator.logging.Log;
 import org.mybatis.generator.logging.LogFactory;
 
-/**
- * @author Eduardo Macarron
- */
 public class Log4j2AbstractLoggerImpl implements Log {
 
     private static final Marker MARKER = MarkerManager.getMarker(LogFactory.MARKER);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/log4j2/Log4j2LoggerImpl.java
Patch:
@@ -21,9 +21,6 @@
 import org.mybatis.generator.logging.Log;
 import org.mybatis.generator.logging.LogFactory;
 
-/**
- * @author Eduardo Macarron
- */
 public class Log4j2LoggerImpl implements Log {
 
     private static final Marker MARKER = MarkerManager.getMarker(LogFactory.MARKER);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/nologging/NoLoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,6 +21,6 @@
 public class NoLoggingLogFactory implements AbstractLogFactory {
     @Override
     public Log getLog(Class<?> clazz) {
-        return new NoLoggingImpl(clazz);
+        return new NoLoggingImpl();
     }
 }
\ No newline at end of file

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/slf4j/Slf4jLocationAwareLoggerImpl.java
Patch:
@@ -21,9 +21,6 @@
 import org.slf4j.MarkerFactory;
 import org.slf4j.spi.LocationAwareLogger;
 
-/**
- * @author Eduardo Macarron
- */
 class Slf4jLocationAwareLoggerImpl implements Log {
 
     private static final Marker MARKER = MarkerFactory.getMarker(LogFactory.MARKER);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -49,7 +49,8 @@ public MethodAndImports generateMethodAndImports() {
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         
-        method.addBodyLine("return DeleteDSL.deleteFromWithMapper(this::delete, " + tableFieldName + ")"); //$NON-NLS-1$ //$NON-NLS-2$
+        method.addBodyLine("return DeleteDSL.deleteFromWithMapper(this::delete, " //$NON-NLS-1$
+                + tableFieldName + ")"); //$NON-NLS-1$
         
         MethodParts methodParts = fragmentGenerator.getPrimaryKeyWhereClauseAndParameters();
         for (Parameter parameter : methodParts.getParameters()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/InsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,7 +55,8 @@ public MethodAndImports generateMethodAndImports() {
         method.addBodyLine("return insert(SqlBuilder.insert(record)"); //$NON-NLS-1$
         method.addBodyLine("        .into(" + tableFieldName + ")"); //$NON-NLS-1$ //$NON-NLS-2$
         
-        List<IntrospectedColumn> columns = ListUtilities.removeIdentityAndGeneratedAlwaysColumns(introspectedTable.getAllColumns());
+        List<IntrospectedColumn> columns =
+                ListUtilities.removeIdentityAndGeneratedAlwaysColumns(introspectedTable.getAllColumns());
         for (IntrospectedColumn column : columns) {
             String fieldName = calculateFieldName(column);
             

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/Plugin.java
Patch:
@@ -67,7 +67,7 @@
  */
 public interface Plugin {
     
-    public enum ModelClassType {
+    enum ModelClassType {
         PRIMARY_KEY, 
         BASE_RECORD, 
         RECORD_WITH_BLOBS

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaVisibility.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@ public enum JavaVisibility {
 
     private String value;
 
-    private JavaVisibility(String value) {
+    JavaVisibility(String value) {
         this.value = value;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ModelType.java
Patch:
@@ -29,7 +29,7 @@ public enum ModelType {
 
     private final String type;
 
-    private ModelType(String type) {
+    ModelType(String type) {
         this.type = type;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseDialects.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public enum DatabaseDialects {
 
     private String identityRetrievalStatement;
 
-    private DatabaseDialects(String identityRetrievalStatement) {
+    DatabaseDialects(String identityRetrievalStatement) {
         this.identityRetrievalStatement = identityRetrievalStatement;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/nologging/NoLoggingImpl.java
Patch:
@@ -19,7 +19,7 @@
 
 public class NoLoggingImpl implements Log {
 
-    public NoLoggingImpl(Class<?> clazz) {
+    public NoLoggingImpl() {
         // Do Nothing
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/nologging/NoLoggingLogFactory.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -21,6 +21,6 @@
 public class NoLoggingLogFactory implements AbstractLogFactory {
     @Override
     public Log getLog(Class<?> clazz) {
-        return new NoLoggingImpl(clazz);
+        return new NoLoggingImpl();
     }
 }
\ No newline at end of file

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaDomUtils.java
Patch:
@@ -70,8 +70,7 @@ private static boolean typeIsInSamePackage(CompilationUnit compilationUnit,
     
     private static boolean typeIsAlreadyImported(CompilationUnit compilationUnit,
             FullyQualifiedJavaType fullyQualifiedJavaType) {
-        FullyQualifiedJavaType nonGenericType =
-                new FullyQualifiedJavaType(fullyQualifiedJavaType.getFullyQualifiedNameWithoutTypeParameters());
-        return compilationUnit.getImportedTypes().contains(nonGenericType);
+	    String name = fullyQualifiedJavaType.getFullyQualifiedNameWithoutTypeParameters();
+	    return compilationUnit.getImportedTypes().stream().anyMatch(e -> e.getImportList().contains(name));
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaDomUtils.java
Patch:
@@ -18,6 +18,8 @@
 import java.util.stream.Collectors;
 
 public class JavaDomUtils {
+    private JavaDomUtils() {}
+    
     /**
      * Calculates type names for writing into generated Java.  We try to
      * use short names wherever possible.  If the type requires an import,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/EqualsUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -43,6 +43,7 @@
  * <code>Arrays.equals</code> methods should be used for array fields.
  */
 public final class EqualsUtil {
+    private EqualsUtil() {}
 
     public static boolean areEqual(boolean b1, boolean b2) {
         return b1 == b2;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/HashCodeUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -38,6 +38,7 @@
  * </pre>
  */
 public final class HashCodeUtil {
+    private HashCodeUtil() {}
 
     /**
      * An initial value for a <code>hashCode</code>, to which is added

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/IntrospectedTable.java
Patch:
@@ -433,7 +433,6 @@ public void addPrimaryKeyColumn(String columnName) {
                 if (introspectedColumn.getActualColumnName().equals(columnName)) {
                     primaryKeyColumns.add(introspectedColumn);
                     iter.remove();
-                    found = true;
                     break;
                 }
             }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/FullyQualifiedJavaType.java
Patch:
@@ -159,7 +159,7 @@ public List<String> getImportList() {
     private String calculateActualImport(String name) {
         String answer = name;
         if (this.isArray()) {
-            int index = name.indexOf("["); //$NON-NLS-1$
+            int index = name.indexOf('[');
             if (index != -1) {
                 answer = name.substring(0, index);
             }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/render/RenderingUtilities.java
Patch:
@@ -38,6 +38,8 @@
 import org.mybatis.generator.internal.util.CustomCollectors;
 
 public class RenderingUtilities {
+    private RenderingUtilities() {}
+    
     public static final String JAVA_INDENT = "    "; //$NON-NLS-1$
     private static TypeParameterRenderer typeParameterRenderer = new TypeParameterRenderer();
     private static FieldRenderer fieldRenderer = new FieldRenderer();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/ListUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,6 +33,8 @@
  *
  */
 public class ListUtilities {
+    
+    private ListUtilities() {}
 
     public static List<IntrospectedColumn> removeGeneratedAlwaysColumns(List<IntrospectedColumn> columns) {
         List<IntrospectedColumn> filteredList = new ArrayList<>();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/JavaMapperGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import static org.mybatis.generator.internal.util.messages.Messages.getString;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.mybatis.generator.api.CommentGenerator;
@@ -220,7 +221,7 @@ protected void initializeAndExecuteGenerator(
     }
 
     public List<CompilationUnit> getExtraCompilationUnits() {
-        return null;
+        return Collections.emptyList();
     }
 
     @Override

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/SimpleJavaClientGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -19,6 +19,7 @@
 import static org.mybatis.generator.internal.util.messages.Messages.getString;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 import org.mybatis.generator.api.CommentGenerator;
@@ -140,7 +141,7 @@ protected void initializeAndExecuteGenerator(
     }
 
     public List<CompilationUnit> getExtraCompilationUnits() {
-        return null;
+        return Collections.emptyList();
     }
 
     @Override

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -63,8 +63,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -63,9 +63,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
-
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -98,8 +98,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -73,8 +73,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -65,8 +65,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectAllMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,8 +68,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -81,8 +81,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -84,8 +84,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -102,8 +102,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,8 +72,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -82,8 +82,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -81,8 +81,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -73,8 +73,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -74,8 +74,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,8 +64,10 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Method method) {
+        // extension point for subclasses
     }
 
     public void addExtraImports(Interface interfaze) {
+        // extension point for subclasses
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,6 +24,8 @@
  * 
  */
 public class PropertyRegistry {
+    private PropertyRegistry() {}
+    
     public static final String ANY_ENABLE_SUB_PACKAGES = "enableSubPackages"; //$NON-NLS-1$
 
     /**

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/ObjectFactory.java
Patch:
@@ -109,7 +109,7 @@ public static Class<?> externalClassForName(String type)
             try {
                 clazz = Class.forName(type, true, classLoader);
                 return clazz;
-            } catch (Throwable e) {
+            } catch (Exception e) {
                 // ignore - fail safe below
             }
         }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,6 +29,7 @@
 import java.sql.ResultSetMetaData;
 import java.sql.SQLException;
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -181,7 +182,7 @@ public List<IntrospectedTable> introspectTables(TableConfiguration tc)
         if (columns.isEmpty()) {
             warnings.add(getString("Warning.19", tc.getCatalog(), //$NON-NLS-1$
                     tc.getSchema(), tc.getTableName()));
-            return null;
+            return Collections.emptyList();
         }
 
         removeIgnoredColumns(tc, columns);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/RenameExampleClassPlugin.java
Patch:
@@ -56,9 +56,6 @@ public class RenameExampleClassPlugin extends PluginAdapter {
     private String replaceString;
     private Pattern pattern;
 
-    public RenameExampleClassPlugin() {
-    }
-
     @Override
     public boolean validate(List<String> warnings) {
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/ant/GeneratorAntTask.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -163,7 +163,7 @@ public void execute() throws BuildException {
 
             throw new BuildException(e.getMessage());
         } catch (InterruptedException e) {
-            // ignore (will never happen with the DefaultShellCallback)
+            Thread.currentThread().interrupt();
         } catch (Exception e) {
             log(e, Project.MSG_ERR);
             throw new BuildException(e.getMessage());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ShellRunner.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -137,7 +137,7 @@ public static void main(String[] args) {
             }
             return;
         } catch (InterruptedException e) {
-            // ignore (will never happen with the DefaultShellCallback)
+            Thread.currentThread().interrupt();
         }
 
         for (String warning : warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ConfigurationParser.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -148,7 +148,7 @@ private Configuration parseConfiguration(InputSource inputSource)
                 }
             }
 
-            if (parseErrors.size() > 0) {
+            if (document == null || parseErrors.size() > 0) {
                 throw new XMLParserException(parseErrors);
             }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/XmlFileMergerJaxp.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -211,7 +211,7 @@ private static boolean isGeneratedNode(Node node) {
                     Node childNode = children.item(i);
                     if (isWhiteSpace(childNode)) {
                         continue;
-                    } else if (childNode.getNodeType() == Node.COMMENT_NODE) {
+                    } else if (childNode != null && childNode.getNodeType() == Node.COMMENT_NODE) {
                         Comment comment = (Comment) childNode;
                         String commentData = comment.getData();
                         for (String tag : MergeConstants.OLD_ELEMENT_TAGS) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/EqualsHashCodePlugin.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -160,7 +160,7 @@ protected void generateEquals(TopLevelClass topLevelClass,
         sb.append(") that;"); //$NON-NLS-1$
         method.addBodyLine(sb.toString());
 
-        if (useEqualsHashCodeFromRoot && topLevelClass.getSuperClass() != null) {
+        if (useEqualsHashCodeFromRoot && topLevelClass.getSuperClass().isPresent()) {
             method.addBodyLine("if (!super.equals(other)) {"); //$NON-NLS-1$
             method.addBodyLine("return false;"); //$NON-NLS-1$
             method.addBodyLine("}"); //$NON-NLS-1$
@@ -255,7 +255,7 @@ protected void generateHashCode(TopLevelClass topLevelClass,
         method.addBodyLine("final int prime = 31;"); //$NON-NLS-1$
         method.addBodyLine("int result = 1;"); //$NON-NLS-1$
 
-        if (useEqualsHashCodeFromRoot && topLevelClass.getSuperClass() != null) {
+        if (useEqualsHashCodeFromRoot && topLevelClass.getSuperClass().isPresent()) {
             method.addBodyLine("result = prime * result + super.hashCode();"); //$NON-NLS-1$
         }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2018 the original author or authors.
+ *    Copyright 2006-2019 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -95,7 +95,7 @@ private void generateToString(IntrospectedTable introspectedTable,
         }
 
         method.addBodyLine("sb.append(\"]\");"); //$NON-NLS-1$
-        if (useToStringFromRoot && topLevelClass.getSuperClass() != null) {
+        if (useToStringFromRoot && topLevelClass.getSuperClass().isPresent()) {
             method.addBodyLine("sb.append(\", from super class \");"); //$NON-NLS-1$
             method.addBodyLine("sb.append(super.toString());"); //$NON-NLS-1$
         }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaDomUtils.java
Patch:
@@ -68,8 +68,7 @@ private static boolean typeIsInSamePackage(CompilationUnit compilationUnit,
     
     private static boolean typeIsAlreadyImported(CompilationUnit compilationUnit,
             FullyQualifiedJavaType fullyQualifiedJavaType) {
-        FullyQualifiedJavaType nonGenericType =
-                new FullyQualifiedJavaType(fullyQualifiedJavaType.getFullyQualifiedNameWithoutTypeParameters());
-        return compilationUnit.getImportedTypes().contains(nonGenericType);
+	    String name = fullyQualifiedJavaType.getFullyQualifiedNameWithoutTypeParameters();
+	    return compilationUnit.getImportedTypes().stream().anyMatch(e -> e.getImportList().contains(name));
     }
 }

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/launcher/AntFileGenerator.java
Patch:
@@ -20,6 +20,7 @@
 import org.eclipse.core.runtime.CoreException;
 import org.eclipse.core.variables.VariablesPlugin;
 import org.eclipse.debug.core.ILaunchConfiguration;
+import org.mybatis.generator.api.dom.DefaultXmlFormatter;
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.Document;
 import org.mybatis.generator.api.dom.xml.XmlElement;
@@ -45,7 +46,7 @@ public String getAntFileContent() {
         Document document = new Document();
         document.setRootElement(getProjectElement());
 
-        return document.getFormattedContent();
+        return new DefaultXmlFormatter().getFormattedContent(document);
     }
 
     private XmlElement getProjectElement() {

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/wizards/NewConfigFileWizard.java
Patch:
@@ -41,6 +41,7 @@
 import org.eclipse.ui.PartInitException;
 import org.eclipse.ui.PlatformUI;
 import org.eclipse.ui.ide.IDE;
+import org.mybatis.generator.api.dom.DefaultXmlFormatter;
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.Document;
 import org.mybatis.generator.api.dom.xml.XmlElement;
@@ -192,8 +193,7 @@ private InputStream openContentStream() {
         table.addElement(columnOverride);
         context.addElement(table);
 
-        return new ByteArrayInputStream(document.getFormattedContent()
-                .getBytes());
+        return new ByteArrayInputStream(new DefaultXmlFormatter().getFormattedContent(document).getBytes());
     }
 
     private void throwCoreException(String message) throws CoreException {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Element.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -20,6 +20,6 @@ public abstract class Element {
     public Element() {
         super();
     }
-
-    public abstract String getFormattedContent(int indentLevel);
+    
+    public abstract <R> R accept(ElementVisitor<R> visitor);
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractJavaGenerator.java
Patch:
@@ -29,6 +29,7 @@
 
 public abstract class AbstractJavaGenerator extends AbstractGenerator {
     public abstract List<CompilationUnit> getCompilationUnits();
+    
     private String project;
     
     public AbstractJavaGenerator(String project) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -46,6 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method(introspectedTable.getCountByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
         method.addParameter(new Parameter(fqjt, "example")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -45,6 +45,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method(introspectedTable.getDeleteByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -46,6 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
         Method method = new Method(introspectedTable.getDeleteByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         if (!isSimple && introspectedTable.getRules().generatePrimaryKeyClass()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -44,6 +44,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
 
         FullyQualifiedJavaType parameterType;
         if (isSimple) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertSelectiveMethodGenerator.java
Patch:
@@ -42,6 +42,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
 
         FullyQualifiedJavaType parameterType = introspectedTable.getRules()
                 .calculateAllFieldsClass();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectAllMethodGenerator.java
Patch:
@@ -42,6 +42,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method(introspectedTable.getSelectAllStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
                 .getNewListInstance();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -47,6 +47,7 @@ public void addInterfaceElements(Interface interfaze) {
         Method method = new Method(introspectedTable
                 .getSelectByExampleWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
                 .getNewListInstance();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -48,6 +48,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method(introspectedTable.getSelectByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
                 .getNewListInstance();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -46,6 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
         Method method = new Method(introspectedTable.getSelectByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
 
         FullyQualifiedJavaType returnType = introspectedTable.getRules()
                 .calculateAllFieldsClass();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -37,6 +37,7 @@ public void addInterfaceElements(Interface interfaze) {
         Method method = new Method(introspectedTable
                 .getUpdateByExampleSelectiveStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         FullyQualifiedJavaType parameterType =

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -41,6 +41,7 @@ public void addInterfaceElements(Interface interfaze) {
         Method method = new Method(introspectedTable
                 .getUpdateByExampleWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         FullyQualifiedJavaType parameterType;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -40,6 +40,7 @@ public UpdateByExampleWithoutBLOBsMethodGenerator() {
     public void addInterfaceElements(Interface interfaze) {
         Method method = new Method(introspectedTable.getUpdateByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         FullyQualifiedJavaType parameterType;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -54,6 +54,7 @@ public void addInterfaceElements(Interface interfaze) {
         Method method = new Method(introspectedTable
                 .getUpdateByPrimaryKeySelectiveStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -54,6 +54,7 @@ public void addInterfaceElements(Interface interfaze) {
         Method method = new Method(introspectedTable
                 .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -45,6 +45,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method(introspectedTable.getUpdateByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/PrimaryKeyGenerator.java
Patch:
@@ -63,8 +63,9 @@ public List<CompilationUnit> getCompilationUnits() {
 
         String rootClass = getRootClass();
         if (rootClass != null) {
-            topLevelClass.setSuperClass(new FullyQualifiedJavaType(rootClass));
-            topLevelClass.addImportedType(topLevelClass.getSuperClass());
+            FullyQualifiedJavaType rootType = new FullyQualifiedJavaType(rootClass);
+            topLevelClass.setSuperClass(rootType);
+            topLevelClass.addImportedType(rootType);
         }
 
         if (introspectedTable.isConstructorBased()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicCountMethodGenerator.java
Patch:
@@ -46,6 +46,7 @@ public MethodAndImports generateMethodAndImports() {
         imports.add(annotation);
         
         Method method = new Method("count"); //$NON-NLS-1$
+        method.setAbstract(true);
         method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
         method.addParameter(new Parameter(parameterType, "selectStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicDeleteMethodGenerator.java
Patch:
@@ -47,6 +47,7 @@ public MethodAndImports generateMethodAndImports() {
         imports.add(annotation);
         
         Method method = new Method("delete"); //$NON-NLS-1$
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.addParameter(new Parameter(parameterType, "deleteStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicInsertMethodGenerator.java
Patch:
@@ -56,6 +56,7 @@ public MethodAndImports generateMethodAndImports() {
         parameterType.addTypeArgument(recordType);
         
         Method method = new Method("insert"); //$NON-NLS-1$
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.addParameter(new Parameter(parameterType, "insertStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicSelectManyMethodGenerator.java
Patch:
@@ -56,6 +56,7 @@ public MethodAndImports generateMethodAndImports() {
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType.getNewListInstance();
         returnType.addTypeArgument(recordType);
         Method method = new Method("selectMany"); //$NON-NLS-1$
+        method.setAbstract(true);
         method.setReturnType(returnType);
         method.addParameter(new Parameter(parameterType, "selectStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicSelectOneMethodGenerator.java
Patch:
@@ -56,6 +56,7 @@ public MethodAndImports generateMethodAndImports() {
         imports.add(annotation);
         
         Method method = new Method("selectOne"); //$NON-NLS-1$
+        method.setAbstract(true);
 
         imports.add(recordType);
         method.setReturnType(recordType);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicUpdateMethodGenerator.java
Patch:
@@ -51,6 +51,7 @@ public MethodAndImports generateMethodAndImports() {
         imports.add(annotation);
         
         Method method = new Method("update"); //$NON-NLS-1$
+        method.setAbstract(true);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.addParameter(new Parameter(parameterType, "updateStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-systests-domtests/src/main/java/mbg/domtest/GenerateTestSourceFiles.java
Patch:
@@ -25,6 +25,7 @@
 import java.util.Set;
 import java.util.StringTokenizer;
 
+import org.mybatis.generator.api.dom.DefaultJavaFormatter;
 import org.mybatis.generator.api.dom.java.CompilationUnit;
 import org.mybatis.generator.internal.util.StringUtility;
 import org.reflections.Reflections;
@@ -109,7 +110,8 @@ private void writeCompilationUnit(File rootDirectory, CompilationUnit cu) throws
         String fileName = cu.getType().getShortName() + ".java";
         File targetFile = new File(directory, fileName);
 
-        writeFile(targetFile, cu.getFormattedContent());
+        DefaultJavaFormatter formatter = new DefaultJavaFormatter();
+        writeFile(targetFile, formatter.getFormattedContent(cu));
     }
 
     private void writeFile(File file, String content) throws IOException {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -44,10 +44,9 @@ public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
         importedTypes.add(fqjt);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getCountByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
-        method.setName(introspectedTable.getCountByExampleStatementId());
         method.addParameter(new Parameter(fqjt, "example")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -43,10 +43,9 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable.getExampleType());
         importedTypes.add(type);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getDeleteByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getDeleteByExampleStatementId());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -44,10 +44,9 @@ public DeleteByPrimaryKeyMethodGenerator(boolean isSimple) {
     @Override
     public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getDeleteByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getDeleteByPrimaryKeyStatementId());
 
         if (!isSimple && introspectedTable.getRules().generatePrimaryKeyClass()) {
             FullyQualifiedJavaType type = new FullyQualifiedJavaType(

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -40,11 +40,10 @@ public InsertMethodGenerator(boolean isSimple) {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getInsertStatementId());
 
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.setVisibility(JavaVisibility.PUBLIC);
-        method.setName(introspectedTable.getInsertStatementId());
 
         FullyQualifiedJavaType parameterType;
         if (isSimple) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertSelectiveMethodGenerator.java
Patch:
@@ -38,11 +38,10 @@ public InsertSelectiveMethodGenerator() {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getInsertSelectiveStatementId());
 
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.setVisibility(JavaVisibility.PUBLIC);
-        method.setName(introspectedTable.getInsertSelectiveStatementId());
 
         FullyQualifiedJavaType parameterType = introspectedTable.getRules()
                 .calculateAllFieldsClass();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectAllMethodGenerator.java
Patch:
@@ -40,7 +40,7 @@ public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
         importedTypes.add(FullyQualifiedJavaType.getNewListInstance());
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getSelectAllStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
@@ -52,7 +52,6 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(listType);
         returnType.addTypeArgument(listType);
         method.setReturnType(returnType);
-        method.setName(introspectedTable.getSelectAllStatementId());
 
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -44,7 +44,8 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(type);
         importedTypes.add(FullyQualifiedJavaType.getNewListInstance());
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getSelectByExampleWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
@@ -62,8 +63,6 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(listType);
         returnType.addTypeArgument(listType);
         method.setReturnType(returnType);
-        method.setName(introspectedTable
-                .getSelectByExampleWithBLOBsStatementId());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -46,7 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(type);
         importedTypes.add(FullyQualifiedJavaType.getNewListInstance());
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getSelectByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
@@ -66,7 +66,6 @@ public void addInterfaceElements(Interface interfaze) {
         returnType.addTypeArgument(listType);
         method.setReturnType(returnType);
 
-        method.setName(introspectedTable.getSelectByExampleStatementId());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -44,16 +44,14 @@ public SelectByPrimaryKeyMethodGenerator(boolean isSimple) {
     @Override
     public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getSelectByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = introspectedTable.getRules()
                 .calculateAllFieldsClass();
         method.setReturnType(returnType);
         importedTypes.add(returnType);
 
-        method.setName(introspectedTable.getSelectByPrimaryKeyStatementId());
-
         if (!isSimple && introspectedTable.getRules().generatePrimaryKeyClass()) {
             FullyQualifiedJavaType type = new FullyQualifiedJavaType(
                     introspectedTable.getPrimaryKeyType());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -34,11 +34,10 @@ public class UpdateByExampleSelectiveMethodGenerator extends
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByExampleSelectiveStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable
-                .getUpdateByExampleSelectiveStatementId());
 
         FullyQualifiedJavaType parameterType =
                 introspectedTable.getRules().calculateAllFieldsClass();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -38,11 +38,10 @@ public UpdateByExampleWithBLOBsMethodGenerator() {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByExampleWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable
-                .getUpdateByExampleWithBLOBsStatementId());
 
         FullyQualifiedJavaType parameterType;
         if (introspectedTable.getRules().generateRecordWithBLOBsClass()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -38,10 +38,9 @@ public UpdateByExampleWithoutBLOBsMethodGenerator() {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getUpdateByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getUpdateByExampleStatementId());
 
         FullyQualifiedJavaType parameterType;
         if (introspectedTable.getRules().generateBaseRecordClass()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -51,11 +51,10 @@ public void addInterfaceElements(Interface interfaze) {
 
         importedTypes.add(parameterType);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByPrimaryKeySelectiveStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable
-                .getUpdateByPrimaryKeySelectiveStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -51,12 +51,11 @@ public void addInterfaceElements(Interface interfaze) {
 
         importedTypes.add(parameterType);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
-        method.setName(introspectedTable
-                .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -43,10 +43,9 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable.getBaseRecordType());
         importedTypes.add(parameterType);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getUpdateByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getUpdateByPrimaryKeyStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/BaseRecordGenerator.java
Patch:
@@ -152,10 +152,9 @@ private boolean includeBLOBColumns() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass, List<IntrospectedColumn> constructorColumns) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
 
         for (IntrospectedColumn introspectedColumn : constructorColumns) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/PrimaryKeyGenerator.java
Patch:
@@ -118,10 +118,9 @@ public List<CompilationUnit> getCompilationUnits() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
 
         StringBuilder sb = new StringBuilder();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/RecordWithBLOBsGenerator.java
Patch:
@@ -117,10 +117,9 @@ public List<CompilationUnit> getCompilationUnits() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
         
         for (IntrospectedColumn introspectedColumn : introspectedTable

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/SimpleModelGenerator.java
Patch:
@@ -132,10 +132,9 @@ private FullyQualifiedJavaType getSuperClass() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/FluentBuilderMethodsPlugin.java
Patch:
@@ -50,10 +50,9 @@ public boolean modelSetterMethodGenerated(Method method,
             IntrospectedTable introspectedTable,
             ModelClassType modelClassType) {
         
-        Method fluentMethod = new Method();
+        Method fluentMethod = new Method("with" + method.getName().substring(3)); //$NON-NLS-1$
         fluentMethod.setVisibility(JavaVisibility.PUBLIC);
         fluentMethod.setReturnType(topLevelClass.getType());
-        fluentMethod.setName("with" + method.getName().substring(3)); //$NON-NLS-1$
         fluentMethod.getParameters().addAll(method.getParameters());
          
         if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/SerializablePlugin.java
Patch:
@@ -97,12 +97,11 @@ protected void makeSerializable(TopLevelClass topLevelClass,
             topLevelClass.addImportedType(serializable);
             topLevelClass.addSuperInterface(serializable);
 
-            Field field = new Field();
+            Field field = new Field("serialVersionUID", //$NON-NLS-1$
+                    new FullyQualifiedJavaType("long")); //$NON-NLS-1$
             field.setFinal(true);
             field.setInitializationString("1L"); //$NON-NLS-1$
-            field.setName("serialVersionUID"); //$NON-NLS-1$
             field.setStatic(true);
-            field.setType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
             field.setVisibility(JavaVisibility.PRIVATE);
             
             if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -67,10 +67,9 @@ public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass,
 
     private void generateToString(IntrospectedTable introspectedTable,
             TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method("toString"); //$NON-NLS-1$
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getStringInstance());
-        method.setName("toString"); //$NON-NLS-1$
         method.addAnnotation("@Override"); //$NON-NLS-1$
 
         if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/DynamicSqlModelGenerator.java
Patch:
@@ -143,10 +143,9 @@ private FullyQualifiedJavaType getSuperClass() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass, CommentGenerator commentGenerator) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);
         method.getJavaDocLines().clear();

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/InnerInterfaceTest.java
Patch:
@@ -42,7 +42,7 @@ public void testAddSuperInterface() {
     public void testAddMethod() {
 
         InnerInterface interfaze = new InnerInterface("com.foo.UserInterface");
-        Method method = new Method();
+        Method method = new Method("foo");
         interfaze.addMethod(method);
 
         assertNotNull(interfaze.getMethods());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -44,10 +44,9 @@ public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
         importedTypes.add(fqjt);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getCountByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
-        method.setName(introspectedTable.getCountByExampleStatementId());
         method.addParameter(new Parameter(fqjt, "example")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -43,10 +43,9 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable.getExampleType());
         importedTypes.add(type);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getDeleteByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getDeleteByExampleStatementId());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -44,10 +44,9 @@ public DeleteByPrimaryKeyMethodGenerator(boolean isSimple) {
     @Override
     public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getDeleteByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getDeleteByPrimaryKeyStatementId());
 
         if (!isSimple && introspectedTable.getRules().generatePrimaryKeyClass()) {
             FullyQualifiedJavaType type = new FullyQualifiedJavaType(

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -40,11 +40,10 @@ public InsertMethodGenerator(boolean isSimple) {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getInsertStatementId());
 
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.setVisibility(JavaVisibility.PUBLIC);
-        method.setName(introspectedTable.getInsertStatementId());
 
         FullyQualifiedJavaType parameterType;
         if (isSimple) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertSelectiveMethodGenerator.java
Patch:
@@ -38,11 +38,10 @@ public InsertSelectiveMethodGenerator() {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getInsertSelectiveStatementId());
 
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
         method.setVisibility(JavaVisibility.PUBLIC);
-        method.setName(introspectedTable.getInsertSelectiveStatementId());
 
         FullyQualifiedJavaType parameterType = introspectedTable.getRules()
                 .calculateAllFieldsClass();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectAllMethodGenerator.java
Patch:
@@ -40,7 +40,7 @@ public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
         importedTypes.add(FullyQualifiedJavaType.getNewListInstance());
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getSelectAllStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
@@ -52,7 +52,6 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(listType);
         returnType.addTypeArgument(listType);
         method.setReturnType(returnType);
-        method.setName(introspectedTable.getSelectAllStatementId());
 
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -44,7 +44,8 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(type);
         importedTypes.add(FullyQualifiedJavaType.getNewListInstance());
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getSelectByExampleWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
@@ -62,8 +63,6 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(listType);
         returnType.addTypeArgument(listType);
         method.setReturnType(returnType);
-        method.setName(introspectedTable
-                .getSelectByExampleWithBLOBsStatementId());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -46,7 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
         importedTypes.add(type);
         importedTypes.add(FullyQualifiedJavaType.getNewListInstance());
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getSelectByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
@@ -66,7 +66,6 @@ public void addInterfaceElements(Interface interfaze) {
         returnType.addTypeArgument(listType);
         method.setReturnType(returnType);
 
-        method.setName(introspectedTable.getSelectByExampleStatementId());
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -44,16 +44,14 @@ public SelectByPrimaryKeyMethodGenerator(boolean isSimple) {
     @Override
     public void addInterfaceElements(Interface interfaze) {
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<>();
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getSelectByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
 
         FullyQualifiedJavaType returnType = introspectedTable.getRules()
                 .calculateAllFieldsClass();
         method.setReturnType(returnType);
         importedTypes.add(returnType);
 
-        method.setName(introspectedTable.getSelectByPrimaryKeyStatementId());
-
         if (!isSimple && introspectedTable.getRules().generatePrimaryKeyClass()) {
             FullyQualifiedJavaType type = new FullyQualifiedJavaType(
                     introspectedTable.getPrimaryKeyType());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -34,11 +34,10 @@ public class UpdateByExampleSelectiveMethodGenerator extends
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByExampleSelectiveStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable
-                .getUpdateByExampleSelectiveStatementId());
 
         FullyQualifiedJavaType parameterType =
                 introspectedTable.getRules().calculateAllFieldsClass();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -38,11 +38,10 @@ public UpdateByExampleWithBLOBsMethodGenerator() {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByExampleWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable
-                .getUpdateByExampleWithBLOBsStatementId());
 
         FullyQualifiedJavaType parameterType;
         if (introspectedTable.getRules().generateRecordWithBLOBsClass()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -38,10 +38,9 @@ public UpdateByExampleWithoutBLOBsMethodGenerator() {
 
     @Override
     public void addInterfaceElements(Interface interfaze) {
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getUpdateByExampleStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getUpdateByExampleStatementId());
 
         FullyQualifiedJavaType parameterType;
         if (introspectedTable.getRules().generateBaseRecordClass()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -51,11 +51,10 @@ public void addInterfaceElements(Interface interfaze) {
 
         importedTypes.add(parameterType);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByPrimaryKeySelectiveStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable
-                .getUpdateByPrimaryKeySelectiveStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -51,12 +51,11 @@ public void addInterfaceElements(Interface interfaze) {
 
         importedTypes.add(parameterType);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable
+                .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
-        method.setName(introspectedTable
-                .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -43,10 +43,9 @@ public void addInterfaceElements(Interface interfaze) {
                 introspectedTable.getBaseRecordType());
         importedTypes.add(parameterType);
 
-        Method method = new Method();
+        Method method = new Method(introspectedTable.getUpdateByPrimaryKeyStatementId());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
-        method.setName(introspectedTable.getUpdateByPrimaryKeyStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/BaseRecordGenerator.java
Patch:
@@ -152,10 +152,9 @@ private boolean includeBLOBColumns() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass, List<IntrospectedColumn> constructorColumns) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
 
         for (IntrospectedColumn introspectedColumn : constructorColumns) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/PrimaryKeyGenerator.java
Patch:
@@ -118,10 +118,9 @@ public List<CompilationUnit> getCompilationUnits() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
 
         StringBuilder sb = new StringBuilder();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/RecordWithBLOBsGenerator.java
Patch:
@@ -117,10 +117,9 @@ public List<CompilationUnit> getCompilationUnits() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method, introspectedTable);
         
         for (IntrospectedColumn introspectedColumn : introspectedTable

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/SimpleModelGenerator.java
Patch:
@@ -132,10 +132,9 @@ private FullyQualifiedJavaType getSuperClass() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/FluentBuilderMethodsPlugin.java
Patch:
@@ -50,10 +50,9 @@ public boolean modelSetterMethodGenerated(Method method,
             IntrospectedTable introspectedTable,
             ModelClassType modelClassType) {
         
-        Method fluentMethod = new Method();
+        Method fluentMethod = new Method("with" + method.getName().substring(3)); //$NON-NLS-1$
         fluentMethod.setVisibility(JavaVisibility.PUBLIC);
         fluentMethod.setReturnType(topLevelClass.getType());
-        fluentMethod.setName("with" + method.getName().substring(3)); //$NON-NLS-1$
         fluentMethod.getParameters().addAll(method.getParameters());
          
         if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/SerializablePlugin.java
Patch:
@@ -97,12 +97,11 @@ protected void makeSerializable(TopLevelClass topLevelClass,
             topLevelClass.addImportedType(serializable);
             topLevelClass.addSuperInterface(serializable);
 
-            Field field = new Field();
+            Field field = new Field("serialVersionUID", //$NON-NLS-1$
+                    new FullyQualifiedJavaType("long")); //$NON-NLS-1$
             field.setFinal(true);
             field.setInitializationString("1L"); //$NON-NLS-1$
-            field.setName("serialVersionUID"); //$NON-NLS-1$
             field.setStatic(true);
-            field.setType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
             field.setVisibility(JavaVisibility.PRIVATE);
             
             if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -67,10 +67,9 @@ public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass,
 
     private void generateToString(IntrospectedTable introspectedTable,
             TopLevelClass topLevelClass) {
-        Method method = new Method();
+        Method method = new Method("toString"); //$NON-NLS-1$
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setReturnType(FullyQualifiedJavaType.getStringInstance());
-        method.setName("toString"); //$NON-NLS-1$
         method.addAnnotation("@Override"); //$NON-NLS-1$
 
         if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/DynamicSqlModelGenerator.java
Patch:
@@ -143,10 +143,9 @@ private FullyQualifiedJavaType getSuperClass() {
     }
 
     private void addParameterizedConstructor(TopLevelClass topLevelClass, CommentGenerator commentGenerator) {
-        Method method = new Method();
+        Method method = new Method(topLevelClass.getType().getShortName());
         method.setVisibility(JavaVisibility.PUBLIC);
         method.setConstructor(true);
-        method.setName(topLevelClass.getType().getShortName());
         context.getCommentGenerator().addGeneralMethodComment(method,
                 introspectedTable);
         method.getJavaDocLines().clear();

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/InnerInterfaceTest.java
Patch:
@@ -42,7 +42,7 @@ public void testAddSuperInterface() {
     public void testAddMethod() {
 
         InnerInterface interfaze = new InnerInterface("com.foo.UserInterface");
-        Method method = new Method();
+        Method method = new Method("foo");
         interfaze.addMethod(method);
 
         assertNotNull(interfaze.getMethods());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/JavaBeansUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/util/JavaBeansUtil.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/JavaClientGeneratorConfiguration.java
Patch:
@@ -70,7 +70,7 @@ public XmlElement toXmlElement() {
 
         if (implementationPackage != null) {
             answer.addAttribute(new Attribute(
-                    "implementationPackage", targetProject)); //$NON-NLS-1$
+                    "implementationPackage", implementationPackage)); //$NON-NLS-1$
         }
 
         addPropertyXmlElements(answer);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/FullyQualifiedTable.java
Patch:
@@ -19,6 +19,7 @@
 import static org.mybatis.generator.internal.util.HashCodeUtil.SEED;
 import static org.mybatis.generator.internal.util.HashCodeUtil.hash;
 import static org.mybatis.generator.internal.util.JavaBeansUtil.getCamelCaseString;
+import static org.mybatis.generator.internal.util.JavaBeansUtil.getFirstCharacterUppercase;
 import static org.mybatis.generator.internal.util.StringUtility.composeFullyQualifiedTableName;
 import static org.mybatis.generator.internal.util.StringUtility.stringHasValue;
 
@@ -242,7 +243,7 @@ public String getDomainObjectName() {
             String replaceString = domainObjectRenamingRule.getReplaceString();
             replaceString = replaceString == null ? "" : replaceString; //$NON-NLS-1$
             Matcher matcher = pattern.matcher(finalDomainObjectName);
-            finalDomainObjectName = getCamelCaseString(matcher.replaceAll(replaceString), true);
+            finalDomainObjectName = getFirstCharacterUppercase(matcher.replaceAll(replaceString));
         }
         return finalDomainObjectName;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/FullyQualifiedTable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -89,7 +89,7 @@ public class FullyQualifiedTable {
      *            obtained from the Context.
      * @param domainObjectRenamingRule
      *            If domainObjectName is not configured, we'll build the domain object named based on the tableName or runtimeTableName.
-     *            And then we use the domain object renameing rule to generate the final domain object name.
+     *            And then we use the domain object renaming rule to generate the final domain object name.
      * @param context
      *            the context
      */
@@ -262,7 +262,7 @@ public String getDomainObjectName() {
             String replaceString = domainObjectRenamingRule.getReplaceString();
             replaceString = replaceString == null ? "" : replaceString; //$NON-NLS-1$
             Matcher matcher = pattern.matcher(finalDomainObjectName);
-            finalDomainObjectName = matcher.replaceAll(replaceString);
+            finalDomainObjectName = getCamelCaseString(matcher.replaceAll(replaceString), true);
         }
         return finalDomainObjectName;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -61,6 +61,7 @@ public class PropertyRegistry {
     public static final String DAO_METHOD_NAME_CALCULATOR = "methodNameCalculator"; //$NON-NLS-1$
 
     public static final String TYPE_RESOLVER_FORCE_BIG_DECIMALS = "forceBigDecimals"; //$NON-NLS-1$
+    public static final String TYPE_RESOLVER_USE_JSR310_TYPES = "useJSR310Types"; //$NON-NLS-1$
 
     public static final String MODEL_GENERATOR_TRIM_STRINGS = "trimStrings"; //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -61,6 +61,7 @@ public class PropertyRegistry {
     public static final String DAO_METHOD_NAME_CALCULATOR = "methodNameCalculator"; //$NON-NLS-1$
 
     public static final String TYPE_RESOLVER_FORCE_BIG_DECIMALS = "forceBigDecimals"; //$NON-NLS-1$
+    public static final String TYPE_RESOLVER_USE_JSR310_TYPES = "useJSR310Types"; //$NON-NLS-1$
 
     public static final String MODEL_GENERATOR_TRIM_STRINGS = "trimStrings"; //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/EqualsHashCodePlugin.java
Patch:
@@ -141,7 +141,7 @@ protected void generateEquals(TopLevelClass topLevelClass,
                     topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(method,
-                introspectedTable);
+                    introspectedTable);
         }
 
         method.addBodyLine("if (this == that) {"); //$NON-NLS-1$
@@ -255,7 +255,7 @@ protected void generateHashCode(TopLevelClass topLevelClass,
                     topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(method,
-                introspectedTable);
+                    introspectedTable);
         }
 
         method.addBodyLine("final int prime = 31;"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/FluentBuilderMethodsPlugin.java
Patch:
@@ -56,12 +56,12 @@ public boolean modelSetterMethodGenerated(Method method,
         fluentMethod.setName("with" + method.getName().substring(3)); //$NON-NLS-1$
         fluentMethod.getParameters().addAll(method.getParameters());
          
-        if(introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
+        if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
             context.getCommentGenerator().addGeneralMethodAnnotation(fluentMethod,
                     introspectedTable, topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(fluentMethod,
-                introspectedTable);
+                    introspectedTable);
         }
         
         StringBuilder sb = new StringBuilder()

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/SerializablePlugin.java
Patch:
@@ -105,7 +105,7 @@ protected void makeSerializable(TopLevelClass topLevelClass,
             field.setType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
             field.setVisibility(JavaVisibility.PRIVATE);
             
-            if(introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
+            if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
                 context.getCommentGenerator().addFieldAnnotation(field, introspectedTable,
                         topLevelClass.getImportedTypes());
             } else {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -80,7 +80,7 @@ private void generateToString(IntrospectedTable introspectedTable,
                     introspectedTable, topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(method,
-                introspectedTable);
+                    introspectedTable);
         }
 
         method.addBodyLine("StringBuilder sb = new StringBuilder();"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/DynamicSqlSupportClassGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,6 +64,7 @@ private String calculateClassName() {
         return mapperType.getPackageName() + "." + recordType.getShortNameWithoutTypeArguments() + "DynamicSqlSupport"; //$NON-NLS-1$ //$NON-NLS-2$
         
     }
+
     private TopLevelClass buildBasicClass() {
         TopLevelClass topLevelClass = new TopLevelClass(calculateClassName());
         topLevelClass.setVisibility(JavaVisibility.PUBLIC);
@@ -149,7 +150,7 @@ private String calculateInnerInitializationString(IntrospectedColumn column) {
         
         initializationString.append(String.format("column(\"%s\", JDBCType.%s", //$NON-NLS-1$ //$NON-NLS-2$
                 escapeStringForJava(getEscapedColumnName(column)),
-            column.getJdbcTypeName()));
+                column.getJdbcTypeName()));
         
         if (StringUtility.stringHasValue(column.getTypeHandler())) {
             initializationString.append(String.format(", \"%s\")", column.getTypeHandler())); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicCountMethodGenerator.java
Patch:
@@ -23,7 +23,7 @@
 import org.mybatis.generator.api.dom.java.Method;
 import org.mybatis.generator.api.dom.java.Parameter;
 
-public class BasicCountMethodGenerator extends AbstractMethodGenerator{
+public class BasicCountMethodGenerator extends AbstractMethodGenerator {
     
     private BasicCountMethodGenerator(Builder builder) {
         super(builder);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicInsertMethodGenerator.java
Patch:
@@ -61,8 +61,8 @@ public MethodAndImports generateMethodAndImports() {
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);
         method.addAnnotation("@InsertProvider(type=SqlProviderAdapter.class, method=\"insert\")"); //$NON-NLS-1$
 
-      MethodAndImports.Builder builder = MethodAndImports.withMethod(method)
-              .withImports(imports);
+        MethodAndImports.Builder builder = MethodAndImports.withMethod(method)
+                .withImports(imports);
       
         GeneratedKey gk = introspectedTable.getGeneratedKey();
         if (gk != null) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicSelectManyMethodGenerator.java
Patch:
@@ -50,13 +50,12 @@ public MethodAndImports generateMethodAndImports() {
         imports.add(adapter);
         imports.add(annotation);
         
-        Method method = new Method("selectMany"); //$NON-NLS-1$
-
         imports.add(FullyQualifiedJavaType.getNewListInstance());
         
         imports.add(recordType);
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType.getNewListInstance();
         returnType.addTypeArgument(recordType);
+        Method method = new Method("selectMany"); //$NON-NLS-1$
         method.setReturnType(returnType);
         method.addParameter(new Parameter(parameterType, "selectStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/InsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,8 +60,8 @@ public MethodAndImports generateMethodAndImports() {
         List<IntrospectedColumn> columns = ListUtilities.removeIdentityAndGeneratedAlwaysColumns(introspectedTable.getAllColumns());
         for (IntrospectedColumn column : columns) {
             method.addBodyLine("        .map(" + column.getJavaProperty() //$NON-NLS-1$
-            + ").toProperty(\"" + column.getJavaProperty() //$NON-NLS-1$
-            + "\")"); //$NON-NLS-1$
+                    + ").toProperty(\"" + column.getJavaProperty() //$NON-NLS-1$
+                    + "\")"); //$NON-NLS-1$
         }
         
         method.addBodyLine("        .build()"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/MethodParts.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -63,6 +63,7 @@ public Builder withAnnotation(String annotation) {
             annotations.add(annotation);
             return this;
         }
+        
         public Builder withBodyLine(String bodyLine) {
             this.bodyLines.add(bodyLine);
             return this;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/EqualsHashCodePlugin.java
Patch:
@@ -141,7 +141,7 @@ protected void generateEquals(TopLevelClass topLevelClass,
                     topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(method,
-                introspectedTable);
+                    introspectedTable);
         }
 
         method.addBodyLine("if (this == that) {"); //$NON-NLS-1$
@@ -255,7 +255,7 @@ protected void generateHashCode(TopLevelClass topLevelClass,
                     topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(method,
-                introspectedTable);
+                    introspectedTable);
         }
 
         method.addBodyLine("final int prime = 31;"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/FluentBuilderMethodsPlugin.java
Patch:
@@ -56,12 +56,12 @@ public boolean modelSetterMethodGenerated(Method method,
         fluentMethod.setName("with" + method.getName().substring(3)); //$NON-NLS-1$
         fluentMethod.getParameters().addAll(method.getParameters());
          
-        if(introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
+        if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
             context.getCommentGenerator().addGeneralMethodAnnotation(fluentMethod,
                     introspectedTable, topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(fluentMethod,
-                introspectedTable);
+                    introspectedTable);
         }
         
         StringBuilder sb = new StringBuilder()

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/SerializablePlugin.java
Patch:
@@ -105,7 +105,7 @@ protected void makeSerializable(TopLevelClass topLevelClass,
             field.setType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
             field.setVisibility(JavaVisibility.PRIVATE);
             
-            if(introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
+            if (introspectedTable.getTargetRuntime() == TargetRuntime.MYBATIS3_DSQL) {
                 context.getCommentGenerator().addFieldAnnotation(field, introspectedTable,
                         topLevelClass.getImportedTypes());
             } else {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -80,7 +80,7 @@ private void generateToString(IntrospectedTable introspectedTable,
                     introspectedTable, topLevelClass.getImportedTypes());
         } else {
             context.getCommentGenerator().addGeneralMethodComment(method,
-                introspectedTable);
+                    introspectedTable);
         }
 
         method.addBodyLine("StringBuilder sb = new StringBuilder();"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/DynamicSqlSupportClassGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,6 +64,7 @@ private String calculateClassName() {
         return mapperType.getPackageName() + "." + recordType.getShortNameWithoutTypeArguments() + "DynamicSqlSupport"; //$NON-NLS-1$ //$NON-NLS-2$
         
     }
+
     private TopLevelClass buildBasicClass() {
         TopLevelClass topLevelClass = new TopLevelClass(calculateClassName());
         topLevelClass.setVisibility(JavaVisibility.PUBLIC);
@@ -149,7 +150,7 @@ private String calculateInnerInitializationString(IntrospectedColumn column) {
         
         initializationString.append(String.format("column(\"%s\", JDBCType.%s", //$NON-NLS-1$ //$NON-NLS-2$
                 escapeStringForJava(getEscapedColumnName(column)),
-            column.getJdbcTypeName()));
+                column.getJdbcTypeName()));
         
         if (StringUtility.stringHasValue(column.getTypeHandler())) {
             initializationString.append(String.format(", \"%s\")", column.getTypeHandler())); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicCountMethodGenerator.java
Patch:
@@ -23,7 +23,7 @@
 import org.mybatis.generator.api.dom.java.Method;
 import org.mybatis.generator.api.dom.java.Parameter;
 
-public class BasicCountMethodGenerator extends AbstractMethodGenerator{
+public class BasicCountMethodGenerator extends AbstractMethodGenerator {
     
     private BasicCountMethodGenerator(Builder builder) {
         super(builder);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicInsertMethodGenerator.java
Patch:
@@ -61,8 +61,8 @@ public MethodAndImports generateMethodAndImports() {
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);
         method.addAnnotation("@InsertProvider(type=SqlProviderAdapter.class, method=\"insert\")"); //$NON-NLS-1$
 
-      MethodAndImports.Builder builder = MethodAndImports.withMethod(method)
-              .withImports(imports);
+        MethodAndImports.Builder builder = MethodAndImports.withMethod(method)
+                .withImports(imports);
       
         GeneratedKey gk = introspectedTable.getGeneratedKey();
         if (gk != null) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/BasicSelectManyMethodGenerator.java
Patch:
@@ -50,13 +50,12 @@ public MethodAndImports generateMethodAndImports() {
         imports.add(adapter);
         imports.add(annotation);
         
-        Method method = new Method("selectMany"); //$NON-NLS-1$
-
         imports.add(FullyQualifiedJavaType.getNewListInstance());
         
         imports.add(recordType);
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType.getNewListInstance();
         returnType.addTypeArgument(recordType);
+        Method method = new Method("selectMany"); //$NON-NLS-1$
         method.setReturnType(returnType);
         method.addParameter(new Parameter(parameterType, "selectStatement")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodAnnotation(method, introspectedTable, imports);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/InsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -60,8 +60,8 @@ public MethodAndImports generateMethodAndImports() {
         List<IntrospectedColumn> columns = ListUtilities.removeIdentityAndGeneratedAlwaysColumns(introspectedTable.getAllColumns());
         for (IntrospectedColumn column : columns) {
             method.addBodyLine("        .map(" + column.getJavaProperty() //$NON-NLS-1$
-            + ").toProperty(\"" + column.getJavaProperty() //$NON-NLS-1$
-            + "\")"); //$NON-NLS-1$
+                    + ").toProperty(\"" + column.getJavaProperty() //$NON-NLS-1$
+                    + "\")"); //$NON-NLS-1$
         }
         
         method.addBodyLine("        .build()"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/elements/MethodParts.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -63,6 +63,7 @@ public Builder withAnnotation(String annotation) {
             annotations.add(annotation);
             return this;
         }
+        
         public Builder withBodyLine(String bodyLine) {
             this.bodyLines.add(bodyLine);
             return this;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/IntrospectedTable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,7 +51,8 @@ public abstract class IntrospectedTable {
 
     public enum TargetRuntime {
         IBATIS2, 
-        MYBATIS3
+        MYBATIS3,
+        MYBATIS3_DSQL
     }
 
     protected enum InternalAttribute {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/IntrospectedTableMyBatis3DynamicSqlImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
 public class IntrospectedTableMyBatis3DynamicSqlImpl extends IntrospectedTableMyBatis3Impl {
     public IntrospectedTableMyBatis3DynamicSqlImpl() {
         super();
+        targetRuntime = TargetRuntime.MYBATIS3_DSQL;
     }
 
     @Override

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/IntrospectedTable.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,7 +51,8 @@ public abstract class IntrospectedTable {
 
     public enum TargetRuntime {
         IBATIS2, 
-        MYBATIS3
+        MYBATIS3,
+        MYBATIS3_DSQL
     }
 
     protected enum InternalAttribute {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/runtime/dynamic/sql/IntrospectedTableMyBatis3DynamicSqlImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2017 the original author or authors.
+ *    Copyright 2006-2018 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,6 +30,7 @@
 public class IntrospectedTableMyBatis3DynamicSqlImpl extends IntrospectedTableMyBatis3Impl {
     public IntrospectedTableMyBatis3DynamicSqlImpl() {
         super();
+        targetRuntime = TargetRuntime.MYBATIS3_DSQL;
     }
 
     @Override

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Method.java
Patch:
@@ -102,6 +102,7 @@ public Method(Method original) {
         this.returnType = original.returnType;
         this.isNative = original.isNative;
         this.isSynchronized = original.isSynchronized;
+        this.isDefault = original.isDefault;
     }
 
     /**

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Method.java
Patch:
@@ -102,6 +102,7 @@ public Method(Method original) {
         this.returnType = original.returnType;
         this.isNative = original.isNative;
         this.isSynchronized = original.isSynchronized;
+        this.isDefault = original.isDefault;
     }
 
     /**

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/flat/AbstractAnnotatedFlatTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import mbg.test.mb3.AbstractTest;
 import mbg.test.mb3.generated.annotated.flat.mapper.AwfulTableMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.FieldsblobsMapper;
-import mbg.test.mb3.generated.annotated.flat.mapper.FieldsonlyMapper;
+import mbg.test.mb3.generated.annotated.flat.mapper.subpackage.FieldsonlyMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.PkblobsMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.PkfieldsMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.PkfieldsblobsMapper;

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/flat/AbstractAnnotatedFlatTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -18,7 +18,7 @@
 import mbg.test.mb3.AbstractTest;
 import mbg.test.mb3.generated.annotated.flat.mapper.AwfulTableMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.FieldsblobsMapper;
-import mbg.test.mb3.generated.annotated.flat.mapper.FieldsonlyMapper;
+import mbg.test.mb3.generated.annotated.flat.mapper.subpackage.FieldsonlyMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.PkblobsMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.PkfieldsMapper;
 import mbg.test.mb3.generated.annotated.flat.mapper.PkfieldsblobsMapper;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ConnectionFactory.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Properties;
 
 public interface ConnectionFactory {
+
     /**
      * Should return a connection to the database in use for this context.
      * The generator will call this method only one time for each context.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/DAOMethodNameCalculator.java
Patch:
@@ -23,7 +23,7 @@
  * 
  */
 public interface DAOMethodNameCalculator {
-    
+
     /**
      * Calculates and returns a name for the insert method.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/FullyQualifiedTable.java
Patch:
@@ -99,7 +99,7 @@ public FullyQualifiedTable(String introspectedCatalog,
         this.runtimeCatalog = runtimeCatalog;
         this.runtimeSchema = runtimeSchema;
         this.runtimeTableName = runtimeTableName;
-        
+
         if (stringHasValue(domainObjectName)) {
             int index = domainObjectName.lastIndexOf('.');
             if (index == -1) {
@@ -331,7 +331,7 @@ public String getSubPackageForClientOrSqlMap(boolean isSubPackagesEnabled) {
                 sb.append(introspectedSchema.toLowerCase());
             }
         }
-        
+
         // TODO - strip characters that are not valid in package names
         return sb.toString();
     }
@@ -351,7 +351,7 @@ public String getSubPackageForClientOrSqlMap(boolean isSubPackagesEnabled) {
     public String getSubPackageForModel(boolean isSubPackagesEnabled) {
         StringBuilder sb = new StringBuilder();
         sb.append(getSubPackageForClientOrSqlMap(isSubPackagesEnabled));
-        
+
         if (stringHasValue(domainObjectSubPackage)) {
             sb.append('.');
             sb.append(domainObjectSubPackage);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedFile.java
Patch:
@@ -15,14 +15,13 @@
  */
 package org.mybatis.generator.api;
 
-
 /**
  * Abstract class that holds information common to all generated files.
  * 
  * @author Jeff Butler
  */
 public abstract class GeneratedFile {
-    
+
     /** The target project. */
     protected String targetProject;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedXmlFile.java
Patch:
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class GeneratedXmlFile extends GeneratedFile {
-    
+
     /** The document. */
     private Document document;
 
@@ -35,7 +35,7 @@ public class GeneratedXmlFile extends GeneratedFile {
 
     /** The is mergeable. */
     private boolean isMergeable;
-    
+
     /** The xml formatter. */
     private XmlFormatter xmlFormatter;
 
@@ -101,7 +101,7 @@ public String getTargetPackage() {
     public boolean isMergeable() {
         return isMergeable;
     }
-    
+
     public void setMergeable(boolean isMergeable) {
         this.isMergeable = isMergeable;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/MyBatisGenerator.java
Patch:
@@ -366,7 +366,7 @@ private void writeGeneratedXmlFile(GeneratedXmlFile gxf, ProgressCallback callba
             warnings.add(e.getMessage());
         }
     }
-    
+
     /**
      * Writes, or overwrites, the contents of the specified file.
      *
@@ -387,7 +387,7 @@ private void writeFile(File file, String content, String fileEncoding) throws IO
         } else {
             osw = new OutputStreamWriter(fos, fileEncoding);
         }
-        
+
         BufferedWriter bw = new BufferedWriter(osw);
         bw.write(content);
         bw.close();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ShellCallback.java
Patch:
@@ -33,7 +33,7 @@
  * @author Jeff Butler
  */
 public interface ShellCallback {
-    
+
     /**
      * This method is called to ask the shell to resolve a project/package combination into a directory on the file
      * system. This method is called repeatedly (once for each generated file), so it would be wise for an implementing

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultJavaFormatter.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DefaultJavaFormatter implements JavaFormatter {
     protected Context context;
-    
+
     @Override
     public String getFormattedContent(CompilationUnit compilationUnit) {
         return compilationUnit.getFormattedContent();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultXmlFormatter.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DefaultXmlFormatter implements XmlFormatter {
     protected Context context;
-    
+
     @Override
     public String getFormattedContent(Document document) {
         return document.getFormattedContent();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/OutputUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Jeff Butler
  */
 public class OutputUtilities {
-    
+
     /** The Constant lineSeparator. */
     private static final String lineSeparator;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InitializationBlock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -73,7 +73,7 @@ public List<String> getJavaDocLines() {
     public void addJavaDocLine(String javaDocLine) {
         javaDocLines.add(javaDocLine);
     }
-    
+
     public String getFormattedContent(int indentLevel) {
         StringBuilder sb = new StringBuilder();
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InnerInterface.java
Patch:
@@ -136,7 +136,7 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
         if (fields.size() > 0 && methods.size() > 0) {
             OutputUtilities.newLine(sb);
         }
-        
+
         Iterator<Method> mtdIter = getMethods().iterator();
         while (mtdIter.hasNext()) {
             newLine(sb);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -32,7 +32,7 @@
 public class Interface extends InnerInterface implements CompilationUnit {
     
     private Set<FullyQualifiedJavaType> importedTypes;
-    
+
     private Set<String> staticImports;
 
     private List<String> fileCommentLines;
@@ -90,11 +90,11 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
             sb.append(';');
             newLine(sb);
         }
-        
+
         if (staticImports.size() > 0) {
             newLine(sb);
         }
-        
+
         Set<String> importStrings = calculateImports(importedTypes);
         for (String importString : importStrings) {
             sb.append(importString);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaElement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Jeff Butler
  */
 public abstract class JavaElement {
-    
+
     /** The java doc lines. */
     private List<String> javaDocLines;
 
@@ -50,7 +50,7 @@ public JavaElement() {
         javaDocLines = new ArrayList<String>();
         annotations = new ArrayList<String>();
     }
-    
+
     /**
      * Copy Constructor.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Parameter.java
Patch:
@@ -78,7 +78,7 @@ public String getFormattedContent(CompilationUnit compilationUnit) {
         }
 
         sb.append(JavaDomUtils.calculateTypeName(compilationUnit, type));
-        
+
         sb.append(' ');
         if (isVarargs) {
             sb.append("... "); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.TreeSet;
 
 public class TopLevelEnumeration extends InnerEnum implements CompilationUnit {
-    
+
     private Set<FullyQualifiedJavaType> importedTypes;
 
     private Set<String> staticImports;
@@ -69,11 +69,11 @@ && getType().getPackageName().length() > 0) {
             sb.append(';');
             newLine(sb);
         }
-        
+
         if (staticImports.size() > 0) {
             newLine(sb);
         }
-        
+
         Set<String> importStrings = calculateImports(importedTypes);
         for (String importString : importStrings) {
             sb.append(importString);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Attribute.java
Patch:
@@ -21,10 +21,10 @@
  * @author Jeff Butler
  */
 public class Attribute implements Comparable<Attribute> {
-    
+
     /** The name. */
     private String name;
-    
+
     /** The value. */
     private String value;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Document.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class Document {
-    
+
     /** The public id. */
     private String publicId;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/TextElement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class TextElement extends Element {
-    
+
     /** The content. */
     private String content;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/XmlElement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
  * @author Jeff Butler
  */
 public class XmlElement extends Element {
-    
+
     /** The attributes. */
     private List<Attribute> attributes;
 
@@ -49,7 +49,7 @@ public XmlElement(String name) {
         elements = new ArrayList<Element>();
         this.name = name;
     }
-    
+
     /**
      * Copy constructor. Not a truly deep copy, but close enough for most purposes.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractJavaClientGenerator.java
Patch:
@@ -27,7 +27,7 @@
 public abstract class AbstractJavaClientGenerator extends AbstractJavaGenerator {
 
     private boolean requiresXMLGenerator;
-    
+
     public AbstractJavaClientGenerator(boolean requiresXMLGenerator) {
         super();
         this.requiresXMLGenerator = requiresXMLGenerator;
@@ -41,7 +41,7 @@ public AbstractJavaClientGenerator(boolean requiresXMLGenerator) {
     public boolean requiresXMLGenerator() {
         return requiresXMLGenerator;
     }
-    
+
     /**
      * Returns an instance of the XML generator associated
      * with this client generator.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/RootClassInfo.java
Patch:
@@ -78,7 +78,7 @@ private RootClassInfo(String className, List<String> warnings) {
         if (className == null) {
             return;
         }
-        
+
         FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(className);
         String nameWithoutGenerics = fqjt.getFullyQualifiedNameWithoutTypeParameters();
         if (!nameWithoutGenerics.equals(className)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/Ibatis2FormattingUtilities.java
Patch:
@@ -28,7 +28,7 @@
  * @author Jeff Butler
  */
 public class Ibatis2FormattingUtilities {
-    
+
     /**
      * Utility class - no instances.
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/templates/AbstractDAOTemplate.java
Patch:
@@ -34,7 +34,7 @@
  * @author Jeff Butler
  */
 public abstract class AbstractDAOTemplate {
-    
+
     private List<FullyQualifiedJavaType> interfaceImports;
 
     private List<FullyQualifiedJavaType> implementationImports;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/IntrospectedTableMyBatis3SimpleImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ protected AbstractJavaClientGenerator createJavaClientGenerator() {
             javaGenerator = (AbstractJavaClientGenerator) ObjectFactory
                     .createInternalObject(type);
         }
-        
+
         return javaGenerator;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/MyBatis3FormattingUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Jeff Butler
  */
 public class MyBatis3FormattingUtilities {
-    
+
     /**
      * Utility class - no instances.
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/SqlProviderGenerator.java
Patch:
@@ -46,7 +46,7 @@
 public class SqlProviderGenerator extends AbstractJavaGenerator {
 
     private boolean useLegacyBuilder;
-    
+
     public SqlProviderGenerator(boolean useLegacyBuilder) {
         super();
         this.useLegacyBuilder = useLegacyBuilder;
@@ -78,7 +78,7 @@ public List<CompilationUnit> getCompilationUnits() {
         if (addApplyWhereMethod) {
             addApplyWhereMethod(topLevelClass);
         }
-        
+
         List<CompilationUnit> answer = new ArrayList<CompilationUnit>();
         
         if (topLevelClass.getMethods().size() > 0 &&

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/AbstractJavaMapperMethodGenerator.java
Patch:
@@ -54,7 +54,7 @@ protected String getResultAnnotation(Interface interfaze, IntrospectedColumn int
             sb.append(introspectedColumn.getJavaProperty());
             sb.append('\"');
         }
-        
+
         if (stringHasValue(introspectedColumn.getTypeHandler())) {
             FullyQualifiedJavaType fqjt =
                     new FullyQualifiedJavaType(introspectedColumn.getTypeHandler());
@@ -63,7 +63,7 @@ protected String getResultAnnotation(Interface interfaze, IntrospectedColumn int
             sb.append(fqjt.getShortName());
             sb.append(".class"); //$NON-NLS-1$
         }
-        
+
         sb.append(", jdbcType=JdbcType."); //$NON-NLS-1$
         sb.append(introspectedColumn.getJdbcTypeName());
         if (idColumn) {
@@ -98,7 +98,7 @@ protected void addGeneratedKeyAnnotation(Method method, GeneratedKey gk) {
             }
         }
     }
-    
+
     protected void addGeneratedKeyImports(Interface interfaze, GeneratedKey gk) {
         IntrospectedColumn introspectedColumn = introspectedTable.getColumn(gk.getColumn());
         if (introspectedColumn != null) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,8 +64,8 @@ public void addInterfaceElements(Interface interfaze) {
 
     public void addMapperAnnotations(Method method) {
     }
-    
+
     public void addExtraImports(Interface interfaze) {
-        
+
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public class DeleteByPrimaryKeyMethodGenerator extends
         AbstractJavaMapperMethodGenerator {
 
     private boolean isSimple;
-    
+
     public DeleteByPrimaryKeyMethodGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public class SelectByPrimaryKeyMethodGenerator extends
         AbstractJavaMapperMethodGenerator {
 
     private boolean isSimple;
-    
+
     public SelectByPrimaryKeyMethodGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;
@@ -88,7 +88,7 @@ public void addInterfaceElements(Interface interfaze) {
                 method.addParameter(parameter);
             }
         }
-        
+
         addMapperAnnotations(interfaze, method);
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ public void addInterfaceElements(Interface interfaze) {
             interfaze.addMethod(method);
         }
     }
-    
+
     public void addMapperAnnotations(Method method) {
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedCountByExampleMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getCountByExampleStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedDeleteByExampleMethodGenerator.java
Patch:
@@ -40,7 +40,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getDeleteByExampleStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertSelectiveMethodGenerator.java
Patch:
@@ -40,7 +40,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getInsertSelectiveStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
 
         GeneratedKey gk = introspectedTable.getGeneratedKey();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByExampleSelectiveStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByExampleWithBLOBsStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByExampleStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByPrimaryKeySelectiveStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -41,7 +41,7 @@ public AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator() {
 
     @Override
     public void addMapperAnnotations(Method method) {
-        
+
         method.addAnnotation("@Update({"); //$NON-NLS-1$
 
         StringBuilder sb = new StringBuilder();
@@ -103,7 +103,7 @@ public void addMapperAnnotations(Method method) {
             }
             method.addAnnotation(sb.toString());
         }
-        
+
         method.addAnnotation("})"); //$NON-NLS-1$
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/AbstractJavaProviderMethodGenerator.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractJavaProviderMethodGenerator extends
     protected static final FullyQualifiedJavaType NEW_BUILDER_IMPORT = new FullyQualifiedJavaType("org.apache.ibatis.jdbc.SQL"); //$NON-NLS-1$
     protected boolean useLegacyBuilder;
     protected final String builderPrefix;
-    
+
     public AbstractJavaProviderMethodGenerator(boolean useLegacyBuilder) {
         super();
         this.useLegacyBuilder = useLegacyBuilder;
@@ -39,6 +39,6 @@ public AbstractJavaProviderMethodGenerator(boolean useLegacyBuilder) {
             builderPrefix = "sql."; //$NON-NLS-1$
         }
     }
-    
+
     public abstract void addClassElements(TopLevelClass topLevelClass);
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderCountByExampleMethodGenerator.java
Patch:
@@ -41,7 +41,7 @@ public ProviderCountByExampleMethodGenerator(boolean useLegacyBuilder) {
     public void addClassElements(TopLevelClass topLevelClass) {
         Set<String> staticImports = new TreeSet<String>();
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<FullyQualifiedJavaType>();
-        
+
         if (useLegacyBuilder) {
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.BEGIN"); //$NON-NLS-1$
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.FROM"); //$NON-NLS-1$
@@ -50,7 +50,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         } else {
             importedTypes.add(NEW_BUILDER_IMPORT);
         }
-        
+
         FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(introspectedTable.getExampleType());
         importedTypes.add(fqjt);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderDeleteByExampleMethodGenerator.java
Patch:
@@ -49,7 +49,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         } else {
             importedTypes.add(NEW_BUILDER_IMPORT);
         }
-        
+
         FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(introspectedTable.getExampleType());
         importedTypes.add(fqjt);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderInsertSelectiveMethodGenerator.java
Patch:
@@ -46,7 +46,7 @@ public ProviderInsertSelectiveMethodGenerator(boolean useLegacyBuilder) {
     public void addClassElements(TopLevelClass topLevelClass) {
         Set<String> staticImports = new TreeSet<String>();
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<FullyQualifiedJavaType>();
-        
+
         if (useLegacyBuilder) {
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.BEGIN"); //$NON-NLS-1$
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO"); //$NON-NLS-1$
@@ -98,7 +98,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
                 method.addBodyLine("}"); //$NON-NLS-1$
             }
         }
-        
+
         method.addBodyLine(""); //$NON-NLS-1$
         if (useLegacyBuilder) {
             method.addBodyLine("return SQL();"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderSelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public List<IntrospectedColumn> getColumns() {
 
     @Override
     public String getMethodName() {
-        return introspectedTable.getSelectByExampleWithBLOBsStatementId();        
+        return introspectedTable.getSelectByExampleWithBLOBsStatementId();
     }
 
     @Override

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/ExampleGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -459,7 +459,7 @@ private InnerClass getGeneratedCriteriaInnerClass(
         } else {
             method.addBodyLine("if (allCriteria == null) {"); //$NON-NLS-1$
             method.addBodyLine("allCriteria = new ArrayList<Criterion>();"); //$NON-NLS-1$
-            
+
             strIter = criteriaLists.iterator();
             while (strIter.hasNext()) {
                 method.addBodyLine(String.format("allCriteria.addAll(%s);", strIter.next())); //$NON-NLS-1$
@@ -469,7 +469,7 @@ private InnerClass getGeneratedCriteriaInnerClass(
             method.addBodyLine("return allCriteria;"); //$NON-NLS-1$
         }
         answer.addMethod(method);
-        
+
         // now we need to generate the methods that will be used in the SqlMap
         // to generate the dynamic where clause
         topLevelClass.addImportedType(FullyQualifiedJavaType

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/SimpleModelGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public List<CompilationUnit> getCompilationUnits() {
         }
 
         commentGenerator.addModelClassComment(topLevelClass, introspectedTable);
-        
+
         List<IntrospectedColumn> introspectedColumns = introspectedTable.getAllColumns();
 
         if (introspectedTable.isConstructorBased()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/DeleteByPrimaryKeyElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DeleteByPrimaryKeyElementGenerator extends
         AbstractXmlElementGenerator {
 
     private boolean isSimple;
-    
+
     public DeleteByPrimaryKeyElementGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/InsertSelectiveElementGenerator.java
Patch:
@@ -94,7 +94,7 @@ public void addElements(XmlElement parentElement) {
                 // if it is a sequence column, it is not optional
                 // This is required for MyBatis3 because MyBatis3 parses
                 // and calculates the SQL before executing the selectKey
-                
+
                 // if it is primitive, we cannot do a null check
                 sb.setLength(0);
                 sb.append(MyBatis3FormattingUtilities
@@ -109,8 +109,8 @@ public void addElements(XmlElement parentElement) {
                 valuesTrimElement.addElement(new TextElement(sb.toString()));
 
                 continue;
-            }            
-            
+            }
+
             XmlElement insertNotNullElement = new XmlElement("if"); //$NON-NLS-1$
             sb.setLength(0);
             sb.append(introspectedColumn.getJavaProperty());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/ResultMapWithBLOBsElementGenerator.java
Patch:
@@ -137,7 +137,7 @@ private void addResultMapConstructorElements(XmlElement answer) {
                 sb.append(introspectedColumn.getFullyQualifiedJavaType().getShortName());
                 resultElement.addAttribute(new Attribute("javaType", //$NON-NLS-1$
                         sb.toString()));
-                
+
             } else if ("byte[]".equals(introspectedColumn.getFullyQualifiedJavaType() //$NON-NLS-1$
                     .getFullyQualifiedName())) {
                 // need to use the MyBatis type alias for a primitive byte arry

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeyWithoutBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class UpdateByPrimaryKeyWithoutBLOBsElementGenerator extends
         AbstractXmlElementGenerator {
 
     private boolean isSimple;
-    
+
     public UpdateByPrimaryKeyWithoutBLOBsElementGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ColumnOverride.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,7 +51,7 @@ public class ColumnOverride extends PropertyHolder {
 
     /** The configured delimited column name. */
     private String configuredDelimitedColumnName;
-    
+
     /**
      * If true, the column is a GENERATED ALWAYS column which means
      * that it should not be used in insert or update statements.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public class Configuration {
 
     /** The contexts. */
     private List<Context> contexts;
-    
+
     /** The class path entries. */
     private List<String> classPathEntries;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ConnectionFactoryConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class ConnectionFactoryConfiguration extends TypedPropertyHolder {
     public ConnectionFactoryConfiguration() {
         super();
     }
-    
+
     public void validate(List<String> errors) {
         if (getConfigurationType() == null || "DEFAULT".equals(getConfigurationType())) { //$NON-NLS-1$
             if (!StringUtility.stringHasValue(getProperty("driverClass"))) { //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/IgnoredColumn.java
Patch:
@@ -132,7 +132,7 @@ public void validate(List<String> errors, String tableName) {
                     tableName));
         }
     }
-    
+
     public boolean matches(String columnName) {
         if (isColumnNameDelimited) {
             return this.columnName.equals(columnName);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ParserErrorHandler.java
Patch:
@@ -29,7 +29,7 @@
  * @author Jeff Butler
  */
 public class ParserErrorHandler implements ErrorHandler {
-    
+
     /** The warnings. */
     private List<String> warnings;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/InvalidConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class InvalidConfigurationException extends Exception {
-    
+
     /** The Constant serialVersionUID. */
     static final long serialVersionUID = 4902307610148543411L;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/ShellException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
  * @author Jeff Butler
  */
 public class ShellException extends Exception {
-    
+
     /** The Constant serialVersionUID. */
     static final long serialVersionUID = -2026841561754434544L;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultShellCallback.java
Patch:
@@ -29,7 +29,7 @@
  * @author Jeff Butler
  */
 public class DefaultShellCallback implements ShellCallback {
-    
+
     /** The overwrite. */
     private boolean overwrite;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/JDBCConnectionFactory.java
Patch:
@@ -56,7 +56,7 @@ public JDBCConnectionFactory(JDBCConnectionConfiguration config) {
         driverClass = config.getDriverClass();
         otherProperties = config.getProperties();
     }
-    
+
     /**
      * This constructor is called when this connection factory is specified 
      * as the type in a ConnectionFactory configuration element. 
@@ -112,10 +112,10 @@ public void addConfigurationProperties(Properties properties) {
         password = properties.getProperty("password"); //$NON-NLS-1$
         connectionURL = properties.getProperty("connectionURL"); //$NON-NLS-1$
         driverClass = properties.getProperty("driverClass"); //$NON-NLS-1$
-        
+
         otherProperties = new Properties();
         otherProperties.putAll(properties);
-        
+
         // remove all the properties that we have specific attributes for
         otherProperties.remove("userId"); //$NON-NLS-1$
         otherProperties.remove("password"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/rules/ConditionalModelRules.java
Patch:
@@ -61,7 +61,7 @@ public boolean generateBaseRecordClass() {
                 || introspectedTable.getPrimaryKeyColumns().size() == 1
                 || blobsAreInBaseRecord();
     }
-    
+
     /**
      * Blobs will be in the base record class if there is only one blob column
      * 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/rules/Rules.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -235,7 +235,7 @@ public interface Rules {
      * @return true if the record with BLOBs class should be generated
      */
     boolean generateRecordWithBLOBsClass();
-    
+
     /**
      * Implements the rule for generating a Java client.  This rule is
      * only active when a javaClientGenerator configuration has been

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/FluentBuilderMethodsPlugin.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Stefan Lack
  */
-public class FluentBuilderMethodsPlugin extends  PluginAdapter {
+public class FluentBuilderMethodsPlugin extends PluginAdapter {
 
     @Override
     public boolean validate(List<String> warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/SerializablePlugin.java
Patch:
@@ -63,7 +63,7 @@ public void setProperties(Properties properties) {
         addGWTInterface = Boolean.valueOf(properties.getProperty("addGWTInterface")); //$NON-NLS-1$
         suppressJavaInterface = Boolean.valueOf(properties.getProperty("suppressJavaInterface")); //$NON-NLS-1$
     }
-    
+
     @Override
     public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass,
             IntrospectedTable introspectedTable) {
@@ -91,7 +91,7 @@ protected void makeSerializable(TopLevelClass topLevelClass,
             topLevelClass.addImportedType(gwtSerializable);
             topLevelClass.addSuperInterface(gwtSerializable);
         }
-        
+
         if (!suppressJavaInterface) {
             topLevelClass.addImportedType(serializable);
             topLevelClass.addSuperInterface(serializable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -56,7 +56,7 @@ public boolean modelRecordWithBLOBsClassGenerated(
         generateToString(introspectedTable, topLevelClass);
         return true;
     }
-    
+
     @Override
     public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass,
             IntrospectedTable introspectedTable) {

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/SqlScriptRunner.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,11 +45,11 @@ public SqlScriptRunner(InputStream sourceFile, String driver, String url,
         if (!stringHasValue(driver)) {
             throw new Exception("JDBC Driver is required");
         }
-        
+
         if (!stringHasValue(url)) {
             throw new Exception("JDBC URL is required");
         }
-        
+
         this.sourceFile = sourceFile;
         this.driver = driver;
         this.url = url;

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/GeneratedJavaFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public void testReqularInterface() {
         Interface ifc = new Interface(fqjt);
         JavaFormatter jf = new DefaultJavaFormatter();
         GeneratedJavaFile gjf = new GeneratedJavaFile(ifc, "src", jf);
-        
+
         assertEquals("TestInterface.java", gjf.getFileName());
         assertEquals("org.mybatis.test", gjf.getTargetPackage());
     }
@@ -41,7 +41,7 @@ public void testGenericInterface() {
         Interface ifc = new Interface(fqjt);
         JavaFormatter jf = new DefaultJavaFormatter();
         GeneratedJavaFile gjf = new GeneratedJavaFile(ifc, "src", jf);
-        
+
         assertEquals("TestInterface.java", gjf.getFileName());
         assertEquals("org.mybatis.test", gjf.getTargetPackage());
     }

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/InnerInterfaceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -70,7 +70,6 @@ public void testGetSuperClass() {
         assertNull(interfaze.getSuperClass());
     }
 
-
     @Test
     public void testAddInnerInterfaces() {
 

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/InterfaceTest.java
Patch:
@@ -102,16 +102,16 @@ public void testAddStaticImports() {
         assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil1"));
         assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil2"));
     }
-    
+
     @Test
     public void testInterfaceFields() {
         Interface interfaze = new Interface("foo.Bar");
         interfaze.setVisibility(JavaVisibility.PUBLIC);
-        
+
         Field field = new Field("EMPTY_STRING", FullyQualifiedJavaType.getStringInstance());
         field.setInitializationString("\"\"");
         interfaze.addField(field);
-        
+
         field = new Field("ONE", FullyQualifiedJavaType.getStringInstance());
         field.setInitializationString("\"one\"");
         interfaze.addField(field);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ConnectionFactory.java
Patch:
@@ -20,6 +20,7 @@
 import java.util.Properties;
 
 public interface ConnectionFactory {
+
     /**
      * Should return a connection to the database in use for this context.
      * The generator will call this method only one time for each context.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/DAOMethodNameCalculator.java
Patch:
@@ -23,7 +23,7 @@
  * 
  */
 public interface DAOMethodNameCalculator {
-    
+
     /**
      * Calculates and returns a name for the insert method.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/FullyQualifiedTable.java
Patch:
@@ -99,7 +99,7 @@ public FullyQualifiedTable(String introspectedCatalog,
         this.runtimeCatalog = runtimeCatalog;
         this.runtimeSchema = runtimeSchema;
         this.runtimeTableName = runtimeTableName;
-        
+
         if (stringHasValue(domainObjectName)) {
             int index = domainObjectName.lastIndexOf('.');
             if (index == -1) {
@@ -331,7 +331,7 @@ public String getSubPackageForClientOrSqlMap(boolean isSubPackagesEnabled) {
                 sb.append(introspectedSchema.toLowerCase());
             }
         }
-        
+
         // TODO - strip characters that are not valid in package names
         return sb.toString();
     }
@@ -351,7 +351,7 @@ public String getSubPackageForClientOrSqlMap(boolean isSubPackagesEnabled) {
     public String getSubPackageForModel(boolean isSubPackagesEnabled) {
         StringBuilder sb = new StringBuilder();
         sb.append(getSubPackageForClientOrSqlMap(isSubPackagesEnabled));
-        
+
         if (stringHasValue(domainObjectSubPackage)) {
             sb.append('.');
             sb.append(domainObjectSubPackage);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedFile.java
Patch:
@@ -15,14 +15,13 @@
  */
 package org.mybatis.generator.api;
 
-
 /**
  * Abstract class that holds information common to all generated files.
  * 
  * @author Jeff Butler
  */
 public abstract class GeneratedFile {
-    
+
     /** The target project. */
     protected String targetProject;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedXmlFile.java
Patch:
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class GeneratedXmlFile extends GeneratedFile {
-    
+
     /** The document. */
     private Document document;
 
@@ -35,7 +35,7 @@ public class GeneratedXmlFile extends GeneratedFile {
 
     /** The is mergeable. */
     private boolean isMergeable;
-    
+
     /** The xml formatter. */
     private XmlFormatter xmlFormatter;
 
@@ -101,7 +101,7 @@ public String getTargetPackage() {
     public boolean isMergeable() {
         return isMergeable;
     }
-    
+
     public void setMergeable(boolean isMergeable) {
         this.isMergeable = isMergeable;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/MyBatisGenerator.java
Patch:
@@ -366,7 +366,7 @@ private void writeGeneratedXmlFile(GeneratedXmlFile gxf, ProgressCallback callba
             warnings.add(e.getMessage());
         }
     }
-    
+
     /**
      * Writes, or overwrites, the contents of the specified file.
      *
@@ -387,7 +387,7 @@ private void writeFile(File file, String content, String fileEncoding) throws IO
         } else {
             osw = new OutputStreamWriter(fos, fileEncoding);
         }
-        
+
         BufferedWriter bw = new BufferedWriter(osw);
         bw.write(content);
         bw.close();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ShellCallback.java
Patch:
@@ -33,7 +33,7 @@
  * @author Jeff Butler
  */
 public interface ShellCallback {
-    
+
     /**
      * This method is called to ask the shell to resolve a project/package combination into a directory on the file
      * system. This method is called repeatedly (once for each generated file), so it would be wise for an implementing

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultJavaFormatter.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DefaultJavaFormatter implements JavaFormatter {
     protected Context context;
-    
+
     @Override
     public String getFormattedContent(CompilationUnit compilationUnit) {
         return compilationUnit.getFormattedContent();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/DefaultXmlFormatter.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DefaultXmlFormatter implements XmlFormatter {
     protected Context context;
-    
+
     @Override
     public String getFormattedContent(Document document) {
         return document.getFormattedContent();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/OutputUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Jeff Butler
  */
 public class OutputUtilities {
-    
+
     /** The Constant lineSeparator. */
     private static final String lineSeparator;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InitializationBlock.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -73,7 +73,7 @@ public List<String> getJavaDocLines() {
     public void addJavaDocLine(String javaDocLine) {
         javaDocLines.add(javaDocLine);
     }
-    
+
     public String getFormattedContent(int indentLevel) {
         StringBuilder sb = new StringBuilder();
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InnerInterface.java
Patch:
@@ -136,7 +136,7 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
         if (fields.size() > 0 && methods.size() > 0) {
             OutputUtilities.newLine(sb);
         }
-        
+
         Iterator<Method> mtdIter = getMethods().iterator();
         while (mtdIter.hasNext()) {
             newLine(sb);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -32,7 +32,7 @@
 public class Interface extends InnerInterface implements CompilationUnit {
     
     private Set<FullyQualifiedJavaType> importedTypes;
-    
+
     private Set<String> staticImports;
 
     private List<String> fileCommentLines;
@@ -90,11 +90,11 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
             sb.append(';');
             newLine(sb);
         }
-        
+
         if (staticImports.size() > 0) {
             newLine(sb);
         }
-        
+
         Set<String> importStrings = calculateImports(importedTypes);
         for (String importString : importStrings) {
             sb.append(importString);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaElement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Jeff Butler
  */
 public abstract class JavaElement {
-    
+
     /** The java doc lines. */
     private List<String> javaDocLines;
 
@@ -50,7 +50,7 @@ public JavaElement() {
         javaDocLines = new ArrayList<String>();
         annotations = new ArrayList<String>();
     }
-    
+
     /**
      * Copy Constructor.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Parameter.java
Patch:
@@ -78,7 +78,7 @@ public String getFormattedContent(CompilationUnit compilationUnit) {
         }
 
         sb.append(JavaDomUtils.calculateTypeName(compilationUnit, type));
-        
+
         sb.append(' ');
         if (isVarargs) {
             sb.append("... "); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -25,7 +25,7 @@
 import java.util.TreeSet;
 
 public class TopLevelEnumeration extends InnerEnum implements CompilationUnit {
-    
+
     private Set<FullyQualifiedJavaType> importedTypes;
 
     private Set<String> staticImports;
@@ -69,11 +69,11 @@ && getType().getPackageName().length() > 0) {
             sb.append(';');
             newLine(sb);
         }
-        
+
         if (staticImports.size() > 0) {
             newLine(sb);
         }
-        
+
         Set<String> importStrings = calculateImports(importedTypes);
         for (String importString : importStrings) {
             sb.append(importString);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Attribute.java
Patch:
@@ -21,10 +21,10 @@
  * @author Jeff Butler
  */
 public class Attribute implements Comparable<Attribute> {
-    
+
     /** The name. */
     private String name;
-    
+
     /** The value. */
     private String value;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/Document.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class Document {
-    
+
     /** The public id. */
     private String publicId;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/TextElement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class TextElement extends Element {
-    
+
     /** The content. */
     private String content;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/xml/XmlElement.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -27,7 +27,7 @@
  * @author Jeff Butler
  */
 public class XmlElement extends Element {
-    
+
     /** The attributes. */
     private List<Attribute> attributes;
 
@@ -49,7 +49,7 @@ public XmlElement(String name) {
         elements = new ArrayList<Element>();
         this.name = name;
     }
-    
+
     /**
      * Copy constructor. Not a truly deep copy, but close enough for most purposes.
      *

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractJavaClientGenerator.java
Patch:
@@ -27,7 +27,7 @@
 public abstract class AbstractJavaClientGenerator extends AbstractJavaGenerator {
 
     private boolean requiresXMLGenerator;
-    
+
     public AbstractJavaClientGenerator(boolean requiresXMLGenerator) {
         super();
         this.requiresXMLGenerator = requiresXMLGenerator;
@@ -41,7 +41,7 @@ public AbstractJavaClientGenerator(boolean requiresXMLGenerator) {
     public boolean requiresXMLGenerator() {
         return requiresXMLGenerator;
     }
-    
+
     /**
      * Returns an instance of the XML generator associated
      * with this client generator.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/RootClassInfo.java
Patch:
@@ -78,7 +78,7 @@ private RootClassInfo(String className, List<String> warnings) {
         if (className == null) {
             return;
         }
-        
+
         FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(className);
         String nameWithoutGenerics = fqjt.getFullyQualifiedNameWithoutTypeParameters();
         if (!nameWithoutGenerics.equals(className)) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/Ibatis2FormattingUtilities.java
Patch:
@@ -28,7 +28,7 @@
  * @author Jeff Butler
  */
 public class Ibatis2FormattingUtilities {
-    
+
     /**
      * Utility class - no instances.
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/templates/AbstractDAOTemplate.java
Patch:
@@ -34,7 +34,7 @@
  * @author Jeff Butler
  */
 public abstract class AbstractDAOTemplate {
-    
+
     private List<FullyQualifiedJavaType> interfaceImports;
 
     private List<FullyQualifiedJavaType> implementationImports;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/IntrospectedTableMyBatis3SimpleImpl.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -72,7 +72,7 @@ protected AbstractJavaClientGenerator createJavaClientGenerator() {
             javaGenerator = (AbstractJavaClientGenerator) ObjectFactory
                     .createInternalObject(type);
         }
-        
+
         return javaGenerator;
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/MyBatis3FormattingUtilities.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -26,7 +26,7 @@
  * @author Jeff Butler
  */
 public class MyBatis3FormattingUtilities {
-    
+
     /**
      * Utility class - no instances.
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/SqlProviderGenerator.java
Patch:
@@ -46,7 +46,7 @@
 public class SqlProviderGenerator extends AbstractJavaGenerator {
 
     private boolean useLegacyBuilder;
-    
+
     public SqlProviderGenerator(boolean useLegacyBuilder) {
         super();
         this.useLegacyBuilder = useLegacyBuilder;
@@ -78,7 +78,7 @@ public List<CompilationUnit> getCompilationUnits() {
         if (addApplyWhereMethod) {
             addApplyWhereMethod(topLevelClass);
         }
-        
+
         List<CompilationUnit> answer = new ArrayList<CompilationUnit>();
         
         if (topLevelClass.getMethods().size() > 0 &&

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/AbstractJavaMapperMethodGenerator.java
Patch:
@@ -54,7 +54,7 @@ protected String getResultAnnotation(Interface interfaze, IntrospectedColumn int
             sb.append(introspectedColumn.getJavaProperty());
             sb.append('\"');
         }
-        
+
         if (stringHasValue(introspectedColumn.getTypeHandler())) {
             FullyQualifiedJavaType fqjt =
                     new FullyQualifiedJavaType(introspectedColumn.getTypeHandler());
@@ -63,7 +63,7 @@ protected String getResultAnnotation(Interface interfaze, IntrospectedColumn int
             sb.append(fqjt.getShortName());
             sb.append(".class"); //$NON-NLS-1$
         }
-        
+
         sb.append(", jdbcType=JdbcType."); //$NON-NLS-1$
         sb.append(introspectedColumn.getJdbcTypeName());
         if (idColumn) {
@@ -98,7 +98,7 @@ protected void addGeneratedKeyAnnotation(Method method, GeneratedKey gk) {
             }
         }
     }
-    
+
     protected void addGeneratedKeyImports(Interface interfaze, GeneratedKey gk) {
         IntrospectedColumn introspectedColumn = introspectedTable.getColumn(gk.getColumn());
         if (introspectedColumn != null) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -64,8 +64,8 @@ public void addInterfaceElements(Interface interfaze) {
 
     public void addMapperAnnotations(Method method) {
     }
-    
+
     public void addExtraImports(Interface interfaze) {
-        
+
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public class DeleteByPrimaryKeyMethodGenerator extends
         AbstractJavaMapperMethodGenerator {
 
     private boolean isSimple;
-    
+
     public DeleteByPrimaryKeyMethodGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public class SelectByPrimaryKeyMethodGenerator extends
         AbstractJavaMapperMethodGenerator {
 
     private boolean isSimple;
-    
+
     public SelectByPrimaryKeyMethodGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;
@@ -88,7 +88,7 @@ public void addInterfaceElements(Interface interfaze) {
                 method.addParameter(parameter);
             }
         }
-        
+
         addMapperAnnotations(interfaze, method);
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -79,7 +79,7 @@ public void addInterfaceElements(Interface interfaze) {
             interfaze.addMethod(method);
         }
     }
-    
+
     public void addMapperAnnotations(Method method) {
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedCountByExampleMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getCountByExampleStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedDeleteByExampleMethodGenerator.java
Patch:
@@ -40,7 +40,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getDeleteByExampleStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertSelectiveMethodGenerator.java
Patch:
@@ -40,7 +40,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getInsertSelectiveStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
 
         GeneratedKey gk = introspectedTable.getGeneratedKey();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByExampleSelectiveStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByExampleWithBLOBsStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByExampleStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addMapperAnnotations(Method method) {
         sb.append(".class, method=\""); //$NON-NLS-1$
         sb.append(introspectedTable.getUpdateByPrimaryKeySelectiveStatementId());
         sb.append("\")"); //$NON-NLS-1$
-        
+
         method.addAnnotation(sb.toString());
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -41,7 +41,7 @@ public AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator() {
 
     @Override
     public void addMapperAnnotations(Method method) {
-        
+
         method.addAnnotation("@Update({"); //$NON-NLS-1$
 
         StringBuilder sb = new StringBuilder();
@@ -103,7 +103,7 @@ public void addMapperAnnotations(Method method) {
             }
             method.addAnnotation(sb.toString());
         }
-        
+
         method.addAnnotation("})"); //$NON-NLS-1$
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/AbstractJavaProviderMethodGenerator.java
Patch:
@@ -29,7 +29,7 @@ public abstract class AbstractJavaProviderMethodGenerator extends
     protected static final FullyQualifiedJavaType NEW_BUILDER_IMPORT = new FullyQualifiedJavaType("org.apache.ibatis.jdbc.SQL"); //$NON-NLS-1$
     protected boolean useLegacyBuilder;
     protected final String builderPrefix;
-    
+
     public AbstractJavaProviderMethodGenerator(boolean useLegacyBuilder) {
         super();
         this.useLegacyBuilder = useLegacyBuilder;
@@ -39,6 +39,6 @@ public AbstractJavaProviderMethodGenerator(boolean useLegacyBuilder) {
             builderPrefix = "sql."; //$NON-NLS-1$
         }
     }
-    
+
     public abstract void addClassElements(TopLevelClass topLevelClass);
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderCountByExampleMethodGenerator.java
Patch:
@@ -41,7 +41,7 @@ public ProviderCountByExampleMethodGenerator(boolean useLegacyBuilder) {
     public void addClassElements(TopLevelClass topLevelClass) {
         Set<String> staticImports = new TreeSet<String>();
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<FullyQualifiedJavaType>();
-        
+
         if (useLegacyBuilder) {
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.BEGIN"); //$NON-NLS-1$
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.FROM"); //$NON-NLS-1$
@@ -50,7 +50,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         } else {
             importedTypes.add(NEW_BUILDER_IMPORT);
         }
-        
+
         FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(introspectedTable.getExampleType());
         importedTypes.add(fqjt);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderDeleteByExampleMethodGenerator.java
Patch:
@@ -49,7 +49,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         } else {
             importedTypes.add(NEW_BUILDER_IMPORT);
         }
-        
+
         FullyQualifiedJavaType fqjt = new FullyQualifiedJavaType(introspectedTable.getExampleType());
         importedTypes.add(fqjt);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderInsertSelectiveMethodGenerator.java
Patch:
@@ -46,7 +46,7 @@ public ProviderInsertSelectiveMethodGenerator(boolean useLegacyBuilder) {
     public void addClassElements(TopLevelClass topLevelClass) {
         Set<String> staticImports = new TreeSet<String>();
         Set<FullyQualifiedJavaType> importedTypes = new TreeSet<FullyQualifiedJavaType>();
-        
+
         if (useLegacyBuilder) {
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.BEGIN"); //$NON-NLS-1$
             staticImports.add("org.apache.ibatis.jdbc.SqlBuilder.INSERT_INTO"); //$NON-NLS-1$
@@ -98,7 +98,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
                 method.addBodyLine("}"); //$NON-NLS-1$
             }
         }
-        
+
         method.addBodyLine(""); //$NON-NLS-1$
         if (useLegacyBuilder) {
             method.addBodyLine("return SQL();"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderSelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ public List<IntrospectedColumn> getColumns() {
 
     @Override
     public String getMethodName() {
-        return introspectedTable.getSelectByExampleWithBLOBsStatementId();        
+        return introspectedTable.getSelectByExampleWithBLOBsStatementId();
     }
 
     @Override

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/ExampleGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -459,7 +459,7 @@ private InnerClass getGeneratedCriteriaInnerClass(
         } else {
             method.addBodyLine("if (allCriteria == null) {"); //$NON-NLS-1$
             method.addBodyLine("allCriteria = new ArrayList<Criterion>();"); //$NON-NLS-1$
-            
+
             strIter = criteriaLists.iterator();
             while (strIter.hasNext()) {
                 method.addBodyLine(String.format("allCriteria.addAll(%s);", strIter.next())); //$NON-NLS-1$
@@ -469,7 +469,7 @@ private InnerClass getGeneratedCriteriaInnerClass(
             method.addBodyLine("return allCriteria;"); //$NON-NLS-1$
         }
         answer.addMethod(method);
-        
+
         // now we need to generate the methods that will be used in the SqlMap
         // to generate the dynamic where clause
         topLevelClass.addImportedType(FullyQualifiedJavaType

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/SimpleModelGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -68,7 +68,7 @@ public List<CompilationUnit> getCompilationUnits() {
         }
 
         commentGenerator.addModelClassComment(topLevelClass, introspectedTable);
-        
+
         List<IntrospectedColumn> introspectedColumns = introspectedTable.getAllColumns();
 
         if (introspectedTable.isConstructorBased()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/DeleteByPrimaryKeyElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -30,7 +30,7 @@ public class DeleteByPrimaryKeyElementGenerator extends
         AbstractXmlElementGenerator {
 
     private boolean isSimple;
-    
+
     public DeleteByPrimaryKeyElementGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/InsertSelectiveElementGenerator.java
Patch:
@@ -94,7 +94,7 @@ public void addElements(XmlElement parentElement) {
                 // if it is a sequence column, it is not optional
                 // This is required for MyBatis3 because MyBatis3 parses
                 // and calculates the SQL before executing the selectKey
-                
+
                 // if it is primitive, we cannot do a null check
                 sb.setLength(0);
                 sb.append(MyBatis3FormattingUtilities
@@ -109,8 +109,8 @@ public void addElements(XmlElement parentElement) {
                 valuesTrimElement.addElement(new TextElement(sb.toString()));
 
                 continue;
-            }            
-            
+            }
+
             XmlElement insertNotNullElement = new XmlElement("if"); //$NON-NLS-1$
             sb.setLength(0);
             sb.append(introspectedColumn.getJavaProperty());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/ResultMapWithBLOBsElementGenerator.java
Patch:
@@ -137,7 +137,7 @@ private void addResultMapConstructorElements(XmlElement answer) {
                 sb.append(introspectedColumn.getFullyQualifiedJavaType().getShortName());
                 resultElement.addAttribute(new Attribute("javaType", //$NON-NLS-1$
                         sb.toString()));
-                
+
             } else if ("byte[]".equals(introspectedColumn.getFullyQualifiedJavaType() //$NON-NLS-1$
                     .getFullyQualifiedName())) {
                 // need to use the MyBatis type alias for a primitive byte arry

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeyWithoutBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -34,7 +34,7 @@ public class UpdateByPrimaryKeyWithoutBLOBsElementGenerator extends
         AbstractXmlElementGenerator {
 
     private boolean isSimple;
-    
+
     public UpdateByPrimaryKeyWithoutBLOBsElementGenerator(boolean isSimple) {
         super();
         this.isSimple = isSimple;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ColumnOverride.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -51,7 +51,7 @@ public class ColumnOverride extends PropertyHolder {
 
     /** The configured delimited column name. */
     private String configuredDelimitedColumnName;
-    
+
     /**
      * If true, the column is a GENERATED ALWAYS column which means
      * that it should not be used in insert or update statements.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/Configuration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public class Configuration {
 
     /** The contexts. */
     private List<Context> contexts;
-    
+
     /** The class path entries. */
     private List<String> classPathEntries;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/ConnectionFactoryConfiguration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public class ConnectionFactoryConfiguration extends TypedPropertyHolder {
     public ConnectionFactoryConfiguration() {
         super();
     }
-    
+
     public void validate(List<String> errors) {
         if (getConfigurationType() == null || "DEFAULT".equals(getConfigurationType())) { //$NON-NLS-1$
             if (!StringUtility.stringHasValue(getProperty("driverClass"))) { //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/IgnoredColumn.java
Patch:
@@ -132,7 +132,7 @@ public void validate(List<String> errors, String tableName) {
                     tableName));
         }
     }
-    
+
     public boolean matches(String columnName) {
         if (isColumnNameDelimited) {
             return this.columnName.equals(columnName);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ParserErrorHandler.java
Patch:
@@ -29,7 +29,7 @@
  * @author Jeff Butler
  */
 public class ParserErrorHandler implements ErrorHandler {
-    
+
     /** The warnings. */
     private List<String> warnings;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/InvalidConfigurationException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -23,7 +23,7 @@
  * @author Jeff Butler
  */
 public class InvalidConfigurationException extends Exception {
-    
+
     /** The Constant serialVersionUID. */
     static final long serialVersionUID = 4902307610148543411L;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/exception/ShellException.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -22,7 +22,7 @@
  * @author Jeff Butler
  */
 public class ShellException extends Exception {
-    
+
     /** The Constant serialVersionUID. */
     static final long serialVersionUID = -2026841561754434544L;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultShellCallback.java
Patch:
@@ -29,7 +29,7 @@
  * @author Jeff Butler
  */
 public class DefaultShellCallback implements ShellCallback {
-    
+
     /** The overwrite. */
     private boolean overwrite;
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/JDBCConnectionFactory.java
Patch:
@@ -56,7 +56,7 @@ public JDBCConnectionFactory(JDBCConnectionConfiguration config) {
         driverClass = config.getDriverClass();
         otherProperties = config.getProperties();
     }
-    
+
     /**
      * This constructor is called when this connection factory is specified 
      * as the type in a ConnectionFactory configuration element. 
@@ -112,10 +112,10 @@ public void addConfigurationProperties(Properties properties) {
         password = properties.getProperty("password"); //$NON-NLS-1$
         connectionURL = properties.getProperty("connectionURL"); //$NON-NLS-1$
         driverClass = properties.getProperty("driverClass"); //$NON-NLS-1$
-        
+
         otherProperties = new Properties();
         otherProperties.putAll(properties);
-        
+
         // remove all the properties that we have specific attributes for
         otherProperties.remove("userId"); //$NON-NLS-1$
         otherProperties.remove("password"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/rules/ConditionalModelRules.java
Patch:
@@ -61,7 +61,7 @@ public boolean generateBaseRecordClass() {
                 || introspectedTable.getPrimaryKeyColumns().size() == 1
                 || blobsAreInBaseRecord();
     }
-    
+
     /**
      * Blobs will be in the base record class if there is only one blob column
      * 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/rules/Rules.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -235,7 +235,7 @@ public interface Rules {
      * @return true if the record with BLOBs class should be generated
      */
     boolean generateRecordWithBLOBsClass();
-    
+
     /**
      * Implements the rule for generating a Java client.  This rule is
      * only active when a javaClientGenerator configuration has been

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/FluentBuilderMethodsPlugin.java
Patch:
@@ -36,7 +36,7 @@
  *
  * @author Stefan Lack
  */
-public class FluentBuilderMethodsPlugin extends  PluginAdapter {
+public class FluentBuilderMethodsPlugin extends PluginAdapter {
 
     @Override
     public boolean validate(List<String> warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/SerializablePlugin.java
Patch:
@@ -63,7 +63,7 @@ public void setProperties(Properties properties) {
         addGWTInterface = Boolean.valueOf(properties.getProperty("addGWTInterface")); //$NON-NLS-1$
         suppressJavaInterface = Boolean.valueOf(properties.getProperty("suppressJavaInterface")); //$NON-NLS-1$
     }
-    
+
     @Override
     public boolean modelBaseRecordClassGenerated(TopLevelClass topLevelClass,
             IntrospectedTable introspectedTable) {
@@ -91,7 +91,7 @@ protected void makeSerializable(TopLevelClass topLevelClass,
             topLevelClass.addImportedType(gwtSerializable);
             topLevelClass.addSuperInterface(gwtSerializable);
         }
-        
+
         if (!suppressJavaInterface) {
             topLevelClass.addImportedType(serializable);
             topLevelClass.addSuperInterface(serializable);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/ToStringPlugin.java
Patch:
@@ -56,7 +56,7 @@ public boolean modelRecordWithBLOBsClassGenerated(
         generateToString(introspectedTable, topLevelClass);
         return true;
     }
-    
+
     @Override
     public boolean modelPrimaryKeyClassGenerated(TopLevelClass topLevelClass,
             IntrospectedTable introspectedTable) {

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/SqlScriptRunner.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -45,11 +45,11 @@ public SqlScriptRunner(InputStream sourceFile, String driver, String url,
         if (!stringHasValue(driver)) {
             throw new Exception("JDBC Driver is required");
         }
-        
+
         if (!stringHasValue(url)) {
             throw new Exception("JDBC URL is required");
         }
-        
+
         this.sourceFile = sourceFile;
         this.driver = driver;
         this.url = url;

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/GeneratedJavaFileTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,7 +29,7 @@ public void testReqularInterface() {
         Interface ifc = new Interface(fqjt);
         JavaFormatter jf = new DefaultJavaFormatter();
         GeneratedJavaFile gjf = new GeneratedJavaFile(ifc, "src", jf);
-        
+
         assertEquals("TestInterface.java", gjf.getFileName());
         assertEquals("org.mybatis.test", gjf.getTargetPackage());
     }
@@ -41,7 +41,7 @@ public void testGenericInterface() {
         Interface ifc = new Interface(fqjt);
         JavaFormatter jf = new DefaultJavaFormatter();
         GeneratedJavaFile gjf = new GeneratedJavaFile(ifc, "src", jf);
-        
+
         assertEquals("TestInterface.java", gjf.getFileName());
         assertEquals("org.mybatis.test", gjf.getTargetPackage());
     }

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/InnerInterfaceTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -70,7 +70,6 @@ public void testGetSuperClass() {
         assertNull(interfaze.getSuperClass());
     }
 
-
     @Test
     public void testAddInnerInterfaces() {
 

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/api/dom/java/InterfaceTest.java
Patch:
@@ -102,16 +102,16 @@ public void testAddStaticImports() {
         assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil1"));
         assertTrue(interfaze.getStaticImports().contains("com.foo.StaticUtil2"));
     }
-    
+
     @Test
     public void testInterfaceFields() {
         Interface interfaze = new Interface("foo.Bar");
         interfaze.setVisibility(JavaVisibility.PUBLIC);
-        
+
         Field field = new Field("EMPTY_STRING", FullyQualifiedJavaType.getStringInstance());
         field.setInitializationString("\"\"");
         interfaze.addField(field);
-        
+
         field = new Field("ONE", FullyQualifiedJavaType.getStringInstance());
         field.setInitializationString("\"one\"");
         interfaze.addField(field);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractJavaClientGenerator.java
Patch:
@@ -47,7 +47,7 @@ public boolean requiresXMLGenerator() {
      * with this client generator.
      * 
      * @return the matched XML generator.  May return null if no
-     * XML is required by this generator
+     *     XML is required by this generator
      */
     public abstract AbstractXmlGenerator getMatchedXMLGenerator();
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public void addInterfaceElements(Interface interfaze) {
                 .getUpdateByExampleSelectiveStatementId());
 
         FullyQualifiedJavaType parameterType =
-            introspectedTable.getRules().calculateAllFieldsClass();
+                introspectedTable.getRules().calculateAllFieldsClass();
         method.addParameter(new Parameter(parameterType,
                 "record", "@Param(\"record\")")); //$NON-NLS-1$ //$NON-NLS-2$
         importedTypes.add(parameterType);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void addInterfaceElements(Interface interfaze) {
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         method.setName(introspectedTable
-            .getUpdateByPrimaryKeyWithBLOBsStatementId());
+                .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedCountByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedCountByExampleMethodGenerator extends
-    CountByExampleMethodGenerator {
+public class AnnotatedCountByExampleMethodGenerator extends CountByExampleMethodGenerator {
 
     public AnnotatedCountByExampleMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,8 +36,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedInsertMethodGenerator extends
-    InsertMethodGenerator {
+public class AnnotatedInsertMethodGenerator extends InsertMethodGenerator {
 
     public AnnotatedInsertMethodGenerator(boolean isSimple) {
         super(isSimple);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,8 +25,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedInsertSelectiveMethodGenerator extends
-    InsertSelectiveMethodGenerator {
+public class AnnotatedInsertSelectiveMethodGenerator extends InsertSelectiveMethodGenerator {
 
     public AnnotatedInsertSelectiveMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,8 +29,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedSelectByExampleWithBLOBsMethodGenerator extends
-    SelectByExampleWithBLOBsMethodGenerator {
+public class AnnotatedSelectByExampleWithBLOBsMethodGenerator extends SelectByExampleWithBLOBsMethodGenerator {
 
     public AnnotatedSelectByExampleWithBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,8 +29,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedSelectByExampleWithoutBLOBsMethodGenerator extends
-    SelectByExampleWithoutBLOBsMethodGenerator {
+public class AnnotatedSelectByExampleWithoutBLOBsMethodGenerator extends SelectByExampleWithoutBLOBsMethodGenerator {
 
     public AnnotatedSelectByExampleWithoutBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -33,8 +33,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedSelectByPrimaryKeyMethodGenerator extends
-    SelectByPrimaryKeyMethodGenerator {
+public class AnnotatedSelectByPrimaryKeyMethodGenerator extends SelectByPrimaryKeyMethodGenerator {
     
     private boolean useResultMapIfAvailable;
 
@@ -53,7 +52,7 @@ public void addMapperAnnotations(Interface interfaze, Method method) {
         method.addAnnotation(sb.toString());
         
         Iterator<IntrospectedColumn> iter = introspectedTable
-            .getAllColumns().iterator();
+                .getAllColumns().iterator();
         sb.setLength(0);
         javaIndent(sb, 1);
         sb.append('"');

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByExampleSelectiveMethodGenerator extends
-    UpdateByExampleSelectiveMethodGenerator {
+public class AnnotatedUpdateByExampleSelectiveMethodGenerator extends UpdateByExampleSelectiveMethodGenerator {
 
     public AnnotatedUpdateByExampleSelectiveMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByExampleWithBLOBsMethodGenerator extends
-    UpdateByExampleWithBLOBsMethodGenerator {
+public class AnnotatedUpdateByExampleWithBLOBsMethodGenerator extends UpdateByExampleWithBLOBsMethodGenerator {
 
     public AnnotatedUpdateByExampleWithBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator extends
-    UpdateByExampleWithoutBLOBsMethodGenerator {
+public class AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator extends UpdateByExampleWithoutBLOBsMethodGenerator {
 
     public AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator extends
-    UpdateByPrimaryKeySelectiveMethodGenerator {
+public class AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator extends UpdateByPrimaryKeySelectiveMethodGenerator {
 
     public AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,8 +33,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator extends
-    UpdateByPrimaryKeyWithBLOBsMethodGenerator {
+public class AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator extends UpdateByPrimaryKeyWithBLOBsMethodGenerator {
 
     public AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,8 +33,8 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator extends
-    UpdateByPrimaryKeyWithoutBLOBsMethodGenerator {
+public class AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator
+        extends UpdateByPrimaryKeyWithoutBLOBsMethodGenerator {
 
     private boolean isSimple;
     

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -93,7 +93,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         method.addBodyLine(""); //$NON-NLS-1$
         
         FullyQualifiedJavaType example =
-            new FullyQualifiedJavaType(introspectedTable.getExampleType());
+                new FullyQualifiedJavaType(introspectedTable.getExampleType());
         importedTypes.add(example);
         method.addBodyLine(String.format("%s example = (%s) parameter.get(\"example\");", //$NON-NLS-1$
                 example.getShortName(), example.getShortName()));

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/ResultMapWithBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ public void addElements(XmlElement parentElement) {
 
         if (!introspectedTable.isConstructorBased()) {
             answer.addAttribute(new Attribute("extends", //$NON-NLS-1$
-                introspectedTable.getBaseResultMapId()));
+                    introspectedTable.getBaseResultMapId()));
         }
 
         context.getCommentGenerator().addComment(answer);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ConfigurationParser.java
Patch:
@@ -81,7 +81,7 @@ public ConfigurationParser(List<String> warnings) {
      * </ol>
      * 
      * @param extraProperties an (optional) set of properties used to resolve property
-     *   references in the configuration file
+     *     references in the configuration file
      * @param warnings
      */
     public ConfigurationParser(Properties extraProperties, List<String> warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/ObjectFactory.java
Patch:
@@ -180,7 +180,7 @@ public static URL getResource(String resource) {
         for (ClassLoader classLoader : externalClassLoaders) {
             url = classLoader.getResource(resource);
             if (url != null) {
-              return url;
+                return url;
             }
         }
         

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -391,7 +391,7 @@ && stringHasValue(co.getJavaType())) {
                 }
 
                 if (context.autoDelimitKeywords()
-                    && SqlReservedWords.containsWord(introspectedColumn
+                        && SqlReservedWords.containsWord(introspectedColumn
                             .getActualColumnName())) {
                     introspectedColumn.setColumnNameDelimited(true);
                 }
@@ -516,7 +516,7 @@ private void applyColumnOverrides(TableConfiguration tc,
     }
 
     /**
-     * This method returns a Map<ActualTableName, List<ColumnDefinitions>> of columns returned from the database
+     * This method returns a Map<ActualTableName, List<IntrospectedColumn>> of columns returned from the database
      * introspection.
      *
      * @param tc

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/conditional/AbstractConditionalJava5Test.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/flat/AbstractFlatJava5Test.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/miscellaneous/AbstractMiscellaneousTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/AbstractJavaClientGenerator.java
Patch:
@@ -47,7 +47,7 @@ public boolean requiresXMLGenerator() {
      * with this client generator.
      * 
      * @return the matched XML generator.  May return null if no
-     * XML is required by this generator
+     *     XML is required by this generator
      */
     public abstract AbstractXmlGenerator getMatchedXMLGenerator();
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -42,7 +42,7 @@ public void addInterfaceElements(Interface interfaze) {
                 .getUpdateByExampleSelectiveStatementId());
 
         FullyQualifiedJavaType parameterType =
-            introspectedTable.getRules().calculateAllFieldsClass();
+                introspectedTable.getRules().calculateAllFieldsClass();
         method.addParameter(new Parameter(parameterType,
                 "record", "@Param(\"record\")")); //$NON-NLS-1$ //$NON-NLS-2$
         importedTypes.add(parameterType);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -56,7 +56,7 @@ public void addInterfaceElements(Interface interfaze) {
         method.setReturnType(FullyQualifiedJavaType.getIntInstance());
 
         method.setName(introspectedTable
-            .getUpdateByPrimaryKeyWithBLOBsStatementId());
+                .getUpdateByPrimaryKeyWithBLOBsStatementId());
         method.addParameter(new Parameter(parameterType, "record")); //$NON-NLS-1$
 
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedCountByExampleMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedCountByExampleMethodGenerator extends
-    CountByExampleMethodGenerator {
+public class AnnotatedCountByExampleMethodGenerator extends CountByExampleMethodGenerator {
 
     public AnnotatedCountByExampleMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -36,8 +36,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedInsertMethodGenerator extends
-    InsertMethodGenerator {
+public class AnnotatedInsertMethodGenerator extends InsertMethodGenerator {
 
     public AnnotatedInsertMethodGenerator(boolean isSimple) {
         super(isSimple);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedInsertSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -25,8 +25,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedInsertSelectiveMethodGenerator extends
-    InsertSelectiveMethodGenerator {
+public class AnnotatedInsertSelectiveMethodGenerator extends InsertSelectiveMethodGenerator {
 
     public AnnotatedInsertSelectiveMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,8 +29,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedSelectByExampleWithBLOBsMethodGenerator extends
-    SelectByExampleWithBLOBsMethodGenerator {
+public class AnnotatedSelectByExampleWithBLOBsMethodGenerator extends SelectByExampleWithBLOBsMethodGenerator {
 
     public AnnotatedSelectByExampleWithBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -29,8 +29,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedSelectByExampleWithoutBLOBsMethodGenerator extends
-    SelectByExampleWithoutBLOBsMethodGenerator {
+public class AnnotatedSelectByExampleWithoutBLOBsMethodGenerator extends SelectByExampleWithoutBLOBsMethodGenerator {
 
     public AnnotatedSelectByExampleWithoutBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -33,8 +33,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedSelectByPrimaryKeyMethodGenerator extends
-    SelectByPrimaryKeyMethodGenerator {
+public class AnnotatedSelectByPrimaryKeyMethodGenerator extends SelectByPrimaryKeyMethodGenerator {
     
     private boolean useResultMapIfAvailable;
 
@@ -53,7 +52,7 @@ public void addMapperAnnotations(Interface interfaze, Method method) {
         method.addAnnotation(sb.toString());
         
         Iterator<IntrospectedColumn> iter = introspectedTable
-            .getAllColumns().iterator();
+                .getAllColumns().iterator();
         sb.setLength(0);
         javaIndent(sb, 1);
         sb.append('"');

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByExampleSelectiveMethodGenerator extends
-    UpdateByExampleSelectiveMethodGenerator {
+public class AnnotatedUpdateByExampleSelectiveMethodGenerator extends UpdateByExampleSelectiveMethodGenerator {
 
     public AnnotatedUpdateByExampleSelectiveMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByExampleWithBLOBsMethodGenerator extends
-    UpdateByExampleWithBLOBsMethodGenerator {
+public class AnnotatedUpdateByExampleWithBLOBsMethodGenerator extends UpdateByExampleWithBLOBsMethodGenerator {
 
     public AnnotatedUpdateByExampleWithBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator extends
-    UpdateByExampleWithoutBLOBsMethodGenerator {
+public class AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator extends UpdateByExampleWithoutBLOBsMethodGenerator {
 
     public AnnotatedUpdateByExampleWithoutBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -24,8 +24,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator extends
-    UpdateByPrimaryKeySelectiveMethodGenerator {
+public class AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator extends UpdateByPrimaryKeySelectiveMethodGenerator {
 
     public AnnotatedUpdateByPrimaryKeySelectiveMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,8 +33,7 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator extends
-    UpdateByPrimaryKeyWithBLOBsMethodGenerator {
+public class AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator extends UpdateByPrimaryKeyWithBLOBsMethodGenerator {
 
     public AnnotatedUpdateByPrimaryKeyWithBLOBsMethodGenerator() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -33,8 +33,8 @@
  * 
  * @author Jeff Butler
  */
-public class AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator extends
-    UpdateByPrimaryKeyWithoutBLOBsMethodGenerator {
+public class AnnotatedUpdateByPrimaryKeyWithoutBLOBsMethodGenerator
+        extends UpdateByPrimaryKeyWithoutBLOBsMethodGenerator {
 
     private boolean isSimple;
     

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -93,7 +93,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         method.addBodyLine(""); //$NON-NLS-1$
         
         FullyQualifiedJavaType example =
-            new FullyQualifiedJavaType(introspectedTable.getExampleType());
+                new FullyQualifiedJavaType(introspectedTable.getExampleType());
         importedTypes.add(example);
         method.addBodyLine(String.format("%s example = (%s) parameter.get(\"example\");", //$NON-NLS-1$
                 example.getShortName(), example.getShortName()));

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/ResultMapWithBLOBsElementGenerator.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -55,7 +55,7 @@ public void addElements(XmlElement parentElement) {
 
         if (!introspectedTable.isConstructorBased()) {
             answer.addAttribute(new Attribute("extends", //$NON-NLS-1$
-                introspectedTable.getBaseResultMapId()));
+                    introspectedTable.getBaseResultMapId()));
         }
 
         context.getCommentGenerator().addComment(answer);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/ConfigurationParser.java
Patch:
@@ -81,7 +81,7 @@ public ConfigurationParser(List<String> warnings) {
      * </ol>
      * 
      * @param extraProperties an (optional) set of properties used to resolve property
-     *   references in the configuration file
+     *     references in the configuration file
      * @param warnings
      */
     public ConfigurationParser(Properties extraProperties, List<String> warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/ObjectFactory.java
Patch:
@@ -180,7 +180,7 @@ public static URL getResource(String resource) {
         for (ClassLoader classLoader : externalClassLoaders) {
             url = classLoader.getResource(resource);
             if (url != null) {
-              return url;
+                return url;
             }
         }
         

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -391,7 +391,7 @@ && stringHasValue(co.getJavaType())) {
                 }
 
                 if (context.autoDelimitKeywords()
-                    && SqlReservedWords.containsWord(introspectedColumn
+                        && SqlReservedWords.containsWord(introspectedColumn
                             .getActualColumnName())) {
                     introspectedColumn.setColumnNameDelimited(true);
                 }
@@ -516,7 +516,7 @@ private void applyColumnOverrides(TableConfiguration tc,
     }
 
     /**
-     * This method returns a Map<ActualTableName, List<ColumnDefinitions>> of columns returned from the database
+     * This method returns a Map<ActualTableName, List<IntrospectedColumn>> of columns returned from the database
      * introspection.
      *
      * @param tc

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/conditional/AbstractConditionalJava5Test.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/flat/AbstractFlatJava5Test.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/miscellaneous/AbstractMiscellaneousTest.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/FullyQualifiedJavaType.java
Patch:
@@ -22,6 +22,8 @@
 import java.util.List;
 import java.util.StringTokenizer;
 
+import org.mybatis.generator.internal.util.messages.Messages;
+
 /**
  * The Class FullyQualifiedJavaType.
  *
@@ -186,7 +188,7 @@ public List<String> getImportList() {
     private String calculateActualImport(String name) {
         String answer = name;
         if (this.isArray()) {
-            int index = name.indexOf("[");
+            int index = name.indexOf("["); //$NON-NLS-1$
             if (index != -1) {
                 answer = name.substring(0, index);
             }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InnerClass.java
Patch:
@@ -247,15 +247,15 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
 
         if(!this.getTypeParameters().isEmpty()) {
             boolean comma = false;
-            sb.append("<");
+            sb.append("<"); //$NON-NLS-1$
             for (TypeParameter typeParameter: typeParameters) {
                 if(comma) {
-                    sb.append(", ");
+                    sb.append(", "); //$NON-NLS-1$
                 }
                 sb.append(typeParameter.getFormattedContent(compilationUnit));
                 comma = true;
             }
-            sb.append("> ");
+            sb.append("> "); //$NON-NLS-1$
         }
 
         if (superClass != null) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -20,7 +20,6 @@
 import static org.mybatis.generator.internal.util.StringUtility.stringHasValue;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaDomUtils.java
Patch:
@@ -48,7 +48,7 @@ private static String calculateParameterizedTypeName(CompilationUnit compilation
         boolean comma = false;
         for (FullyQualifiedJavaType ft : fqjt.getTypeArguments()) {
             if (comma) {
-                sb.append(", ");
+                sb.append(", "); //$NON-NLS-1$
             } else {
                 comma = true;
             }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Method.java
Patch:
@@ -204,7 +204,7 @@ public String getFormattedContent(int indentLevel, boolean interfaceMethod, Comp
         }
 
         if (!getTypeParameters().isEmpty()) {
-            sb.append("<");
+            sb.append("<"); //$NON-NLS-1$
             boolean comma = false;
             for (TypeParameter typeParameter : getTypeParameters()) {
                 if (comma) {
@@ -215,7 +215,7 @@ public String getFormattedContent(int indentLevel, boolean interfaceMethod, Comp
 
                 sb.append(typeParameter.getFormattedContent(compilationUnit));
             }
-            sb.append("> ");
+            sb.append("> "); //$NON-NLS-1$
         }
 
         if (!constructor) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -20,7 +20,6 @@
 import static org.mybatis.generator.internal.util.StringUtility.stringHasValue;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -20,7 +20,6 @@
 import static org.mybatis.generator.internal.util.messages.Messages.getString;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TypeParameter.java
Patch:
@@ -57,11 +57,11 @@ public String getFormattedContent(CompilationUnit compilationUnit) {
         sb.append(name);
         if (!extendsTypes.isEmpty()) {
 
-            sb.append(" extends ");
+            sb.append(" extends "); //$NON-NLS-1$
             boolean addAnd = false;
             for (FullyQualifiedJavaType type : extendsTypes) {
                 if (addAnd) {
-                    sb.append(" & ");
+                    sb.append(" & "); //$NON-NLS-1$
                 } else {
                     addAnd = true;
                 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/BaseRecordGenerator.java
Patch:
@@ -37,7 +37,6 @@
 import org.mybatis.generator.api.dom.java.TopLevelClass;
 import org.mybatis.generator.codegen.AbstractJavaGenerator;
 import org.mybatis.generator.codegen.RootClassInfo;
-import org.mybatis.generator.internal.util.StringUtility;
 
 /**
  * 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/MapperAnnotationPlugin.java
Patch:
@@ -34,8 +34,8 @@ public boolean validate(List<String> warnings) {
     public boolean clientGenerated(Interface interfaze, TopLevelClass topLevelClass,
             IntrospectedTable introspectedTable) {
 
-        interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.Mapper"));
-        interfaze.addAnnotation("@Mapper");
+        interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.Mapper")); //$NON-NLS-1$
+        interfaze.addAnnotation("@Mapper"); //$NON-NLS-1$
         return true;
     }
 }

File: eclipse/org.mybatis.generator.eclipse.core/src/org/mybatis/generator/eclipse/core/merge/EclipseDomUtils.java
Patch:
@@ -66,7 +66,7 @@ public static boolean typesMatch(Type type1, Type type2) {
     
     public static CompilationUnit getCompilationUnitFromSource(String javaSource) {
         ASTParser astParser = ASTParser.newParser(AST.JLS8);
-        Map<?,?> options = JavaCore.getDefaultOptions();
+        Map<String, String> options = JavaCore.getDefaultOptions();
         JavaCore.setComplianceOptions(JavaCore.VERSION_1_8, options);
         astParser.setCompilerOptions(options);
         astParser.setSource(javaSource.toCharArray());

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/Messages.java
Patch:
@@ -28,6 +28,7 @@ public class Messages extends NLS {
     public static String CONFIGURATION_TAB_FILE_PICKER_DIALOG_MESSAGE;
     public static String CONFIGURATION_TAB_FILE_PICKER_DIALOG_TITLE;
     public static String CONFIGURATION_TAB_NAME;
+    public static String CONFIGURATION_TAB_LOGGER_GROUP_TITLE;
 
     public static String SQL_SCRIPT_TAB_FILE_GROUP_TITLE;
     public static String SQL_SCRIPT_TAB_FILE_PICKER_DIALOG_MESSAGE;

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/launcher/GeneratorLaunchConstants.java
Patch:
@@ -19,6 +19,7 @@
 
 public interface GeneratorLaunchConstants {
     public static final String ATTR_CONFIGURATION_FILE_NAME = Activator.PLUGIN_ID + ".CONFIG_TAB.FILE_NAME"; //$NON-NLS-1$
+    public static final String ATTR_LOGGING_IMPLEMENTATION = Activator.PLUGIN_ID + ".CONFIG_TAB.LOGGING_IMPLEMENTATION"; //$NON-NLS-1$
     
     public static final String ATTR_SQL_SCRIPT_FILE_NAME = Activator.PLUGIN_ID + ".SQL_TAB.FILE_NAME"; //$NON-NLS-1$
     public static final String ATTR_SQL_SCRIPT_DRIVER_CLASS = Activator.PLUGIN_ID + ".SQL_TAB.DRIVER_CLASS"; //$NON-NLS-1$

File: eclipse/org.mybatis.generator.eclipse.core/src/org/mybatis/generator/eclipse/core/merge/EclipseDomUtils.java
Patch:
@@ -66,7 +66,7 @@ public static boolean typesMatch(Type type1, Type type2) {
     
     public static CompilationUnit getCompilationUnitFromSource(String javaSource) {
         ASTParser astParser = ASTParser.newParser(AST.JLS8);
-        Map<?,?> options = JavaCore.getDefaultOptions();
+        Map<String, String> options = JavaCore.getDefaultOptions();
         JavaCore.setComplianceOptions(JavaCore.VERSION_1_8, options);
         astParser.setCompilerOptions(options);
         astParser.setSource(javaSource.toCharArray());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -92,7 +92,7 @@ public void addImportedType(FullyQualifiedJavaType importedType) {
                 && !importedType.getPackageName().equals(
                         getType().getPackageName())
                 && !importedType.getShortName().equals(getType().getShortName())) {
-                importedTypes.add(importedType);
+            importedTypes.add(importedType);
         }
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -92,7 +92,7 @@ public void addImportedType(FullyQualifiedJavaType importedType) {
                 && !importedType.getPackageName().equals(
                         getType().getPackageName())
                 && !importedType.getShortName().equals(getType().getShortName())) {
-            importedTypes.add(importedType);
+                importedTypes.add(importedType);
         }
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2016 the original author or authors.
+ *    Copyright 2006-2017 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -68,7 +68,7 @@ public Interface(String type) {
      * @see org.mybatis.generator.api.dom.java.CompilationUnit#getImportedTypes()
      */
     public Set<FullyQualifiedJavaType> getImportedTypes() {
-        return Collections.unmodifiableSet(importedTypes);
+        return importedTypes;
     }
 
     /* (non-Javadoc)

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -70,7 +70,7 @@ public TopLevelClass(String typeName) {
      * @return Returns the importedTypes.
      */
     public Set<FullyQualifiedJavaType> getImportedTypes() {
-        return Collections.unmodifiableSet(importedTypes);
+        return importedTypes;
     }
 
     /**

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -104,7 +104,7 @@ && getType().getPackageName().length() > 0) {
      * @see org.mybatis.generator.api.dom.java.CompilationUnit#getImportedTypes()
      */
     public Set<FullyQualifiedJavaType> getImportedTypes() {
-        return Collections.unmodifiableSet(importedTypes);
+        return importedTypes;
     }
 
     /* (non-Javadoc)

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -68,7 +68,7 @@ public Interface(String type) {
      * @see org.mybatis.generator.api.dom.java.CompilationUnit#getImportedTypes()
      */
     public Set<FullyQualifiedJavaType> getImportedTypes() {
-        return Collections.unmodifiableSet(importedTypes);
+        return importedTypes;
     }
 
     /* (non-Javadoc)

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -70,7 +70,7 @@ public TopLevelClass(String typeName) {
      * @return Returns the importedTypes.
      */
     public Set<FullyQualifiedJavaType> getImportedTypes() {
-        return Collections.unmodifiableSet(importedTypes);
+        return importedTypes;
     }
 
     /**

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -104,7 +104,7 @@ && getType().getPackageName().length() > 0) {
      * @see org.mybatis.generator.api.dom.java.CompilationUnit#getImportedTypes()
      */
     public Set<FullyQualifiedJavaType> getImportedTypes() {
-        return Collections.unmodifiableSet(importedTypes);
+        return importedTypes;
     }
 
     /* (non-Javadoc)

File: eclipse/org.mybatis.generator.eclipse.ui/antsrc/org/mybatis/generator/eclipse/ui/ant/GeneratorAntTask.java
Patch:
@@ -148,7 +148,7 @@ public void execute() throws BuildException {
         }
 
         for (String warning : warnings) {
-            log(warning, Project.MSG_WARN);
+            log("WARNING: " + warning, Project.MSG_WARN);
         }
     }
 

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/launcher/GeneratorLaunchConfigurationDelegate.java
Patch:
@@ -70,11 +70,13 @@ public void launch(ILaunchConfiguration configuration, String mode, ILaunch laun
         }
 
         antRunner.setBuildFileLocation(buildFile);
+        antRunner.addBuildLogger("org.mybatis.generator.eclipse.ui.ant.GeneratorBuildLogger"); //$NON-NLS-1$
         modifyAntClasspathIfNecessary(configuration, antRunner);
         if (ILaunchManager.DEBUG_MODE.equals(mode)) {
             antRunner.setMessageOutputLevel(Project.MSG_DEBUG);
             antRunner.setArguments("-debug"); //$NON-NLS-1$
-            antRunner.addBuildListener("org.mybatis.generator.eclipse.ui.ant.DebugBuildListener"); //$NON-NLS-1$
+        } else {
+            antRunner.setMessageOutputLevel(Project.MSG_WARN);
         }
         
         antRunner.run(monitor);

File: eclipse/org.mybatis.generator.eclipse.ui/antsrc/org/mybatis/generator/eclipse/ui/ant/GeneratorAntTask.java
Patch:
@@ -148,7 +148,7 @@ public void execute() throws BuildException {
         }
 
         for (String warning : warnings) {
-            log(warning, Project.MSG_WARN);
+            log("WARNING: " + warning, Project.MSG_WARN);
         }
     }
 

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/launcher/GeneratorLaunchConfigurationDelegate.java
Patch:
@@ -70,11 +70,13 @@ public void launch(ILaunchConfiguration configuration, String mode, ILaunch laun
         }
 
         antRunner.setBuildFileLocation(buildFile);
+        antRunner.addBuildLogger("org.mybatis.generator.eclipse.ui.ant.GeneratorBuildLogger"); //$NON-NLS-1$
         modifyAntClasspathIfNecessary(configuration, antRunner);
         if (ILaunchManager.DEBUG_MODE.equals(mode)) {
             antRunner.setMessageOutputLevel(Project.MSG_DEBUG);
             antRunner.setArguments("-debug"); //$NON-NLS-1$
-            antRunner.addBuildListener("org.mybatis.generator.eclipse.ui.ant.DebugBuildListener"); //$NON-NLS-1$
+        } else {
+            antRunner.setMessageOutputLevel(Project.MSG_WARN);
         }
         
         antRunner.run(monitor);

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/launcher/AntFileGenerator.java
Patch:
@@ -23,6 +23,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.Document;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.eclipse.ui.launcher.tabs.LauncherUtils;
 import org.mybatis.generator.internal.util.StringUtility;
 
 /**
@@ -74,8 +75,8 @@ private void addSqlTaskIfNecessary(XmlElement parent) {
 
             sqlTask.addAttribute(new Attribute("driver", getTextOrBlank(configuration, ATTR_SQL_SCRIPT_DRIVER_CLASS))); //$NON-NLS-1$
             sqlTask.addAttribute(new Attribute("url", getTextOrBlank(configuration, ATTR_SQL_SCRIPT_CONNECTION_URL))); //$NON-NLS-1$
-            sqlTask.addAttribute(new Attribute("userid", getTextOrBlank(configuration, ATTR_SQL_SCRIPT_USERID))); //$NON-NLS-1$
-            sqlTask.addAttribute(new Attribute("password", getTextOrBlank(configuration, ATTR_SQL_SCRIPT_PASSWORD))); //$NON-NLS-1$
+            sqlTask.addAttribute(new Attribute("userid", LauncherUtils.getUserId(configuration))); //$NON-NLS-1$
+            sqlTask.addAttribute(new Attribute("password", LauncherUtils.getPassword(configuration))); //$NON-NLS-1$
             sqlTask.addAttribute(new Attribute("src", sqlFileFullPath)); //$NON-NLS-1$
 
             parent.addElement(sqlTask);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/elements/CountByExampleMethodGenerator.java
Patch:
@@ -47,7 +47,7 @@ public void addImplementationElements(TopLevelClass topLevelClass) {
         // generate the implementation method
         StringBuilder sb = new StringBuilder();
 
-        sb.append("Integer count = (Integer)  "); //$NON-NLS-1$
+        sb.append("Long count = (Long)  "); //$NON-NLS-1$
         sb.append(daoTemplate.getQueryForObjectMethod(introspectedTable
                 .getIbatis2SqlMapNamespace(), introspectedTable
                 .getCountByExampleStatementId(), "example")); //$NON-NLS-1$
@@ -56,7 +56,7 @@ public void addImplementationElements(TopLevelClass topLevelClass) {
         if (generateForJava5) {
             method.addBodyLine("return count;"); //$NON-NLS-1$
         } else {
-            method.addBodyLine("return count.intValue();"); //$NON-NLS-1$
+            method.addBodyLine("return count.longValue();"); //$NON-NLS-1$
         }
 
         if (context.getPlugins().clientCountByExampleMethodGenerated(method,
@@ -87,7 +87,7 @@ private Method getMethodShell(Set<FullyQualifiedJavaType> importedTypes) {
 
         Method method = new Method();
         method.setVisibility(getExampleMethodVisibility());
-        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
+        method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
         method.setName(getDAOMethodNameCalculator()
                 .getCountByExampleMethodName(introspectedTable));
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/sqlmap/elements/CountByExampleElementGenerator.java
Patch:
@@ -38,7 +38,7 @@ public void addElements(XmlElement parentElement) {
                 "id", introspectedTable.getCountByExampleStatementId())); //$NON-NLS-1$
         answer.addAttribute(new Attribute(
                 "parameterClass", introspectedTable.getExampleType())); //$NON-NLS-1$
-        answer.addAttribute(new Attribute("resultClass", "java.lang.Integer")); //$NON-NLS-1$ //$NON-NLS-2$
+        answer.addAttribute(new Attribute("resultClass", "java.lang.Long")); //$NON-NLS-1$ //$NON-NLS-2$
 
         context.getCommentGenerator().addComment(answer);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -46,7 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method();
         method.setVisibility(JavaVisibility.PUBLIC);
-        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
+        method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
         method.setName(introspectedTable.getCountByExampleStatementId());
         method.addParameter(new Parameter(fqjt, "example")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/CountByExampleElementGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addElements(XmlElement parentElement) {
         answer.addAttribute(new Attribute(
                 "id", introspectedTable.getCountByExampleStatementId())); //$NON-NLS-1$
         answer.addAttribute(new Attribute("parameterType", fqjt)); //$NON-NLS-1$
-        answer.addAttribute(new Attribute("resultType", "java.lang.Integer")); //$NON-NLS-1$ //$NON-NLS-2$
+        answer.addAttribute(new Attribute("resultType", "java.lang.Long")); //$NON-NLS-1$ //$NON-NLS-2$
 
         context.getCommentGenerator().addComment(answer);
 

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/miscellaneous/MiscellaneousTest.java
Patch:
@@ -29,11 +29,9 @@
 import mbg.test.common.MyTime;
 import mbg.test.mb3.common.TestEnum;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.EnumtestMapper;
-import mbg.test.mb3.generated.annotated.miscellaneous.mapper.GeneratedalwaystestMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.MyObjectMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.RegexrenameMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.Enumtest;
-import mbg.test.mb3.generated.annotated.miscellaneous.model.Generatedalwaystest;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObject;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectKey;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/elements/CountByExampleMethodGenerator.java
Patch:
@@ -47,7 +47,7 @@ public void addImplementationElements(TopLevelClass topLevelClass) {
         // generate the implementation method
         StringBuilder sb = new StringBuilder();
 
-        sb.append("Integer count = (Integer)  "); //$NON-NLS-1$
+        sb.append("Long count = (Long)  "); //$NON-NLS-1$
         sb.append(daoTemplate.getQueryForObjectMethod(introspectedTable
                 .getIbatis2SqlMapNamespace(), introspectedTable
                 .getCountByExampleStatementId(), "example")); //$NON-NLS-1$
@@ -56,7 +56,7 @@ public void addImplementationElements(TopLevelClass topLevelClass) {
         if (generateForJava5) {
             method.addBodyLine("return count;"); //$NON-NLS-1$
         } else {
-            method.addBodyLine("return count.intValue();"); //$NON-NLS-1$
+            method.addBodyLine("return count.longValue();"); //$NON-NLS-1$
         }
 
         if (context.getPlugins().clientCountByExampleMethodGenerated(method,
@@ -87,7 +87,7 @@ private Method getMethodShell(Set<FullyQualifiedJavaType> importedTypes) {
 
         Method method = new Method();
         method.setVisibility(getExampleMethodVisibility());
-        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
+        method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
         method.setName(getDAOMethodNameCalculator()
                 .getCountByExampleMethodName(introspectedTable));
         method.addParameter(new Parameter(type, "example")); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/sqlmap/elements/CountByExampleElementGenerator.java
Patch:
@@ -38,7 +38,7 @@ public void addElements(XmlElement parentElement) {
                 "id", introspectedTable.getCountByExampleStatementId())); //$NON-NLS-1$
         answer.addAttribute(new Attribute(
                 "parameterClass", introspectedTable.getExampleType())); //$NON-NLS-1$
-        answer.addAttribute(new Attribute("resultClass", "java.lang.Integer")); //$NON-NLS-1$ //$NON-NLS-2$
+        answer.addAttribute(new Attribute("resultClass", "java.lang.Long")); //$NON-NLS-1$ //$NON-NLS-2$
 
         context.getCommentGenerator().addComment(answer);
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -46,7 +46,7 @@ public void addInterfaceElements(Interface interfaze) {
 
         Method method = new Method();
         method.setVisibility(JavaVisibility.PUBLIC);
-        method.setReturnType(FullyQualifiedJavaType.getIntInstance());
+        method.setReturnType(new FullyQualifiedJavaType("long")); //$NON-NLS-1$
         method.setName(introspectedTable.getCountByExampleStatementId());
         method.addParameter(new Parameter(fqjt, "example")); //$NON-NLS-1$
         context.getCommentGenerator().addGeneralMethodComment(method,

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/CountByExampleElementGenerator.java
Patch:
@@ -39,7 +39,7 @@ public void addElements(XmlElement parentElement) {
         answer.addAttribute(new Attribute(
                 "id", introspectedTable.getCountByExampleStatementId())); //$NON-NLS-1$
         answer.addAttribute(new Attribute("parameterType", fqjt)); //$NON-NLS-1$
-        answer.addAttribute(new Attribute("resultType", "java.lang.Integer")); //$NON-NLS-1$ //$NON-NLS-2$
+        answer.addAttribute(new Attribute("resultType", "java.lang.Long")); //$NON-NLS-1$ //$NON-NLS-2$
 
         context.getCommentGenerator().addComment(answer);
 

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/miscellaneous/MiscellaneousTest.java
Patch:
@@ -29,11 +29,9 @@
 import mbg.test.common.MyTime;
 import mbg.test.mb3.common.TestEnum;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.EnumtestMapper;
-import mbg.test.mb3.generated.annotated.miscellaneous.mapper.GeneratedalwaystestMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.MyObjectMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.RegexrenameMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.Enumtest;
-import mbg.test.mb3.generated.annotated.miscellaneous.model.Generatedalwaystest;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObject;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectKey;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaElement.java
Patch:
@@ -61,7 +61,7 @@ public JavaElement(JavaElement original) {
         this();
         this.annotations.addAll(original.annotations);
         this.isFinal = original.isFinal;
-        this.isStatic = original.isFinal;
+        this.isStatic = original.isStatic;
         this.javaDocLines.addAll(original.javaDocLines);
         this.visibility = original.visibility;
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -67,4 +67,5 @@ public class PropertyRegistry {
     public static final String COMMENT_GENERATOR_SUPPRESS_DATE = "suppressDate"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
+    public static final String COMMENT_GENERATOR_DATE_FORMAT = "dateFormat"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -67,4 +67,5 @@ public class PropertyRegistry {
     public static final String COMMENT_GENERATOR_SUPPRESS_DATE = "suppressDate"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
+    public static final String COMMENT_GENERATOR_DATE_FORMAT = "dateFormat"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -31,7 +31,7 @@
  */
 public class InsertMethodGenerator extends AbstractJavaMapperMethodGenerator {
 
-    boolean isSimple;
+    private boolean isSimple;
 
     public InsertMethodGenerator(boolean isSimple) {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderUpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -29,6 +29,7 @@
 import org.mybatis.generator.api.dom.java.Method;
 import org.mybatis.generator.api.dom.java.Parameter;
 import org.mybatis.generator.api.dom.java.TopLevelClass;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 
 /**
  * 
@@ -92,7 +93,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
                 escapeStringForJava(introspectedTable.getAliasedFullyQualifiedTableNameAtRuntime())));
         method.addBodyLine(""); //$NON-NLS-1$
         
-        for (IntrospectedColumn introspectedColumn : introspectedTable.getAllColumns()) {
+        for (IntrospectedColumn introspectedColumn : ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getAllColumns())) {
             if (!introspectedColumn.getFullyQualifiedJavaType().isPrimitive()) {
                 method.addBodyLine(String.format("if (record.%s() != null) {", //$NON-NLS-1$
                     getGetterMethodName(introspectedColumn.getJavaProperty(),

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderUpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -29,6 +29,7 @@
 import org.mybatis.generator.api.dom.java.Method;
 import org.mybatis.generator.api.dom.java.Parameter;
 import org.mybatis.generator.api.dom.java.TopLevelClass;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 
 /**
  * 
@@ -78,7 +79,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         		escapeStringForJava(introspectedTable.getAliasedFullyQualifiedTableNameAtRuntime())));
         method.addBodyLine(""); //$NON-NLS-1$
         
-        for (IntrospectedColumn introspectedColumn : getColumns()) {
+        for (IntrospectedColumn introspectedColumn : ListUtilities.removeGeneratedAlwaysColumns(getColumns())) {
             StringBuilder sb = new StringBuilder();
             sb.append(getParameterClause(introspectedColumn));
             sb.insert(2, "record."); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderUpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -29,6 +29,7 @@
 import org.mybatis.generator.api.dom.java.Method;
 import org.mybatis.generator.api.dom.java.Parameter;
 import org.mybatis.generator.api.dom.java.TopLevelClass;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 
 /**
  * 
@@ -79,7 +80,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
         		escapeStringForJava(introspectedTable.getFullyQualifiedTableNameAtRuntime())));
         method.addBodyLine(""); //$NON-NLS-1$
         
-        for (IntrospectedColumn introspectedColumn : introspectedTable.getNonPrimaryKeyColumns()) {
+        for (IntrospectedColumn introspectedColumn : ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getNonPrimaryKeyColumns())) {
             if (!introspectedColumn.getFullyQualifiedJavaType().isPrimitive()) {
                 method.addBodyLine(String.format("if (record.%s() != null) {", //$NON-NLS-1$
                     getGetterMethodName(introspectedColumn.getJavaProperty(),

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByExampleSelectiveElementGenerator.java
Patch:
@@ -19,6 +19,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.TextElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;
 
 /**
@@ -54,8 +55,8 @@ public void addElements(XmlElement parentElement) {
         XmlElement dynamicElement = new XmlElement("set"); //$NON-NLS-1$
         answer.addElement(dynamicElement);
 
-        for (IntrospectedColumn introspectedColumn : introspectedTable
-                .getAllColumns()) {
+        for (IntrospectedColumn introspectedColumn : ListUtilities.removeGeneratedAlwaysColumns(introspectedTable
+                .getAllColumns())) {
             XmlElement isNotNullElement = new XmlElement("if"); //$NON-NLS-1$
             sb.setLength(0);
             sb.append(introspectedColumn.getJavaProperty("record.")); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByExampleWithBLOBsElementGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.TextElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;
 
 /**
@@ -56,11 +57,11 @@ public void addElements(XmlElement parentElement) {
         sb.setLength(0);
         sb.append("set "); //$NON-NLS-1$
 
-        Iterator<IntrospectedColumn> iter = introspectedTable.getAllColumns()
+        Iterator<IntrospectedColumn> iter = ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getAllColumns())
                 .iterator();
         while (iter.hasNext()) {
             IntrospectedColumn introspectedColumn = iter.next();
-
+            
             sb.append(MyBatis3FormattingUtilities
                     .getAliasedEscapedColumnName(introspectedColumn));
             sb.append(" = "); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByExampleWithoutBLOBsElementGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.TextElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;
 
 /**
@@ -57,8 +58,8 @@ public void addElements(XmlElement parentElement) {
         sb.setLength(0);
         sb.append("set "); //$NON-NLS-1$
 
-        Iterator<IntrospectedColumn> iter = introspectedTable
-                .getNonBLOBColumns().iterator();
+        Iterator<IntrospectedColumn> iter = ListUtilities.removeGeneratedAlwaysColumns(introspectedTable
+                .getNonBLOBColumns()).iterator();
         while (iter.hasNext()) {
             IntrospectedColumn introspectedColumn = iter.next();
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeySelectiveElementGenerator.java
Patch:
@@ -19,6 +19,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.TextElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;
 
 /**
@@ -63,8 +64,8 @@ public void addElements(XmlElement parentElement) {
         XmlElement dynamicElement = new XmlElement("set"); //$NON-NLS-1$
         answer.addElement(dynamicElement);
 
-        for (IntrospectedColumn introspectedColumn : introspectedTable
-                .getNonPrimaryKeyColumns()) {
+        for (IntrospectedColumn introspectedColumn : ListUtilities.removeGeneratedAlwaysColumns(introspectedTable
+                .getNonPrimaryKeyColumns())) {
             XmlElement isNotNullElement = new XmlElement("if"); //$NON-NLS-1$
             sb.setLength(0);
             sb.append(introspectedColumn.getJavaProperty());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeyWithBLOBsElementGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.TextElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;
 
 /**
@@ -66,8 +67,8 @@ public void addElements(XmlElement parentElement) {
         sb.setLength(0);
         sb.append("set "); //$NON-NLS-1$
 
-        Iterator<IntrospectedColumn> iter = introspectedTable
-                .getNonPrimaryKeyColumns().iterator();
+        Iterator<IntrospectedColumn> iter = ListUtilities.removeGeneratedAlwaysColumns(introspectedTable
+                .getNonPrimaryKeyColumns()).iterator();
         while (iter.hasNext()) {
             IntrospectedColumn introspectedColumn = iter.next();
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/UpdateByPrimaryKeyWithoutBLOBsElementGenerator.java
Patch:
@@ -22,6 +22,7 @@
 import org.mybatis.generator.api.dom.xml.Attribute;
 import org.mybatis.generator.api.dom.xml.TextElement;
 import org.mybatis.generator.api.dom.xml.XmlElement;
+import org.mybatis.generator.codegen.mybatis3.ListUtilities;
 import org.mybatis.generator.codegen.mybatis3.MyBatis3FormattingUtilities;
 
 /**
@@ -61,9 +62,9 @@ public void addElements(XmlElement parentElement) {
 
         Iterator<IntrospectedColumn> iter;
         if (isSimple) {
-            iter = introspectedTable.getNonPrimaryKeyColumns().iterator();
+            iter = ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getNonPrimaryKeyColumns()).iterator();
         } else {
-            iter = introspectedTable.getBaseColumns().iterator();
+            iter = ListUtilities.removeGeneratedAlwaysColumns(introspectedTable.getBaseColumns()).iterator();
         }
         while (iter.hasNext()) {
             IntrospectedColumn introspectedColumn = iter.next();

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/miscellaneous/MiscellaneousTest.java
Patch:
@@ -29,9 +29,11 @@
 import mbg.test.common.MyTime;
 import mbg.test.mb3.common.TestEnum;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.EnumtestMapper;
+import mbg.test.mb3.generated.annotated.miscellaneous.mapper.GeneratedalwaystestMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.MyObjectMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.mapper.RegexrenameMapper;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.Enumtest;
+import mbg.test.mb3.generated.annotated.miscellaneous.model.Generatedalwaystest;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObject;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectCriteria;
 import mbg.test.mb3.generated.annotated.miscellaneous.model.MyObjectKey;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/ListUtilities.java
Patch:
@@ -28,7 +28,7 @@
  * If a column is identity, it should not be referenced on an insert method.
  *  
  * TODO - Replace this with Lambdas when we get to Java 8
- * @author jbutler
+ * @author Jeff Butler
  *
  */
 public class ListUtilities {

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/miscellaneous/GeneratedAlwaysNoUpdatesTest.java
Patch:
@@ -80,10 +80,10 @@ public void testInsertSelective() {
     }
 
     @Test
-    public void testThatUpdatesDidNotGetGenerated() {
+    public void testThatUpdatesByPrimaryKeyDidNotGetGenerated() {
         Method[] methods = GeneratedalwaystestnoupdatesMapper.class.getMethods();
         for (Method method : methods) {
-            if (method.getName().startsWith("update")) {
+            if (method.getName().startsWith("updateByPrimaryKey")) {
                 fail("Method " + method.getName() + " should not be generated");
             }
         }

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/miscellaneous/GeneratedAlwaysNoUpdatesTest.java
Patch:
@@ -80,10 +80,10 @@ public void testInsertSelective() {
     }
 
     @Test
-    public void testThatUpdatesDidNotGetGenerated() {
+    public void testThatUpdatesByPrimaryKeyDidNotGetGenerated() {
         Method[] methods = GeneratedalwaystestnoupdatesMapper.class.getMethods();
         for (Method method : methods) {
-            if (method.getName().startsWith("update")) {
+            if (method.getName().startsWith("updateByPrimaryKey")) {
                 fail("Method " + method.getName() + " should not be generated");
             }
         }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/ant/GeneratorAntTask.java
Patch:
@@ -167,7 +167,6 @@ public void execute() throws BuildException {
             throw new BuildException(e.getMessage());
         } catch (InterruptedException e) {
             // ignore (will never happen with the DefaultShellCallback)
-            ;
         } catch (Exception e) {
             e.printStackTrace();
             throw new BuildException(e.getMessage());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/ShellRunner.java
Patch:
@@ -138,7 +138,6 @@ public static void main(String[] args) {
             return;
         } catch (InterruptedException e) {
             // ignore (will never happen with the DefaultShellCallback)
-            ;
         }
 
         for (String warning : warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -94,7 +94,7 @@ private Method getMethodShell(Set<FullyQualifiedJavaType> importedTypes) {
 
         FullyQualifiedJavaType returnType = FullyQualifiedJavaType
                 .getNewListInstance();
-        ;
+
         if (generateForJava5) {
             FullyQualifiedJavaType fqjt;
             if (introspectedTable.getRules().generateBaseRecordClass()) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/elements/UpdateByExampleParmsInnerclassGenerator.java
Patch:
@@ -80,6 +80,5 @@ public void addImplementationElements(TopLevelClass topLevelClass) {
     @Override
     public void addInterfaceElements(Interface interfaze) {
         // nothing to add to the interface
-        ;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/model/ExampleGenerator.java
Patch:
@@ -227,7 +227,7 @@ public List<CompilationUnit> getCompilationUnits() {
         topLevelClass
                 .addInnerClass(getGeneratedCriteriaInnerClass(topLevelClass));
 
-        topLevelClass.addInnerClass(getCriteriaInnerClass(topLevelClass));
+        topLevelClass.addInnerClass(getCriteriaInnerClass());
 
         List<CompilationUnit> answer = new ArrayList<CompilationUnit>();
         if (context.getPlugins().modelExampleClassGenerated(
@@ -237,7 +237,7 @@ public List<CompilationUnit> getCompilationUnits() {
         return answer;
     }
 
-    private InnerClass getCriteriaInnerClass(TopLevelClass topLevelClass) {
+    private InnerClass getCriteriaInnerClass() {
         Method method;
 
         InnerClass answer = new InnerClass(FullyQualifiedJavaType

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/sqlmap/elements/BaseColumnListElementGenerator.java
Patch:
@@ -61,7 +61,7 @@ public void addElements(XmlElement parentElement) {
         }
 
         if (sb.length() > 0) {
-            answer.addElement((new TextElement(sb.toString())));
+            answer.addElement(new TextElement(sb.toString()));
         }
 
         if (context.getPlugins().sqlMapBaseColumnListElementGenerated(

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/sqlmap/elements/BlobColumnListElementGenerator.java
Patch:
@@ -62,7 +62,7 @@ public void addElements(XmlElement parentElement) {
         }
 
         if (sb.length() > 0) {
-            answer.addElement((new TextElement(sb.toString())));
+            answer.addElement(new TextElement(sb.toString()));
         }
 
         if (context.getPlugins().sqlMapBlobColumnListElementGenerated(

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/sqlmap/elements/SelectByExampleWithoutBLOBsElementGenerator.java
Patch:
@@ -70,7 +70,7 @@ public void addElements(XmlElement parentElement) {
         sb.append("from "); //$NON-NLS-1$
         sb.append(introspectedTable
                 .getAliasedFullyQualifiedTableNameAtRuntime());
-        answer.addElement((new TextElement(sb.toString())));
+        answer.addElement(new TextElement(sb.toString()));
 
         XmlElement isParameterPresenteElement = new XmlElement(
                 "isParameterPresent"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/CountByExampleMethodGenerator.java
Patch:
@@ -62,6 +62,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByExampleMethodGenerator.java
Patch:
@@ -62,6 +62,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/DeleteByPrimaryKeyMethodGenerator.java
Patch:
@@ -97,6 +97,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertMethodGenerator.java
Patch:
@@ -72,6 +72,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/InsertSelectiveMethodGenerator.java
Patch:
@@ -64,6 +64,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectAllMethodGenerator.java
Patch:
@@ -67,6 +67,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -80,6 +80,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -83,6 +83,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/SelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -102,6 +102,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleSelectiveMethodGenerator.java
Patch:
@@ -70,6 +70,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithBLOBsMethodGenerator.java
Patch:
@@ -80,6 +80,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
     
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByExampleWithoutBLOBsMethodGenerator.java
Patch:
@@ -79,6 +79,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeySelectiveMethodGenerator.java
Patch:
@@ -72,6 +72,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithBLOBsMethodGenerator.java
Patch:
@@ -73,6 +73,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/UpdateByPrimaryKeyWithoutBLOBsMethodGenerator.java
Patch:
@@ -63,6 +63,5 @@ public void addInterfaceElements(Interface interfaze) {
     }
 
     public void addMapperAnnotations(Interface interfaze, Method method) {
-        return;
     }
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/BaseColumnListElementGenerator.java
Patch:
@@ -61,7 +61,7 @@ public void addElements(XmlElement parentElement) {
         }
 
         if (sb.length() > 0) {
-            answer.addElement((new TextElement(sb.toString())));
+            answer.addElement(new TextElement(sb.toString()));
         }
 
         if (context.getPlugins().sqlMapBaseColumnListElementGenerated(

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/BlobColumnListElementGenerator.java
Patch:
@@ -62,7 +62,7 @@ public void addElements(XmlElement parentElement) {
         }
 
         if (sb.length() > 0) {
-            answer.addElement((new TextElement(sb.toString())));
+            answer.addElement(new TextElement(sb.toString()));
         }
 
         if (context.getPlugins().sqlMapBlobColumnListElementGenerated(

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SelectByExampleWithoutBLOBsElementGenerator.java
Patch:
@@ -67,7 +67,7 @@ public void addElements(XmlElement parentElement) {
         sb.append("from "); //$NON-NLS-1$
         sb.append(introspectedTable
                 .getAliasedFullyQualifiedTableNameAtRuntime());
-        answer.addElement((new TextElement(sb.toString())));
+        answer.addElement(new TextElement(sb.toString()));
         answer.addElement(getExampleIncludeElement());
 
         ifElement = new XmlElement("if"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SimpleSelectAllElementGenerator.java
Patch:
@@ -67,7 +67,7 @@ public void addElements(XmlElement parentElement) {
         }
 
         if (sb.length() > 0) {
-            answer.addElement((new TextElement(sb.toString())));
+            answer.addElement(new TextElement(sb.toString()));
         }
 
         sb.setLength(0);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SimpleSelectByPrimaryKeyElementGenerator.java
Patch:
@@ -87,7 +87,7 @@ public void addElements(XmlElement parentElement) {
         }
 
         if (sb.length() > 0) {
-            answer.addElement((new TextElement(sb.toString())));
+            answer.addElement(new TextElement(sb.toString()));
         }
 
         sb.setLength(0);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultCommentGenerator.java
Patch:
@@ -73,7 +73,6 @@ public DefaultCommentGenerator() {
      */
     public void addJavaFileComment(CompilationUnit compilationUnit) {
         // add no file level comments by default
-        return;
     }
 
     /**
@@ -114,7 +113,6 @@ public void addComment(XmlElement xmlElement) {
      */
     public void addRootComment(XmlElement rootElement) {
         // add no document level comments by default
-        return;
     }
 
     /* (non-Javadoc)

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/logging/Log.java
Patch:
@@ -27,7 +27,7 @@ public interface Log {
 
     void error(String s);
 
-    public void debug(String s);
+    void debug(String s);
 
-    public void warn(String s);
+    void warn(String s);
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/EqualsHashCodePlugin.java
Patch:
@@ -250,7 +250,7 @@ protected void generateHashCode(TopLevelClass topLevelClass,
         method.addBodyLine("int result = 1;"); //$NON-NLS-1$
 
         if (useEqualsHashCodeFromRoot && topLevelClass.getSuperClass() != null) {
-            method.addBodyLine(("result = prime * result + super.hashCode();")); //$NON-NLS-1$
+            method.addBodyLine("result = prime * result + super.hashCode();"); //$NON-NLS-1$
         }
 
         StringBuilder sb = new StringBuilder();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedJavaFile.java
Patch:
@@ -84,7 +84,7 @@ public String getFormattedContent() {
      */
     @Override
     public String getFileName() {
-        return compilationUnit.getType().getShortName() + ".java"; //$NON-NLS-1$
+        return compilationUnit.getType().getShortNameWithoutTypeArguments() + ".java"; //$NON-NLS-1$
     }
 
     /* (non-Javadoc)

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/GeneratedJavaFile.java
Patch:
@@ -84,7 +84,7 @@ public String getFormattedContent() {
      */
     @Override
     public String getFileName() {
-        return compilationUnit.getType().getShortName() + ".java"; //$NON-NLS-1$
+        return compilationUnit.getType().getShortNameWithoutTypeArguments() + ".java"; //$NON-NLS-1$
     }
 
     /* (non-Javadoc)

File: core/mybatis-generator-maven-plugin/src/main/java/org/mybatis/generator/maven/MyBatisGeneratorMojo.java
Patch:
@@ -1,5 +1,5 @@
 /**
- *    Copyright 2006-2015 the original author or authors.
+ *    Copyright 2006-2016 the original author or authors.
  *
  *    Licensed under the Apache License, Version 2.0 (the "License");
  *    you may not use this file except in compliance with the License.
@@ -142,7 +142,6 @@ public void execute() throws MojoExecutionException {
         // use of a properties file in the build.  Typically, the properties file
         // is in the project's source tree, but the plugin classpath does not
         // include the project classpath.
-        @SuppressWarnings("unchecked")
         List<Resource> resources = project.getResources();
         List<String> resourceDirectories = new ArrayList<String>();
         for (Resource resource: resources) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaElement.java
Patch:
@@ -212,7 +212,7 @@ public static final void addTypeName(StringBuilder sb, CompilationUnit compilati
             if(!fqjt.isExplicitlyImported() 
                     || compilationUnit == null 
                     || fqjt.getPackageName().equals(compilationUnit.getType().getPackageName()) 
-                    || compilationUnit.getImportedTypes().contains(fqjt)) {
+                    || compilationUnit.getImportedTypes().contains(new FullyQualifiedJavaType(fqjt.getFullyQualifiedNameWithoutTypeParameters()))) {
                 sb.append(fqjt.getShortName());
             } else {
                 sb.append(fqjt.getFullyQualifiedName());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/JavaElement.java
Patch:
@@ -212,7 +212,7 @@ public static final void addTypeName(StringBuilder sb, CompilationUnit compilati
             if(!fqjt.isExplicitlyImported() 
                     || compilationUnit == null 
                     || fqjt.getPackageName().equals(compilationUnit.getType().getPackageName()) 
-                    || compilationUnit.getImportedTypes().contains(fqjt)) {
+                    || compilationUnit.getImportedTypes().contains(new FullyQualifiedJavaType(fqjt.getFullyQualifiedNameWithoutTypeParameters()))) {
                 sb.append(fqjt.getShortName());
             } else {
                 sb.append(fqjt.getFullyQualifiedName());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Field.java
Patch:
@@ -93,7 +93,7 @@ public void setInitializationString(String initializationString) {
         this.initializationString = initializationString;
     }
 
-    public String getFormattedContent(int indentLevel) {
+    public String getFormattedContent(int indentLevel, CompilationUnit compilationUnit) {
         StringBuilder sb = new StringBuilder();
 
         addFormattedJavadoc(sb, indentLevel);
@@ -118,7 +118,7 @@ public String getFormattedContent(int indentLevel) {
             sb.append("volatile "); //$NON-NLS-1$
         }
         
-        sb.append(type.getShortName());
+        addTypeName(sb, compilationUnit, type);
 
         sb.append(' ');
         sb.append(name);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/Interface.java
Patch:
@@ -165,7 +165,7 @@ public String getFormattedContent() {
                     comma = true;
                 }
 
-                sb.append(fqjt.getShortName());
+                addTypeName(sb, this, fqjt);
             }
         }
 
@@ -176,7 +176,7 @@ public String getFormattedContent() {
         while (mtdIter.hasNext()) {
             newLine(sb);
             Method method = mtdIter.next();
-            sb.append(method.getFormattedContent(indentLevel, true));
+            sb.append(method.getFormattedContent(indentLevel, true, this));
             if (mtdIter.hasNext()) {
                 newLine(sb);
             }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelClass.java
Patch:
@@ -90,7 +90,8 @@ public void addImportedType(FullyQualifiedJavaType importedType) {
         if (importedType != null
                 && importedType.isExplicitlyImported()
                 && !importedType.getPackageName().equals(
-                        getType().getPackageName())) {
+                        getType().getPackageName())
+                && !importedType.getShortName().equals(getType().getShortName())) {
             importedTypes.add(importedType);
         }
     }
@@ -135,7 +136,7 @@ public String getFormattedContent() {
             newLine(sb);
         }
 
-        sb.append(super.getFormattedContent(0));
+        sb.append(super.getFormattedContent(0, this));
 
         return sb.toString();
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/TopLevelEnumeration.java
Patch:
@@ -95,7 +95,7 @@ && getType().getPackageName().length() > 0) {
             newLine(sb);
         }
 
-        sb.append(super.getFormattedContent(0));
+        sb.append(super.getFormattedContent(0, this));
 
         return sb.toString();
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/InnerClass.java
Patch:
@@ -224,7 +224,7 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
 
         if (superClass != null) {
             sb.append(" extends "); //$NON-NLS-1$
-            sb.append(superClass.getShortName());
+            addTypeName(sb, compilationUnit, superClass);
         }
 
         if (superInterfaceTypes.size() > 0) {
@@ -238,7 +238,7 @@ public String getFormattedContent(int indentLevel, CompilationUnit compilationUn
                     comma = true;
                 }
 
-                sb.append(fqjt.getShortName());
+                addTypeName(sb, compilationUnit, fqjt);
             }
         }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultCommentGenerator.java
Patch:
@@ -205,7 +205,7 @@ public void addClassComment(InnerClass innerClass,
     @Override
     public void addModelClassComment(TopLevelClass topLevelClass,
             IntrospectedTable introspectedTable) {
-        if (suppressAllComments) {
+        if (suppressAllComments  || !addRemarkComments) {
             return;
         }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/BaseRecordGenerator.java
Patch:
@@ -67,6 +67,7 @@ public List<CompilationUnit> getCompilationUnits() {
             topLevelClass.setSuperClass(superClass);
             topLevelClass.addImportedType(superClass);
         }
+        commentGenerator.addTopLevelClassComment(topLevelClass, introspectedTable);
 
         List<IntrospectedColumn> introspectedColumns = getColumnsInThisClass();
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/RecordWithBLOBsGenerator.java
Patch:
@@ -66,6 +66,7 @@ public List<CompilationUnit> getCompilationUnits() {
         } else {
             topLevelClass.setSuperClass(introspectedTable.getPrimaryKeyType());
         }
+        commentGenerator.addTopLevelClassComment(topLevelClass, introspectedTable);
 
         if (introspectedTable.isConstructorBased()) {
             addParameterizedConstructor(topLevelClass);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -67,4 +67,5 @@ public class PropertyRegistry {
 
     public static final String COMMENT_GENERATOR_SUPPRESS_DATE = "suppressDate"; //$NON-NLS-1$
     public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
+    public static final String COMMENT_GENERATOR_ADD_REMARK_COMMENTS = "addRemarkComments"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/dom/java/FullyQualifiedJavaType.java
Patch:
@@ -489,7 +489,7 @@ private void parse(String fullTypeSpecification) {
             // enough for most cases.  It will not detect an improperly specified
             // array type like byte], but it will detect byte[] and byte[   ]
             // which are both valid
-            isArray = fullTypeSpecification.endsWith("]");
+            isArray = fullTypeSpecification.endsWith("]"); //$NON-NLS-1$
         }
     }
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -132,7 +132,8 @@ public void addMapperAnnotations(Interface interfaze, Method method) {
     private void addResultMapAnnotation(Interface interfaze, Method method) {
         interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.ResultMap")); //$NON-NLS-1$
         
-        String annotation = String.format("@ResultMap(\"%s\")", //$NON-NLS-1$
+        String annotation = String.format("@ResultMap(\"%s.%s\")", //$NON-NLS-1$
+        		introspectedTable.getMyBatis3SqlMapNamespace(),
                 introspectedTable.getRules().generateResultMapWithBLOBs() ?
                         introspectedTable.getResultMapWithBLOBsId() : introspectedTable.getBaseResultMapId());
         method.addAnnotation(annotation);

File: core/mybatis-generator-maven-plugin/src/main/java/org/mybatis/generator/maven/SqlScriptRunner.java
Patch:
@@ -157,6 +157,7 @@ private String readStatement(BufferedReader br) throws IOException {
             }
 
             if (line.endsWith(";")) { //$NON-NLS-1$
+                sb.append(' ');
                 sb.append(line.substring(0, line.length() - 1));
                 break;
             } else {

File: core/mybatis-generator-maven-plugin/src/main/java/org/mybatis/generator/maven/SqlScriptRunner.java
Patch:
@@ -157,6 +157,7 @@ private String readStatement(BufferedReader br) throws IOException {
             }
 
             if (line.endsWith(";")) { //$NON-NLS-1$
+                sb.append(' ');
                 sb.append(line.substring(0, line.length() - 1));
                 break;
             } else {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/Configuration.java
Patch:
@@ -104,7 +104,7 @@ public Context getContext(String id) {
 
     /**
      * Builds an XML representation of this configuration. This can be used to
-     * persist a programtically generated configuration.
+     * persist a programmatically generated configuration.
      * 
      * @return the XML representation of this configuration
      */

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/IntrospectedColumn.java
Patch:
@@ -156,8 +156,9 @@ public boolean isBLOBColumn() {
         String typeName = getJdbcTypeName();
 
         return "BINARY".equals(typeName) || "BLOB".equals(typeName) //$NON-NLS-1$ //$NON-NLS-2$
-                || "CLOB".equals(typeName) || "LONGVARBINARY".equals(typeName) //$NON-NLS-1$ //$NON-NLS-2$
-                || "LONGVARCHAR".equals(typeName) || "VARBINARY".equals(typeName); //$NON-NLS-1$ //$NON-NLS-2$
+                || "CLOB".equals(typeName) || "LONGNVARCHAR".equals(typeName) //$NON-NLS-1$ //$NON-NLS-2$ 
+                || "LONGVARBINARY".equals(typeName) || "LONGVARCHAR".equals(typeName) //$NON-NLS-1$ //$NON-NLS-2$
+                || "NCLOB".equals(typeName) || "VARBINARY".equals(typeName); //$NON-NLS-1$ //$NON-NLS-2$ 
     }
 
     public boolean isStringColumn() {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/BaseRecordGenerator.java
Patch:
@@ -156,6 +156,7 @@ private void addParameterizedConstructor(TopLevelClass topLevelClass) {
         for (IntrospectedColumn introspectedColumn : constructorColumns) {
             method.addParameter(new Parameter(introspectedColumn.getFullyQualifiedJavaType(),
                     introspectedColumn.getJavaProperty()));
+            topLevelClass.addImportedType(introspectedColumn.getFullyQualifiedJavaType());
         }
         
         StringBuilder sb = new StringBuilder();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/RecordWithBLOBsGenerator.java
Patch:
@@ -123,6 +123,7 @@ private void addParameterizedConstructor(TopLevelClass topLevelClass) {
                 .getAllColumns()) {
             method.addParameter(new Parameter(introspectedColumn.getFullyQualifiedJavaType(),
                     introspectedColumn.getJavaProperty()));
+            topLevelClass.addImportedType(introspectedColumn.getFullyQualifiedJavaType());
         }
         
         boolean comma = false;

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/XMLMapperGenerator.java
Patch:
@@ -167,14 +167,14 @@ protected void addDeleteByExampleElement(XmlElement parentElement) {
 
     protected void addDeleteByPrimaryKeyElement(XmlElement parentElement) {
         if (introspectedTable.getRules().generateDeleteByPrimaryKey()) {
-            AbstractXmlElementGenerator elementGenerator = new DeleteByPrimaryKeyElementGenerator();
+            AbstractXmlElementGenerator elementGenerator = new DeleteByPrimaryKeyElementGenerator(false);
             initializeAndExecuteGenerator(elementGenerator, parentElement);
         }
     }
 
     protected void addInsertElement(XmlElement parentElement) {
         if (introspectedTable.getRules().generateInsert()) {
-            AbstractXmlElementGenerator elementGenerator = new InsertElementGenerator();
+            AbstractXmlElementGenerator elementGenerator = new InsertElementGenerator(false);
             initializeAndExecuteGenerator(elementGenerator, parentElement);
         }
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -47,6 +47,7 @@ public class PropertyRegistry {
     public static final String TABLE_RUNTIME_SCHEMA = "runtimeSchema"; //$NON-NLS-1$
     public static final String TABLE_RUNTIME_TABLE_NAME = "runtimeTableName"; //$NON-NLS-1$
     public static final String TABLE_MODEL_ONLY = "modelOnly"; //$NON-NLS-1$
+    public static final String TABLE_SELECT_ALL_ORDER_BY_CLAUSE = "selectAllOrderByClause"; //$NON-NLS-1$
 
     public static final String CONTEXT_BEGINNING_DELIMITER = "beginningDelimiter"; //$NON-NLS-1$
     public static final String CONTEXT_ENDING_DELIMITER = "endingDelimiter"; //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/VirtualPrimaryKeyPlugin.java
Patch:
@@ -44,10 +44,10 @@ public boolean validate(List<String> warnings) {
     @Override
     public void initialized(IntrospectedTable introspectedTable) {
         String virtualKey = introspectedTable.getTableConfiguration()
-                .getProperty("virtualKeyColumns");
+                .getProperty("virtualKeyColumns"); //$NON-NLS-1$
 
         if (virtualKey != null) {
-            StringTokenizer st = new StringTokenizer(virtualKey, ", ", false);
+            StringTokenizer st = new StringTokenizer(virtualKey, ", ", false); //$NON-NLS-1$
             while (st.hasMoreTokens()) {
                 String column = st.nextToken();
                 introspectedTable.addPrimaryKeyColumn(column);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/XmlFileMergerJaxp.java
Patch:
@@ -18,8 +18,9 @@
 import static org.mybatis.generator.internal.util.messages.Messages.getString;
 
 import java.io.File;
-import java.io.FileReader;
+import java.io.FileInputStream;
 import java.io.IOException;
+import java.io.InputStreamReader;
 import java.io.StringReader;
 import java.util.ArrayList;
 import java.util.List;
@@ -76,7 +77,7 @@ public static String getMergedSource(GeneratedXmlFile generatedXmlFile,
 
         try {
             return getMergedSource(new InputSource(new StringReader(generatedXmlFile.getFormattedContent())),
-                new InputSource(new FileReader(existingFile)),
+                new InputSource(new InputStreamReader(new FileInputStream(existingFile), "UTF-8")),
                 existingFile.getName());
         } catch (IOException e) {
             throw new ShellException(getString("Warning.13", //$NON-NLS-1$

File: core/mybatis-generator-systests-ibatis2-java2/src/test/java/mbg/test/ib2j2/hierarchical/AbstractHierarchicalJava2Test.java
Patch:
@@ -5,8 +5,6 @@
 import mbg.test.ib2j2.generated.hierarchical.dao.AwfulTableDAOImpl;
 import mbg.test.ib2j2.generated.hierarchical.dao.FieldsblobsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.FieldsblobsDAOImpl;
-import mbg.test.ib2j2.generated.hierarchical.dao.FieldsonlyDAO;
-import mbg.test.ib2j2.generated.hierarchical.dao.FieldsonlyDAOImpl;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkblobsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkblobsDAOImpl;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkfieldsDAO;
@@ -15,6 +13,8 @@
 import mbg.test.ib2j2.generated.hierarchical.dao.PkfieldsblobsDAOImpl;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkonlyDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkonlyDAOImpl;
+import mbg.test.ib2j2.generated.hierarchical.dao.subpackage.FieldsonlyDAO;
+import mbg.test.ib2j2.generated.hierarchical.dao.subpackage.FieldsonlyDAOImpl;
 
 public abstract class AbstractHierarchicalJava2Test extends AbstractTest {
 

File: core/mybatis-generator-systests-ibatis2-java2/src/test/java/mbg/test/ib2j2/hierarchical/HierarchicalJava2Test.java
Patch:
@@ -25,19 +25,17 @@
 import mbg.test.common.util.TestUtilities;
 import mbg.test.ib2j2.generated.hierarchical.dao.AwfulTableDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.FieldsblobsDAO;
-import mbg.test.ib2j2.generated.hierarchical.dao.FieldsonlyDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkblobsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkfieldsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkfieldsblobsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkonlyDAO;
+import mbg.test.ib2j2.generated.hierarchical.dao.subpackage.FieldsonlyDAO;
 import mbg.test.ib2j2.generated.hierarchical.model.AwfulTable;
 import mbg.test.ib2j2.generated.hierarchical.model.AwfulTableExample;
 import mbg.test.ib2j2.generated.hierarchical.model.AwfulTableKey;
 import mbg.test.ib2j2.generated.hierarchical.model.Fieldsblobs;
 import mbg.test.ib2j2.generated.hierarchical.model.FieldsblobsExample;
 import mbg.test.ib2j2.generated.hierarchical.model.FieldsblobsWithBLOBs;
-import mbg.test.ib2j2.generated.hierarchical.model.Fieldsonly;
-import mbg.test.ib2j2.generated.hierarchical.model.FieldsonlyExample;
 import mbg.test.ib2j2.generated.hierarchical.model.PkblobsExample;
 import mbg.test.ib2j2.generated.hierarchical.model.PkblobsKey;
 import mbg.test.ib2j2.generated.hierarchical.model.PkblobsWithBLOBs;
@@ -50,6 +48,8 @@
 import mbg.test.ib2j2.generated.hierarchical.model.PkfieldsblobsWithBLOBs;
 import mbg.test.ib2j2.generated.hierarchical.model.PkonlyExample;
 import mbg.test.ib2j2.generated.hierarchical.model.PkonlyKey;
+import mbg.test.ib2j2.generated.hierarchical.model.subpackage.Fieldsonly;
+import mbg.test.ib2j2.generated.hierarchical.model.subpackage.FieldsonlyExample;
 
 /**
  * @author Jeff Butler

File: core/mybatis-generator-systests-ibatis2-java2/src/test/java/mbg/test/ib2j2/hierarchical/UpdateByExampleTest.java
Patch:
@@ -22,18 +22,16 @@
 import mbg.test.common.util.TestUtilities;
 import mbg.test.ib2j2.generated.hierarchical.dao.AwfulTableDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.FieldsblobsDAO;
-import mbg.test.ib2j2.generated.hierarchical.dao.FieldsonlyDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkblobsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkfieldsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkfieldsblobsDAO;
 import mbg.test.ib2j2.generated.hierarchical.dao.PkonlyDAO;
+import mbg.test.ib2j2.generated.hierarchical.dao.subpackage.FieldsonlyDAO;
 import mbg.test.ib2j2.generated.hierarchical.model.AwfulTable;
 import mbg.test.ib2j2.generated.hierarchical.model.AwfulTableExample;
 import mbg.test.ib2j2.generated.hierarchical.model.Fieldsblobs;
 import mbg.test.ib2j2.generated.hierarchical.model.FieldsblobsExample;
 import mbg.test.ib2j2.generated.hierarchical.model.FieldsblobsWithBLOBs;
-import mbg.test.ib2j2.generated.hierarchical.model.Fieldsonly;
-import mbg.test.ib2j2.generated.hierarchical.model.FieldsonlyExample;
 import mbg.test.ib2j2.generated.hierarchical.model.PkblobsExample;
 import mbg.test.ib2j2.generated.hierarchical.model.PkblobsKey;
 import mbg.test.ib2j2.generated.hierarchical.model.PkblobsWithBLOBs;
@@ -44,6 +42,8 @@
 import mbg.test.ib2j2.generated.hierarchical.model.PkfieldsblobsWithBLOBs;
 import mbg.test.ib2j2.generated.hierarchical.model.PkonlyExample;
 import mbg.test.ib2j2.generated.hierarchical.model.PkonlyKey;
+import mbg.test.ib2j2.generated.hierarchical.model.subpackage.Fieldsonly;
+import mbg.test.ib2j2.generated.hierarchical.model.subpackage.FieldsonlyExample;
 
 /**
  * 

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/hierarchical/AbstractHierarchicalJava5Test.java
Patch:
@@ -4,11 +4,11 @@
 import mbg.test.ib2j5.AbstractTest;
 import mbg.test.ib2j5.generated.hierarchical.dao.AwfulTableDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.FieldsblobsDAO;
-import mbg.test.ib2j5.generated.hierarchical.dao.FieldsonlyDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkblobsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkfieldsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkfieldsblobsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkonlyDAO;
+import mbg.test.ib2j5.generated.hierarchical.dao.subpackage.FieldsonlyDAO;
 
 import org.springframework.beans.factory.BeanFactory;
 import org.springframework.beans.factory.xml.XmlBeanFactory;

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/hierarchical/HierarchicalJava5Test.java
Patch:
@@ -33,19 +33,17 @@
 
 import mbg.test.ib2j5.generated.hierarchical.dao.AwfulTableDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.FieldsblobsDAO;
-import mbg.test.ib2j5.generated.hierarchical.dao.FieldsonlyDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkblobsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkfieldsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkfieldsblobsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkonlyDAO;
+import mbg.test.ib2j5.generated.hierarchical.dao.subpackage.FieldsonlyDAO;
 import mbg.test.ib2j5.generated.hierarchical.model.AwfulTable;
 import mbg.test.ib2j5.generated.hierarchical.model.AwfulTableExample;
 import mbg.test.ib2j5.generated.hierarchical.model.AwfulTableKey;
 import mbg.test.ib2j5.generated.hierarchical.model.Fieldsblobs;
 import mbg.test.ib2j5.generated.hierarchical.model.FieldsblobsExample;
 import mbg.test.ib2j5.generated.hierarchical.model.FieldsblobsWithBLOBs;
-import mbg.test.ib2j5.generated.hierarchical.model.Fieldsonly;
-import mbg.test.ib2j5.generated.hierarchical.model.FieldsonlyExample;
 import mbg.test.ib2j5.generated.hierarchical.model.PkblobsExample;
 import mbg.test.ib2j5.generated.hierarchical.model.PkblobsKey;
 import mbg.test.ib2j5.generated.hierarchical.model.PkblobsWithBLOBs;
@@ -58,6 +56,8 @@
 import mbg.test.ib2j5.generated.hierarchical.model.PkfieldsblobsWithBLOBs;
 import mbg.test.ib2j5.generated.hierarchical.model.PkonlyExample;
 import mbg.test.ib2j5.generated.hierarchical.model.PkonlyKey;
+import mbg.test.ib2j5.generated.hierarchical.model.subpackage.Fieldsonly;
+import mbg.test.ib2j5.generated.hierarchical.model.subpackage.FieldsonlyExample;
 
 import org.junit.Test;
 

File: core/mybatis-generator-systests-ibatis2-java5/src/test/java/mbg/test/ib2j5/hierarchical/UpdateByExampleTest.java
Patch:
@@ -27,18 +27,16 @@
 
 import mbg.test.ib2j5.generated.hierarchical.dao.AwfulTableDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.FieldsblobsDAO;
-import mbg.test.ib2j5.generated.hierarchical.dao.FieldsonlyDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkblobsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkfieldsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkfieldsblobsDAO;
 import mbg.test.ib2j5.generated.hierarchical.dao.PkonlyDAO;
+import mbg.test.ib2j5.generated.hierarchical.dao.subpackage.FieldsonlyDAO;
 import mbg.test.ib2j5.generated.hierarchical.model.AwfulTable;
 import mbg.test.ib2j5.generated.hierarchical.model.AwfulTableExample;
 import mbg.test.ib2j5.generated.hierarchical.model.Fieldsblobs;
 import mbg.test.ib2j5.generated.hierarchical.model.FieldsblobsExample;
 import mbg.test.ib2j5.generated.hierarchical.model.FieldsblobsWithBLOBs;
-import mbg.test.ib2j5.generated.hierarchical.model.Fieldsonly;
-import mbg.test.ib2j5.generated.hierarchical.model.FieldsonlyExample;
 import mbg.test.ib2j5.generated.hierarchical.model.PkblobsExample;
 import mbg.test.ib2j5.generated.hierarchical.model.PkblobsKey;
 import mbg.test.ib2j5.generated.hierarchical.model.PkblobsWithBLOBs;
@@ -49,6 +47,8 @@
 import mbg.test.ib2j5.generated.hierarchical.model.PkfieldsblobsWithBLOBs;
 import mbg.test.ib2j5.generated.hierarchical.model.PkonlyExample;
 import mbg.test.ib2j5.generated.hierarchical.model.PkonlyKey;
+import mbg.test.ib2j5.generated.hierarchical.model.subpackage.Fieldsonly;
+import mbg.test.ib2j5.generated.hierarchical.model.subpackage.FieldsonlyExample;
 
 import org.junit.Test;
 

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/hierarchical/HierarchicalJava5Test.java
Patch:
@@ -32,19 +32,17 @@
 
 import mbg.test.mb3.generated.hierarchical.mapper.AwfulTableMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.FieldsblobsMapper;
-import mbg.test.mb3.generated.hierarchical.mapper.FieldsonlyMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkblobsMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkfieldsMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkfieldsblobsMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkonlyMapper;
+import mbg.test.mb3.generated.hierarchical.mapper.subpackage.FieldsonlyMapper;
 import mbg.test.mb3.generated.hierarchical.model.AwfulTable;
 import mbg.test.mb3.generated.hierarchical.model.AwfulTableExample;
 import mbg.test.mb3.generated.hierarchical.model.AwfulTableKey;
 import mbg.test.mb3.generated.hierarchical.model.Fieldsblobs;
 import mbg.test.mb3.generated.hierarchical.model.FieldsblobsExample;
 import mbg.test.mb3.generated.hierarchical.model.FieldsblobsWithBLOBs;
-import mbg.test.mb3.generated.hierarchical.model.Fieldsonly;
-import mbg.test.mb3.generated.hierarchical.model.FieldsonlyExample;
 import mbg.test.mb3.generated.hierarchical.model.PkblobsExample;
 import mbg.test.mb3.generated.hierarchical.model.PkblobsKey;
 import mbg.test.mb3.generated.hierarchical.model.PkblobsWithBLOBs;
@@ -57,6 +55,8 @@
 import mbg.test.mb3.generated.hierarchical.model.PkfieldsblobsWithBLOBs;
 import mbg.test.mb3.generated.hierarchical.model.PkonlyExample;
 import mbg.test.mb3.generated.hierarchical.model.PkonlyKey;
+import mbg.test.mb3.generated.hierarchical.model.subpackage.Fieldsonly;
+import mbg.test.mb3.generated.hierarchical.model.subpackage.FieldsonlyExample;
 
 import org.apache.ibatis.session.SqlSession;
 import org.junit.Test;

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/hierarchical/UpdateByExampleTest.java
Patch:
@@ -26,18 +26,16 @@
 
 import mbg.test.mb3.generated.hierarchical.mapper.AwfulTableMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.FieldsblobsMapper;
-import mbg.test.mb3.generated.hierarchical.mapper.FieldsonlyMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkblobsMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkfieldsMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkfieldsblobsMapper;
 import mbg.test.mb3.generated.hierarchical.mapper.PkonlyMapper;
+import mbg.test.mb3.generated.hierarchical.mapper.subpackage.FieldsonlyMapper;
 import mbg.test.mb3.generated.hierarchical.model.AwfulTable;
 import mbg.test.mb3.generated.hierarchical.model.AwfulTableExample;
 import mbg.test.mb3.generated.hierarchical.model.Fieldsblobs;
 import mbg.test.mb3.generated.hierarchical.model.FieldsblobsExample;
 import mbg.test.mb3.generated.hierarchical.model.FieldsblobsWithBLOBs;
-import mbg.test.mb3.generated.hierarchical.model.Fieldsonly;
-import mbg.test.mb3.generated.hierarchical.model.FieldsonlyExample;
 import mbg.test.mb3.generated.hierarchical.model.PkblobsExample;
 import mbg.test.mb3.generated.hierarchical.model.PkblobsKey;
 import mbg.test.mb3.generated.hierarchical.model.PkblobsWithBLOBs;
@@ -48,6 +46,8 @@
 import mbg.test.mb3.generated.hierarchical.model.PkfieldsblobsWithBLOBs;
 import mbg.test.mb3.generated.hierarchical.model.PkonlyExample;
 import mbg.test.mb3.generated.hierarchical.model.PkonlyKey;
+import mbg.test.mb3.generated.hierarchical.model.subpackage.Fieldsonly;
+import mbg.test.mb3.generated.hierarchical.model.subpackage.FieldsonlyExample;
 
 import org.apache.ibatis.session.SqlSession;
 import org.junit.Test;

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/flat/FlatJava5Test.java
Patch:
@@ -1076,7 +1076,7 @@ record = new Pkfields();
 
             example.setOrderByClause("ID1, ID2");
             RowBounds rb = new RowBounds(2, 3);
-            List<Pkfields> answer = mapper.selectByExample(example, rb);
+            List<Pkfields> answer = mapper.selectByExampleWithRowbounds(example, rb);
             assertEquals(3, answer.size());
             assertEquals("Pebbles", answer.get(0).getFirstname());
             assertEquals("Barney", answer.get(1).getFirstname());

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/model/ExampleGenerator.java
Patch:
@@ -1066,7 +1066,7 @@ private Method getSingleValueMethod(IntrospectedColumn introspectedColumn,
         sb.append(operator);
         sb.append("\", "); //$NON-NLS-1$
 
-        if (introspectedColumn.getFullyQualifiedJavaType().isPrimitive()) {
+        if (introspectedColumn.getFullyQualifiedJavaType().isPrimitive() && !introspectedTable.isJava5Targeted()) {
             sb.append("new "); //$NON-NLS-1$
             sb.append(introspectedColumn.getFullyQualifiedJavaType()
                     .getPrimitiveTypeWrapper().getShortName());
@@ -1135,7 +1135,7 @@ private Method getSetBetweenOrNotBetweenMethod(
             sb.append(" not between"); //$NON-NLS-1$
         }
         sb.append("\", "); //$NON-NLS-1$
-        if (introspectedColumn.getFullyQualifiedJavaType().isPrimitive()) {
+        if (introspectedColumn.getFullyQualifiedJavaType().isPrimitive() && !introspectedTable.isJava5Targeted()) {
             sb.append("new "); //$NON-NLS-1$
             sb.append(introspectedColumn.getFullyQualifiedJavaType()
                     .getPrimitiveTypeWrapper().getShortName());

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/flat/FlatJava5Test.java
Patch:
@@ -480,6 +480,7 @@ public void testPKFieldsInsert() {
             record.setLastname("Butler");
             record.setTimefield(new Date());
             record.setTimestampfield(new Date());
+            record.setStringboolean(true);
 
             mapper.insert(record);
 
@@ -504,6 +505,7 @@ public void testPKFieldsInsert() {
                     .getTimefield()));
             assertEquals(record.getTimestampfield(), returnedRecord
                     .getTimestampfield());
+            assertEquals(record.isStringboolean(), returnedRecord.isStringboolean());
         } finally {
             sqlSession.close();
         }

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/flat/FlatJava5Test.java
Patch:
@@ -482,6 +482,7 @@ public void testPKFieldsInsert() {
             record.setLastname("Butler");
             record.setTimefield(new Date());
             record.setTimestampfield(new Date());
+            record.setStringboolean(true);
 
             mapper.insert(record);
 
@@ -506,6 +507,7 @@ public void testPKFieldsInsert() {
                     .getTimefield()));
             assertEquals(record.getTimestampfield(), returnedRecord
                     .getTimestampfield());
+            assertEquals(record.isStringboolean(), returnedRecord.isStringboolean());
         } finally {
             sqlSession.close();
         }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -51,6 +51,7 @@ public class PropertyRegistry {
     public static final String CONTEXT_BEGINNING_DELIMITER = "beginningDelimiter"; //$NON-NLS-1$
     public static final String CONTEXT_ENDING_DELIMITER = "endingDelimiter"; //$NON-NLS-1$
     public static final String CONTEXT_AUTO_DELIMIT_KEYWORDS = "autoDelimitKeywords"; //$NON-NLS-1$
+    public static final String CONTEXT_JAVA_FILE_ENCODING = "javaFileEncoding"; //$NON-NLS-1$
 
     public static final String DAO_EXAMPLE_METHOD_VISIBILITY = "exampleMethodVisibility"; //$NON-NLS-1$
     public static final String DAO_METHOD_NAME_CALCULATOR = "methodNameCalculator"; //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/DefaultShellCallback.java
Patch:
@@ -84,7 +84,7 @@ public boolean isOverwriteEnabled() {
     }
 
     public String mergeJavaFile(String newFileSource,
-            String existingFileFullPath, String[] javadocTags)
+            String existingFileFullPath, String[] javadocTags, String fileEncoding)
             throws ShellException {
         throw new UnsupportedOperationException();
     }

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/annotated/conditional/ConditionalJava5Test.java
Patch:
@@ -1132,7 +1132,6 @@ record = new Pkfields();
 
     @Test
     public void testPKFieldsSelectByExampleDateTimeFields() {
-        // TODO - move this method to the other test classes too
         SqlSession sqlSession = sqlSessionFactory.openSession();
         Calendar calendar = Calendar.getInstance();
         calendar.set(Calendar.YEAR, 2009);

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/conditional/ConditionalJava5Test.java
Patch:
@@ -1133,7 +1133,6 @@ record = new Pkfields();
 
     @Test
     public void testPKFieldsSelectByExampleDateTimeFields() {
-        // TODO - move this method to the other test classes too
         SqlSession sqlSession = sqlSessionFactory.openSession();
         Calendar calendar = Calendar.getInstance();
         calendar.set(Calendar.YEAR, 2009);

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/miscellaneous/MiscellaneousTest.java
Patch:
@@ -938,13 +938,13 @@ public void testAnotherAwfulTableInsert() {
             record.setSelect("select");
             record.setInsert("insert");
             
-            sqlSession.insert("MBGTEST_ANOTHERAWFULTABLE.insert", record);
+            sqlSession.insert("mbg.test.mb3.generated.miscellaneous.xml.AnotherawfultableMapper.insert", record);
             
             Anotherawfultable key = new Anotherawfultable();
             key.setId(5);
             
             Anotherawfultable returnedRecord = (Anotherawfultable)
-                sqlSession.selectOne("MBGTEST_ANOTHERAWFULTABLE.selectByPrimaryKey",
+                sqlSession.selectOne("mbg.test.mb3.generated.miscellaneous.xml.AnotherawfultableMapper.selectByPrimaryKey",
                         key);
             
             assertEquals(record.getId(), returnedRecord.getId());

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/mixed/conditional/ConditionalJava5Test.java
Patch:
@@ -1133,7 +1133,6 @@ record = new Pkfields();
 
     @Test
     public void testPKFieldsSelectByExampleDateTimeFields() {
-        // TODO - move this method to the other test classes too
         SqlSession sqlSession = sqlSessionFactory.openSession();
         Calendar calendar = Calendar.getInstance();
         calendar.set(Calendar.YEAR, 2009);

File: eclipse/org.mybatis.generator.eclipse.core/src/org/mybatis/generator/eclipse/core/callback/EclipseShellCallback.java
Patch:
@@ -269,9 +269,9 @@ public boolean isOverwriteEnabled() {
     }
 
     public String mergeJavaFile(String newFileSource,
-            String existingFileFullPath, String[] javadocTags)
+            String existingFileFullPath, String[] javadocTags, String fileEncoding)
             throws ShellException {
-        JavaFileMerger merger = new JavaFileMerger(newFileSource, existingFileFullPath, javadocTags);
+        JavaFileMerger merger = new JavaFileMerger(newFileSource, existingFileFullPath, javadocTags, fileEncoding);
         return merger.getMergedSource();
     }
 }

File: eclipse/org.mybatis.generator.eclipse.ui/src/org/mybatis/generator/eclipse/ui/buildpath/MyBatisContainerPage.java
Patch:
@@ -37,5 +37,4 @@ public void setSelection(IClasspathEntry containerEntry) {
         // TODO Auto-generated method stub
 
     }
-
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -46,6 +46,7 @@ public class PropertyRegistry {
     public static final String TABLE_RUNTIME_CATALOG = "runtimeCatalog"; //$NON-NLS-1$
     public static final String TABLE_RUNTIME_SCHEMA = "runtimeSchema"; //$NON-NLS-1$
     public static final String TABLE_RUNTIME_TABLE_NAME = "runtimeTableName"; //$NON-NLS-1$
+    public static final String TABLE_MODEL_ONLY = "modelOnly"; //$NON-NLS-1$
 
     public static final String CONTEXT_BEGINNING_DELIMITER = "beginningDelimiter"; //$NON-NLS-1$
     public static final String CONTEXT_ENDING_DELIMITER = "endingDelimiter"; //$NON-NLS-1$

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/MyBatisGeneratorTest.java
Patch:
@@ -26,7 +26,7 @@ public void testGenerateMyBatis3() throws Exception {
             MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, shellCallback, warnings);
             myBatisGenerator.generate(null);
         } catch (InvalidConfigurationException e) {
-            assertEquals(3, e.getErrors().size());
+            assertEquals(2, e.getErrors().size());
             throw e;
         }
     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/plugins/CaseInsensitiveLikePlugin.java
Patch:
@@ -60,7 +60,7 @@ public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
         InnerClass criteria = null;
         // first, find the Criteria inner class
         for (InnerClass innerClass : topLevelClass.getInnerClasses()) {
-            if ("Criteria".equals(innerClass.getType().getShortName())) { //$NON-NLS-1$
+            if ("GeneratedCriteria".equals(innerClass.getType().getShortName())) { //$NON-NLS-1$
                 criteria = innerClass;
                 break;
             }
@@ -99,7 +99,7 @@ public boolean modelExampleClassGenerated(TopLevelClass topLevelClass,
             sb.append(introspectedColumn.getJavaProperty());
             sb.append("\");"); //$NON-NLS-1$
             method.addBodyLine(sb.toString());
-            method.addBodyLine("return this;"); //$NON-NLS-1$
+            method.addBodyLine("return (Criteria) this;"); //$NON-NLS-1$
 
             criteria.addMethod(method);
         }

File: core/mybatis-generator-maven-plugin/src/main/java/org/mybatis/generator/maven/MyBatisGeneratorMojo.java
Patch:
@@ -222,9 +222,6 @@ public void execute() throws MojoExecutionException {
         } catch (InterruptedException e) {
             // ignore (will never happen with the DefaultShellCallback)
             ;
-        } catch (Exception e) {
-            e.printStackTrace();
-            throw new MojoExecutionException(e.getMessage());
         }
 
         for (String error : warnings) {

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/types/JavaTypeResolverDefaultImpl.java
Patch:
@@ -48,9 +48,9 @@ public class JavaTypeResolverDefaultImpl implements JavaTypeResolver {
     
     // these are added manually until we move to JDK 6
     // TODO - remove after JDK 6 and use the java.sql.Types constants instead
-    private static final int NVARCHAR = -9;
-    private static final int NCHAR = -15;
-    private static final int NCLOB = 2011;
+    static final int NVARCHAR = -9;
+    static final int NCHAR = -15;
+    static final int NCLOB = 2011;
 
     public JavaTypeResolverDefaultImpl() {
         super();

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/api/MyBatisGenerator.java
Patch:
@@ -207,7 +207,7 @@ public void generate(ProgressCallback callback, Set<String> contextIds,
         // setup custom classloader if required
         if (configuration.getClassPathEntries().size() > 0) {
             ClassLoader classLoader = getCustomClassloader(configuration.getClassPathEntries());
-            ObjectFactory.setExternalClassLoader(classLoader);
+            ObjectFactory.addExternalClassLoader(classLoader);
         }
 
         // now run the introspections...

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/IbatorConfigurationParser.java
Patch:
@@ -41,6 +41,7 @@
 import org.mybatis.generator.config.SqlMapGeneratorConfiguration;
 import org.mybatis.generator.config.TableConfiguration;
 import org.mybatis.generator.exception.XMLParserException;
+import org.mybatis.generator.internal.ObjectFactory;
 import org.w3c.dom.Element;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -109,8 +110,7 @@ && stringHasValue(url)) {
 
         try {
             if (stringHasValue(resource)) {
-                resourceUrl = Thread.currentThread().getContextClassLoader()
-                        .getResource(resource);
+                resourceUrl = ObjectFactory.getResource(resource);
                 if (resourceUrl == null) {
                     throw new XMLParserException(getString(
                             "RuntimeError.15", resource)); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/xml/MyBatisGeneratorConfigurationParser.java
Patch:
@@ -39,6 +39,7 @@
 import org.mybatis.generator.config.SqlMapGeneratorConfiguration;
 import org.mybatis.generator.config.TableConfiguration;
 import org.mybatis.generator.exception.XMLParserException;
+import org.mybatis.generator.internal.ObjectFactory;
 import org.w3c.dom.Element;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
@@ -106,8 +107,7 @@ && stringHasValue(url)) {
 
         try {
             if (stringHasValue(resource)) {
-                resourceUrl = Thread.currentThread().getContextClassLoader()
-                        .getResource(resource);
+                resourceUrl = ObjectFactory.getResource(resource);
                 if (resourceUrl == null) {
                     throw new XMLParserException(getString(
                             "RuntimeError.15", resource)); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/sqlprovider/ProviderCountByExampleMethodGenerator.java
Patch:
@@ -61,7 +61,7 @@ public void addClassElements(TopLevelClass topLevelClass) {
                 introspectedTable);
 
         method.addBodyLine("BEGIN();"); //$NON-NLS-1$
-        method.addBodyLine("SELECT(\"count (*)\");"); //$NON-NLS-1$
+        method.addBodyLine("SELECT(\"count(*)\");"); //$NON-NLS-1$
         method.addBodyLine(String.format("FROM(\"%s\");", //$NON-NLS-1$
                 escapeStringForJava(introspectedTable.getAliasedFullyQualifiedTableNameAtRuntime())));
         method.addBodyLine("applyWhere(example, false);"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/javamapper/elements/annotated/AnnotatedSelectByPrimaryKeyMethodGenerator.java
Patch:
@@ -132,7 +132,7 @@ public void addMapperAnnotations(Interface interfaze, Method method) {
     private void addResultMapAnnotation(Interface interfaze, Method method) {
         interfaze.addImportedType(new FullyQualifiedJavaType("org.apache.ibatis.annotations.ResultMap")); //$NON-NLS-1$
         
-        String annotation = String.format("@ResultMap(\"%s\")",
+        String annotation = String.format("@ResultMap(\"%s\")", //$NON-NLS-1$
                 introspectedTable.getRules().generateResultMapWithBLOBs() ?
                         introspectedTable.getResultMapWithBLOBsId() : introspectedTable.getBaseResultMapId());
         method.addAnnotation(annotation);

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/model/ExampleGenerator.java
Patch:
@@ -1040,7 +1040,7 @@ private String addtypeHandledObjectsAndMethods(
         method.addBodyLine("}"); //$NON-NLS-1$
 
         method.addBodyLine(
-                String.format("%s.add(new Criterion(condition, value, \"%s\"));",
+                String.format("%s.add(new Criterion(condition, value, \"%s\"));", //$NON-NLS-1$
                         field.getName(), introspectedColumn.getTypeHandler()));
         method.addBodyLine("allCriteria = null;"); //$NON-NLS-1$
         innerClass.addMethod(method);
@@ -1068,7 +1068,7 @@ private String addtypeHandledObjectsAndMethods(
         method.addBodyLine("}"); //$NON-NLS-1$
 
         method.addBodyLine(
-                String.format("%s.add(new Criterion(condition, value1, value2, \"%s\"));",
+                String.format("%s.add(new Criterion(condition, value1, value2, \"%s\"));", //$NON-NLS-1$
                         field.getName(), introspectedColumn.getTypeHandler()));
         
         method.addBodyLine("allCriteria = null;"); //$NON-NLS-1$

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -59,4 +59,5 @@ public class PropertyRegistry {
     public static final String MODEL_GENERATOR_TRIM_STRINGS = "trimStrings"; //$NON-NLS-1$
 
     public static final String COMMENT_GENERATOR_SUPPRESS_DATE = "suppressDate"; //$NON-NLS-1$
+    public static final String COMMENT_GENERATOR_SUPPRESS_ALL_COMMENTS = "suppressAllComments"; //$NON-NLS-1$
 }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/mybatis3/xmlmapper/elements/SelectByExampleWithBLOBsElementGenerator.java
Patch:
@@ -75,7 +75,7 @@ public void addElements(XmlElement parentElement) {
 
         ifElement = new XmlElement("if"); //$NON-NLS-1$
         ifElement.addAttribute(new Attribute("test", "orderByClause != null")); //$NON-NLS-1$ //$NON-NLS-2$
-        ifElement.addElement(new TextElement("order by $orderByClause$")); //$NON-NLS-1$
+        ifElement.addElement(new TextElement("order by ${orderByClause}")); //$NON-NLS-1$
         answer.addElement(ifElement);
 
         if (context.getPlugins()

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/conditional/ConditionalJava5Test.java
Patch:
@@ -1884,6 +1884,7 @@ record = new Pkfieldsblobs();
 
             PkfieldsblobsExample example = new PkfieldsblobsExample();
             example.createCriteria().andId2EqualTo(6);
+            example.setOrderByClause("ID1");  // test for Issue 174
             List<Pkfieldsblobs> answer = mapper.selectByExampleWithBLOBs(example);
             assertEquals(1, answer.size());
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/codegen/ibatis2/dao/DAOGenerator.java
Patch:
@@ -150,7 +150,7 @@ protected Interface getInterfaceShell() {
 
         String rootInterface = introspectedTable
                 .getTableConfigurationProperty(PropertyRegistry.ANY_ROOT_INTERFACE);
-        if (rootInterface == null) {
+        if (!stringHasValue(rootInterface)) {
             rootInterface = context.getJavaClientGeneratorConfiguration()
                     .getProperty(PropertyRegistry.ANY_ROOT_INTERFACE);
         }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -35,7 +35,7 @@ public class PropertyRegistry {
     public static final String ANY_CONSTRUCTOR_BASED = "constructorBased"; //$NON-NLS-1$
 
     /**
-     * recognized by table and dao generator
+     * recognized by table and java client generator
      */
     public static final String ANY_ROOT_INTERFACE = "rootInterface"; //$NON-NLS-1$
 

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/internal/db/DatabaseIntrospector.java
Patch:
@@ -308,8 +308,9 @@ private void calculateExtraColumnInformation(TableConfiguration tc,
                         introspectedColumn.setJdbcTypeName("OTHER"); //$NON-NLS-1$
 
                         String warning = Messages.getString("Warning.14", //$NON-NLS-1$
-                                entry.getKey().toString(), introspectedColumn
-                                        .getActualColumnName());
+                                Integer.toString(introspectedColumn.getJdbcType()),
+                                entry.getKey().toString(),
+                                introspectedColumn.getActualColumnName());
 
                         warnings.add(warning);
                     }

File: core/mybatis-generator-core/src/main/java/org/mybatis/generator/config/PropertyRegistry.java
Patch:
@@ -45,7 +45,6 @@ public class PropertyRegistry {
     public static final String TABLE_RUNTIME_SCHEMA = "runtimeSchema"; //$NON-NLS-1$
     public static final String TABLE_RUNTIME_TABLE_NAME = "runtimeTableName"; //$NON-NLS-1$
 
-    public static final String CONTEXT_SUPPRESS_TYPE_WARNINGS = "suppressTypeWarnings"; //$NON-NLS-1$
     public static final String CONTEXT_BEGINNING_DELIMITER = "beginningDelimiter"; //$NON-NLS-1$
     public static final String CONTEXT_ENDING_DELIMITER = "endingDelimiter"; //$NON-NLS-1$
     public static final String CONTEXT_AUTO_DELIMIT_KEYWORDS = "autoDelimitKeywords"; //$NON-NLS-1$

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/conditional/UpdateByExampleTest.java
Patch:
@@ -102,7 +102,7 @@ record = answer.get(0);
             example.createCriteria().andIntegerfieldEqualTo(8);
             answer = mapper.selectByExample(example);
             assertEquals(1, answer.size());
-            record = (Fieldsonly) answer.get(0);
+            record = answer.get(0);
             assertEquals(record.getDoublefield(), 99d, 0.0);
             assertEquals(record.getFloatfield(), 66.77, 0.0);
             assertEquals(record.getIntegerfield().intValue(), 8);
@@ -111,7 +111,7 @@ record = (Fieldsonly) answer.get(0);
             example.createCriteria().andIntegerfieldEqualTo(9);
             answer = mapper.selectByExample(example);
             assertEquals(1, answer.size());
-            record = (Fieldsonly) answer.get(0);
+            record = answer.get(0);
             assertEquals(record.getDoublefield(), 99d, 0.0);
             assertEquals(record.getFloatfield(), 100.111, 0.0);
             assertEquals(record.getIntegerfield().intValue(), 9);

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/flat/UpdateByExampleTest.java
Patch:
@@ -102,7 +102,7 @@ record = answer.get(0);
             example.createCriteria().andIntegerfieldEqualTo(8);
             answer = mapper.selectByExample(example);
             assertEquals(1, answer.size());
-            record = (Fieldsonly) answer.get(0);
+            record = answer.get(0);
             assertEquals(record.getDoublefield(), 99d, 0.0);
             assertEquals(record.getFloatfield(), 66.77, 0.0);
             assertEquals(record.getIntegerfield().intValue(), 8);
@@ -111,7 +111,7 @@ record = (Fieldsonly) answer.get(0);
             example.createCriteria().andIntegerfieldEqualTo(9);
             answer = mapper.selectByExample(example);
             assertEquals(1, answer.size());
-            record = (Fieldsonly) answer.get(0);
+            record = answer.get(0);
             assertEquals(record.getDoublefield(), 99d, 0.0);
             assertEquals(record.getFloatfield(), 100.111, 0.0);
             assertEquals(record.getIntegerfield().intValue(), 9);

File: core/mybatis-generator-systests-mybatis3/src/test/java/mbg/test/mb3/hierarchical/UpdateByExampleTest.java
Patch:
@@ -105,7 +105,7 @@ record = answer.get(0);
             example.createCriteria().andIntegerfieldEqualTo(8);
             answer = mapper.selectByExample(example);
             assertEquals(1, answer.size());
-            record = (Fieldsonly) answer.get(0);
+            record = answer.get(0);
             assertEquals(record.getDoublefield(), 99d, 0.0);
             assertEquals(record.getFloatfield(), 66.77, 0.0);
             assertEquals(record.getIntegerfield().intValue(), 8);
@@ -114,7 +114,7 @@ record = (Fieldsonly) answer.get(0);
             example.createCriteria().andIntegerfieldEqualTo(9);
             answer = mapper.selectByExample(example);
             assertEquals(1, answer.size());
-            record = (Fieldsonly) answer.get(0);
+            record = answer.get(0);
             assertEquals(record.getDoublefield(), 99d, 0.0);
             assertEquals(record.getFloatfield(), 100.111, 0.0);
             assertEquals(record.getIntegerfield().intValue(), 9);

File: core/mybatis-generator-core/src/test/java/org/mybatis/generator/MyBatisGeneratorTest.java
Patch:
@@ -65,7 +65,7 @@ public void testGenerateIbatis2Java5() throws Exception {
     @Test
     public void testGenerateMyBatis3() throws Exception {
         SqlScriptRunner scriptRunner = new SqlScriptRunner(
-                this.getClass().getClassLoader().getResourceAsStream("CreateDbMyBatis3.sql"),
+                this.getClass().getClassLoader().getResourceAsStream("CreateDBMyBatis3.sql"),
                 "org.hsqldb.jdbcDriver",
                 "jdbc:hsqldb:mem:aname",
                 "sa",

File: core/ibator-core/src/main/java/org/apache/ibatis/ibator/internal/db/DatabaseIntrospector.java
Patch:
@@ -444,6 +444,7 @@ private Map<ActualTableName, List<IntrospectedColumn>> getColumns(TableConfigura
             introspectedColumn.setNullable(rs.getInt("NULLABLE") == DatabaseMetaData.columnNullable); //$NON-NLS-1$
             introspectedColumn.setScale(rs.getInt("DECIMAL_DIGITS")); //$NON-NLS-1$
             introspectedColumn.setRemarks(rs.getString("REMARKS")); //$NON-NLS-1$
+            introspectedColumn.setDefaultValue(rs.getString("COLUMN_DEF")); //$NON-NLS-1$
             
             ActualTableName atn = new ActualTableName(rs.getString("TABLE_CAT"), //$NON-NLS-1$
                     rs.getString("TABLE_SCHEM"), //$NON-NLS-1$

File: core/src/org/apache/ibatis/ibator/internal/types/JavaTypeResolverDefaultImpl.java
Patch:
@@ -83,7 +83,7 @@ public JavaTypeResolverDefaultImpl() {
                 new FullyQualifiedJavaType(Object.class.getName())));
         typeMap.put(Types.LONGVARBINARY, new JdbcTypeInformation("LONGVARBINARY", //$NON-NLS-1$
                 new FullyQualifiedJavaType("byte[]"))); //$NON-NLS-1$
-        typeMap.put(Types.LONGVARCHAR, new JdbcTypeInformation("LONCVARCHAR", //$NON-NLS-1$
+        typeMap.put(Types.LONGVARCHAR, new JdbcTypeInformation("LONGVARCHAR", //$NON-NLS-1$
                 new FullyQualifiedJavaType(String.class.getName())));
         typeMap.put(Types.NULL, new JdbcTypeInformation("NULL", //$NON-NLS-1$
                 new FullyQualifiedJavaType(Object.class.getName())));

