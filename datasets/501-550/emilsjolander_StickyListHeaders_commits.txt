File: library/src/se/emilsjolander/stickylistheaders/AdapterWrapper.java
Patch:
@@ -29,7 +29,7 @@ interface OnHeaderClickListener {
 		void onHeaderClick(View header, int itemPosition, long headerId);
 	}
 
-	final StickyListHeadersAdapter mDelegate;
+	StickyListHeadersAdapter mDelegate;
 	private final List<View> mHeaderCache = new LinkedList<View>();
 	private final Context mContext;
 	private Drawable mDivider;

File: library/src/se/emilsjolander/stickylistheaders/SectionIndexerAdapterWrapper.java
Patch:
@@ -6,7 +6,7 @@
 class SectionIndexerAdapterWrapper extends
 		AdapterWrapper implements SectionIndexer {
 	
-	final SectionIndexer mSectionIndexerDelegate;
+	SectionIndexer mSectionIndexerDelegate;
 
 	SectionIndexerAdapterWrapper(Context context,
 			StickyListHeadersAdapter delegate) {

File: library/src/se/emilsjolander/stickylistheaders/AdapterWrapper.java
Patch:
@@ -29,7 +29,7 @@ interface OnHeaderClickListener {
 		public void onHeaderClick(View header, int itemPosition, long headerId);
 	}
 
-	final StickyListHeadersAdapter mDelegate;
+	StickyListHeadersAdapter mDelegate;
 	private final List<View> mHeaderCache = new LinkedList<View>();
 	private final Context mContext;
 	private Drawable mDivider;

File: library/src/se/emilsjolander/stickylistheaders/SectionIndexerAdapterWrapper.java
Patch:
@@ -6,7 +6,7 @@
 class SectionIndexerAdapterWrapper extends
 		AdapterWrapper implements SectionIndexer {
 	
-	final SectionIndexer mSectionIndexerDelegate;
+	SectionIndexer mSectionIndexerDelegate;
 
 	SectionIndexerAdapterWrapper(Context context,
 			StickyListHeadersAdapter delegate) {

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -30,7 +30,7 @@
  * Even though this is a FrameLayout subclass we still consider it a ListView.
  * This is because of 2 reasons:
  *   1. It acts like as ListView.
- *   2. It used to be a ListView subclass and I did not was to change to name causing compatibility errors.
+ *   2. It used to be a ListView subclass and I did not want to change to name causing compatibility errors.
  *
  * @author Emil Sjölander
  */

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -30,7 +30,7 @@
  * Even though this is a FrameLayout subclass we still consider it a ListView.
  * This is because of 2 reasons:
  *   1. It acts like as ListView.
- *   2. It used to be a ListView subclass and i did not was to change to name causing compatibility errors.
+ *   2. It used to be a ListView subclass and I did not was to change to name causing compatibility errors.
  *
  * @author Emil Sjölander
  */

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -27,7 +27,7 @@
 import se.emilsjolander.stickylistheaders.WrapperViewList.LifeCycleListener;
 
 /**
- * Even though this is a FrameLayout subclass we it is called a ListView. This
+ * Even though this is a FrameLayout subclass we still consider it a ListView. This
  * is because of 2 reasons. 1. It acts like as ListView 2. It used to be a
  * ListView subclass and i did not was to change to name causing compatibility
  * errors.

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -397,9 +397,9 @@ public void onClick(View v) {
     private void updateHeaderVisibilities() {
         int top;
         if (mHeader != null) {
-            top = mHeader.getMeasuredHeight() + (mHeaderOffset != null ? mHeaderOffset : 0);
+            top = mHeader.getMeasuredHeight() + (mHeaderOffset != null ? mHeaderOffset : 0) + mStickyHeaderTopOffset;
         } else {
-            top = mClippingToPadding ? mPaddingTop : 0;
+            top = stickyHeaderTop();
         }
         int childCount = mList.getChildCount();
         for (int i = 0; i < childCount; i++) {

File: sample/src/se/emilsjolander/stickylistheaders/sample/TestActivity.java
Patch:
@@ -106,6 +106,8 @@ public void run() {
         drawBehindCheckBox.setOnCheckedChangeListener(checkBoxListener);
         fastScrollCheckBox = (CheckBox) findViewById(R.id.fast_scroll_checkBox);
         fastScrollCheckBox.setOnCheckedChangeListener(checkBoxListener);
+
+        stickyList.setStickyHeaderTopOffset(-20);
     }
 
     @Override

File: sample/src/se/emilsjolander/stickylistheaders/sample/TestActivity.java
Patch:
@@ -108,6 +108,9 @@ public void run() {
         drawBehindCheckBox.setOnCheckedChangeListener(checkBoxListener);
         fastScrollCheckBox = (CheckBox) findViewById(R.id.fast_scroll_checkBox);
         fastScrollCheckBox.setOnCheckedChangeListener(checkBoxListener);
+
+
+        stickyList.setStickyHeaderTopOffset(100);
     }
 
     @Override

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -230,10 +230,11 @@ private void ensureHeaderHasCorrectLayoutParams(View header) {
         ViewGroup.LayoutParams lp = header.getLayoutParams();
         if (lp == null) {
             lp = new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT);
+            header.setLayoutParams(lp);
         } else if (lp.height == LayoutParams.MATCH_PARENT) {
             lp.height = LayoutParams.WRAP_CONTENT;
+            header.setLayoutParams(lp);
         }
-        header.setLayoutParams(lp);
     }
 
     private void measureHeader(View header) {

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -267,7 +267,9 @@ protected void dispatchDraw(Canvas canvas) {
         // The header should be drawn right after the lists children are drawn.
         // This is done so that the header is above the list items
         // but below the list decorators (scroll bars etc).
-        drawChild(canvas, mList, 0);
+        if (mList.getVisibility() == VISIBLE || mList.getAnimation() != null) {
+            drawChild(canvas, mList, 0);
+        }
     }
 
     // Reset values tied the header. also remove header form layout

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -132,7 +132,9 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
                 mList.setHorizontalScrollBarEnabled((scrollBars & 0x00000100) != 0);
 
                 // overscroll
-                mList.setOverScrollMode(a.getInt(R.styleable.StickyListHeadersListView_android_overScrollMode, 0));
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
+                    mList.setOverScrollMode(a.getInt(R.styleable.StickyListHeadersListView_android_overScrollMode, 0));
+                }
 
                 // -- ListView attributes --
                 mList.setFadingEdgeLength(a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_fadingEdgeLength,

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -132,7 +132,9 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
                 mList.setHorizontalScrollBarEnabled((scrollBars & 0x00000100) != 0);
 
                 // overscroll
-                mList.setOverScrollMode(a.getInt(R.styleable.StickyListHeadersListView_android_overScrollMode, 0));
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
+                    mList.setOverScrollMode(a.getInt(R.styleable.StickyListHeadersListView_android_overScrollMode, 0));
+                }
 
                 // -- ListView attributes --
                 mList.setFadingEdgeLength(a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_fadingEdgeLength,

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -723,7 +723,9 @@ public int getOverScrollMode() {
     @TargetApi(Build.VERSION_CODES.GINGERBREAD)
     public void setOverScrollMode(int mode) {
         requireSdkVersion(Build.VERSION_CODES.GINGERBREAD);
-        mList.setOverScrollMode(mode);
+        if (mList != null) {
+            mList.setOverScrollMode(mode);
+        }
     }
 
     @TargetApi(Build.VERSION_CODES.FROYO)

File: sample/src/se/emilsjolander/stickylistheaders/TestActivity.java
Patch:
@@ -45,8 +45,8 @@ public void onCreate(Bundle savedInstanceState) {
         stickyList.setOnItemClickListener(this);
         stickyList.setOnHeaderClickListener(this);
         stickyList.setOnStickyHeaderOffsetChangedListener(this);
-//		mStickyList.addHeaderView(inflater.inflate(R.layout.list_header, null));
-//		mStickyList.addFooterView(inflater.inflate(R.layout.list_footer, null));
+        stickyList.addHeaderView(getLayoutInflater().inflate(R.layout.list_header, null));
+        stickyList.addFooterView(getLayoutInflater().inflate(R.layout.list_footer, null));
         stickyList.setEmptyView(findViewById(R.id.empty));
         stickyList.setDrawingListUnderStickyHeader(true);
         stickyList.setAreHeadersSticky(true);

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -777,10 +777,12 @@ public long getItemIdAtPosition(int position) {
         return mList.getItemIdAtPosition(position);
     }
 
+    @Override
     public void setOnCreateContextMenuListener(OnCreateContextMenuListener l) {
         mList.setOnCreateContextMenuListener(l);
     }
 
+    @Override
     public boolean showContextMenu() {
         return mList.showContextMenu();
     }
@@ -842,9 +844,7 @@ public void setFastScrollEnabled(boolean fastScrollEnabled) {
     @TargetApi(Build.VERSION_CODES.HONEYCOMB)
     public void setFastScrollAlwaysVisible(boolean alwaysVisible) {
         requireSdkVersion(Build.VERSION_CODES.HONEYCOMB);
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
-            mList.setFastScrollAlwaysVisible(alwaysVisible);
-        }
+        mList.setFastScrollAlwaysVisible(alwaysVisible);
     }
 
     /**

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -290,11 +290,11 @@ private void updateOrClearHeader(int firstVisiblePosition) {
 		// It is not a mistake to call getFirstVisiblePosition() here.
 		// Most of the time getFixedFirstVisibleItem() should be called
 		// but that does not work great together with getChildAt()
-		final boolean isFirstViewBelowTop = mList.getFirstVisiblePosition() == 0
+		final boolean doesListHaveChildren = mList.getChildCount() != 0;
+		final boolean isFirstViewBelowTop = doesListHaveChildren && mList.getFirstVisiblePosition() == 0
 				&& mList.getChildAt(0).getTop() > 0;
 		final boolean isFirstVisibleItemOutsideAdapterRange = realFirstVisibleItem > adapterCount - 1
 				|| realFirstVisibleItem < 0;
-		final boolean doesListHaveChildren = mList.getChildCount() != 0;
 		if (!doesListHaveChildren || isFirstVisibleItemOutsideAdapterRange
 				|| isFirstViewBelowTop) {
 			clearHeader();

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -290,11 +290,11 @@ private void updateOrClearHeader(int firstVisiblePosition) {
 		// It is not a mistake to call getFirstVisiblePosition() here.
 		// Most of the time getFixedFirstVisibleItem() should be called
 		// but that does not work great together with getChildAt()
-		final boolean isFirstViewBelowTop = mList.getFirstVisiblePosition() == 0
+		final boolean doesListHaveChildren = mList.getChildCount() != 0;
+		final boolean isFirstViewBelowTop = doesListHaveChildren && mList.getFirstVisiblePosition() == 0
 				&& mList.getChildAt(0).getTop() > 0;
 		final boolean isFirstVisibleItemOutsideAdapterRange = realFirstVisibleItem > adapterCount - 1
 				|| realFirstVisibleItem < 0;
-		final boolean doesListHaveChildren = mList.getChildCount() != 0;
 		if (!doesListHaveChildren || isFirstVisibleItemOutsideAdapterRange
 				|| isFirstViewBelowTop) {
 			clearHeader();

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -507,8 +507,8 @@ private boolean isStartOfSection(int position) {
 
 	private int getHeaderOverlap(int position) {
 		boolean isStartOfSection = isStartOfSection(position);
-		if (!isStartOfSection) {
-			final View header = mAdapter.getView(position, null, mList);
+		if (isStartOfSection) {
+			View header = mAdapter.getHeaderView(position, null, mList);
 			if (header == null) {
 				throw new NullPointerException("header may not be null");
 			}

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -507,8 +507,8 @@ private boolean isStartOfSection(int position) {
 
 	private int getHeaderOverlap(int position) {
 		boolean isStartOfSection = isStartOfSection(position);
-		if (!isStartOfSection) {
-			final View header = mAdapter.getView(position, null, mList);
+		if (isStartOfSection) {
+			View header = mAdapter.getHeaderView(position, null, mList);
 			if (header == null) {
 				throw new NullPointerException("header may not be null");
 			}

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -730,14 +730,15 @@ public void smoothScrollToPositionFromTop(int position, int offset,
 	}
 
 	public void setSelection(int position) {
-		mList.setSelection(position);
+		setSelectionFromTop(position, 0);
 	}
 
 	public void setSelectionAfterHeaderView() {
 		mList.setSelectionAfterHeaderView();
 	}
 
 	public void setSelectionFromTop(int position, int y) {
+		y += mAdapter == null ? 0 : getHeaderOverlap(position);
 		mList.setSelectionFromTop(position, y);
 	}
 

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -730,14 +730,15 @@ public void smoothScrollToPositionFromTop(int position, int offset,
 	}
 
 	public void setSelection(int position) {
-		mList.setSelection(position);
+		setSelectionFromTop(position, 0);
 	}
 
 	public void setSelectionAfterHeaderView() {
 		mList.setSelectionAfterHeaderView();
 	}
 
 	public void setSelectionFromTop(int position, int y) {
+		y += mAdapter == null ? 0 : getHeaderOverlap(position);
 		mList.setSelectionFromTop(position, y);
 	}
 

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -503,9 +503,7 @@ private boolean isStartOfSection(int position) {
 	private int getHeaderOverlap(int position) {
 		boolean isStartOfSection = isStartOfSection(position);
 		if (!isStartOfSection) {
-			View header = mAdapter.getHeaderView(position, null, mList);
-			header.setLayoutParams(new ViewGroup.LayoutParams(
-					LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
+			View header = mAdapter.getView(position, null, mList);
 
 			final int width = getWidth();
 			final int parentWidthMeasureSpec = MeasureSpec.makeMeasureSpec(

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -503,7 +503,9 @@ private boolean isStartOfSection(int position) {
 	private int getHeaderOverlap(int position) {
 		boolean isStartOfSection = isStartOfSection(position);
 		if (!isStartOfSection) {
-			View header = mAdapter.getView(position, null, mList);
+			View header = mAdapter.getHeaderView(position, null, mList);
+			header.setLayoutParams(new ViewGroup.LayoutParams(
+					LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
 
 			final int width = getWidth();
 			final int parentWidthMeasureSpec = MeasureSpec.makeMeasureSpec(

File: library/src/se/emilsjolander/stickylistheaders/AdapterWrapper.java
Patch:
@@ -161,7 +161,7 @@ private boolean previousPositionHasSameHeader(int position) {
 	@Override
 	public WrapperView getView(int position, View convertView, ViewGroup parent) {
 		WrapperView wv = (convertView == null) ? new WrapperView(mContext) : (WrapperView) convertView;
-		View item = mDelegate.getView(position, wv.mItem, wv);
+		View item = mDelegate.getView(position, wv.mItem, parent);
 		View header = null;
 		if (previousPositionHasSameHeader(position)) {
 			recycleHeaderIfExists(wv);

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -155,7 +155,7 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
 				if (divider != null) {
 					mDivider = divider;
 				}
-				mDividerHeight = a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_dividerHeight, 0);
+				mDividerHeight = a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_dividerHeight, mDividerHeight);
 
 				// StickyListHeaders attributes
 				mAreHeadersSticky = a.getBoolean(R.styleable.StickyListHeadersListView_hasStickyHeaders, true);

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -155,7 +155,7 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
 				if (divider != null) {
 					mDivider = divider;
 				}
-				mDividerHeight = a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_dividerHeight, 0);
+				mDividerHeight = a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_dividerHeight, mDividerHeight);
 
 				// StickyListHeaders attributes
 				mAreHeadersSticky = a.getBoolean(R.styleable.StickyListHeadersListView_hasStickyHeaders, true);

File: library/src/se/emilsjolander/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -155,7 +155,7 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
 				if (divider != null) {
 					mDivider = divider;
 				}
-				mDividerHeight = a.getInt(R.styleable.StickyListHeadersListView_android_dividerHeight, mDividerHeight);
+				mDividerHeight = a.getDimensionPixelSize(R.styleable.StickyListHeadersListView_android_dividerHeight, 0);
 
 				// StickyListHeaders attributes
 				mAreHeadersSticky = a.getBoolean(R.styleable.StickyListHeadersListView_hasStickyHeaders, true);

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -293,8 +293,9 @@ private void swapHeader(View newHeader) {
 
 			@Override
 			public void onClick(View v) {
-				mOnHeaderClickListener.onHeaderClick(StickyListHeadersListView.this, mHeader, mHeaderPosition,
-						mHeaderId, true);
+				if(mOnHeaderClickListener != null)
+					mOnHeaderClickListener.onHeaderClick(StickyListHeadersListView.this, mHeader, mHeaderPosition,
+							mHeaderId, true);
 			}
 		});
 	}

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -293,8 +293,9 @@ private void swapHeader(View newHeader) {
 
 			@Override
 			public void onClick(View v) {
-				mOnHeaderClickListener.onHeaderClick(StickyListHeadersListView.this, mHeader, mHeaderPosition,
-						mHeaderId, true);
+				if(mOnHeaderClickListener != null)
+					mOnHeaderClickListener.onHeaderClick(StickyListHeadersListView.this, mHeader, mHeaderPosition,
+							mHeaderId, true);
 			}
 		});
 	}

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -136,7 +136,7 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
 				}
 				mList.setCacheColorHint(a.getColor(R.styleable.StickyListHeadersListView_android_cacheColorHint,
 						mList.getCacheColorHint()));
-                if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                     mList.setChoiceMode(a.getInt(R.styleable.StickyListHeadersListView_android_choiceMode,
                             mList.getChoiceMode()));
                 }

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -136,7 +136,7 @@ public StickyListHeadersListView(Context context, AttributeSet attrs, int defSty
 				}
 				mList.setCacheColorHint(a.getColor(R.styleable.StickyListHeadersListView_android_cacheColorHint,
 						mList.getCacheColorHint()));
-                if (Build.VERSION.SDK_INT > Build.VERSION_CODES.HONEYCOMB) {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {
                     mList.setChoiceMode(a.getInt(R.styleable.StickyListHeadersListView_android_choiceMode,
                             mList.getChoiceMode()));
                 }

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestFragment.java
Patch:
@@ -26,8 +26,8 @@ public View onCreateView(LayoutInflater inflater, ViewGroup container,
 		mStickyList.setOnItemClickListener(this);
 		mStickyList.setOnHeaderClickListener(this);
 
-		mStickyList.addHeaderView(inflater.inflate(R.layout.list_header, null));
-		mStickyList.addFooterView(inflater.inflate(R.layout.list_footer, null));
+//		mStickyList.addHeaderView(inflater.inflate(R.layout.list_header, null));
+//		mStickyList.addFooterView(inflater.inflate(R.layout.list_footer, null));
 		mStickyList.setEmptyView(v.findViewById(R.id.empty));
 
 		mStickyList.setDrawingListUnderStickyHeader(true);

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -189,6 +189,7 @@ public void smoothScrollToPositionFromTop(int position, int offset,
 	}
 
 	private boolean hasStickyHeaderAtPosition(int position) {
+		position -= getHeaderViewsCount();
 		return mAreHeadersSticky
 				&& position > 0
 				&& position < mAdapter.getCount()
@@ -386,7 +387,7 @@ private void measureHeader() {
 					MeasureSpec.UNSPECIFIED);
 		}
 		mHeader.measure(widthMeasureSpec, heightMeasureSpec);
-		if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR1) {
+		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
 			mHeader.setLayoutDirection(this.getLayoutDirection());
 		}
 

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -191,6 +191,7 @@ public void smoothScrollToPositionFromTop(int position, int offset,
 	private boolean hasStickyHeaderAtPosition(int position) {
 		return mAreHeadersSticky
 				&& position > 0
+				&& position < mAdapter.getCount()
 				&& mAdapter.getHeaderId(position) == mAdapter
 						.getHeaderId(position - 1);
 	}

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestBaseAdapter.java
Patch:
@@ -95,7 +95,6 @@ public long getItemId(int position) {
 			holder = new HeaderViewHolder();
 			convertView = inflater.inflate(R.layout.header, parent, false);
 			holder.text1 = (TextView) convertView.findViewById(R.id.text1);
-			holder.text2 = (TextView) convertView.findViewById(R.id.text2);
 			convertView.setTag(holder);
 		} else {
 			holder = (HeaderViewHolder) convertView.getTag();
@@ -109,7 +108,6 @@ public long getItemId(int position) {
 			headerText = headerChar + "\n" + headerChar;
 		}
 		holder.text1.setText(headerText);
-		holder.text2.setText(headerText);
 		return convertView;
 	}
 
@@ -122,7 +120,6 @@ public long getHeaderId(int position) {
 
 	class HeaderViewHolder {
 		TextView text1;
-		TextView text2;
 	}
 
 	class ViewHolder {

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestBaseAdapter.java
Patch:
@@ -3,6 +3,7 @@
 import java.util.ArrayList;
 
 import android.content.Context;
+import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
@@ -116,6 +117,7 @@ public long getItemId(int position) {
 	//remember that these have to be static, postion=1 should walys return the same Id that is.
 	@Override
 	public long getHeaderId(int position) {
+		Log.d("debug", "getHeaderId");
 		//return the first character of the country as ID because this is what headers are based upon
 		return countries[position].subSequence(0, 1).charAt(0);
 	}

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -142,6 +142,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
 		super.onLayout(changed, l, t, r, b);
 		if (changed) {
 			reset();
+			scrollChanged(getFirstVisiblePosition());
 		}
 	}
 

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListViewWrapper.java
Patch:
@@ -118,7 +118,7 @@ void setHeader(View header) {
 			View list = getChildAt(0);
 			LayoutParams params = new LayoutParams(list.getMeasuredWidth()
 					- list.getPaddingLeft() - list.getPaddingRight(),
-					LayoutParams.WRAP_CONTENT);
+					header.getLayoutParams() != null ? header.getLayoutParams().height : LayoutParams.WRAP_CONTENT);
 			params.leftMargin = list.getPaddingLeft();
 			params.rightMargin = list.getPaddingRight();
 			params.gravity = Gravity.TOP;

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListViewWrapper.java
Patch:
@@ -118,7 +118,7 @@ void setHeader(View header) {
 			View list = getChildAt(0);
 			LayoutParams params = new LayoutParams(list.getMeasuredWidth()
 					- list.getPaddingLeft() - list.getPaddingRight(),
-					LayoutParams.WRAP_CONTENT);
+					header.getLayoutParams().height);
 			params.leftMargin = list.getPaddingLeft();
 			params.rightMargin = list.getPaddingRight();
 			params.gravity = Gravity.TOP;

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -650,6 +650,7 @@ public long getItemIdAtPosition(int position) {
 	protected ContextMenuInfo getContextMenuInfo() {
 		AdapterContextMenuInfo info = (android.widget.AdapterView.AdapterContextMenuInfo) super.getContextMenuInfo();
 		info.position = adapter.translateListViewPosition(info.position - getHeaderViewsCount());
+		info.position += getHeaderViewsCount();
 		return info;
 	}
 

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -486,6 +486,7 @@ private void scrollChanged(int firstVisibleItem) {
 
 		int adapterCount = adapter.getCount();
 		if (adapterCount == 0 || !areHeadersSticky) {
+			frame.removeHeader();
 			return;
 		}
 

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -414,7 +414,7 @@ public void setAdapter(ListAdapter adapter) {
 		}
 
 		if (this.adapter != null) {
-			this.adapter.unregisterDataSetObserver(dataSetChangedObserver);
+			this.adapter.unregisterInternalDataSetObserver(dataSetChangedObserver);
 			this.adapter = null;
 		}
 
@@ -428,7 +428,7 @@ public void setAdapter(ListAdapter adapter) {
 			}
 			this.adapter.setDivider(divider);
 			this.adapter.setDividerHeight(dividerHeight);
-			this.adapter.registerDataSetObserver(dataSetChangedObserver);
+			this.adapter.registerInternalDataSetObserver(dataSetChangedObserver);
 		}
 
 		currentHeaderId = null;

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -409,7 +409,7 @@ public void setAdapter(ListAdapter adapter) {
 		}
 
 		if (this.adapter != null) {
-			this.adapter.unregisterDataSetObserver(dataSetChangedObserver);
+			this.adapter.unregisterInternalDataSetObserver(dataSetChangedObserver);
 			this.adapter = null;
 		}
 
@@ -423,7 +423,7 @@ public void setAdapter(ListAdapter adapter) {
 			}
 			this.adapter.setDivider(divider);
 			this.adapter.setDividerHeight(dividerHeight);
-			this.adapter.registerDataSetObserver(dataSetChangedObserver);
+			this.adapter.registerInternalDataSetObserver(dataSetChangedObserver);
 		}
 
 		currentHeaderId = null;

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestActivity.java
Patch:
@@ -1,6 +1,7 @@
 package com.emilsjolander.components.stickylistheaders.test;
 
 import static android.widget.Toast.LENGTH_SHORT;
+import android.annotation.SuppressLint;
 import android.app.Activity;
 import android.os.Bundle;
 import android.os.Handler;
@@ -40,6 +41,7 @@ public class TestActivity extends Activity implements OnScrollListener,
 	private int firstVisible;
 	private TestBaseAdapter adapter;
 
+	@SuppressLint("NewApi")
 	@Override
 	public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestBaseAdapter.java
Patch:
@@ -144,4 +144,5 @@ public int getSectionForPosition(int position) {
 	public Object[] getSections() {
 		return sections.toArray(new String[sections.size()]);
 	}
+	
 }

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersAdapterWrapper.java
Patch:
@@ -32,7 +32,7 @@ class StickyListHeadersAdapterWrapper extends BaseAdapter implements
 	private static final int DIVIDER_POSITION = -2;
 
 	private final Context context;
-	private final StickyListHeadersAdapter delegate;
+	final StickyListHeadersAdapter delegate;
 	private Drawable divider;
 	private int dividerHeight;
 	private WeakHashMap<View, Void> headers = new WeakHashMap<View, Void>();

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestActivity.java
Patch:
@@ -88,7 +88,8 @@ public void onScroll(AbsListView view, int firstVisibleItem,
 	public void onScrollStateChanged(AbsListView view, int scrollState) {
 	}
 
-	@Override public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+	@Override 
+	public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
 		Toast.makeText(this, "Item " + position + " clicked!", LENGTH_SHORT).show();
 	}
 

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -49,6 +49,7 @@ public void onHeaderClick(StickyListHeadersListView l, View header,
 		public void onChanged() {
 			adapterCount = adapter.getCount();
 			reset();
+			scrollChanged(getFirstVisiblePosition());
 		}
 
 		@Override
@@ -138,8 +139,8 @@ public void setDrawSelectorOnTop(boolean onTop) {
 
 	private void reset() {
 		if (frame != null) {
-			frame.setHeaderBottomPosition(-1);
 			frame.removeHeader();
+			frame.setHeaderBottomPosition(-1);
 		}
 		currentHeaderId = null;
 	}

File: library/src/com/emilsjolander/components/stickylistheaders/StickyListHeadersListView.java
Patch:
@@ -131,7 +131,9 @@ public void setBackgroundDrawable(Drawable background) {
 	public void setDrawSelectorOnTop(boolean onTop) {
 		super.setDrawSelectorOnTop(onTop);
 		drawSelectorOnTop = onTop;
-		frame.setDrawSelectorOnTop(drawSelectorOnTop);
+		if(frame != null){
+			frame.setDrawSelectorOnTop(drawSelectorOnTop);
+		}
 	}
 
 	private void reset() {

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestActivity.java
Patch:
@@ -51,6 +51,8 @@ public void onCreate(Bundle savedInstanceState) {
 			firstVisible = savedInstanceState.getInt(KEY_LIST_POSITION);
 		}
 
+		stickyList.addHeaderView(getLayoutInflater().inflate(R.layout.list_header, null));
+		stickyList.addFooterView(getLayoutInflater().inflate(R.layout.list_footer, null));
 		stickyList.setAdapter(new TestBaseAdapter(this));
 		stickyList.setSelection(firstVisible);
 	}

File: library/src/com/emilsjolander/components/stickylistheaders/CheckableWrapperView.java
Patch:
@@ -1,8 +1,6 @@
 package com.emilsjolander.components.stickylistheaders;
 
 import android.content.Context;
-import android.graphics.drawable.Drawable;
-import android.view.View;
 import android.widget.Checkable;
 
 /**

File: sample/src/com/emilsjolander/components/stickylistheaders/test/TestActivity.java
Patch:
@@ -2,7 +2,6 @@
 
 import static android.widget.Toast.LENGTH_SHORT;
 import android.app.Activity;
-import android.graphics.drawable.ColorDrawable;
 import android.os.Bundle;
 import android.view.View;
 import android.widget.AbsListView;
@@ -44,8 +43,6 @@ public void onCreate(Bundle savedInstanceState) {
 		super.onCreate(savedInstanceState);
 		setContentView(R.layout.main);
 		StickyListHeadersListView stickyList = (StickyListHeadersListView) findViewById(R.id.list);
-		stickyList.setDivider(new ColorDrawable(0xffffffff));
-		stickyList.setDividerHeight(1);
 		stickyList.setOnScrollListener(this);
 		stickyList.setOnItemClickListener(this);
 		stickyList.setOnHeaderClickListener(this);

File: library/src/com/emilsjolander/components/stickylistheaders/WrapperView.java
Patch:
@@ -104,6 +104,7 @@ protected void onLayout(boolean changed, int l, int t, int r, int b) {
 	protected void dispatchDraw(Canvas canvas) {
 		super.dispatchDraw(canvas);
 		if(header == null && divider != null){
+			canvas.clipRect(0, 0, getWidth(), dividerHeight);
 			divider.draw(canvas);
 		}
 	}

File: sample/src/com/emilsjolander/components/StickyListHeaders/test/TestBaseAdapter.java
Patch:
@@ -9,10 +9,10 @@
 import com.emilsjolander.components.StickyListHeaders.StickyListHeadersBaseAdapter;
 /**
  * 
- * @author Emil Sj�lander
+ * @author Emil Sj�lander
  * 
  * 
-Copyright 2012 Emil Sj�lander
+Copyright 2012 Emil Sj�lander
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.

File: library/src/com/emilsjolander/components/StickyListHeaders/StickyListHeadersBaseAdapter.java
Patch:
@@ -61,7 +61,7 @@ public StickyListHeadersBaseAdapter(Context context) {
 	 * @param position
 	 * the list position
 	 * @return
-	 * an identifier for this header, a header for a position must always have a constant positive ID
+	 * an identifier for this header, a header for a position must always have a constant ID
 	 */
 	public abstract long getHeaderId(int position);
 	

File: library/src/com/emilsjolander/components/StickyListHeaders/StickyListHeadersCursorAdapter.java
Patch:
@@ -113,7 +113,7 @@ public View getHeaderView(int position, View convertView){
 	 * @param position
 	 * the list position
 	 * @return
-	 * an identifier for this header, a header for a position must always have a constant positive ID
+	 * an identifier for this header, a header for a position must always have a constant ID
 	 */
 	public long getHeaderId(int position){
 		if (!getCursor().moveToPosition(position)) {

File: library/src/com/emilsjolander/components/StickyListHeaders/WrapperView.java
Patch:
@@ -1,7 +1,6 @@
 package com.emilsjolander.components.StickyListHeaders;
 
 import android.content.Context;
-import android.view.LayoutInflater;
 import android.view.View;
 import android.widget.LinearLayout;
 /**
@@ -27,10 +26,11 @@
 public class WrapperView {
 	
 	private LinearLayout v;
-	private int layoutId = R.layout.wrapper;
 	
 	public WrapperView(Context c) {
-		v = (LinearLayout) LayoutInflater.from(c).inflate(layoutId, null);
+		v = new LinearLayout(c);
+		v.setId(R.id.__stickylistheaders_wrapper_view);
+		v.setOrientation(LinearLayout.VERTICAL);
 	}
 	
 	public WrapperView(View v) {

File: library/src/com/emilsjolander/components/StickyListHeaders/StickyListHeadersListView.java
Patch:
@@ -92,6 +92,7 @@ private void setup() {
 	@Override
 	public void onRestoreInstanceState(Parcelable state) {
 		headerHeight = ((Bundle)state).getInt(HEADER_HEIGHT);
+		headerHasChanged = true;
 		super.onRestoreInstanceState(((Bundle)state).getParcelable(SUPER_INSTANCE_STATE));
 	}
 	
@@ -171,7 +172,7 @@ protected void dispatchDraw(Canvas canvas) {
 		super.dispatchDraw(canvas);
 		if(header != null && areHeadersSticky){
 			if(headerHasChanged){
-				int widthMeasureSpec = MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST);
+				int widthMeasureSpec = MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.EXACTLY);
 				int heightMeasureSpec = MeasureSpec.makeMeasureSpec(0, MeasureSpec.UNSPECIFIED);
 				header.measure(widthMeasureSpec, heightMeasureSpec);
 				header.layout(getLeft()+getPaddingLeft(), 0, getRight()-getPaddingRight(), headerHeight);

File: library/src/com/emilsjolander/components/StickyListHeaders/StickyListHeadersListView.java
Patch:
@@ -207,7 +207,7 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun
 		if(scrollListener!=null){
 			scrollListener.onScroll(view,firstVisibleItem,visibleItemCount,totalItemCount);
 		}
-		if(getAdapter()==null) return;
+		if(getAdapter()==null || getAdapter().getCount() == 0) return;
 		if(areHeadersSticky){
 			if(getChildCount()!=0){
 				if(lastWatchedViewHeader!=null){

File: sample/src/com/emilsjolander/components/StickyListHeaders/test/TestActivity.java
Patch:
@@ -4,7 +4,7 @@
 import android.os.Bundle;
 
 import com.emilsjolander.components.StickyListHeaders.R;
-import com.emilsjolander.components.StickyListHeaders.StickyListHeadersListViewTest;
+import com.emilsjolander.components.StickyListHeaders.StickyListHeadersListView;
 /**
  * 
  * @author Emil Sj�lander
@@ -27,13 +27,13 @@
  */
 public class TestActivity extends Activity {
 	
-	private StickyListHeadersListViewTest stickyList;
+	private StickyListHeadersListView stickyList;
 	
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.main);
-        stickyList = (StickyListHeadersListViewTest) findViewById(R.id.list);
+        stickyList = (StickyListHeadersListView) findViewById(R.id.list);
         
         stickyList.setAdapter(new TestBaseAdapter(this));
 

File: test/com/emilsjolander/components/StickyListHeaders/Test/TestActivity.java
Patch:
@@ -36,4 +36,5 @@ public void onCreate(Bundle savedInstanceState) {
         stickyList = (StickyListHeadersListView) findViewById(R.id.list);
         stickyList.setAdapter(new TestAdapter(this));
     }
+    
 }
\ No newline at end of file

