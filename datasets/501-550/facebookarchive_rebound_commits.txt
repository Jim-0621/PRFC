File: rebound-android/src/main/java/com/facebook/rebound/ChoreographerCompat.java
Patch:
@@ -25,13 +25,13 @@ public class ChoreographerCompat {
   private static final long ONE_FRAME_MILLIS = 17;
   private static final boolean IS_JELLYBEAN_OR_HIGHER =
       Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
-  private static ChoreographerCompat __instance = new ChoreographerCompat();
+  private static final ChoreographerCompat INSTANCE = new ChoreographerCompat();
 
   private Handler mHandler;
   private Choreographer mChoreographer;
 
   public static ChoreographerCompat getInstance() {
-    return __instance;
+    return INSTANCE;
   }
 
   private ChoreographerCompat() {

File: rebound-core/src/main/java/com/facebook/rebound/Spring.java
Patch:
@@ -45,8 +45,9 @@ private static class PhysicsState {
   // thresholds for determining when the spring is at rest
   private double mRestSpeedThreshold = 0.005;
   private double mDisplacementFromRestThreshold = 0.005;
-  private CopyOnWriteArraySet<SpringListener> mListeners = new CopyOnWriteArraySet<SpringListener>();
   private double mTimeAccumulator = 0;
+  private final CopyOnWriteArraySet<SpringListener> mListeners =
+    new CopyOnWriteArraySet<SpringListener>();
 
   private final BaseSpringSystem mSpringSystem;
 

File: rebound-core/src/main/java/com/facebook/rebound/SynchronousLooper.java
Patch:
@@ -11,7 +11,7 @@
 
 public class SynchronousLooper extends SpringLooper {
 
-  public static double SIXTY_FPS = 16.6667;
+  public static final double SIXTY_FPS = 16.6667;
   private double mTimeStep;
   private boolean mRunning;
 

File: rebound-core/src/main/java/com/facebook/rebound/OrigamiValueConverter.java
Patch:
@@ -1,8 +1,8 @@
 package com.facebook.rebound;
 
 /**
- * Helper math util to convert tension & friction values from the Origami design tool to values that
- * the spring system needs.
+ * Helper math util to convert tension &amp; friction values from the Origami design tool to values
+ * that the spring system needs.
  */
 public class OrigamiValueConverter {
 

File: rebound-core/src/main/java/com/facebook/rebound/Spring.java
Patch:
@@ -198,6 +198,7 @@ public double getEndValue() {
 
   /**
    * set the velocity on the spring in pixels per second
+   * @param velocity velocity value
    * @return the spring for chaining
    */
   public Spring setVelocity(double velocity) {
@@ -286,7 +287,6 @@ public boolean isOvershooting() {
    * realTimeDelta.
    * The math is inlined inside the loop since it made a huge performance impact when there are
    * several springs being advanced.
-   * @param time clock time
    * @param realDeltaTime clock drift
    */
   void advance(double realDeltaTime) {
@@ -478,6 +478,7 @@ public boolean isAtRest() {
   /**
    * Set the spring to be at rest by making its end value equal to its current value and setting
    * velocity to 0.
+   * @return this object
    */
   public Spring setAtRest() {
     mEndValue = mCurrentState.position;

File: rebound-core/src/main/java/com/facebook/rebound/OrigamiValueConverter.java
Patch:
@@ -1,8 +1,8 @@
 package com.facebook.rebound;
 
 /**
- * Helper math util to convert tension & friction values from the Origami design tool to values that
- * the spring system needs.
+ * Helper math util to convert tension &amp; friction values from the Origami design tool to values
+ * that the spring system needs.
  */
 public class OrigamiValueConverter {
 

File: rebound-core/src/main/java/com/facebook/rebound/Spring.java
Patch:
@@ -198,6 +198,7 @@ public double getEndValue() {
 
   /**
    * set the velocity on the spring in pixels per second
+   * @param velocity velocity value
    * @return the spring for chaining
    */
   public Spring setVelocity(double velocity) {
@@ -286,7 +287,6 @@ public boolean isOvershooting() {
    * realTimeDelta.
    * The math is inlined inside the loop since it made a huge performance impact when there are
    * several springs being advanced.
-   * @param time clock time
    * @param realDeltaTime clock drift
    */
   void advance(double realDeltaTime) {
@@ -478,6 +478,7 @@ public boolean isAtRest() {
   /**
    * Set the spring to be at rest by making its end value equal to its current value and setting
    * velocity to 0.
+   * @return this object
    */
   public Spring setAtRest() {
     mEndValue = mCurrentState.position;

File: rebound-android/src/main/java/com/facebook/rebound/ChoreographerCompat.java
Patch:
@@ -25,13 +25,13 @@ public class ChoreographerCompat {
   private static final long ONE_FRAME_MILLIS = 17;
   private static final boolean IS_JELLYBEAN_OR_HIGHER =
       Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
-  private static ChoreographerCompat __instance = new ChoreographerCompat();
+  private static final ChoreographerCompat INSTANCE = new ChoreographerCompat();
 
   private Handler mHandler;
   private Choreographer mChoreographer;
 
   public static ChoreographerCompat getInstance() {
-    return __instance;
+    return INSTANCE;
   }
 
   private ChoreographerCompat() {

File: rebound-core/src/main/java/com/facebook/rebound/Spring.java
Patch:
@@ -45,8 +45,9 @@ private static class PhysicsState {
   // thresholds for determining when the spring is at rest
   private double mRestSpeedThreshold = 0.005;
   private double mDisplacementFromRestThreshold = 0.005;
-  private CopyOnWriteArraySet<SpringListener> mListeners = new CopyOnWriteArraySet<SpringListener>();
   private double mTimeAccumulator = 0;
+  private final CopyOnWriteArraySet<SpringListener> mListeners =
+    new CopyOnWriteArraySet<SpringListener>();
 
   private final BaseSpringSystem mSpringSystem;
 

File: rebound-core/src/main/java/com/facebook/rebound/SynchronousLooper.java
Patch:
@@ -11,7 +11,7 @@
 
 public class SynchronousLooper extends SpringLooper {
 
-  public static double SIXTY_FPS = 16.6667;
+  public static final double SIXTY_FPS = 16.6667;
   private double mTimeStep;
   private boolean mRunning;
 

File: rebound-android/src/main/java/com/facebook/rebound/AndroidSpringLooperFactory.java
Patch:
@@ -63,6 +63,7 @@ public void run() {
           }
           long currentTime = SystemClock.uptimeMillis();
           mSpringSystem.loop(currentTime - mLastTime);
+          mLastTime = currentTime;
           mHandler.post(mLooperRunnable);
         }
       };

File: rebound-core/src/main/java/com/facebook/rebound/BaseSpringSystem.java
Patch:
@@ -31,7 +31,7 @@ public class BaseSpringSystem {
   private final Set<Spring> mActiveSprings = new CopyOnWriteArraySet<Spring>();
   private final SpringClock mClock;
   private final SpringLooper mSpringLooper;
-  private final ReentrantCallback<SpringSystemListener> mListeners = new ReentrantCallback<SpringSystemListener>();
+  private final CopyOnWriteArraySet<SpringSystemListener> mListeners = new CopyOnWriteArraySet<SpringSystemListener>();
   private long mLastTimeMillis = -1;
   private boolean mIdle = true;
 
@@ -198,14 +198,14 @@ public void addListener(SpringSystemListener newListener) {
     if (newListener == null) {
       throw new IllegalArgumentException("newListener is required");
     }
-    mListeners.addListener(newListener);
+    mListeners.add(newListener);
   }
 
   public void removeListener(SpringSystemListener listenerToRemove) {
     if (listenerToRemove == null) {
       throw new IllegalArgumentException("listenerToRemove is required");
     }
-    mListeners.removeListener(listenerToRemove);
+    mListeners.remove(listenerToRemove);
   }
 
   public void removeAllListeners() {

File: rebound-core/src/main/java/com/facebook/rebound/BaseSpringSystem.java
Patch:
@@ -31,7 +31,7 @@ public class BaseSpringSystem {
   private final Set<Spring> mActiveSprings = new CopyOnWriteArraySet<Spring>();
   private final SpringClock mClock;
   private final SpringLooper mSpringLooper;
-  private final ReentrantCallback<SpringSystemListener> mListeners = new ReentrantCallback<SpringSystemListener>();
+  private final CopyOnWriteArraySet<SpringSystemListener> mListeners = new CopyOnWriteArraySet<SpringSystemListener>();
   private long mLastTimeMillis = -1;
   private boolean mIdle = true;
 
@@ -198,14 +198,14 @@ public void addListener(SpringSystemListener newListener) {
     if (newListener == null) {
       throw new IllegalArgumentException("newListener is required");
     }
-    mListeners.addListener(newListener);
+    mListeners.add(newListener);
   }
 
   public void removeListener(SpringSystemListener listenerToRemove) {
     if (listenerToRemove == null) {
       throw new IllegalArgumentException("listenerToRemove is required");
     }
-    mListeners.removeListener(listenerToRemove);
+    mListeners.remove(listenerToRemove);
   }
 
   public void removeAllListeners() {

