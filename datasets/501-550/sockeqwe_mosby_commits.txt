File: mvi/src/main/java/com/hannesdorfmann/mosby3/FragmentMviDelegateImpl.java
Patch:
@@ -72,11 +72,11 @@ public FragmentMviDelegateImpl(@NonNull MviDelegateCallback<V, P> delegateCallba
       @NonNull Fragment fragment, boolean keepPresenterDuringScreenOrientationChange,
       boolean keepPresenterOnBackstack) {
     if (delegateCallback == null) {
-      throw new NullPointerException("delegateCallback == null");
+      throw new NullPointerException("MviDelegateCallback is null!");
     }
 
     if (fragment == null) {
-      throw new NullPointerException("fragment == null");
+      throw new NullPointerException("Fragment is null!");
     }
 
     if (!keepPresenterDuringScreenOrientationChange && keepPresenterOnBackstack) {

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/view/shoppingcartoverview/ShoppingCartOverviewPresenter.java
Patch:
@@ -57,7 +57,9 @@ public ShoppingCartOverviewPresenter(ShoppingCart shoppingCart,
         intent(ShoppingCartOverviewView::selectItemsIntent)
             .mergeWith(clearSelectionIntent.map(ignore -> Collections.emptyList()))
             .doOnNext(items -> Timber.d("intent: selected items %d", items.size()))
-            .startWith(new ArrayList<Product>(0));
+            .startWith(new ArrayList<Product>(0))
+            .publish()
+            .refCount();
 
     //
     // Delete multiple selected Items

File: mvi/src/main/java/com/hannesdorfmann/mosby3/mvi/MviDialogFragment.java
Patch:
@@ -24,6 +24,7 @@
 import android.support.annotation.CallSuper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+import android.support.v4.app.DialogFragment;
 import android.support.v4.app.Fragment;
 import android.util.Log;
 import android.view.LayoutInflater;
@@ -55,7 +56,7 @@
  * @author Hannes Dorfmann
  * @since 3.0.0
  */
-public abstract class MviDialogFragment<V extends MvpView, P extends MviPresenter<V, ?>> extends Fragment
+public abstract class MviDialogFragment<V extends MvpView, P extends MviPresenter<V, ?>> extends DialogFragment
     implements MvpView, MviDelegateCallback<V, P> {
 
   private boolean isRestoringViewState = false;

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomeFragment.java
Patch:
@@ -109,7 +109,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
   }
 
   @Override public Observable<Boolean> loadFirstPageIntent() {
-    return Observable.just(true).doOnComplete(() -> Timber.d("firstPage completed"));
+    return Observable.just(true);
   }
 
   @Override public Observable<Boolean> loadNextPageIntent() {

File: mvp-queuing-presenter/src/test/java/com/hannesdorfmann/mosby3/mvp/MvpQueuingBasePresenterTest.java
Patch:
@@ -4,7 +4,7 @@
 import org.junit.Assert;
 import org.junit.Test;
 
-public class MvpQueueingBasePresenterTest {
+public class MvpQueuingBasePresenterTest {
   @Test public void queueActionsAndExecuteOnceViewAttached() throws Exception {
 
     TestView view = new TestView();

File: mvp-common/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpPresenter.java
Patch:
@@ -24,7 +24,7 @@
  *
  * <p>
  * Mosby assumes that all interaction (i.e. updating the View) between Presenter and View is
- * executed on android's main UI thread.
+ * executed on Android's main UI thread.
  * </p>
  *
  * @author Hannes Dorfmann

File: mvp-queuing-presenter/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpQueuingBasePresenter.java
Patch:
@@ -26,7 +26,7 @@ public class MvpQueuingBasePresenter<V extends MvpView> implements MvpPresenter<
    * // do something
    * ...
    *
-   * ifViewAtached( view -> view.showSuccessful())
+   * ifViewAttached( view -> view.showSuccessful())
    * }
    *
    * @param <V> The Type of the View
@@ -97,4 +97,4 @@ private void runQueuedActions() {
       }
     }
   }
-}
\ No newline at end of file
+}

File: mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpBasePresenter.java
Patch:
@@ -32,7 +32,7 @@
  *    // do something
  *    ...
  *
- *    ifViewAtached( view -> view.showSuccessful())
+ *    ifViewAttached( view -> view.showSuccessful())
  *  }
  *
  * }
@@ -54,7 +54,7 @@ public class MvpBasePresenter<V extends MvpView> implements MvpPresenter<V> {
    *    // do something
    *    ...
    *
-   *    ifViewAtached( view -> view.showSuccessful())
+   *    ifViewAttached( view -> view.showSuccessful())
    *  }
    * @param <V> The Type of the View
    */
@@ -114,7 +114,7 @@ public interface ViewAction<V> {
    * attached
    * while trying to execute the action. false, if no exception should be thrown (but action will
    * not executed either since no view attached)
-   * @param action The {@link ViewAction} that will be exceuted if a view is attached. Here is
+   * @param action The {@link ViewAction} that will be executed if a view is attached. Here is
    * where
    * you call view.isLoading etc. Use the view reference passed as parameter to {@link
    * ViewAction#run(Object)} and not deprecated method {@link #getView()}

File: mvi/src/main/java/com/hannesdorfmann/mosby3/mvi/MviFragment.java
Patch:
@@ -39,7 +39,7 @@
 /**
  * <p>
  * This abstract class can be used to extend from to implement an Model-View-Intent pattern with
- * this activity as View and a {@link MviPresenter} to coordinate the View and the underlying
+ * this fragment as View and a {@link MviPresenter} to coordinate the View and the underlying
  * model (business logic)
  * </p>
  *
@@ -147,15 +147,15 @@ public abstract class MviFragment<V extends MvpView, P extends MviPresenter<V, ?
    * Get the mvp delegate. This is internally used for creating presenter, attaching and detaching
    * viewState from presenter.
    *
-   * <p><b>Please note that only one instance of mvp delegate should be used per Activity
+   * <p><b>Please note that only one instance of mvp delegate should be used per Fragment
    * instance</b>.
    * </p>
    *
    * <p>
    * Only override this method if you really know what you are doing.
    * </p>
    *
-   * @return {@link ActivityMviDelegate}
+   * @return {@link FragmentMviDelegate}
    */
   @NonNull public FragmentMviDelegate<V, P> getMvpDelegate() {
     if (mvpDelegate == null) {

File: mvp-lce/src/main/java/com/hannesdorfmann/mosby3/mvp/lce/MvpLceActivity.java
Patch:
@@ -102,7 +102,7 @@ public abstract class MvpLceActivity<CV extends View, M, V extends MvpLceView<M>
   }
 
   /**
-   * Create the loading view. Default is {@code findViewById(R.id.errorView)}
+   * Create the error view. Default is {@code findViewById(R.id.errorView)}
    * @return the error view
    */
   @NonNull protected TextView createErrorView(){

File: mvp-lce/src/main/java/com/hannesdorfmann/mosby3/mvp/lce/MvpLceFragment.java
Patch:
@@ -114,7 +114,7 @@ public abstract class MvpLceFragment<CV extends View, M, V extends MvpLceView<M>
   }
 
   /**
-   * Create the loading view. Default is {@code findViewById(R.id.errorView)}
+   * Create the error view. Default is {@code findViewById(R.id.errorView)}
    *
    * @param view The main view returned from {@link #onCreateView(LayoutInflater, ViewGroup, *
    * Bundle)}

File: mvi/src/main/java/com/hannesdorfmann/mosby3/mvi/MviFragment.java
Patch:
@@ -170,7 +170,7 @@ public abstract class MviFragment<V extends MvpView, P extends MviPresenter<V, ?
       return (V) this;
     } catch (ClassCastException e) {
       String msg =
-          "Couldn't cast the View to the corresponding View interface. Most likely you forgot to add \"Activity implements YourMvpViewInterface\".\"";
+          "Couldn't cast the View to the corresponding View interface. Most likely you forgot to add \"Fragment implements YourMvpViewInterface\".\"";
       Log.e(this.toString(), msg);
       throw new RuntimeException(msg, e);
     }

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomeFragment.java
Patch:
@@ -150,7 +150,7 @@ private void renderShowData(HomeViewState state) {
       // scroll to the end of the list so that the user sees the load more progress bar
       recyclerView.smoothScrollToPosition(adapter.getItemCount());
     }
-    adapter.setItems(state.getData());
+    adapter.setItems(state.getData()); // TODO error: this must be done before setLoading() otherwise error will occure. see https://github.com/sockeqwe/mosby/issues/244
 
     boolean pullToRefreshFinished = swipeRefreshLayout.isRefreshing()
         && !state.isLoadingPullToRefresh()

File: mvi-common/src/test/java/com/hannesdorfmann/mosby3/mvi/DisposableIntentObserverTest.java
Patch:
@@ -17,8 +17,8 @@
 
 package com.hannesdorfmann.mosby3.mvi;
 
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.reactivex.Observable;
+import io.reactivex.Observer;
 import io.reactivex.observers.TestObserver;
 import io.reactivex.subjects.PublishSubject;
 import org.junit.Assert;
@@ -27,7 +27,6 @@
 /**
  * @author Hannes Dorfmann
  */
-@SuppressFBWarnings({"RV_RETURN_VALUE_IGNORED"})
 public class DisposableIntentObserverTest {
 
   @Test public void forwardOnNextAndOnCompleteToPublishShubject() {

File: mvi/src/main/java/com/hannesdorfmann/mosby3/ActivityMviDelegateImpl.java
Patch:
@@ -24,7 +24,6 @@
 import com.hannesdorfmann.mosby3.mvi.MviPresenter;
 import com.hannesdorfmann.mosby3.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby3.mvp.MvpView;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.UUID;
 
 /**
@@ -43,7 +42,6 @@ public class ActivityMviDelegateImpl<V extends MvpView, P extends MviPresenter<V
     implements ActivityMviDelegate {
 
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "ActivityMviDelegateImpl";
   private static final String KEY_MOSBY_VIEW_ID = "com.hannesdorfmann.mosby3.activity.mvi.id";

File: mvi/src/main/java/com/hannesdorfmann/mosby3/FragmentMviDelegateImpl.java
Patch:
@@ -31,7 +31,6 @@
 import android.view.ViewGroup;
 import com.hannesdorfmann.mosby3.mvi.MviPresenter;
 import com.hannesdorfmann.mosby3.mvp.MvpView;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.UUID;
 
 /**
@@ -53,7 +52,6 @@
 public class FragmentMviDelegateImpl<V extends MvpView, P extends MviPresenter<V, ?>>
     implements FragmentMviDelegate<V, P> {
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "FragmentMviDelegateImpl";
   private static final String KEY_MOSBY_VIEW_ID = "com.hannesdorfmann.mosby3.fragment.mvi.id";
@@ -189,7 +187,9 @@ private boolean retainPresenterInstance(boolean keepPresenterOnBackstack, Activi
         retainPresenterInstance(keepPresenterOnBackstack, activity, fragment);
 
     presenter.detachView(retainPresenterInstance);
-    if (!retainPresenterInstance && mosbyViewId != null) { // mosbyViewId == null if keepPresenterDuringScreenOrientationChange == false
+    if (!retainPresenterInstance
+        && mosbyViewId
+        != null) { // mosbyViewId == null if keepPresenterDuringScreenOrientationChange == false
       PresenterManager.remove(activity, mosbyViewId);
     }
 

File: mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpBasePresenter.java
Patch:
@@ -66,7 +66,6 @@
  *
  * @param <V> type of the {@link MvpView}
  * @author Hannes Dorfmann
- * @see MvpNullObjectBasePresenter
  * @since 1.0.0
  */
 public class MvpBasePresenter<V extends MvpView> implements MvpPresenter<V> {

File: presentermanager/src/main/java/com/hannesdorfmann/mosby3/PresenterManager.java
Patch:
@@ -13,7 +13,6 @@
 import android.view.View;
 import com.hannesdorfmann.mosby3.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby3.mvp.MvpView;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.Map;
 import java.util.UUID;
 
@@ -34,7 +33,6 @@
  */
 final public class PresenterManager {
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   public static final String DEBUG_TAG = "PresenterManager";
   final static String KEY_ACTIVITY_ID = "com.hannesdorfmann.mosby3.MosbyPresenterManagerActivityId";

File: sample-mail/src/main/java/com/hannesdorfmann/mosby3/sample/mail/model/mail/MailProvider.java
Patch:
@@ -21,7 +21,6 @@
 import com.hannesdorfmann.mosby3.sample.mail.model.account.NotAuthenticatedException;
 import com.hannesdorfmann.mosby3.sample.mail.model.mail.statistics.MailStatistics;
 import com.hannesdorfmann.mosby3.sample.mail.model.mail.statistics.MailsCount;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
@@ -39,7 +38,7 @@
  */
 public class MailProvider {
 
-  @SuppressFBWarnings("MS_SHOULD_BE_FINAL") public static int DELAY = 2000;
+  public static int DELAY = 2000;
   public static int authExceptionEach = 15;
   public static int errorEach = 5;
   private int counter = 0;

File: viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/ActivityMvpViewStateDelegateImpl.java
Patch:
@@ -25,7 +25,6 @@
 import com.hannesdorfmann.mosby3.mvp.MvpView;
 import com.hannesdorfmann.mosby3.mvp.viewstate.RestorableViewState;
 import com.hannesdorfmann.mosby3.mvp.viewstate.ViewState;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**
  * The default implementation for {@link ActivityMvpDelegate} that supports {@link ViewState}
@@ -36,7 +35,6 @@
 public class ActivityMvpViewStateDelegateImpl<V extends MvpView, P extends MvpPresenter<V>, VS extends ViewState<V>>
     extends ActivityMvpDelegateImpl<V, P> {
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "ActivityMvpViewStateDel";
 

File: viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpViewStateDelegateImpl.java
Patch:
@@ -23,10 +23,8 @@
 import com.hannesdorfmann.mosby3.PresenterManager;
 import com.hannesdorfmann.mosby3.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby3.mvp.MvpView;
-import com.hannesdorfmann.mosby3.mvp.viewstate.RestorableParcelableViewState;
 import com.hannesdorfmann.mosby3.mvp.viewstate.RestorableViewState;
 import com.hannesdorfmann.mosby3.mvp.viewstate.ViewState;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 
 /**
  * The {@link FragmentMvpDelegateImpl} with {@link ViewState} support
@@ -37,7 +35,6 @@
 public class FragmentMvpViewStateDelegateImpl<V extends MvpView, P extends MvpPresenter<V>, VS extends ViewState<V>>
     extends FragmentMvpDelegateImpl<V, P> {
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "FragmentMvpDelegateImpl";
   private MvpViewStateDelegateCallback<V, P, VS> delegateCallback;

File: viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/ViewGroupMvpViewStateDelegateImpl.java
Patch:
@@ -26,7 +26,6 @@
 import com.hannesdorfmann.mosby3.mvp.MvpView;
 import com.hannesdorfmann.mosby3.mvp.viewstate.RestorableParcelableViewState;
 import com.hannesdorfmann.mosby3.mvp.viewstate.ViewState;
-import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.UUID;
 
 /**
@@ -40,7 +39,6 @@ public class ViewGroupMvpViewStateDelegateImpl<V extends MvpView, P extends MvpP
 
   // TODO allow custom save state hook in
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "ViewGroupMvpDelegateImp";
 

File: mvi/src/main/java/com/hannesdorfmann/mosby3/ActivityMviDelegateImpl.java
Patch:
@@ -207,7 +207,9 @@ static boolean retainPresenterInstance(boolean keepPresenterInstance, Activity a
     }
 
     if (!retainPresenterInstance){
-      PresenterManager.remove(activity, mosbyViewId);
+      if (mosbyViewId != null) { // mosbyViewId == null if keepPresenterInstance == false
+        PresenterManager.remove(activity, mosbyViewId);
+      }
       Log.d(DEBUG_TAG, "Destroying Presenter permanently " + presenter);
     }
   }

File: mvi/src/main/java/com/hannesdorfmann/mosby3/FragmentMviDelegateImpl.java
Patch:
@@ -189,7 +189,7 @@ private boolean retainPresenterInstance(boolean keepPresenterOnBackstack, Activi
         retainPresenterInstance(keepPresenterOnBackstack, activity, fragment);
 
     presenter.detachView(retainPresenterInstance);
-    if (!retainPresenterInstance) {
+    if (!retainPresenterInstance && mosbyViewId != null) { // mosbyViewId == null if keepPresenterDuringScreenOrientationChange == false
       PresenterManager.remove(activity, mosbyViewId);
     }
 

File: mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpDelegateImpl.java
Patch:
@@ -224,7 +224,7 @@ protected boolean retainPresenterInstance() {
 
     P presenter = getPresenter();
     presenter.detachView(retainPresenterInstance);
-    if (!retainPresenterInstance) {
+    if (!retainPresenterInstance && mosbyViewId != null) { // mosbyViewId is null if keepPresenterInstanceDuringScreenOrientationChanges  == false
       PresenterManager.remove(activity, mosbyViewId);
     }
 

File: mvp/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/ViewGroupMvpDelegateImpl.java
Patch:
@@ -50,6 +50,7 @@ public class ViewGroupMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<
     implements ViewGroupMvpDelegate<V, P> {
 
   // TODO allow custom save state hook in
+
   @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be set for debugging")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "ViewGroupMvpDelegateImp";

File: viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/ActivityMvpViewStateDelegateImpl.java
Patch:
@@ -36,7 +36,7 @@
 public class ActivityMvpViewStateDelegateImpl<V extends MvpView, P extends MvpPresenter<V>, VS extends ViewState<V>>
     extends ActivityMvpDelegateImpl<V, P> {
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be set for debugging")
+  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "ActivityMvpViewStateDel";
 

File: viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/FragmentMvpViewStateDelegateImpl.java
Patch:
@@ -37,7 +37,7 @@
 public class FragmentMvpViewStateDelegateImpl<V extends MvpView, P extends MvpPresenter<V>, VS extends ViewState<V>>
     extends FragmentMvpDelegateImpl<V, P> {
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be set for debugging")
+  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "FragmentMvpDelegateImpl";
   private MvpViewStateDelegateCallback<V, P, VS> delegateCallback;

File: viewstate/src/main/java/com/hannesdorfmann/mosby3/mvp/delegate/ViewGroupMvpViewStateDelegateImpl.java
Patch:
@@ -40,7 +40,7 @@ public class ViewGroupMvpViewStateDelegateImpl<V extends MvpView, P extends MvpP
 
   // TODO allow custom save state hook in
 
-  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be set for debugging")
+  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Could be enabled for debugging purpose")
   public static boolean DEBUG = false;
   private static final String DEBUG_TAG = "ViewGroupMvpDelegateImp";
 

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/dependencyinjection/DependencyInjection.java
Patch:
@@ -36,6 +36,7 @@
 import com.hannesdorfmann.mosby3.sample.mvi.view.shoppingcartlabel.ShoppingCartLabelPresenter;
 import com.hannesdorfmann.mosby3.sample.mvi.view.shoppingcartoverview.ShoppingCartOverviewItem;
 import com.hannesdorfmann.mosby3.sample.mvi.view.shoppingcartoverview.ShoppingCartOverviewPresenter;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import io.reactivex.Observable;
 import io.reactivex.subjects.PublishSubject;
 import java.util.logging.Level;
@@ -53,6 +54,7 @@
  */
 public class DependencyInjection {
 
+  @SuppressFBWarnings(value = "MS_SHOULD_BE_FINAL", justification = "Changeable for unit testing")
   public static String BASE_URL = "https://raw.githubusercontent.com";
   public static final String BASE_URL_BRANCH = "master";
   public static final String BASE_IMAGE_URL = BASE_URL

File: sample-mail/src/main/java/com/hannesdorfmann/mosby3/sample/mail/base/view/BaseViewStateActivity.java
Patch:
@@ -22,15 +22,16 @@
 import com.hannesdorfmann.mosby3.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby3.mvp.MvpView;
 import com.hannesdorfmann.mosby3.mvp.viewstate.MvpViewStateActivity;
+import com.hannesdorfmann.mosby3.mvp.viewstate.ViewState;
 import icepick.Icepick;
 
 /**
  * Base class which adds Butterknife, icepick and depenedncy injection to a MvpViewStateActivity
  *
  * @author Hannes Dorfmann
  */
-public abstract class BaseViewStateActivity<V extends MvpView, P extends MvpPresenter<V>>
-    extends MvpViewStateActivity<V, P> {
+public abstract class BaseViewStateActivity<V extends MvpView, P extends MvpPresenter<V>, VS extends ViewState<V>>
+    extends MvpViewStateActivity<V, P, VS> {
 
   @Override protected void onCreate(Bundle savedInstanceState) {
     injectDependencies();

File: sample-mail/src/main/java/com/hannesdorfmann/mosby3/sample/mail/base/view/BaseViewStateFragment.java
Patch:
@@ -30,13 +30,14 @@
 import com.hannesdorfmann.mosby3.mvp.viewstate.MvpViewStateFragment;
 
 import butterknife.Unbinder;
+import com.hannesdorfmann.mosby3.mvp.viewstate.ViewState;
 import icepick.Icepick;
 
 /**
  * @author Hannes Dorfmann
  */
-public abstract class BaseViewStateFragment<V extends MvpView, P extends MvpPresenter<V>>
-    extends MvpViewStateFragment<V, P> {
+public abstract class BaseViewStateFragment<V extends MvpView, P extends MvpPresenter<V>, VS extends ViewState<V>>
+    extends MvpViewStateFragment<V, P, VS> {
 
   private Unbinder unbinder;
 

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/SampleApplication.java
Patch:
@@ -57,5 +57,6 @@ public static RefWatcher getRefWatcher(Context context) {
       return;
     }
     refWatcher = LeakCanary.install(this);
+    Timber.d("Starting Application");
   }
 }

File: mvi/src/main/java/com/hannesdorfmann/mosby3/mvi/layout/MviLinearLayout.java
Patch:
@@ -36,7 +36,7 @@
  * @author Hannes Dorfmann
  * @since 3.0.0
  */
-public abstract class MviLinearLayout<V extends MvpView, P extends MviPresenter<V, P>>
+public abstract class MviLinearLayout<V extends MvpView, P extends MviPresenter<V, ?>>
     extends LinearLayout implements MvpView, ViewGroupMviDelegateCallback<V, P> {
 
   private boolean isRestoringViewState = false;

File: mvi-integration-test/src/main/java/com/hannesdorfmann/mosby3/mvi/integrationtest/lifecycle/LifecycleTestPresenter.java
Patch:
@@ -62,7 +62,7 @@ public class LifecycleTestPresenter extends MviBasePresenter<LifecycleTestView,
       throw new IllegalStateException(
           "unbindIntents() is called more than once. Invokations: " + unbindIntentInvocations);
     }
-    
+
     unbindIntentInvocations++;
   }
 }

File: mvi/src/main/java/com/hannesdorfmann/mosby3/FragmentMviDelegateImpl.java
Patch:
@@ -142,7 +142,7 @@ public FragmentMviDelegateImpl(@NonNull MviDelegateCallback<V, P> delegateCallba
 
     Activity activity = getActivity();
     boolean retainPresenterInstance =
-        (keepPresenterDuringScreenOrientationChange && activity.isChangingConfigurations()) || (
+        ( ActivityMviDelegateImpl.retainPresenterInstance(keepPresenterDuringScreenOrientationChange, activity)) || (
             BackstackAccessor.isFragmentOnBackStack(fragment)
                 && keepPresenterOnBackstack);
 

File: utils-fragment-integration-test/src/androidTest/java/com/hannesdorfmann/mosby3/utils/fragment/integrationtest/backstack/BackstackActivityWithChildFragmentsTest.java
Patch:
@@ -21,6 +21,7 @@
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 import junit.framework.Assert;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,6 +36,7 @@
   @Rule public ActivityTestRule<BackstackActivityWithChildFragments> rule =
       new ActivityTestRule<>(BackstackActivityWithChildFragments.class);
 
+  @Ignore("We trust that FragmentManager implementation runs as expected")
   @Test public void fragmentsOnBackstack() throws Exception {
     // Context of the app under test.
     BackstackActivityWithChildFragments activity = rule.getActivity();

File: utils-fragment-integration-test/src/androidTest/java/com/hannesdorfmann/mosby3/utils/fragment/integrationtest/backstack/ReplaceFragmentTransactionActivityTest.java
Patch:
@@ -21,6 +21,7 @@
 import android.support.test.rule.ActivityTestRule;
 import android.support.test.runner.AndroidJUnit4;
 import junit.framework.Assert;
+import org.junit.Ignore;
 import org.junit.Rule;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -35,6 +36,7 @@
   @Rule public ActivityTestRule<ReplaceFragmentTransactionActivity> rule =
       new ActivityTestRule<>(ReplaceFragmentTransactionActivity.class);
 
+  @Ignore("We trust that FragmentManager implementation runs as expected")
   @Test public void fragmentsOnBackstack() throws Exception {
     // Context of the app under test.
     ReplaceFragmentTransactionActivity activity = rule.getActivity();

File: mvp-common/src/main/java/com/hannesdorfmann/mosby3/mvp/MvpNullObjectBasePresenter.java
Patch:
@@ -87,7 +87,7 @@ private boolean isSubTypeOfMvpView(Class<?> klass) {
     }
     Class[] superInterfaces = klass.getInterfaces();
     for (int i = 0; i < superInterfaces.length; i++) {
-      if (isSubTypeOfMvpView(superInterfaces[0])) {
+      if (isSubTypeOfMvpView(superInterfaces[i])) {
         return true;
       }
     }

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/businesslogic/DetailsInteractor.java
Patch:
@@ -44,7 +44,7 @@ public DetailsInteractor(ProductBackendApiDecorator backendApi, ShoppingCart sho
    */
   public Observable<ProductDetail> getDetails(int productId) {
     List<Observable<?>> observables =
-        Arrays.asList(backendApi.getProduct(productId), shoppingCart.shoppingCart());
+        Arrays.asList(backendApi.getProduct(productId), shoppingCart.itemsInShoppingCart());
 
     return Observable.combineLatest(observables, objects -> {
       Product product = (Product) objects[0];

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/businesslogic/ShoppingCart.java
Patch:
@@ -37,7 +37,7 @@ public class ShoppingCart {
   /**
    * An observable to observe the items in the shopping cart
    */
-  public Observable<List<Product>> shoppingCart() {
+  public Observable<List<Product>> itemsInShoppingCart() {
     return itemsInShoppingCart;
   }
 

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/view/home/HomePresenter.java
Patch:
@@ -248,7 +248,7 @@ private Pair<Integer, AdditionalItemsLoadable> findAdditionalItems(String catego
 
     throw new RuntimeException("No "
         + AdditionalItemsLoadable.class.getSimpleName()
-        + " has been fround for category = "
+        + " has been found for category = "
         + categoryName);
   }
 }

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/view/shoppingcartlist/ShoppingCartFragment.java
Patch:
@@ -83,6 +83,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
   }
 
   @Override public void render(List<ShoppingCartItem> itemsInShoppingCart) {
+    Timber.d("Render %s ", itemsInShoppingCart);
     adapter.setItems(itemsInShoppingCart);
   }
 }

File: sample-mvi/src/main/java/com/hannesdorfmann/mosby3/sample/mvi/view/ui/viewholder/ShoppingCartItemViewHolder.java
Patch:
@@ -80,7 +80,7 @@ public void bind(ShoppingCartItem item) {
         .into(image);
 
     name.setText(product.getName());
-    price.setText(String.format(Locale.US, "%.2f", product.getPrice()));
+    price.setText(String.format(Locale.US, "$ %.2f", product.getPrice()));
 
     if (item.isSelected()) {
       if (Build.VERSION.SDK_INT >= 23) {

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java
Patch:
@@ -164,6 +164,7 @@ protected void animateErrorViewIn() {
     super.onDestroyView();
     loadingView = null;
     contentView = null;
+    errorView.setOnClickListener(null);
     errorView = null;
   }
 }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceActivity.java
Patch:
@@ -73,7 +73,7 @@ public abstract class MvpLceActivity<CV extends View, M, V extends MvpLceView<M>
 
     if (errorView == null) {
       throw new NullPointerException(
-          "Error view is null! Have you specified a content view in your layout xml file?"
+          "Error view is null! Have you specified an error view in your layout xml file?"
               + " You have to give your error View the id R.id.errorView");
     }
 

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceActivity.java
Patch:
@@ -74,7 +74,7 @@ public abstract class MvpLceActivity<CV extends View, M, V extends MvpLceView<M>
     if (errorView == null) {
       throw new NullPointerException(
           "Error view is null! Have you specified a content view in your layout xml file?"
-              + " You have to give your error View the id R.id.contentView");
+              + " You have to give your error View the id R.id.errorView");
     }
 
     errorView.setOnClickListener(new View.OnClickListener() {

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpActivity.java
Patch:
@@ -24,7 +24,7 @@
 import com.hannesdorfmann.mosby.mvp.delegate.ActivityMvpDelegateImpl;
 
 /**
- * An Activity that uses an {@link MvpPresenter} to implement a Model-View-Presenter
+ * An Activity that uses a {@link MvpPresenter} to implement a Model-View-Presenter
  * architecture.
  *
  * @author Hannes Dorfmann

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpFragment.java
Patch:
@@ -28,7 +28,7 @@
 import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 
 /**
- * A Fragment that uses an {@link MvpPresenter} to implement a Model-View-Presenter
+ * A Fragment that uses a {@link MvpPresenter} to implement a Model-View-Presenter
  * architecture
  *
  * @author Hannes Dorfmann

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpDelegateImpl.java
Patch:
@@ -106,14 +106,14 @@ protected MvpInternalDelegate<V, P> getInternalDelegate() {
   @Override public Object onRetainCustomNonConfigurationInstance() {
 
     P presenter = delegateCallback.shouldInstanceBeRetained() ? delegateCallback.getPresenter() : null;
-    Object nonMosbyConfiguraionInstance =
+    Object nonMosbyConfigurationInstance =
         delegateCallback.onRetainNonMosbyCustomNonConfigurationInstance();
 
-    if (presenter == null && nonMosbyConfiguraionInstance == null) {
+    if (presenter == null && nonMosbyConfigurationInstance == null) {
       return null;
     }
 
-    return new ActivityMvpNonConfigurationInstances<>(presenter, nonMosbyConfiguraionInstance);
+    return new ActivityMvpNonConfigurationInstances<>(presenter, nonMosbyConfigurationInstance);
   }
 
   @Override public Object getNonMosbyLastCustomNonConfigurationInstance() {

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/base/view/viewstate/AuthCastedArrayListViewState.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * @author Hannes Dorfmann
  */
+@SuppressWarnings("ParcelCreator")
 public class AuthCastedArrayListViewState<D extends List<? extends Parcelable>, V extends AuthView<D>>
     extends CastedArrayListLceViewState<D, V> implements AuthViewState<D, V> {
 

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/base/view/viewstate/AuthParcelableDataViewState.java
Patch:
@@ -23,6 +23,7 @@
 /**
  * @author Hannes Dorfmann
  */
+@SuppressWarnings("ParcelCreator")
 public class AuthParcelableDataViewState<D extends Parcelable, V extends AuthView<D>>
     extends ParcelableDataLceViewState<D, V> implements AuthViewState<D, V> {
 

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/menu/MenuViewState.java
Patch:
@@ -25,6 +25,7 @@
 /**
  * @author Hannes Dorfmann
  */
+@SuppressWarnings("ParcelCreator")
 public class MenuViewState extends AuthCastedArrayListViewState<List<Label>, MenuView> {
 
   private Account account;

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/data/VoidViewState.java
Patch:
@@ -33,5 +33,6 @@
  * @author Hannes Dorfmann
  * @since 1.0.0
  */
+@SuppressWarnings("ParcelCreator")
 public class VoidViewState<V extends MvpLceView<Void>> extends AbsParcelableLceViewState<Void, V> {
 }

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/layout/MvpViewStateRelativeLayout.java
Patch:
@@ -24,7 +24,7 @@
 import com.hannesdorfmann.mosby.mvp.MvpView;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpViewStateDelegateImpl;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegate;
-import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateViewGroupDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupViewStateDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.layout.MvpRelativeLayout;
 import com.hannesdorfmann.mosby.mvp.viewstate.RestorableParcelableViewState;
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
@@ -36,7 +36,7 @@
  * @since 1.1.0
  */
 public abstract class MvpViewStateRelativeLayout<V extends MvpView, P extends MvpPresenter<V>>
-    extends MvpRelativeLayout<V, P> implements MvpViewStateViewGroupDelegateCallback<V, P> {
+    extends MvpRelativeLayout<V, P> implements ViewGroupViewStateDelegateCallback<V, P> {
 
   private boolean restoringViewState = false;
   protected RestorableParcelableViewState viewState;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpFragment.java
Patch:
@@ -25,7 +25,7 @@
 import android.view.View;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegateImpl;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegate;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 
 /**
  * A Fragment that uses an {@link MvpPresenter} to implement a Model-View-Presenter
@@ -35,7 +35,7 @@
  * @since 1.0.0
  */
 public abstract class MvpFragment<V extends MvpView, P extends MvpPresenter<V>> extends Fragment
-    implements BaseMvpDelegateCallback<V, P>, MvpView {
+    implements MvpDelegateCallback<V, P>, MvpView {
 
   protected FragmentMvpDelegate<V, P> mvpDelegate;
 

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpDelegateCallback.java
Patch:
@@ -27,11 +27,11 @@
  * Activities that you want to support mosby's mvp.
  *
  * @author Hannes Dorfmann
- * @see BaseMvpDelegateCallback
+ * @see MvpDelegateCallback
  * @since 2.0.0
  */
 public interface ActivityMvpDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
-    extends BaseMvpDelegateCallback<V, P> {
+    extends MvpDelegateCallback<V, P> {
 
   /**
    * Return any Object holding the desired state to propagate to the next activity instance. Please

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateImpl.java
Patch:
@@ -35,11 +35,11 @@
 public class FragmentMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V>>
     implements FragmentMvpDelegate<V, P> {
 
-  protected BaseMvpDelegateCallback<V, P> delegateCallback;
+  protected MvpDelegateCallback<V, P> delegateCallback;
   protected MvpInternalDelegate<V, P> internalDelegate;
   private boolean onViewCreatedCalled = false;
 
-  public FragmentMvpDelegateImpl(BaseMvpDelegateCallback<V, P> delegateCallback) {
+  public FragmentMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
       throw new NullPointerException("MvpDelegateCallback is null!");
     }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpDelegateCallback.java
Patch:
@@ -33,7 +33,7 @@
  * @see ActivityMvpDelegateCallback
  * @since 1.1.0
  */
-public interface BaseMvpDelegateCallback<V extends MvpView, P extends MvpPresenter<V>> {
+public interface MvpDelegateCallback<V extends MvpView, P extends MvpPresenter<V>> {
 
   /**
    * Creates the presenter instance

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpInternalDelegate.java
Patch:
@@ -29,9 +29,9 @@
  */
 class MvpInternalDelegate<V extends MvpView, P extends MvpPresenter<V>> {
 
-  protected BaseMvpDelegateCallback<V, P> delegateCallback;
+  protected MvpDelegateCallback<V, P> delegateCallback;
 
-  MvpInternalDelegate(BaseMvpDelegateCallback<V, P> delegateCallback) {
+  MvpInternalDelegate(MvpDelegateCallback<V, P> delegateCallback) {
 
     if (delegateCallback == null) {
       throw new NullPointerException("MvpDelegateCallback is null!");

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ViewGroupMvpDelegateImpl.java
Patch:
@@ -29,10 +29,10 @@
 public class ViewGroupMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V>>
     implements ViewGroupMvpDelegate<V, P> {
 
-  protected BaseMvpDelegateCallback<V, P> delegateCallback;
+  protected MvpDelegateCallback<V, P> delegateCallback;
   protected MvpInternalDelegate<V, P> internalDelegate;
 
-  public ViewGroupMvpDelegateImpl(BaseMvpDelegateCallback<V, P> delegateCallback) {
+  public ViewGroupMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
       throw new NullPointerException("MvpDelegateCallback is null!");
     }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/layout/MvpFrameLayout.java
Patch:
@@ -22,7 +22,7 @@
 import android.widget.FrameLayout;
 import com.hannesdorfmann.mosby.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby.mvp.MvpView;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegate;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegateImpl;
 
@@ -33,7 +33,7 @@
  * @since 1.1.0
  */
 public abstract class MvpFrameLayout<V extends MvpView, P extends MvpPresenter<V>>
-    extends FrameLayout implements BaseMvpDelegateCallback<V, P>, MvpView {
+    extends FrameLayout implements MvpDelegateCallback<V, P>, MvpView {
 
   protected P presenter;
   protected ViewGroupMvpDelegate<V, P> mvpDelegate;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/layout/MvpLinearLayout.java
Patch:
@@ -22,7 +22,7 @@
 import android.widget.LinearLayout;
 import com.hannesdorfmann.mosby.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby.mvp.MvpView;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegate;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegateImpl;
 
@@ -33,7 +33,7 @@
  * @since 1.1
  */
 public abstract class MvpLinearLayout<V extends MvpView, P extends MvpPresenter<V>>
-    extends LinearLayout implements MvpView, BaseMvpDelegateCallback<V, P> {
+    extends LinearLayout implements MvpView, MvpDelegateCallback<V, P> {
 
   protected P presenter;
   protected ViewGroupMvpDelegate<V, P> mvpDelegate;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/layout/MvpRelativeLayout.java
Patch:
@@ -22,7 +22,7 @@
 import android.widget.RelativeLayout;
 import com.hannesdorfmann.mosby.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby.mvp.MvpView;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegate;
 import com.hannesdorfmann.mosby.mvp.delegate.ViewGroupMvpDelegateImpl;
 
@@ -33,7 +33,7 @@
  * @since 1.1
  */
 public abstract class MvpRelativeLayout<V extends MvpView, P extends MvpPresenter<V>>
-    extends RelativeLayout implements MvpView, BaseMvpDelegateCallback<V, P> {
+    extends RelativeLayout implements MvpView, MvpDelegateCallback<V, P> {
 
   protected P presenter;
   protected ViewGroupMvpDelegate<V, P> mvpDelegate;

File: mvp/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateImplTest.java
Patch:
@@ -31,7 +31,7 @@ public class FragmentMvpDelegateImplTest {
 
   private MvpView view;
   private MvpPresenter<MvpView> presenter;
-  private BaseMvpDelegateCallback<MvpView, MvpPresenter<MvpView>> callback;
+  private MvpDelegateCallback<MvpView, MvpPresenter<MvpView>> callback;
   private FragmentMvpDelegateImpl<MvpView, MvpPresenter<MvpView>> delegate;
 
   @Before public void initComponents() {

File: mvp/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/MvpInternalDelegateTest.java
Patch:
@@ -30,15 +30,15 @@ public class MvpInternalDelegateTest {
 
   private MvpView view;
   private MvpPresenter<MvpView> presenter;
-  private BaseMvpDelegateCallback<MvpView, MvpPresenter<MvpView>> callback;
+  private MvpDelegateCallback<MvpView, MvpPresenter<MvpView>> callback;
   private MvpInternalDelegate<MvpView, MvpPresenter<MvpView>> delegate;
 
   @Before public void initComponents() {
     view = new MvpView() {
     };
 
     presenter = Mockito.mock(MvpPresenter.class);
-    callback = Mockito.mock(BaseMvpDelegateCallback.class);
+    callback = Mockito.mock(MvpDelegateCallback.class);
 
     Mockito.when(callback.getMvpView()).thenReturn(view);
 

File: mvp/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/PartialMvpDelegateCallbackImpl.java
Patch:
@@ -24,7 +24,7 @@
  * Used for partial mocking the delegate callback
  */
 public abstract class PartialMvpDelegateCallbackImpl
-    implements BaseMvpDelegateCallback<MvpView, MvpPresenter<MvpView>> {
+    implements MvpDelegateCallback<MvpView, MvpPresenter<MvpView>> {
 
   MvpPresenter<MvpView> presenter;
 

File: mvp/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/ViewGroupMvpDelegateImplTest.java
Patch:
@@ -30,7 +30,7 @@ public class ViewGroupMvpDelegateImplTest {
 
   private MvpView view;
   private MvpPresenter<MvpView> presenter;
-  private BaseMvpDelegateCallback<MvpView, MvpPresenter<MvpView>> callback;
+  private MvpDelegateCallback<MvpView, MvpPresenter<MvpView>> callback;
   private ViewGroupMvpDelegateImpl<MvpView, MvpPresenter<MvpView>> delegate;
 
   @Before public void initComponents() {

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/statistics/StatisticsDialog.java
Patch:
@@ -18,7 +18,7 @@
 import butterknife.ButterKnife;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegate;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpViewStateDelegateImpl;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpViewStateDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
 import com.hannesdorfmann.mosby.sample.mail.MailApplication;
 import com.hannesdorfmann.mosby.sample.mail.R;
@@ -29,7 +29,7 @@
  * @author Hannes Dorfmann
  */
 public class StatisticsDialog extends AppCompatDialogFragment implements StatisticsView,
-    BaseMvpViewStateDelegateCallback<StatisticsView, StatisticsPresenter> {
+    MvpViewStateDelegateCallback<StatisticsView, StatisticsPresenter> {
 
   @Bind(R.id.contentView) RecyclerView contentView;
   @Bind(R.id.loadingView) View loadingView;

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpViewStateDelegateCallback.java
Patch:
@@ -22,7 +22,7 @@
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
 
 /**
- * An enhanced version of {@link BaseMvpDelegateCallback} that adds {@link ViewState} support.
+ * An enhanced version of {@link MvpDelegateCallback} that adds {@link ViewState} support.
  * This interface must be implemented by all (subclasses of) Activity
  * that want to support {@link
  * ViewState} and mvp.
@@ -31,6 +31,6 @@
  * @since 2.0.0
  */
 public interface ActivityMvpViewStateDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
-    extends BaseMvpViewStateDelegateCallback<V, P>, ActivityMvpDelegateCallback<V, P> {
+    extends MvpViewStateDelegateCallback<V, P>, ActivityMvpDelegateCallback<V, P> {
 
 }

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpViewStateDelegateImpl.java
Patch:
@@ -38,7 +38,7 @@ public ActivityMvpViewStateDelegateImpl(
   @Override protected MvpInternalDelegate<V, P> getInternalDelegate() {
     if (internalDelegate == null) {
       internalDelegate =
-          new MvpViewStateInternalDelegate<>((BaseMvpViewStateDelegateCallback) delegateCallback);
+          new MvpViewStateInternalDelegate<>((MvpViewStateDelegateCallback) delegateCallback);
     }
 
     return internalDelegate;

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpViewStateDelegateImpl.java
Patch:
@@ -30,14 +30,14 @@
 public class FragmentMvpViewStateDelegateImpl<V extends MvpView, P extends MvpPresenter<V>>
     extends FragmentMvpDelegateImpl<V, P> {
 
-  public FragmentMvpViewStateDelegateImpl(BaseMvpViewStateDelegateCallback<V, P> delegateCallback) {
+  public FragmentMvpViewStateDelegateImpl(MvpViewStateDelegateCallback<V, P> delegateCallback) {
     super(delegateCallback);
   }
 
   @Override protected MvpInternalDelegate<V, P> getInternalDelegate() {
     if (internalDelegate == null) {
       internalDelegate =
-          new MvpViewStateInternalDelegate<V, P>((BaseMvpViewStateDelegateCallback) delegateCallback);
+          new MvpViewStateInternalDelegate<V, P>((MvpViewStateDelegateCallback) delegateCallback);
     }
 
     return internalDelegate;

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpInternalLayoutViewStateDelegate.java
Patch:
@@ -28,7 +28,7 @@
 /**
  * This class
  * is used to save, restore and apply a {@link ViewState} by using {@link
- * BaseMvpViewStateDelegateCallback}. It's
+ * MvpViewStateDelegateCallback}. It's
  * just a little helper / utils class that avoids to many copy & paste code clones.
  * This class is designed to be for custom Layouts like {@link MvpViewStateFrameLayout} etc.
  *
@@ -51,9 +51,9 @@ class MvpInternalLayoutViewStateDelegate<V extends MvpView, P extends MvpPresent
    *
    * @return true, if the viewstate has been restored (in other words restored from parcelable)
    * (calls {@link
-   * BaseMvpViewStateDelegateCallback#onViewStateInstanceRestored(boolean) after having restored the
+   * MvpViewStateDelegateCallback#onViewStateInstanceRestored(boolean) after having restored the
    * viewstate}.
-   * Otherwise returns false and calls {@link BaseMvpViewStateDelegateCallback#onNewViewStateInstance()}
+   * Otherwise returns false and calls {@link MvpViewStateDelegateCallback#onNewViewStateInstance()}
    */
   public boolean createOrRestoreViewState(ViewStateSavedState savedState) {
 

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpViewStateDelegateCallback.java
Patch:
@@ -23,16 +23,16 @@
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
 
 /**
- * An enhanced version of {@link BaseMvpDelegateCallback} that adds {@link ViewState} support.
+ * An enhanced version of {@link MvpDelegateCallback} that adds {@link ViewState} support.
  * This interface must be implemented by all (subclasses of) Activity, Fragmen or android.view.View
  * that want to support {@link
  * ViewState} and mvo.
  *
  * @author Hannes Dorfmann
  * @since 1.0.0
  */
-public interface BaseMvpViewStateDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
-    extends BaseMvpDelegateCallback<V, P> {
+public interface MvpViewStateDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
+    extends MvpDelegateCallback<V, P> {
 
   /**
    * Get the viewState

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpViewStateViewGroupDelegateCallback.java
Patch:
@@ -22,14 +22,14 @@
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
 
 /**
- * An enhanced version of {@link BaseMvpViewStateDelegateCallback} that adds {@link ViewState} support for
+ * An enhanced version of {@link MvpViewStateDelegateCallback} that adds {@link ViewState} support for
  * android.view.View like FrameLayout etc.
  *
  * @author Hannes Dorfmann
  * @since 1.1.0
  */
 public interface MvpViewStateViewGroupDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
-    extends BaseMvpViewStateDelegateCallback<V, P> {
+    extends MvpViewStateDelegateCallback<V, P> {
 
   /**
    * This method must call super.onSaveInstanceState() within any view

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/MvpViewStateFragment.java
Patch:
@@ -23,7 +23,7 @@
 import com.hannesdorfmann.mosby.mvp.MvpView;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpViewStateDelegateImpl;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegate;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpViewStateDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateDelegateCallback;
 
 /**
  * This is a enhancement of {@link com.hannesdorfmann.mosby.mvp.MvpFragment} that introduces the
@@ -38,7 +38,7 @@
  * @since 1.0.0
  */
 public abstract class MvpViewStateFragment<V extends MvpView, P extends MvpPresenter<V>>
-    extends MvpFragment<V, P> implements BaseMvpViewStateDelegateCallback<V, P> {
+    extends MvpFragment<V, P> implements MvpViewStateDelegateCallback<V, P> {
 
   /**
    * The viewstate will be instantiated by calling {@link #createViewState()} in {@link

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/MvpLceViewStateFragment.java
Patch:
@@ -21,7 +21,7 @@
 import com.hannesdorfmann.mosby.mvp.MvpPresenter;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpViewStateDelegateImpl;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegate;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpViewStateDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.lce.MvpLceFragment;
 import com.hannesdorfmann.mosby.mvp.lce.MvpLceView;
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
@@ -34,7 +34,7 @@
  */
 public abstract class MvpLceViewStateFragment<CV extends View, M, V extends MvpLceView<M>, P extends MvpPresenter<V>>
     extends MvpLceFragment<CV, M, V, P> implements MvpLceView<M>,
-    BaseMvpViewStateDelegateCallback<V, P> {
+    MvpViewStateDelegateCallback<V, P> {
 
   /**
    * The viewstate will be instantiated by calling {@link #createViewState()} in {@link

File: viewstate/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpViewStateDelegateImplTest.java
Patch:
@@ -41,7 +41,7 @@ public class FragmentMvpViewStateDelegateImplTest {
 
   private SimpleView view;
   private SimpleViewState viewState;
-  private BaseMvpViewStateDelegateCallback<SimpleView, MvpPresenter<SimpleView>> callback;
+  private MvpViewStateDelegateCallback<SimpleView, MvpPresenter<SimpleView>> callback;
   private FragmentMvpDelegateImpl<SimpleView, MvpPresenter<SimpleView>> delegate;
   private MvpPresenter<SimpleView> presenter;
 

File: viewstate/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/MvpViewStateInternalDelegateTest.java
Patch:
@@ -42,7 +42,7 @@ public class MvpViewStateInternalDelegateTest {
 
   private SimpleView view;
   private SimpleViewState viewState;
-  private BaseMvpViewStateDelegateCallback<SimpleView, MvpPresenter<SimpleView>> callback;
+  private MvpViewStateDelegateCallback<SimpleView, MvpPresenter<SimpleView>> callback;
   private MvpViewStateInternalDelegate<SimpleView, MvpPresenter<SimpleView>> delegate;
 
   @Before public void initComponents() {

File: viewstate/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/mock/PartialViewStateCallbackImpl.java
Patch:
@@ -18,15 +18,15 @@
 package com.hannesdorfmann.mosby.mvp.delegate.mock;
 
 import com.hannesdorfmann.mosby.mvp.MvpPresenter;
-import com.hannesdorfmann.mosby.mvp.delegate.BaseMvpViewStateDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
 
 /**
  * A class for partial mocking
  * @author Hannes Dorfmann
  */
 public abstract class PartialViewStateCallbackImpl
-    implements BaseMvpViewStateDelegateCallback<SimpleView, MvpPresenter<SimpleView>> {
+    implements MvpViewStateDelegateCallback<SimpleView, MvpPresenter<SimpleView>> {
 
   private ViewState<SimpleView> viewState;
   private MvpPresenter<SimpleView> presenter;

File: mvp/src/test/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateUiLessMvpFragmentTest.java
Patch:
@@ -49,7 +49,7 @@ public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,
       Assert.fail("Exception expected");
     } catch (IllegalStateException e) {
       Assert.assertEquals(
-          "It seems that you are using com.hannesdorfmann.mosby.mvp.UiLessMvpFragmentTest.UiLessFragment as headless (UI less) fragment (because onViewCreated() has not been called or maybe delegation misses that part). Having a Presenter without a View (UI) doesn't make sense. Simply use an usual fragment instead of an MvpFragment if you want to use a UI less Fragment",
+          "It seems that you are using "+UiLessFragment.class.getCanonicalName()+" as headless (UI less) fragment (because onViewCreated() has not been called or maybe delegation misses that part). Having a Presenter without a View (UI) doesn't make sense. Simply use an usual fragment instead of an MvpFragment if you want to use a UI less Fragment",
           e.getMessage());
     }
   }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/LceAnimator.java
Patch:
@@ -24,7 +24,6 @@
 import android.support.annotation.NonNull;
 import android.util.DisplayMetrics;
 import android.view.View;
-import android.widget.TextView;
 
 /**
  * Little helper class for animating content, error and loading view
@@ -50,7 +49,7 @@ public static void showLoading(@NonNull View loadingView, @NonNull View contentV
    * Shows the error view instead of the loading view
    */
   public static void showErrorView(@NonNull final View loadingView, @NonNull final View contentView,
-      final TextView errorView) {
+      final View errorView) {
 
     contentView.setVisibility(View.GONE);
 

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java
Patch:
@@ -33,7 +33,7 @@
  * inflated xml layout</li>
  * <li>Display a error view: A <b>TextView</b> with <b>R.id.errorView</b> must be declared in your
  * inflated xml layout</li>
- * <li>Display content view: A view witjh <b>R.id.contentView</b> must be specified in your
+ * <li>Display content view: A view with <b>R.id.contentView</b> must be specified in your
  * inflated
  * xml layout</li>
  * </ul>

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/login/LoginActivity.java
Patch:
@@ -17,11 +17,10 @@
 package com.hannesdorfmann.mosby.sample.mail.login;
 
 import android.os.Bundle;
-import android.support.v7.app.AppCompatActivity;
-
 import com.hannesdorfmann.mosby.sample.mail.R;
+import com.hannesdorfmann.mosby.sample.mail.base.view.BaseActivity;
 
-public class LoginActivity extends AppCompatActivity {
+public class LoginActivity extends BaseActivity {
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/search/SearchActivity.java
Patch:
@@ -1,13 +1,13 @@
 package com.hannesdorfmann.mosby.sample.mail.search;
 
 import android.os.Bundle;
-import com.hannesdorfmann.mosby.MosbyActivity;
 import com.hannesdorfmann.mosby.sample.mail.R;
+import com.hannesdorfmann.mosby.sample.mail.base.view.BaseActivity;
 
 /**
  * @author Hannes Dorfmann
  */
-public class SearchActivity extends MosbyActivity {
+public class SearchActivity extends BaseActivity {
 
   @Override protected void onCreate(Bundle savedInstanceState) {
     super.onCreate(savedInstanceState);

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/ui/view/NestedScrollingRecyclerView.java
Patch:
@@ -9,6 +9,7 @@
 /**
  * @author Hannes Dorfmann
  */
+// TODO to delete
 public class NestedScrollingRecyclerView extends RecyclerView implements NestedScrollingChild {
 
   private final NestedScrollingChildHelper scrollingChildHelper =

File: mvp-common/src/test/java/com/hannesdorfmann/mosby/mvp/MvpNullObjectBasePresenterTest.java
Patch:
@@ -136,7 +136,7 @@ public void viewShowThat() {
 
   @Test public void pickingCorrectViewInterface() {
 
-    ViewWithMulitpleInterfaces view = new ViewWithMulitpleInterfaces();
+    TestView view = new ViewWithMulitpleInterfaces();
     TestNullObjectPresenter presenter = new TestNullObjectPresenter();
 
     presenter.attachView(view);
@@ -145,7 +145,6 @@ public void viewShowThat() {
 
     presenter.detachView(false);
     Assert.assertNotNull(presenter.getView());
-    Assert.assertTrue(presenter.getView() instanceof TestView);
     Assert.assertFalse(presenter.getView() == view);
   }
 }

File: mvp-common/src/test/java/com/hannesdorfmann/mosby/mvp/MvpNullObjectBasePresenterTest.java
Patch:
@@ -134,7 +134,7 @@ public void viewShowThat() {
     Assert.assertTrue(presenter.getView() != view); // Null Object view
   }
 
-  @Test public void pickingRightViewInterface() {
+  @Test public void pickingCorrectViewInterface() {
 
     ViewWithMulitpleInterfaces view = new ViewWithMulitpleInterfaces();
     TestNullObjectPresenter presenter = new TestNullObjectPresenter();

File: core/src/main/java/com/hannesdorfmann/mosby/MosbyFragment.java
Patch:
@@ -17,6 +17,7 @@
 package com.hannesdorfmann.mosby;
 
 import android.os.Bundle;
+import android.support.annotation.LayoutRes;
 import android.support.annotation.Nullable;
 import android.support.v4.app.Fragment;
 import android.view.LayoutInflater;
@@ -105,8 +106,9 @@ protected void injectDependencies() {
   /**
    * Return the layout resource like R.layout.my_layout
    *
-   * @return the layout resource or null, if you don't want to have an UI
+   * @return the layout resource or zero ("0"), if you don't want to have an UI
    */
+  @LayoutRes
   protected int getLayoutRes() {
     return 0;
   }

File: mvp-common/src/main/java/com/hannesdorfmann/mosby/mvp/MvpBasePresenter.java
Patch:
@@ -16,6 +16,7 @@
 
 package com.hannesdorfmann.mosby.mvp;
 
+import android.support.annotation.Nullable;
 import java.lang.ref.WeakReference;
 
 /**
@@ -46,7 +47,7 @@ public class MvpBasePresenter<V extends MvpView> implements MvpPresenter<V> {
    *
    * @return <code>null</code>, if view is not attached, otherwise the concrete view instance
    */
-  protected V getView() {
+  @Nullable protected V getView() {
     return viewRef == null ? null : viewRef.get();
   }
 

File: mvp-common/src/main/java/com/hannesdorfmann/mosby/mvp/MvpNullObjectBasePresenter.java
Patch:
@@ -1,5 +1,7 @@
 package com.hannesdorfmann.mosby.mvp;
 
+import android.support.annotation.NonNull;
+
 /**
  * A {@link MvpPresenter} implmenetation that implements the <a href="https://en.wikipedia.org/wiki/Null_Object_pattern">null
  * object pattern</a> for the attached mvp view. So whenever the view gets detached from this
@@ -21,7 +23,7 @@ public class MvpNullObjectBasePresenter<V extends MvpView> implements MvpPresent
     this.view = view;
   }
 
-  protected V getView() {
+  @NonNull protected V getView() {
     if (view == null) {
       throw new NullPointerException("MvpView reference is null. Have you called attachView()?");
     }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/layout/MvpLinearLayout.java
Patch:
@@ -17,6 +17,7 @@
 
 import android.annotation.TargetApi;
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.util.AttributeSet;
 import android.widget.LinearLayout;
 
@@ -76,7 +77,7 @@ public MvpLinearLayout(Context context, AttributeSet attrs, int defStyleAttr, in
    *
    * @return {@link ViewGroupMvpDelegateImpl}
    */
-  protected ViewGroupMvpDelegate<V, P> getMvpDelegate() {
+  @NonNull protected ViewGroupMvpDelegate<V, P> getMvpDelegate() {
     if (mvpDelegate == null) {
       mvpDelegate = new ViewGroupMvpDelegateImpl<>(this);
     }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/layout/MvpRelativeLayout.java
Patch:
@@ -17,6 +17,7 @@
 
 import android.annotation.TargetApi;
 import android.content.Context;
+import android.support.annotation.NonNull;
 import android.util.AttributeSet;
 import android.widget.RelativeLayout;
 
@@ -76,7 +77,7 @@ public MvpRelativeLayout(Context context, AttributeSet attrs, int defStyleAttr,
    *
    * @return {@link ViewGroupMvpDelegateImpl}
    */
-  protected ViewGroupMvpDelegate<V, P> getMvpDelegate() {
+  @NonNull protected ViewGroupMvpDelegate<V, P> getMvpDelegate() {
     if (mvpDelegate == null) {
       mvpDelegate = new ViewGroupMvpDelegateImpl<>(this);
     }

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/RestoreableViewState.java
Patch:
@@ -17,6 +17,7 @@
 package com.hannesdorfmann.mosby.mvp.viewstate;
 
 import android.os.Bundle;
+import android.support.annotation.NonNull;
 import com.hannesdorfmann.mosby.mvp.MvpView;
 import com.hannesdorfmann.mosby.mvp.viewstate.lce.AbsParcelableLceViewState;
 
@@ -37,11 +38,12 @@ public interface RestoreableViewState<V extends MvpView> extends ViewState<V> {
    *
    * @param out The bundle where the viewstate should be stored in
    */
-  public void saveInstanceState(Bundle out);
+  public void saveInstanceState(@NonNull Bundle out);
 
   /**
    * Restores the viewstate that has been saved before with {@link #saveInstanceState(Bundle)}
    *
+   * @param in the bundle to read the data from
    * @return null, if view state could not be restored or the restore viestate instance. Typically
    * this method will return <code>this</code>. {@link AbsParcelableLceViewState} will return a
    * copy, which is also ok.

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/model/mail/MailComparator.java
Patch:
@@ -10,7 +10,7 @@
 public class MailComparator implements Comparator<Mail> {
 
 
-  public static MailComparator INSTANCE = new MailComparator();
+  public static final  MailComparator INSTANCE = new MailComparator();
 
   private MailComparator(){
 

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/model/mail/MailProvider.java
Patch:
@@ -21,6 +21,7 @@
 import com.hannesdorfmann.mosby.sample.mail.model.account.NotAuthenticatedException;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.statistics.MailStatistics;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.statistics.MailsCount;
+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Date;
@@ -38,15 +39,15 @@
  */
 public class MailProvider {
 
-  public static int DELAY = 2000;
+  @SuppressFBWarnings("MS_SHOULD_BE_FINAL") public static int DELAY = 2000;
   public static int authExceptionEach = 15;
   public static int errorEach = 5;
   private int counter = 0;
   private AtomicInteger lastId;
 
   private AccountManager accountManager;
   private List<Mail> mails;
-  public static Label INBOX_LABEL = new Label(Label.INBOX, R.drawable.ic_inbox, 0);
+  public static final Label INBOX_LABEL = new Label(Label.INBOX, R.drawable.ic_inbox, 0);
   private Label sentLabel = new Label(Label.SENT, R.drawable.ic_send, 0);
   private Label spamLabel = new Label(Label.SPAM, R.drawable.ic_spam, 0);
   private Label trashLabel = new Label(Label.TRASH, R.drawable.ic_delete, 0);

File: core/src/main/java/com/hannesdorfmann/mosby/MosbyActivity.java
Patch:
@@ -47,7 +47,7 @@ public class MosbyActivity extends AppCompatActivity {
 
   @Override public void onContentChanged() {
     super.onContentChanged();
-    ButterKnife.inject(this);
+    ButterKnife.bind(this);
   }
 
   /**

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpDelegateImpl.java
Patch:
@@ -37,7 +37,7 @@ public class ActivityMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V
 
   public ActivityMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null){
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName()+" is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
     this.delegateCallback = delegateCallback;
   }
@@ -47,7 +47,7 @@ public ActivityMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
    */
   protected MvpInternalDelegate<V, P> getInternalDelegate() {
     if (internalDelegate == null) {
-      internalDelegate = new MvpInternalDelegate(delegateCallback);
+      internalDelegate = new MvpInternalDelegate<>(delegateCallback);
     }
 
     return internalDelegate;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateImpl.java
Patch:
@@ -40,7 +40,7 @@ public class FragmentMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V
 
   public FragmentMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
 
     this.delegateCallback = delegateCallback;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpInternalDelegate.java
Patch:
@@ -34,7 +34,7 @@ class MvpInternalDelegate<V extends MvpView, P extends MvpPresenter<V>> {
   MvpInternalDelegate(MvpDelegateCallback<V, P> delegateCallback) {
 
     if (delegateCallback == null) {
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
 
     this.delegateCallback = delegateCallback;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ViewGroupMvpDelegateImpl.java
Patch:
@@ -34,7 +34,7 @@ public class ViewGroupMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<
 
   public ViewGroupMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
     this.delegateCallback = delegateCallback;
   }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpDelegateImpl.java
Patch:
@@ -37,7 +37,7 @@ public class ActivityMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V
 
   public ActivityMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null){
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName()+" is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
     this.delegateCallback = delegateCallback;
   }
@@ -47,7 +47,7 @@ public ActivityMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
    */
   protected MvpInternalDelegate<V, P> getInternalDelegate() {
     if (internalDelegate == null) {
-      internalDelegate = new MvpInternalDelegate(delegateCallback);
+      internalDelegate = new MvpInternalDelegate<>(delegateCallback);
     }
 
     return internalDelegate;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateImpl.java
Patch:
@@ -40,7 +40,7 @@ public class FragmentMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V
 
   public FragmentMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
 
     this.delegateCallback = delegateCallback;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpInternalDelegate.java
Patch:
@@ -34,7 +34,7 @@ class MvpInternalDelegate<V extends MvpView, P extends MvpPresenter<V>> {
   MvpInternalDelegate(MvpDelegateCallback<V, P> delegateCallback) {
 
     if (delegateCallback == null) {
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
 
     this.delegateCallback = delegateCallback;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ViewGroupMvpDelegateImpl.java
Patch:
@@ -34,7 +34,7 @@ public class ViewGroupMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<
 
   public ViewGroupMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
-      throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
+      throw new NullPointerException("MvpDelegateCallback is null!");
     }
     this.delegateCallback = delegateCallback;
   }

File: mvp-common/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceView.java
Patch:
@@ -25,7 +25,7 @@
  * by
  * invoking the corresponding presenter method</li>
  *
- * <li>{@link #showError(Exception, boolean)}: Display a error view (a TextView) on the screen if
+ * <li>{@link #showError(Throwable, boolean)}: Display a error view (a TextView) on the screen if
  * an error has occurred while loading data. You can distinguish between a pull-to-refresh error by
  * checking the boolean parameter and display the error message in another, more suitable way like
  * a

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/details/DetailsFragment.java
Patch:
@@ -37,6 +37,7 @@
 import java.text.Format;
 import java.text.SimpleDateFormat;
 import java.util.Date;
+import java.util.Locale;
 import javax.inject.Inject;
 
 /**
@@ -68,7 +69,7 @@ public class DetailsFragment extends AuthFragment<TextView, Mail, DetailsView, D
 
   private DetailsComponent detailsComponent;
 
-  Format format = new SimpleDateFormat("d. MMM");
+  Format format = new SimpleDateFormat("d. MMM",  Locale.getDefault());
 
   // The loaded data
   private Mail mail;

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/mails/MailsAdapter.java
Patch:
@@ -34,6 +34,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Collections;
 import java.util.List;
+import java.util.Locale;
 
 /**
  * @author Hannes Dorfmann
@@ -65,7 +66,7 @@ public interface PersonClickListener {
   private MailClickedListener clickListener;
   private MailStarListner starListner;
   private PersonClickListener personClickListener;
-  private Format format = new SimpleDateFormat("dd. MMM");
+  private Format format = new SimpleDateFormat("dd. MMM", Locale.getDefault());
 
   public MailsAdapter(Context context, MailClickedListener clickListener,
       MailStarListner starListener, PersonClickListener personClickListener) {

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/model/mail/RandomMailGenerator.java
Patch:
@@ -272,6 +272,7 @@ private String generateMsg(String[] quotes) {
       } while (used.contains(index));
 
       message.append(quotes[index]);
+      used.add(index);
     }
 
     return message.toString();

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/profile/about/AboutFragment.java
Patch:
@@ -11,6 +11,7 @@
 import com.hannesdorfmann.mosby.sample.mail.R;
 import com.hannesdorfmann.mosby.sample.mail.model.contact.Person;
 import java.text.SimpleDateFormat;
+import java.util.Locale;
 
 /**
  * @author Hannes Dorfmann
@@ -29,7 +30,7 @@ public class AboutFragment extends MosbyFragment {
 
   @Override public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {
     super.onViewCreated(view, savedInstanceState);
-    SimpleDateFormat sdf = new SimpleDateFormat("d MMM yyyy");
+    SimpleDateFormat sdf = new SimpleDateFormat("d MMM yyyy", Locale.getDefault());
 
     if (!TextUtils.isEmpty(person.getEmail())) {
       email.setText(person.getEmail());

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/search/SearchFragment.java
Patch:
@@ -84,7 +84,7 @@ public class SearchFragment extends BaseMailsFragment<SearchView, SearchPresente
 
     // load more
     layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
-    recyclerView.setOnScrollListener(new RecyclerView.OnScrollListener() {
+    recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener() {
       @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
         int visibleItemCount = layoutManager.getChildCount();
         int totalItemCount = layoutManager.getItemCount();

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/ui/transition/PauseableAnimator.java
Patch:
@@ -2,7 +2,9 @@
 
 import android.animation.Animator;
 import android.animation.TimeInterpolator;
+import android.annotation.TargetApi;
 
+@TargetApi(21)
 public class PauseableAnimator extends Animator {
 
   private final Animator mWrappedAnimator;

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/ui/transition/TextSizeEnterSharedElementCallback.java
Patch:
@@ -10,6 +10,7 @@
 import com.hannesdorfmann.mosby.sample.mail.R;
 import java.util.List;
 
+@TargetApi(21)
 public class TextSizeEnterSharedElementCallback extends SharedElementCallback {
   private static final String TAG = "EnterSharedElementCallback";
 

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/MvpLceViewStateActivity.java
Patch:
@@ -103,7 +103,7 @@ public abstract class MvpLceViewStateActivity<CV extends View, M, V extends MvpL
 
   /**
    * Creates the viewstate
-   * @return
+   * @return a new ViewState
    */
   public abstract ParcelableLceViewState<M, V> createViewState();
 

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/data/VoidViewState.java
Patch:
@@ -31,7 +31,7 @@
  *
  * @param <V> The type of the view
  * @author Hannes Dorfmann
- * @Since 1.0.0
+ * @since 1.0.0
  */
 public class VoidViewState<V extends MvpLceView<Void>> extends AbsParcelableLceViewState<Void, V> {
 }

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/write/WriteActivity.java
Patch:
@@ -71,8 +71,6 @@
       }
     });
 
-    setSupportActionBar(toolbar);
-
     Mail replayMail = getIntent().getParcelableExtra(KEY_REPLAY_MAIL);
     if (replayMail != null) {
       if (TextUtils.isEmpty(receiver.getText().toString())) {

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpActivity.java
Patch:
@@ -19,7 +19,7 @@
 import android.os.Bundle;
 import com.hannesdorfmann.mosby.MosbyActivity;
 import com.hannesdorfmann.mosby.mvp.delegate.ActivityMvpDelegate;
-import com.hannesdorfmann.mosby.mvp.delegate.DefaultActivityMvpDelegate;
+import com.hannesdorfmann.mosby.mvp.delegate.ActivityMvpDelegateImpl;
 import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 
 /**
@@ -104,11 +104,11 @@ public abstract class MvpActivity<V extends MvpView, P extends MvpPresenter<V>>
    * Only override this method if you really know what you are doing.
    * </p>
    *
-   * @return {@link DefaultActivityMvpDelegate}
+   * @return {@link ActivityMvpDelegateImpl}
    */
   protected ActivityMvpDelegate<V, P> getMvpDelegate() {
     if (mvpDelegate == null) {
-      mvpDelegate = new DefaultActivityMvpDelegate(this);
+      mvpDelegate = new ActivityMvpDelegateImpl(this);
     }
 
     return mvpDelegate;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/MvpFragment.java
Patch:
@@ -21,7 +21,7 @@
 import android.support.annotation.Nullable;
 import android.view.View;
 import com.hannesdorfmann.mosby.MosbyFragment;
-import com.hannesdorfmann.mosby.mvp.delegate.DefaultFragmentMvpDelegate;
+import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegateImpl;
 import com.hannesdorfmann.mosby.mvp.delegate.FragmentMvpDelegate;
 import com.hannesdorfmann.mosby.mvp.delegate.MvpDelegateCallback;
 
@@ -62,11 +62,11 @@ public abstract class MvpFragment<V extends MvpView, P extends MvpPresenter<V>>
    * Only override this method if you really know what you are doing.
    * </p>
    *
-   * @return {@link DefaultFragmentMvpDelegate}
+   * @return {@link FragmentMvpDelegateImpl}
    */
   protected FragmentMvpDelegate<V, P> getMvpDelegate() {
     if (mvpDelegate == null) {
-      mvpDelegate = new DefaultFragmentMvpDelegate<>(this);
+      mvpDelegate = new FragmentMvpDelegateImpl<>(this);
     }
 
     return mvpDelegate;

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ActivityMvpDelegateImpl.java
Patch:
@@ -29,13 +29,13 @@
  * @see ActivityMvpDelegate
  * @since 1.1.0
  */
-public class DefaultActivityMvpDelegate<V extends MvpView, P extends MvpPresenter<V>>
+public class ActivityMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V>>
     implements ActivityMvpDelegate {
 
   protected MvpInternalDelegate<V, P> internalDelegate;
   protected MvpDelegateCallback<V, P> delegateCallback;
 
-  public DefaultActivityMvpDelegate(MvpDelegateCallback<V, P> delegateCallback) {
+  public ActivityMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null){
       throw new NullPointerException(delegateCallback.getClass().getSimpleName()+" is null!");
     }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/FragmentMvpDelegateImpl.java
Patch:
@@ -32,13 +32,13 @@
  * @see FragmentMvpDelegate
  * @since 1.1.0
  */
-public class DefaultFragmentMvpDelegate<V extends MvpView, P extends MvpPresenter<V>>
+public class FragmentMvpDelegateImpl<V extends MvpView, P extends MvpPresenter<V>>
     implements FragmentMvpDelegate<V, P> {
 
   protected MvpDelegateCallback<V, P> delegateCallback;
   protected MvpInternalDelegate<V, P> internalDelegate;
 
-  public DefaultFragmentMvpDelegate(MvpDelegateCallback<V, P> delegateCallback) {
+  public FragmentMvpDelegateImpl(MvpDelegateCallback<V, P> delegateCallback) {
     if (delegateCallback == null) {
       throw new NullPointerException(delegateCallback.getClass().getSimpleName() + " is null!");
     }

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpDelegateCallback.java
Patch:
@@ -21,7 +21,7 @@
 
 /**
  * The MvpDelegate callback that will be called from {@link ActivityMvpDelegate} or {@link
- * FragmentMvpDelegate} or {@link ViewMvpDelegate}. This interface must be implemented by all
+ * FragmentMvpDelegate} or {@link ViewGroupMvpDelegate}. This interface must be implemented by all
  * Activity,
  * Fragment or android.view.View that you want to support mosbys mvp.y
  *

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/ViewGroupMvpDelegate.java
Patch:
@@ -36,7 +36,7 @@
  * @author Hannes Dorfmann
  * @since 1.1.0
  */
-public interface ViewMvpDelegate<V extends MvpView, P extends MvpPresenter<V>> {
+public interface ViewGroupMvpDelegate<V extends MvpView, P extends MvpPresenter<V>> {
 
   /**
    * Must be called from {@link View#onAttachedToWindow()}

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpViewStateDelegateCallback.java
Patch:
@@ -30,7 +30,7 @@
  * @author Hannes Dorfmann
  * @since 1.0.0
  */
-public interface ViewStateDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
+public interface MvpViewStateDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
     extends MvpDelegateCallback<V, P> {
 
   /**

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/delegate/MvpViewStateViewGroupDelegateCallback.java
Patch:
@@ -22,14 +22,14 @@
 import com.hannesdorfmann.mosby.mvp.viewstate.ViewState;
 
 /**
- * An enhanced version of {@link ViewStateDelegateCallback} that adds {@link ViewState} support for
+ * An enhanced version of {@link MvpViewStateDelegateCallback} that adds {@link ViewState} support for
  * android.view.View like FrameLayout etc.
  *
  * @author Hannes Dorfmann
  * @since 1.1.0
  */
-public interface ViewStateLayoutDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
-    extends ViewStateDelegateCallback<V, P> {
+public interface MvpViewStateViewGroupDelegateCallback<V extends MvpView, P extends MvpPresenter<V>>
+    extends MvpViewStateDelegateCallback<V, P> {
 
   /**
    * This method must call super.onSaveInstanceState() within any view

File: viewstate/src/test/java/com/hannesdorfmann/mosby/mvp/viewstate/ViewStateManagerTest.java
Patch:
@@ -5,7 +5,7 @@
 import com.hannesdorfmann.mosby.mvp.lce.MvpLceView;
 import com.hannesdorfmann.mosby.mvp.viewstate.data.ParcelabledDummyData;
 import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateInternalDelegate;
-import com.hannesdorfmann.mosby.mvp.delegate.ViewStateDelegateCallback;
+import com.hannesdorfmann.mosby.mvp.delegate.MvpViewStateDelegateCallback;
 import com.hannesdorfmann.mosby.mvp.viewstate.lce.data.ParcelableDataLceViewState;
 import junit.framework.Assert;
 import org.junit.Test;
@@ -28,7 +28,7 @@ public class ViewStateManagerTest {
 
   interface ParcelableDummyView
       extends MvpLceView<ParcelabledDummyData>,
-      ViewStateDelegateCallback<MvpLceView<ParcelabledDummyData>> {
+      MvpViewStateDelegateCallback<MvpLceView<ParcelabledDummyData>> {
 
   }
 
@@ -38,7 +38,7 @@ interface ParcelableDummyView
 
   @Test(expected = NullPointerException.class) public void viewIsNull() {
     MvpViewStateInternalDelegate
-        vs = new MvpViewStateInternalDelegate(mock(ViewStateDelegateCallback.class), null);
+        vs = new MvpViewStateInternalDelegate(mock(MvpViewStateDelegateCallback.class), null);
   }
 
   @Test(expected = NullPointerException.class) public void failBecauseViewStateNull() {

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/model/account/DefaultAccountManager.java
Patch:
@@ -56,7 +56,7 @@ public class DefaultAccountManager implements AccountManager {
   }
 
   @Override public boolean isUserAuthenticated() {
-    return true; // TODO remove for testing
-    //return currentAccount != null;
+    // return true; // TODO remove for testing
+    return currentAccount != null;
   }
 }

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/label/LabelLayout.java
Patch:
@@ -18,7 +18,6 @@
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Mail;
 import com.hannesdorfmann.mosby.sample.mail.utils.DimensUtils;
 import icepick.Icepick;
-import icepick.Icicle;
 import java.util.List;
 
 /**
@@ -28,7 +27,7 @@ public class LabelLayout extends MvpViewStateLinearLayout<LabelPresenter> implem
 
   @InjectView(R.id.labelTextView) TextView labelView;
   @InjectView(R.id.labelLoadingView) View loadingView;
-  @Icicle Mail mail;
+  Mail mail;
 
 
   ListPopupWindow popUpWindow;

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/label/LabelView.java
Patch:
@@ -16,4 +16,6 @@ public interface LabelView extends MvpLceView<List<Label>> {
 
   public void showChangeLabelFailed(Mail mail, Throwable t);
 
+  public void setMail(Mail mail);
+
 }

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/menu/MenuFragment.java
Patch:
@@ -16,7 +16,6 @@
 
 package com.hannesdorfmann.mosby.sample.mail.menu;
 
-import android.os.Bundle;
 import android.view.View;
 import android.widget.ImageView;
 import android.widget.TextView;

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/write/WriteViewState.java
Patch:
@@ -29,8 +29,7 @@ public class WriteViewState implements RestoreableViewState<WriteView> {
   @Override public void apply(WriteView view, boolean retained) {
     if (currentState == STATE_SHOWING_FORM) {
       view.showForm();
-    }
-    if (currentState == STATE_SHOWING_AUTH_REQUIRED) {
+    } else if (currentState == STATE_SHOWING_AUTH_REQUIRED) {
       view.showAuthenticationRequired();
     } else {
       view.showLoading();

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/AbsParcelableLceViewState.java
Patch:
@@ -80,6 +80,8 @@ protected void readFromParcel(Parcel in) {
     // Pull To Refresh
     pullToRefresh = readBoolean(in);
 
+    exception = (Throwable) in.readSerializable();
+
     // content will be read in subclass
   }
 

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/details/DetailsPresenter.java
Patch:
@@ -1,6 +1,6 @@
 package com.hannesdorfmann.mosby.sample.mail.details;
 
-import com.hannesdorfmann.mosby.sample.mail.base.presenter.RxAuthPresenter;
+import com.hannesdorfmann.mosby.sample.mail.base.presenter.RxMailPresenter;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Mail;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.MailProvider;
 import de.greenrobot.event.EventBus;
@@ -9,7 +9,7 @@
 /**
  * @author Hannes Dorfmann
  */
-public class DetailsPresenter extends RxAuthPresenter<DetailsView, Mail> {
+public class DetailsPresenter extends RxMailPresenter<DetailsView, Mail> {
 
   @Inject public DetailsPresenter(MailProvider mailProvider, EventBus eventBus) {
     super(mailProvider, eventBus);

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/details/DetailsView.java
Patch:
@@ -1,10 +1,10 @@
 package com.hannesdorfmann.mosby.sample.mail.details;
 
-import com.hannesdorfmann.mosby.sample.mail.base.view.AuthView;
+import com.hannesdorfmann.mosby.sample.mail.base.view.AuthMailView;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Mail;
 
 /**
  * @author Hannes Dorfmann
  */
-public interface DetailsView extends AuthView<Mail> {
+public interface DetailsView extends AuthMailView<Mail> {
 }

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/mails/MailsAdapter.java
Patch:
@@ -27,7 +27,7 @@
 import com.hannesdorfmann.mosby.sample.mail.R;
 import com.hannesdorfmann.mosby.sample.mail.base.view.ListAdapter;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Mail;
-import com.hannesdorfmann.mosby.sample.mail.ui.event.view.StarView;
+import com.hannesdorfmann.mosby.sample.mail.ui.view.StarView;
 import java.text.Format;
 import java.text.SimpleDateFormat;
 import java.util.List;

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/mails/MailsPresenter.java
Patch:
@@ -16,7 +16,7 @@
 
 package com.hannesdorfmann.mosby.sample.mail.mails;
 
-import com.hannesdorfmann.mosby.sample.mail.base.presenter.RxAuthStarPresenter;
+import com.hannesdorfmann.mosby.sample.mail.base.presenter.RxMailPresenter;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Label;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Mail;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.MailProvider;
@@ -27,7 +27,7 @@
 /**
  * @author Hannes Dorfmann
  */
-public class MailsPresenter extends RxAuthStarPresenter<MailsView, List<Mail>> {
+public class MailsPresenter extends RxMailPresenter<MailsView, List<Mail>> {
 
   @Inject public MailsPresenter(MailProvider mailProvider, EventBus eventBus) {
     super(mailProvider, eventBus);

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/mails/MailsView.java
Patch:
@@ -16,14 +16,14 @@
 
 package com.hannesdorfmann.mosby.sample.mail.mails;
 
-import com.hannesdorfmann.mosby.sample.mail.base.view.AuthStarView;
+import com.hannesdorfmann.mosby.sample.mail.base.view.AuthMailView;
 import com.hannesdorfmann.mosby.sample.mail.model.mail.Mail;
 import java.util.List;
 
 /**
  * @author Hannes Dorfmann
  */
-public interface MailsView extends AuthStarView<List<Mail>> {
+public interface MailsView extends AuthMailView<List<Mail>> {
 
 
 }

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/model/account/DefaultAccountManager.java
Patch:
@@ -56,7 +56,7 @@ public class DefaultAccountManager implements AccountManager {
   }
 
   @Override public boolean isUserAuthenticated() {
-    return true; // TODO remove for testing
-    //return currentAccount != null;
+    //return true; // TODO remove for testing
+    return currentAccount != null;
   }
 }

File: sample-mail/src/main/java/com/hannesdorfmann/mosby/sample/mail/ui/view/StarView.java
Patch:
@@ -1,4 +1,4 @@
-package com.hannesdorfmann.mosby.sample.mail.ui.event.view;
+package com.hannesdorfmann.mosby.sample.mail.ui.view;
 
 import android.annotation.TargetApi;
 import android.content.Context;

File: sample/src/main/java/com/hannesdorfmann/mosby/sample/mvp/customviewstate/MyCustomViewState.java
Patch:
@@ -38,14 +38,14 @@ public class MyCustomViewState implements RestoreableViewState<MyCustomView> {
     out.putParcelable(KEY_DATA, data);
   }
 
-  @Override public boolean restoreInstanceState(Bundle in) {
+  @Override public RestoreableViewState restoreInstanceState(Bundle in) {
     if (in == null) {
-      return false;
+      return null;
     }
 
     showingA = in.getBoolean(KEY_STATE, true);
     data = in.getParcelable(KEY_DATA);
-    return true;
+    return this;
   }
 
   @Override public void apply(MyCustomView view, boolean retained) {

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/MvpViewStateActivity.java
Patch:
@@ -48,6 +48,7 @@ public abstract class MvpViewStateActivity<P extends MvpPresenter> extends MvpAc
   @Override protected void onPostCreate(Bundle savedInstanceState) {
     super.onPostCreate(savedInstanceState);
     createOrRestoreViewState(savedInstanceState);
+    applyViewState();
   }
 
   /**

File: viewstate/src/main/java/com/hannesdorfmann/mosby/mvp/viewstate/lce/MvpLceViewStateActivity.java
Patch:
@@ -44,6 +44,7 @@ public abstract class MvpLceViewStateActivity<CV extends View, M, V extends MvpL
   @Override protected void onPostCreate(Bundle savedInstanceState) {
     super.onPostCreate(savedInstanceState);
     createOrRestoreViewState(savedInstanceState);
+    applyViewState();
   }
 
   /**

File: testing/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceView.java
Patch:
@@ -25,7 +25,7 @@
  * by
  * invoking the corresponding presenter method</li>
  *
- * <li>{@link #showError(Exception, boolean)}: Display a error view (a TextView) on the screen if
+ * <li>{@link #showError(Throwable, boolean)}: Display a error view (a TextView) on the screen if
  * an error has occurred while loading data. You can distinguish between a pull-to-refresh error by
  * checking the boolean parameter and display the error message in another, more suitable way like
  * a

File: testing/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceView.java
Patch:
@@ -25,7 +25,7 @@
  * by
  * invoking the corresponding presenter method</li>
  *
- * <li>{@link #showError(Exception, boolean)}: Display a error view (a TextView) on the screen if
+ * <li>{@link #showError(Throwable, boolean)}: Display a error view (a TextView) on the screen if
  * an error has occurred while loading data. You can distinguish between a pull-to-refresh error by
  * checking the boolean parameter and display the error message in another, more suitable way like
  * a

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java
Patch:
@@ -78,7 +78,7 @@ public abstract class MvpLceFragment<CV extends View, M, V extends MvpLceView<M>
     if (errorView == null) {
       throw new NullPointerException(
           "Error view is null! Have you specified a content view in your layout xml file?"
-              + " You have to give your error View the id R.id.contentView");
+              + " You have to give your error View the id R.id.errorView");
     }
 
     errorView.setOnClickListener(new View.OnClickListener() {

File: mvp/src/main/java/com/hannesdorfmann/mosby/mvp/lce/MvpLceFragment.java
Patch:
@@ -137,7 +137,9 @@ protected void showLightError(String msg) {
    * Called if the error view has been clicked. To disable clicking on the errorView use
    * <code>errorView.setClickable(false)</code>
    */
-  protected abstract void onErrorViewClicked();
+  protected void onErrorViewClicked(){
+    loadData(false);
+  }
 
   @Override
   public void showError(Throwable e, boolean pullToRefresh) {

File: sample/src/main/java/com/hannesdorfmann/mosby/sample/mvp/lce/fragment/CountriesFragment.java
Patch:
@@ -66,9 +66,6 @@ public void loadData(boolean pullToRefresh) {
     return CountriesErrorMessage.get(e, pullToRefresh, getActivity());
   }
 
-  @Override protected void onErrorViewClicked() {
-    loadData(false);
-  }
 
   @Override protected CountriesPresenter createPresenter() {
     return new SimpleCountriesPresenter();

File: sample/src/main/java/com/hannesdorfmann/mosby/sample/mvp/lce/viewstate/NotRetainingCountriesFragment.java
Patch:
@@ -70,9 +70,6 @@ public class NotRetainingCountriesFragment extends
     return CountriesErrorMessage.get(e, pullToRefresh, getActivity());
   }
 
-  @Override protected void onErrorViewClicked() {
-    loadData(false);
-  }
 
   @Override protected CountriesPresenter createPresenter() {
     return new SimpleCountriesPresenter();

