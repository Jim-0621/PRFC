File: src/main/java/org/traccar/protocol/HuabaoProtocolEncoder.java
Patch:
@@ -51,7 +51,7 @@ protected Object encodeCommand(Command command) {
                 case Command.TYPE_CUSTOM:
                     if ("BSJ".equals(getDeviceModel(command.getDeviceId()))) {
                         data.writeByte(1); // flag
-                        Charset charset = Charset.isSupported("GBK") ? Charset.forName("GBK") : StandardCharsets.US_ASCII;
+                        var charset = Charset.isSupported("GBK") ? Charset.forName("GBK") : StandardCharsets.US_ASCII;
                         data.writeCharSequence(command.getString(Command.KEY_DATA), charset);
                         return HuabaoProtocolDecoder.formatMessage(
                                 0x7e, HuabaoProtocolDecoder.MSG_SEND_TEXT_MESSAGE, id, false, data);

File: src/main/java/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -161,7 +161,8 @@ protected Object decode(
         if (channel != null) {
             if (type.equals("TX") || type.equals("MQ")) {
                 channel.writeAndFlush(new NetworkMessage(sentence + "#", remoteAddress));
-            } else if ("E3+4G".equals(getDeviceModel(deviceSession)) && Set.of("HB", "CC", "AM", "DW", "JZ").contains(type)) {
+            } else if ("E3+4G".equals(getDeviceModel(deviceSession))
+                    && Set.of("HB", "CC", "AM", "DW", "JZ").contains(type)) {
                 channel.writeAndFlush(new NetworkMessage(sentence.substring(0, typeIndex + 3) + "ACK#", remoteAddress));
             }
         }

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -645,7 +645,8 @@ private Position decodeZip(
             return null;
         }
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, ByteBufUtil.hexDump(buf.readSlice(5)));
+        DeviceSession deviceSession = getDeviceSession(
+                channel, remoteAddress, ByteBufUtil.hexDump(buf.readSlice(5)).substring(0, 9));
         if (deviceSession == null) {
             return null;
         }

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -645,13 +645,12 @@ private Position decodeZip(
             return null;
         }
 
-        buf.readUnsignedByte(); // model
-
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, ByteBufUtil.hexDump(buf.readSlice(5)));
         if (deviceSession == null) {
             return null;
         }
 
+        buf.readUnsignedByte(); // model
         buf.readUnsignedShort(); // software version
 
         Position position = new Position(getProtocolName());

File: src/main/java/org/traccar/schedule/TaskReports.java
Patch:
@@ -121,7 +121,7 @@ private void executeReport(Report report, Date from, Date to) throws StorageExce
                 case "events" -> {
                     var eventsReportProvider = injector.getInstance(EventsReportProvider.class);
                     reportMailer.sendAsync(user.getId(), stream -> eventsReportProvider.getExcel(
-                            stream, user.getId(), deviceIds, groupIds, List.of(), from, to));
+                            stream, user.getId(), deviceIds, groupIds, List.of(), List.of(), from, to));
                 }
                 case "route" -> {
                     var routeReportProvider = injector.getInstance(RouteReportProvider.class);

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -704,7 +704,8 @@ private Keys() {
      */
     public static final ConfigKey<String> OPENID_GROUPS_CLAIM_NAME = new StringConfigKey(
             "openid.groupsClaimName",
-            List.of(KeyType.CONFIG));
+            List.of(KeyType.CONFIG),
+            "groups");
 
     /**
      * OpenID Connect group to restrict access to.

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -632,7 +632,7 @@ private Object decodeCan(Channel channel, SocketAddress remoteAddress, String[]
             reportMaskExt = Long.parseLong(v[index - 1], 16);
         }
         if (BitUtil.check(reportMaskExt, 0) && !v[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(v[index - 1]));
+            position.set("adBlueLevel", Double.parseDouble(v[index - 1].substring(1)));
         }
         if (BitUtil.check(reportMaskExt, 1) && !v[index++].isEmpty()) {
             position.set("axleWeight1", Integer.parseInt(v[index - 1]));

File: src/test/java/org/traccar/protocol/BceProtocolDecoderTest.java
Patch:
@@ -49,7 +49,7 @@ public void testDecode() throws Exception {
         verifyPositions(decoder, binary(
                 "be76619c834601004200a0003ff76cc568ffc3db00bd151d423c8ca9410a18af150000000000d1023a0160040000000000009f06427f0000a401042ea416e1003e00000000000000000000009a"));
 
-        verifyPositions(decoder, binary(
+        verifyPositions(decoder, false, binary(
                 "be76619c834601004202a5863f57f8b868ffc3db0001712642b70b9d41221946200246d23342d1023e016404000000000000a0065a7f0000a4010496f277e3064300000000000000000000003f97f8b868ffc3db0074712642ae0a9d412919452102fff19042d102a4026304000000000000a006487f0000a4010496f277e3064300000000000000000000003fb7f8b868ffc3db00c6712642000a9d413019442002a6074542d102300165040000000000009f064f7f0000a4010496f277e3064300000000000000000000003fd7f8b868ffc3db002872264245099d413518421f02bea35e42d1021e0164040000000000009f06377f0000a4010496f277e3064300000000000000000000003fe7f8b868ffc3db0061722642e3089d413a28421f02a05ff641d102580163040000000000009f06577f0000a4010496f277e3064300000000000000000000003f17f9b868ffc3db0021732642a3079d414119411d02d69fcc42d102440165040000000000009f06437f0000a4010496f277e3064300000000000000000000003f37f9b868ffc3db00ae732642b4069d414628421b02e0629742d1024c0167040000000000009f06557f0000a4010496f277e3064300000000000000000000003f57f9b868ffc3db0044742642ae059d414c28421a027540a342d102860163040000000000009f065b7f0000a4010496f277e3064300000000000000000000003f97f9b868ffc3db007275264256039d4153284417029e1f2f43d1024a016704000000000000a0064e7f0000a4010496f277e306430000000000000000000000db"));
 
         verifyPositions(decoder, binary(

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -632,7 +632,7 @@ private Object decodeCan(Channel channel, SocketAddress remoteAddress, String[]
             reportMaskExt = Long.parseLong(v[index - 1], 16);
         }
         if (BitUtil.check(reportMaskExt, 0) && !v[index++].isEmpty()) {
-            position.set("adBlueLevel", Integer.parseInt(v[index - 1]));
+            position.set("adBlueLevel", Double.parseDouble(v[index - 1].substring(1)));
         }
         if (BitUtil.check(reportMaskExt, 1) && !v[index++].isEmpty()) {
             position.set("axleWeight1", Integer.parseInt(v[index - 1]));

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -794,7 +794,7 @@ private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf
 
             position.set(Position.KEY_TYPE, type);
 
-            if ("NT20".equals(model)) {
+            if (type == MSG_GPS_LBS_2 && "NT20".equals(model)) {
                 buf.readUnsignedByte(); // location source type
                 buf.skipBytes(8); // imei
 

File: src/test/java/org/traccar/protocol/RuptelaProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public void testDecode() throws Exception {
 
         verifyAttribute(decoder, binary(
                 "01460003115c885fa8c6440003674f43df002000fb7291ce13fc9230040e400618003d0500080f00ce0001990100823d008600008700008800000201000300000400019500019601001b1e00ad0000b03d01a201070083000000890000008b00030016009d0017009f001d33d6001e1038020041000a6b3f00960000ebf201002201d042f31d000030674f43df002100fb7291ce13fc9230040e400618003d0500080803a000005f3c00607600613c00622000630400650000670009023000000399003d039c0009039806c6005e1b180064004600660000006b066a0282000901039a00005a67030068555531444a46303000693537303637383230006a3500000000000000674f43df002200fb7291ce13fc9230040e400618003d0500080302d2ff047cff047eff04019700f60198000302d3ffff03b6000002028500005a6702f2000068a800092b"),
-                Position.KEY_DRIVER_UNIQUE_ID, "");
+                Position.KEY_DRIVER_UNIQUE_ID, "01d042f31d000030");
 
         verifyNull(decoder, binary(
                 "002e000316d53d58d6020f4573303430302e30332e36382e30340000c2b3090d0e950000827b000003e80000003c003c1681"));

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -270,6 +270,8 @@ private Object decodeInf(Channel channel, SocketAddress remoteAddress, String[]
             position.setDeviceTime(time);
         }
 
+        getLastLocation(position, position.getDeviceTime());
+
         return position;
     }
 

File: src/main/java/org/traccar/protocol/HuabaoProtocolEncoder.java
Patch:
@@ -51,7 +51,7 @@ protected Object encodeCommand(Command command) {
                 case Command.TYPE_CUSTOM:
                     data.writeByte(1); // flag
                     Charset charset = Charset.isSupported("GBK") ? Charset.forName("GBK") : StandardCharsets.US_ASCII;
-                    data.writeCharSequence(command.getString(Command.KEY_MESSAGE), charset);
+                    data.writeCharSequence(command.getString(Command.KEY_DATA), charset);
                     return HuabaoProtocolDecoder.formatMessage(
                             0x7e, HuabaoProtocolDecoder.MSG_SEND_TEXT_MESSAGE, id, false, data);
                 case Command.TYPE_REBOOT_DEVICE:

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -268,6 +268,8 @@ protected Object decode(
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
+            getLastLocation(position, null);
+
             buf.readUnsignedByte(); // encoding
             Charset charset = Charset.isSupported("GBK") ? Charset.forName("GBK") : StandardCharsets.US_ASCII;
 

File: src/main/java/org/traccar/web/OverrideFilter.java
Patch:
@@ -30,6 +30,7 @@
 import jakarta.servlet.http.HttpServletRequest;
 import jakarta.servlet.http.HttpServletResponse;
 import java.io.IOException;
+import java.nio.charset.StandardCharsets;
 
 @Singleton
 public class OverrideFilter implements Filter {
@@ -70,12 +71,12 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                 String description = server.getString("description", "Traccar GPS Tracking System");
                 String colorPrimary = server.getString("colorPrimary", "#1a237e");
 
-                String alteredContent = new String(wrappedResponse.getCapture())
+                String alteredContent = new String(wrappedResponse.getCapture(), StandardCharsets.UTF_8)
                         .replace("${title}", title)
                         .replace("${description}", description)
                         .replace("${colorPrimary}", colorPrimary);
 
-                byte[] data = alteredContent.getBytes();
+                byte[] data = alteredContent.getBytes(StandardCharsets.UTF_8);
                 response.setContentLength(data.length);
                 response.getOutputStream().write(data);
 

File: src/test/java/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -17,6 +17,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "78780D01086471700328358100093F040D0A"));
 
+        verifyPosition(decoder, binary(
+                "78789795ffff01180b0d031406da04b5ab0d08813df01ca9002c008a9200004556454e545f3836323739383035323432393038375f30303030303030305f323032345f31315f31325f32325f32305f30365f495f35362e6d70342c4556454e545f3836323739383035323432393038375f30303030303030305f323032345f31315f31325f32325f32305f30365f465f35352e6d70340037d45b0d0a"));
+
         verifyPosition(decoder, binary(
                 "787840a2180b0f0f3407cf00602cd208354064001c6a02dc650000698100000000095674c9114100002a04000100004b31000000000863829079286793020001a22a8f0d0a"));
 

File: src/main/java/org/traccar/web/OverrideFilter.java
Patch:
@@ -49,7 +49,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             chain.doFilter(request, response);
             return;
         }
-        response.setCharacterEncoding("UTF-8");
+
         ResponseWrapper wrappedResponse = new ResponseWrapper((HttpServletResponse) response);
 
         chain.doFilter(request, wrappedResponse);

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -693,7 +693,7 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                                 case 0x00B9:
                                     buf.readUnsignedByte(); // count
                                     String[] wifi = buf.readCharSequence(
-                                            extendedLength - 1, StandardCharsets.US_ASCII).toString().split(",");
+                                            extendedLength - 3, StandardCharsets.US_ASCII).toString().split(",");
                                     for (int i = 0; i < wifi.length / 2; i++) {
                                         network.addWifiAccessPoint(
                                                 WifiAccessPoint.from(wifi[i * 2], Integer.parseInt(wifi[i * 2 + 1])));

File: src/main/java/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -385,7 +385,7 @@ private Position decodeU01(String sentence, Channel channel, SocketAddress remot
             .number("(d+),")                     // rfid
             .number("d+,")                       // password verification
             .number("d+,")                       // incorrect password count
-            .number("(d+),")                     // index
+            .number("(d+)")                      // index
             .any()
             .compile();
 

File: src/test/java/org/traccar/protocol/Jt600ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Jt600ProtocolDecoder(null));
 
+        verifyPosition(decoder, buffer(
+                "(2050018634,P45,051124,204046,9.861502,N,83.950336,W,A,1,0,1,1,0012260888,0,0,0)"));
+
         verifyPositions(decoder, binary(
                 "2480433966040111002718031919195822424550114158888E15A40000F124080000000000F00F110A24991900000DF0C7"));
 

File: src/main/java/org/traccar/api/ExtendedObjectResource.java
Patch:
@@ -73,7 +73,8 @@ public Collection<T> get(
             conditions.add(new Condition.Permission(Device.class, deviceId, baseClass).excludeGroups());
         }
 
-        return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions), sortField != null ? new Order(sortField) : null));
+        return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions),
+                sortField != null ? new Order(sortField) : null));
     }
 
 

File: src/main/java/org/traccar/api/SimpleObjectResource.java
Patch:
@@ -63,7 +63,8 @@ public Collection<T> get(
             conditions.add(new Condition.Permission(User.class, userId, baseClass));
         }
 
-        return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions), sortField != null ? new Order(sortField) : null));
+        return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions),
+                sortField != null ? new Order(sortField) : null));
     }
 
 }

File: src/main/java/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -130,8 +130,8 @@ public Collection<Device> get(
                 }
             }
 
-
-            return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions), new Order("name")));
+            return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions),
+                    new Order("name")));
 
         }
     }

File: src/main/java/org/traccar/api/AsyncSocketServlet.java
Patch:
@@ -18,10 +18,10 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import org.eclipse.jetty.websocket.server.JettyWebSocketServlet;
 import org.eclipse.jetty.websocket.server.JettyWebSocketServletFactory;
-import org.traccar.api.resource.SessionResource;
 import org.traccar.api.security.LoginService;
 import org.traccar.config.Config;
 import org.traccar.config.Keys;
+import org.traccar.helper.SessionHelper;
 import org.traccar.session.ConnectionManager;
 import org.traccar.storage.Storage;
 
@@ -69,7 +69,7 @@ public void configure(JettyWebSocketServletFactory factory) {
                     throw new RuntimeException(e);
                 }
             } else if (req.getSession() != null) {
-                userId = (Long) ((HttpSession) req.getSession()).getAttribute(SessionResource.USER_ID_KEY);
+                userId = (Long) ((HttpSession) req.getSession()).getAttribute(SessionHelper.USER_ID_KEY);
             }
             if (userId != null) {
                 return new AsyncSocket(objectMapper, connectionManager, storage, userId);

File: src/main/java/org/traccar/api/MediaFilter.java
Patch:
@@ -17,10 +17,10 @@
 package org.traccar.api;
 
 import com.google.inject.Provider;
-import org.traccar.api.resource.SessionResource;
 import org.traccar.api.security.PermissionsService;
 import org.traccar.database.StatisticsManager;
 import org.traccar.helper.Log;
+import org.traccar.helper.SessionHelper;
 import org.traccar.model.Device;
 import org.traccar.storage.Storage;
 import org.traccar.storage.StorageException;
@@ -65,7 +65,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             HttpSession session = ((HttpServletRequest) request).getSession(false);
             Long userId = null;
             if (session != null) {
-                userId = (Long) session.getAttribute(SessionResource.USER_ID_KEY);
+                userId = (Long) session.getAttribute(SessionHelper.USER_ID_KEY);
                 if (userId != null) {
                     statisticsManager.registerRequest(userId);
                 }

File: src/main/java/org/traccar/api/resource/UserResource.java
Patch:
@@ -24,6 +24,7 @@
 import org.traccar.config.Config;
 import org.traccar.config.Keys;
 import org.traccar.helper.LogAction;
+import org.traccar.helper.SessionHelper;
 import org.traccar.helper.model.UserUtil;
 import org.traccar.model.Device;
 import org.traccar.model.ManagedUser;
@@ -138,7 +139,7 @@ public Response add(User entity) throws StorageException {
     public Response remove(@PathParam("id") long id) throws Exception {
         Response response = super.remove(id);
         if (getUserId() == id) {
-            request.getSession().removeAttribute(SessionResource.USER_ID_KEY);
+            request.getSession().removeAttribute(SessionHelper.USER_ID_KEY);
         }
         return response;
     }

File: src/main/java/org/traccar/api/security/SecurityRequestFilter.java
Patch:
@@ -18,8 +18,8 @@
 import com.google.inject.Injector;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.traccar.api.resource.SessionResource;
 import org.traccar.database.StatisticsManager;
+import org.traccar.helper.SessionHelper;
 import org.traccar.model.User;
 import org.traccar.storage.StorageException;
 
@@ -86,8 +86,8 @@ public void filter(ContainerRequestContext requestContext) {
 
             } else if (request.getSession() != null) {
 
-                Long userId = (Long) request.getSession().getAttribute(SessionResource.USER_ID_KEY);
-                Date expiration = (Date) request.getSession().getAttribute(SessionResource.EXPIRATION_KEY);
+                Long userId = (Long) request.getSession().getAttribute(SessionHelper.USER_ID_KEY);
+                Date expiration = (Date) request.getSession().getAttribute(SessionHelper.EXPIRATION_KEY);
                 if (userId != null) {
                     User user = injector.getInstance(PermissionsService.class).getUser(userId);
                     if (user != null) {

File: src/main/java/org/traccar/web/WebRequestLog.java
Patch:
@@ -20,7 +20,7 @@
 import org.eclipse.jetty.server.Response;
 import org.eclipse.jetty.util.DateCache;
 import org.eclipse.jetty.util.component.ContainerLifeCycle;
-import org.traccar.api.resource.SessionResource;
+import org.traccar.helper.SessionHelper;
 
 import java.util.Locale;
 import java.util.TimeZone;
@@ -40,7 +40,7 @@ public WebRequestLog(Writer writer) {
     @Override
     public void log(Request request, Response response) {
         try {
-            Long userId = (Long) request.getSession().getAttribute(SessionResource.USER_ID_KEY);
+            Long userId = (Long) request.getSession().getAttribute(SessionHelper.USER_ID_KEY);
             writer.write(String.format("%s - %s [%s] \"%s %s %s\" %d %d",
                     request.getRemoteHost(),
                     userId != null ? String.valueOf(userId) : "-",

File: src/main/java/org/traccar/schedule/TaskHealthCheck.java
Patch:
@@ -99,7 +99,7 @@ public void run() {
 
             int messageCurrentTotal = statisticsManager.messageStoredCount();
             int messageCurrentPeriod = messageCurrentTotal - messageLastTotal;
-            if (dropThreshold > 0 && messageLastPeriod > 0) {
+            if (dropThreshold > 0 && messageLastPeriod > 0 && messageCurrentPeriod > 0) {
                 double drop = messageCurrentPeriod / (double) messageLastPeriod;
                 if (drop < dropThreshold) {
                     success = false;

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -716,7 +716,7 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                     }
                     break;
                 case 0xF6:
-                    buf.readUnsignedByte(); // data type
+                    position.set(Position.KEY_EVENT, buf.readUnsignedByte());
                     int fieldMask = buf.readUnsignedByte();
                     if (BitUtil.check(fieldMask, 0)) {
                         buf.readUnsignedShort(); // light

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -716,7 +716,7 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                     }
                     break;
                 case 0xF6:
-                    buf.readUnsignedByte(); // data type
+                    position.set(Position.KEY_TYPE, buf.readUnsignedByte());
                     int fieldMask = buf.readUnsignedByte();
                     if (BitUtil.check(fieldMask, 0)) {
                         buf.readUnsignedShort(); // light

File: src/main/java/org/traccar/model/Calendar.java
Patch:
@@ -29,6 +29,7 @@
 import java.io.IOException;
 import java.time.Duration;
 import java.time.Instant;
+import java.time.OffsetDateTime;
 import java.time.ZonedDateTime;
 import java.time.temporal.Temporal;
 import java.util.Date;
@@ -87,6 +88,8 @@ public boolean checkMoment(Date date) {
     private static Instant temporalToInstant(Temporal temporal) {
         if (temporal instanceof ZonedDateTime) {
             return ((ZonedDateTime) temporal).toInstant();
+        } else if (temporal instanceof OffsetDateTime) {
+            return ((OffsetDateTime) temporal).toInstant();
         } else if (temporal instanceof Instant) {
             return (Instant) temporal;
         } else {

File: src/main/java/org/traccar/schedule/TaskReports.java
Patch:
@@ -94,7 +94,7 @@ public void run() {
                     }
                 }
             }
-        } catch (StorageException e) {
+        } catch (Exception e) {
             LOGGER.warn("Scheduled reports error", e);
         }
     }

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -1051,7 +1051,7 @@ private Object decodeIgn(
         index += 1; // device name
         index += 1; // duration of ignition on/off
 
-        decodeLocation(position, model, v, index);
+        index = decodeLocation(position, model, v, index);
 
         position.set(Position.KEY_IGNITION, type.contains("GN"));
         position.set(Position.KEY_HOURS, parseHours(v[index++]));

File: src/test/java/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Gl200TextProtocolDecoder(null));
 
+        verifyAttributes(decoder, buffer(
+                "+RESP:GTIGF,500101,868570000393782,,0,0,,,,,,,0730,0002,A08F,872B36,00,,0.0,20240921021804,E3B1$"));
+
         verifyPositions(decoder, buffer(
                 "+RESP:GTERI,F10413,862599050544301,GV350M,00000002,14164,10,1,1,98.2,93,216.4,-117.484369,33.896640,20240919020058,0311,0480,2C01,00ADBA01,,39539.5,,,100,220100,,0,20240919020058,20A7$"));
 

File: src/main/java/org/traccar/web/WebServer.java
Patch:
@@ -165,6 +165,7 @@ private void initApi(ServletContextHandler servletHandler) {
         }
 
         ResourceConfig resourceConfig = new ResourceConfig();
+        resourceConfig.property("jersey.config.server.wadl.disableWadl", true);
         resourceConfig.registerClasses(
                 JacksonFeature.class,
                 ObjectMapperContextResolver.class,

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -965,7 +965,7 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String[]
             position.set(Position.KEY_HOURS, parseHours(v[index++]));
             position.set(Position.PREFIX_ADC + 1, v[index++].isEmpty() ? null : Integer.parseInt(v[index - 1]) * 0.001);
         }
-        if (model.startsWith("GV") && !model.startsWith("GV6")) {
+        if (model.startsWith("GV") && !model.startsWith("GV6") && !model.equals("GV350M")) {
             position.set(Position.PREFIX_ADC + 2, v[index++].isEmpty() ? null : Integer.parseInt(v[index - 1]) * 0.001);
         }
         if (model.equals("GV200") || model.equals("GV310LAU")) {

File: src/test/java/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Gl200TextProtocolDecoder(null));
 
+        verifyPositions(decoder, buffer(
+                "+RESP:GTERI,F10413,862599050544301,GV350M,00000002,14164,10,1,1,98.2,93,216.4,-117.484369,33.896640,20240919020058,0311,0480,2C01,00ADBA01,,39539.5,,,100,220100,,0,20240919020058,20A7$"));
+
         verifyPositions(decoder, buffer(
                 "+RESP:GTERI,6E0304,868589060189019,,00000002,,50,1,1,0.0,0,35.5,-98.260961,26.053701,20240912192949,0334,0020,0F1B,04643718,01,12,21.1,,1930,1917,,100,210100,2,0,20240912192950,4BAA$"));
 

File: src/main/java/org/traccar/api/resource/NotificationResource.java
Patch:
@@ -129,7 +129,8 @@ public Response sendMessage(
                 var conditions = new LinkedList<Condition>();
                 conditions.add(new Condition.Equals("id", userId));
                 if (permissionsService.notAdmin(getUserId())) {
-                    conditions.add(new Condition.Permission(User.class, getUserId(), ManagedUser.class).excludeGroups());
+                    conditions.add(new Condition.Permission(
+                            User.class, getUserId(), ManagedUser.class).excludeGroups());
                 }
                 users.add(storage.getObject(
                         User.class, new Request(new Columns.All(), Condition.merge(conditions))));

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -445,8 +445,8 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                     break;
                 case 0x2B:
                 case 0xA7:
-                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort());
-                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort());
+                    position.set(Position.PREFIX_ADC + 1, buf.readUnsignedShort() / 100.0);
+                    position.set(Position.PREFIX_ADC + 2, buf.readUnsignedShort() / 100.0);
                     break;
                 case 0x30:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());

File: src/main/java/org/traccar/handler/ComputedAttributesHandler.java
Patch:
@@ -139,7 +139,7 @@ public Object computeAttribute(Attribute attribute, Position position) throws Je
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         var attributes = cacheManager.getDeviceObjects(position.getDeviceId(), Attribute.class).stream()
                 .sorted(Comparator.comparing(Attribute::getPriority).reversed())
                 .toList();

File: src/main/java/org/traccar/handler/CopyAttributesHandler.java
Patch:
@@ -33,7 +33,7 @@ public CopyAttributesHandler(Config config, CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         String attributesString = AttributeUtil.lookup(
                 cacheManager, Keys.PROCESSING_COPY_ATTRIBUTES, position.getDeviceId());
         Position last = cacheManager.getPosition(position.getDeviceId());

File: src/main/java/org/traccar/handler/DatabaseHandler.java
Patch:
@@ -38,7 +38,7 @@ public DatabaseHandler(Storage storage, StatisticsManager statisticsManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         try {
             position.setId(storage.addObject(position, new Request(new Columns.Exclude("id"))));

File: src/main/java/org/traccar/handler/DistanceHandler.java
Patch:
@@ -40,7 +40,7 @@ public DistanceHandler(Config config, CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         double distance = 0.0;
         if (position.hasAttribute(Position.KEY_DISTANCE)) {

File: src/main/java/org/traccar/handler/DriverHandler.java
Patch:
@@ -34,7 +34,7 @@ public DriverHandler(Config config, CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (useLinkedDriver && !position.hasAttribute(Position.KEY_DRIVER_UNIQUE_ID)) {
             var drivers = cacheManager.getDeviceObjects(position.getDeviceId(), Driver.class);
             if (!drivers.isEmpty()) {

File: src/main/java/org/traccar/handler/EngineHoursHandler.java
Patch:
@@ -30,7 +30,7 @@ public EngineHoursHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (!position.hasAttribute(Position.KEY_HOURS)) {
             Position last = cacheManager.getPosition(position.getDeviceId());
             if (last != null) {

File: src/main/java/org/traccar/handler/FilterHandler.java
Patch:
@@ -275,7 +275,7 @@ protected boolean filter(Position position) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         callback.processed(filter(position));
     }
 

File: src/main/java/org/traccar/handler/GeocoderHandler.java
Patch:
@@ -42,7 +42,7 @@ public GeocoderHandler(Config config, Geocoder geocoder, CacheManager cacheManag
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (!ignorePositions && (processInvalidPositions || position.getValid())) {
             if (reuseDistance != 0) {
                 Position lastPosition = cacheManager.getPosition(position.getDeviceId());

File: src/main/java/org/traccar/handler/GeofenceHandler.java
Patch:
@@ -35,7 +35,7 @@ public GeofenceHandler(Config config, CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         List<Long> geofenceIds = GeofenceUtil.getCurrentGeofences(config, cacheManager, position);
         if (!geofenceIds.isEmpty()) {

File: src/main/java/org/traccar/handler/GeolocationHandler.java
Patch:
@@ -47,7 +47,7 @@ public GeolocationHandler(
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if ((position.getOutdated() || processInvalidPositions && !position.getValid())
                 && position.getNetwork() != null
                 && (!requireWifi || position.getNetwork().getWifiAccessPoints() != null)) {

File: src/main/java/org/traccar/handler/HemisphereHandler.java
Patch:
@@ -46,7 +46,7 @@ public HemisphereHandler(Config config) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (latitudeFactor != 0) {
             position.setLatitude(Math.abs(position.getLatitude()) * latitudeFactor);
         }

File: src/main/java/org/traccar/handler/MotionHandler.java
Patch:
@@ -32,7 +32,7 @@ public MotionHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (!position.hasAttribute(Position.KEY_MOTION)) {
             double threshold = AttributeUtil.lookup(
                     cacheManager, Keys.EVENT_MOTION_SPEED_THRESHOLD, position.getDeviceId());

File: src/main/java/org/traccar/handler/OutdatedHandler.java
Patch:
@@ -31,7 +31,7 @@ public OutdatedHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (position.getOutdated()) {
             Position last = cacheManager.getPosition(position.getDeviceId());
             if (last != null) {

File: src/main/java/org/traccar/handler/PositionForwardingHandler.java
Patch:
@@ -124,7 +124,7 @@ public void run(Timeout timeout) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (positionForwarder != null) {
             PositionData positionData = new PositionData();
             positionData.setPosition(position);

File: src/main/java/org/traccar/handler/PostProcessHandler.java
Patch:
@@ -45,7 +45,7 @@ public PostProcessHandler(CacheManager cacheManager, Storage storage, Connection
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         try {
             if (PositionUtil.isLatest(cacheManager, position)) {
                 Device updatedDevice = new Device();

File: src/main/java/org/traccar/handler/SpeedLimitHandler.java
Patch:
@@ -33,7 +33,7 @@ public SpeedLimitHandler(SpeedLimitProvider speedLimitProvider) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         speedLimitProvider.getSpeedLimit(position.getLatitude(), position.getLongitude(),
                 new SpeedLimitProvider.SpeedLimitProviderCallback() {

File: src/main/java/org/traccar/handler/TimeHandler.java
Patch:
@@ -41,7 +41,7 @@ public TimeHandler(Config config) {
     }
 
     @Override
-    public void handlePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         if (protocols == null || protocols.contains(position.getProtocol())) {
             if (useServerTime) {

File: src/main/java/org/traccar/handler/events/AlarmEventHandler.java
Patch:
@@ -38,7 +38,7 @@ public AlarmEventHandler(Config config, CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         String alarmString = position.getString(Position.KEY_ALARM);
         if (alarmString != null) {
             Set<String> alarms = new HashSet<>(Arrays.asList(alarmString.split(",")));

File: src/main/java/org/traccar/handler/events/BehaviorEventHandler.java
Patch:
@@ -38,7 +38,7 @@ public BehaviorEventHandler(Config config, CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         Position lastPosition = cacheManager.getPosition(position.getDeviceId());
         if (lastPosition != null && position.getFixTime().equals(lastPosition.getFixTime())) {

File: src/main/java/org/traccar/handler/events/CommandResultEventHandler.java
Patch:
@@ -26,7 +26,7 @@ public CommandResultEventHandler() {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         Object commandResult = position.getAttributes().get(Position.KEY_RESULT);
         if (commandResult != null) {
             Event event = new Event(Event.TYPE_COMMAND_RESULT, position);

File: src/main/java/org/traccar/handler/events/DriverEventHandler.java
Patch:
@@ -32,7 +32,7 @@ public DriverEventHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (!PositionUtil.isLatest(cacheManager, position)) {
             return;
         }

File: src/main/java/org/traccar/handler/events/FuelEventHandler.java
Patch:
@@ -34,7 +34,7 @@ public FuelEventHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         Device device = cacheManager.getObject(Device.class, position.getDeviceId());
         if (device == null) {

File: src/main/java/org/traccar/handler/events/GeofenceEventHandler.java
Patch:
@@ -36,7 +36,7 @@ public GeofenceEventHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         if (!PositionUtil.isLatest(cacheManager, position)) {
             return;
         }

File: src/main/java/org/traccar/handler/events/IgnitionEventHandler.java
Patch:
@@ -33,7 +33,7 @@ public IgnitionEventHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         Device device = cacheManager.getObject(Device.class, position.getDeviceId());
         if (device == null || !PositionUtil.isLatest(cacheManager, position)) {
             return;

File: src/main/java/org/traccar/handler/events/MaintenanceEventHandler.java
Patch:
@@ -32,7 +32,7 @@ public MaintenanceEventHandler(CacheManager cacheManager) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         Position lastPosition = cacheManager.getPosition(position.getDeviceId());
         if (lastPosition == null || position.getFixTime().compareTo(lastPosition.getFixTime()) < 0) {
             return;

File: src/main/java/org/traccar/handler/events/MediaEventHandler.java
Patch:
@@ -28,7 +28,7 @@ public MediaEventHandler() {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
         Stream.of(Position.KEY_IMAGE, Position.KEY_VIDEO, Position.KEY_AUDIO)
                 .filter(position::hasAttribute)
                 .map(type -> {

File: src/main/java/org/traccar/handler/events/MotionEventHandler.java
Patch:
@@ -48,7 +48,7 @@ public MotionEventHandler(CacheManager cacheManager, Storage storage) {
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         long deviceId = position.getDeviceId();
         Device device = cacheManager.getObject(Device.class, deviceId);

File: src/main/java/org/traccar/handler/events/OverspeedEventHandler.java
Patch:
@@ -56,7 +56,7 @@ public OverspeedEventHandler(Config config, CacheManager cacheManager, Storage s
     }
 
     @Override
-    public void analyzePosition(Position position, Callback callback) {
+    public void onPosition(Position position, Callback callback) {
 
         long deviceId = position.getDeviceId();
         Device device = cacheManager.getObject(Device.class, position.getDeviceId());

File: src/test/java/org/traccar/handler/events/CommandResultEventHandlerTest.java
Patch:
@@ -7,11 +7,9 @@
 
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Map;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertNotNull;
 
 public class CommandResultEventHandlerTest extends BaseTest {
 

File: src/main/java/org/traccar/handler/network/MainEventHandler.java
Patch:
@@ -77,7 +77,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
         while (cause.getCause() != null && cause.getCause() != cause) {
             cause = cause.getCause();
         }
-        LOGGER.info("[{}] error", NetworkUtil.session(ctx.channel()), cause);
+        LOGGER.warn("[{}] error", NetworkUtil.session(ctx.channel()), cause);
         closeChannel(ctx.channel());
     }
 

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -800,6 +800,8 @@ private Object decodeBasic(Channel channel, SocketAddress remoteAddress, ByteBuf
                 return null; // multi-lbs message
             }
 
+            position.set(Position.KEY_TYPE, type);
+
             if (hasGps(type)) {
                 decodeGps(position, buf, false, deviceSession.get(DeviceSession.KEY_TIMEZONE));
             } else {

File: src/test/java/org/traccar/protocol/WialonProtocolDecoderTest.java
Patch:
@@ -36,7 +36,7 @@ public void testDecode() throws Exception {
                 "#D#101118;061143;0756.0930;N;12338.6403;E;18.223;99.766;-4.000;10;0.800;NA;NA;NA;NA;101_521347:1:521249,101_521126:1:6593598,101_521127:1:774780,101_521072_21.1:1:0,101_521072_21.2:1:71353;F24A"));
 
         verifyPosition(decoder, text(
-                "99999999#D#101118;061143;0756.0930;N;12338.6403;E;18.223;99.766;-4.000;10;0.800;NA;NA;NA;NA;101_521347:1:521249,101_521126:1:6593598,101_521127:1:774780,101_521072_21.1:1:0,101_521072_21.2:1:71353;F24A"));
+                "2.0;99999999#D#101118;061143;0756.0930;N;12338.6403;E;18.223;99.766;-4.000;10;0.800;NA;NA;NA;NA;101_521347:1:521249,101_521126:1:6593598,101_521127:1:774780,101_521072_21.1:1:0,101_521072_21.2:1:71353;F24A"));
 
         verifyPosition(decoder, text(
                 "#D#151216;135910;5321.1466;N;04441.7929;E;87;156;265.000000;12;1.000000;241;NA;NA;NA;odo:2:0.000000,total_fuel:1:430087,can_fls:1:201,can_taho:1:11623,can_mileage:1:140367515"));
@@ -82,6 +82,7 @@ public void testDecode() throws Exception {
         verifyAttribute(decoder, text(
                 "#D#120319;112003;NA;NA;NA;NA;0.000;NA;NA;0;NA;NA;NA;NA;NA;motion:3:false"),
                 "motion", false);
+
     }
 
 }

File: src/main/java/org/traccar/forward/PositionForwarderWialon.java
Patch:
@@ -91,7 +91,7 @@ public void forward(PositionData positionData, ResultHandler resultHandler) {
         if (version.startsWith("2")) {
             payload += ';';
             ByteBuffer payloadBuffer = ByteBuffer.wrap(payload.getBytes(StandardCharsets.US_ASCII));
-            int checksum = Checksum.crc16(Checksum.CRC16_MODBUS, payloadBuffer);
+            int checksum = Checksum.crc16(Checksum.CRC16_IBM, payloadBuffer);
             message = version + ';' + uniqueId + "#D#" + payload + String.format("%04x", checksum) + "\r\n";
         } else {
             message = uniqueId + "#D#" + payload + "\r\n";

File: src/main/java/org/traccar/database/NotificationManager.java
Patch:
@@ -114,7 +114,7 @@ private void updateEvent(Event event, Position position) {
                     Calendar calendar = calendarId != 0 ? cacheManager.getObject(Calendar.class, calendarId) : null;
                     return calendar == null || calendar.checkMoment(event.getEventTime());
                 })
-                .collect(Collectors.toUnmodifiableList());
+                .toList();
 
         Device device = cacheManager.getObject(Device.class, event.getDeviceId());
         LOGGER.info(

File: src/main/java/org/traccar/handler/ComputedAttributesHandler.java
Patch:
@@ -143,7 +143,7 @@ public Object computeAttribute(Attribute attribute, Position position) throws Je
     public void handlePosition(Position position, Callback callback) {
         var attributes = cacheManager.getDeviceObjects(position.getDeviceId(), Attribute.class).stream()
                 .sorted(Comparator.comparing(Attribute::getPriority).reversed())
-                .collect(Collectors.toUnmodifiableList());
+                .toList();
         for (Attribute attribute : attributes) {
             if (attribute.getAttribute() != null) {
                 try {

File: src/main/java/org/traccar/helper/model/DeviceUtil.java
Patch:
@@ -70,7 +70,7 @@ public static Collection<Device> getAccessibleDevices(
             long groupId = groupQueue.pop();
             results.addAll(devicesByGroup.getOrDefault(groupId, Collections.emptyList()));
             groupQueue.addAll(groupsByGroup.getOrDefault(groupId, Collections.emptyList())
-                    .stream().map(Group::getId).collect(Collectors.toUnmodifiableList()));
+                    .stream().map(Group::getId).toList());
         }
 
         return results;

File: src/main/java/org/traccar/reports/DevicesReportProvider.java
Patch:
@@ -62,7 +62,7 @@ public Collection<DeviceReportItem> getObjects(long userId) throws StorageExcept
                 new Columns.All(),
                 new Condition.Permission(User.class, userId, Device.class))).stream()
                 .map(device -> new DeviceReportItem(device, positions.get(device.getId())))
-                .collect(Collectors.toUnmodifiableList());
+                .toList();
     }
 
     public void getExcel(OutputStream outputStream, long userId) throws StorageException, IOException {

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolDecoder.java
Patch:
@@ -214,7 +214,7 @@ protected Object decode(
                             int lac = buf.readUnsignedShortLE();
                             long cid;
                             if (key == 0x29) {
-                                cid = buf.readLongLE();
+                                cid = buf.readIntLE();
                             } else {
                                 cid = buf.readUnsignedShortLE();
                             }

File: src/test/java/org/traccar/protocol/Minifinder2ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Minifinder2ProtocolDecoder(null));
 
+        verifyPositions(decoder, false, binary(
+                "ab10b803daa44c0101100138363136323930353036323530313509244290bf668600764a5f19ba74acb9b465ba084b756c6d6f73656eb618e829e7737008544c422d694e6574ae5c648e75a72104576f7278ad7483c2275cb808544c422d694e6574ade465b89319551a5368656c6c79506c757331504d2d4534363542383933313935340b29ee00010ee40c6e23c9000924ae91bf668600764a5f19b618e829e7737008544c422d694e6574ade465b89319551a5368656c6c79506c757331504d2d453436354238393331393534ac7483c2275cb808544c422d694e6574b674acb9b465ba084b756c6d6f73656ead5c648e75a72104576f72780b29ee00010ee40c6e23c90009241793bf668600764a6319b574acb9b465ba084b756c6d6f73656eade465b89319551a5368656c6c79506c757331504d2d453436354238393331393534b718e829e7737008544c422d694e6574ace063da3a591a084b756c6d6f73656eab7483c2275cb808544c422d694e65740b29ee00010ee40c6e23c90009248094bf668600764a6319b774acb9b465ba084b756c6d6f73656eaee465b89319551a5368656c6c79506c757331504d2d453436354238393331393534ab7483c2275cb808544c422d694e6574aae063da3a591a084b756c6d6f73656eb818e829e7737008544c422d694e65740b29ee00010ee40c6e23c9000924e995bf668600764a5f19b718e829e7737008544c422d694e6574b674acb9b465ba084b756c6d6f73656eaee465b89319551a5368656c6c79506c757331504d2d453436354238393331393534af5c648e75a72104576f7278ad7483c2275cb808544c422d694e65740b29ee00010ee40c6e23c90009245297bf668600764a5f19b818e829e7737008544c422d694e6574b274acb9b465ba084b756c6d6f73656eae7483c2275cb808544c422d694e6574ade465b89319551a5368656c6c79506c757331504d2d453436354238393331393534ae5c648e75a72104576f72780b29ee00010ee40c6e23c9000924bc98bf66860076495f19b818e829e7737008544c422d694e6574b074acb9b465ba084b756c6d6f73656eaee465b89319551a5368656c6c79506c757331504d2d453436354238393331393534ac7483c2275cb808544c422d694e6574ad5c648e75a72104576f72780b29ee00010ee40c6e23c9000924259abf66060076494d19b718e829e7737008544c422d694e6574b374acb9b465ba084b756c6d6f73656ead7483c2275cb808544c422d694e6574ad5c648e75a72104576f7278abe063da3a591a084b756c6d6f73656e0b29ee00010ee40c6e23c900"));
+
         verifyPositions(decoder, false, binary(
                 "ab105a0512e19404011001383632333131303632373037333735093743c3ec640000000009374dc3ec6400000000093750c3ec6400000080092455c3ec640203935e0f22a318d6c7baacd6a2546751467bd009246ac3ec640203b35e0f22a318d6c7baacd6a2546751467bd009246cc3ec640203b35e0f22a318d6c7baacd6a2546751467bd009247ec3ec640203b35e0f22a318d6c7baacd6a2546751467bd0092492c3ec640203b35e0f22a318d6c7baacd6a2546751467bd00924a6c3ec640203b35e0f22a318d6c7baacd6a2546751467bd00924bac3ec640203b35e0f22a318d6c7baacd6a2546751467bd00924d2c3ec640203b35e0f22a7083a2f201a83a3f8084f84ae560924e7c3ec640203b35e0f22a7083a2f201a83a3f8084f84ae560924fbc3ec640203b35e0f22a7083a2f201a83a3f8084f84ae5609240fc4ec640203b35e0f22a7083a2f201a83a3f8084f84ae56092423c4ec640203b35d0f22a7083a2f201a83a3f8084f84ae56092437c4ec640203cb5d0f22a7083a2f201a83a3f8084f84ae5609244fc4ec640003cb5d092464c4ec640003cb5d092478c4ec640003cb5d09248cc4ec640003cb5d0924a0c4ec640003cb5d0924b4c4ec640003cb5d0924ccc4ec640003cb5d0924e5c4ec640003cb5d0924fec4ec6400037b5d092413c5ec6400037b5d092427c5ec6400017b5d0924b785ed640003cb530924d085ed640003ab530924e985ed640003ab530924fe85ed640003ab5309241286ed640003ab5309242686ed640003ab5309243a86ed640003ab5309244e86ed640003ab5309246786ed640003ab5309248086ed640003ab5309249986ed6400037b530924b286ed6400037b530924c686ed6400037b530924da86ed6400037b530924ee86ed6400037b5309240287ed6400037b5309241687ed6400037b5309242f87ed6400037b5309244787ed640003835309246187ed640003835309247a87ed640003835309249287ed64000383530924ab87ed64000383530924c487ed64000383530924d987ed64000383530924ed87ed640003835309240188ed640003835309241588ed640003835309242988ed640003d35309243a88ed640003d3530d02000000803788ed640000000009374188ed640400000009244188ed640003d35309244288ed640003d35309374b88ed640500000009244b88ed640003d35309375588ed640500000009245588ed640003d35309245788ed640003d35309375f88ed640700000009245f88ed640003d35309376988ed640800000009246988ed640003d35309246b88ed640203d3530f22a502184a2cfba0a42c768af4ab5009247188ed640203d3530f22a502184a2cfba0a42c768af4ab5009377388ed640a00000009247688ed640203d3530f22a502184a2cfba0a42c768af4ab5009247b88ed640203d3530f22a502184a2cfba0a42c768af4ab5009377d88ed640300000009247e88ed640203d3530f22a502184a2cfba0a42c768af4ab5009248088ed640203d3530f22a502184a2cfba0a42c768af4ab5009248588ed640203d3530f22a502184a2cfba0a42c768af4ab5009378788ed640000000009248a88ed640203d3530f22a502184a2cfba0a42c768af4ab5009248f88ed640203d3530f22a502184a2cfba0a42c768af4ab5009379188ed640000000009379288ed640000008009249288ed640203d3530f22a502184a2cfba0a42c768af4ab5009249488ed640203d3530f22a502184a2cfba0a42c768af4ab5009249988ed640203d3530f22a502184a2cfba0a42c768af4ab5009249e88ed640203d3530f22a502184a2cfba0a42c768af4ab500924a388ed640203d3530f22a502184a2cfba0a42c768af4ab500924a688ed640203d3530f22a502184a2cfba0a42c768af4ab50"));
 

File: src/test/java/org/traccar/protocol/HuabaoProtocolDecoderTest.java
Patch:
@@ -21,7 +21,7 @@ public void testDecode() throws Exception {
 
         verifyAttribute(decoder, binary(
                 "7e020000520198080908740af300000000000c000f016602a302c662f802fc000000cc24051618132401040000020f30011e310109f30100610204b056020acd5d0b0102d40379b8011423033c51108017ffffffffffffffffffffffffffffc87e"),
-                Position.PREFIX_TEMP + 1, -3274.5);
+                Position.PREFIX_TEMP + 1, -2.3);
 
         verifyAttribute(decoder, binary(
                 "7e020000460100503769640002000001000000001a01b9eaf804d8ee86001800000000240507035152010400000000300100310107eb1c00060089fffffffe000400ce0000000c00b28942310221007544309f5f7e"),

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -168,7 +168,7 @@ public void addDevice(long deviceId, Object key) throws Exception {
                 }
             }
             references.add(key);
-            LOGGER.info("Cache add device {} references {} key {}", deviceId, references.size(), key);
+            LOGGER.debug("Cache add device {} references {} key {}", deviceId, references.size(), key);
         } finally {
             lock.writeLock().unlock();
         }
@@ -184,7 +184,7 @@ public void removeDevice(long deviceId, Object key) {
                 devicePositions.remove(deviceId);
                 deviceReferences.remove(deviceId);
             }
-            LOGGER.info("Cache remove device {} references {} key {}", deviceId, references.size(), key);
+            LOGGER.debug("Cache remove device {} references {} key {}", deviceId, references.size(), key);
         } finally {
             lock.writeLock().unlock();
         }

File: src/main/java/org/traccar/protocol/RstProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public RstProtocolDecoder(Protocol protocol) {
             .text("RST;")
             .expression("([AL]);")               // archive
             .expression("([^,]+);")              // model
-            .expression("(.{5});")               // firmware
+            .expression("(.{5,6});")               // firmware
             .number("(d{9});")                   // serial number
             .number("(d+);")                     // index
             .number("(d+);")                     // type

File: src/main/java/org/traccar/protocol/RstProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public RstProtocolDecoder(Protocol protocol) {
             .text("RST;")
             .expression("([AL]);")               // archive
             .expression("([^,]+);")              // model
-            .expression("(.{5});")               // firmware
+            .expression("(.{5,6});")               // firmware
             .number("(d{9});")                   // serial number
             .number("(d+);")                     // index
             .number("(d+);")                     // type

File: src/main/java/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -158,12 +158,13 @@ public Response updateAccumulators(DeviceAccumulators entity) throws Exception {
                     new Columns.Include("positionId"),
                     new Condition.Equals("id", device.getId())));
 
+            var key = new Object();
             try {
-                cacheManager.addDevice(position.getDeviceId());
+                cacheManager.addDevice(position.getDeviceId(), key);
                 cacheManager.updatePosition(position);
                 connectionManager.updatePosition(true, position);
             } finally {
-                cacheManager.removeDevice(position.getDeviceId());
+                cacheManager.removeDevice(position.getDeviceId(), key);
             }
         } else {
             throw new IllegalArgumentException();

File: src/main/java/org/traccar/database/NotificationManager.java
Patch:
@@ -171,13 +171,14 @@ public void updateEvents(Map<Event, Position> events) {
         for (Entry<Event, Position> entry : events.entrySet()) {
             Event event = entry.getKey();
             Position position = entry.getValue();
+            var key = new Object();
             try {
-                cacheManager.addDevice(event.getDeviceId());
+                cacheManager.addDevice(event.getDeviceId(), key);
                 updateEvent(event, position);
             } catch (Exception e) {
                 throw new RuntimeException(e);
             } finally {
-                cacheManager.removeDevice(event.getDeviceId());
+                cacheManager.removeDevice(event.getDeviceId(), key);
             }
         }
     }

File: src/test/java/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new MegastekProtocolDecoder(null));
 
-        verifyNull(decoder, text(
+        verifyPosition(decoder, text(
                 "0226$MGV002,860537065044539,,S,020824,120719,V,5339.11529,N,01011.15575,E,00,00,00,99.9,3.255,,52.1,,262,01,FFFE,277A602,14,000,0000,0000,0,,,,,01000,078,Timer,dc15c8984804:65|50e63698d1d5:70|44053fdacd6e:73|e0516314f2a7:88,,0,,;!"));
         
         verifyPosition(decoder, text(

File: src/main/java/org/traccar/protocol/AstraProtocolDecoder.java
Patch:
@@ -158,7 +158,7 @@ private Object decodeX(Channel channel, SocketAddress remoteAddress, ByteBuf buf
             position.setDeviceId(deviceSession.getDeviceId());
 
             position.set(Position.KEY_INDEX, buf.readUnsignedByte());
-            long mask = (long) buf.readUnsignedShort() << 32 + buf.readUnsignedInt();
+            long mask = ((long) buf.readUnsignedShort() << 32) + buf.readUnsignedInt();
             position.setDeviceTime(readTime(buf));
             position.set(Position.KEY_EVENT, buf.readUnsignedInt());
             position.set(Position.KEY_STATUS, buf.readUnsignedShort());

File: src/test/java/org/traccar/protocol/AstraProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new AstraProtocolDecoder(null));
 
+        verifyPositions(decoder, binary(
+                "58003201052196881ae0ce1f00000000000353d3d49e0010200000093d2353d3d49d031b934afffb036c0000a0000000e0eb"));
+
         verifyPositions(decoder, false, binary(
                 "5800cb02052196881aff5b3c0000200010bf53cbfab10000000100393d5853cbfab0031b93affffb034b0000ae00000000010000000c000c00000000000000787e00000000000000000000000000000000000000000000000000000000000000000000000000000000003d0000200010bf53cbfae60000280000293c5853cbfae6031b93affffb034b0000ae00000000010000000d000c00000000000000ae7e0000000000000000000000000000000000000000000000000000000000000000000000000000000000e604"));
 

File: src/main/java/org/traccar/protocol/UproProtocolDecoder.java
Patch:
@@ -298,7 +298,7 @@ protected Object decode(
                                     mcc, mnc,
                                     Integer.parseInt(stringValue.substring(offset, offset + 4), 16),
                                     Long.parseLong(stringValue.substring(offset + 4, offset + 12), 16),
-                                    Integer.parseInt(stringValue.substring(offset + 12, offset + 14))));
+                                    Integer.parseInt(stringValue.substring(offset + 12, offset + 14), 16)));
                         }
                     } else {
                         position.set(Position.KEY_POWER,

File: src/test/java/org/traccar/protocol/UproProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new UproProtocolDecoder(null));
 
+        verifyPosition(decoder, buffer(
+                "*HQ200862406278000161,AB1&A1103312243149711422697470000040724&B0100000000&F0000&R2900&N04&Y3246011F4202C1460D351F4202C146113A1F4204C1460B3C&Q06f4911e6155e127b04e2640509e325091e3cc45ed4e788a20e024a151f81a679be2a45250d4f7e7dff75b&T63&J000300&K00100&X(k89882280666065148193)(10)(J0000)(PMODE,0,10)(20)(5000A)#"));
+
         verifyPosition(decoder, buffer(
                 "*HQ201999999,BA&A1656512233362911356523660000230618&B0100060010&C00000<6<&F0000&R2405&V0109&W0000003E&K00100&T65&I54600027A00FCB6227A00FCA5727A00E955327A00E8B5327A00F9748&Y54600027A000000FCB6227A000000FCA5727A000000E955327A000000E8B5327A000000F9748&b00A7E81007607#"));
 

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -786,6 +786,7 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                             case 2:
                             case 3:
                                 position.set(Position.KEY_CHARGE, true);
+                            default:
                         }
                     }
                     if (length > 5) {

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -278,6 +278,8 @@ private Object decodeInf(Channel channel, SocketAddress remoteAddress, String se
         position.set(Position.PREFIX_ADC + 2, parser.next());
         if (model.equals("GV310LAU")) {
             position.set(Position.PREFIX_ADC + 3, parser.next());
+        } else {
+            parser.next(); // skip for other devices
         }
 
         position.set(Position.KEY_INPUT, parser.next());

File: src/test/java/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Gl200TextProtocolDecoder(null));
 
+        verifyAttributes(decoder, buffer(
+                "+RESP:GTINF,423036,866884046104139,,41,89103000000064820042,22,99,0,,,3.82,0,0,1,0,0,20240622183159,57,,,,,20240623011548,005C$"));
+
         verifyAttribute(decoder, buffer(
                 "+RESP:GTERI,8020050704,867488060246195,,00000004,28823,10,1,1,0.0,33,10.1,10.606120,43.656780,20240408084402,0222,0010,7D53,00DD120D,02,0,0.0,,,,,100,210100,0,1,FFFFF,YS2R4X20009288827,2,H1910197,58234.30,500,1,90,H1.5,P84.00,,0,4616.20,2.28,2.16,5.64,5358,1038,0010,00,00,20240408084403,1809$"),
                 Position.KEY_BATTERY_LEVEL, 100);

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -170,7 +170,7 @@ public void addDevice(long deviceId) throws Exception {
     public void removeDevice(long deviceId) {
         try {
             lock.writeLock().lock();
-            if (deviceReferences.computeIfAbsent(deviceId, k -> new AtomicInteger()).incrementAndGet() <= 0) {
+            if (deviceReferences.computeIfAbsent(deviceId, k -> new AtomicInteger()).decrementAndGet() <= 0) {
                 graph.removeObject(Device.class, deviceId);
                 devicePositions.remove(deviceId);
                 deviceReferences.remove(deviceId);

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -68,7 +68,7 @@
 import org.traccar.geocoder.PositionStackGeocoder;
 import org.traccar.geocoder.PlusCodesGeocoder;
 import org.traccar.geocoder.TomTomGeocoder;
-import org.traccar.geocoder.GeocodeJSONGeocoder;
+import org.traccar.geocoder.GeocodeJsonGeocoder;
 import org.traccar.geolocation.GeolocationProvider;
 import org.traccar.geolocation.GoogleGeolocationProvider;
 import org.traccar.geolocation.OpenCellIdGeolocationProvider;
@@ -263,7 +263,7 @@ public static Geocoder provideGeocoder(Config config, Client client, StatisticsM
                     geocoder = new GeoapifyGeocoder(client, key, language, cacheSize, addressFormat);
                     break;
                 case "geocodejson":
-                    geocoder = new GeocodeJSONGeocoder(client, url, key, language, cacheSize, addressFormat);
+                    geocoder = new GeocodeJsonGeocoder(client, url, key, language, cacheSize, addressFormat);
                     break;
                 default:
                     geocoder = new GoogleGeocoder(client, key, language, cacheSize, addressFormat);

File: src/main/java/org/traccar/geocoder/BanGeocoder.java
Patch:
@@ -23,7 +23,7 @@
 import jakarta.json.JsonObject;
 import jakarta.ws.rs.client.Client;
 
-public class BanGeocoder extends GeocodeJSONGeocoder {
+public class BanGeocoder extends GeocodeJsonGeocoder {
 
     public BanGeocoder(Client client, int cacheSize, AddressFormat addressFormat) {
         super(client, "https://api-adresse.data.gouv.fr/reverse/", null, null, cacheSize, addressFormat);

File: src/main/java/org/traccar/geocoder/GeocodeJsonGeocoder.java
Patch:
@@ -20,7 +20,7 @@
 import jakarta.json.JsonObject;
 import jakarta.ws.rs.client.Client;
 
-public class GeocodeJSONGeocoder extends JsonGeocoder {
+public class GeocodeJsonGeocoder extends JsonGeocoder {
 
     private static String formatUrl(String url, String key, String language) {
         if (url == null) {
@@ -36,7 +36,7 @@ private static String formatUrl(String url, String key, String language) {
         return url;
     }
 
-    public GeocodeJSONGeocoder(
+    public GeocodeJsonGeocoder(
             Client client, String url, String key, String language, int cacheSize, AddressFormat addressFormat) {
         super(client, formatUrl(url, key, language), cacheSize, addressFormat);
     }

File: src/test/java/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -125,7 +125,7 @@ public void testGeoapify() {
     @Disabled
     @Test
     public void testGeocodeJSON() {
-        Geocoder geocoder = new GeocodeJSONGeocoder(client, null, null, null, 0, new AddressFormat());
+        Geocoder geocoder = new GeocodeJsonGeocoder(client, null, null, null, 0, new AddressFormat());
         String address = geocoder.getAddress(40.7337807, -73.9974401, null);
         assertEquals("35 West 9th Street, New York, New York, US", address);
     }

File: src/main/java/org/traccar/geocoder/PhotonGeocoder.java
Patch:
@@ -27,6 +27,9 @@ private static String formatUrl(String url, String key, String language) {
             url = "https://photon.komoot.io/reverse";
         }
         url += "?lat=%f&lon=%f";
+        if (key != null) {
+            url += "&key=" + key;
+        }
         if (language != null) {
             url += "&lang=" + language;
         }

File: src/main/java/org/traccar/helper/Log.java
Patch:
@@ -283,16 +283,16 @@ public static long[] getStorageSpace() {
         var stores = new ArrayList<Pair<Long, Long>>();
         for (FileStore store : FileSystems.getDefault().getFileStores()) {
             try {
-                long totalSpace = store.getTotalSpace();
                 long usableSpace = store.getUsableSpace();
+                long totalSpace = store.getTotalSpace();
                 if (totalSpace > 1_000_000_000) {
                     stores.add(new Pair<>(usableSpace, totalSpace));
                 }
             } catch (IOException ignored) {
             }
         }
         return stores.stream()
-                .sorted(Comparator.comparingDouble(o -> 1 - o.getFirst() / (double) o.getSecond()))
+                .sorted(Comparator.comparingDouble(p -> p.getFirst() / (double) p.getSecond()))
                 .flatMap(p -> Stream.of(p.getFirst(), p.getSecond()))
                 .mapToLong(Long::longValue)
                 .toArray();

File: src/test/java/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -514,10 +514,11 @@ public void testDecode() throws Exception {
                 "+RESP:GTCAN,8020050605,867488060270575,,00,1,FFFFFFFF,8LBETF3W4N0001613,,,22.54,0,,,,,,,7.84,4.61,3.24,3.33,,8080,,,00,0.00,0.00,1,14,14,2371,0,001FFFFF,,,,,,,,,7158,9998,0,7.84,0.00,0.00,558,,,,,,,C0,,,,,0,0.0,346,2848.5,-78.592371,-0.968132,20240202083437,0740,0002,526C,00AE7907,00,20240202083440,3F6D$"));
 
         verifyAttribute(decoder, buffer(
-                        "+BUFF:GTIGN,6E0202,868589060169789,ra79,379,1,0.0,105,532.2,-70.616413,-33.393457,20240610201712,0730,0001,333A,00CFA301,01,11,,0.0,20240610201713,3AE2$"),
+                "+BUFF:GTIGN,6E0202,868589060169789,ra79,379,1,0.0,105,532.2,-70.616413,-33.393457,20240610201712,0730,0001,333A,00CFA301,01,11,,0.0,20240610201713,3AE2$"),
                 Position.KEY_IGNITION, true);
+        
         verifyAttribute(decoder, buffer(
-                        "+RESP:GTIGF,6E0202,868589060169789,ra79,145,1,0.0,83,532.2,-70.616413,-33.393457,20240610201937,0730,0001,333A,00CFA301,01,12,,0.0,20240610201938,3AE9$"),
+                "+RESP:GTIGF,6E0202,868589060169789,ra79,145,1,0.0,83,532.2,-70.616413,-33.393457,20240610201937,0730,0001,333A,00CFA301,01,12,,0.0,20240610201938,3AE9$"),
                 Position.KEY_IGNITION, false);
     }
 

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -1033,7 +1033,8 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String[]
         return positions;
     }
 
-    private Object decodeIgn(Channel channel, SocketAddress remoteAddress, String[] v, String type) throws ParseException {
+    private Object decodeIgn(
+            Channel channel, SocketAddress remoteAddress, String[] v, String type) throws ParseException {
         int index = 1; // header
         String protocolVersion = v[index++]; // protocol version
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, v[index++]);

File: src/main/java/org/traccar/EventLoopGroupFactory.java
Patch:
@@ -20,8 +20,8 @@
 
 public final class EventLoopGroupFactory {
 
-    private final static EventLoopGroup BOSS_GROUP = new NioEventLoopGroup();
-    private final static EventLoopGroup WORKER_GROUP = new NioEventLoopGroup();
+    private static final EventLoopGroup BOSS_GROUP = new NioEventLoopGroup();
+    private static final EventLoopGroup WORKER_GROUP = new NioEventLoopGroup();
 
     private EventLoopGroupFactory() {
     }

File: src/main/java/org/traccar/EventLoopGroupFactory.java
Patch:
@@ -20,8 +20,8 @@
 
 public final class EventLoopGroupFactory {
 
-    private static final EventLoopGroup bossGroup = new NioEventLoopGroup();
-    private static final EventLoopGroup workerGroup = new NioEventLoopGroup();
+    private final static EventLoopGroup bossGroup = new NioEventLoopGroup();
+    private final static EventLoopGroup workerGroup = new NioEventLoopGroup();
 
     private EventLoopGroupFactory() {
     }

File: src/main/java/org/traccar/api/resource/ReportResource.java
Patch:
@@ -326,7 +326,7 @@ public Response getStopsExcel(
     @Path("devices/{type:xlsx|mail}")
     @GET
     @Produces(EXCEL)
-    public Response geDevicesExcel(
+    public Response getDevicesExcel(
             @PathParam("type") String type) throws StorageException {
         permissionsService.checkRestriction(getUserId(), UserRestrictions::getDisableReports);
         return executeReport(getUserId(), type.equals("mail"), stream -> {

File: src/test/java/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -18,7 +18,7 @@ public void testDecode() throws Exception {
         var decoder = inject(new WatchProtocolDecoder(null));
 
         verifyAttribute(decoder, buffer(
-                        "[3G*9705141740*000B*oxygen,0,98]"),
+                "[3G*9705141740*000B*oxygen,0,98]"),
                 "bloodOxygen", 98);
 
         verifyPosition(decoder, buffer(

File: src/main/java/org/traccar/handler/DatabaseHandler.java
Patch:
@@ -42,7 +42,7 @@ public void handlePosition(Position position, Callback callback) {
 
         try {
             position.setId(storage.addObject(position, new Request(new Columns.Exclude("id"))));
-            statisticsManager.messageStoredCount(position.getDeviceId());
+            statisticsManager.registerMessageStored(position.getDeviceId(), position.getProtocol());
         } catch (Exception error) {
             LOGGER.warn("Failed to store position", error);
         }

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -232,7 +232,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(75, fmbXXX, (p, b) -> p.set(Position.PREFIX_TEMP + 4, b.readInt() * 0.1));
         register(78, null, (p, b) -> {
             long driverUniqueId = b.readLongLE();
-            if (driverUniqueId > 0) {
+            if (driverUniqueId != 0) {
                 p.set(Position.KEY_DRIVER_UNIQUE_ID, String.format("%016X", driverUniqueId));
             }
         });

File: src/main/java/org/traccar/protocol/TrvProtocolDecoder.java
Patch:
@@ -345,7 +345,7 @@ protected Object decode(
                     position.set("pressureSystolic", Integer.parseInt(values[2]));
                     position.set("pressureDiastolic", Integer.parseInt(values[3]));
                     position.set("spo2", Integer.parseInt(values[4]));
-                    position.set("bloodSugar", Integer.parseInt(values[5]));
+                    position.set("bloodSugar", Double.parseDouble(values[5]));
                     position.set("temperature", Double.parseDouble(values[6]));
                     break;
                 case "AP50":

File: src/main/java/org/traccar/storage/DatabaseModule.java
Patch:
@@ -20,7 +20,6 @@
 import com.zaxxer.hikari.HikariConfig;
 import com.zaxxer.hikari.HikariDataSource;
 import liquibase.Contexts;
-import liquibase.GlobalConfiguration;
 import liquibase.Liquibase;
 import liquibase.database.Database;
 import liquibase.database.DatabaseFactory;

File: src/main/java/org/traccar/protocol/SnapperProtocolDecoder.java
Patch:
@@ -68,8 +68,8 @@ private void sendResponse(
             response.writeByte(3); // protocol version
             response.writeLongLE(0); // reserved
             response.writeShortLE(0); // encryption
-            response.writeIntLE(0); // reserved
             response.writeIntLE(answer.length());
+            response.writeIntLE(0); // reserved
             response.writeShortLE(index);
             response.writeByte(Checksum.sum(ByteBuffer.wrap(answer.getBytes(StandardCharsets.US_ASCII))));
             response.writeShortLE(type);

File: src/main/java/org/traccar/protocol/SnapperProtocolDecoder.java
Patch:
@@ -66,13 +66,13 @@ private void sendResponse(
             ByteBuf response = Unpooled.buffer();
             response.writeByte('K');
             response.writeByte(3); // protocol version
-            response.writeIntLE(0); // reserved
-            response.writeIntLE(0); // reserved
+            response.writeLongLE(0); // reserved
             response.writeShortLE(0); // encryption
+            response.writeIntLE(0); // reserved
             response.writeIntLE(answer.length());
             response.writeShortLE(index);
             response.writeByte(Checksum.sum(ByteBuffer.wrap(answer.getBytes(StandardCharsets.US_ASCII))));
-            response.writeByte(type);
+            response.writeShortLE(type);
             response.writeCharSequence(answer, StandardCharsets.US_ASCII);
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }

File: src/main/java/org/traccar/model/Calendar.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 - 2022 Anton Tananaev (anton@traccar.org)
+ * Copyright 2016 - 2024 Anton Tananaev (anton@traccar.org)
  * Copyright 2016 Andrey Kunitsyn (andrey@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -79,9 +79,8 @@ private Collection<VEvent> findEvents(Date date) {
     }
 
     public Collection<Period> findPeriods(Date date) {
-        var calendarDate = new net.fortuna.ical4j.model.Date(date);
         return findEvents(date).stream()
-                .flatMap((event) -> event.getConsumedTime(calendarDate, calendarDate).stream())
+                .flatMap((e) -> e.calculateRecurrenceSet(new Period(new DateTime(date), Duration.ZERO)).stream())
                 .collect(Collectors.toSet());
     }
 

File: src/main/java/org/traccar/schedule/TaskReports.java
Patch:
@@ -81,7 +81,7 @@ public void run() {
                 var lastEvents = calendar.findPeriods(lastCheck);
                 var currentEvents = calendar.findPeriods(currentCheck);
 
-                if (!lastEvents.isEmpty() && currentEvents.isEmpty()) {
+                if (!lastEvents.isEmpty() && !currentEvents.equals(lastEvents)) {
                     Period period = lastEvents.iterator().next();
                     RequestScoper scope = ServletScopes.scopeRequest(Collections.emptyMap());
                     try (RequestScoper.CloseableScope ignored = scope.open()) {

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -601,7 +601,7 @@ private Keys() {
             "uid");
 
     /**
-     * LDAP attribute used as user name. Default value is 'cn'.
+     * LDAP attribute used as username. Default value is 'cn'.
      */
     public static final ConfigKey<String> LDAP_NAME_ATTRIBUTE = new StringConfigKey(
             "ldap.nameAttribute",

File: src/main/java/org/traccar/schedule/TaskExpirations.java
Patch:
@@ -111,7 +111,7 @@ public void run() {
             }
 
             if (config.getBoolean(Keys.NOTIFICATION_EXPIRATION_DEVICE)) {
-                long reminder = config.getLong(Keys.NOTIFICATION_EXPIRATION_USER_REMINDER);
+                long reminder = config.getLong(Keys.NOTIFICATION_EXPIRATION_DEVICE_REMINDER);
                 var devices = storage.getObjects(Device.class, new Request(new Columns.All()));
                 for (Device device : devices) {
                     if (checkTimeTrigger(device, currentTime, 0)) {

File: src/main/java/org/traccar/ServerManager.java
Patch:
@@ -54,7 +54,7 @@ public ServerManager(
         for (Class<?> protocolClass : ClassScanner.findSubclasses(BaseProtocol.class, "org.traccar.protocol")) {
             String protocolName = BaseProtocol.nameFromClass(protocolClass);
             if (enabledProtocols == null || enabledProtocols.contains(protocolName)) {
-                if (config.hasKey(Keys.PROTOCOL_PORT.withPrefix(protocolName))) {
+                if (config.getInteger(Keys.PROTOCOL_PORT.withPrefix(protocolName)) > 0) {
                     BaseProtocol protocol = (BaseProtocol) injector.getInstance(protocolClass);
                     connectorList.addAll(protocol.getConnectorList());
                     protocolList.put(protocol.getName(), protocol);

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -33,7 +33,7 @@ private Keys() {
      * Port number for the protocol. Most protocols use TCP on the transport layer. Some protocols use UDP. Some
      * support both TCP and UDP.
      */
-    public static final ConfigSuffix<Integer> PROTOCOL_PORT = new IntegerConfigSuffix(
+    public static final ConfigSuffix<Integer> PROTOCOL_PORT = new PortConfigSuffix(
             ".port",
             List.of(KeyType.CONFIG));
 

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -23,7 +23,7 @@ private Keys() {
     }
 
     /**
-     * Network interface for a the protocol. If not specified, server will bind all interfaces.
+     * Network interface for the protocol. If not specified, server will bind all interfaces.
      */
     public static final ConfigSuffix<String> PROTOCOL_ADDRESS = new StringConfigSuffix(
             ".address",
@@ -674,7 +674,7 @@ private Keys() {
     /**
      * OpenID Connect Authorization URL.
      * This can usually be found in the documentation of your identity provider or by using the well-known
-     * configuration endpoint, e.g. https://auth.example.com//.well-known/openid-configuration
+     * configuration endpoint, e.g. https://auth.example.com/.well-known/openid-configuration
      * Required to enable SSO if openid.issuerUrl is not set.
      */
     public static final ConfigKey<String> OPENID_AUTH_URL = new StringConfigKey(

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -191,7 +191,7 @@ public static OpenIdProvider provideOpenIDProvider(
 
     @Provides
     public static WebServer provideWebServer(Injector injector, Config config) {
-        if (config.hasKey(Keys.WEB_PORT)) {
+        if (config.getInteger(Keys.WEB_PORT) > 0) {
             return new WebServer(injector, config);
         }
         return null;
@@ -201,7 +201,7 @@ public static WebServer provideWebServer(Injector injector, Config config) {
     @Provides
     public static Geocoder provideGeocoder(Config config, Client client, StatisticsManager statisticsManager) {
         if (config.getBoolean(Keys.GEOCODER_ENABLE)) {
-            String type = config.getString(Keys.GEOCODER_TYPE, "google");
+            String type = config.getString(Keys.GEOCODER_TYPE);
             String url = config.getString(Keys.GEOCODER_URL);
             String key = config.getString(Keys.GEOCODER_KEY);
             String language = config.getString(Keys.GEOCODER_LANGUAGE);

File: src/main/java/org/traccar/database/StatisticsManager.java
Patch:
@@ -121,7 +121,7 @@ private void checkSplit() {
             }
 
             String url = config.getString(Keys.SERVER_STATISTICS);
-            if (url != null) {
+            if (url != null && !url.isEmpty()) {
                 String time = DateUtil.formatDate(statistics.getCaptureTime());
 
                 Form form = new Form();

File: src/main/java/org/traccar/storage/DatabaseModule.java
Patch:
@@ -78,7 +78,8 @@ public static DataSource provideDataSource(
 
         DataSource dataSource = new HikariDataSource(hikariConfig);
 
-        if (config.hasKey(Keys.DATABASE_CHANGELOG)) {
+        String changelog = config.getString(Keys.DATABASE_CHANGELOG);
+        if (changelog != null && !changelog.isEmpty()) {
 
             ResourceAccessor resourceAccessor = new DirectoryResourceAccessor(new File("."));
 
@@ -89,8 +90,6 @@ public static DataSource provideDataSource(
                     config.getString(Keys.DATABASE_DRIVER),
                     null, null, null, resourceAccessor);
 
-            String changelog = config.getString(Keys.DATABASE_CHANGELOG);
-
             try (Liquibase liquibase = new Liquibase(changelog, resourceAccessor, database)) {
                 liquibase.clearCheckSums();
                 liquibase.update(new Contexts());

File: src/main/java/org/traccar/protocol/SnapperProtocolDecoder.java
Patch:
@@ -205,6 +205,7 @@ protected Object decode(
                             break;
                     }
                 }
+                return position;
             default:
                 return null;
         }

File: src/main/java/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -171,7 +171,7 @@ protected Object decode(
                 }
 
                 long status = buf.readUnsignedInt();
-                position.set(Position.KEY_IGNITION, BitUtil.check(status, 7 + 3 * 8));
+                position.set(Position.KEY_IGNITION, !BitUtil.check(status, 7 + 3 * 8));
                 position.set(Position.KEY_STATUS, status);
 
                 buf.readUnsignedShort();

File: src/main/java/org/traccar/web/DefaultOverrideServlet.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2023 Anton Tananaev (anton@traccar.org)
+ * Copyright 2023 - 2024 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -24,12 +24,12 @@
 import java.io.File;
 import java.io.IOException;
 
-public class ModernDefaultServlet extends DefaultServlet {
+public class DefaultOverrideServlet extends DefaultServlet {
 
     private Resource overrideResource;
 
     @Inject
-    public ModernDefaultServlet(Config config) {
+    public DefaultOverrideServlet(Config config) {
         String override = config.getString(Keys.WEB_OVERRIDE);
         if (override != null) {
             overrideResource = Resource.newResource(new File(override));

File: src/main/java/org/traccar/web/WebServer.java
Patch:
@@ -139,7 +139,7 @@ public void doScope(
     }
 
     private void initWebApp(ServletContextHandler servletHandler) {
-        ServletHolder servletHolder = new ServletHolder(new ModernDefaultServlet(config));
+        ServletHolder servletHolder = new ServletHolder(new DefaultOverrideServlet(config));
         servletHolder.setInitParameter("resourceBase", new File(config.getString(Keys.WEB_PATH)).getAbsolutePath());
         servletHolder.setInitParameter("dirAllowed", "false");
         if (config.getBoolean(Keys.WEB_DEBUG)) {

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -974,6 +974,9 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String[]
         if (model.startsWith("GV") && !model.startsWith("GV6")) {
             position.set(Position.PREFIX_ADC + 2, v[index++].isEmpty() ? null : Integer.parseInt(v[index - 1]) * 0.001);
         }
+        if (model.startsWith("GV355CEU")) {
+            index += 1; // reserved
+        }
 
         position.set(Position.KEY_BATTERY_LEVEL, v[index++].isEmpty() ? null : Integer.parseInt(v[index - 1]));
         if (model.startsWith("GL5")) {

File: src/main/java/org/traccar/handler/BasePositionHandler.java
Patch:
@@ -20,7 +20,7 @@
 public abstract class BasePositionHandler {
 
     public interface Callback {
-        void processed(Position position);
+        void processed(boolean filtered);
     }
 
     public abstract void handlePosition(Position position, Callback callback);

File: src/main/java/org/traccar/handler/ComputedAttributesHandler.java
Patch:
@@ -196,7 +196,7 @@ public void handlePosition(Position position, Callback callback) {
                 }
             }
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/CopyAttributesHandler.java
Patch:
@@ -44,7 +44,7 @@ public void handlePosition(Position position, Callback callback) {
                 }
             }
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/DatabaseHandler.java
Patch:
@@ -47,7 +47,7 @@ public void handlePosition(Position position, Callback callback) {
             LOGGER.warn("Failed to store position", error);
         }
 
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/DistanceHandler.java
Patch:
@@ -71,7 +71,7 @@ public void handlePosition(Position position, Callback callback) {
         position.set(Position.KEY_DISTANCE, distance);
         position.set(Position.KEY_TOTAL_DISTANCE, totalDistance + distance);
 
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/EngineHoursHandler.java
Patch:
@@ -43,7 +43,7 @@ public void handlePosition(Position position, Callback callback) {
                 }
             }
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/GeofenceHandler.java
Patch:
@@ -41,7 +41,7 @@ public void handlePosition(Position position, Callback callback) {
         if (!geofenceIds.isEmpty()) {
             position.setGeofenceIds(geofenceIds);
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/HemisphereHandler.java
Patch:
@@ -53,7 +53,7 @@ public void handlePosition(Position position, Callback callback) {
         if (longitudeFactor != 0) {
             position.setLongitude(Math.abs(position.getLongitude()) * longitudeFactor);
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/MotionHandler.java
Patch:
@@ -38,7 +38,7 @@ public void handlePosition(Position position, Callback callback) {
                     cacheManager, Keys.EVENT_MOTION_SPEED_THRESHOLD, position.getDeviceId());
             position.set(Position.KEY_MOTION, position.getSpeed() > threshold);
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/OutdatedHandler.java
Patch:
@@ -50,7 +50,7 @@ public void handlePosition(Position position, Callback callback) {
                 position.setDeviceTime(position.getServerTime());
             }
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/PositionForwardingHandler.java
Patch:
@@ -131,7 +131,7 @@ public void handlePosition(Position position, Callback callback) {
             positionData.setDevice(cacheManager.getObject(Device.class, position.getDeviceId()));
             new AsyncRequestAndCallback(positionData).send();
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/PostProcessHandler.java
Patch:
@@ -47,7 +47,7 @@ public PostProcessHandler(CacheManager cacheManager, Storage storage, Connection
     @Override
     public void handlePosition(Position position, Callback callback) {
         try {
-            if (position != null && PositionUtil.isLatest(cacheManager, position)) {
+            if (PositionUtil.isLatest(cacheManager, position)) {
                 Device updatedDevice = new Device();
                 updatedDevice.setId(position.getDeviceId());
                 updatedDevice.setPositionId(position.getId());
@@ -61,7 +61,7 @@ public void handlePosition(Position position, Callback callback) {
         } catch (StorageException error) {
             LOGGER.warn("Failed to update device", error);
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/handler/SpeedLimitHandler.java
Patch:
@@ -40,13 +40,13 @@ public void handlePosition(Position position, Callback callback) {
             @Override
             public void onSuccess(double speedLimit) {
                 position.set(Position.KEY_SPEED_LIMIT, speedLimit);
-                callback.processed(position);
+                callback.processed(false);
             }
 
             @Override
             public void onFailure(Throwable e) {
                 LOGGER.warn("Speed limit provider failed", e);
-                callback.processed(position);
+                callback.processed(false);
             }
         });
     }

File: src/main/java/org/traccar/handler/TimeHandler.java
Patch:
@@ -51,7 +51,7 @@ public void handlePosition(Position position, Callback callback) {
                 position.setFixTime(position.getDeviceTime());
             }
         }
-        callback.processed(position);
+        callback.processed(false);
     }
 
 }

File: src/main/java/org/traccar/database/BufferingManager.java
Patch:
@@ -39,7 +39,7 @@ public interface Callback {
         void onReleased(ChannelHandlerContext context, Position position);
     }
 
-    private static class Holder implements Comparable<Holder> {
+    private static final class Holder implements Comparable<Holder> {
 
         private static final Comparator<Position> COMPARATOR = Comparator
                 .comparing(Position::getFixTime)

File: src/main/java/org/traccar/BasePipelineFactory.java
Patch:
@@ -96,7 +96,6 @@ protected void initChannel(Channel channel) {
             pipeline.addLast(injectMembers(new NetworkForwarderHandler(port)));
         }
         pipeline.addLast(new NetworkMessageHandler());
-        pipeline.addLast(new RemoteAddressHandler(config));
         pipeline.addLast(injectMembers(new StandardLoggingHandler(protocol)));
 
         if (!connector.isDatagram() && !config.getBoolean(Keys.SERVER_INSTANT_ACKNOWLEDGEMENT)) {
@@ -116,6 +115,7 @@ protected void initChannel(Channel channel) {
             pipeline.addLast(handler);
         });
 
+        pipeline.addLast(injector.getInstance(RemoteAddressHandler.class));
         pipeline.addLast(injector.getInstance(ProcessingHandler.class));
         pipeline.addLast(injector.getInstance(MainEventHandler.class));
     }

File: src/main/java/org/traccar/handler/network/RemoteAddressHandler.java
Patch:
@@ -19,12 +19,14 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.ChannelInboundHandlerAdapter;
 import jakarta.inject.Inject;
+import jakarta.inject.Singleton;
 import org.traccar.config.Config;
 import org.traccar.config.Keys;
 import org.traccar.model.Position;
 
 import java.net.InetSocketAddress;
 
+@Singleton
 @ChannelHandler.Sharable
 public class RemoteAddressHandler extends ChannelInboundHandlerAdapter {
 

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -207,7 +207,7 @@ private Object decodeInf(Channel channel, SocketAddress remoteAddress, String se
 
         position.set(Position.KEY_ICCID, parser.next());
         position.set(Position.KEY_RSSI, parser.nextInt());
-        
+
         if (protocolVersion.startsWith("6E")) { // GV310LAU
             position.set(Position.KEY_POWER, parser.nextDouble() / 1000); // odometer or external power
         } else {

File: src/main/java/org/traccar/forward/EventForwarderMqtt.java
Patch:
@@ -30,7 +30,7 @@ public class EventForwarderMqtt implements EventForwarder {
 
     public EventForwarderMqtt(Config config, ObjectMapper objectMapper) {
         this.topic = config.getString(Keys.EVENT_FORWARD_TOPIC);
-        mqttClient = new MqttClient(config.getString(Keys.FORWARD_URL));
+        mqttClient = new MqttClient(config.getString(Keys.EVENT_FORWARD_URL));
         this.objectMapper = objectMapper;
     }
 

File: src/main/java/org/traccar/protocol/EskyProtocolDecoder.java
Patch:
@@ -49,7 +49,7 @@ public EskyProtocolDecoder(Protocol protocol) {
             .number("(d+.d+)[+;]")               // speed
             .number("(d+)[+;]")                  // course
             .groupBegin()
-            .text("0x").number("(d+)[+;]")       // input
+            .text("0x").number("(x+)[+;]")       // input
             .number("(d+)[+;]")                  // message type
             .number("(d+)[+;]")                  // odometer
             .groupEnd("?")

File: src/test/java/org/traccar/protocol/EskyProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new EskyProtocolDecoder(null));
 
+        verifyPosition(decoder, text(
+                "ET;1;864431045310325;R;0+240303180628+-33.40958+149.56797+0.00+63+0xb+0+17814846+1168+0+0+WVWZZZ6RZFY242201+135+DTCNULL"));
+
         verifyAttribute(decoder, text(
                 "ET;0;860337031066546;R;9+200717114059+41.32053+19.80761+0.30+0+0x2+8+40381744+0+1409+11"),
                 Position.KEY_BATTERY, 14.09);

File: src/test/java/org/traccar/protocol/Tlt2hProtocolDecoderTest.java
Patch:
@@ -12,8 +12,8 @@ public void testDecode() throws Exception {
         var decoder = inject(new Tlt2hProtocolDecoder(null));
 
         verifyPositions(decoder, false, text(
-                "#868105044690301#MT600+#0000#0#0#129#40#0#AUTOLOW#1\r\n" +
-                "#072030fa20c$GPRMC,,V,,,,,,,,,,A*5C\r\n"));
+                "#862255061752835#MT710#0000#AUTO#1\r\n" +
+                "#4106#$GPRMC,151410.00,A,3010.4103,N,08146.2728,W,,214.90,010324,,,A*58\r\n"));
 
         verifyPositions(decoder, text(
                 "#868105044690301#MT600+#0000#0#0#143#40#0#AUTO#1\r\n",

File: src/main/java/org/traccar/api/resource/SessionResource.java
Patch:
@@ -127,7 +127,7 @@ public User add(
             throw new WebApplicationException(response);
         }
         if (loginResult != null) {
-            User user = new User();
+            User user = loginResult.getUser();
             request.getSession().setAttribute(USER_ID_KEY, user.getId());
             LogAction.login(user.getId(), WebHelper.retrieveRemoteAddress(request));
             return user;

File: src/main/java/org/traccar/api/security/SecurityRequestFilter.java
Patch:
@@ -90,8 +90,8 @@ public void filter(ContainerRequestContext requestContext) {
                         String[] auth = decodeBasicAuth(authHeader);
                         loginResult = loginService.login(auth[0], auth[1], null);
                     }
-                    User user = loginResult.getUser();
-                    if (user != null) {
+                    if (loginResult != null) {
+                        User user = loginResult.getUser();
                         statisticsManager.registerRequest(user.getId());
                         securityContext = new UserSecurityContext(
                                 new UserPrincipal(user.getId(), loginResult.getExpiration()));

File: src/main/java/org/traccar/protocol/UproProtocolDecoder.java
Patch:
@@ -311,8 +311,8 @@ protected Object decode(
                     }
                     break;
                 case 'd':
-                    position.set(Position.PREFIX_ADC + 1, Integer.parseInt(data.
-                                toString(StandardCharsets.US_ASCII))/100.0);
+                    position.set(Position.PREFIX_ADC + 1,
+                            (Integer.parseInt(data.toString(StandardCharsets.US_ASCII)) / 100.0));
                     break;
                 default:
                     break;

File: src/main/java/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -163,7 +163,7 @@ private void decodeParameter(Position position, int id, ByteBuf buf, int length)
                 position.set(Position.KEY_OBD_SPEED, readValue(buf, length, true));
                 break;
             case 98:
-                position.set("fuelRate", readValue(buf, length, true) * 100 / 255.0);
+                position.set(Position.KEY_FUEL_LEVEL, readValue(buf, length, true) * 100 / 255.0);
                 break;
             case 100:
                 position.set(Position.KEY_FUEL_CONSUMPTION, readValue(buf, length, true) / 20.0);

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -49,7 +49,6 @@
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 @Singleton
 public class CacheManager implements BroadcastInterface {

File: src/main/java/org/traccar/database/NotificationManager.java
Patch:
@@ -87,7 +87,7 @@ private void updateEvent(Event event, Position position) {
             return;
         }
 
-        var notifications = cacheManager.getDeviceNotifications(event.getDeviceId())
+        var notifications = cacheManager.getDeviceNotifications(event.getDeviceId()).stream()
                 .filter(notification -> notification.getType().equals(event.getType()))
                 .filter(notification -> {
                     if (event.getType().equals(Event.TYPE_ALARM)) {

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -136,14 +136,15 @@ public Set<User> getNotificationUsers(long notificationId, long deviceId) {
         }
     }
 
-    public Stream<Notification> getDeviceNotifications(long deviceId) {
+    public Set<Notification> getDeviceNotifications(long deviceId) {
         try {
             lock.readLock().lock();
             var direct = graph.getObjects(Device.class, deviceId, Notification.class, Set.of(Group.class), true)
                     .map(BaseModel::getId)
                     .collect(Collectors.toUnmodifiableSet());
             return graph.getObjects(Device.class, deviceId, Notification.class, Set.of(Group.class, User.class), true)
-                    .filter(notification -> notification.getAlways() || direct.contains(notification.getId()));
+                    .filter(notification -> notification.getAlways() || direct.contains(notification.getId()))
+                    .collect(Collectors.toUnmodifiableSet());
         } finally {
             lock.readLock().unlock();
         }

File: src/main/java/org/traccar/WindowsService.java
Patch:
@@ -170,7 +170,7 @@ private void reportStatus(int status, int win32ExitCode, int waitHint) {
 
     public abstract void run();
 
-    private class ServiceMain implements SERVICE_MAIN_FUNCTION {
+    private final class ServiceMain implements SERVICE_MAIN_FUNCTION {
 
         public void callback(int dwArgc, Pointer lpszArgv) {
             ServiceControl serviceControl = new ServiceControl();
@@ -203,7 +203,7 @@ public void callback(int dwArgc, Pointer lpszArgv) {
 
     }
 
-    private class ServiceControl implements HandlerEx {
+    private final class ServiceControl implements HandlerEx {
 
         public int callback(int dwControl, int dwEventType, Pointer lpEventData, Pointer lpContext) {
             switch (dwControl) {

File: src/main/java/org/traccar/database/DeviceLookupService.java
Patch:
@@ -49,7 +49,7 @@ public class DeviceLookupService {
 
     private final boolean throttlingEnabled;
 
-    private static class IdentifierInfo {
+    private static final class IdentifierInfo {
         private long lastQuery;
         private long delay;
         private Timeout timeout;

File: src/main/java/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -96,7 +96,7 @@ public float readFloat(ByteBuf buf) {
 
     }
 
-    private static class TimeReader extends FloatReader {
+    private static final class TimeReader extends FloatReader {
 
         private long weekNumber;
 

File: src/main/java/org/traccar/schedule/ScheduleManager.java
Patch:
@@ -39,6 +39,7 @@ public ScheduleManager(Injector injector) {
     public void start() {
         executor = Executors.newSingleThreadScheduledExecutor();
         var tasks = List.of(
+                TaskDeleteTemporary.class,
                 TaskReports.class,
                 TaskDeviceInactivityCheck.class,
                 TaskWebSocketKeepalive.class,

File: src/main/java/org/traccar/schedule/TaskReports.java
Patch:
@@ -51,7 +51,7 @@ public class TaskReports implements ScheduleTask {
 
     private static final Logger LOGGER = LoggerFactory.getLogger(TaskReports.class);
 
-    private static final long CHECK_PERIOD_MINUTES = 1;
+    private static final long CHECK_PERIOD_MINUTES = 15;
 
     private final Storage storage;
     private final Injector injector;

File: src/main/java/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -210,7 +210,9 @@ protected Object decode(
                 parser = new Parser(PATTERN_WIFI, message);
                 if (parser.matches()) {
 
-                    position.set(Position.KEY_BATTERY, parser.nextInt() * 0.1);
+                    if (parser.hasNext()) {
+                        position.set(Position.KEY_BATTERY, parser.nextInt() * 0.1);
+                    }
 
                     Network network = new Network();
                     if (parser.hasNext(4)) {

File: src/main/java/org/traccar/web/OverrideFilter.java
Patch:
@@ -75,8 +75,9 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
                         .replace("${description}", description)
                         .replace("${colorPrimary}", colorPrimary);
 
-                response.setContentLength(alteredContent.length());
-                response.getOutputStream().write(alteredContent.getBytes());
+                byte[] data = alteredContent.getBytes();
+                response.setContentLength(data.length);
+                response.getOutputStream().write(data);
 
             } else {
                 response.getOutputStream().write(bytes);

File: src/main/java/org/traccar/protocol/PositrexProtocolDecoder.java
Patch:
@@ -59,12 +59,11 @@ protected Object decode(
         ByteBuf buf = (ByteBuf) msg;
 
         int first = buf.getUnsignedByte(buf.readerIndex());
-        int second = buf.getUnsignedByte(buf.readerIndex() + 1);
         long deviceId;
         if (BitUtil.check(first, 7)) {
             if (BitUtil.check(first, 6)) {
                 deviceId = 73000000 + BitUtil.to(buf.readUnsignedInt(), 30);
-            } else if (second == 0) {
+            } else if (!BitUtil.check(first, 5) && !BitUtil.check(first, 4)) {
                 deviceId = 7590000 + BitUtil.to(buf.readUnsignedMedium(), 20);
             } else {
                 deviceId = 70000000 + BitUtil.to(buf.readUnsignedMedium(), 20);

File: src/test/java/org/traccar/protocol/PositrexProtocolDecoderTest.java
Patch:
@@ -1,19 +1,17 @@
 package org.traccar.protocol;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.traccar.ProtocolTest;
 
 public class PositrexProtocolDecoderTest extends ProtocolTest {
 
-    @Disabled
     @Test
     public void testDecode() throws Exception {
 
         var decoder = inject(new PositrexProtocolDecoder(null));
 
         verifyPosition(decoder, binary(
-                "TODO"));
+                "8280902e002b81c99fd607033905008b1c000003ae00003c9c000054ee00000079000000000d34d43f0fffffffda0000000000104fb80000204086464717807f8931082622128190980fffff862261047296590fffff"));
 
     }
 

File: src/main/java/org/traccar/database/OpenIdProvider.java
Patch:
@@ -97,7 +97,8 @@ public OpenIdProvider(Config config, LoginService loginService, HttpClient httpC
 
             String httpResponse = httpClient.send(httpRequest, BodyHandlers.ofString()).body();
 
-            Map<String, Object> discoveryMap = objectMapper.readValue(httpResponse, new TypeReference<>() {});
+            Map<String, Object> discoveryMap = objectMapper.readValue(httpResponse, new TypeReference<>() {
+            });
 
             authUrl = new URI((String) discoveryMap.get("authorization_endpoint"));
             tokenUrl = new URI((String) discoveryMap.get("token_endpoint"));

File: src/main/java/org/traccar/protocol/DualcamProtocolDecoder.java
Patch:
@@ -63,11 +63,12 @@ protected Object decode(
 
         int type = buf.readUnsignedShort();
 
+        DeviceSession deviceSession;
         switch (type) {
             case MSG_INIT:
                 buf.readUnsignedShort(); // protocol id
                 uniqueId = String.valueOf(buf.readLong());
-                DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, uniqueId);
+                deviceSession = getDeviceSession(channel, remoteAddress, uniqueId);
                 long settings = buf.readUnsignedInt();
                 if (channel != null && deviceSession != null) {
                     ByteBuf response = Unpooled.buffer();
@@ -113,7 +114,7 @@ protected Object decode(
                 }
                 break;
             case MSG_DATA:
-                int length = buf.readUnsignedShort();
+                int length = buf.readUnsignedShort() - 2;
                 media.writeBytes(buf, length);
                 boolean finished;
                 if (isPacketData()) {

File: src/test/java/org/traccar/protocol/DualcamProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "000000050001403a4abaa31444000400"));
 
+        verifyNull(decoder, binary(
+                "000d001e64736d2f706963747572652f3233313032302f3233313435322e6a706700"));
+
         verifyNull(decoder, binary(
                 "00010006000000110000"));
 

File: src/main/java/org/traccar/protocol/TopinProtocolDecoder.java
Patch:
@@ -53,6 +53,7 @@ public TopinProtocolDecoder(Protocol protocol) {
     public static final int MSG_WIFI_OFFLINE = 0x17;
     public static final int MSG_LBS_WIFI = 0x18;
     public static final int MSG_LBS_WIFI_OFFLINE = 0x19;
+    public static final int MSG_LBS_WIFI_2 = 0x1A;
     public static final int MSG_TIME_UPDATE = 0x30;
     public static final int MSG_SOS_NUMBER = 0x41;
     public static final int MSG_WIFI = 0x69;
@@ -221,7 +222,7 @@ protected Object decode(
             return position;
 
         } else if (type == MSG_WIFI || type == MSG_WIFI_OFFLINE
-                || type == MSG_LBS_WIFI || type == MSG_LBS_WIFI_OFFLINE) {
+                || type == MSG_LBS_WIFI || type == MSG_LBS_WIFI_2 || type == MSG_LBS_WIFI_OFFLINE) {
 
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -358,7 +358,7 @@ private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasL
         long cid;
         if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             cid = buf.readLong();
-        } else if (type == MSG_GPS_LBS_6) {
+        } else if (type == MSG_GPS_LBS_6 || variant == Variant.SEEWORLD) {
             cid = buf.readUnsignedInt();
         } else {
             cid = buf.readUnsignedMedium();
@@ -1485,6 +1485,8 @@ private void decodeVariant(ByteBuf buf) {
             variant = Variant.SL4X;
         } else if (header == 0x7878 && type == MSG_GPS_LBS_2 && length == 0x2f) {
             variant = Variant.SEEWORLD;
+        } else if (header == 0x7878 && type == MSG_GPS_LBS_STATUS_1 && length == 0x26) {
+            variant = Variant.SEEWORLD;
         } else {
             variant = Variant.STANDARD;
         }

File: src/test/java/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -18,8 +18,8 @@ public void testDecode() throws Exception {
                 "78780D01086471700328358100093F040D0A"));
 
         verifyAttribute(decoder, binary(
-                "78782f22170a020b2737cf02c568a8089fc0dc125c4d01369a371b0a6967020000000007327a00000000001500260074544c0d0a"),
-                "humidity", 53.76);
+                "78782f221709130f3a32cc02c55f2a089f9afc005c2101360481fe066d9b03000000000025d4000000000020002d036049d70d0a"),
+                Position.PREFIX_TEMP + 1, 0.32);
 
         verifyAttribute(decoder, binary(
                 "78785995ffff01170719152013df0163d45f041ee52018be002f00876900004556454e545f3836323739383035303137353131325f30303030303030305f323032335f30375f32355f31385f33325f30355f31342e6d70340119d15a0d0a"),

File: src/main/java/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -51,6 +51,7 @@ public RuptelaProtocolDecoder(Protocol protocol) {
     public static final int MSG_SMS_VIA_GPRS = 8;
     public static final int MSG_DTCS = 9;
     public static final int MSG_IDENTIFICATION = 15;
+    public static final int MSG_HEARTBEAT = 16;
     public static final int MSG_SET_IO = 17;
     public static final int MSG_FILES = 37;
     public static final int MSG_EXTENDED_RECORDS = 68;
@@ -388,7 +389,7 @@ protected Object decode(
 
             return null;
 
-        } else if (type == MSG_IDENTIFICATION) {
+        } else if (type == MSG_IDENTIFICATION || type == MSG_HEARTBEAT) {
 
             ByteBuf content = Unpooled.buffer();
             content.writeByte(1);

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -315,13 +315,13 @@ protected Object decode(
                                         if (BitUtil.check(value, 15)) {
                                             position.set("obdFuelLevel", BitUtil.to(value, 14));
                                         } else {
-                                            position.set("obdFuel", BitUtil.to(value, 14) / 10.0);
+                                            position.set("obdFuel", BitUtil.to(value, 14) * 0.1);
                                         }
                                     }
                                     break;
                                 case 54:
                                     double dValue = buf.readFloatLE() * 0.5;
-                                    position.set(Position.KEY_FUEL_USED, (dValue >= 0) ? dValue : null);
+                                    position.set("fuelUsed", (dValue >= 0) ? dValue : null);
                                     break;
                                 case 55:
                                     value = buf.readUnsignedShortLE();
@@ -360,7 +360,7 @@ protected Object decode(
                                         if (BitUtil.check(value, 15)) {
                                             position.set("obdAdBlueLevel", BitUtil.to(value, 14));
                                         } else {
-                                            position.set("obdAdBlue", BitUtil.to(value, 14) / 10.0);
+                                            position.set("obdAdBlue", BitUtil.to(value, 14) * 0.1);
                                         }
                                     }
                                     break;

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -316,13 +316,13 @@ protected Object decode(
                                         if (BitUtil.check(value, 15)) {
                                             position.set("obdFuelLevel", BitUtil.to(value, 14));
                                         } else {
-                                            position.set("obdFuel", BitUtil.to(value, 14) / 10);
+                                            position.set("obdFuel", BitUtil.to(value, 14) / 10.0);
                                         }
                                     }
                                     break;
                                 case 54:
                                     double dValue = buf.readFloatLE() * 0.5;
-                                    position.set(Position.KEY_FUEL_USED, (dValue >= 0) ? (dValue * 0.5) : null);
+                                    position.set(Position.KEY_FUEL_USED, (dValue >= 0) ? dValue : null);
                                     break;
                                 case 55:
                                     value = buf.readUnsignedShortLE();
@@ -361,7 +361,7 @@ protected Object decode(
                                         if (BitUtil.check(value, 15)) {
                                             position.set("obdAdBlueLevel", BitUtil.to(value, 14));
                                         } else {
-                                            position.set("obdAdBlue", BitUtil.to(value, 14) / 10);
+                                            position.set("obdAdBlue", BitUtil.to(value, 14) / 10.0);
                                         }
                                     }
                                     break;

File: src/main/java/org/traccar/protocol/T800xProtocolDecoder.java
Patch:
@@ -391,7 +391,7 @@ private Position decodePosition(
                 for (int i = 1; i <= adcCount; i++) {
                     String value = ByteBufUtil.hexDump(buf.readSlice(2));
                     if (!value.equals("ffff")) {
-                        position.set(Position.PREFIX_ADC + i, Integer.parseInt(value) * 0.01);
+                        position.set(Position.PREFIX_ADC + i, Integer.parseInt(value, 16) * 0.01);
                     }
                 }
             }

File: src/test/java/org/traccar/protocol/T800xProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new T800xProtocolDecoder(null));
 
+        verifyAttributes(decoder, binary(
+                "25251300594a1b0869738060144917003c0e101e03e85a2dc8c00005070000410000000000000000000000005b000003a5b45e00230919102252e3a5094288fabfc0e98b15420000010403921352ffff0000001cffffffffff25251300594a1c0869738060144917003c0e101e03e85a2ac7c00005070000410000000000000000000000002d000003a5b48b002309191023522d320642abfebfc0e98b15420000010c03921345ffff0000001bffffffffff25251300594a1d0869738060144917003c0e101e03e85a1ac9c000050700004100000000000000000000000024000003a5b4af00230919102452b81ef9410002c0c0ec8b15420108011403911345ffff0000001dffffffffff25251300594a1e0869738060144917003c0e101e03e85a3ec7c00005070000410000000000000000000000000e000003a5b4bd002309191025060ad7ec41da02c0c0058c15420084016303921345ffff0000001cffffffffff25251300594a1f0869738060144917003c0e101e03e85a3ec7c020050700004100000000000000000000000005000003a5b4c2002309191025090e2deb410203c0c0108c15420089014303921338ffff0000001dffffffffff25251300594a200869738060144917003c0e101e03e85a1ec5c000050700004100000000000000000000000020000003a5b4e20023091910260948e1bc412205c0c0458c15420040013603921355ffff0000001bffffffffff25251300594a210869738060144917003c0e101e03e85a00c5c020050700004100000000000000000000000000000003a5b4e20023091910270948e1bc412205c0c0458c15420040013603911332ffff0000001dffffffffff"));
+
         verifyAttributes(decoder, binary(
                 "272704004901380864112055585747c612230321220006000036435fc8acc2ee600f420000000000000000909019003900001356a18000012c0000a8c00000001e20d4800000c00000"));
 

File: src/main/java/org/traccar/api/resource/UserResource.java
Patch:
@@ -122,7 +122,9 @@ public Response add(User entity) throws StorageException {
     @DELETE
     public Response remove(@PathParam("id") long id) throws StorageException {
         Response response = super.remove(id);
-        request.getSession().removeAttribute(SessionResource.USER_ID_KEY);
+        if (getUserId() == id) {
+            request.getSession().removeAttribute(SessionResource.USER_ID_KEY);
+        }
         return response;
     }
 

File: src/main/java/org/traccar/protocol/PuiProtocolDecoder.java
Patch:
@@ -51,7 +51,7 @@ protected Object decode(DeviceSession deviceSession, MqttPublishMessage message)
 
                 position.setValid(true);
 
-                DateFormat dateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss.SSS'Z'");
+                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
                 position.setTime(dateFormat.parse(json.getString("ts")));
 
                 JsonObject location = json.getJsonObject("location");

File: src/test/java/org/traccar/protocol/PuiProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
                 "123456789012345").build());
 
         verifyPosition(decoder, MqttMessageBuilders.publish().payload(buffer(
-                "{ \"id\": \"015262001044848\", \"ts\": \"20190109T021918.312Z\", \"rpt\": \"hf\", \"location\": { \"lat\": 33.91233, \"lon\": -84.20784 }, \"bear\": 70, \"spd\": 2482, \"ign\": \"on\" }")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
+                "{ \"id\": \"015262001044848\", \"ts\": \"2023-06-01T03:09:51.362Z\", \"rpt\": \"hf\", \"location\": { \"lat\": 33.91233, \"lon\": -84.20784 }, \"bear\": 70, \"spd\": 2482, \"ign\": \"on\" }")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
 
     }
 

File: src/main/java/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -550,9 +550,9 @@ private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddres
                     case 0x23:
                     case 0x24:
                     case 0x25:
-                        String wifiMAC = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
-                        int wifiRSSI = buf.readShortLE();
-                        network.addWifiAccessPoint(WifiAccessPoint.from(wifiMAC, wifiRSSI));
+                        String wifiMac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
+                        network.addWifiAccessPoint(WifiAccessPoint.from(wifiMac.substring(0, wifiMac.length() - 1),
+                            buf.readShortLE()));
                         break;
                     case 0x0E:
                     case 0x0F:

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -303,7 +303,7 @@ public static SpeedLimitProvider provideSpeedLimitProvider(Config config, Client
             switch (type) {
                 case "overpass":
                 default:
-                    return new OverpassSpeedLimitProvider(client, url);
+                    return new OverpassSpeedLimitProvider(config, client, url);
             }
         }
         return null;

File: src/test/java/org/traccar/speedlimit/OverpassSpeedLimitProviderTest.java
Patch:
@@ -5,6 +5,7 @@
 
 import jakarta.ws.rs.client.Client;
 import jakarta.ws.rs.client.ClientBuilder;
+import org.traccar.config.Config;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.fail;
@@ -16,7 +17,8 @@ public class OverpassSpeedLimitProviderTest {
     @Disabled
     @Test
     public void testOverpass() throws Exception {
-        SpeedLimitProvider provider = new OverpassSpeedLimitProvider(client, "http://8.8.8.8/api/interpreter");
+        var config = new Config();
+        SpeedLimitProvider provider = new OverpassSpeedLimitProvider(config, client, "http://8.8.8.8/api/interpreter");
 
         provider.getSpeedLimit(34.74767, -82.48098, new SpeedLimitProvider.SpeedLimitProviderCallback() {
             @Override

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -291,7 +291,8 @@ protected Object decode(
                                 case 42:
                                 case 43:
                                     value = buf.readUnsignedShortLE();
-                                    position.set(Position.KEY_FUEL_LEVEL + (j + 2 - 38), (value < 65500) ? value : null);
+                                    position.set(
+                                            Position.KEY_FUEL_LEVEL + (j + 2 - 38), (value < 65500) ? value : null);
                                     break;
                                 case 44:
                                     value = buf.readUnsignedShortLE();

File: src/test/java/org/traccar/protocol/Minifinder2ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Minifinder2ProtocolDecoder(null));
 
+        verifyPositions(decoder, false, binary(
+                "ab105a0512e19404011001383632333131303632373037333735093743c3ec640000000009374dc3ec6400000000093750c3ec6400000080092455c3ec640203935e0f22a318d6c7baacd6a2546751467bd009246ac3ec640203b35e0f22a318d6c7baacd6a2546751467bd009246cc3ec640203b35e0f22a318d6c7baacd6a2546751467bd009247ec3ec640203b35e0f22a318d6c7baacd6a2546751467bd0092492c3ec640203b35e0f22a318d6c7baacd6a2546751467bd00924a6c3ec640203b35e0f22a318d6c7baacd6a2546751467bd00924bac3ec640203b35e0f22a318d6c7baacd6a2546751467bd00924d2c3ec640203b35e0f22a7083a2f201a83a3f8084f84ae560924e7c3ec640203b35e0f22a7083a2f201a83a3f8084f84ae560924fbc3ec640203b35e0f22a7083a2f201a83a3f8084f84ae5609240fc4ec640203b35e0f22a7083a2f201a83a3f8084f84ae56092423c4ec640203b35d0f22a7083a2f201a83a3f8084f84ae56092437c4ec640203cb5d0f22a7083a2f201a83a3f8084f84ae5609244fc4ec640003cb5d092464c4ec640003cb5d092478c4ec640003cb5d09248cc4ec640003cb5d0924a0c4ec640003cb5d0924b4c4ec640003cb5d0924ccc4ec640003cb5d0924e5c4ec640003cb5d0924fec4ec6400037b5d092413c5ec6400037b5d092427c5ec6400017b5d0924b785ed640003cb530924d085ed640003ab530924e985ed640003ab530924fe85ed640003ab5309241286ed640003ab5309242686ed640003ab5309243a86ed640003ab5309244e86ed640003ab5309246786ed640003ab5309248086ed640003ab5309249986ed6400037b530924b286ed6400037b530924c686ed6400037b530924da86ed6400037b530924ee86ed6400037b5309240287ed6400037b5309241687ed6400037b5309242f87ed6400037b5309244787ed640003835309246187ed640003835309247a87ed640003835309249287ed64000383530924ab87ed64000383530924c487ed64000383530924d987ed64000383530924ed87ed640003835309240188ed640003835309241588ed640003835309242988ed640003d35309243a88ed640003d3530d02000000803788ed640000000009374188ed640400000009244188ed640003d35309244288ed640003d35309374b88ed640500000009244b88ed640003d35309375588ed640500000009245588ed640003d35309245788ed640003d35309375f88ed640700000009245f88ed640003d35309376988ed640800000009246988ed640003d35309246b88ed640203d3530f22a502184a2cfba0a42c768af4ab5009247188ed640203d3530f22a502184a2cfba0a42c768af4ab5009377388ed640a00000009247688ed640203d3530f22a502184a2cfba0a42c768af4ab5009247b88ed640203d3530f22a502184a2cfba0a42c768af4ab5009377d88ed640300000009247e88ed640203d3530f22a502184a2cfba0a42c768af4ab5009248088ed640203d3530f22a502184a2cfba0a42c768af4ab5009248588ed640203d3530f22a502184a2cfba0a42c768af4ab5009378788ed640000000009248a88ed640203d3530f22a502184a2cfba0a42c768af4ab5009248f88ed640203d3530f22a502184a2cfba0a42c768af4ab5009379188ed640000000009379288ed640000008009249288ed640203d3530f22a502184a2cfba0a42c768af4ab5009249488ed640203d3530f22a502184a2cfba0a42c768af4ab5009249988ed640203d3530f22a502184a2cfba0a42c768af4ab5009249e88ed640203d3530f22a502184a2cfba0a42c768af4ab500924a388ed640203d3530f22a502184a2cfba0a42c768af4ab500924a688ed640203d3530f22a502184a2cfba0a42c768af4ab50"));
+
         verifyAttribute(decoder, binary(
                 "ab101c00d6f61e000110013836333932313033393939363038300937efd201640c000000"),
                 "barkCount", 12L);

File: src/main/java/org/traccar/protocol/GatorProtocolEncoder.java
Patch:
@@ -91,7 +91,7 @@ protected Object encodeCommand(Command command) {
                 String[] data = command.getString(Command.KEY_FREQUENCY).split(";");
                 content.writeShort(Integer.valueOf(data[0]));
                 content.writeShort(Integer.valueOf(data[1]));
-                content.writeShort(Integer.valueOf(data[2]));
+                content.writeByte(Integer.valueOf(data[2]));
                 return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);
             default:
                 return null;

File: src/test/java/org/traccar/protocol/GatorProtocolEncoderTest.java
Patch:
@@ -29,9 +29,7 @@ public void testEncodePeriodicPositionRetrievalIntervalSet() throws Exception {
 
         Command command = new Command();
         command.setDeviceId(1);
-        command.set("heartbeat_interval", 120);
-        command.set("engine_off_interval", 5);
-        command.set("engine_on_interval", 5);
+        command.set(command.KEY_FREQUENCY, "5;5;120");
         command.setType(Command.TYPE_POSITION_PERIODIC);
         verifyCommand(encoder, command, binary("242434000b5800383a00050005781d0d"));
     }

File: src/main/java/org/traccar/protocol/StarcomProtocolDecoder.java
Patch:
@@ -76,6 +76,7 @@ protected Object decode(
                     position.set(Position.KEY_EVENT, Integer.parseInt(value));
                     break;
                 case "mileage":
+                case "odometer":
                     position.set(Position.KEY_ODOMETER, (long) (Double.parseDouble(value) * 1000));
                     break;
                 case "satellites":

File: src/main/java/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public GatorProtocolDecoder(Protocol protocol) {
 
     public static final int MSG_HEARTBEAT = 0x21;
     public static final int MSG_POSITION_REQUEST = 0x30;
-    public static final int MSG_SET_POSITION_REQUEST_INTERVAL = 0x34;
+    public static final int MSG_POSITION_PERIODIC = 0x34;
     public static final int MSG_SET_SPEED_LIMIT = 0x3F;
     public static final int MSG_SET_ODOMETER = 0x6B;
     public static final int MSG_RESTORES_THE_OIL_DUCT = 0x38;

File: src/main/java/org/traccar/protocol/GatorProtocolEncoder.java
Patch:
@@ -91,7 +91,7 @@ protected Object encodeCommand(Command command) {
                 content.writeShort(command.getInteger(Command.KEY_ENGINE_ON_INTERVAL));
                 content.writeShort(command.getInteger(Command.KEY_ENGINE_OFF_INTERVAL));
                 content.writeByte(command.getInteger(Command.KEY_HEARTBEAT_INTERVAL));
-                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_SET_POSITION_REQUEST_INTERVAL, content);
+                return encodeContent(command.getDeviceId(), GatorProtocolDecoder.MSG_POSITION_PERIODIC, content);
             default:
                 return null;
         }

File: src/main/java/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public GatorProtocolDecoder(Protocol protocol) {
 
     public static final int MSG_HEARTBEAT = 0x21;
     public static final int MSG_POSITION_REQUEST = 0x30;
-    public static final int MSG_POSITION_PERIODIC = 0x30;
+    public static final int MSG_POSITION_PERIODIC = 0x34;
     public static final int MSG_RESTORES_THE_OIL_DUCT = 0x38;
     public static final int MSG_CLOSE_THE_OIL_DUCT = 0x39;
     public static final int MSG_POSITION_DATA = 0x80;

File: src/main/java/org/traccar/forward/AmqpClient.java
Patch:
@@ -43,7 +43,8 @@ public class AmqpClient {
             throw new RuntimeException("Error while setting URI for RabbitMQ connection factory", e);
         }
 
-        try (Connection connection = factory.newConnection()) {
+        try {
+            Connection connection = factory.newConnection();
             channel = connection.createChannel();
             channel.exchangeDeclare(exchange, BuiltinExchangeType.TOPIC, true);
         } catch (IOException | TimeoutException e) {

File: src/main/java/org/traccar/forward/AmqpClient.java
Patch:
@@ -43,7 +43,8 @@ public class AmqpClient {
             throw new RuntimeException("Error while setting URI for RabbitMQ connection factory", e);
         }
 
-        try (Connection connection = factory.newConnection()) {
+        try {
+            Connection connection = factory.newConnection();
             channel = connection.createChannel();
             channel.exchangeDeclare(exchange, BuiltinExchangeType.TOPIC, true);
         } catch (IOException | TimeoutException e) {

File: src/test/java/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -34,7 +34,7 @@ public void testDecode() throws Exception {
 
         verifyAttribute(decoder, binary(
                 "78780a130604ea04000006bc8a0d0a"),
-                Position.KEY_POWER, 0.0);
+                Position.KEY_POWER, null);
 
         verifyAttributes(decoder, binary(
                 "797900849404414c4d313d43353b414c4d323d43433b414c4d333d35433b535441313d43303b4459443d30313b534f533d303133323838333730302c2c3b43454e5445523d303133323838333730303b46454e43453d46656e63652c4f46462c302c302e3030303030302c302e3030303030302c3330302c494e206f72204f55542c313b00b79d120d0a"));

File: src/test/java/org/traccar/protocol/RuptelaProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "002e000316d53d58d6020f4573303430302e30332e36382e30340000c2b3090d0e950000827b000003e80000003c003c1681"));
 
+        verifyPositions(decoder, false, binary(
+                "03fb0003137ca79f856d01011d386d438b000080000000800000008000ffffffffffff070220211bff011d30c50000386d438b000080000000800000008000ffffffffffff0702201f1bff011d30c30000386d43a9000180000000800000008000ffffffffffffad0320211b16ad01011d30950000386d43c7000080000000800000008000ffffffffffff070220211b00011d30a60000386d4403000080000000800000008000ffffffffffff070220221b00011d30ae0000386d443f000080000000800000008000ffffffffffff070220231b00011d30ae000064c692cb000080000000800000008000ffffffffffff070220231b18011d3091000064c69306000080000000800000008000ffffffffffff070220231b14011d30a7000064c69322000180000000800000008000ffffffffffffad0320241b14ad00011d30a3000064c69342000080000000800000008000ffffffffffff070220241b13011d30ad000064c6934a000180000000800000008000ffffffffffffad0320241b10ad01011d30c3000064c6937e000080000000800000008000ffffffffffff070220241b12011d3092000064c6938b000180000000800000008000ffffffffffffad0320241b12ad00011d30bd000064c69395000180000000800000008000ffffffffffffad0320241b10ad01011d30a6000064c693ba000080000000800000008000ffffffffffff070220251b17011d30a2000064c693d4000180000000800000008000ffffffffffffad0320251b17ad00011d30cc000064c693f6000080000000800000008000ffffffffffff070220251b15011d3090000064c69404000180000000800000008000ffffffffffffad0320251b16ad01011d30a9000064c69432000080000000800000008000ffffffffffff070220261b14011d30be000064c6946d000180000000800000008000ffffffffffffad0320261b15ad00011d30b1000064c6946e000080000000800000008000ffffffffffff070220261b15011d3096000064c694aa000080000000800000008000ffffffffffff070220261b15011d30a8000064c694b2000180000000800000008000ffffffffffffad0320261b15ad01011d30a5000064c694e6000080000000800000008000ffffffffffff070220261b17011d309a000064c694f5000180000000800000008000ffffffffffffad0320261b17ad00011d309c000064c694f6000180000000800000008000ffffffffffffad0320261b17ad01011d3099000064c69522000080000000800000008000ffffffffffff070220261b14011d3094000064c6955e000080000000800000008000ffffffffffff070220261b15011d30b2000064c6959a000080000000800000008000ffffffffffff070220261b14011d30970000ad9e"));
+
         verifyPositions(decoder, binary(
                 "00800003167d765c155d01000160cd0a310000faae43f7176ee45702332b0c12000006070d05007300cfff260082008600870088000f00d7021100d801c900061d0000c500001e0e988300008900008b000002d0000c9bca720c889a0b047e00000000000000007f0000000000000000800000000000000000810000000000000000a341"));
 

File: src/main/java/org/traccar/model/Command.java
Patch:
@@ -45,7 +45,6 @@ public class Command extends BaseCommand {
     public static final String TYPE_SILENCE_TIME = "silenceTime";
     public static final String TYPE_SET_PHONEBOOK = "setPhonebook";
     public static final String TYPE_MESSAGE = "message";
-    public static final String TYPE_ROLLCALL = "rollcall";
     public static final String TYPE_VOICE_MESSAGE = "voiceMessage";
     public static final String TYPE_OUTPUT_CONTROL = "outputControl";
     public static final String TYPE_VOICE_MONITORING = "voiceMonitoring";

File: src/main/java/org/traccar/protocol/GatorProtocol.java
Patch:
@@ -29,7 +29,7 @@ public class GatorProtocol extends BaseProtocol {
     @Inject
     public GatorProtocol(Config config) {
         setSupportedDataCommands(
-                Command.TYPE_ROLLCALL
+                Command.TYPE_POSITION_SINGLE
         );
         addServer(new TrackerServer(config, getName(), false) {
             @Override

File: src/main/java/org/traccar/protocol/GatorProtocolEncoder.java
Patch:
@@ -90,11 +90,11 @@ private ByteBuf encodeContent(long deviceId, String mainOrder, String content) {
     protected Object encodeCommand(Command command) {
 
         switch (command.getType()) {
-            case Command.TYPE_ROLLCALL:
+            // According to Protocol Documentation, 0x30 is for rollcall command
+            case Command.TYPE_POSITION_SINGLE:
                 return encodeContent(command.getDeviceId(), "30", null);
             default:
                 return null;
         }
     }
-
 }

File: src/test/java/org/traccar/protocol/GatorProtocolEncoderTest.java
Patch:
@@ -19,7 +19,7 @@ public void testEncode() throws Exception {
         var encoder = inject(new GatorProtocolEncoder(null));
         Command command = new Command();
         command.setDeviceId(13332082112L);
-        command.setType(Command.TYPE_ROLLCALL);
+        command.setType(Command.TYPE_POSITION_SINGLE);
         verifyCommand(encoder, command, binary("24243000062008958C070D"));
     }
 }

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -345,7 +345,7 @@ private boolean decodeLbs(Position position, ByteBuf buf, int type, boolean hasL
             mnc = buf.readUnsignedByte();
         }
         int lac;
-        if (type == MSG_LBS_ALARM) {
+        if (type == MSG_LBS_ALARM || type == MSG_GPS_LBS_7) {
             lac = buf.readInt();
         } else {
             lac = buf.readUnsignedShort();

File: src/main/java/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -242,6 +242,8 @@ private Object decodeLocationNew(
 
         } else {
 
+            getLastLocation(position, position.getDeviceTime());
+
             String[] points = parser.next().split("\\|");
             for (String point : points) {
                 String[] wifi = point.split(":");

File: src/test/java/org/traccar/protocol/FifotrackProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new FifotrackProtocolDecoder(null));
 
+        verifyAttributes(decoder, buffer(
+                "$$159,866344056951341,399D,A03,,230716222659,240|8|2724|20EEF33,4.20,100,003E,1,AE233FC0D2E0:-65|3E286D5FB6E8:-65|28BD890A4A0E:-67|8ED81B5DFC3A:-70|8AD81B5DFC3A:-70*5F"));
+
         verifyAttribute(decoder, buffer(
                 "$$99,865413050150407,7F,A03,,230626072722,460|0|25FC|AC2AB0B,3.74,52,0019,0,A,0,13,22.643466,114.018211*74"),
                 Position.KEY_SATELLITES, 13);

File: src/main/java/org/traccar/protocol/T622IridiumProtocolDecoder.java
Patch:
@@ -94,7 +94,7 @@ protected Object decode(
                     position.setLongitude(buf.readIntLE() / 1000000.0);
                     break;
                 case 0x04:
-                    position.setTime(new Date((buf.readUnsignedIntLE() + 946713600) * 1000));
+                    position.setTime(new Date((buf.readUnsignedIntLE() + 946684800) * 1000));
                     break;
                 case 0x05:
                     position.setValid(buf.readUnsignedByte() > 0);

File: src/test/java/org/traccar/protocol/T622IridiumProtocolDecoderTest.java
Patch:
@@ -1,12 +1,10 @@
 package org.traccar.protocol;
 
-import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.api.Test;
 import org.traccar.ProtocolTest;
 
 public class T622IridiumProtocolDecoderTest extends ProtocolTest {
 
-    @Disabled
     @Test
     public void testDecode() throws Exception {
 
@@ -15,7 +13,8 @@ public void testDecode() throws Exception {
         decoder.setFormat("01,02,03,04,05,08");
 
         verifyPosition(decoder, binary(
-                "01003301001c2a8cef8333303034333430363735343836353000001700006461d512020011232f03a0fff1c85d0612b3f02b00000048"));
+                "01003501001c68b2cb1733303034333430363735343836353000016e000064b5f497020013234c5ea0ff1c365d0600b1482c010000cf0004"),
+                position("2023-07-18 02:10:08.000", true, -6.26732, 106.77200));
 
     }
 

File: src/main/java/org/traccar/web/WebServer.java
Patch:
@@ -193,14 +193,16 @@ private void initSessionConfig(ServletContextHandler servletHandler) {
             sessionHandler.setSessionCache(sessionCache);
         }
 
+        SessionCookieConfig sessionCookieConfig = servletHandler.getServletContext().getSessionCookieConfig();
+
         int sessionTimeout = config.getInteger(Keys.WEB_SESSION_TIMEOUT);
         if (sessionTimeout > 0) {
             servletHandler.getSessionHandler().setMaxInactiveInterval(sessionTimeout);
+            sessionCookieConfig.setMaxAge(sessionTimeout);
         }
 
         String sameSiteCookie = config.getString(Keys.WEB_SAME_SITE_COOKIE);
         if (sameSiteCookie != null) {
-            SessionCookieConfig sessionCookieConfig = servletHandler.getServletContext().getSessionCookieConfig();
             switch (sameSiteCookie.toLowerCase()) {
                 case "lax":
                     sessionCookieConfig.setComment(HttpCookie.SAME_SITE_LAX_COMMENT);

File: src/test/java/org/traccar/protocol/TopinProtocolDecoderTest.java
Patch:
@@ -17,6 +17,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "78780d0103593390754169634d0d0a"));
 
+        verifyNotNull(decoder, binary(
+                "787803181604130318491475905bd30e25001e10bbf7635d14759006e626560401cc00000028660090df425f000028660090df576c00002866009487566700002866009ca15667000d0a"));
+
         verifyAttribute(decoder, binary(
                 "7878006921120412565802010601071e4a9764071e4a9864010d0a"),
                 Position.KEY_ALARM, Position.ALARM_VIBRATION);

File: src/main/java/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -28,6 +28,7 @@
 import org.traccar.model.CellTower;
 import org.traccar.model.Network;
 import org.traccar.model.Position;
+import org.traccar.model.Device;
 import org.traccar.helper.BitUtil;
 
 import java.net.SocketAddress;

File: src/main/java/org/traccar/notification/NotificatorManager.java
Patch:
@@ -66,7 +66,7 @@ public NotificatorManager(Injector injector, Config config) {
 
     public Notificator getNotificator(String type) {
         var clazz = NOTIFICATORS_ALL.get(type);
-        if (clazz != null) {
+        if (clazz != null && types.contains(type)) {
             var notificator = injector.getInstance(clazz);
             if (notificator != null) {
                 return notificator;

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -238,7 +238,7 @@ private Keys() {
      */
     public static final ConfigSuffix<String> PROTOCOL_FORMAT = new StringConfigSuffix(
             ".format",
-            List.of(KeyType.DEVICE));
+            List.of(KeyType.CONFIG, KeyType.DEVICE));
 
     /**
      * Protocol date format. Used by protocols that have configurable date format.

File: src/main/java/org/traccar/protocol/StarLinkProtocolDecoder.java
Patch:
@@ -61,10 +61,10 @@ public StarLinkProtocolDecoder(Protocol protocol) {
     @Override
     protected void init() {
         setFormat(getConfig().getString(
-                getProtocolName() + ".format", "#EDT#,#EID#,#PDT#,#LAT#,#LONG#,#SPD#,#HEAD#,#ODO#,"
+                Keys.PROTOCOL_FORMAT.withPrefix(getProtocolName()), "#EDT#,#EID#,#PDT#,#LAT#,#LONG#,#SPD#,#HEAD#,#ODO#,"
                 + "#IN1#,#IN2#,#IN3#,#IN4#,#OUT1#,#OUT2#,#OUT3#,#OUT4#,#LAC#,#CID#,#VIN#,#VBAT#,#DEST#,#IGN#,#ENG#"));
 
-        setDateFormat(getConfig().getString(getProtocolName() + ".dateFormat", "yyMMddHHmmss"));
+        setDateFormat(getConfig().getString(Keys.PROTOCOL_DATE_FORMAT.withPrefix(getProtocolName()), "yyMMddHHmmss"));
     }
 
     public String[] getFormat(long deviceId) {

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -252,7 +252,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(83, fmbXXX, (p, b) -> p.set(Position.KEY_FUEL_USED, b.readUnsignedInt() * 0.1));
         register(84, fmbXXX, (p, b) -> p.set(Position.KEY_FUEL_LEVEL, b.readUnsignedShort() * 0.1));
         register(85, fmbXXX, (p, b) -> p.set(Position.KEY_RPM, b.readUnsignedShort()));
-        register(87, fmbXXX, (p, b) -> p.set(Position.KEY_OBD_ODOMETER, b.readUnsignedInt() * 0.001));
+        register(87, fmbXXX, (p, b) -> p.set(Position.KEY_OBD_ODOMETER, b.readUnsignedInt()));
         register(89, fmbXXX, (p, b) -> p.set("fuelLevelPercentage", b.readUnsignedByte()));
         register(90, null, (p, b) -> p.set(Position.KEY_DOOR, b.readUnsignedShort()));
         register(110, fmbXXX, (p, b) -> p.set(Position.KEY_FUEL_CONSUMPTION, b.readUnsignedShort() * 0.1));

File: src/test/java/org/traccar/handler/FilterHandlerTest.java
Patch:
@@ -29,6 +29,7 @@ public void passingHandler() {
         when(config.getBoolean(Keys.FILTER_ENABLE)).thenReturn(true);
         var cacheManager = mock(CacheManager.class);
         when(cacheManager.getConfig()).thenReturn(config);
+        when(cacheManager.getObject(any(), anyLong())).thenReturn(mock(Device.class));
         passingHandler = new FilterHandler(config, cacheManager, null, null);
     }
 

File: src/main/java/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -156,7 +156,7 @@ protected Object decode(
                         for (int j = 0; j < wifiCount; j++) {
                             String mac = ByteBufUtil.hexDump(buf.readSlice(6)).replaceAll("(..)", "$1:");
                             network.addWifiAccessPoint(WifiAccessPoint.from(
-                                    mac.substring(0, mac.length() - 1), buf.readUnsignedByte()));
+                                    mac.substring(0, mac.length() - 1), buf.readByte()));
                         }
                     }
                     if (BitUtil.check(positionMask, 2)) {

File: src/main/java/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -235,8 +235,8 @@ private Object decodeLocationNew(
 
             position.setValid(parser.next().equals("A"));
             position.setFixTime(position.getDeviceTime());
-            position.set(Position.KEY_SATELLITES, parser.nextInt());
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
+            position.set(Position.KEY_SATELLITES, parser.nextInt());
             position.setLatitude(parser.nextDouble());
             position.setLongitude(parser.nextDouble());
 

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolDecoder.java
Patch:
@@ -151,7 +151,7 @@ protected Object decode(
             sendResponse(channel, remoteAddress, index, type, buf);
         }
 
-        if (type == MSG_DATA) {
+        if (type == MSG_DATA || type == MSG_SERVICES) {
 
             List<Position> positions = new LinkedList<>();
             Set<Integer> keys = new HashSet<>();

File: src/test/java/org/traccar/protocol/Minifinder2ProtocolDecoderTest.java
Patch:
@@ -24,10 +24,10 @@ public void testDecode() throws Exception {
         verifyPositions(decoder, binary(
                 "ab10350015ae59010110013836333932313033333836353231360924723a12610042535a182ac0f6b4f2923100c900af02215c2b9bfb5461736b4c4d53"));
 
-        verifyNull(decoder, binary(
+        verifyPositions(decoder, false, binary(
                 "ab10150076f1320003100133353534363530373130323933303602105a"));
 
-        verifyNull(decoder, binary(
+        verifyPositions(decoder, false, binary(
                 "AB101400594A01000310013836333932323033343437333734350112"));
 
         verifyPositions(decoder, binary(

File: src/main/java/org/traccar/broadcast/RedisBroadcastService.java
Patch:
@@ -111,7 +111,7 @@ public void run() {
                     public void onMessage(String messageChannel, String message) {
                         try {
                             String[] parts = message.split(":", 2);
-                            if (messageChannel == channel && parts.length == 2 && !id.equals(parts[0])) {
+                            if (messageChannel.equals(channel) && parts.length == 2 && !id.equals(parts[0])) {
                                 handleMessage(objectMapper.readValue(parts[1], BroadcastMessage.class));
                             }
                         } catch (IOException e) {

File: src/main/java/org/traccar/broadcast/RedisBroadcastService.java
Patch:
@@ -111,7 +111,7 @@ public void run() {
                     public void onMessage(String messageChannel, String message) {
                         try {
                             String[] parts = message.split(":", 2);
-                            if (messageChannel == channel && parts.length == 2 && !id.equals(parts[0])) {
+                            if (messageChannel.equals(channel) && parts.length == 2 && !id.equals(parts[0])) {
                                 handleMessage(objectMapper.readValue(parts[1], BroadcastMessage.class));
                             }
                         } catch (IOException e) {

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -1761,8 +1761,7 @@ private Keys() {
      */
     public static final ConfigKey<String> BROADCAST_TYPE = new StringConfigKey(
             "broadcast.type",
-            List.of(KeyType.CONFIG),
-            "");
+            List.of(KeyType.CONFIG));
 
     /**
      * Multicast interface. It can be either an IP address or an interface name.

File: src/main/java/org/traccar/broadcast/BaseBroadcastService.java
Patch:
@@ -115,4 +115,4 @@ protected void handleMessage(BroadcastMessage message) {
         }
     }
 
-}
\ No newline at end of file
+}

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -1756,12 +1756,13 @@ private Keys() {
             "time,position,speed,course,accuracy,result");
 
     /**
-     * Broadcast method. Available options are "multicast" and "redis". Default is "multicast".
+     * Broadcast method. Available options are "multicast" and "redis". By default (if the value is not
+     * specified or does not matches available options) server disables broadcast.
      */
     public static final ConfigKey<String> BROADCAST_TYPE = new StringConfigKey(
             "broadcast.type",
             List.of(KeyType.CONFIG),
-            "multicast");
+            "");
 
     /**
      * Multicast interface. It can be either an IP address or an interface name.

File: src/main/java/org/traccar/model/ExtendedModel.java
Patch:
@@ -91,7 +91,8 @@ public void add(Map.Entry<String, Object> entry) {
 
     public String getString(String key, String defaultValue) {
         if (attributes.containsKey(key)) {
-            return attributes.get(key).toString();
+            Object value = attributes.get(key);
+            return value != null ? value.toString() : null;
         } else {
             return defaultValue;
         }

File: src/main/java/org/traccar/model/ExtendedModel.java
Patch:
@@ -91,7 +91,7 @@ public void add(Map.Entry<String, Object> entry) {
 
     public String getString(String key, String defaultValue) {
         if (attributes.containsKey(key)) {
-            Object value = attributes.containsKey(key);
+            Object value = attributes.get(key);
             return value != null ? value.toString() : null;
         } else {
             return defaultValue;

File: src/main/java/org/traccar/model/ExtendedModel.java
Patch:
@@ -90,8 +90,9 @@ public void add(Map.Entry<String, Object> entry) {
     }
 
     public String getString(String key, String defaultValue) {
-        if (attributes.containsKey(key) && attributes.get(key) != null) {
-            return attributes.get(key).toString();
+        if (attributes.containsKey(key)) {
+            Object value = attributes.containsKey(key);
+            return value != null ? value.toString() : null;
         } else {
             return defaultValue;
         }

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -761,12 +761,12 @@ private Keys() {
             List.of(KeyType.CONFIG));
 
     /**
-     * WebSocket connection timeout in milliseconds. Default timeout is 10 minutes.
+     * WebSocket connection timeout in milliseconds. Default timeout is 5 minutes.
      */
     public static final ConfigKey<Long> WEB_TIMEOUT = new LongConfigKey(
             "web.timeout",
             List.of(KeyType.CONFIG),
-            60000L);
+            300000L);
 
     /**
      * Authentication sessions timeout in seconds. By default no timeout.

File: src/main/java/org/traccar/model/ExtendedModel.java
Patch:
@@ -90,7 +90,7 @@ public void add(Map.Entry<String, Object> entry) {
     }
 
     public String getString(String key, String defaultValue) {
-        if (attributes.containsKey(key)) {
+        if (attributes.containsKey(key) && attributes.get(key) != null) {
             return attributes.get(key).toString();
         } else {
             return defaultValue;

File: src/main/java/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -110,8 +110,9 @@ private String decodeAlarm(String event) {
 
     private String decodeEvent(String event, Position position) {
 
-        if (event.length() != 1)
+        if (event.length() != 1) {
             return event;
+        }
 
         int inputStatusInt = 0;
         char inputStatus = event.charAt(0);

File: src/main/java/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -118,7 +118,7 @@ private String decodeEvent(String event, Position position) {
 
         if (inputStatus >= 'A' && inputStatus <= 'D') {
             inputStatusInt = inputStatus - 'A';
-        } else if(inputStatus >= 'O' && inputStatus <= 'R') {
+        } else if (inputStatus >= 'O' && inputStatus <= 'R') {
             inputStatusInt = inputStatus - 'O' + 4;
         } else {
             return event;

File: src/main/java/org/traccar/web/ResponseWrapper.java
Patch:
@@ -75,8 +75,9 @@ public void flushBuffer() throws IOException {
     public byte[] getCapture() throws IOException {
         if (output != null) {
             output.close();
+            return capture.toByteArray();
         }
-        return capture.toByteArray();
+        return null;
     }
 
 }

File: src/main/java/org/traccar/web/OverrideFilter.java
Patch:
@@ -45,12 +45,12 @@ public OverrideFilter(Provider<PermissionsService> permissionsServiceProvider) {
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
             throws IOException, ServletException {
 
-        CharResponseWrapper wrappedResponse = new CharResponseWrapper((HttpServletResponse) response);
+        ResponseWrapper wrappedResponse = new ResponseWrapper((HttpServletResponse) response);
 
         chain.doFilter(request, wrappedResponse);
 
         byte[] bytes = wrappedResponse.getCapture();
-        if (wrappedResponse.getContentType().contains("text/html")
+        if (wrappedResponse.getContentType() != null && wrappedResponse.getContentType().contains("text/html")
                 || ((HttpServletRequest) request).getPathInfo().endsWith("manifest.json")) {
 
             Server server;

File: src/main/java/org/traccar/web/ResponseWrapper.java
Patch:
@@ -22,12 +22,12 @@
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
 
-public class CharResponseWrapper extends HttpServletResponseWrapper {
+public class ResponseWrapper extends HttpServletResponseWrapper {
 
     private final ByteArrayOutputStream capture;
     private ServletOutputStream output;
 
-    public CharResponseWrapper(HttpServletResponse response) {
+    public ResponseWrapper(HttpServletResponse response) {
         super(response);
         capture = new ByteArrayOutputStream(response.getBufferSize());
     }

File: src/main/java/org/traccar/protocol/TranSyncProtocol.java
Patch:
@@ -35,4 +35,4 @@ protected void addProtocolHandlers(PipelineBuilder pipeline, Config config) {
             }
         });
     }
-}
\ No newline at end of file
+}

File: src/main/java/org/traccar/handler/events/MotionEventHandler.java
Patch:
@@ -50,8 +50,7 @@ public class MotionEventHandler extends BaseEventHandler {
     private final Storage storage;
 
     @Inject
-    public MotionEventHandler(
-            CacheManager cacheManager, Storage storage, TripsConfig tripsConfig) {
+    public MotionEventHandler(CacheManager cacheManager, Storage storage) {
         this.cacheManager = cacheManager;
         this.storage = storage;
     }

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -913,6 +913,7 @@ private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
                     }
                     getLastLocation(position, time);
                     decodeCoordinates(position, buf);
+                    position.setTime(time);
                     break;
                 case 0x02:
                     count = buf.readUnsignedByte();
@@ -925,6 +926,7 @@ private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
                     }
                     getLastLocation(position, time);
                     decodeCoordinates(position, buf);
+                    position.setTime(time);
                     break;
                 case 0x03:
                     count = buf.readUnsignedByte();
@@ -956,6 +958,7 @@ private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
                     }
                     getLastLocation(position, time);
                     decodeCoordinates(position, buf);
+                    position.setTime(time);
                     break;
                 case 0x0B:
                     if (buf.readUnsignedByte() > 0) {

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -231,6 +231,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(26, null, (p, b) -> p.set("bleTemp2", b.readShort() * 0.01));
         register(27, null, (p, b) -> p.set("bleTemp3", b.readShort() * 0.01));
         register(28, null, (p, b) -> p.set("bleTemp4", b.readShort() * 0.01));
+        register(30, fmbXXX, (p, b) -> p.set("faultCount", b.readUnsignedByte()));
         register(66, null, (p, b) -> p.set(Position.KEY_POWER, b.readUnsignedShort() * 0.001));
         register(67, null, (p, b) -> p.set(Position.KEY_BATTERY, b.readUnsignedShort() * 0.001));
         register(68, fmbXXX, (p, b) -> p.set("batteryCurrent", b.readUnsignedShort() * 0.001));

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -231,6 +231,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(26, null, (p, b) -> p.set("bleTemp2", b.readShort() * 0.01));
         register(27, null, (p, b) -> p.set("bleTemp3", b.readShort() * 0.01));
         register(28, null, (p, b) -> p.set("bleTemp4", b.readShort() * 0.01));
+        register(30, fmbXXX, (p, b) -> p.set("faultCount", b.readUnsignedByte()));
         register(66, null, (p, b) -> p.set(Position.KEY_POWER, b.readUnsignedShort() * 0.001));
         register(67, null, (p, b) -> p.set(Position.KEY_BATTERY, b.readUnsignedShort() * 0.001));
         register(68, fmbXXX, (p, b) -> p.set("batteryCurrent", b.readUnsignedShort() * 0.001));

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -231,6 +231,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(26, null, (p, b) -> p.set("bleTemp2", b.readShort() * 0.01));
         register(27, null, (p, b) -> p.set("bleTemp3", b.readShort() * 0.01));
         register(28, null, (p, b) -> p.set("bleTemp4", b.readShort() * 0.01));
+        register(30, fmbXXX, (p, b) -> p.set("faultCount", b.readUnsignedByte()));
         register(66, null, (p, b) -> p.set(Position.KEY_POWER, b.readUnsignedShort() * 0.001));
         register(67, null, (p, b) -> p.set(Position.KEY_BATTERY, b.readUnsignedShort() * 0.001));
         register(68, fmbXXX, (p, b) -> p.set("batteryCurrent", b.readUnsignedShort() * 0.001));

File: src/main/java/org/traccar/model/Position.java
Patch:
@@ -25,8 +25,7 @@
 
 @StorageName("tc_positions")
 public class Position extends Message {
-  	
-    public static final String KEY_FAULT_COUNT = "faultCount";
+
     public static final String KEY_ORIGINAL = "raw";
     public static final String KEY_INDEX = "index";
     public static final String KEY_HDOP = "hdop";

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -231,7 +231,6 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(26, null, (p, b) -> p.set("bleTemp2", b.readShort() * 0.01));
         register(27, null, (p, b) -> p.set("bleTemp3", b.readShort() * 0.01));
         register(28, null, (p, b) -> p.set("bleTemp4", b.readShort() * 0.01));
-        register(30, fmbXXX, (p, b) -> p.set(Position.KEY_FAULT_COUNT, b.readUnsignedByte()));
         register(66, null, (p, b) -> p.set(Position.KEY_POWER, b.readUnsignedShort() * 0.001));
         register(67, null, (p, b) -> p.set(Position.KEY_BATTERY, b.readUnsignedShort() * 0.001));
         register(68, fmbXXX, (p, b) -> p.set("batteryCurrent", b.readUnsignedShort() * 0.001));

File: src/main/java/org/traccar/model/Position.java
Patch:
@@ -25,8 +25,7 @@
 
 @StorageName("tc_positions")
 public class Position extends Message {
-  	
-    public static final String KEY_FAULT_COUNT = "faultCount";
+
     public static final String KEY_ORIGINAL = "raw";
     public static final String KEY_INDEX = "index";
     public static final String KEY_HDOP = "hdop";

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -231,7 +231,6 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(26, null, (p, b) -> p.set("bleTemp2", b.readShort() * 0.01));
         register(27, null, (p, b) -> p.set("bleTemp3", b.readShort() * 0.01));
         register(28, null, (p, b) -> p.set("bleTemp4", b.readShort() * 0.01));
-        register(30, fmbXXX, (p, b) -> p.set(Position.KEY_FAULT_COUNT, b.readUnsignedByte()));
         register(66, null, (p, b) -> p.set(Position.KEY_POWER, b.readUnsignedShort() * 0.001));
         register(67, null, (p, b) -> p.set(Position.KEY_BATTERY, b.readUnsignedShort() * 0.001));
         register(68, fmbXXX, (p, b) -> p.set("batteryCurrent", b.readUnsignedShort() * 0.001));

File: src/main/java/org/traccar/model/Position.java
Patch:
@@ -25,7 +25,8 @@
 
 @StorageName("tc_positions")
 public class Position extends Message {
-
+  	
+    public static final String KEY_FAULT_COUNT = "faultCount";
     public static final String KEY_ORIGINAL = "raw";
     public static final String KEY_INDEX = "index";
     public static final String KEY_HDOP = "hdop";

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -231,6 +231,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(26, null, (p, b) -> p.set("bleTemp2", b.readShort() * 0.01));
         register(27, null, (p, b) -> p.set("bleTemp3", b.readShort() * 0.01));
         register(28, null, (p, b) -> p.set("bleTemp4", b.readShort() * 0.01));
+        register(30, fmbXXX, (p, b) -> p.set(Position.KEY_FAULT_COUNT, b.readUnsignedByte()));
         register(66, null, (p, b) -> p.set(Position.KEY_POWER, b.readUnsignedShort() * 0.001));
         register(67, null, (p, b) -> p.set(Position.KEY_BATTERY, b.readUnsignedShort() * 0.001));
         register(68, fmbXXX, (p, b) -> p.set("batteryCurrent", b.readUnsignedShort() * 0.001));

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -978,7 +978,7 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String se
             index += 1; // device type
 
             if (BitUtil.check(mask, 0)) {
-                index += 1; // digital fuel sensor data
+                position.set(Position.KEY_FUEL_LEVEL, Integer.parseInt(data[index++], 16));
             }
 
             if (BitUtil.check(mask, 1)) {

File: src/test/java/org/traccar/protocol/HuaShengProtocolDecoderTest.java
Patch:
@@ -20,6 +20,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "c000000077aa0200000000000e000100143347315f48312e315f56312e30372e54000300133335353835353035303434303635380004000b3531323030303000050005010006000400070004000800050000090018383936313032353431343533333239313833360d000a000f796573696e7465726e6574c0"));
 
+        verifyNotNull(decoder, binary(
+                "c0000000b9aa00000000000013c800001132333035303431343537323600186bc30045e5b8002a008b0077002d000100187f0c4b2600d906ec000005938800000000000e0000040009110000000e0005000a1d0400000079000900154646464646464646464646464646464646000f00133836323230353035353339313733360010000c302e30303030303000110008000000000014000bf81b204901b52a001500060000002000153231394030324030403130343438393139c0"));
+
         verifyAttribute(decoder, binary(
                 "C00000001CAA120000000000020001001001000200030043008200C100C0"),
                 Position.KEY_DTCS, "P0100 P0200 P0300 C0300 B0200 U0100");

File: src/main/java/org/traccar/BasePipelineFactory.java
Patch:
@@ -33,6 +33,7 @@
 import org.traccar.handler.EngineHoursHandler;
 import org.traccar.handler.FilterHandler;
 import org.traccar.handler.GeocoderHandler;
+import org.traccar.handler.GeofenceHandler;
 import org.traccar.handler.GeolocationHandler;
 import org.traccar.handler.HemisphereHandler;
 import org.traccar.handler.MotionHandler;
@@ -149,6 +150,7 @@ protected void initChannel(Channel channel) {
                 DistanceHandler.class,
                 RemoteAddressHandler.class,
                 FilterHandler.class,
+                GeofenceHandler.class,
                 GeocoderHandler.class,
                 SpeedLimitHandler.class,
                 MotionHandler.class,

File: src/main/java/org/traccar/api/resource/CommandResource.java
Patch:
@@ -124,7 +124,7 @@ public Response send(Command entity, @QueryParam("groupId") long groupId) throws
             for (Device device : devices) {
                 Command command = QueuedCommand.fromCommand(entity).toCommand();
                 command.setDeviceId(device.getId());
-                result = result && commandsManager.sendCommand(command);
+                result = commandsManager.sendCommand(command) && result;
             }
         } else {
             permissionsService.checkPermission(Device.class, getUserId(), entity.getDeviceId());

File: src/main/java/org/traccar/handler/events/OverspeedEventHandler.java
Patch:
@@ -84,8 +84,8 @@ protected Map<Event, Position> analyzePosition(Position position) {
         double geofenceSpeedLimit = 0;
         long overspeedGeofenceId = 0;
 
-        if (device.getGeofenceIds() != null) {
-            for (long geofenceId : device.getGeofenceIds()) {
+        if (position.getGeofenceIds() != null) {
+            for (long geofenceId : position.getGeofenceIds()) {
                 Geofence geofence = cacheManager.getObject(Geofence.class, geofenceId);
                 if (geofence != null) {
                     double currentSpeedLimit = geofence.getDouble(Keys.EVENT_OVERSPEED_LIMIT.getKey());

File: src/main/java/org/traccar/reports/common/ReportUtils.java
Patch:
@@ -51,7 +51,6 @@
 
 import javax.annotation.Nullable;
 import javax.inject.Inject;
-import javax.inject.Singleton;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -63,7 +62,6 @@
 import java.util.List;
 import java.util.Locale;
 
-@Singleton
 public class ReportUtils {
 
     private final Config config;

File: src/test/java/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -43,6 +43,9 @@ public void testDecode() throws Exception {
 
         decoder.setCustom(true);
 
+        verifyPositions(decoder, binary(
+                "405099280272000300014399e3f93d136438abdf644083f56440842afb2711c701b9eaee0067020003e0bb03de0000000000000007d007d00025434925454c25455425464325464c255250254d4c25534d25545225494125454f25564e254d56254256254548255a4c33255a4f3134255a4f3131255a4f3130255a4f32255a4c3400000000000000000000000000000000000000000000930025000000000000000000000000000000006438abdf644083f76440842afb2711c701b9eaee0067710003e0bb03de0100000000000007d007d00025434925454c25455425464325464c255250254d4c25534d25545225494125454f25564e254d56254256254548255a4c33255a4f3134255a4f3131255a4f3130255a4f32255a4c3400000000000000000000000000000000000000000000950025000000000000000000000000000000006438abdf644083f76440842afb2711c701b9eaee0067840003e0bb03de0100000000000007d007d00025434925454c25455425464325464c255250254d4c25534d25545225494125454f25564e254d56254256254548255a4c33255a4f3134255a4f3131255a4f3130255a4f32255a4c3400000000000000000000000000000000000000000000950025000000000000000000000000000000006438abdf644083f86440842afb2711c701b9eaee0067760003e0bb03de0100000000000007d007d00025434925454c25455425464325464c255250254d4c25534d25545225494125454f25564e254d56254256254548255a4c33255a4f3134255a4f3131255a4f3130255a4f32255a4c340000000000000000000000000000000000000000000095002500000000000000000000000000000000"));
+
         verifyPositions(decoder, buffer(
                 "@P,7A66,153,9022,863003048505515,20210207000103,20210207000103,20210207000103,103939276,1348903,97,2,5628,8,0,0,0,0,,2000,2000,\u001a,%CI%BC,3:224:F128833445E6002C09C6\r\n"));
 

File: src/main/java/org/traccar/api/resource/CommandResource.java
Patch:
@@ -124,7 +124,7 @@ public Response send(Command entity, @QueryParam("groupId") long groupId) throws
             for (Device device : devices) {
                 Command command = QueuedCommand.fromCommand(entity).toCommand();
                 command.setDeviceId(device.getId());
-                result = result && commandsManager.sendCommand(command);
+                result = commandsManager.sendCommand(command) && result;
             }
         } else {
             permissionsService.checkPermission(Device.class, getUserId(), entity.getDeviceId());

File: src/main/java/org/traccar/reports/common/ReportUtils.java
Patch:
@@ -51,7 +51,6 @@
 
 import javax.annotation.Nullable;
 import javax.inject.Inject;
-import javax.inject.Singleton;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
@@ -63,7 +62,6 @@
 import java.util.List;
 import java.util.Locale;
 
-@Singleton
 public class ReportUtils {
 
     private final Config config;

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolDecoder.java
Patch:
@@ -48,6 +48,8 @@ public Minifinder2ProtocolDecoder(Protocol protocol) {
     public static final int MSG_DATA = 0x01;
     public static final int MSG_CONFIGURATION = 0x02;
     public static final int MSG_SERVICES = 0x03;
+    public static final int MSG_SYSTEM_CONTROL = 0x04;
+    public static final int MSG_FIRMWARE = 0x7E;
     public static final int MSG_RESPONSE = 0x7F;
 
     private String decodeAlarm(long code) {

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolEncoder.java
Patch:
@@ -53,6 +53,7 @@ protected Object encodeCommand(Command command) {
             ByteBuf content = Unpooled.buffer();
             if (command.getType().equals(Command.TYPE_FIRMWARE_UPDATE)) {
                 String url = command.getString(Command.KEY_DATA);
+                content.writeByte(Minifinder2ProtocolDecoder.MSG_SYSTEM_CONTROL);
                 content.writeByte(1 + url.length());
                 content.writeByte(0x30); // type
                 content.writeCharSequence(url, StandardCharsets.US_ASCII);

File: src/test/java/org/traccar/protocol/Minifinder2ProtocolEncoderTest.java
Patch:
@@ -22,7 +22,7 @@ public void testEncodeNano() throws Exception {
         command.setType(Command.TYPE_FIRMWARE_UPDATE);
         command.set(Command.KEY_DATA, "https://example.com");
 
-        verifyCommand(encoder, command, binary("ab00150018750100143068747470733a2f2f6578616d706c652e636f6d"));
+        verifyCommand(encoder, command, binary("ab00160059d2010004143068747470733a2f2f6578616d706c652e636f6d"));
 
     }
 

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -371,18 +371,19 @@ private void decodeNetwork(Position position, String model) {
             Long cid4g = (Long) position.getAttributes().remove("cid4g");
             Integer lac = (Integer) position.getAttributes().remove("lac");
             if (lac != null && (cid2g != null || cid4g != null)) {
+                Network network = new Network();
                 CellTower cellTower;
                 if (cid2g != null) {
                     cellTower = CellTower.fromLacCid(getConfig(), lac, cid2g);
-                    cellTower.setRadioType("gsm");
                 } else {
                     cellTower = CellTower.fromLacCid(getConfig(), lac, cid4g);
-                    cellTower.setRadioType("lte");
+                    network.setRadioType("lte");
                 }
                 long operator = position.getInteger(Position.KEY_OPERATOR);
                 if (operator >= 1000) {
                     cellTower.setOperator(operator);
                 }
+                network.addCellTower(cellTower);
                 position.setNetwork(new Network(cellTower));
             }
         }

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -171,7 +171,7 @@ public static LdapProvider provideLdapProvider(Config config) {
         }
         return null;
     }
-    
+
     @Singleton
     @Provides
     public static OpenIdProvider provideOpenIDProvider(Config config, LoginService loginService) {

File: src/main/java/org/traccar/api/resource/ServerResource.java
Patch:
@@ -71,7 +71,7 @@ public Server get() throws StorageException {
         server.setEmailEnabled(mailManager.getEmailEnabled());
         server.setGeocoderEnabled(geocoder != null);
         server.setOpenIdEnabled(openIdProvider != null);
-        server.setOpenIdForce(openIdProvider != null && openIdProvider.force);
+        server.setOpenIdForce(openIdProvider != null && openIdProvider.getForce());
         User user = permissionsService.getUser(getUserId());
         if (user != null) {
             if (user.getAdministrator()) {

File: src/main/java/org/traccar/api/resource/SessionResource.java
Patch:
@@ -174,7 +174,7 @@ public String requestToken(
     public Response openIdAuth() throws IOException {
         return Response.seeOther(openIdProvider.createAuthUri()).build();
     }
-    
+
     @PermitAll
     @Path("openid/callback")
     @GET

File: src/main/java/org/traccar/api/resource/UserResource.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.traccar.api.BaseObjectResource;
 import org.traccar.config.Config;
-import org.traccar.config.Keys;
 import org.traccar.helper.LogAction;
 import org.traccar.helper.model.UserUtil;
 import org.traccar.model.ManagedUser;

File: src/main/java/org/traccar/api/security/LoginService.java
Patch:
@@ -107,7 +107,7 @@ public User login(String email, String name, Boolean administrator) throws Stora
             user.setEmail(email);
             user.setFixedEmail(true);
             user.setAdministrator(administrator);
-            user.setId(storage.addObject(user, new Request(new Columns.Exclude("id"))));            
+            user.setId(storage.addObject(user, new Request(new Columns.Exclude("id"))));
             checkUserEnabled(user);
             return user;
         }

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -628,7 +628,7 @@ private Keys() {
             List.of(KeyType.CONFIG));
 
     /**
-     * OpenID Connect Client Secret. 
+     * OpenID Connect Client Secret.
      * This is a secret assigned to each application you register with your identity provider.
      * Required to enable SSO.
      */

File: src/main/java/org/traccar/api/resource/PermissionsResource.java
Patch:
@@ -48,7 +48,7 @@ public class PermissionsResource  extends BaseResource {
     private void checkPermission(Permission permission) throws StorageException {
         if (permissionsService.notAdmin(getUserId())) {
             permissionsService.checkPermission(permission.getOwnerClass(), getUserId(), permission.getOwnerId());
-            permissionsService.checkPermission(permission.getOwnerClass(), getUserId(), permission.getOwnerId());
+            permissionsService.checkPermission(permission.getPropertyClass(), getUserId(), permission.getPropertyId());
         }
     }
 

File: src/main/java/org/traccar/api/resource/PermissionsResource.java
Patch:
@@ -48,7 +48,7 @@ public class PermissionsResource  extends BaseResource {
     private void checkPermission(Permission permission) throws StorageException {
         if (permissionsService.notAdmin(getUserId())) {
             permissionsService.checkPermission(permission.getOwnerClass(), getUserId(), permission.getOwnerId());
-            permissionsService.checkPermission(permission.getOwnerClass(), getUserId(), permission.getOwnerId());
+            permissionsService.checkPermission(permission.getPropertyClass(), getUserId(), permission.getPropertyId());
         }
     }
 

File: src/main/java/org/traccar/protocol/VltProtocolDecoder.java
Patch:
@@ -124,13 +124,15 @@ protected Object decode(
         switch (type) {
             case "NRM":
                 return decodePosition(deviceSession, sentence.substring(3 + 15));
-            default:
+            case "BTH":
                 List<Position> positions = new LinkedList<>();
                 int count = Integer.parseInt(sentence.substring(index, index += 3));
                 for (int i = 0; i < count; i++) {
                     positions.add(decodePosition(deviceSession, sentence.substring(index, index += 78)));
                 }
                 return positions;
+            default:
+                return null;
         }
     }
 

File: src/main/java/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -63,8 +63,9 @@ public WialonProtocolDecoder(Protocol protocol) {
             .number("(?:NA|(d+));")              // outputs
             .expression("(?:NA|([^;]*));")       // adc
             .expression("(?:NA|([^;]*));")       // ibutton
-            .expression("(?:NA|(.*))")           // params
+            .expression("(?:NA|([^;]*))")        // params
             .groupEnd("?")
+            .any()
             .compile();
 
     private void sendResponse(Channel channel, SocketAddress remoteAddress, String type, Integer number) {

File: src/main/java/org/traccar/handler/AcknowledgementHandler.java
Patch:
@@ -61,7 +61,7 @@ public Object getObject() {
         }
     }
 
-    private static class Entry {
+    private static final class Entry {
         private final Object message;
         private final ChannelPromise promise;
 

File: src/main/java/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -353,6 +353,7 @@ private Position decodeGptxt(Channel channel, SocketAddress remoteAddress, Strin
         }
 
         Position position = new Position(getProtocolName());
+        position.setDeviceId(deviceSession.getDeviceId());
 
         getLastLocation(position, null);
 

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -294,6 +294,8 @@ protected Object decode(
 
         } else if (type == MSG_TRANSPARENT) {
 
+            sendGeneralResponse(channel, remoteAddress, id, type, index);
+
             return decodeTransparent(deviceSession, buf);
 
         }

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -847,7 +847,7 @@ private Position decodeTransparent(DeviceSession deviceSession, ByteBuf buf) {
                 case 0x03:
                     count = buf.readUnsignedByte();
                     for (int i = 0; i < count; i++) {
-                        int id = buf.readUnsignedShort();
+                        int id = buf.readUnsignedByte();
                         int length = buf.readUnsignedByte();
                         switch (id) {
                             case 0x1A:

File: src/test/java/org/traccar/protocol/HuabaoProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "7e010200204f07788ef67601824f4459344f544d314d4459774d4441314d444977626d5633553235536457786cba7e"));
 
+        verifyPosition(decoder, binary(
+                "7e0900001f4f07788ef87d000cf0230223150215010203013800000c000b029dc58c04b99b60230223171822507e"));
+
         verifyPosition(decoder, binary(
                 "7e0200004107904226220608ca0000010000000010031dac0d004864f30000000000002212291003220104000179a7300107310100eb17000300e151000300e304000b00d801041edf340000306b007e"));
 

File: src/main/java/org/traccar/reports/common/ReportUtils.java
Patch:
@@ -386,7 +386,7 @@ public <T extends BaseReportItem> Collection<T> detectTripsAndStops(
                     }
                 }
             }
-            if (startEventIndex >= 0 && startEventIndex < positions.size() - 1) {
+            if (detected & startEventIndex >= 0 && startEventIndex < positions.size() - 1) {
                 int endIndex = startNoEventIndex >= 0 ? startNoEventIndex : positions.size() - 1;
                 result.add(calculateTripOrStop(
                         device, positions, startEventIndex, endIndex, ignoreOdometer, reportClass));

File: src/main/java/org/traccar/handler/ComputedAttributesHandler.java
Patch:
@@ -115,7 +115,9 @@ private MapContext prepareContext(Position position) {
      */
     @Deprecated
     public Object computeAttribute(Attribute attribute, Position position) throws JexlException {
-        return engine.createScript(features, engine.createInfo(), attribute.getExpression()).execute(prepareContext(position));
+        return engine.createScript(features,
+                engine.createInfo(),
+                attribute.getExpression()).execute(prepareContext(position));
     }
 
     @Override

File: src/main/java/org/traccar/handler/ComputedAttributesHandler.java
Patch:
@@ -64,6 +64,7 @@ public ComputedAttributesHandler(Config config, CacheManager cacheManager) {
         this.cacheManager = cacheManager;
         JexlSandbox sandbox = new JexlSandbox(false);
         sandbox.allow("com.safe.Functions");
+        sandbox.allow(Math.class.getName());
         features = new JexlFeatures()
                 .localVar(config.getBoolean(Keys.PROCESSING_COMPUTED_ATTRIBUTES_LOCAL_VARIABLES))
                 .loops(config.getBoolean(Keys.PROCESSING_COMPUTED_ATTRIBUTES_LOOPS))

File: src/main/java/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -956,7 +956,7 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String se
             position.set(Position.KEY_POWER, power * 0.001);
         }
 
-        if (parser.hasNext(12)) {
+        if (parser.hasNextAny(12)) {
 
             position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_HOURS, parseHours(parser.next()));

File: src/main/java/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -225,7 +225,7 @@ private Position decodeRegular(Channel channel, SocketAddress remoteAddress, Str
                     getConfig(), parser.nextHexInt(0), parser.nextHexInt(0))));
         }
 
-        if (parser.hasNext(20)) {
+        if (parser.hasNextAny(20)) {
 
             String utcHours = parser.next();
             String utcMinutes = parser.next();

File: src/main/java/org/traccar/protocol/StartekProtocolDecoder.java
Patch:
@@ -221,7 +221,7 @@ protected Object decodePosition(DeviceSession deviceSession, String content) thr
             }
         }
 
-        if (parser.hasNext(6)) {
+        if (parser.hasNextAny(6)) {
             position.set(Position.KEY_RPM, parser.nextInt());
             position.set(Position.KEY_ENGINE_LOAD, parser.nextInt());
             position.set("airFlow", parser.nextInt());

File: src/main/java/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -101,7 +101,7 @@ private Position decodePosition(Channel channel, SocketAddress remoteAddress, St
             position.setTime(new Date());
         }
 
-        if (parser.hasNext(9)) {
+        if (parser.hasNextAny(9)) {
             position.setLatitude(parser.nextCoordinate());
             position.setLongitude(parser.nextCoordinate());
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble(0)));

File: src/test/java/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new Gl200TextProtocolDecoder(null));
 
+        verifyPositions(decoder, false, buffer(
+                "+BUFF:GTFRI,2E0503,861106050005423,,,0,1,,,,,,,,,,,,0,0,,98,1,0,,,20200101000001,0083$"));
+
         verifyAttribute(decoder, buffer(
                 "+RESP:GTERI,271002,863457051562823,,00000002,,10,1,1,0.0,15,28.2,-58.695253,-34.625413,20230119193305,0722,0007,1168,16B3BB,00,0.0,,,,99,210100,2,1,28F8A149F69A3C25,1,0190,20230119193314,07C7$"),
                 Position.PREFIX_TEMP + 1, 25.0);

File: src/main/java/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -314,7 +314,7 @@ private Position decodeNew(DeviceSession deviceSession, ByteBuf buf, int type, i
             }
 
             if (buf.readableBytes() >= 12) {
-                position.set(Position.PREFIX_TEMP + 1, buf.readUnsignedShort() / 256.0);
+                position.set(Position.PREFIX_TEMP + 1, buf.readShort() / 256.0);
                 position.set("humidity", buf.readUnsignedShort() * 0.1);
                 position.set("illuminance", buf.readUnsignedInt() / 256.0);
                 position.set("co2", buf.readUnsignedInt());

File: src/main/java/org/traccar/handler/events/FuelEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 - 2022 Anton Tananaev (anton@traccar.org)
+ * Copyright 2017 - 2023 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -60,13 +60,13 @@ protected Map<Event, Position> analyzePosition(Position position) {
                 if (change > 0) {
                     double threshold = AttributeUtil.lookup(
                             cacheManager, Keys.EVENT_FUEL_INCREASE_THRESHOLD, position.getDeviceId());
-                    if (change >= threshold) {
+                    if (threshold > 0 && change >= threshold) {
                         return Map.of(new Event(Event.TYPE_DEVICE_FUEL_INCREASE, position), position);
                     }
                 } else if (change < 0) {
                     double threshold = AttributeUtil.lookup(
                             cacheManager, Keys.EVENT_FUEL_DROP_THRESHOLD, position.getDeviceId());
-                    if (Math.abs(change) >= threshold) {
+                    if (threshold > 0 && Math.abs(change) >= threshold) {
                         return Map.of(new Event(Event.TYPE_DEVICE_FUEL_DROP, position), position);
                     }
                 }

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -359,7 +359,7 @@ public static PositionForwarder providePositionForwarder(Config config, Client c
     @Provides
     public static VelocityEngine provideVelocityEngine(Config config) {
         Properties properties = new Properties();
-        properties.setProperty("file.resource.loader.path", config.getString(Keys.TEMPLATES_ROOT) + "/");
+        properties.setProperty("resource.loader.file.path", config.getString(Keys.TEMPLATES_ROOT) + "/");
 
         if (config.hasKey(Keys.WEB_URL)) {
             properties.setProperty("web.url", config.getString(Keys.WEB_URL).replaceAll("/$", ""));

File: src/main/java/org/traccar/schedule/ScheduleManager.java
Patch:
@@ -39,6 +39,7 @@ public ScheduleManager(Injector injector) {
     public void start() {
         executor = Executors.newSingleThreadScheduledExecutor();
         var tasks = List.of(
+                TaskReports.class,
                 TaskDeviceInactivityCheck.class,
                 TaskWebSocketKeepalive.class,
                 TaskHealthCheck.class);

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -1584,7 +1584,6 @@ private Keys() {
             List.of(KeyType.CONFIG),
             "day");
 
-
     /**
      * A list of position attributes to log.
      */

File: src/main/java/org/traccar/helper/ClassScanner.java
Patch:
@@ -46,7 +46,7 @@ public static List<Class<?>> findSubclasses(Class<?> baseClass, String packageNa
         URL packageUrl = baseClass.getClassLoader().getResource(packagePath);
 
         if (packageUrl.getProtocol().equals("jar")) {
-            String jarFileName = URLDecoder.decode(packageUrl.getFile(), StandardCharsets.UTF_8.name());
+            String jarFileName = URLDecoder.decode(packageUrl.getFile(), StandardCharsets.UTF_8);
             try (JarFile jf = new JarFile(jarFileName.substring(5, jarFileName.indexOf("!")))) {
                 Enumeration<JarEntry> jarEntries = jf.entries();
                 while (jarEntries.hasMoreElements()) {

File: src/main/java/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -536,7 +536,8 @@ private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddres
                     case 0x2F:
                     case 0x30:
                     case 0x31:
-                        position.set(Position.PREFIX_TEMP + buf.readUnsignedByte(), buf.readShortLE() * 0.01);
+                        buf.readUnsignedByte(); // label
+                        position.set(Position.PREFIX_TEMP + (id - 0x2A), buf.readShortLE() * 0.01);
                         break;
                     case 0xFE31:
                         buf.readUnsignedByte(); // alarm protocol

File: src/main/java/org/traccar/storage/query/Request.java
Patch:
@@ -33,11 +33,11 @@ public Request(Columns columns, Condition condition) {
         this(columns, condition, null);
     }
 
-    public Request(Columns columns, Condition condition, Order order) {
-        this(columns, condition, order, null);
+    public Request(Columns columns, Order order) {
+        this(columns, null, order);
     }
 
-    public Request(Columns columns, Condition condition, Order order, Limit limit) {
+    public Request(Columns columns, Condition condition, Order order) {
         this.columns = columns;
         this.condition = condition;
         this.order = order;

File: src/main/java/org/traccar/storage/query/Order.java
Patch:
@@ -27,7 +27,7 @@ public Order(String column) {
 
     public Order(String column, boolean descending, int limit) {
         this.column = column;
-        this.descending = false;
+        this.descending = descending;
         this.limit = limit;
     }
 

File: src/main/java/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -194,7 +194,7 @@ protected Object decode(
                     boolean isPositionValid = parser.next().equals("A");
                     position.setValid(isPositionValid);
 
-                    if(isPositionValid) {
+                    if (isPositionValid) {
                         position.setLatitude(parser.nextCoordinate());
                         position.setLongitude(parser.nextCoordinate());
                         position.setSpeed(parser.nextDouble(0));
@@ -204,8 +204,8 @@ protected Object decode(
                     }
 
                     dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());
-                    
-                    if(isPositionValid) {
+
+                    if (isPositionValid) {
                         position.setTime(dateBuilder.getDate());
                     } else {
                         getLastLocation(position, dateBuilder.getDate());

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolDecoder.java
Patch:
@@ -272,8 +272,8 @@ protected Object decode(
                     case 0x31:
                         int i = 1;
                         while (buf.readerIndex() < endIndex) {
-                            position.set("activity" + i + "Time", buf.readUnsignedInt());
-                            position.set("activity" + i, buf.readUnsignedInt());
+                            position.set("activity" + i + "Time", buf.readUnsignedIntLE());
+                            position.set("activity" + i, buf.readUnsignedIntLE());
                             i += 1;
                         }
                         break;

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -632,7 +632,6 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                     }
                     break;
                 default:
-                    System.out.println("subtype " + String.format("%x", subtype));
                     break;
             }
             buf.readerIndex(endIndex);

File: src/main/java/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -263,6 +263,9 @@ protected Object decode(
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
+                if (position != null) {
+                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
+                }
                 sendResponse(channel, id, index, "AL");
             }
 

File: src/main/java/org/traccar/handler/events/MotionEventHandler.java
Patch:
@@ -75,7 +75,7 @@ protected Map<Event, Position> analyzePosition(Position position) {
             state.toDevice(device);
             try {
                 storage.updateObject(device, new Request(
-                        new Columns.Include("motionState", "motionTime", "motionDistance"),
+                        new Columns.Include("motionStreak", "motionState", "motionTime", "motionDistance"),
                         new Condition.Equals("id", device.getId())));
             } catch (StorageException e) {
                 LOGGER.warn("Update device motion error", e);

File: src/main/java/org/traccar/reports/common/ReportUtils.java
Patch:
@@ -354,7 +354,9 @@ public <T extends BaseReportItem> Collection<T> detectTripsAndStops(
             boolean trips = reportClass.equals(TripReportItem.class);
 
             MotionState motionState = new MotionState();
-            motionState.setMotionState(isMoving(positions, 0, tripsConfig));
+            boolean initialValue = isMoving(positions, 0, tripsConfig);
+            motionState.setMotionStreak(initialValue);
+            motionState.setMotionState(initialValue);
 
             boolean detected = trips == motionState.getMotionState();
             int startEventIndex = detected ? 0 : -1;

File: src/main/java/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -184,9 +184,9 @@ private List<Position> decodeStandard(Channel channel, SocketAddress remoteAddre
 
                     position.set(Position.KEY_IGNITION, BitUtil.check(input, 0));
 
-                    if (!BitUtil.check(input, 1)) {
+                    if (!BitUtil.check(status, 1)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_LOW_BATTERY);
-                    } else if (BitUtil.check(input, 6)) {
+                    } else if (BitUtil.check(status, 6)) {
                         position.set(Position.KEY_ALARM, Position.ALARM_TAMPERING);
                     }
 

File: src/main/java/org/traccar/protocol/DualcamProtocolDecoder.java
Patch:
@@ -84,7 +84,7 @@ protected Object decode(
                         response.writeShort(file.length());
                         response.writeCharSequence(file, StandardCharsets.US_ASCII);
                     } else {
-                        response.writeShort(MSG_COMPLETE);
+                        response.writeShort(MSG_INIT);
                     }
                     channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                 }

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolDecoder.java
Patch:
@@ -266,8 +266,8 @@ protected Object decode(
                         hasLocation = true;
                         break;
                     case 0x30:
-                        buf.readUnsignedInt(); // timestamp
-                        position.set(Position.KEY_STEPS, buf.readUnsignedInt());
+                        buf.readUnsignedIntLE(); // timestamp
+                        position.set(Position.KEY_STEPS, buf.readUnsignedIntLE());
                         break;
                     case 0x31:
                         int i = 1;

File: src/main/java/org/traccar/database/NotificationManager.java
Patch:
@@ -24,6 +24,7 @@
 import org.traccar.forward.EventForwarder;
 import org.traccar.geocoder.Geocoder;
 import org.traccar.model.Calendar;
+import org.traccar.model.Device;
 import org.traccar.model.Event;
 import org.traccar.model.Geofence;
 import org.traccar.model.Maintenance;
@@ -123,6 +124,7 @@ private void forwardEvent(Event event, Position position) {
             EventData eventData = new EventData();
             eventData.setEvent(event);
             eventData.setPosition(position);
+            eventData.setDevice(cacheManager.getObject(Device.class, event.getDeviceId()));
             if (event.getGeofenceId() != 0) {
                 eventData.setGeofence(cacheManager.getObject(Geofence.class, event.getGeofenceId()));
             }

File: src/main/java/org/traccar/api/security/PermissionsService.java
Patch:
@@ -34,6 +34,7 @@
 import org.traccar.storage.query.Request;
 
 import javax.inject.Inject;
+import java.util.Objects;
 
 @RequestScoped
 public class PermissionsService {
@@ -158,6 +159,7 @@ public void checkUserUpdate(long userId, User before, User after) throws Storage
         }
         User user = getUser(userId);
         if (user != null && user.getExpirationTime() != null
+                && !Objects.equals(before.getExpirationTime(), after.getExpirationTime())
                 && (after.getExpirationTime() == null
                 || user.getExpirationTime().compareTo(after.getExpirationTime()) < 0)) {
             checkAdmin(userId);

File: src/main/java/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -363,7 +363,7 @@ private List<Position> decodeBinaryC(Channel channel, SocketAddress remoteAddres
             positions.add(position);
         }
 
-        if (channel == null) {
+        if (channel != null) {
             StringBuilder command = new StringBuilder("@@");
             command.append(flag).append(27 + positions.size() / 10).append(",");
             command.append(imei).append(",CCC,").append(positions.size()).append("*");

File: src/main/java/org/traccar/protocol/KhdProtocolEncoder.java
Patch:
@@ -84,7 +84,7 @@ protected Object encodeCommand(Command command) {
                 return encodeCommand(MSG_FACTORY_RESET, uniqueId, null);
             case Command.TYPE_SET_SPEED_LIMIT:
                 ByteBuf content = Unpooled.buffer();
-                content.writeByte(Integer.parseInt(command.getString(Command.KEY_DATA)));
+                content.writeByte(command.getInteger(Command.KEY_DATA));
                 return encodeCommand(MSG_RESUME_OIL, uniqueId, content);
             case Command.TYPE_SET_ODOMETER:
                 return encodeCommand(MSG_DELETE_MILEAGE, uniqueId, null);

File: src/main/java/org/traccar/protocol/MeiligaoProtocolEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 - 2020 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2022 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -99,8 +99,8 @@ protected Object encodeCommand(Command command) {
                 content.writeShort(command.getInteger(Command.KEY_FREQUENCY) / 10);
                 return encodeContent(command.getDeviceId(), MeiligaoProtocolDecoder.MSG_TRACK_BY_INTERVAL, content);
             case Command.TYPE_OUTPUT_CONTROL:
-                int index = Integer.parseInt(command.getString(Command.KEY_INDEX)) - 1;
-                int value = Integer.parseInt(command.getString(Command.KEY_DATA));
+                int index = command.getInteger(Command.KEY_INDEX) - 1;
+                int value = command.getInteger(Command.KEY_DATA);
                 return encodeOutputCommand(command.getDeviceId(), index, value);
             case Command.TYPE_ENGINE_STOP:
                 return encodeOutputCommand(command.getDeviceId(), 1, 1);

File: src/main/java/org/traccar/protocol/RuptelaProtocolEncoder.java
Patch:
@@ -80,14 +80,14 @@ protected Object encodeCommand(Command command) {
                 return encodeContent(RuptelaProtocolDecoder.MSG_FIRMWARE_UPDATE, content);
             case Command.TYPE_OUTPUT_CONTROL:
                 content.writeInt(command.getInteger(Command.KEY_INDEX));
-                content.writeInt(Integer.parseInt(command.getString(Command.KEY_DATA)));
+                content.writeInt(command.getInteger(Command.KEY_DATA));
                 return encodeContent(RuptelaProtocolDecoder.MSG_SET_IO, content);
             case Command.TYPE_SET_CONNECTION:
                 String c = command.getString(Command.KEY_SERVER) + "," + command.getInteger(Command.KEY_PORT) + ",TCP";
                 content.writeBytes(c.getBytes(StandardCharsets.US_ASCII));
                 return encodeContent(RuptelaProtocolDecoder.MSG_SET_CONNECTION, content);
             case Command.TYPE_SET_ODOMETER:
-                content.writeInt(Integer.parseInt(command.getString(Command.KEY_DATA)));
+                content.writeInt(command.getInteger(Command.KEY_DATA));
                 return encodeContent(RuptelaProtocolDecoder.MSG_SET_ODOMETER, content);
             default:
                 return null;

File: src/test/java/org/traccar/protocol/HuabaoProtocolDecoderTest.java
Patch:
@@ -15,8 +15,8 @@ public void testDecode() throws Exception {
                 "7e010200204f07788ef67601824f4459344f544d314d4459774d4441314d444977626d5633553235536457786cba7e"));
 
         verifyAttribute(decoder, binary(
-                "7e0200005e01229130231209e300000000000c002300d264a305ff322300160000000022091514493503020000a70400000000ac0400000000e5020003e62c01bc5729009ca319bbff0002dd34020754fe1a83393c03bc572900ce371a6133d704dd34020751551d00fefb9a7e"),
-                Position.PREFIX_TEMP + 4, 29.0);
+                "7e02000042012291302260198f00000000800c012300d2651605ff3188001e0000000022102510310003020000a70400000000ac040000012ce5020003e60b03bc572900ce2eef183200e7030000005c7e"),
+                Position.PREFIX_TEMP + 3, -17.094117647058823);
 
         verifyAttribute(decoder, binary(
                 "7E0200008201215233475100030000000000000003015A7F6106CF8CEC003D0000000021071311481901040000005630011931011AE10200755D3D0601CC0024990A7dA0032301CC002499099B2941FC01CC002499099B29430B01CC0024990A7dA0290601CC0024990A7dA015FD01CC0026220994506BFFFE157C010400000001F10C000000000000000000000000997E"),

File: src/main/java/org/traccar/protocol/Gps103ProtocolEncoder.java
Patch:
@@ -49,7 +49,7 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_CUSTOM:
                 return formatCommand(command, "**,imei:%s,%s", Command.KEY_UNIQUE_ID, Command.KEY_DATA);
             case Command.TYPE_POSITION_STOP:
-                return formatCommand(command, "**,imei:%s,A", Command.KEY_UNIQUE_ID);
+                return formatCommand(command, "**,imei:%s,D", Command.KEY_UNIQUE_ID);
             case Command.TYPE_POSITION_SINGLE:
                 return formatCommand(command, "**,imei:%s,B", Command.KEY_UNIQUE_ID);
             case Command.TYPE_POSITION_PERIODIC:

File: src/main/java/org/traccar/model/QueuedCommand.java
Patch:
@@ -15,18 +15,19 @@
  */
 package org.traccar.model;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 import org.traccar.storage.StorageName;
 
 import java.util.HashMap;
 
 @StorageName("tc_commands_queue")
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class QueuedCommand extends BaseCommand {
 
     public static QueuedCommand fromCommand(Command command) {
         QueuedCommand queuedCommand = new QueuedCommand();
         queuedCommand.setDeviceId(command.getDeviceId());
         queuedCommand.setType(command.getType());
-        queuedCommand.setDescription(command.getDescription());
         queuedCommand.setTextChannel(command.getTextChannel());
         queuedCommand.setAttributes(new HashMap<>(command.getAttributes()));
         return queuedCommand;
@@ -36,7 +37,7 @@ public Command toCommand() {
         Command command = new Command();
         command.setDeviceId(getDeviceId());
         command.setType(getType());
-        command.setDescription(getDescription());
+        command.setDescription("");
         command.setTextChannel(getTextChannel());
         command.setAttributes(new HashMap<>(getAttributes()));
         return command;

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -856,7 +856,7 @@ protected Object decode(
 
         } else {
 
-            String[] values = buf.toString(StandardCharsets.US_ASCII).split(";");
+            String[] values = buf.toString(StandardCharsets.US_ASCII).split(";", -1);
             prefix = values[0];
 
             if (prefix.equals("CRR")) {

File: src/main/java/org/traccar/database/CommandsManager.java
Patch:
@@ -31,7 +31,6 @@
 import org.traccar.storage.StorageException;
 import org.traccar.storage.query.Columns;
 import org.traccar.storage.query.Condition;
-import org.traccar.storage.query.Limit;
 import org.traccar.storage.query.Order;
 import org.traccar.storage.query.Request;
 
@@ -102,8 +101,7 @@ public Collection<Command> readQueuedCommands(long deviceId, int count) {
             var commands = storage.getObjects(QueuedCommand.class, new Request(
                     new Columns.All(),
                     new Condition.Equals("deviceId", deviceId),
-                    new Order(false, "id"),
-                    new Limit(count)));
+                    new Order("id", false, count)));
             for (var command : commands) {
                 storage.removeObject(QueuedCommand.class, new Request(
                         new Condition.Equals("id", command.getId())));

File: src/main/java/org/traccar/handler/FilterHandler.java
Patch:
@@ -30,7 +30,6 @@
 import org.traccar.storage.StorageException;
 import org.traccar.storage.query.Columns;
 import org.traccar.storage.query.Condition;
-import org.traccar.storage.query.Limit;
 import org.traccar.storage.query.Order;
 import org.traccar.storage.query.Request;
 
@@ -90,8 +89,7 @@ private Position getPrecedingPosition(long deviceId, Date date) throws StorageEx
                 new Condition.And(
                         new Condition.Equals("deviceId", deviceId),
                         new Condition.Compare("fixTime", "<=", "time", date)),
-                new Order(true, "fixTime"),
-                new Limit(1)));
+                new Order("fixTime", true, 1)));
     }
 
     private boolean filterInvalid(Position position) {

File: src/main/java/org/traccar/storage/QueryBuilder.java
Patch:
@@ -37,12 +37,10 @@
 import java.sql.Types;
 import java.util.Date;
 import java.util.HashMap;
-import java.util.HashSet;
 import java.util.LinkedHashMap;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 
 @SuppressWarnings("UnusedReturnValue")
 public final class QueryBuilder {

File: src/main/java/org/traccar/MainEventHandler.java
Patch:
@@ -90,7 +90,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) {
                     updatedDevice.setPositionId(position.getId());
                     storage.updateObject(updatedDevice, new Request(
                             new Columns.Include("positionId"),
-                            new Condition.Equals("id", "id")));
+                            new Condition.Equals("id", updatedDevice.getId())));
 
                     cacheManager.updatePosition(position);
                     connectionManager.updatePosition(true, position);

File: src/main/java/org/traccar/api/MediaFilter.java
Patch:
@@ -84,7 +84,7 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha
             String[] parts = path != null ? path.split("/") : null;
             if (parts != null && parts.length >= 2) {
                 Device device = storage.getObject(Device.class, new Request(
-                        new Columns.All(), new Condition.Equals("uniqueId", "uniqueId", parts[1])));
+                        new Columns.All(), new Condition.Equals("uniqueId", parts[1])));
                 if (device != null) {
                     permissionsServiceProvider.get().checkPermission(Device.class, userId, device.getId());
                     chain.doFilter(request, response);

File: src/main/java/org/traccar/api/resource/CommandResource.java
Patch:
@@ -110,7 +110,7 @@ public Response send(Command entity) throws Exception {
             permissionsService.checkPermission(Command.class, getUserId(), entity.getId());
             long deviceId = entity.getDeviceId();
             entity = storage.getObject(baseClass, new Request(
-                    new Columns.All(), new Condition.Equals("id", "id", entity.getId())));
+                    new Columns.All(), new Condition.Equals("id", entity.getId())));
             entity.setDeviceId(deviceId);
         } else {
             permissionsService.checkRestriction(getUserId(), UserRestrictions::getLimitCommands);

File: src/main/java/org/traccar/api/resource/EventResource.java
Patch:
@@ -41,7 +41,7 @@ public class EventResource extends BaseResource {
     @GET
     public Event get(@PathParam("id") long id) throws StorageException {
         Event event = storage.getObject(Event.class, new Request(
-                new Columns.All(), new Condition.Equals("id", "id", id)));
+                new Columns.All(), new Condition.Equals("id", id)));
         if (event == null) {
             throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).build());
         }

File: src/main/java/org/traccar/api/resource/PositionResource.java
Patch:
@@ -67,7 +67,7 @@ public Collection<Position> getJson(
             var positions = new ArrayList<Position>();
             for (long positionId : positionIds) {
                 Position position = storage.getObject(Position.class, new Request(
-                        new Columns.All(), new Condition.Equals("id", "id", positionId)));
+                        new Columns.All(), new Condition.Equals("id", positionId)));
                 permissionsService.checkPermission(Device.class, getUserId(), position.getDeviceId());
                 positions.add(position);
             }

File: src/main/java/org/traccar/api/resource/ServerResource.java
Patch:
@@ -76,7 +76,7 @@ public Response update(Server entity) throws StorageException {
         permissionsService.checkAdmin(getUserId());
         storage.updateObject(entity, new Request(
                 new Columns.Exclude("id"),
-                new Condition.Equals("id", "id")));
+                new Condition.Equals("id", entity.getId())));
         cacheManager.updateOrInvalidate(true, entity);
         LogAction.edit(getUserId(), entity);
         return Response.ok(entity).build();

File: src/main/java/org/traccar/api/resource/SessionResource.java
Patch:
@@ -122,7 +122,7 @@ public User get(@QueryParam("token") String token) throws StorageException, IOEx
     public User get(@PathParam("id") long userId) throws StorageException {
         permissionsService.checkAdmin(getUserId());
         User user = storage.getObject(User.class, new Request(
-                new Columns.All(), new Condition.Equals("id", "id", userId)));
+                new Columns.All(), new Condition.Equals("id", userId)));
         request.getSession().setAttribute(USER_ID_KEY, user.getId());
         LogAction.login(user.getId(), ServletHelper.retrieveRemoteAddress(request));
         return user;

File: src/main/java/org/traccar/api/resource/UserResource.java
Patch:
@@ -100,7 +100,8 @@ public Response add(User entity) throws StorageException {
 
         entity.setId(storage.addObject(entity, new Request(new Columns.Exclude("id"))));
         storage.updateObject(entity, new Request(
-                new Columns.Include("hashedPassword", "salt"), new Condition.Equals("id", "id")));
+                new Columns.Include("hashedPassword", "salt"),
+                new Condition.Equals("id", entity.getId())));
 
         LogAction.create(getUserId(), entity);
 

File: src/main/java/org/traccar/api/security/PermissionsService.java
Patch:
@@ -62,7 +62,7 @@ public User getUser(long userId) throws StorageException {
                 user = new ServiceAccountUser();
             } else {
                 user = storage.getObject(
-                        User.class, new Request(new Columns.All(), new Condition.Equals("id", "id", userId)));
+                        User.class, new Request(new Columns.All(), new Condition.Equals("id", userId)));
             }
         }
         return user;
@@ -187,7 +187,7 @@ public <T extends BaseModel> void checkPermission(
             var object = storage.getObject(clazz, new Request(
                     new Columns.Include("id"),
                     new Condition.And(
-                            new Condition.Equals("id", "id", objectId),
+                            new Condition.Equals("id", objectId),
                             new Condition.Permission(
                                     User.class, userId, clazz.equals(User.class) ? ManagedUser.class : clazz))));
             if (object == null) {

File: src/main/java/org/traccar/database/DeviceLookupService.java
Patch:
@@ -108,7 +108,7 @@ public Device lookup(String[] uniqueIds) {
             for (String uniqueId : uniqueIds) {
                 if (!isThrottled(uniqueId)) {
                     device = storage.getObject(Device.class, new Request(
-                            new Columns.All(), new Condition.Equals("uniqueId", "uniqueId", uniqueId)));
+                            new Columns.All(), new Condition.Equals("uniqueId", uniqueId)));
                     if (device != null) {
                         lookupSucceeded(uniqueId);
                         break;

File: src/main/java/org/traccar/handler/FilterHandler.java
Patch:
@@ -88,7 +88,7 @@ private Position getPrecedingPosition(long deviceId, Date date) throws StorageEx
         return storage.getObject(Position.class, new Request(
                 new Columns.All(),
                 new Condition.And(
-                        new Condition.Equals("deviceId", "deviceId", deviceId),
+                        new Condition.Equals("deviceId", deviceId),
                         new Condition.Compare("fixTime", "<=", "time", date)),
                 new Order(true, "fixTime"),
                 new Limit(1)));

File: src/main/java/org/traccar/handler/events/GeofenceEventHandler.java
Patch:
@@ -82,7 +82,8 @@ protected Map<Event, Position> analyzePosition(Position position) {
 
             try {
                 storage.updateObject(device, new Request(
-                        new Columns.Include("geofenceIds"), new Condition.Equals("id", "id")));
+                        new Columns.Include("geofenceIds"),
+                        new Condition.Equals("id", device.getId())));
             } catch (StorageException e) {
                 throw new RuntimeException("Update device geofences error", e);
             }

File: src/main/java/org/traccar/handler/events/MotionEventHandler.java
Patch:
@@ -76,7 +76,7 @@ protected Map<Event, Position> analyzePosition(Position position) {
             try {
                 storage.updateObject(device, new Request(
                         new Columns.Include("motionState", "motionTime", "motionDistance"),
-                        new Condition.Equals("id", "id")));
+                        new Condition.Equals("id", device.getId())));
             } catch (StorageException e) {
                 LOGGER.warn("Update device motion error", e);
             }

File: src/main/java/org/traccar/handler/events/OverspeedEventHandler.java
Patch:
@@ -113,7 +113,7 @@ protected Map<Event, Position> analyzePosition(Position position) {
             try {
                 storage.updateObject(device, new Request(
                         new Columns.Include("overspeedState", "overspeedTime", "overspeedGeofenceId"),
-                        new Condition.Equals("id", "id")));
+                        new Condition.Equals("id", device.getId())));
             } catch (StorageException e) {
                 LOGGER.warn("Update device overspeed error", e);
             }

File: src/main/java/org/traccar/helper/model/PositionUtil.java
Patch:
@@ -59,7 +59,7 @@ public static List<Position> getPositions(
         return storage.getObjects(Position.class, new Request(
                 new Columns.All(),
                 new Condition.And(
-                        new Condition.Equals("deviceId", "deviceId", deviceId),
+                        new Condition.Equals("deviceId", deviceId),
                         new Condition.Between("fixTime", "from", from, "to", to)),
                 new Order("fixTime")));
     }

File: src/main/java/org/traccar/reports/EventsReportProvider.java
Patch:
@@ -64,7 +64,7 @@ private List<Event> getEvents(long deviceId, Date from, Date to) throws StorageE
         return storage.getObjects(Event.class, new Request(
                 new Columns.All(),
                 new Condition.And(
-                        new Condition.Equals("deviceId", "deviceId", deviceId),
+                        new Condition.Equals("deviceId", deviceId),
                         new Condition.Between("eventTime", "from", from, "to", to)),
                 new Order("eventTime")));
     }
@@ -134,7 +134,7 @@ public void getExcel(
             sheetNames.add(WorkbookUtil.createSafeSheetName(deviceEvents.getDeviceName()));
             if (device.getGroupId() > 0) {
                 Group group = storage.getObject(Group.class, new Request(
-                        new Columns.All(), new Condition.Equals("id", "id", device.getGroupId())));
+                        new Columns.All(), new Condition.Equals("id", device.getGroupId())));
                 if (group != null) {
                     deviceEvents.setGroupName(group.getName());
                 }

File: src/main/java/org/traccar/reports/GpxExportProvider.java
Patch:
@@ -42,7 +42,7 @@ public void generate(
             OutputStream outputStream, long deviceId, Date from, Date to) throws StorageException {
 
         var device = storage.getObject(Device.class, new Request(
-                new Columns.All(), new Condition.Equals("id", "id", deviceId)));
+                new Columns.All(), new Condition.Equals("id", deviceId)));
         var positions = PositionUtil.getPositions(storage, deviceId, from, to);
 
         try (PrintWriter writer = new PrintWriter(outputStream)) {

File: src/main/java/org/traccar/reports/KmlExportProvider.java
Patch:
@@ -43,7 +43,7 @@ public void generate(
             OutputStream outputStream, long deviceId, Date from, Date to) throws StorageException {
 
         var device = storage.getObject(Device.class, new Request(
-                new Columns.All(), new Condition.Equals("id", "id", deviceId)));
+                new Columns.All(), new Condition.Equals("id", deviceId)));
         var positions = PositionUtil.getPositions(storage, deviceId, from, to);
 
         var dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");

File: src/main/java/org/traccar/reports/RouteReportProvider.java
Patch:
@@ -80,7 +80,7 @@ public void getExcel(OutputStream outputStream,
             sheetNames.add(WorkbookUtil.createSafeSheetName(deviceRoutes.getDeviceName()));
             if (device.getGroupId() > 0) {
                 Group group = storage.getObject(Group.class, new Request(
-                        new Columns.All(), new Condition.Equals("id", "id", device.getGroupId())));
+                        new Columns.All(), new Condition.Equals("id", device.getGroupId())));
                 if (group != null) {
                     deviceRoutes.setGroupName(group.getName());
                 }

File: src/main/java/org/traccar/reports/StopsReportProvider.java
Patch:
@@ -87,7 +87,7 @@ public void getExcel(
             sheetNames.add(WorkbookUtil.createSafeSheetName(deviceStops.getDeviceName()));
             if (device.getGroupId() > 0) {
                 Group group = storage.getObject(Group.class, new Request(
-                        new Columns.All(), new Condition.Equals("id", "id", device.getGroupId())));
+                        new Columns.All(), new Condition.Equals("id", device.getGroupId())));
                 if (group != null) {
                     deviceStops.setGroupName(group.getName());
                 }

File: src/main/java/org/traccar/reports/TripsReportProvider.java
Patch:
@@ -87,7 +87,7 @@ public void getExcel(OutputStream outputStream,
             sheetNames.add(WorkbookUtil.createSafeSheetName(deviceTrips.getDeviceName()));
             if (device.getGroupId() > 0) {
                 Group group = storage.getObject(Group.class, new Request(
-                        new Columns.All(), new Condition.Equals("id", "id", device.getGroupId())));
+                        new Columns.All(), new Condition.Equals("id", device.getGroupId())));
                 if (group != null) {
                     deviceTrips.setGroupName(group.getName());
                 }

File: src/main/java/org/traccar/reports/common/ReportUtils.java
Patch:
@@ -95,7 +95,7 @@ public <T extends BaseModel> T getObject(
         return storage.getObject(clazz, new Request(
                 new Columns.All(),
                 new Condition.And(
-                        new Condition.Equals("id", "id", objectId),
+                        new Condition.Equals("id", objectId),
                         new Condition.Permission(User.class, userId, clazz))));
     }
 
@@ -166,7 +166,7 @@ public String findDriverName(String driverUniqueId) throws StorageException {
         if (driverUniqueId != null) {
             Driver driver = storage.getObject(Driver.class, new Request(
                     new Columns.All(),
-                    new Condition.Equals("uniqueId", "uniqueId", driverUniqueId)));
+                    new Condition.Equals("uniqueId", driverUniqueId)));
             if (driver != null) {
                 return driver.getName();
             }

File: src/main/java/org/traccar/session/ConnectionManager.java
Patch:
@@ -215,7 +215,7 @@ public void updateDevice(long deviceId, String status, Date time) {
         if (device == null) {
             try {
                 device = storage.getObject(Device.class, new Request(
-                        new Columns.All(), new Condition.Equals("id", "id", deviceId)));
+                        new Columns.All(), new Condition.Equals("id", deviceId)));
             } catch (StorageException e) {
                 LOGGER.warn("Failed to get device", e);
             }
@@ -265,7 +265,7 @@ public void updateDevice(long deviceId, String status, Date time) {
         try {
             storage.updateObject(device, new Request(
                     new Columns.Include("status", "lastUpdate"),
-                    new Condition.Equals("id", "id")));
+                    new Condition.Equals("id", deviceId)));
         } catch (StorageException e) {
             LOGGER.warn("Update device status error", e);
         }

File: src/main/java/org/traccar/storage/query/Columns.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.traccar.storage.QueryIgnore;
 
+import java.beans.Introspector;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.LinkedList;
@@ -36,7 +37,7 @@ protected List<String> getAllColumns(Class<?> clazz, String type) {
             if (method.getName().startsWith(type) && method.getParameterTypes().length == parameterCount
                     && !method.isAnnotationPresent(QueryIgnore.class)
                     && !method.getName().equals("getClass")) {
-                columns.add(method.getName().substring(3).toLowerCase());
+                columns.add(Introspector.decapitalize(method.getName().substring(3)));
             }
         }
         return columns;

File: src/main/java/org/traccar/api/resource/AttributeResource.java
Patch:
@@ -29,7 +29,6 @@
 import javax.ws.rs.core.Response;
 
 import org.traccar.api.ExtendedObjectResource;
-import org.traccar.config.Config;
 import org.traccar.model.Attribute;
 import org.traccar.model.Device;
 import org.traccar.model.Position;
@@ -45,7 +44,7 @@
 public class AttributeResource extends ExtendedObjectResource<Attribute> {
 
     @Inject
-    private Config config;
+    private ComputedAttributesHandler computedAttributesHandler;
 
     public AttributeResource() {
         super(Attribute.class);
@@ -61,7 +60,7 @@ public Response test(@QueryParam("deviceId") long deviceId, Attribute entity) th
                 new Columns.All(),
                 new Condition.LatestPositions(deviceId)));
 
-        Object result = new ComputedAttributesHandler(config, null).computeAttribute(entity, position);
+        Object result = computedAttributesHandler.computeAttribute(entity, position);
         if (result != null) {
             switch (entity.getType()) {
                 case "number":

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -165,8 +165,8 @@ private String decodeId(ByteBuf id) {
         if (serial.matches("[0-9]+")) {
             return serial;
         } else {
-            long imei = id.readUnsignedShort();
-            imei = (imei << 32) + id.readUnsignedInt();
+            long imei = id.getUnsignedShort(0);
+            imei = (imei << 32) + id.getUnsignedInt(2);
             return String.valueOf(imei);
         }
     }

File: src/test/java/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "000F313233343536373839303132333435"));
 
+        verifyPositions(decoder, binary(
+                "00000000000000a28e0100000183ac617e3001123eb99b1e142db4000000000000000000001d000900f000005000001503004500011e1801212d01242a012722012a18001100b5000000b600000018000000cd151000431c2d011f6981012047d701226981012347d901256981012647d8012869810129e6f304b0000304b1000304b2000304b30003000100f10000639d0002000b0000000214bf12fe000e0000000029d18c95000001000051b6"));
+
         verifyPositions(decoder, binary(
                 "00000000000004258e0400000182a701b49301d5d90ab7ebe4aae101be003d12000000f7003d000e00f70100ef0000f00000500500150200c800004501000100001d00001400001600001700007157010701001d00b5000b00b60006004230400018000000cd223f00ce741700430f8900440000000d00010011ffe50012001f0013ffce000f03e800190bb8001a0bb8001b0bb8001c0bb800560bb800680bb8006a0bb8006c0bb8010e0000011100000114000001170000014f0000015000000151000001520000000a00f100011d2a00c700000000001000b9addc000c0000acb600040000000001320000000001330000000001340000000001350000000001c1000000000003000b000000d14675f36000ee0000000000000000000e0000000003fd509f0005014b0000014c0000014d0000014e0000018300222d3333373333382e0100000053a6fb624588040001ba86064f0eae51c0fdaf4d3de500000182a701b82001d5d90ab7ebe4aae101be003d12000000f0003c000d00ef0000f00100500500150200c800004501000100001d00001400001600001700007152010701001d00b5000900b60006004217e50018000000cd223f00ce741700430f5c00440000000d00010011fed60012fd1d0013f1f2000f03e800190bb8001a0bb8001b0bb8001c0bb800560bb800680bb8006a0bb8006c0bb8010e0000011100000114000001170000014f0000015000000151000001520000000a00f100011d2a00c700000000001000b9addc000c0000acb600040000000001320000000001330000000001340000000001350000000001c1000000000003000b000000d14675f36000ee0000000000000000000e0000000003fd509f0005014b0000014c0000014d0000014e0000018300222d3333373333352e353833332d303730373139362e323333332b3030302e3434362f00000182a701bc0801d5d90ab7ebe4aae101be003d12000000fc003d000e00ef0000f00100500500150200c800004501000100001d0000140000160000170000714d01070100fc01001d00b5000900b60006004217e50018000000cd223f00ce741700430f5c00440000000d00010011fed60012fd1d0013f1f2000f03e800190bb8001a0bb8001b0bb8001c0bb800560bb800680bb8006a0bb8006c0bb8010e0000011100000114000001170000014f0000015000000151000001520000000a00f100011d2a00c700000000001000b9addc000c0000acb600040000000001320000000001330000000001340000000001350000000001c1000000000003000b000000d14675f36000ee0000000000000000000e0000000003fd509f0005014b0000014c0000014d0000014e0000018300222d3333373333352e353833332d303730373139362e323333332b3030302e3434362f00000182a7018d8d01d5d8ffa6ebe4a0ca01be006111000000f70001000100f70500000000000000000400003a10"));
 

File: src/main/java/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -160,6 +160,9 @@ private void decodeObd(Position position, ByteBuf buf, boolean groups) {
 
         for (int i = 0; i < count; i++) {
             int value;
+            if (!PID_LENGTH_MAP.containsKey(pids[i])) {
+                throw new RuntimeException(String.format("Unknown PID 0x%02x", pids[i]));
+            }
             switch (PID_LENGTH_MAP.get(pids[i])) {
                 case 1:
                     value = buf.readUnsignedByte();

File: src/main/java/org/traccar/api/security/PermissionsService.java
Patch:
@@ -170,8 +170,10 @@ public void checkUserUpdate(long userId, User before, User after) throws Storage
                 || before.getFixedEmail() != after.getFixedEmail()) {
             if (userId == after.getId()) {
                 checkAdmin(userId);
-            } else {
+            } else if (after.getId() > 0) {
                 checkUser(userId, after.getId());
+            } else {
+                checkManager(userId);
             }
         }
         if (before.getFixedEmail() && !before.getEmail().equals(after.getEmail())) {

File: src/main/java/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -178,7 +178,7 @@ protected Object decode(
             }
 
             /* TODO: use keys for flags in 'positions'. */
-            String message = payloadParts[2].substring(8).replaceFirst("[A-Z]* KEY; ", "");
+            String message = payloadParts[2].substring(8).replaceFirst("[a-zA-Z! ]*; ", "");
             /* LOGGER.info("Phone number: " + phoneNumber); */
             /* LOGGER.info("Message: " + message); */
 
@@ -210,7 +210,7 @@ protected Object decode(
                 /* Parsing other fields */
                 /* String gsmInfo = messageParts[1]; */
                 /* String unknown = messageParts[2]; */
-                String batteryInfo = messageParts[3].substring(7).substring(0, 3);
+                String batteryInfo = messageParts[messageParts.length - 1].substring(7).substring(0, 3);
                 /* LOGGER.info("Battery: " + batteryInfo); */
 
                 /* Constructing response */
@@ -231,7 +231,7 @@ protected Object decode(
 
                 return position;
             } else {
-                LOGGER.info("Unsupported message");
+                LOGGER.error("Unsupported message");
             }
         }
 

File: src/main/java/org/traccar/notification/PropertiesProvider.java
Patch:
@@ -37,7 +37,8 @@ public String getString(ConfigKey<String> key) {
         if (config != null) {
             return config.getString(key);
         } else {
-            return extendedModel.getString(key.getKey());
+            String result = extendedModel.getString(key.getKey());
+            return result != null ? result : key.getDefaultValue();
         }
     }
 

File: src/main/java/org/traccar/reports/common/ReportUtils.java
Patch:
@@ -93,7 +93,7 @@ public ReportUtils(
     public <T extends BaseModel> T getObject(
             long userId, Class<T> clazz, long objectId) throws StorageException, SecurityException {
         return storage.getObject(clazz, new Request(
-                new Columns.Include("id"),
+                new Columns.All(),
                 new Condition.And(
                         new Condition.Equals("id", "id", objectId),
                         new Condition.Permission(User.class, userId, clazz))));

File: src/main/java/org/traccar/helper/PatternUtil.java
Patch:
@@ -63,7 +63,7 @@ public static MatchResult checkPattern(String pattern, String input) {
 
         for (int i = 0; i < pattern.length(); i++) {
             try {
-                Matcher matcher = Pattern.compile("(" + pattern.substring(0, i) + ").*").matcher(input);
+                Matcher matcher = Pattern.compile("(" + pattern.substring(0, i) + ")[\\s\\S]*").matcher(input);
                 if (matcher.matches()) {
                     result.patternMatch = pattern.substring(0, i);
                     result.patternTail = pattern.substring(i);

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -244,7 +244,7 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
                 p.set(Position.KEY_DRIVER_UNIQUE_ID, String.format("%016X", driverUniqueId));
             }
         });
-        register(80, null, (p, b) -> p.set("dataMode", b.readUnsignedByte()));
+        register(80, fmbXXX, (p, b) -> p.set("dataMode", b.readUnsignedByte()));
         register(90, null, (p, b) -> p.set(Position.KEY_DOOR, b.readUnsignedShort()));
         register(115, fmbXXX, (p, b) -> p.set(Position.KEY_COOLANT_TEMP, b.readShort() * 0.1));
         register(179, null, (p, b) -> p.set(Position.PREFIX_OUT + 1, b.readUnsignedByte() > 0));

File: src/test/java/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "000F313233343536373839303132333435"));
 
+        verifyPositions(decoder, binary(
+                "00000000000003831004000001735ace37f80000e3b9331c71e290006900e211005100fd072e1600010100160300470300f00100150400b20000c80000ef01009000004f00005101005201005300005538006e00006f00007a03007d00007f5600890000fd0200fe1f09004326b00044000000b5000b00b6000600427029001800540046015d00ce4ec10080000f0f00f10000515400cd007404ab00d80f5022a1005000000054005400000000005600015568005700000060005800000420006800001113006d303330300071fffd8c85008700000020008800000002008a000155f5008b0000b86000000001735ace3ca80000e3b08a1c71dd29006900e311005100fd072e1600010100160300470300f00100150400b20000c80000ef01009000004f00005101005201005300005537006e00006f00007a03007d00007f5600890000fd0200fe1d09004326ac0044000000b5000b00b600060042701f001800540046015d00ce4ec10080000f0f00f10000515400cd007404ab00d80f5022ce00500000005400540000000000560001556800570000006000580000041f006800001113006d303330300071fffd8c85008700000020008800000002008a000155f5008b0000b86000000001735ace3fc80000e3a7c01c71d7c2006900e311005100fd072e1600010100160300470300f00100150400b20000c80000ef01009000004f00005101005201005300005537006e00006f00007a03007d00007f5600890000fd0200fe2309004326ac0044000000b5000b00b6000600427015001800540046015e00ce4ec10080000f0f00f10000515400cd007404ab00d80f5022e700500000005400540000000000560001556800570000006000580000041f006800001113006d303330300071fffd8c85008700000020008800000002008a000155f5008b0000b86000000001735ace3ffa0000e3a7c01c71d7c2006900e311005100fd072e1600010100160300470300f00100150400b20000c80000ef01009000004f00005101005201005300005537006e00006f00007a03007d00007f5600890000fd0300fe2309004326ac0044000000b5000b00b6000600427015001800540046015e00ce4ec10080000f0f00f10000515400cd007404ab00d80f5022e700500000005400540000000000560001556800570000006000580000041f006800001113006d303330300071fffd8c85008700000020008800000002008a000155f5008b0000b86000040000eb85"));
+
         verifyPositions(decoder, binary(
                 "00000000000000e708030000018293d62060000de1f6a62159767e00000000000000000b074504f00050041500c801ef004f630342320043000344000001f100006019000000018291b0c790000de1f6a62159767e006e0144070000ef12074503f00050051505c800ef004f0207b5000eb6000b423324180000ce00dc43001144000004c700000007f100006019cd0003c7776300ea4e2e000000018291aff0b8000de1f91f21597405006f00f61300080012074503f00150051504c800ef014f0207b50009b600054236c1180008ce00dc43003f44000004c700000003f100006019cd0003c7776300ea4e2700030000a48d"));
 

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -253,8 +253,8 @@ private static void register(int id, Set<String> models, BiConsumer<Position, By
         register(182, null, (p, b) -> p.set(Position.KEY_HDOP, b.readUnsignedShort() * 0.1));
         register(199, null, (p, b) -> p.set(Position.KEY_ODOMETER_TRIP, b.readUnsignedInt()));
         register(200, fmbXXX, (p, b) -> p.set("sleepMode", b.readUnsignedByte()));
-        register(205, null, (p, b) -> p.set("cid", b.readUnsignedShort()));
-        register(206, null, (p, b) -> p.set("lac", b.readUnsignedShort()));
+        register(205, fmbXXX, (p, b) -> p.set("cid", b.readUnsignedShort()));
+        register(206, fmbXXX, (p, b) -> p.set("lac", b.readUnsignedShort()));
         register(236, null, (p, b) -> {
             p.set(Position.KEY_ALARM, b.readUnsignedByte() > 0 ? Position.ALARM_GENERAL : null);
         });

File: src/test/java/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "000F313233343536373839303132333435"));
 
+        verifyPositions(decoder, binary(
+                "00000000000000e708030000018293d62060000de1f6a62159767e00000000000000000b074504f00050041500c801ef004f630342320043000344000001f100006019000000018291b0c790000de1f6a62159767e006e0144070000ef12074503f00050051505c800ef004f0207b5000eb6000b423324180000ce00dc43001144000004c700000007f100006019cd0003c7776300ea4e2e000000018291aff0b8000de1f91f21597405006f00f61300080012074503f00150051504c800ef014f0207b50009b600054236c1180008ce00dc43003f44000004c700000003f100006019cd0003c7776300ea4e2700030000a48d"));
+
         verifyPositions(decoder, binary(
                 "00000000000000da08030000017fcedf499600280431be0eded45d0038012d100000fa100901000200b300b4004501500415034702fa00054232a1180000cd3b2fce281d43001f02c700000006f10000a029000000017fcedea99600280432070eded3dd00380046130009000f0801010200b300b400450150051502470205423276180009cd3b2fce281d43001f02c700000027f10000a0290000000179d50853180027f65d3f0ed67212001500f1110061000f0801010200b300b4004501500515034702054234f4180061cd53d1ce28c043003e02c700000147f1000000290003000052cb"));
 

File: src/main/java/org/traccar/protocol/IotmProtocolDecoder.java
Patch:
@@ -260,7 +260,7 @@ protected Object decode(
             MqttSubscribeMessage message = (MqttSubscribeMessage) msg;
 
             MqttMessage response = MqttMessageBuilders.subAck()
-                    .packetId((short) message.variableHeader().messageId())
+                    .packetId(message.variableHeader().messageId())
                     .build();
 
             if (channel != null) {

File: src/main/java/org/traccar/protocol/IotmProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 - 2021 Anton Tananaev (anton@traccar.org)
+ * Copyright 2020 - 2022 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -339,7 +339,7 @@ protected Object decode(
             buf.readUnsignedByte(); // checksum
 
             MqttMessage response = MqttMessageBuilders.pubAck()
-                    .packetId((short) message.variableHeader().packetId())
+                    .packetId(message.variableHeader().packetId())
                     .build();
 
             if (channel != null) {

File: src/main/java/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -44,7 +44,7 @@ private ByteBuf encodeContent(long deviceId, String content) {
 
         buf.writeByte(1 + 1 + 4 + content.length() + 2 + 2 + (language ? 2 : 0)); // message length
 
-        buf.writeByte(0x80); // message type
+        buf.writeByte(Gt06ProtocolDecoder.MSG_COMMAND_0);
 
         buf.writeByte(4 + content.length()); // command length
         buf.writeInt(0);

File: src/main/java/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -262,7 +262,7 @@ private Position decodeIridiumPosition(Channel channel, SocketAddress remoteAddr
         buf.skipBytes(4); // reserved
         position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
 
-        buf.skipBytes(3); // coordinates header
+        buf.skipBytes(2); // coordinates header
         int flags = buf.readUnsignedByte();
         double latitude = buf.readUnsignedByte() + buf.readUnsignedShortLE() / 60000.0;
         double longitude = buf.readUnsignedByte() + buf.readUnsignedShortLE() / 60000.0;

File: src/main/java/org/traccar/web/WebServer.java
Patch:
@@ -106,7 +106,8 @@ public WebServer(Injector injector, Config config) {
             protected void handleErrorPage(
                     HttpServletRequest request, Writer writer, int code, String message) throws IOException {
                 Path index = Paths.get(config.getString(Keys.WEB_PATH), "index.html");
-                if (code == HttpStatus.NOT_FOUND_404 && Files.exists(index)) {
+                if (code == HttpStatus.NOT_FOUND_404
+                        && !request.getPathInfo().startsWith("/api/") && Files.exists(index)) {
                     writer.write(Files.readString(index));
                 } else {
                     writer.write("<!DOCTYPE><html><head><title>Error</title></head><html><body>"

File: src/main/java/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -239,7 +239,7 @@ protected Object decode(
 
     private Object decodePositions(Channel channel, SocketAddress remoteAddress, ByteBuf buf) {
 
-        int length = (buf.readUnsignedShortLE() & 0x7fff) + 3;
+        int endIndex = (buf.readUnsignedShortLE() & 0x7fff) + buf.readerIndex();
 
         List<Position> positions = new LinkedList<>();
         Set<Integer> tags = new HashSet<>();
@@ -248,7 +248,7 @@ private Object decodePositions(Channel channel, SocketAddress remoteAddress, Byt
         DeviceSession deviceSession = null;
         Position position = new Position(getProtocolName());
 
-        while (buf.readerIndex() < length) {
+        while (buf.readerIndex() < endIndex) {
 
             int tag = buf.readUnsignedByte();
             if (tags.contains(tag)) {

File: src/test/java/org/traccar/protocol/UproProtocolDecoderTest.java
Patch:
@@ -53,7 +53,7 @@ public void testDecode() throws Exception {
 
         verifyPosition(decoder, buffer(
                 "*MG201693502000034964,AB&A0800253335360507036975710000091116&P0730000032d2a94d&B0000000000&N13&Z12&U_P\0\0\0\u0004\0\0\0\0\0\0\0\0\0\0"),
-                position("2016-11-09 08:00:25.000", true, -33.58934, -70.61626));
+                position("2016-11-09 08:00:25.000", false, -33.58934, -70.61626));
 
         verifyNull(decoder, buffer(
                 "*MG20113800138000,AH"));
@@ -69,7 +69,7 @@ public void testDecode() throws Exception {
 
         verifyPosition(decoder, buffer(
                 "*AI200905300036,AH&A0317264913209801844913060000251115&B0500000000&C0;4?72:9&F0000"),
-                position("2015-11-25 03:17:26.000", false, 49.22016, 18.74855));
+                position("2015-11-25 03:17:26.000", true, 49.22016, 18.74855));
 
         verifyPosition(decoder, buffer(
                 "*AI2000905300036,AS&A1647304913209801844913060000251115&B0400000000&C0;4?72:9&F0000"));

File: src/main/java/org/traccar/protocol/UproProtocolDecoder.java
Patch:
@@ -71,7 +71,7 @@ private void decodeLocation(Position position, String data) {
             position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
 
             int flags = parser.nextInt(0);
-            position.setValid(BitUtil.check(flags, 0));
+            position.setValid(!BitUtil.check(flags, 0));
             if (!BitUtil.check(flags, 1)) {
                 position.setLatitude(-position.getLatitude());
             }

File: src/main/java/org/traccar/notificators/NotificatorPushover.java
Patch:
@@ -64,7 +64,7 @@ public void send(User user, Event event, Position position) {
 
         Message message = new Message();
         message.token = token;
-        
+
         message.user = user.getString("pushoverUserKey");
         if (message.user == null) {
             message.user = this.user;

File: src/main/java/org/traccar/api/resource/UserResource.java
Patch:
@@ -54,8 +54,8 @@ public UserResource() {
 
     @GET
     public Collection<User> get(@QueryParam("userId") long userId) throws StorageException {
-        permissionsService.checkUser(getUserId(), userId);
         if (userId > 0) {
+            permissionsService.checkUser(getUserId(), userId);
             return storage.getObjects(baseClass, new Request(
                     new Columns.All(),
                     new Condition.Permission(User.class, userId, ManagedUser.class).excludeGroups()));

File: src/main/java/org/traccar/notificators/NotificatorTraccar.java
Patch:
@@ -55,7 +55,7 @@ public static class Message {
     public NotificatorTraccar(Config config, NotificationFormatter notificationFormatter, Client client) {
         this.notificationFormatter = notificationFormatter;
         this.client = client;
-        this.url = "http://localhost:3001/push/";
+        this.url = "https://www.traccar.org/push/";
         this.key = config.getString(Keys.NOTIFICATOR_TRACCAR_KEY);
     }
 

File: src/main/java/org/traccar/BasePipelineFactory.java
Patch:
@@ -49,6 +49,7 @@
 import org.traccar.handler.events.GeofenceEventHandler;
 import org.traccar.handler.events.IgnitionEventHandler;
 import org.traccar.handler.events.MaintenanceEventHandler;
+import org.traccar.handler.events.MediaEventHandler;
 import org.traccar.handler.events.MotionEventHandler;
 import org.traccar.handler.events.OverspeedEventHandler;
 
@@ -141,6 +142,7 @@ protected void initChannel(Channel channel) {
                 ComputedAttributesHandler.class,
                 WebDataHandler.class,
                 DefaultDataHandler.class,
+                MediaEventHandler.class,
                 CommandResultEventHandler.class,
                 OverspeedEventHandler.class,
                 BehaviorEventHandler.class,

File: src/main/java/org/traccar/handler/events/BaseEventHandler.java
Patch:
@@ -36,7 +36,7 @@ public void setNotificationManager(NotificationManager notificationManager) {
     @Override
     protected Position handlePosition(Position position) {
         Map<Event, Position> events = analyzePosition(position);
-        if (events != null) {
+        if (events != null && !events.isEmpty()) {
             notificationManager.updateEvents(events);
         }
         return position;

File: src/main/java/org/traccar/model/Event.java
Patch:
@@ -62,10 +62,9 @@ public Event() {
     public static final String TYPE_IGNITION_OFF = "ignitionOff";
 
     public static final String TYPE_MAINTENANCE = "maintenance";
-
     public static final String TYPE_TEXT_MESSAGE = "textMessage";
-
     public static final String TYPE_DRIVER_CHANGED = "driverChanged";
+    public static final String TYPE_MEDIA = "media";
 
     private Date eventTime;
 

File: src/main/java/org/traccar/model/UserRestrictions.java
Patch:
@@ -20,4 +20,5 @@ public interface UserRestrictions {
     boolean getDeviceReadonly();
     boolean getLimitCommands();
     boolean getDisableReports();
+    boolean getFixedEmail();
 }

File: src/test/java/org/traccar/protocol/C2stekProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = inject(new C2stekProtocolDecoder(null));
 
+        verifyPosition(decoder, text(
+                "PA$012207006145046$D#190607#123157#1#37.947087#023.768669#000.00#314.6#00000.0#4104#000#8$AP"));
+
         verifyPosition(decoder, text(
                 "PA$867965024889327$D#220222#135059#0#+37.98995#+23.85141#0.00#69.2#0.0#0000#000#8#00#sz-w1001#B2600$AP"));
 

File: src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
Patch:
@@ -205,7 +205,8 @@ protected Object decode(
         if (parser.hasNext()) {
             position.setValid(parser.nextInt() == 1);
         }
-        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
+        position.setTime(parser.nextDateTime(
+                Parser.DateTimeFormat.DMY_HMS, getTimeZone(deviceSession.getDeviceId()).getID()));
         if (parser.hasNext()) {
             position.setValid(parser.next().matches("[1A]"));
         }

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -256,9 +256,10 @@ public static SpeedLimitProvider provideSpeedLimitProvider(Config config, Client
 
     @Provides
     public static GeolocationHandler provideGeolocationHandler(
-            Config config, @Nullable GeolocationProvider geolocationProvider, StatisticsManager statisticsManager) {
+            Config config, @Nullable GeolocationProvider geolocationProvider, CacheManager cacheManager,
+            StatisticsManager statisticsManager) {
         if (geolocationProvider != null) {
-            return new GeolocationHandler(config, geolocationProvider, statisticsManager);
+            return new GeolocationHandler(config, geolocationProvider, cacheManager, statisticsManager);
         }
         return null;
     }

File: src/main/java/org/traccar/api/BaseObjectResource.java
Patch:
@@ -71,8 +71,8 @@ public Response add(T entity) throws StorageException {
         entity.setId(storage.addObject(entity, new Request(new Columns.Exclude("id"))));
         LogAction.create(getUserId(), entity);
         storage.addPermission(new Permission(User.class, getUserId(), baseClass, entity.getId()));
-        cacheManager.invalidatePermission(User.class, getUserId(), baseClass, entity.getId());
-        connectionManager.invalidatePermission(User.class, getUserId(), baseClass, entity.getId());
+        cacheManager.invalidatePermission(true, User.class, getUserId(), baseClass, entity.getId());
+        connectionManager.invalidatePermission(true, User.class, getUserId(), baseClass, entity.getId());
         LogAction.link(getUserId(), User.class, getUserId(), baseClass, entity.getId());
 
         return Response.ok(entity).build();
@@ -98,7 +98,7 @@ public Response update(T entity) throws StorageException {
         storage.updateObject(entity, new Request(
                 new Columns.Exclude("id"),
                 new Condition.Equals("id", "id")));
-        cacheManager.updateOrInvalidate(entity);
+        cacheManager.updateOrInvalidate(true, entity);
         LogAction.edit(getUserId(), entity);
 
         return Response.ok(entity).build();

File: src/main/java/org/traccar/api/resource/PermissionsResource.java
Patch:
@@ -72,6 +72,7 @@ public Response add(List<LinkedHashMap<String, Long>> entities) throws StorageEx
             checkPermission(permission);
             storage.addPermission(permission);
             cacheManager.invalidatePermission(
+                    true,
                     permission.getOwnerClass(), permission.getOwnerId(),
                     permission.getPropertyClass(), permission.getPropertyId());
             LogAction.link(getUserId(),
@@ -96,6 +97,7 @@ public Response remove(List<LinkedHashMap<String, Long>> entities) throws Storag
             checkPermission(permission);
             storage.removePermission(permission);
             cacheManager.invalidatePermission(
+                    true,
                     permission.getOwnerClass(), permission.getOwnerId(),
                     permission.getPropertyClass(), permission.getPropertyId());
             LogAction.unlink(getUserId(),

File: src/main/java/org/traccar/api/resource/ServerResource.java
Patch:
@@ -77,7 +77,7 @@ public Response update(Server entity) throws StorageException {
         storage.updateObject(entity, new Request(
                 new Columns.Exclude("id"),
                 new Condition.Equals("id", "id")));
-        cacheManager.updateOrInvalidate(entity);
+        cacheManager.updateOrInvalidate(true, entity);
         LogAction.edit(getUserId(), entity);
         return Response.ok(entity).build();
     }

File: src/main/java/org/traccar/broadcast/BroadcastInterface.java
Patch:
@@ -31,10 +31,11 @@ default void updatePosition(boolean local, Position position) {
     default void updateEvent(boolean local, long userId, Event event) {
     }
 
-    default void invalidateObject(Class<? extends BaseModel> clazz, long id) {
+    default void invalidateObject(boolean local, Class<? extends BaseModel> clazz, long id) {
     }
 
     default void invalidatePermission(
+            boolean local,
             Class<? extends BaseModel> clazz1, long id1,
             Class<? extends BaseModel> clazz2, long id2) {
     }

File: src/main/java/org/traccar/session/ConnectionManager.java
Patch:
@@ -364,6 +364,7 @@ public synchronized void updateEvent(boolean local, long userId, Event event) {
 
     @Override
     public synchronized void invalidatePermission(
+            boolean local,
             Class<? extends BaseModel> clazz1, long id1,
             Class<? extends BaseModel> clazz2, long id2) {
         if (clazz1.equals(User.class) && clazz2.equals(Device.class)) {

File: src/main/java/org/traccar/model/Device.java
Patch:
@@ -17,6 +17,7 @@
 
 import java.util.Date;
 import java.util.List;
+import java.util.stream.Collectors;
 
 import org.traccar.storage.QueryIgnore;
 import org.traccar.storage.StorageName;
@@ -89,8 +90,8 @@ public List<Long> getGeofenceIds() {
     }
 
     @QueryIgnore
-    public void setGeofenceIds(List<Long> geofenceIds) {
-        this.geofenceIds = geofenceIds;
+    public void setGeofenceIds(List<? extends Number> geofenceIds) {
+        this.geofenceIds = geofenceIds.stream().map(Number::longValue).collect(Collectors.toList());
     }
 
     private String phone;

File: src/main/java/org/traccar/model/Device.java
Patch:
@@ -50,14 +50,13 @@ public void setUniqueId(String uniqueId) {
 
     private String status;
 
-    @QueryIgnore
     public String getStatus() {
         return status != null ? status : STATUS_OFFLINE;
     }
 
     @QueryIgnore
     public void setStatus(String status) {
-        this.status = status;
+        this.status = status.trim();
     }
 
     private Date lastUpdate;
@@ -85,7 +84,6 @@ public void setPositionId(long positionId) {
 
     private List<Long> geofenceIds;
 
-    @QueryIgnore
     public List<Long> getGeofenceIds() {
         return geofenceIds;
     }

File: src/main/java/org/traccar/database/NotificationManager.java
Patch:
@@ -98,7 +98,7 @@ private void updateEvent(Event event, Position position) {
             }
 
             notifications.forEach(notification -> {
-                cacheManager.getNotificationUsers(notification.getId()).forEach(user -> {
+                cacheManager.getNotificationUsers(notification.getId(), event.getDeviceId()).forEach(user -> {
                     for (String notificator : notification.getNotificatorsTypes()) {
                         try {
                             notificatorManager.getNotificator(notificator).send(user, event, position);

File: src/main/java/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 - 2020 Anton Tananaev (anton@traccar.org)
+ * Copyright 2013 - 2022 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -213,7 +213,6 @@ private void decodeTagOther(Position position, ByteBuf buf, int tag) {
                         buf.readSlice(buf.readUnsignedByte()).toString(StandardCharsets.US_ASCII));
                 break;
             case 0xea:
-                position.set("userDataArray", ByteBufUtil.hexDump(buf.readSlice(buf.readUnsignedByte())));
                 position.set("userDataArray", ByteBufUtil.hexDump(buf.readSlice(buf.readUnsignedByte())));
                 break;
             default:

File: src/test/java/org/traccar/protocol/GalileoProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyPositions(decoder, binary(
                 "011801018202130338363833343530333230343234323604640010a406207caa9f5b300c830a7901ca0ec802330000000034b802350540003e41703f422b1043234504004600e09000000000a000a100a200a300a400a500a600a700a800a900aa00ab00ac00ad00ae00af00b00000b10000b20000b30000b40000b50000b60000b70000b80000b90000c000000000c100000000c200000000c300000000c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00d000d100d200d4d3140000d60000d70000d80000d90000da0000db00000000dc00000000dd00000000de00000000df00000000f000000000f100000000f200000000f300000000f400000000f500000000f600000000f700000000f800000000f9000000008960"));
 
+        verifyPositions(decoder, binary(
+                "01bf83043200101ee4209832bc62300549589302511aaa013300002e00342e02350440003b41b15d42d50e4326450e0046040050000051000052fc5c5300006100008b009000000000d400000000e201000000e376000000e4efce0100e53b590200e600000000e773000000e800000000e9a002d007ea140000d6021b00f8430220ac760000000000000000043200101de4201232bc62300549589302511aaa013300002e00342e02350440012b41b55d42d40e4326450e0046040050000051000052145d5300006100008b009000000000d400000000e201000000e376000000e4efce0100e53b590200e600000000e773000000e800000000e9a002d007ea140000d6021b00f8430220ac760000000000000000043200101ce4208e2ebc62300549589302511aaa013300002e00342e02350440013b41a95d42cd0e4325450f0046040050000051000052235d5300006100008b009000000000d400000000e201000000e376000000e4efce0100e53b590200e600000000e773000000e802000000e9a002d007ea140000d6021b00f8430220ac760000000000000000043200101be4208b2ebc62300549589302511aaa013300002e00342e02350440013b41a45d42cd0e432545090046040050000051000052115d5300006100008b009000000000d400000000e201000000e375000000e48ac90100e53a590200e673000000e773000000e806000000e9a002d007ea140000d6021b00f8430220ac760000000000000000043200101ae420642ebc62300549589302511aaa013300002e00342e02350440013b419f5d42cd0e4324450b00460600500000519313521c5d5300006100008b009000000000d400000000e201000000e300000000e406000000e5c5580200e673000000e700000000e801000000e9a002d007ea140000d6021b00f8430220ac7600000000000000000432001019e420632ebc62300549589302511aaa013300002e00342e02350440013b41725d42cd0e4324450b0046060050000051ab1352035d5300006100008b009000000000d400000000e201000000e300000000e406000000e5c5580200e673000000e700000000e8d6021b00e9a002d007ea140000d6021b00f8430220ac7600000000000000000432001018e4205c2ebc62300549589302511aaa013300002e00342e02350440013b41955d42cd0e4324450a00460400500000510000520b5d5300006100008b009000000000d400000000e201000000e30d000000e4a4350000e5c5580200e600000000e700000000e8d6021b00e9a002d007ea140000d6021b00f8430220ac76000000000000000099f3"));
+
         verifyPositions(decoder, binary(
                 "017583018202120338363833343530333230363635373304520010384520c850975b300cc03a910107cbf9023365000607341300350640012a41236a4215104329450400460020500000510000520000530000540000550000c000000000c100000000c44bc500c6ffc700c800c900ca00cb00d4993b0500d64100d70000d8be02d90000da0000db00000000dc00000000dd00000000de00000000df00000000f000000000f100000000f200000000f300000000018202120338363833343530333230363635373304520010394520c950975b300cab3a91010ecbf902336000be06341300350640012a41266a4216104329450400460020500000510000520000530000540000550000c000000000c100000000c44bc500c6ffc700c800c900ca00cb00d49b3b0500d64100d70000d8bc02d90000da0000db00000000dc00000000dd00000000de00000000df00000000f000000000f100000000f200000000f3000000000182021203383638333435303332303636353733045200103a4520ca50975b300c953a910113cbf9023358008f06341300350640012a41206a4215104329450400460020500000510000520000530000540000550000c000000000c100000000c44bc500c6ffc700c800c900ca00cb00d49e3b0500d64100d70000d8ba02d90000da0000db00000000dc00000000dd00000000de00000000df00000000f000000000f100000000f200000000f3000000000182021203383638333435303332303636353733045200103b45204251975b300c6d3a91011dcbf9023300008a06341300350640013a41726a4216104329450400460020500000510000520000530000540000550000c000000000c100000000c44bc500c6ffc700c800c900ca00cb00d4a33b0500d64800d70000d80003d90000da0000db00000000dc00000000dd00000000de00000000df00000000f000000000f100000000f200000000f3000000000182021203383638333435303332303636353733045200103c4520bb51975b300c6d3a91011dcbf9023300008a06341300350640013a41816a4216104329450400460020500000510000520000530000540000550000c000000000c100000000c44bc500c6ffc700c800c900ca00cb00d4a33b0500d64800d70000d80003d90000da0000db00000000dc00000000dd00000000de00000000df00000000f000000000f100000000f200000000f300000000e007"));
 

File: src/test/java/org/traccar/reports/ReportUtilsTest.java
Patch:
@@ -57,6 +57,7 @@ private Position position(String time, double speed, double totalDistance) throw
         position.setTime(date(time));
         position.setValid(true);
         position.setSpeed(speed);
+        position.set(Position.KEY_MOTION, speed > 0);
         position.set(Position.KEY_TOTAL_DISTANCE, totalDistance);
 
         return position;

File: src/main/java/org/traccar/model/Position.java
Patch:
@@ -150,7 +150,6 @@ public Position() {
 
     public Position(String protocol) {
         this.protocol = protocol;
-        this.serverTime = new Date();
     }
 
     private String protocol;

File: src/main/java/org/traccar/reports/KmlExportProvider.java
Patch:
@@ -39,7 +39,7 @@ public KmlExportProvider(Storage storage) {
         this.storage = storage;
     }
 
-    public void generateKml(
+    public void generate(
             OutputStream outputStream, long deviceId, Date from, Date to) throws StorageException {
 
         var device = storage.getObject(Device.class, new Request(

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -249,6 +249,7 @@ private void invalidateServer() throws StorageException {
     }
 
     private void invalidateUsers() throws StorageException {
+        notificationUsers.clear();
         Map<Long, User> users = new HashMap<>();
         storage.getObjects(User.class, new Request(new Columns.All()))
                 .forEach(user -> users.put(user.getId(), user));

File: src/test/java/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -142,6 +142,9 @@ public void testDecode() throws Exception {
 
         verifyPosition(decoder, buffer(
                 "[ZJ*014111001350304*0038*008a*UD,070318,021027,V,00.000000,N,000.000000,E,0,0,0,0,100,18,1000,50,00000000,4,255,460,0,9346,5223,42,9346,5214,20,9784,4083,11,9346,5221,5]"));
+        
+        verifyPosition(decoder, buffer(
+                "[3G*8800000015*00DD*UD,010120,025946,V,0.0,N,0.0,E,22.0,0,-1,0,100,98,0,0,00000000,0,5,eduroam,f4:db:e6:d2:a8:00,-53,eduroam,f4:db:e6:da:d0:80,-79,eduroam,78:0c:f0:24:f9:80,-82,Lions,b0:be:76:0a:05:9a,-82,tubs-guest,f4:db:e6:d2:a8:01,-53,0.0]"));
 
     }
 

File: src/main/java/org/traccar/api/security/PermissionsService.java
Patch:
@@ -102,8 +102,9 @@ public void checkEdit(long userId, Class<?> clazz, boolean addition) throws Stor
             if (getServer().getReadonly() || getUser(userId).getReadonly()) {
                 denied = true;
             } else if (clazz.equals(Device.class)) {
-                denied = getServer().getDeviceReadonly() || getUser(userId).getDeviceReadonly();
-                if (addition) {
+                denied = getServer().getDeviceReadonly() || getUser(userId).getDeviceReadonly()
+                        || addition && getUser(userId).getDeviceLimit() == 0;
+                if (addition && getUser(userId).getDeviceLimit() > 0) {
                     int deviceCount = storage.getObjects(Device.class, new Request(
                             new Columns.Include("id"),
                             new Condition.Permission(User.class, userId, Device.class))).size();

File: src/main/java/org/traccar/api/resource/UserResource.java
Patch:
@@ -72,8 +72,8 @@ public Collection<User> get(@QueryParam("userId") long userId) throws StorageExc
     @PermitAll
     @POST
     public Response add(User entity) throws StorageException {
-        User currentUser = permissionsService.getUser(getUserId());
-        if (permissionsService.notAdmin(getUserId())) {
+        User currentUser = getUserId() > 0 ? permissionsService.getUser(getUserId()) : null;
+        if (currentUser == null || !currentUser.getAdministrator()) {
             permissionsService.checkUserUpdate(getUserId(), new User(), entity);
             if (currentUser != null && currentUser.getUserLimit() != 0) {
                 int userLimit = currentUser.getUserLimit();

File: src/main/java/org/traccar/MainEventHandler.java
Patch:
@@ -92,8 +92,8 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) {
                             new Condition.Equals("id", "id")));
 
                     cacheManager.updatePosition(position);
-                    connectionManager.updatePosition(position);
-                    broadcastService.updatePosition(position);
+                    connectionManager.updatePosition(true, position);
+                    broadcastService.updatePosition(true, position);
                 }
             } catch (StorageException error) {
                 LOGGER.warn("Failed to update device", error);

File: src/main/java/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -137,8 +137,8 @@ public Response updateAccumulators(DeviceAccumulators entity) throws StorageExce
             try {
                 cacheManager.addDevice(position.getDeviceId());
                 cacheManager.updatePosition(position);
-                connectionManager.updatePosition(position);
-                broadcastService.updatePosition(position);
+                connectionManager.updatePosition(true, position);
+                broadcastService.updatePosition(true, position);
             } finally {
                 cacheManager.removeDevice(position.getDeviceId());
             }

File: src/main/java/org/traccar/broadcast/BroadcastInterface.java
Patch:
@@ -22,13 +22,13 @@
 
 public interface BroadcastInterface {
 
-    default void updateDevice(Device device) {
+    default void updateDevice(boolean local, Device device) {
     }
 
-    default void updatePosition(Position position) {
+    default void updatePosition(boolean local, Position position) {
     }
 
-    default void updateEvent(long userId, Event event) {
+    default void updateEvent(boolean local, long userId, Event event) {
     }
 
     default void invalidateObject(Class<? extends BaseModel> clazz, long id) {

File: src/main/java/org/traccar/handler/events/GeofenceEventHandler.java
Patch:
@@ -68,7 +68,7 @@ protected Map<Event, Position> analyzePosition(Position position) {
 
         device.setGeofenceIds(currentGeofences);
         if (!oldGeofences.isEmpty() || !newGeofences.isEmpty()) {
-            connectionManager.updateDevice(device);
+            connectionManager.updateDevice(true, device);
         }
 
         Map<Event, Position> events = new HashMap<>();

File: src/main/java/org/traccar/notificators/NotificatorWeb.java
Patch:
@@ -56,8 +56,8 @@ public void send(User user, Event event, Position position) {
         var message = notificationFormatter.formatMessage(user, event, position, "short");
         copy.set("message", message.getBody());
 
-        connectionManager.updateEvent(user.getId(), copy);
-        broadcastService.updateEvent(user.getId(), copy);
+        connectionManager.updateEvent(true, user.getId(), copy);
+        broadcastService.updateEvent(true, user.getId(), copy);
     }
 
 }

File: src/main/java/org/traccar/MainEventHandler.java
Patch:
@@ -89,8 +89,6 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) {
                             new Condition.Equals("id", "id")));
 
                     cacheManager.updatePosition(position);
-                    cacheManager.getObject(Device.class, position.getDeviceId()).setPositionId(position.getId());
-
                     connectionManager.updatePosition(position);
                 }
             } catch (StorageException error) {

File: src/main/java/org/traccar/database/LoginService.java
Patch:
@@ -52,7 +52,7 @@ public User login(String token) throws StorageException {
 
     public User login(String email, String password) throws StorageException {
         User user = storage.getObject(User.class, new Request(
-                new Columns.Include("id", "login", "hashedPassword", "salt"),
+                new Columns.All(),
                 new Condition.Or(
                         new Condition.Equals("email", "email", email.trim()),
                         new Condition.Equals("login", "email"))));

File: src/test/java/org/traccar/WebDataHandlerTest.java
Patch:
@@ -31,7 +31,7 @@ public void testFormatRequest() throws Exception {
         var cacheManager = mock(CacheManager.class);
         when(cacheManager.getObject(eq(Device.class), anyLong())).thenReturn(device);
 
-        WebDataHandler handler = new WebDataHandler(config, cacheManager, null, null);
+        WebDataHandler handler = new WebDataHandler(config, cacheManager, null, null, null);
 
         assertEquals(
                 "http://localhost/?fixTime=1451610123000&gprmc=$GPRMC,010203.000,A,2000.0000,N,03000.0000,E,0.00,0.00,010116,,*05&name=test",

File: src/main/java/org/traccar/config/KeyType.java
Patch:
@@ -16,7 +16,7 @@
 package org.traccar.config;
 
 public enum KeyType {
-    GLOBAL,
+    CONFIG,
     SERVER,
     USER,
     DEVICE,

File: src/main/java/org/traccar/session/ConnectionManager.java
Patch:
@@ -128,7 +128,7 @@ public DeviceSession getDeviceSession(
             if (oldSession != null) {
                 Endpoint oldEndpoint = new Endpoint(oldSession.getChannel(), oldSession.getRemoteAddress());
                 Map<String, DeviceSession> oldEndpointSessions = sessionsByEndpoint.get(oldEndpoint);
-                if (oldEndpointSessions.size() > 1) {
+                if (oldEndpointSessions != null && oldEndpointSessions.size() > 1) {
                     oldEndpointSessions.remove(device.getUniqueId());
                 } else {
                     sessionsByEndpoint.remove(oldEndpoint);

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -245,6 +245,7 @@ private void unsafeAddDevice(long deviceId) throws StorageException {
                 new Columns.All(), new Condition.Permission(User.class, Device.class, deviceId)));
         links.put(User.class, users.stream().map(BaseModel::getId).collect(Collectors.toList()));
         for (var user : users) {
+            addObject(deviceId, user);
             var notifications = storage.getObjects(Notification.class, new Request(
                     new Columns.All(), new Condition.Permission(User.class, user.getId(), Notification.class)));
             notifications.stream()

File: src/main/java/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -67,6 +67,9 @@ protected ByteBuf formatBinaryCommand(Channel channel, Command command, String t
             if (decoder != null) {
                 hasIndex = decoder.getHasIndex();
                 manufacturer = decoder.getManufacturer();
+                if (manufacturer.equals("3G")) {
+                    manufacturer = "SG";
+                }
             }
         }
 

File: src/main/java/org/traccar/database/CommandsManager.java
Patch:
@@ -72,7 +72,7 @@ public boolean sendCommand(Command command) throws Exception {
         long deviceId = command.getDeviceId();
         if (command.getTextChannel()) {
             Device device = storage.getObject(Device.class, new Request(
-                    new Columns.All(), new Condition.Equals("id", "id", deviceId)));
+                    new Columns.Include("positionId", "phone"), new Condition.Equals("id", "id", deviceId)));
             Position position = storage.getObject(Position.class, new Request(
                     new Columns.All(), new Condition.Equals("id", "id", device.getPositionId())));
             if (position != null) {

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -69,7 +69,8 @@ public CacheManager(Storage storage) throws StorageException {
     public <T extends BaseModel> T getObject(Class<T> clazz, long id) {
         try {
             lock.readLock().lock();
-            return deviceCache.get(new CacheKey(clazz, id)).getValue();
+            var cacheValue = deviceCache.get(new CacheKey(clazz, id));
+            return cacheValue != null ? cacheValue.getValue() : null;
         } finally {
             lock.readLock().unlock();
         }

File: src/main/java/org/traccar/api/resource/ReportResource.java
Patch:
@@ -143,7 +143,7 @@ public Collection<Event> getEvents(
             @QueryParam("from") Date from, @QueryParam("to") Date to) throws StorageException {
         permissionsService.checkRestriction(getUserId(), UserRestrictions::getDisableReports);
         LogAction.logReport(getUserId(), "events", from, to, deviceIds, groupIds);
-        return eventsReportProvider.getObjects(storage, getUserId(), deviceIds, groupIds, types, from, to);
+        return eventsReportProvider.getObjects(getUserId(), deviceIds, groupIds, types, from, to);
     }
 
     @Path("events")
@@ -157,7 +157,7 @@ public Response getEventsExcel(
         permissionsService.checkRestriction(getUserId(), UserRestrictions::getDisableReports);
         return executeReport(getUserId(), mail, stream -> {
             LogAction.logReport(getUserId(), "events", from, to, deviceIds, groupIds);
-            eventsReportProvider.getExcel(stream, storage, getUserId(), deviceIds, groupIds, types, from, to);
+            eventsReportProvider.getExcel(stream, getUserId(), deviceIds, groupIds, types, from, to);
         });
     }
 

File: src/main/java/org/traccar/session/cache/CacheManager.java
Patch:
@@ -154,7 +154,7 @@ private void invalidateUsers() throws StorageException {
         storage.getObjects(User.class, new Request(new Columns.All()))
                 .forEach(user -> users.put(user.getId(), user));
         storage.getPermissions(User.class, Notification.class).forEach(permission -> {
-            long notificationId = permission.getPropertyId();;
+            long notificationId = permission.getPropertyId();
             var user = users.get(permission.getOwnerId());
             notificationUsers.computeIfAbsent(notificationId, k -> new LinkedList<>()).add(user);
         });

File: src/main/java/org/traccar/storage/DatabaseStorage.java
Patch:
@@ -323,7 +323,6 @@ private String formatPermissionQuery(Condition.Permission condition) throws Stor
             result.append(" UNION ");
 
             result.append("SELECT DISTINCT ");
-            result.append(expandDevices ? "devices." : "all_groups."); // TODO handle reverse (e.g. users by device)
             result.append(outputKey);
             result.append(" FROM ");
             result.append(groupStorageName);

File: src/main/java/org/traccar/reports/ReportUtils.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 - 2020 Anton Tananaev (anton@traccar.org)
+ * Copyright 2016 - 2022 Anton Tananaev (anton@traccar.org)
  * Copyright 2016 - 2017 Andrey Kunitsyn (andrey@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -48,6 +48,7 @@
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Date;
+import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Locale;
 import java.util.Map;
@@ -83,7 +84,7 @@ public static TimeZone getTimezone(long userId) {
     }
 
     public static Collection<Long> getDeviceList(Collection<Long> deviceIds, Collection<Long> groupIds) {
-        Collection<Long> result = new ArrayList<>(deviceIds);
+        Collection<Long> result = new LinkedHashSet<>(deviceIds);
         for (long groupId : groupIds) {
             result.addAll(Context.getPermissionsManager().getGroupDevices(groupId));
         }

File: src/main/java/org/traccar/api/ExtendedObjectResource.java
Patch:
@@ -52,7 +52,7 @@ public Collection<T> get(
                 conditions.add(new Condition.Permission(User.class, getUserId(), baseClass));
             } else {
                 permissionsService.checkUser(getUserId(), userId);
-                conditions.add(new Condition.Permission(User.class, getUserId(), baseClass).excludeGroups());
+                conditions.add(new Condition.Permission(User.class, userId, baseClass).excludeGroups());
             }
         }
 

File: src/main/java/org/traccar/api/ExtendedObjectResource.java
Patch:
@@ -44,7 +44,9 @@ public Collection<T> get(
         var conditions = new LinkedList<Condition>();
 
         if (all) {
-            permissionsService.checkAdmin(getUserId());
+            if (!permissionsService.isAdmin(getUserId())) {
+                conditions.add(new Condition.Permission(User.class, getUserId(), baseClass));
+            }
         } else {
             if (userId == 0) {
                 conditions.add(new Condition.Permission(User.class, getUserId(), baseClass));

File: src/main/java/org/traccar/api/SimpleObjectResource.java
Patch:
@@ -41,7 +41,9 @@ public Collection<T> get(
         var conditions = new LinkedList<Condition>();
 
         if (all) {
-            permissionsService.checkAdmin(getUserId());
+            if (!permissionsService.isAdmin(getUserId())) {
+                conditions.add(new Condition.Permission(User.class, getUserId(), baseClass));
+            }
         } else {
             if (userId == 0) {
                 userId = getUserId();

File: src/main/java/org/traccar/api/security/PermissionsService.java
Patch:
@@ -68,7 +68,7 @@ public void checkAdmin(long userId) throws StorageException, SecurityException {
 
     public void checkReports(long userId) throws StorageException, SecurityException {
         if (!getUser(userId).getAdministrator()
-                && (server.getDisableReports() || getUser(userId).getDisableReports())) {
+                && (getServer().getDisableReports() || getUser(userId).getDisableReports())) {
             throw new SecurityException("Reports are disabled");
         }
     }

File: src/main/java/org/traccar/api/resource/SessionResource.java
Patch:
@@ -110,6 +110,7 @@ public User add(
             @FormParam("email") String email, @FormParam("password") String password) throws StorageException {
         User user = Context.getPermissionsManager().login(email, password);
         if (user != null) {
+            request.getSession().setAttribute(USER_ID_KEY, user.getId());
             LogAction.login(user.getId(), ServletHelper.retrieveRemoteAddress(request));
             return user;
         } else {

File: src/main/java/org/traccar/api/ExtendedObjectResource.java
Patch:
@@ -56,11 +56,11 @@ public Collection<T> get(
 
         if (groupId > 0) {
             permissionsService.checkPermission(Group.class, getUserId(), groupId);
-            conditions.add(new Condition.Permission(Group.class, groupId, baseClass));
+            conditions.add(new Condition.Permission(Group.class, groupId, baseClass).excludeGroups());
         }
         if (deviceId > 0) {
             permissionsService.checkPermission(Device.class, getUserId(), deviceId);
-            conditions.add(new Condition.Permission(Device.class, deviceId, baseClass));
+            conditions.add(new Condition.Permission(Device.class, deviceId, baseClass).excludeGroups());
         }
 
         return storage.getObjects(baseClass, new Request(new Columns.All(), Condition.merge(conditions)));

File: src/main/java/org/traccar/storage/DatabaseStorage.java
Patch:
@@ -319,7 +319,7 @@ private String formatPermissionQuery(Condition.Permission condition) throws Stor
             result.append(" UNION ");
 
             result.append("SELECT DISTINCT ");
-            result.append(expandDevices? "devices." : "groups."); // TODO handle reverse search (e.g. users by device)
+            result.append(expandDevices ? "devices." : "groups."); // TODO handle reverse search (e.g. users by device)
             result.append(outputKey);
             result.append(" FROM ");
             result.append(groupStorageName);

File: src/main/java/org/traccar/protocol/StartekProtocolDecoder.java
Patch:
@@ -42,7 +42,6 @@ public StartekProtocolDecoder(Protocol protocol) {
             .number("d+,")                       // length
             .number("(d+),")                     // imei
             .expression("(.+)")                  // content
-            .number("xx")                        // checksum
             .compile();
 
     private static final Pattern PATTERN_POSITION = new PatternBuilder()
@@ -123,6 +122,9 @@ protected Object decode(
         }
 
         String content = parser.next();
+        if (content.charAt(content.length() - 2 - 1) != '|') {
+            content = content.substring(0, content.length() - 2);
+        }
         if (content.length() < 100) {
 
             Position position = new Position(getProtocolName());

File: src/test/java/org/traccar/protocol/StartekProtocolDecoderTest.java
Patch:
@@ -11,8 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = new StartekProtocolDecoder(null);
 
-        verifyPosition(decoder, text(
-                "&&R187,860294046453690,000,0,,220105160656,A,22.994986,72.499711,15,0.9,2,222,55,121135784,404|98|147B|0000376A,24,0000001F,02,00,052E|01A3|0000|0000,1,010000|020000,,853|6|10|105|73|41|125|34|52"));
+        verifyAttribute(decoder, text(
+                "&&R187,860294046453690,000,0,,220105160656,A,22.994986,72.499711,15,0.9,2,222,55,121135784,404|98|147B|0000376A,24,0000001F,02,00,052E|01A3|0000|0000,1,010000|020000,,853|6|10|105|73|41|125|34|52"),
+                Position.KEY_FUEL_LEVEL, 52);
 
         verifyPosition(decoder, text(
                 "&&o142,860262050066062,000,27,,211111070826,V,28.653435,-106.077455,0,0.0,0,151,1412,918,0|0|4708|01402D19,6,0000001A,02,00,04C0|016C|0000|0000,1,,,BB"));

File: src/main/java/org/traccar/protocol/EnvotechProtocolDecoder.java
Patch:
@@ -99,7 +99,7 @@ protected Object decode(
         position.set(Position.KEY_INPUT, parser.nextHexInt());
         position.set(Position.PREFIX_OUT, parser.nextHexInt());
         position.set(Position.KEY_FUEL_LEVEL, parser.nextHexInt());
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+        position.set(Position.KEY_STATUS, parser.nextHexLong());
 
         position.setFixTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
         position.setValid(parser.nextInt() > 0);

File: src/test/java/org/traccar/protocol/EnvotechProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = new EnvotechProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "$80SLM,62,000F,F015727,020522053200,611000000,000391,C080,000,80028900,85010000'02052205320110399426S03970217E000145*E0C2#"));
+
         verifyPosition(decoder, text(
                 "$80SLM,02,F,AB0010,130410155921,431750216,000040,0000,,00000000,'13041015592110476673N10111459E001281*2A"),
                 position("2010-04-13 15:59:21.000", true, 4.76673, 101.11459));

File: src/test/java/org/traccar/protocol/EnvotechProtocolDecoderTest.java
Patch:
@@ -11,7 +11,8 @@ public void testDecode() throws Exception {
         var decoder = new EnvotechProtocolDecoder(null);
 
         verifyPosition(decoder, text(
-                "$80SLM,02,F,AB0010,130410155921,431750216,000040,0000,,00000000,'13041015592110476673N10111459E001281*2A"));
+                "$80SLM,02,F,AB0010,130410155921,431750216,000040,0000,,00000000,'13041015592110476673N10111459E001281*2A"),
+                position("2010-04-13 15:59:21.000", true, 4.76673, 101.11459));
 
         verifyPosition(decoder, text(
                 "$80SLM,82,F,AB0010,130410155921,431750216,000040,0000,,00000000,'13041015592110476673N10111459E001281@B0,F,C456,038,00,M234567,,,1A2A3A4A5A6A*4E"));

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -251,13 +251,13 @@ protected Object decode(
                                 case 29:
                                     value = buf.readUnsignedByte();
                                     for (int k = 0; k <= 7; k++) {
-                                        position.set(Position.PREFIX_IN + (k + 1), BitUtil.check(value, k) ? 1 : 0);
+                                        position.set(Position.PREFIX_IN + (k + 1), BitUtil.check(value, k));
                                     }
                                     break;
                                 case 31:
                                     value = buf.readUnsignedByte();
                                     for (int k = 0; k <= 3; k++) {
-                                        position.set(Position.PREFIX_OUT + (k + 1), BitUtil.check(value, k) ? 1 : 0);
+                                        position.set(Position.PREFIX_OUT + (k + 1), BitUtil.check(value, k));
                                     }
                                     break;
                                 case 33:

File: src/test/java/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
                 "[3G*2104326058*000E*btemp2,1,35.29]"),
                 Position.PREFIX_TEMP + 1, 35.29);
 
+        verifyPosition(decoder, buffer(
+                "[SG*9159059735*0066*UD2,230322,082138,A,59.55285,N,016.66185,E,0.0,000,26,14,80,70,0,50,00000000,1,1,240,7,34505,80806406,,00]"));
+
         verifyPosition(decoder, buffer(
                 "[SG*9059056143*0053*UD,251021,223408,A,41.46500,N,081.53128,W,0.926,000,0,00,70,70,0,50,00000000,0,1,,,,00]"));
 

File: src/test/java/org/traccar/protocol/NavtelecomFrameDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
                 binary("404e544301000000000000002a005e6c2a3e464c4558b01e1efffffe300a08080ffffe08000000580028002bc0000000000000b4000000000000"),
                 decoder.decode(null, null, binary("404e544301000000000000002a005e6c2a3e464c4558b01e1efffffe300a08080ffffe08000000580028002bc0000000000000b4000000000000")));
 
+        verifyNull(
+                decoder.decode(null, null, binary("7f")));
+
     }
 
     @Ignore

File: src/main/java/org/traccar/protocol/FlexApiProtocol.java
Patch:
@@ -21,14 +21,16 @@
 import org.traccar.PipelineBuilder;
 import org.traccar.TrackerServer;
 
+import java.nio.charset.StandardCharsets;
+
 public class FlexApiProtocol extends BaseProtocol {
 
     public FlexApiProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new LineBasedFrameDecoder(5120));
-                pipeline.addLast(new StringDecoder());
+                pipeline.addLast(new StringDecoder(StandardCharsets.US_ASCII));
                 pipeline.addLast(new FlexApiProtocolDecoder(FlexApiProtocol.this));
             }
         });

File: src/test/java/org/traccar/protocol/TeraTrackProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import io.netty.handler.codec.http.HttpMethod;
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
@@ -11,8 +10,8 @@ public void testDecode() throws Exception {
 
         var decoder = new TeraTrackProtocolDecoder(null);
 
-        verifyAttributes(decoder, request(HttpMethod.POST, "/",
-                buffer("{\"MDeviceID\":\"074054558620\",\"DeviceType\":\"1\",\"DataType\":\"2\",\"DataLength\":\"0913\",\"DateTime\":\"2022-02-22 23:35:35\",\"Latitude\":\"-6.826699\",\"Longitude\":\"39.279008\",\"LatitudeState\":\"0\",\"LongitudeState\":\"1\",\"Speed\":\"0\",\"Mileage\":\"0\",\"FenceAlarm\":\"0\",\"AreaAlarmID\":\"0\",\"LockCutOff\":\"0\",\"SealTempered\":\"1\",\"MessageAck\":\"1\",\"LockRope\":\"0\",\"LockStatus\":\"0\",\"LockOpen\":\"1\",\"PasswordError\":\"0\",\"CardNo\":\"60060198\",\"IllegalCard\":\"0\",\"LowPower\":\"0\",\"UnCoverBack\":\"1\",\"CoverStatus\":\"0\",\"LockStuck\":\"1\",\"Power\":\"90\",\"GSM\":\"14\",\"IMEI\":\"861774054558620\",\"Index\":\"39\",\"Slave\":[{\"SDeviceId\":\"685304\",\"SPower\":\"00\",\"SLockCutOff\":\"0\",\"SLockOpen\":\"1\",\"SUnCoverBack\":\"0\",\"SCoverStatus\":\"1\",\"STimeOut\":\"1\",\"SLockRope\":\"0\",\"SSealTempered\":\"0\",\"SLockStuck\":\"0\"},{\"SDeviceId\":\"224779\",\"SPower\":\"00\",\"SLockCutOff\":\"0\",\"SLockOpen\":\"1\",\"SUnCoverBack\":\"0\",\"SCoverStatus\":\"1\",\"STimeOut\":\"1\",\"SLockRope\":\"0\",\"SSealTempered\":\"0\",\"SLockStuck\":\"0\"}]}")));
+        verifyAttributes(decoder, text(
+                "{\"MDeviceID\":\"074054558620\",\"DeviceType\":\"1\",\"DataType\":\"2\",\"DataLength\":\"0913\",\"DateTime\":\"2022-02-22 23:35:35\",\"Latitude\":\"-6.826699\",\"Longitude\":\"39.279008\",\"LatitudeState\":\"0\",\"LongitudeState\":\"1\",\"Speed\":\"0\",\"Mileage\":\"0\",\"FenceAlarm\":\"0\",\"AreaAlarmID\":\"0\",\"LockCutOff\":\"0\",\"SealTempered\":\"1\",\"MessageAck\":\"1\",\"LockRope\":\"0\",\"LockStatus\":\"0\",\"LockOpen\":\"1\",\"PasswordError\":\"0\",\"CardNo\":\"60060198\",\"IllegalCard\":\"0\",\"LowPower\":\"0\",\"UnCoverBack\":\"1\",\"CoverStatus\":\"0\",\"LockStuck\":\"1\",\"Power\":\"90\",\"GSM\":\"14\",\"IMEI\":\"861774054558620\",\"Index\":\"39\",\"Slave\":[{\"SDeviceId\":\"685304\",\"SPower\":\"00\",\"SLockCutOff\":\"0\",\"SLockOpen\":\"1\",\"SUnCoverBack\":\"0\",\"SCoverStatus\":\"1\",\"STimeOut\":\"1\",\"SLockRope\":\"0\",\"SSealTempered\":\"0\",\"SLockStuck\":\"0\"},{\"SDeviceId\":\"224779\",\"SPower\":\"00\",\"SLockCutOff\":\"0\",\"SLockOpen\":\"1\",\"SUnCoverBack\":\"0\",\"SCoverStatus\":\"1\",\"STimeOut\":\"1\",\"SLockRope\":\"0\",\"SSealTempered\":\"0\",\"SLockStuck\":\"0\"}]}"));
 
     }
 

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -239,7 +239,7 @@ protected Object decode(
                     ByteBuf response = Unpooled.buffer();
                     response.writeCharSequence(type, StandardCharsets.US_ASCII);
                     response.writeByte(count);
-                    response.writeByte(Checksum.crc8(Checksum.CRC8_ROHC, response.nioBuffer()));
+                    response.writeByte(Checksum.crc8(Checksum.CRC8_EGTS, response.nioBuffer()));
                     channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                 }
 

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -239,7 +239,7 @@ protected Object decode(
                     ByteBuf response = Unpooled.buffer();
                     response.writeCharSequence(type, StandardCharsets.US_ASCII);
                     response.writeByte(count);
-                    response.writeByte(Checksum.xor(response.nioBuffer()));
+                    response.writeByte(Checksum.crc8(Checksum.CRC8_ROHC, response.nioBuffer()));
                     channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                 }
 

File: src/main/java/org/traccar/model/User.java
Patch:
@@ -266,6 +266,7 @@ public String getHashedPassword() {
         return hashedPassword;
     }
 
+    @QueryExtended
     public void setHashedPassword(String hashedPassword) {
         this.hashedPassword = hashedPassword;
     }
@@ -278,6 +279,7 @@ public String getSalt() {
         return salt;
     }
 
+    @QueryExtended
     public void setSalt(String salt) {
         this.salt = salt;
     }

File: src/main/java/org/traccar/protocol/OrbcommProtocolDecoder.java
Patch:
@@ -95,7 +95,8 @@ protected Object decode(
                             position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(value)));
                             break;
                         case "heading":
-                            position.setCourse(Integer.parseInt(value) * 0.1);
+                            int heading = Integer.parseInt(value);
+                            position.setCourse(heading <= 360 ? heading : 0);
                             break;
                         default:
                             break;

File: src/test/java/org/traccar/protocol/OrbcommProtocolDecoderTest.java
Patch:
@@ -14,7 +14,7 @@ public void testDecode() throws Exception {
                 buffer("{\"ErrorID\":0,\"NextStartUTC\":\"\",\"Messages\":null}")));
 
         verifyPositions(decoder, response(
-                buffer("{\"ErrorID\":0,\"NextStartUTC\":\"2022-01-20 21:17:19\",\"Messages\":[{\"ID\":21545955455454,\"MessageUTC\":\"2022-01-20 21:17:19\",\"ReceiveUTC\":\"2022-01-20 21:17:19\",\"SIN\":19,\"MobileID\":\"01097623SKY2C68\",\"Payload\":{\"Name\":\"simpleReport\",\"SIN\":19,\"MIN\":1,\"Fields\":[{\"Name\":\"latitude\",\"Value\":\"2717900\",\"Type\":\"signedint\"},{\"Name\":\"longitude\",\"Value\":\"-4555211\",\"Type\":\"signedint\"},{\"Name\":\"speed\",\"Value\":\"0\",\"Type\":\"unsignedint\"},{\"Name\":\"heading\",\"Value\":\"1439\",\"Type\":\"unsignedint\"}]},\"RegionName\":\"\",\"OTAMessageSize\":17,\"CustomerID\":0,\"Transport\":1,\"MobileOwnerID\":60000934}]}")));
+                buffer("{\"ErrorID\":0,\"NextStartUTC\":\"2022-02-17 08:44:45\",\"Messages\":[{\"ID\":10343663424,\"MessageUTC\":\"2022-02-17 08:44:45\",\"ReceiveUTC\":\"2022-02-17 08:44:45\",\"SIN\":126,\"MobileID\":\"01452955SKYB444\",\"Payload\":{\"Name\":\"MovingIntervalSat\",\"SIN\":126,\"MIN\":22,\"Fields\":[{\"Name\":\"Latitude\",\"Value\":\"727668\"},{\"Name\":\"Longitude\",\"Value\":\"902276\"},{\"Name\":\"Speed\",\"Value\":\"0\"},{\"Name\":\"Heading\",\"Value\":\"361\"},{\"Name\":\"EventTime\",\"Value\":\"1645087473\"}]},\"RegionName\":\"EMEARB6\",\"OTAMessageSize\":16,\"CustomerID\":0,\"Transport\":1,\"MobileOwnerID\":60003097}]}")));
 
         verifyPositions(decoder, false, response(
                 buffer("{\"ErrorID\":0,\"NextStartUTC\":\"2016-10-13 15:19:59\",\"Messages\":[{\"ID\":120213064,\"MessageUTC\":\"2016-10-12 12:42:01\",\"ReceiveUTC\":\"2016-10-12 12:42:01\",\"SIN\":0,\"MobileID\":\"01173096SKY0E45\",\"Payload\":{\"Name\":\"modemRegistration\",\"SIN\":0,\"MIN\":0,\"Fields\":[{\"Name\":\"hardwareMajorVersion\",\"Value\":\"4\"},{\"Name\":\"hardwareMinorVersion\",\"Value\":\"2\"},{\"Name\":\"softwareMajorVersion\",\"Value\":\"13\"},{\"Name\":\"softwareMinorVersion\",\"Value\":\"1\"},{\"Name\":\"product\",\"Value\":\"4\"},{\"Name\":\"wakeupPeriod\",\"Value\":\"None\"},{\"Name\":\"lastResetReason\",\"Value\":\"Software\"},{\"Name\":\"virtualCarrier\",\"Value\":\"6\"},{\"Name\":\"beam\",\"Value\":\"1\"},{\"Name\":\"vain\",\"Value\":\"0\"},{\"Name\":\"reserved\",\"Value\":\"0\"},{\"Name\":\"operatorTxState\",\"Value\":\"0\"},{\"Name\":\"userTxState\",\"Value\":\"0\"},{\"Name\":\"broadcastIDCount\",\"Value\":\"0\"}],\"RegionName\":\"AMERRB11\",\"OTAMessageSize\":15,\"CustomerID\":0}}]}")));

File: src/main/java/org/traccar/model/User.java
Patch:
@@ -249,6 +249,7 @@ public String getPassword() {
         return null;
     }
 
+    @QueryIgnore
     public void setPassword(String password) {
         if (password != null && !password.isEmpty()) {
             Hashing.HashingResult hashingResult = Hashing.createHash(password);

File: src/main/java/org/traccar/model/User.java
Patch:
@@ -249,6 +249,7 @@ public String getPassword() {
         return null;
     }
 
+    @QueryIgnore
     public void setPassword(String password) {
         if (password != null && !password.isEmpty()) {
             Hashing.HashingResult hashingResult = Hashing.createHash(password);

File: src/main/java/org/traccar/storage/query/Columns.java
Patch:
@@ -9,9 +9,9 @@
 import java.util.Set;
 import java.util.stream.Collectors;
 
-abstract public class Columns {
+public abstract class Columns {
 
-    abstract public List<String> getColumns(Class<?> clazz);
+    public abstract List<String> getColumns(Class<?> clazz);
 
     protected List<String> getAllColumns(Class<?> clazz) {
         List<String> columns = new LinkedList<>();

File: src/main/java/org/traccar/helper/BufferUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2018 - 2021 Anton Tananaev (anton@traccar.org)
+ * Copyright 2018 - 2022 Anton Tananaev (anton@traccar.org)
  * Copyright 2018 Andrey Kunitsyn (andrey@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -50,7 +50,7 @@ public static int indexOf(ByteBuf needle, ByteBuf haystack, int startIndex, int
             wrappedHaystack.writerIndex(endIndex - haystack.readerIndex());
         }
         int result = ByteBufUtil.indexOf(needle, wrappedHaystack);
-        return result < 0 ? result : haystack.readerIndex() + startIndex + result;
+        return result < 0 ? result : startIndex + result;
     }
 
 }

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -790,7 +790,7 @@ private Collection<Position> decodeCrashReport(Channel channel, SocketAddress re
                 position.setCourse(crash.readUnsignedShort() * 0.01);
 
                 StringBuilder value = new StringBuilder("[");
-                for (int i = 0; i < 100; i++){
+                for (int i = 0; i < 100; i++) {
                     if (value.length() > 1) {
                         value.append(",");
                     }

File: src/test/java/org/traccar/protocol/Dsf22ProtocolDecoderTest.java
Patch:
@@ -1,17 +1,18 @@
 package org.traccar.protocol;
 
-import org.junit.Ignore;
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-@Ignore
 public class Dsf22ProtocolDecoderTest extends ProtocolTest {
 
     @Test
     public void testDecode() throws Exception {
 
         var decoder = new Dsf22ProtocolDecoder(null);
 
+        verifyPositions(decoder, binary(
+                "4642a82d01c8f6aa1af1792c0c1411eb61001e0000"));
+
         verifyPositions(decoder, binary(
                 "4642000101A8EE5F0ECA5FF421B33F524E32610401"));
 

File: src/main/java/org/traccar/BaseProtocolPoller.java
Patch:
@@ -19,7 +19,6 @@
 import io.netty.channel.ChannelDuplexHandler;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.util.concurrent.Future;
-import org.traccar.config.Keys;
 
 import java.net.SocketAddress;
 import java.util.concurrent.TimeUnit;
@@ -29,7 +28,7 @@ public abstract class BaseProtocolPoller extends ChannelDuplexHandler {
     private final long interval;
     private Future<?> timeout;
 
-    public BaseProtocolPoller(Protocol protocol, long interval) {
+    public BaseProtocolPoller(long interval) {
         this.interval = interval;
     }
 

File: src/main/java/org/traccar/protocol/ArmoliProtocolPoller.java
Patch:
@@ -24,7 +24,7 @@
 public class ArmoliProtocolPoller extends BaseProtocolPoller {
 
     public ArmoliProtocolPoller(Protocol protocol) {
-        super(protocol, 180000);
+        super(180000);
     }
 
     @Override

File: src/main/java/org/traccar/protocol/OrbcommProtocolPoller.java
Patch:
@@ -47,7 +47,7 @@ public void setStartTime(Date startTime) {
     }
 
     public OrbcommProtocolPoller(Protocol protocol) {
-        super(protocol, Context.getConfig().getLong(Keys.PROTOCOL_INTERVAL.withPrefix(protocol.getName())));
+        super(Context.getConfig().getLong(Keys.PROTOCOL_INTERVAL.withPrefix(protocol.getName())));
         accessId = Context.getConfig().getString(Keys.ORBCOMM_ACCESS_ID);
         password = Context.getConfig().getString(Keys.ORBCOMM_PASSWORD);
         host = Context.getConfig().getString(Keys.PROTOCOL_ADDRESS.withPrefix(protocol.getName()));

File: src/main/java/org/traccar/protocol/OrbcommProtocolPoller.java
Patch:
@@ -65,7 +65,7 @@ protected void sendRequest(Channel channel, SocketAddress remoteAddress) {
         encoder.addParam("start_utc", dateFormat.format(startTime));
 
         HttpRequest request = new DefaultFullHttpRequest(
-                HttpVersion.HTTP_1_1, HttpMethod.POST, encoder.toString(), Unpooled.buffer());
+                HttpVersion.HTTP_1_1, HttpMethod.GET, encoder.toString(), Unpooled.buffer());
         request.headers().add(HttpHeaderNames.HOST, host);
         request.headers().add(HttpHeaderNames.CONTENT_LENGTH, 0);
         channel.writeAndFlush(request);

File: src/test/java/org/traccar/protocol/OrbcommProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public void testDecode() throws Exception {
         var decoder = new OrbcommProtocolDecoder(null);
 
         verifyNull(decoder, response(
-                buffer("{\"ErrorID\":0,\"NextStartUTC\":\"2016-10-13 15:19:59\",\"Messages\":[{\"ID\":120213064,\"MessageUTC\":\"2016-10-12 12:42:01\",\"ReceiveUTC\":\"2016-10-12 12:42:01\",\"SIN\":0,\"MobileID\":\"01173096SKY0E45\",\"Payload\":{\"Name\":\"modemRegistration\",\"SIN\":0,\"MIN\":0,\"Fields\":[{\"Name\":\"hardwareMajorVersion\",\"Value\":\"4\"},{\"Name\":\"hardwareMinorVersion\",\"Value\":\"2\"},{\"Name\":\"softwareMajorVersion\",\"Value\":\"13\"},{\"Name\":\"softwareMinorVersion\",\"Value\":\"1\"},{\"Name\":\"product\",\"Value\":\"4\"},{\"Name\":\"wakeupPeriod\",\"Value\":\"None\"},{\"Name\":\"lastResetReason\",\"Value\":\"Software\"},{\"Name\":\"virtualCarrier\",\"Value\":\"6\"},{\"Name\":\"beam\",\"Value\":\"1\"},{\"Name\":\"vain\",\"Value\":\"0\"},{\"Name\":\"reserved\",\"Value\":\"0\"},{\"Name\":\"operatorTxState\",\"Value\":\"0\"},{\"Name\":\"userTxState\",\"Value\":\"0\"},{\"Name\":\"broadcastIDCount\",\"Value\":\"0\"}}],\"RegionName\":\"AMERRB11\",\"OTAMessageSize\":15,\"CustomerID\":0}]}")));
+                buffer("{\"ErrorID\":0,\"NextStartUTC\":\"2016-10-13 15:19:59\",\"Messages\":[{\"ID\":120213064,\"MessageUTC\":\"2016-10-12 12:42:01\",\"ReceiveUTC\":\"2016-10-12 12:42:01\",\"SIN\":0,\"MobileID\":\"01173096SKY0E45\",\"Payload\":{\"Name\":\"modemRegistration\",\"SIN\":0,\"MIN\":0,\"Fields\":[{\"Name\":\"hardwareMajorVersion\",\"Value\":\"4\"},{\"Name\":\"hardwareMinorVersion\",\"Value\":\"2\"},{\"Name\":\"softwareMajorVersion\",\"Value\":\"13\"},{\"Name\":\"softwareMinorVersion\",\"Value\":\"1\"},{\"Name\":\"product\",\"Value\":\"4\"},{\"Name\":\"wakeupPeriod\",\"Value\":\"None\"},{\"Name\":\"lastResetReason\",\"Value\":\"Software\"},{\"Name\":\"virtualCarrier\",\"Value\":\"6\"},{\"Name\":\"beam\",\"Value\":\"1\"},{\"Name\":\"vain\",\"Value\":\"0\"},{\"Name\":\"reserved\",\"Value\":\"0\"},{\"Name\":\"operatorTxState\",\"Value\":\"0\"},{\"Name\":\"userTxState\",\"Value\":\"0\"},{\"Name\":\"broadcastIDCount\",\"Value\":\"0\"}],\"RegionName\":\"AMERRB11\",\"OTAMessageSize\":15,\"CustomerID\":0}}]}")));
 
     }
 

File: src/main/java/org/traccar/protocol/ArmoliProtocol.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.traccar.protocol;
 
-import io.netty.handler.codec.LineBasedFrameDecoder;
 import io.netty.handler.codec.string.StringDecoder;
 import io.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
+import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.PipelineBuilder;
 import org.traccar.TrackerServer;
 
@@ -28,7 +28,7 @@ public ArmoliProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                pipeline.addLast(new LineBasedFrameDecoder(1024));
+                pipeline.addLast(new CharacterDelimiterFrameDecoder(1024, '\r'));
                 pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new StringDecoder());
                 pipeline.addLast(new ArmoliProtocolDecoder(ArmoliProtocol.this));

File: src/main/java/org/traccar/protocol/T800xProtocolDecoder.java
Patch:
@@ -411,7 +411,7 @@ private Position decodePosition(
 
         if (BitUtil.check(status, 6)) {
 
-            position.setValid(!BitUtil.check(status, 7));
+            position.setValid(true);
             position.setTime(readDate(buf));
             position.setAltitude(buf.readFloatLE());
             position.setLongitude(buf.readFloatLE());

File: src/main/java/org/traccar/protocol/H02ProtocolEncoder.java
Patch:
@@ -6,7 +6,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: src/main/java/org/traccar/protocol/TotemProtocolEncoder.java
Patch:
@@ -6,7 +6,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: src/main/java/org/traccar/protocol/WondexProtocolEncoder.java
Patch:
@@ -5,7 +5,7 @@
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,

File: src/main/java/org/traccar/protocol/TotemProtocolSmsEncoder.java
Patch:
@@ -16,10 +16,11 @@
  */
 package org.traccar.protocol;
 
+import org.traccar.StringProtocolEncoder;
 import org.traccar.model.Command;
 import org.traccar.Protocol;
 
-public class TotemProtocolSmsEncoder extends TotemProtocolEncoder {
+public class TotemProtocolSmsEncoder extends StringProtocolEncoder {
 
     public TotemProtocolSmsEncoder(Protocol protocol) {
         super(protocol);
@@ -30,7 +31,7 @@ protected Object encodeCommand(Command command) {
 
         initDevicePassword(command, "000000");
 
-        return String.format("*%s#", super.getCommandString(command));
+        return String.format("*%s#", TotemProtocolEncoder.formatContent(command));
     }
 
 }

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -235,12 +235,11 @@ protected Object decode(
                     positions.add(position);
                 }
 
-                int checksum = buf.readUnsignedByte();
                 if (channel != null) {
                     ByteBuf response = Unpooled.buffer();
                     response.writeCharSequence(type, StandardCharsets.US_ASCII);
                     response.writeByte(count);
-                    response.writeByte(checksum);
+                    response.writeByte(Checksum.xor(response.nioBuffer()));
                     channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                 }
 

File: src/main/java/org/traccar/handler/FilterHandler.java
Patch:
@@ -168,7 +168,7 @@ private boolean filter(Position position) {
 
         // filter out excessive data
         long deviceId = position.getDeviceId();
-        if (filterDuplicate || filterDistance > 0 || filterMaxSpeed > 0 || filterMinPeriod > 0) {
+        if (filterDuplicate || filterStatic || filterDistance > 0 || filterMaxSpeed > 0 || filterMinPeriod > 0) {
             Position preceding = null;
             if (filterRelative) {
                 try {

File: src/main/java/org/traccar/protocol/HoopoProtocolDecoder.java
Patch:
@@ -52,7 +52,7 @@ protected Object decode(
             Position position = new Position(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
 
-            Date time = new Date(OffsetDateTime.parse(eventData.getString("receiveTime")).toInstant().toEpochMilli());
+            Date time = new Date(OffsetDateTime.parse(json.getString("eventTime")).toInstant().toEpochMilli());
             position.setTime(time);
 
             position.setValid(true);

File: src/main/java/org/traccar/protocol/TopinProtocolDecoder.java
Patch:
@@ -193,10 +193,12 @@ protected Object decode(
 
             getLastLocation(position, null);
 
+            ByteBuf content = buf.retainedSlice(buf.readerIndex(), buf.readableBytes() - 2);
+
             position.set(Position.KEY_BATTERY_LEVEL, buf.readUnsignedByte());
             position.set(Position.KEY_VERSION_FW, buf.readUnsignedByte());
             buf.readUnsignedByte(); // timezone
-            int interval = buf.readUnsignedByte();
+            buf.readUnsignedByte(); // interval
             if (buf.readableBytes() >= 1 + 2) {
                 position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             }
@@ -210,8 +212,6 @@ protected Object decode(
                 position.set(Position.KEY_HEART_RATE, buf.readUnsignedByte());
             }
 
-            ByteBuf content = Unpooled.buffer();
-            content.writeByte(interval);
             sendResponse(channel, length, type, content);
 
             return position;

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -581,7 +581,7 @@ private List<Position> decodeLocationBatch(DeviceSession deviceSession, ByteBuf
         for (int i = 0; i < count; i++) {
             int endIndex = buf.readUnsignedShort() + buf.readerIndex();
             Position position = decodeLocation(deviceSession, buf);
-            if (locationType == 0) {
+            if (locationType > 0) {
                 position.set(Position.KEY_ARCHIVE, true);
             }
             positions.add(position);

File: src/main/java/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -421,7 +421,7 @@ protected Position decodePackage(
             ByteBuf content = Unpooled.buffer();
             if (type == MSG_LOGIN) {
                 content.writeInt((int) (System.currentTimeMillis() / 1000));
-                content.writeByte(1); // protocol version
+                content.writeShort(1); // protocol version
                 content.writeByte(0); // action mask
             }
             ByteBuf response = EelinkProtocolEncoder.encodeContent(

File: src/main/java/org/traccar/protocol/StartekProtocolDecoder.java
Patch:
@@ -80,6 +80,7 @@ public StartekProtocolDecoder(Protocol protocol) {
             .expression("([^,]+)?,?")            // temperature
             .groupEnd("?")
             .groupEnd("?")
+            .any()
             .compile();
 
     private String decodeAlarm(int value) {

File: src/test/java/org/traccar/protocol/StartekProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = new StartekProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "&&W149,865429043319537,000,0,,211103013512,A,22.679003,114.045085,16,1.1,0,271,76,109075,460|0|249F|000010C5,19,0000003E,00,00,0A57|0168|0000|0000,1,0100000C"));
+
         verifyAttribute(decoder, text(
                 "&&:23,860262050015424,129,OKA2"),
                 Position.KEY_RESULT, "129,OK");

File: src/main/java/org/traccar/api/resource/PasswordResource.java
Patch:
@@ -53,7 +53,8 @@ public Response reset(@FormParam("email") String email) throws SQLException, Mes
                 Context.getUsersManager().updateItem(user);
                 VelocityContext velocityContext = TextTemplateFormatter.prepareContext(null);
                 velocityContext.put("token", token);
-                NotificationMessage fullMessage = TextTemplateFormatter.formatMessage(velocityContext, "passwordReset", "full");
+                NotificationMessage fullMessage =
+                        TextTemplateFormatter.formatMessage(velocityContext, "passwordReset", "full");
                 Context.getMailManager().sendMessage(userId, fullMessage.getSubject(), fullMessage.getBody());
                 break;
             }

File: src/main/java/org/traccar/notificators/NotificatorFirebase.java
Patch:
@@ -69,7 +69,7 @@ public void sendSync(long userId, Event event, Position position) {
         final User user = Context.getPermissionsManager().getUser(userId);
         if (user.getAttributes().containsKey("notificationTokens")) {
 
-            NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position,"short");
+            NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position, "short");
 
             Notification notification = new Notification();
             notification.title = shortMessage.getSubject();

File: src/main/java/org/traccar/notificators/NotificatorMail.java
Patch:
@@ -30,7 +30,7 @@ public final class NotificatorMail extends Notificator {
     @Override
     public void sendSync(long userId, Event event, Position position) throws MessageException {
         try {
-            NotificationMessage fullMessage = NotificationFormatter.formatMessage(userId, event, position,"full");
+            NotificationMessage fullMessage = NotificationFormatter.formatMessage(userId, event, position, "full");
             Context.getMailManager().sendMessage(userId, fullMessage.getSubject(), fullMessage.getBody());
         } catch (MessagingException e) {
             throw new MessageException(e);

File: src/main/java/org/traccar/notificators/NotificatorPushover.java
Patch:
@@ -77,13 +77,13 @@ public void sendSync(long userId, Event event, Position position) {
             return;
         }
 
-        NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position,"short");
+        NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position, "short");
 
         Message message = new Message();
         message.token = token;
         message.user = this.user;
         message.device = device;
-        message.title= shortMessage.getSubject();
+        message.title = shortMessage.getSubject();
         message.message = shortMessage.getBody();
 
         Context.getClient().target(url).request()

File: src/main/java/org/traccar/notificators/NotificatorSms.java
Patch:
@@ -32,7 +32,7 @@ public final class NotificatorSms extends Notificator {
     public void sendAsync(long userId, Event event, Position position) {
         final User user = Context.getPermissionsManager().getUser(userId);
         if (user.getPhone() != null) {
-            NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position,"short");
+            NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position, "short");
             Main.getInjector().getInstance(StatisticsManager.class).registerSms();
             Context.getSmsManager().sendMessageAsync(user.getPhone(),
                     shortMessage.getBody(), false);
@@ -43,7 +43,7 @@ public void sendAsync(long userId, Event event, Position position) {
     public void sendSync(long userId, Event event, Position position) throws MessageException, InterruptedException {
         final User user = Context.getPermissionsManager().getUser(userId);
         if (user.getPhone() != null) {
-            NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position,"short");
+            NotificationMessage shortMessage = NotificationFormatter.formatMessage(userId, event, position, "short");
             Main.getInjector().getInstance(StatisticsManager.class).registerSms();
             Context.getSmsManager().sendMessageSync(user.getPhone(),
                     shortMessage.getBody(), false);

File: src/main/java/org/traccar/protocol/DualcamProtocolDecoder.java
Patch:
@@ -93,7 +93,7 @@ protected Object decode(
                 break;
             case MSG_DATA:
                 buf.readUnsignedShort(); // length
-                photo.writeBytes(buf, buf.readableBytes());
+                photo.writeBytes(buf, buf.readableBytes() - 2);
                 if (currentPacket == packetCount) {
                     deviceSession = getDeviceSession(channel, remoteAddress);
                     Position position = new Position(getProtocolName());

File: src/main/java/org/traccar/protocol/DualcamProtocol.java
Patch:
@@ -25,8 +25,8 @@ public DualcamProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
+                pipeline.addLast(new DualcamFrameDecoder());
                 pipeline.addLast(new DualcamProtocolDecoder(DualcamProtocol.this));
-                pipeline.addLast(new DishaProtocolDecoder(DualcamProtocol.this));
             }
         });
     }

File: src/main/java/org/traccar/protocol/DualcamProtocolDecoder.java
Patch:
@@ -110,6 +110,7 @@ protected Object decode(
                         response.writeShort(MSG_INIT_REQUEST);
                         channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
                     }
+                    return position;
                 } else {
                     currentPacket += 1;
                 }

File: src/main/java/org/traccar/protocol/MobilogixProtocolDecoder.java
Patch:
@@ -60,20 +60,20 @@ protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        String type = sentence.substring(21, 21 + 2);
+        String type = sentence.substring(21, sentence.indexOf(',', 21));
 
         if (channel != null) {
             String time = sentence.substring(1, 20);
             String response;
             if (type.equals("T1")) {
                 response = String.format("[%s,S1,1]", time);
             } else {
-                response = String.format("[%s,S%c]", time, type.charAt(1));
+                response = String.format("[%s,S%s]", time, type.substring(1));
             }
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 
-        Parser parser = new Parser(PATTERN, (String) msg);
+        Parser parser = new Parser(PATTERN, sentence);
         if (!parser.matches()) {
             return null;
         }

File: src/main/java/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -395,7 +395,7 @@ private boolean decode4(Position position, Parser parser) {
           * 22 | Reserved   | Reserved   | GSM Jamming
           */
         for (int i = 12; i < 23; i++) {
-            position.set(Position.PREFIX_IO + i, BitUtil.check(status, 32 - i)); 
+            position.set(Position.PREFIX_IO + i, BitUtil.check(status, 32 - i));
         }
 
         position.setTime(parser.nextDateTime());

File: src/main/java/org/traccar/protocol/T800xProtocolDecoder.java
Patch:
@@ -136,11 +136,12 @@ protected Object decode(
             return null;
         }
 
-        if (type != MSG_GPS && type != MSG_GPS_2 && type != MSG_ALARM) {
+        boolean positionType = type == MSG_GPS || type == MSG_GPS_2 || type == MSG_ALARM || type == MSG_ALARM_2;
+        if (!positionType) {
             sendResponse(channel, header, type, index, imei, 0);
         }
 
-        if (type == MSG_GPS || type == MSG_GPS_2 || type == MSG_ALARM || type == MSG_ALARM_2) {
+        if (positionType) {
 
             return decodePosition(channel, deviceSession, buf, type, index, imei);
 

File: src/main/java/org/traccar/protocol/TzoneProtocolDecoder.java
Patch:
@@ -305,7 +305,7 @@ protected Object decode(
 
             position.set(Position.KEY_RSSI, buf.readUnsignedByte());
             position.set("gsmStatus", buf.readUnsignedByte());
-            position.set(Position.KEY_BATTERY, buf.readUnsignedShort());
+            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
 
             if (hardware != 0x407) {
                 position.set(Position.KEY_POWER, buf.readUnsignedShort());
@@ -314,12 +314,12 @@ protected Object decode(
             } else {
                 int temperature = buf.readUnsignedShort();
                 if (!BitUtil.check(temperature, 15)) {
-                    double value = BitUtil.to(temperature, 14) * 0.01;
+                    double value = BitUtil.to(temperature, 14) * 0.1;
                     position.set(Position.PREFIX_TEMP + 1, BitUtil.check(temperature, 14) ? -value : value);
                 }
                 int humidity = buf.readUnsignedShort();
                 if (!BitUtil.check(humidity, 15)) {
-                    position.set("humidity", BitUtil.to(humidity, 15));
+                    position.set("humidity", BitUtil.to(humidity, 15) * 0.1);
                 }
                 position.set("lightSensor", buf.readUnsignedByte() == 0);
             }

File: src/main/java/org/traccar/protocol/T800xProtocolDecoder.java
Patch:
@@ -140,7 +140,7 @@ protected Object decode(
             sendResponse(channel, header, type, index, imei, 0);
         }
 
-        if (type == MSG_GPS || type == MSG_GPS_2 ||type == MSG_ALARM || type == MSG_ALARM_2) {
+        if (type == MSG_GPS || type == MSG_GPS_2 || type == MSG_ALARM || type == MSG_ALARM_2) {
 
             return decodePosition(channel, deviceSession, buf, type, index, imei);
 

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -1141,7 +1141,7 @@ private Object decodeExtended(Channel channel, SocketAddress remoteAddress, Byte
 
         } else if (type == MSG_GPS_MODULAR) {
 
-            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
+            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
 
             return decodeExtendedModular(buf, deviceSession);
 

File: src/main/java/org/traccar/geolocation/OpenCellIdGeolocationProvider.java
Patch:
@@ -50,7 +50,7 @@ public void completed(JsonObject json) {
                                 json.getJsonNumber("lon").doubleValue(), 0);
                     } else {
                         if (json.containsKey("error")) {
-                            String errorMessage = json.getJsonString("error").getString();
+                            String errorMessage = json.getString("error");
                             if (json.containsKey("code")) {
                                 errorMessage += " (" + json.getInt("code") + ")";
                             }

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -461,9 +461,11 @@ private Position decodeUniversal(
         position.setDeviceId(deviceSession.getDeviceId());
         position.set(Position.KEY_TYPE, type);
 
-        int mask = Integer.parseInt(values[index++], 16);
+        int mask;
         if (type.equals("BLE")) {
             mask = 0b1100000110110;
+        } else {
+            mask = Integer.parseInt(values[index++], 16);
         }
 
         if (BitUtil.check(mask, 1)) {
@@ -518,7 +520,6 @@ private Position decodeUniversal(
             position.setValid(true);
 
             int count = Integer.parseInt(values[index++]);
-            index += 1;
 
             for (int i = 1; i <= count; i++) {
                 position.set("tag" + i + "Rssi", Integer.parseInt(values[index++]));

File: src/main/java/org/traccar/geocoder/HereGeocoder.java
Patch:
@@ -53,8 +53,8 @@ public Address parseAddress(JsonObject json) {
         if (result != null) {
             Address address = new Address();
 
-            if (json.containsKey("Label")) {
-                address.setFormattedAddress(json.getString("Label"));
+            if (result.containsKey("Label")) {
+                address.setFormattedAddress(result.getString("Label"));
             }
 
             if (result.containsKey("HouseNumber")) {

File: src/main/java/org/traccar/geocoder/HereGeocoder.java
Patch:
@@ -53,8 +53,8 @@ public Address parseAddress(JsonObject json) {
         if (result != null) {
             Address address = new Address();
 
-            if (json.containsKey("Label")) {
-                address.setFormattedAddress(json.getString("Label"));
+            if (result.containsKey("Label")) {
+                address.setFormattedAddress(result.getString("Label"));
             }
 
             if (result.containsKey("HouseNumber")) {

File: src/main/java/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -97,7 +97,7 @@ protected Object decode(
             long date = buf.readUnsignedIntLE();
 
             long days = BitUtil.from(date, 6 + 6 + 5);
-            if (days < 7 * 1024) {
+            if (days < 7 * 780) {
                 days += 7 * 1024;
             }
 

File: src/test/java/org/traccar/protocol/MxtProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = new MxtProtocolDecoder(null);
 
+        verifyPosition(decoder, binary(
+                "01a631a7627b00087dc41c40850006aab70affecdf23fd32200080000600000000000000000000001b2ff03b1bb9c4c60214f40100050000006c2d0000f427600051051101de0704"));
+
         verifyPosition(decoder, binary(
                 "01a631144c7e0008643ad2f456fb2d49747cfe4cbe0ffd002008800000001021000fd43d3f1403000000ff300000f42760001031102445a81fda04"));
 

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -399,8 +399,8 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                     break;
                 case 0xEE:
                     position.set(Position.KEY_RSSI, buf.readUnsignedByte());
-                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.01);
+                    position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+                    position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
                     position.set(Position.KEY_SATELLITES, buf.readUnsignedByte());
                     break;
                 default:

File: src/main/java/org/traccar/protocol/NavtelecomProtocolDecoder.java
Patch:
@@ -78,6 +78,7 @@ protected Object decode(
             buf.skipBytes(6);
 
             ByteBuf payload = Unpooled.buffer();
+            payload.writeCharSequence("*<FLEX", StandardCharsets.US_ASCII);
             payload.writeByte(buf.readUnsignedByte()); // protocol
             payload.writeByte(buf.readUnsignedByte()); // protocol version
             payload.writeByte(buf.readUnsignedByte()); // struct version

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -1131,7 +1131,7 @@ private Object decodeExtended(Channel channel, SocketAddress remoteAddress, Byte
 
         } else if (type == MSG_GPS_MODULAR) {
 
-            sendResponse(channel, false, type, buf.getShort(buf.writerIndex() - 6), null);
+            sendResponse(channel, true, type, buf.getShort(buf.writerIndex() - 6), null);
 
             return decodeExtendedModular(buf, deviceSession);
 

File: src/main/java/org/traccar/helper/BufferUtil.java
Patch:
@@ -41,7 +41,7 @@ public static int indexOf(String needle, ByteBuf haystack, int startIndex, int e
         wrappedHaystack.readerIndex(startIndex - haystack.readerIndex());
         wrappedHaystack.writerIndex(endIndex - haystack.readerIndex());
         int result = indexOf(needle, wrappedHaystack);
-        return result < 0 ? result : haystack.readerIndex() + result;
+        return result < 0 ? result : haystack.readerIndex() + startIndex + result;
     }
 
 }

File: src/main/java/org/traccar/handler/events/BehaviorEventHandler.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2020 Anton Tananaev (anton@traccar.org)
+ * Copyright 2021 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -44,7 +44,7 @@ public BehaviorEventHandler(Config config, IdentityManager identityManager) {
     protected Map<Event, Position> analyzePosition(Position position) {
 
         Position lastPosition = identityManager.getLastPosition(position.getDeviceId());
-        if (lastPosition != null) {
+        if (lastPosition != null && position.getFixTime().equals(lastPosition.getFixTime())) {
             double acceleration = UnitsConverter.mpsFromKnots(position.getSpeed() - lastPosition.getSpeed()) * 1000
                     / (position.getFixTime().getTime() - lastPosition.getFixTime().getTime());
             if (accelerationThreshold != 0 && acceleration >= accelerationThreshold) {

File: src/main/java/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -253,9 +253,6 @@ protected Object decode(
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
             if (type.startsWith("AL")) {
-                if (position != null) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_SOS);
-                }
                 sendResponse(channel, id, index, "AL");
             }
 

File: src/main/java/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -252,7 +252,7 @@ protected Object decode(
 
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 
-            if (type.equals("AL")) {
+            if (type.startsWith("AL")) {
                 if (position != null) {
                     position.set(Position.KEY_ALARM, Position.ALARM_SOS);
                 }

File: src/main/java/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -178,7 +178,7 @@ protected Object decode(
                 buf.readUnsignedByte();
                 buf.readUnsignedByte();
 
-                position.set(Position.KEY_RESULT, buf.readUnsignedByte());
+                position.set(Position.KEY_RESULT, String.valueOf(buf.readUnsignedByte()));
 
                 if (type == MSG_PERIPHERAL) {
 

File: src/test/java/org/traccar/protocol/KhdProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = new KhdProtocolDecoder(null);
 
+        verifyPosition(decoder, binary(
+                "2929800028258b8c10210731035840031534240542120200000337fb000000ffff5a00000a0000000005005d0d"));
+
         verifyPosition(decoder, binary(
                 "292980002825863156210105095059035109370460010100000211ffff000002fc0000001e780b12000034e70d"));
 

File: src/main/java/org/traccar/protocol/StbProtocolDecoder.java
Patch:
@@ -51,7 +51,7 @@ protected Object decode(
         JsonObject root = Json.createReader(new StringReader((String) msg)).readObject();
 
         Response response = new Response();
-        response.type = root.getInt("msgType");
+        response.type = root.getInt("msgType") + 1;
         response.deviceId = root.getString("devId");
         response.result = 1;
         response.transaction = root.getString("txnNo");

File: src/main/java/org/traccar/api/resource/PermissionsResource.java
Patch:
@@ -17,7 +17,6 @@
 package org.traccar.api.resource;
 
 import java.sql.SQLException;
-import java.util.ArrayList;
 import java.util.Collections;
 import java.util.LinkedHashMap;
 import java.util.List;

File: src/main/java/org/traccar/api/resource/PermissionsResource.java
Patch:
@@ -105,4 +105,5 @@ public Response remove(List<LinkedHashMap<String, Long>> entities) throws SQLExc
             Context.getPermissionsManager().refreshPermissions(new Permission(entities.get(0)));
         return Response.noContent().build();
     }
+
 }

File: src/test/java/org/traccar/protocol/StbProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         var decoder = new StbProtocolDecoder(null);
 
-        verifyPosition(decoder, text(
+        verifyNull(decoder, text(
                 "{\"devId\":\"CHZD08KPD0210425046\",\"devType\":2,\"hardVersion\":\"HDTTVA19\",\"msgType\":110,\"protocolVersion\":\"V1\",\"softVersion\":\"3.1.8\",\"switchCabStatus\":\"1\",\"txnNo\":\"1625212741537\"}"));
 
     }

File: src/test/java/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -17,6 +17,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "78780D01086471700328358100093F040D0A"));
 
+        verifyNull(decoder, binary(
+                "7878171915061810051a01f90101700d08c8f50c0000065494ae0d0a"));
+
         verifyNotNull(decoder, binary(
                 "78783B2E10010D02020201CC00287D001F713E287D001F7231287D001E232D287D001F4018000000000000000000000000000000000000FF00020005B14B0D0A"));
 

File: src/test/java/org/traccar/protocol/Minifinder2ProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "ab10150076f1320003100133353534363530373130323933303602105a"));
 
+        verifyNull(decoder, binary(
+                "AB101400594A01000310013836333932323033343437333734350112"));
+
         verifyPositions(decoder, binary(
                 "ab183200c6bd020101100138363838333230343730323133363209247a0b146090087a641528c03a79ba309be5dec3c2024122c21c2407676267"));
 

File: src/main/java/org/traccar/protocol/MegastekFrameDecoder.java
Patch:
@@ -46,6 +46,9 @@ protected Object decode(
             if (delimiter == -1) {
                 delimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '!');
             }
+            if (delimiter == -1) {
+                delimiter = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '\n');
+            }
             if (delimiter != -1) {
                 ByteBuf result = buf.readRetainedSlice(delimiter - buf.readerIndex());
                 buf.skipBytes(1);

File: src/main/java/org/traccar/geocoder/JsonGeocoder.java
Patch:
@@ -22,7 +22,7 @@
 import org.traccar.database.StatisticsManager;
 
 import javax.json.JsonObject;
-import javax.ws.rs.ClientErrorException;
+import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.client.Invocation;
 import javax.ws.rs.client.InvocationCallback;
 import java.util.AbstractMap;
@@ -116,7 +116,7 @@ public void failed(Throwable throwable) {
         } else {
             try {
                 return handleResponse(latitude, longitude, request.get(JsonObject.class), null);
-            } catch (ClientErrorException e) {
+            } catch (WebApplicationException e) {
                 LOGGER.warn("Geocoder network error", e);
             }
         }

File: src/main/java/org/traccar/geocoder/JsonGeocoder.java
Patch:
@@ -22,7 +22,7 @@
 import org.traccar.database.StatisticsManager;
 
 import javax.json.JsonObject;
-import javax.ws.rs.ClientErrorException;
+import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.client.Invocation;
 import javax.ws.rs.client.InvocationCallback;
 import java.util.AbstractMap;
@@ -116,7 +116,7 @@ public void failed(Throwable throwable) {
         } else {
             try {
                 return handleResponse(latitude, longitude, request.get(JsonObject.class), null);
-            } catch (ClientErrorException e) {
+            } catch (WebApplicationException e) {
                 LOGGER.warn("Geocoder network error", e);
             }
         }

File: src/main/java/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -246,7 +246,7 @@ private Position decodeOld(Channel channel, SocketAddress remoteAddress, String
             .number("(d+.d+),")                  // hdop
             .number("(d+.d+)?,")                 // speed
             .number("(d+.d+)?,")                 // course
-            .number("(-?d+.d+)?,")                // altitude
+            .number("(-?d+.d+)?,")               // altitude
             .number("(d+.d+)?,")                 // odometer
             .number("(d+),")                     // mcc
             .number("(d+),")                     // mnc

File: src/main/java/org/traccar/web/WebServer.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2020 Anton Tananaev (anton@traccar.org)
+ * Copyright 2012 - 2021 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -136,6 +136,7 @@ public void doScope(
     private void initWebApp(Config config, ServletContextHandler servletHandler) {
         ServletHolder servletHolder = new ServletHolder(DefaultServlet.class);
         servletHolder.setInitParameter("resourceBase", new File(config.getString(Keys.WEB_PATH)).getAbsolutePath());
+        servletHolder.setInitParameter("dirAllowed", "false");
         if (config.getBoolean(Keys.WEB_DEBUG)) {
             servletHandler.setWelcomeFiles(new String[] {"debug.html", "index.html"});
         } else {

File: src/test/java/org/traccar/protocol/RuptelaProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = new RuptelaProtocolDecoder(null);
 
+        verifyPositions(decoder, binary(
+                "00800003167d765c155d01000160cd0a310000faae43f7176ee45702332b0c12000006070d05007300cfff260082008600870088000f00d7021100d801c900061d0000c500001e0e988300008900008b000002d0000c9bca720c889a0b047e00000000000000007f0000000000000000800000000000000000810000000000000000a341"));
+
         verifyNull(decoder, binary(
                 "03fc0003142b0c152acd2502003544444131464144000a0000ffd8ffe000104a46494600010100000100010000ffdb00c50006040506050406060506070706080a100a0a09090a140e0f0c1017141818171416161a1d251f1a1b231c1616202c20232627292a29191f2d302d283025282928010707070a080a130a0a13281a161a2828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828020707070a080a130a0a13281a161a2828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828ffc000110800f0014003012200021101031102ffc401a20000010501010101010100000000000000000102030405060708090a0b100002010303020403050504040000017d01020300041105122131410613516107227114328191a1082342b1c11552d1f02433627282090a161718191a25262728292a3435363738393a434445464748494a535455565758595a636465666768696a737475767778797a838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae1e2e3e4e5e6e7e8e9eaf1f2f3f4f5f6f7f8f9fa0100030101010101010101010000000000000102030405060708090a0b1100020102040403040705040400010277000102031104052131061241510761711322328108144291a1b1c109233352f0156272d10a162434e125f11718191a262728292a35363738393a434445464748494a535455565758595a636465666768696a737475767778797a82838485868788898a92939495969798999aa2a3a4a5a6a7a8a9aab2b3b4b5b6b7b8b9bac2c3c4c5c6c7c8c9cad2d3d4d5d6d7d8d9dae2e3e4e5e6e7e8e9eaf2f3f4f5f6f7f8f9faffdd00040000ffda000c03010002110311003f00e27534fde484fa66950079add40e153754d73892794f552e00a6da0c4b282794f947d2aa92b2b1d7887795fb9b5a4200eee7e957e6bdfb2b0f2cb6eff669cba4dee99656d25f5acb02dd209622e38753d08fc315177cf151562e337196e8e46f5352cb5d6603cd52ebeb8c1adcb4be82e07eedc67d0f06b8f071daa64618c8383508573ae991251891430f7a836cd07fa97de9fdc7fe86b0adf51b8830377989e8d5a96daa413603131bfa350061fc49d41adbc39e5edc34ee14f7c639af1b91f2719aef7e2c5d4bf6cb780b7ee7607500f19e735e7a06e3c9e2b4a4b4b88b51b2aaf14bbc1351226796a79e3815b81283c500d460d381a405988d7a6785ad8c3a241bc9f9f2e47d7ffad5e73a5db35dddc30a757603e83bd7aba011c6a8bc2a8000a89e8807b1551815a5636fba38ce3af359248cd7516298862ff7456713fc58"));
 

File: src/main/java/org/traccar/protocol/UuxProtocolDecoder.java
Patch:
@@ -98,11 +98,11 @@ protected Object decode(
             position.set(Position.KEY_SATELLITES, readInt(buf, 2));
 
             double latitude = readInt(buf, 2);
-            latitude += readDouble(buf, 7);
+            latitude += readDouble(buf, 7) / 60;
             position.setLatitude(buf.readUnsignedByte() == 'S' ? -latitude : latitude);
 
             double longitude = readInt(buf, 3);
-            longitude += readDouble(buf, 7);
+            longitude += readDouble(buf, 7) / 60;
             position.setLongitude(buf.readUnsignedByte() == 'W' ? -longitude : longitude);
 
             position.setSpeed(readInt(buf, 3));

File: src/main/java/org/traccar/protocol/UproProtocolDecoder.java
Patch:
@@ -307,7 +307,9 @@ protected Object decode(
                     }
                     break;
                 case 'b':
-                    position.set("serial", data.toString(StandardCharsets.US_ASCII).substring(3));
+                    if (data.readableBytes() > 3) {
+                        position.set("serial", data.toString(StandardCharsets.US_ASCII).substring(3));
+                    }
                     break;
                 default:
                     break;

File: src/main/java/org/traccar/protocol/TaipPrefixEncoder.java
Patch:
@@ -38,9 +38,9 @@ public TaipPrefixEncoder(Protocol protocol) {
     @Override
     protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception {
         if (Context.getConfig().getBoolean(Keys.PROTOCOL_PREFIX.withPrefix(protocol.getName()))) {
-            out.add(Unpooled.wrappedBuffer(Unpooled.wrappedBuffer(new byte[] {0x20, 0x20, 0x06, 0x00}), msg));
+            out.add(Unpooled.wrappedBuffer(Unpooled.wrappedBuffer(new byte[] {0x20, 0x20, 0x06, 0x00}), msg.retain()));
         } else {
-            out.add(msg);
+            out.add(msg.retain());
         }
     }
 

File: src/main/java/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -313,7 +313,7 @@ private Position decodeAttributes(
                 if (messageIndex != null) {
                     String response;
                     if (messageIndex.startsWith("#IP")) {
-                        response = "\u0020\u0020\u0006\u0000>SAK;ID=" + uniqueId + ";" + messageIndex + "<";
+                        response = ">SAK;ID=" + uniqueId + ";" + messageIndex + "<";
                     } else {
                         response = ">ACK;ID=" + uniqueId + ";" + messageIndex + ";*";
                         response += String.format("%02X", Checksum.xor(response)) + "<";

File: src/main/java/org/traccar/protocol/UuxProtocolDecoder.java
Patch:
@@ -22,6 +22,7 @@
 import org.traccar.DeviceSession;
 import org.traccar.NetworkMessage;
 import org.traccar.Protocol;
+import org.traccar.helper.BitUtil;
 import org.traccar.helper.DateBuilder;
 import org.traccar.model.Position;
 
@@ -40,10 +41,10 @@ public UuxProtocolDecoder(Protocol protocol) {
     public static final int MSG_NACK = 0xF0;
 
     private void sendResponse(Channel channel, int productCode, int protocolVersion, int type) {
-        if (channel != null) {
+        if (channel != null && BitUtil.check(protocolVersion, 7)) {
             ByteBuf response = Unpooled.buffer();
             response.writeShort(productCode);
-            response.writeByte(protocolVersion);
+            response.writeByte(BitUtil.to(protocolVersion, 7));
             response.writeByte(1); // length
             response.writeByte(type);
             channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));

File: src/main/java/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -355,7 +355,7 @@ private Position decodeNew(Channel channel, SocketAddress remoteAddress, String
         }
 
         position.set(Position.KEY_DRIVER_UNIQUE_ID, parser.next());
-        
+
         if (parser.hasNext()) {
             position.set(Position.KEY_CHARGE, parser.nextInt() > 0);
         }

File: src/main/java/org/traccar/protocol/TaipPrefixEncoder.java
Patch:
@@ -38,7 +38,7 @@ public TaipPrefixEncoder(Protocol protocol) {
     @Override
     protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception {
         if (Context.getConfig().getBoolean(Keys.PROTOCOL_PREFIX.withPrefix(protocol.getName()))) {
-            Unpooled.wrappedBuffer(Unpooled.wrappedBuffer(new byte[] {0x20, 0x20, 0x06, 0x00}), msg);
+            out.add(Unpooled.wrappedBuffer(Unpooled.wrappedBuffer(new byte[] {0x20, 0x20, 0x06, 0x00}), msg));
         } else {
             out.add(msg);
         }

File: src/test/java/org/traccar/protocol/FlexibleReportProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = new FlexibleReportProtocolDecoder(null);
 
+        verifyPosition(decoder, binary(
+                "7d010015875000013001001028fd98991830002e7fffffff0c28fd989903f6540a07f250ed00000f02f2140f5ea20000000000000202d4000a1f8b0100000708ffff"));
+
         verifyAttributes(decoder, binary(
                 "7D010860112040978399000027E3CFC30130002E7FFFFFFF0C00000000055D4A800ABA9500000000000000002F5D0E800000000000FFFFFFFF158A0000000000FFFF"));
 

File: src/test/java/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -19,7 +19,7 @@ public void testDecode() throws Exception {
 
         verifyAttribute(decoder, binary(
                 "78782b1215050d03041bcf031ff30a0be795bc001c17014e14a065dd95314504b6040000001c00000cd90ab8fb6f0d0a"),
-                Position.PREFIX_TEMP + 1, 0);
+                Position.PREFIX_TEMP + 1, 0x1c);
 
         verifyAttribute(decoder, binary(
                 "7878151330802b00000642014f0008720000802b5ee4d4c90d0a"),

File: src/main/java/org/traccar/protocol/StartekProtocolDecoder.java
Patch:
@@ -156,7 +156,7 @@ protected Object decode(
                 if (BitUtil.check(value, 15)) {
                     convertedValue = -convertedValue;
                 }
-                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.01);
+                position.set(Position.PREFIX_TEMP + index, convertedValue * 0.1);
             }
         }
 

File: src/main/java/org/traccar/protocol/Gs100ProtocolDecoder.java
Patch:
@@ -26,6 +26,7 @@
 import org.traccar.helper.BcdUtil;
 import org.traccar.helper.BitUtil;
 import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -107,7 +108,7 @@ protected Object decode(
                     }
 
                     String other = ByteBufUtil.hexDump(buf.readSlice(4));
-                    position.setSpeed(Integer.parseInt(other.substring(0, 5)) * 0.01);
+                    position.setSpeed(UnitsConverter.knotsFromKph(Integer.parseInt(other.substring(0, 5)) * 0.01));
                     position.setCourse(Integer.parseInt(other.substring(5, 8)));
 
                 } else {

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -158,7 +158,7 @@ private Keys() {
      * Indicates whether TAIP protocol should have prefixes for messages.
      */
     public static final ConfigSuffix<Boolean> PROTOCOL_PREFIX = new ConfigSuffix<>(
-            ".alarmMap",
+            ".prefix",
             Collections.singletonList(KeyType.GLOBAL));
 
     /**

File: src/main/java/org/traccar/protocol/Gs100ProtocolDecoder.java
Patch:
@@ -99,15 +99,15 @@ protected Object decode(
                     position.setLatitude(Integer.parseInt(coordinates.substring(10, 12))
                             + Integer.parseInt(coordinates.substring(12, 18)) * 0.0001 / 60);
                     int flags = Integer.parseInt(coordinates.substring(9, 10), 16);
-                    if (!BitUtil.check(flags, 4)) {
+                    if (!BitUtil.check(flags, 3)) {
                         position.setLongitude(-position.getLongitude());
                     }
-                    if (!BitUtil.check(flags, 3)) {
+                    if (!BitUtil.check(flags, 2)) {
                         position.setLatitude(-position.getLatitude());
                     }
 
                     String other = ByteBufUtil.hexDump(buf.readSlice(4));
-                    position.setSpeed(Integer.parseInt(other.substring(0, 5)));
+                    position.setSpeed(Integer.parseInt(other.substring(0, 5)) * 0.01);
                     position.setCourse(Integer.parseInt(other.substring(5, 8)));
 
                 } else {

File: src/test/java/org/traccar/protocol/Gs100ProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "474C490F383632343632303332353036373030133839333831303131363039313838343837323546084657312E302E3236"));
 
+        verifyPositions(decoder, binary(
+                "47440416900000124833220421018478956c445263460110426616900000124838220421018478907c445263470055824116900000124839220421018478890c445263440091526116900000124840220421018478867c4452634401312272"));
+
         verifyPositions(decoder, binary(
                 "47440216900000064113030417020236402C452286650051929716900000064115030417020236408C4522866800379020"));
 

File: src/test/java/org/traccar/protocol/StartekProtocolEncoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testEncodeEngineStop() {
         command.setDeviceId(1);
         command.setType(Command.TYPE_ENGINE_STOP);
 
-        assertEquals("$$:23,123456789012345,900,1,19E\r\n", encoder.encodeCommand(null, command));
+        assertEquals("$$:24,123456789012345,900,1,19F\r\n", encoder.encodeCommand(null, command));
 
     }
 

File: src/main/java/org/traccar/protocol/StartekProtocolEncoder.java
Patch:
@@ -31,7 +31,7 @@ public StartekProtocolEncoder(Protocol protocol) {
     protected String formatCommand(Command command, String format, String... keys) {
         String uniqueId = getUniqueId(command.getDeviceId());
         String payload = super.formatCommand(command, format, keys);
-        int length = uniqueId.length() + 1 + payload.length();
+        int length = 1 + uniqueId.length() + 1 + payload.length();
         String sentence = "$$:" + length + "," + uniqueId + "," + payload;
         return sentence + Checksum.sum(sentence) + "\r\n";
     }

File: src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
Patch:
@@ -148,9 +148,9 @@ protected Object decode(
                 DateFormat dateFormat = new SimpleDateFormat("ddMMyyyyHHmmss");
                 dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
                 String time = dateFormat.format(new Date());
-                channel.writeAndFlush(new NetworkMessage("$,LGN," + time + ",*", remoteAddress));
+                channel.writeAndFlush(new NetworkMessage("$LGN" + time + "*", remoteAddress));
             } else if (sentence.startsWith("$,HBT,")) {
-                channel.writeAndFlush(new NetworkMessage("$,HBT,*", remoteAddress));
+                channel.writeAndFlush(new NetworkMessage("$HBT*", remoteAddress));
             }
         }
 

File: src/main/java/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -60,9 +60,9 @@ public Tk103ProtocolDecoder(Protocol protocol) {
             .groupEnd()
             .number("(dd)(dd)(dd),?")            // date (mmddyy if comma-delimited, otherwise yyddmm)
             .expression("([AV]),?")              // validity
-            .number(" *(d+)(dd.d+)")             // latitude
+            .number(" *(d*)(dd.d+)")             // latitude
             .expression("([NS]),?")
-            .number(" *(d+)(dd.d+)")             // longitude
+            .number(" *(d*)(dd.d+)")             // longitude
             .expression("([EW]),?")
             .number("([ d.]{1,5})(?:d*,)?")      // speed
             .number("(dd)(dd)(dd),?")            // time (hhmmss)

File: src/test/java/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         var decoder = new Tk103ProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "(868822040452227,DW3B,150421,A,4154.51607N,45.78950E,0.050,103142,0.000,595.200,7,0)"));
+
         verifyPosition(decoder, text(
                 "(086375304593BR00210119A2220.0160N11335.4073E0000014000309.84001000293L0000015FP23BS27F)"));
 

File: src/main/java/org/traccar/protocol/StartekProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public StartekProtocolDecoder(Protocol protocol) {
             .number("d+,")                       // length
             .number("(d+),")                     // imei
             .number("xxx,")                      // command
-            .number("(d),")                      // event
+            .number("(d+),")                     // event
             .expression("[^,]*,")                // event data
             .number("(dd)(dd)(dd)")              // date (yyymmdd)
             .number("(dd)(dd)(dd),")             // time (hhmmss)

File: src/test/java/org/traccar/protocol/StartekProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         var decoder = new StartekProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "&&>141,860262050010565,000,36,,210407094323,V,-38.229711,145.043161,0,0.0,0,0,0,14222,505|1|306E|082D6115,24,00000039,00,00,04C0|0164|0000|0000,1,,41"));
+
         verifyPosition(decoder, text(
                 "&&A147,021104023195429,000,0,,180106093046,A,22.646430,114.065730,8,0.9,54,86,76,326781,460|0|27B3|0EA7,27,0000000F,02,01,04E2|018C|01C8|0000,1,0104B0,01013D|02813546"));
 

File: src/test/java/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "000F313233343536373839303132333435"));
 
+        verifyPositions(decoder, binary(
+                "00000000000000a38e0100000178b11c9e1000040bbbc91f03190c002100e113001300000010000600ef0100f00100150300c800004501001e070005004237e00018000a00ce166200430f970024059f000300f10000665900c70000001e00100000a1b500000002010000115756315a5a5a32455a38363031353338380119002950303239392c50303637352c50303637342c50303637322c50303637312c50303437312c50324241430100001ad8"));
+
         verifyPositions(decoder, binary(
                 "00000000000000858e0200000174431aadc100061d888f21000e8a0032002e0c000001810001000000000000000000010181001711210102030405060708090a0b0c0d0e0f10020b010ad000000174431a389100061d888f21000e8a0033002e0d000001810001000000000000000000010181001711210102030405060708090a0b0c0d0e0f10020b010ad2020000492b"));
 

File: src/main/java/org/traccar/sms/SnsSmsClient.java
Patch:
@@ -17,19 +17,18 @@
 
 import com.amazonaws.auth.AWSStaticCredentialsProvider;
 import com.amazonaws.auth.BasicAWSCredentials;
-import com.amazonaws.services.sns.*;
+import com.amazonaws.services.sns.AmazonSNSAsync;
+import com.amazonaws.services.sns.AmazonSNSAsyncClientBuilder;
 import com.amazonaws.services.sns.model.MessageAttributeValue;
 import com.amazonaws.services.sns.model.PublishRequest;
 
-import com.amazonaws.services.sns.model.PublishResult;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.traccar.Context;
 import org.traccar.config.Keys;
 
 import java.util.HashMap;
 import java.util.Map;
-import java.util.concurrent.Future;
 
 public class SnsSmsClient implements SmsManager {
     private static final Logger LOGGER = LoggerFactory.getLogger(SnsSmsClient.class);

File: src/main/java/org/traccar/sms/SnsSmsClient.java
Patch:
@@ -39,8 +39,8 @@ public SnsSmsClient() {
         }
     }
 
-    public AmazonSNS awsSNSClient(String access_key, String secret_key, String region) {
-        BasicAWSCredentials awsCreds = new BasicAWSCredentials(access_key, secret_key);
+    public AmazonSNS awsSNSClient(String accessKey, String secretKey, String region) {
+        BasicAWSCredentials awsCreds = new BasicAWSCredentials(accessKey, secretKey);
         return AmazonSNSClientBuilder.standard().withRegion(region)
                 .withCredentials(new AWSStaticCredentialsProvider(awsCreds)).build();
     }

File: src/main/java/org/traccar/Context.java
Patch:
@@ -318,7 +318,7 @@ public static void init(String configFile) throws Exception {
 
         if (config.hasKey(Keys.SMS_HTTP_URL)) {
             smsManager = new HttpSmsClient();
-        } else if (config.hasKey(Keys.AWS_SNS_ENABLED)) {
+        } else if (config.hasKey(Keys.AWS_REGION)) {
             smsManager = new SnsSmsClient();
         }
 

File: src/main/java/org/traccar/sms/SnsSmsClient.java
Patch:
@@ -39,8 +39,8 @@ public SnsSmsClient() {
         }
     }
 
-    public AmazonSNS awsSNSClient(String access_key, String secret_key, String region) {
-        BasicAWSCredentials awsCreds = new BasicAWSCredentials(access_key, secret_key);
+    public AmazonSNS awsSNSClient(String accessKey, String secretKey, String region) {
+        BasicAWSCredentials awsCreds = new BasicAWSCredentials(accessKey, secretKey);
         return AmazonSNSClientBuilder.standard().withRegion(region)
                 .withCredentials(new AWSStaticCredentialsProvider(awsCreds)).build();
     }

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -691,22 +691,22 @@ private Keys() {
      * AWS Access Key with SNS permission.
      */
     public static final ConfigKey<String> AWS_ACCESS_KEY = new ConfigKey<>(
-            "aws.access_key",
+            "aws.access",
             Collections.singletonList(KeyType.GLOBAL));
 
     /**
      * AWS Secret Access Key with SNS permission.
      */
     public static final ConfigKey<String> AWS_SECRET_KEY = new ConfigKey<>(
-            "aws.secret_key",
+            "aws.secret",
             Collections.singletonList(KeyType.GLOBAL));
 
     /**
      * SNS Enable switch.
      * Use 'enable' to send message with SNS or 'disable' to stop using SNS
      */
     public static final ConfigKey<String> AWS_SNS_ENABLED = new ConfigKey<>(
-            "aws.sns_enabled",
+            "aws.sns.enabled",
             Collections.singletonList(KeyType.GLOBAL));
 
     /**

File: src/main/java/org/traccar/sms/SnsSmsClient.java
Patch:
@@ -17,7 +17,7 @@
 import java.util.Map;
 
 
-public class SnsSmsClient implements SmsManager{
+public class SnsSmsClient implements SmsManager {
     private static final Logger LOGGER = LoggerFactory.getLogger(SnsSmsClient.class);
 
     private final String access_key;
@@ -57,7 +57,8 @@ public void sendSNSMessage(String message, String destAddress) {
     }
 
     @java.lang.Override
-    public void sendMessageSync(String destAddress, String message, boolean command) throws InterruptedException, MessageException {
+    public void sendMessageSync(String destAddress, String message, boolean command)
+            throws InterruptedException, MessageException {
         sendSNSMessage(message, destAddress);
     }
 

File: src/main/java/org/traccar/protocol/RstProtocolDecoder.java
Patch:
@@ -80,15 +80,15 @@ protected Object decode(
             return null;
         }
 
-        String archive = parser.next();
+        parser.next(); // archive
         String model = parser.next();
         String firmware = parser.next();
         String serial = parser.next();
         int index = parser.nextInt();
         parser.nextInt(); // type
 
         if (channel != null) {
-            String response = "RST;" + archive + ";" + model + ";" + firmware + ";" + serial + ";" + index + ";6;FIM;";
+            String response = "RST;A;" + model + ";" + firmware + ";" + serial + ";" + index + ";6;FIM;";
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 

File: src/test/java/org/traccar/protocol/FreematicsProtocolDecoderTest.java
Patch:
@@ -34,7 +34,7 @@ public void testDecode() throws Exception {
         verifyPositions(decoder, text(
                 "1#0=68338,10D=79,30=1010,105=199,10C=4375,104=56,111=62,20=0;-1;95,10=6454200,A=-32.727482,B=150.150301,C=159,D=0,F=5,24=1250*7A"));
 
-        verifyAttributes(decoder, text(
+        verifyPositions(decoder, false, text(
                 "M0ZR4X0#0:566624,24:1246,20:0;0;0*D"));
 
         verifyNull(decoder, text(

File: src/test/java/org/traccar/protocol/Minifinder2ProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "ab10150076f1320003100133353534363530373130323933303602105a"));
 
+        verifyPositions(decoder, binary(
+                "ab183200c6bd020101100138363838333230343730323133363209247a0b146090087a641528c03a79ba309be5dec3c2024122c21c2407676267"));
+
         verifyNotNull(decoder, binary(
                 "ab18480066b107010110013836383833323034373030373832350924a230e35f8200ea312b22bc7894b4b86956a31cbdb989fdb8b502ad2449ea60ab646eea0d5663c59c3dcf05549eb3b095754322df"));
 

File: src/main/java/org/traccar/protocol/NetProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ protected Object decode(
 
         position.set(Position.KEY_STATUS, parser.nextHexLong());
         position.setSpeed(parser.nextHexInt() * 0.01);
-        position.set(Position.KEY_ODOMETER, parser.nextHexInt());
+        position.set(Position.KEY_ODOMETER, parser.nextHexInt() * 1852.0 / 16);
         position.setCourse(parser.nextHexInt());
 
         parser.nextHexInt(); // alarm

File: src/main/java/org/traccar/protocol/DolphinProtocol.java
Patch:
@@ -28,7 +28,7 @@ public DolphinProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                pipeline.addLast(new LengthFieldBasedFrameDecoder(ByteOrder.LITTLE_ENDIAN, 4096, 20, 4, 0, 0, true));
+                pipeline.addLast(new LengthFieldBasedFrameDecoder(ByteOrder.LITTLE_ENDIAN, 4096, 20, 4, 4, 0, true));
                 pipeline.addLast(new DolphinProtocolDecoder(DolphinProtocol.this));
             }
         });

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -285,7 +285,7 @@ private void decodeOtherParameter(Position position, int id, ByteBuf buf, int le
                 break;
             case 236:
                 if (readValue(buf, length, false) == 1) {
-                    position.set(Position.KEY_ALARM, Position.ALARM_OVERSPEED);
+                    position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
                 }
                 break;
             case 239:

File: src/main/java/org/traccar/protocol/Minifinder2Protocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2021 Anton Tananaev (anton@traccar.org)
+ * Copyright 2019 - 2021 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/main/java/org/traccar/protocol/IotmProtocolDecoder.java
Patch:
@@ -159,7 +159,9 @@ protected Object decode(
 
                         } else {
 
-                            if (sensorType == 3) continue;
+                            if (sensorType == 3) {
+                                continue;
+                            }
 
                             String key;
                             switch (sensorId) {

File: src/test/java/org/traccar/protocol/IotmProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, MqttMessageBuilders.connect().clientId(
                 "123456789012345").build());
 
+        verifyPositions(decoder, false, MqttMessageBuilders.publish().payload(binary(
+                "020208009188752DE7120300030A002000AD59000146543250030A002200AD59643346543250FB")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
+
         verifyPositions(decoder, false, MqttMessageBuilders.publish().payload(binary(
                 "020208004f6af053901403000135007715ec5f0d02b000485cea73083041040b30ee050030ae38040020120e00d0d34bc9412e9c5d4212000806ee00feff011300006d006e")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
 

File: src/main/java/org/traccar/protocol/IotmProtocolDecoder.java
Patch:
@@ -150,7 +150,7 @@ protected Object decode(
 
                     Position position = new Position(getProtocolName());
                     position.setDeviceId(deviceSession.getDeviceId());
-                    position.setTime(new Date(record.readUnsignedIntLE()));
+                    position.setTime(new Date(record.readUnsignedIntLE() * 1000));
 
                     while (record.readableBytes() > 0) {
                         int sensorType = record.readUnsignedByte();

File: src/test/java/org/traccar/protocol/IotmProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, MqttMessageBuilders.connect().clientId(
                 "123456789012345").build());
 
+        verifyPositions(decoder, false, MqttMessageBuilders.publish().payload(binary(
+                "020208004f6af053901403000135007715ec5f0d02b000485cea73083041040b30ee050030ae38040020120e00d0d34bc9412e9c5d4212000806ee00feff011300006d006e")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
+
         verifyPositions(decoder, false, MqttMessageBuilders.publish().payload(binary(
                 "020208009188752DE7120300013A002000AD59050030B135030340030C300301A00302A00E00D0B9AB5B420334C04100001F060000320004072064008C000162002000C004476F6F440109002100AD59050030BA359B")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
 

File: src/main/java/org/traccar/protocol/IotmProtocolDecoder.java
Patch:
@@ -117,10 +117,10 @@ protected Object decode(
 
         } else if (msg instanceof MqttSubscribeMessage) {
 
-            MqttPublishMessage message = (MqttPublishMessage) msg;
+            MqttSubscribeMessage message = (MqttSubscribeMessage) msg;
 
             MqttMessage response = MqttMessageBuilders.subAck()
-                    .packetId((short) message.variableHeader().packetId())
+                    .packetId((short) message.variableHeader().messageId())
                     .build();
 
             if (channel != null) {

File: src/test/java/org/traccar/protocol/IotmProtocolDecoderTest.java
Patch:
@@ -16,10 +16,10 @@ public void testDecode() throws Exception {
                 "123456789012345").build());
 
         verifyPositions(decoder, false, MqttMessageBuilders.publish().payload(binary(
-                "020208009188752DE7120300013A002000AD59050030B135030340030C300301A00302A00E00D0B9AB5B420334C04100001F060000320004072064008C000162002000C004476F6F440109002100AD59050030BA359B")).qos(MqttQoS.EXACTLY_ONCE).build());
+                "020208009188752DE7120300013A002000AD59050030B135030340030C300301A00302A00E00D0B9AB5B420334C04100001F060000320004072064008C000162002000C004476F6F440109002100AD59050030BA359B")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
 
         verifyPositions(decoder, false, MqttMessageBuilders.publish().payload(binary(
-                "020208009188752DE71203000109002000AD590500309635F3")).qos(MqttQoS.EXACTLY_ONCE).build());
+                "020208009188752DE71203000109002000AD590500309635F3")).qos(MqttQoS.EXACTLY_ONCE).messageId(1).build());
 
     }
 

File: src/main/java/org/traccar/config/Config.java
Patch:
@@ -55,7 +55,7 @@ public Config(String file) throws IOException {
         }
     }
 
-    public boolean hasKey(ConfigKey<String> key) {
+    public boolean hasKey(ConfigKey<?> key) {
         return hasKey(key.getKey());
     }
 

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -40,7 +40,7 @@ public final class Keys {
      * Address for uploading aggregated anonymous usage statistics. Uploaded information is the same you can see on the
      * statistics screen in the web app. It does not include any sensitive (e.g. locations).
      */
-    public static final ConfigKey<Boolean> SERVER_STATISTICS = new ConfigKey<>(
+    public static final ConfigKey<String> SERVER_STATISTICS = new ConfigKey<>(
             "server.statistics",
             Collections.singletonList(KeyType.GLOBAL));
 
@@ -547,15 +547,15 @@ public final class Keys {
      * Override latitude sign / hemisphere. Useful in cases where value is incorrect because of device bug. Value can be
      * N for North or S for South.
      */
-    public static final ConfigKey<Boolean> LOCATION_LATITUDE_HEMISPHERE = new ConfigKey<>(
+    public static final ConfigKey<String> LOCATION_LATITUDE_HEMISPHERE = new ConfigKey<>(
             "location.latitudeHemisphere",
             Collections.singletonList(KeyType.GLOBAL));
 
     /**
      * Override longitude sign / hemisphere. Useful in cases where value is incorrect because of device bug. Value can
      * be E for East or W for West.
      */
-    public static final ConfigKey<Boolean> LOCATION_LONGITUDE_HEMISPHERE = new ConfigKey<>(
+    public static final ConfigKey<String> LOCATION_LONGITUDE_HEMISPHERE = new ConfigKey<>(
             "location.longitudeHemisphere",
             Collections.singletonList(KeyType.GLOBAL));
 

File: src/main/java/org/traccar/protocol/TmgFrameDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2017 - 2020 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ && isLetter(buffer.getByte(guessedIndex + 2))
                         && isLetter(buffer.getByte(guessedIndex + 3))) {
                 return guessedIndex;
             }
-            guessedIndex = buffer.indexOf(guessedIndex, buffer.writerIndex(), (byte) '$');
+            guessedIndex = buffer.indexOf(guessedIndex + 1, buffer.writerIndex(), (byte) '$');
         }
         return -1;
     }

File: src/test/java/org/traccar/protocol/TmgFrameDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         TmgFrameDecoder decoder = new TmgFrameDecoder();
 
+        verifyNull(
+                decoder.decode(null, null, binary("2424242424")));
+
         verifyFrame(
                 binary("24696f662c3836343530323033373939393630342c323238323133323031372c383132343238302c302c3239393133363231362e2d3438323235383537362ca52c313337393234353339382e3831383733343637362c142c2d36393936393937332e302c313135333435343433372e2d313938363833343039322c3439323039373739392c32302c302c2d3332302c302c4c4c4c4c2c4e4e544e2c48482c302e31372c332e30312c3330313131363030312c302c56455230302e3161"),
                 decoder.decode(null, null, binary("111538360b383634353032303337393939363034eb0b1c8d00ffff23000000000000000000000000000000001c9401008c320c00188901000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000000000000000000000001d940100c8950100bd0024696f662c3836343530323033373939393630342c323238323133323031372c383132343238302c302c3239393133363231362e2d3438323235383537362ca52c313337393234353339382e3831383733343637362c142c2d36393936393937332e302c313135333435343433372e2d313938363833343039322c3439323039373739392c32302c302c2d3332302c302c4c4c4c4c2c4e4e544e2c48482c302e31372c332e30312c3330313131363030312c302c56455230302e31610a000195010090960100bd0024746d702c3836343530323033373939393630342c323238323133323031372c383132343238302c302c3239393133363231362e2d3438323235383537362ca52c313337393234353339382e3831383733343637362c142c2d36393936393937332e302c313135333435343433372e2d313938363833343039322c3439323039373739392c32302c302c2d3237372c302c4c4c4c4c2c4e4e544e2c48482c302e31372c332e30312c3330313131363030312c302c56455230302e31610a00c9950100289701008b002462616b2c3836343530323033373939393630342c32313131323031372c3132303230312c312c323832362e353938312c4e2c30373731382e363436352c452c3030302e302c3239382e35322c35323834372c32322c332c2d3233392c302c4c4c4c4c2c4e4e544e2c48482c302e32342c332e30332c3330313131363030312c302c56455230302e31610a00000091960100c09701008b002462616b2c3836343530323033373939393630342c32313131323031372c3132303231322c312c323832362e353938312c4e2c30373731382e363437322c452c3030302e302c3037392e34322c35323834372c32332c332c2d3230352c302c4c4c4c4c2c4e4e544e2c48482c302e31352c332e30332c3330313131363030312c302c56455230302e31610a00000029970100589801008a002462616b2c3836343530323033373939393630342c32313131323031372c3132303232322c312c323832362e353938302c4e2c30373731382e363438352c452c3030302e302c3037372e332c35323834372c32332c332c2d3137342c302c4c4c4c4c2c4e4e544e2c48482c302e31382c332e30332c3330313131363030312c302c56455230302e31610a00000000c1970100f09801008a002462616b2c3836343530323033373939393630342c32313131323031372c3132303233312c312c323832362e353936342c4e2c30373731382e363437312c452c3030302e302c3133312e352c35323834372c32322c342c2d3134362c302c4c4c4c4c2c4e4e544e2c48482c302e31392c332e30332c3330313131363030312c302c56455230302e31610a0000000059980100889901008b002462616b2c3836343530323033373939393630342c32313131323031372c3132303234332c312c323832362e353935382c4e2c30373731382e363436382c452c3030302e302c3133392e36362c35323834372c32322c342c2d3132312c302c4c4c4c4c2c4e4e544e2c48482c302e31322c332e30332c3330313131363030312c302c56455230302e31610a000000f1980100209a01008a002462616b2c3836343530323033373939393630342c32313131323031372c3132303235332c312c323832362e353934392c4e2c30373731382e363436")));

File: src/main/java/org/traccar/config/ConfigSuffix.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2019 Anton Tananaev (anton@traccar.org)
+ * Copyright 2019 - 2020 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -17,7 +17,7 @@
 
 public class ConfigSuffix extends ConfigKey {
 
-    ConfigSuffix(String key, Class clazz) {
+    ConfigSuffix(String key, Class<?> clazz) {
         super(key, clazz);
     }
 

File: src/main/java/org/traccar/reports/model/BaseReport.java
Patch:
@@ -60,7 +60,7 @@ public double getAverageSpeed() {
         return averageSpeed;
     }
 
-    public void setAverageSpeed(Double averageSpeed) {
+    public void setAverageSpeed(double averageSpeed) {
         this.averageSpeed = averageSpeed;
     }
 

File: src/main/java/org/traccar/reports/Summary.java
Patch:
@@ -50,7 +50,9 @@ private static SummaryReport calculateSummaryResult(long deviceId, Collection<Po
                 }
                 previousPosition = position;
                 speedSum += position.getSpeed();
-                result.setMaxSpeed(position.getSpeed());
+                if (position.getSpeed() > result.getMaxSpeed()) {
+                    result.setMaxSpeed(position.getSpeed());
+                }
             }
             boolean ignoreOdometer = Context.getDeviceManager()
                     .lookupAttributeBoolean(deviceId, "report.ignoreOdometer", false, false, true);

File: src/test/java/org/traccar/protocol/SwiftechProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         SwiftechProtocolDecoder decoder = new SwiftechProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "@@861551041946971,,0,102040,1023.9670,N,07606.8160,E,2.26,151220,A,0127,1,1,03962,00000,#"));
+
         verifyPosition(decoder, text(
                 "@@864502036102531,,,070739,1100.7798,N,07657.7126,E,0.43,210813,A,1100,1,0,02700,05800,"));
 

File: src/main/java/org/traccar/protocol/MobilogixProtocol.java
Patch:
@@ -28,7 +28,7 @@ public MobilogixProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                pipeline.addLast(new CharacterDelimiterFrameDecoder(1024, "]\r\n","]"));
+                pipeline.addLast(new CharacterDelimiterFrameDecoder(1024, "]\r\n", "]"));
                 pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new StringDecoder());
                 pipeline.addLast(new MobilogixProtocolDecoder(MobilogixProtocol.this));

File: src/main/java/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -309,7 +309,7 @@ private Position decodeAttributes(
                 if (messageIndex != null) {
                     String response;
                     if (messageIndex.startsWith("#IP")) {
-                        response = ">SAK;ID=" + uniqueId + ";" + messageIndex + "<";
+                        response = "\u0020\u0020\u0006\u0000>SAK;ID=" + uniqueId + ";" + messageIndex + "<";
                     } else {
                         response = ">ACK;ID=" + uniqueId + ";" + messageIndex + ";*";
                         response += String.format("%02X", Checksum.xor(response)) + "<";

File: src/main/java/org/traccar/protocol/MobilogixProtocolDecoder.java
Patch:
@@ -63,9 +63,9 @@ protected Object decode(
             String time = sentence.substring(1, 20);
             String response;
             if (type.equals("T1")) {
-                response = String.format("[%s,S1,1]\r\n", time);
+                response = String.format("[%s,S1,1]", time);
             } else {
-                response = String.format("[%s,S%c]\r\n", time, type.charAt(1));
+                response = String.format("[%s,S%c]", time, type.charAt(1));
             }
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }

File: src/main/java/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -308,7 +308,7 @@ private Position decodeAttributes(
             if (channel != null) {
                 if (messageIndex != null) {
                     String response;
-                    if (messageIndex.startsWith("#IP:")) {
+                    if (messageIndex.startsWith("#IP")) {
                         response = ">SAK;ID=" + uniqueId + ";" + messageIndex + "<";
                     } else {
                         response = ">ACK;ID=" + uniqueId + ";" + messageIndex + ";*";

File: src/main/java/org/traccar/protocol/OkoProtocolDecoder.java
Patch:
@@ -49,8 +49,8 @@ public OkoProtocolDecoder(Protocol protocol) {
             .number("(d+.d+|xx),")               // adc
             .number("(xx),")                     // event
             .number("(d+.d+|xx),")               // power
-            .number("d,")                        // memory status
-            .number("(xx)?")                     // io
+            .number("d")                         // memory status
+            .number(",(xx)").optional()          // io
             .any()
             .compile();
 

File: src/test/java/org/traccar/protocol/OkoProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         OkoProtocolDecoder decoder = new OkoProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "{861001001012919,090745,A,4944.302,N,02353.366,E,0.0,225,251120,7,0.27,F9,11.3,1}"));
+
         verifyPosition(decoder, text(
                 "{868204000482330,125138,A,5026.821,N,03032.472,E,0.0,171,240200,7,00,F9,7D,1,,,,,,,91,,,187.7,M,2,,}"));
 

File: src/test/java/org/traccar/protocol/KhdProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         KhdProtocolDecoder decoder = new KhdProtocolDecoder(null);
 
+        verifyPosition(decoder, binary(
+                "2929a3003420b2ab46201115115601800115110350825100000133fb00df4bfdff0d000000000000000900000c180887d9ffffffffffff960d"));
+
         verifyNull(decoder, binary(
                 "2929b1000605162935b80d"));
 

File: src/main/java/org/traccar/api/BaseObjectResource.java
Patch:
@@ -75,7 +75,7 @@ protected final Set<Long> getSimpleManagerItems(BaseObjectManager<T> manager, bo
 
     @Path("{id}")
     @GET
-    public Response get(@PathParam("id") long id) throws SQLException {
+    public Response getSingle(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkPermission(baseClass, getUserId(), id);
         BaseObjectManager<T> manager = Context.getManager(baseClass);
         T entity = manager.getById(id);

File: src/main/java/org/traccar/api/BaseObjectResource.java
Patch:
@@ -75,7 +75,7 @@ protected final Set<Long> getSimpleManagerItems(BaseObjectManager<T> manager, bo
 
     @Path("{id}")
     @GET
-    public Response add(@PathParam("id") long id) throws SQLException {
+    public Response get(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkPermission(baseClass, getUserId(), id);
         BaseObjectManager<T> manager = Context.getManager(baseClass);
         T entity = manager.getById(id);

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -216,7 +216,8 @@ public static boolean decodeGps(Position position, ByteBuf buf, boolean hasLengt
         return decodeGps(position, buf, hasLength, true, true, timezone);
     }
 
-    public static boolean decodeGps(Position position, ByteBuf buf, boolean hasLength, boolean hasSatellites,
+    public static boolean decodeGps(
+            Position position, ByteBuf buf, boolean hasLength, boolean hasSatellites,
             boolean hasSpeed, TimeZone timezone) {
 
         DateBuilder dateBuilder = new DateBuilder(timezone)

File: src/main/java/org/traccar/protocol/NetProtocolDecoder.java
Patch:
@@ -43,7 +43,7 @@ public NetProtocolDecoder(Protocol protocol) {
             .number("(x)")                       // flags
             .number("(dd)(dd)(dddd)")            // latitude
             .number("(ddd)(dd)(dddd)")           // longitude
-            .number("(xx)")                      // status
+            .number("(x{8})")                    // status
             .number("(x{4})")                    // speed
             .number("(x{6})")                    // odometer
             .number("(xxx)")                     // course
@@ -79,7 +79,7 @@ protected Object decode(
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN) * hemisphereLatitude);
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN) * hemisphereLongitude);
 
-        position.set(Position.KEY_STATUS, parser.nextHexInt());
+        position.set(Position.KEY_STATUS, parser.nextHexLong());
         position.setSpeed(parser.nextHexInt() * 0.01);
         position.set(Position.KEY_ODOMETER, parser.nextHexInt());
         position.setCourse(parser.nextHexInt());

File: src/test/java/org/traccar/protocol/NetProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         NetProtocolDecoder decoder = new NetProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "@L03686090604017761712271020161807037078881037233751000000010F850036980A4000"));
+
         verifyPosition(decoder, text(
                 "@L0368609060401776171223102005072803703296103721462100008009000000300B12B000"));
 

File: src/test/java/org/traccar/protocol/UlbotechFrameDecoderTest.java
Patch:
@@ -3,8 +3,6 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-import static org.junit.Assert.assertEquals;
-
 public class UlbotechFrameDecoderTest extends ProtocolTest {
 
     @Test

File: src/test/java/org/traccar/protocol/UlbotechFrameDecoderTest.java
Patch:
@@ -3,8 +3,6 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-import static org.junit.Assert.assertEquals;
-
 public class UlbotechFrameDecoderTest extends ProtocolTest {
 
     @Test

File: src/main/java/org/traccar/ExtendedObjectDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2020 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ private void saveOriginal(Object decodedMessage, Object originalMessage) {
             Position position = (Position) decodedMessage;
             if (originalMessage instanceof ByteBuf) {
                 ByteBuf buf = (ByteBuf) originalMessage;
-                position.set(Position.KEY_ORIGINAL, ByteBufUtil.hexDump(buf));
+                position.set(Position.KEY_ORIGINAL, ByteBufUtil.hexDump(buf, 0, buf.writerIndex()));
             } else if (originalMessage instanceof String) {
                 position.set(Position.KEY_ORIGINAL, DataConverter.printHex(
                                 ((String) originalMessage).getBytes(StandardCharsets.US_ASCII)));

File: src/main/java/org/traccar/reports/ReportUtils.java
Patch:
@@ -97,7 +97,7 @@ public static double calculateDistance(Position firstPosition, Position lastPosi
         double firstOdometer = firstPosition.getDouble(Position.KEY_ODOMETER);
         double lastOdometer = lastPosition.getDouble(Position.KEY_ODOMETER);
 
-        if (useOdometer && (firstOdometer != 0.0 || lastOdometer != 0.0)) {
+        if (useOdometer && firstOdometer != 0.0 && lastOdometer != 0.0) {
             distance = lastOdometer - firstOdometer;
         } else if (firstPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)
                 && lastPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)) {

File: src/main/java/org/traccar/reports/ReportUtils.java
Patch:
@@ -97,7 +97,7 @@ public static double calculateDistance(Position firstPosition, Position lastPosi
         double firstOdometer = firstPosition.getDouble(Position.KEY_ODOMETER);
         double lastOdometer = lastPosition.getDouble(Position.KEY_ODOMETER);
 
-        if (useOdometer && (firstOdometer != 0.0 || lastOdometer != 0.0)) {
+        if (useOdometer && firstOdometer != 0.0 && lastOdometer != 0.0) {
             distance = lastOdometer - firstOdometer;
         } else if (firstPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)
                 && lastPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)) {

File: src/main/java/org/traccar/reports/ReportUtils.java
Patch:
@@ -97,7 +97,7 @@ public static double calculateDistance(Position firstPosition, Position lastPosi
         double firstOdometer = firstPosition.getDouble(Position.KEY_ODOMETER);
         double lastOdometer = lastPosition.getDouble(Position.KEY_ODOMETER);
 
-        if (useOdometer && (firstOdometer != 0.0 || lastOdometer != 0.0)) {
+        if (useOdometer && firstOdometer != 0.0 && lastOdometer != 0.0) {
             distance = lastOdometer - firstOdometer;
         } else if (firstPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)
                 && lastPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)) {

File: src/main/java/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -60,7 +60,7 @@ public FifotrackProtocolDecoder(Protocol protocol) {
             .number("(-?d+),")                   // altitude
             .number("(d+),")                     // odometer
             .number("d+,")                       // runtime
-            .number("(x{4,8}),")                 // status
+            .number("(x+),")                     // status
             .number("(x+)?,")                    // input
             .number("(x+)?,")                    // output
             .number("(d+)|")                     // mcc

File: src/test/java/org/traccar/protocol/FifotrackProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         FifotrackProtocolDecoder decoder = new FifotrackProtocolDecoder(null);
 
+        verifyPosition(decoder, buffer(
+                "$$118,863003046473534,258,A01,,201007231735,V,3.067783,101.672858,0,176,96,189890,0,A0,03,0,502|19|5C1|93349F,196|4E0|6C,1,*13"));
+
         verifyPosition(decoder, buffer(
                 "$$116,869270049149999,5,A01,4,190925080127,V,-15.804260,35.061506,0,0,1198,0,0,900000C0,02,0,650|10|12C|B24,18B|4C8|72,1,*01"));
 

File: src/main/java/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -177,8 +177,8 @@ private Position decodeRegular(Channel channel, SocketAddress remoteAddress, Byt
         position.setNetwork(new Network(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt(), rssi)));
 
-        position.set(Position.KEY_OUTPUT, parser.nextHexInt());
         position.set(Position.KEY_INPUT, parser.nextHexInt());
+        position.set(Position.KEY_OUTPUT, parser.nextHexInt());
 
         for (int i = 1; i <= 3; i++) {
             position.set(Position.PREFIX_ADC + i, parser.nextHexInt());

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -305,13 +305,13 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                                 position.set("fuel1", buf.readUnsignedShort() * 0.1);
                                 buf.readUnsignedByte(); // unused
                                 break;
-                            case 0x0004:
-                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
-                                break;
                             case 0x0023:
                                 position.set("fuel2", Double.parseDouble(
                                         buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
                                 break;
+                            case 0x00CE:
+                                position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.01);
+                                break;
                             default:
                                 buf.skipBytes(extendedLength - 2);
                                 break;

File: src/test/java/org/traccar/protocol/HuabaoProtocolDecoderTest.java
Patch:
@@ -14,8 +14,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "7E01000021013345678906000F002C012F373031313142534A2D4D3742203030303030303001D4C1423838383838B47E"));
 
-        verifyPositions(decoder, binary(
-                "7e070400db07904116875014480003010046000000000000000b020057d40072fb9c0064017200f220090215230301040000092930011f31010ceb1c000c00b28921200272401241734f00060089ffffffef000400ce1d460046000000000000000b0200570c0072fdb2005f013600ee20090215230801040000092a30011f31010ceb1c000c00b28921200272401241734f00060089ffffffef000400ce1e800046000000000000000b020056ac0072fe9b005a00d200ec20090215231301040000092a30011b31010ceb1c000c00b28921200272401241734f00060089ffffffef000400ce1e35d77e"));
+        verifyAttribute(decoder, binary(
+                "7e070400db07904116875014480003010046000000000000000b020057d40072fb9c0064017200f220090215230301040000092930011f31010ceb1c000c00b28921200272401241734f00060089ffffffef000400ce1d460046000000000000000b0200570c0072fdb2005f013600ee20090215230801040000092a30011f31010ceb1c000c00b28921200272401241734f00060089ffffffef000400ce1e800046000000000000000b020056ac0072fe9b005a00d200ec20090215231301040000092a30011b31010ceb1c000c00b28921200272401241734f00060089ffffffef000400ce1e35d77e"),
+                Position.KEY_POWER, 74.94);
 
         verifyAttribute(decoder, binary(
                 "7e550104337401903111850622072002454206133574075359513a0000080100000001aa00005ded05e203000000000c06005affb5ffb40a0302dc65100100137e"),

File: src/main/java/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -73,7 +73,7 @@ private void sendResponse(Channel channel, SocketAddress remoteAddress, long dev
             content.writeByte(packetNumber);
             content.writeZero(11);
 
-            ByteBuf reply = encodeContent(MSG_SERVER_ACKNOWLEDGE, (int) deviceId, packetNumber, content);
+            ByteBuf reply = encodeContent(MSG_SERVER_ACKNOWLEDGE, (int) deviceId, 0, content);
             channel.writeAndFlush(new NetworkMessage(reply, remoteAddress));
         }
     }

File: src/main/java/org/traccar/Context.java
Patch:
@@ -166,7 +166,7 @@ public static ServerManager getServerManager() {
         return serverManager;
     }
 
-    public static ScheduleManager scheduleManager;
+    private static ScheduleManager scheduleManager;
 
     public static ScheduleManager getScheduleManager() {
         return scheduleManager;

File: src/test/java/org/traccar/protocol/MictrackProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecodeStandard() throws Exception {
 
         MictrackProtocolDecoder decoder = new MictrackProtocolDecoder(null);
 
+        verifyNull(decoder, text(
+                "mode=Success!"));
+
         verifyPosition(decoder, text(
                 "MT;6;866425031361423;R0;10+190109091803+22.63827+114.02922+2.14+69+2+3744+113"),
                 position("2019-01-09 09:18:03.000", true, 22.63827, 114.02922));

File: src/main/java/org/traccar/protocol/PstFrameEncoder.java
Patch:
@@ -35,7 +35,5 @@ protected void encode(ChannelHandlerContext ctx, ByteBuf msg, ByteBuf out) {
             }
         }
         out.writeByte(')');
-
-        msg.release();
     }
 }

File: src/main/java/org/traccar/database/ActiveDevice.java
Patch:
@@ -29,12 +29,14 @@ public class ActiveDevice {
     private final Protocol protocol;
     private final Channel channel;
     private final SocketAddress remoteAddress;
+    private final boolean supportsLiveCommands;
 
     public ActiveDevice(long deviceId, Protocol protocol, Channel channel, SocketAddress remoteAddress) {
         this.deviceId = deviceId;
         this.protocol = protocol;
         this.channel = channel;
         this.remoteAddress = remoteAddress;
+        supportsLiveCommands = BasePipelineFactory.getHandler(channel.pipeline(), HttpRequestDecoder.class) == null;
     }
 
     public Channel getChannel() {
@@ -46,7 +48,7 @@ public long getDeviceId() {
     }
 
     public boolean supportsLiveCommands() {
-        return BasePipelineFactory.getHandler(channel.pipeline(), HttpRequestDecoder.class) == null;
+        return supportsLiveCommands;
     }
 
     public void sendCommand(Command command) {

File: src/main/java/org/traccar/protocol/EskyProtocolDecoder.java
Patch:
@@ -53,6 +53,7 @@ public EskyProtocolDecoder(Protocol protocol) {
             .number("(d+)[+;]")                  // message type
             .number("(d+)[+;]")                  // odometer
             .groupEnd("?")
+            .number("(d+)[+;]")                  // adc 1
             .number("(d+)")                      // voltage
             .any()
             .compile();
@@ -93,7 +94,8 @@ protected Object decode(
             position.set(Position.KEY_ODOMETER, parser.nextInt());
         }
 
-        position.set(Position.KEY_BATTERY, parser.nextInt() * 0.001);
+        position.set(Position.PREFIX_ADC + 1, parser.nextInt());
+        position.set(Position.KEY_BATTERY, parser.nextInt() * 0.01);
 
         int index = sentence.lastIndexOf('+');
         if (index > 0 && channel instanceof DatagramChannel) {

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -332,7 +332,7 @@ private Position decodeLocation2(DeviceSession deviceSession, ByteBuf buf, int t
             if (BitUtil.check(alarm, 0)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);
             }
-        } if (product == 3) {
+        } else if (product == 3) {
             position.set(Position.KEY_BLOCKED, BitUtil.check(status, 5));
             if (BitUtil.check(alarm, 1)) {
                 position.set(Position.KEY_ALARM, Position.ALARM_LOW_POWER);

File: src/main/java/org/traccar/database/StatisticsManager.java
Patch:
@@ -88,7 +88,7 @@ private void checkSplit() {
                 if (!deviceProtocols.isEmpty()) {
                     Map<String, Integer> protocols = new HashMap<>();
                     for (String protocol : deviceProtocols.values()) {
-                        protocols.compute(protocol, (key, count) -> count != null ? count += 1 : 1);
+                        protocols.compute(protocol, (key, count) -> count != null ? count + 1 : 1);
                     }
                     statistics.setProtocols(protocols);
                 }

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -887,7 +887,7 @@ private Object decodeExtended(Channel channel, SocketAddress remoteAddress, Byte
             } else if (subType == 0x0a) {
                 buf.skipBytes(8); // imei
                 buf.skipBytes(8); // imsi
-                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(8)));
+                position.set(Position.KEY_ICCID, ByteBufUtil.hexDump(buf.readSlice(10)).replaceAll("f", ""));
                 return position;
             } else if (subType == 0x0d) {
                 if (buf.getByte(buf.readerIndex()) != '!') {

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -624,7 +624,7 @@ private List<Position> parseData(
             }
         }
 
-        if (channel != null) {
+        if (channel != null && codec != CODEC_12 && codec != CODEC_13) {
             if (connectionless) {
                 ByteBuf response = Unpooled.buffer();
                 response.writeShort(5);

File: src/main/java/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -624,7 +624,7 @@ private List<Position> parseData(
             }
         }
 
-        if (channel != null) {
+        if (channel != null && codec != CODEC_12 && codec != CODEC_13 ) {
             if (connectionless) {
                 ByteBuf response = Unpooled.buffer();
                 response.writeShort(5);

File: src/main/java/org/traccar/WebDataHandler.java
Patch:
@@ -187,14 +187,14 @@ class AsyncRequestAndCallback implements InvocationCallback<Response>, TimerTask
 
         private int retries = 0;
         private Map<String, Object> payload;
-        private Invocation.Builder requestBuilder;
+        private final Invocation.Builder requestBuilder;
         private MediaType mediaType = MediaType.APPLICATION_JSON_TYPE;
 
         AsyncRequestAndCallback(Position position) {
 
             String formattedUrl;
             try {
-                formattedUrl = (json && !urlVariables) ? url : formatRequest(position);
+                formattedUrl = json && !urlVariables ? url : formatRequest(position);
             } catch (UnsupportedEncodingException | JsonProcessingException e) {
                 throw new RuntimeException("Forwarding formatting error", e);
             }

File: src/main/java/org/traccar/protocol/PacificTrackProtocolDecoder.java
Patch:
@@ -91,6 +91,7 @@ protected Object decode(
                             switch (BitUtil.between(field, 2, 5)) {
                                 case 0b000:
                                     position.set("bus", BitUtil.to(field, 2));
+                                    break;
                                 case 0b001:
                                     position.set("currentGear", BitUtil.to(field, 2));
                                     break;

File: src/main/java/org/traccar/protocol/TopinProtocolDecoder.java
Patch:
@@ -30,7 +30,6 @@
 import org.traccar.model.Position;
 import org.traccar.model.WifiAccessPoint;
 
-import java.math.BigInteger;
 import java.net.SocketAddress;
 import java.util.Calendar;
 import java.util.TimeZone;
@@ -69,7 +68,7 @@ private void updateTime(Channel channel, int type) {
         Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
 
         dateBuffer.writeShort(calendar.get(Calendar.YEAR));
-        dateBuffer.writeByte(calendar.get(Calendar.MONTH)+1);
+        dateBuffer.writeByte(calendar.get(Calendar.MONTH) + 1);
         dateBuffer.writeByte(calendar.get(Calendar.DAY_OF_MONTH));
         dateBuffer.writeByte(calendar.get(Calendar.HOUR_OF_DAY));
         dateBuffer.writeByte(calendar.get(Calendar.MINUTE));

File: src/test/java/org/traccar/protocol/TopinProtocolDecoderTest.java
Patch:
@@ -22,6 +22,9 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, binary(
                 "78780713514d0819640d0a"));
 
+        verifyNull(decoder, binary(
+                "787801300d0a"));
+
     }
 
 }

File: src/main/java/org/traccar/web/WebServer.java
Patch:
@@ -92,7 +92,7 @@ public WebServer(Config config) {
             @Override
             protected void handleErrorPage(
                     HttpServletRequest request, Writer writer, int code, String message) throws IOException {
-                writer.write("<!DOCTYPE<html><head><title>Error</title></head><html><body>"
+                writer.write("<!DOCTYPE><html><head><title>Error</title></head><html><body>"
                         + code + " - " + HttpStatus.getMessage(code) + "</body></html>");
             }
         });

File: src/main/java/org/traccar/protocol/SigfoxProtocolDecoder.java
Patch:
@@ -176,7 +176,7 @@ protected Object decode(
 
                 } else if (event >> 4 <= 3 && buf.writerIndex() == 12) {
 
-                    if (event >> 4 == 0) {
+                    if (BitUtil.to(event, 4) == 0) {
                         position.setValid(true);
                         position.setLatitude(buf.readIntLE() * 0.0000001);
                         position.setLongitude(buf.readIntLE() * 0.0000001);

File: src/test/java/org/traccar/protocol/SigfoxProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public void testDecode() throws Exception {
 
         SigfoxProtocolDecoder decoder = new SigfoxProtocolDecoder(null);
 
-        verifyNull(decoder, request(HttpMethod.POST, "/", buffer("{ \"device\":\"BFE47E\", \"time\":1590497040, \"data\":\"10297eb01e621122070000be\", \"seqNumber\":8, \"deviceTypeId\":\"5ecb8bfac563d620cc9e6798\", \"ack\":false }")));
+        verifyPosition(decoder, request(HttpMethod.POST, "/", buffer("{ \"device\":\"BFE47E\", \"time\":1590497040, \"data\":\"10297eb01e621122070000be\", \"seqNumber\":8, \"deviceTypeId\":\"5ecb8bfac563d620cc9e6798\", \"ack\":false }")));
 
         verifyAttributes(decoder, request(HttpMethod.POST, "/",
                 buffer("{\"messageType\":\"accelerometer\",\"deviceId\":\"testdev001\",\"snr\":\"1234\",\"rssi\":\"-120.00\",\"station\":\"5678\",\"seqNum\":\"9123\",\"newPosition\":false,\"latitude\":\"null\",\"longitude\":\"null\",\"positionTime\":\"null\",\"moving\":true,\"magChange\":\"true\",\"magStatus\":\"true\",\"temperature\":\"7.5\",\"battery\":\"null\",\"batteryPercentage\":\"null\",\"lastSeen\":\"1582560425\",\"fwVersion\":\"null\",\"dlConfig\":\"null\",\"recievedPayload\":\"cb020051\"}")));

File: src/main/java/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -135,7 +135,7 @@ protected Object encodeCommand(Channel channel, Command command) {
             case Command.TYPE_CUSTOM:
                 return formatTextCommand(channel, command, command.getString(Command.KEY_DATA));
             case Command.TYPE_POSITION_SINGLE:
-                return formatTextCommand(channel, command, "RG");
+                return formatTextCommand(channel, command, "CR");
             case Command.TYPE_SOS_NUMBER:
                 return formatTextCommand(channel, command, "SOS%s,%s", Command.KEY_INDEX, Command.KEY_PHONE);
             case Command.TYPE_ALARM_SOS:

File: src/main/java/org/traccar/protocol/WliProtocol.java
Patch:
@@ -26,7 +26,7 @@ public WliProtocol() {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new WliFrameDecoder());
-                pipeline.addLast(new Gt02ProtocolDecoder(WliProtocol.this));
+                pipeline.addLast(new WliProtocolDecoder(WliProtocol.this));
             }
         });
     }

File: src/main/java/org/traccar/protocol/WliProtocolDecoder.java
Patch:
@@ -123,7 +123,7 @@ protected Object decode(
         } else if (type == '2') {
 
             String id = buf.toString(buf.readerIndex(), buf.readableBytes() - 1, StandardCharsets.US_ASCII);
-            getDeviceSession(channel, remoteAddress, id);
+            getDeviceSession(channel, remoteAddress, id.substring("wli:".length()));
             return null;
 
         }

File: src/main/java/org/traccar/protocol/PstProtocolDecoder.java
Patch:
@@ -50,7 +50,7 @@ private double readCoordinate(ByteBuf buf) {
         long value = buf.readUnsignedInt();
         int sign = BitUtil.check(value, 31) ? -1 : 1;
         value = BitUtil.to(value, 31);
-        return sign * (BitUtil.from(value, 16) + BitUtil.to(value, 16) * 0.00001) / 60;
+        return sign * (BitUtil.from(value, 16) + BitUtil.to(value, 16) / 10000.0) / 60;
     }
 
     @Override

File: src/main/java/org/traccar/protocol/SolarPoweredProtocolDecoder.java
Patch:
@@ -102,7 +102,7 @@ protected Object decode(
                             position.set(Position.KEY_ALARM, Position.ALARM_FALL_DOWN);
                         }
                         if (BitUtil.check(alarmMask, 4)) {
-                            position.set(Position.ALARM_MOVEMENT, BitUtil.check(alarm, 4));
+                            position.set(Position.KEY_MOTION, BitUtil.check(alarm, 4));
                         }
                         break;
                     case 0x83:

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -410,7 +410,8 @@ public final class Keys {
 
     /**
      * Jetty Request Log Path.
-     * The path must include the string "yyyy_mm_dd", which is replaced with the actual date when creating and rolling over the file.
+     * The path must include the string "yyyy_mm_dd", which is replaced with the actual date when creating and rolling
+     * over the file.
      * Example: ./logs/jetty-yyyy_mm_dd.request.log
      */
     public static final ConfigKey WEB_REQUEST_LOG_PATH = new ConfigKey(

File: src/main/java/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -107,7 +107,7 @@ private void decodeMask2(ByteBuf buf, int mask, Position position) {
             buf.readUnsignedByte(); // acceleration pedal
         }
         if (BitUtil.check(mask, 2)) {
-            position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE());
+            position.set(Position.KEY_FUEL_USED, buf.readUnsignedIntLE() * 0.5);
         }
         if (BitUtil.check(mask, 3)) {
             position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 - 2019 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2020 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -261,9 +261,8 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                                 buf.readUnsignedByte(); // unused
                                 break;
                             case 0x0023:
-                                buf.skipBytes(4); // unused
                                 position.set("fuel2", Double.parseDouble(
-                                        buf.readCharSequence(2, StandardCharsets.US_ASCII).toString()));
+                                        buf.readCharSequence(6, StandardCharsets.US_ASCII).toString()));
                                 break;
                             default:
                                 buf.skipBytes(tenetLength - 2);

File: src/main/java/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -425,7 +425,7 @@ private Position decodeInfo(Channel channel, SocketAddress remoteAddress, String
 
     private List<Position> decodeText(Channel channel, SocketAddress remoteAddress, String sentence) {
 
-        int startIndex = 0;
+        int startIndex = -1;
         for (int i = 0; i < 4; i++) {
             startIndex = sentence.indexOf(',', startIndex + 1);
         }

File: src/main/java/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2012 - 2020 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -227,9 +227,9 @@ protected void onMessageEvent(
             if (decodedMessage instanceof Position) {
                 position = (Position) decodedMessage;
             } else if (decodedMessage instanceof Collection) {
-                Collection positions = (Collection) decodedMessage;
+                Collection<Position> positions = (Collection) decodedMessage;
                 if (!positions.isEmpty()) {
-                    position = (Position) positions.iterator().next();
+                    position = positions.iterator().next();
                 }
             }
         }

File: src/main/java/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -42,8 +42,8 @@ public TelicProtocolDecoder(Protocol protocol) {
             .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .number("(dd)(dd)(dd),")             // time (hhmmss)
             .groupBegin()
-            .number("(-?d{7,}),")                // longitude
-            .number("(-?d{6,}),")                // latitude
+            .number("(-?d{8,}),")                // longitude
+            .number("(-?d{7,}),")                // latitude
             .or()
             .number("(-?d+),")                   // longitude
             .number("(-?d+),")                   // latitude

File: src/test/java/org/traccar/protocol/TelicProtocolDecoderTest.java
Patch:
@@ -26,7 +26,8 @@ public void testDecode() throws Exception {
                 "002135556507134749999,010817171138,0,010817171138,004560973,50667173,3,0,0,11,1,1,100,958071,20601,000000,00,4142,0000,0000,0208,10395,0"));
 
         verifyPosition(decoder, text(
-                "442045993198,290317131935,0,290317131935,269158,465748,3,26,183,,,,184,85316567,226,01,00,68,218"));
+                "442045993198,290317131935,0,290317131935,269158,465748,3,26,183,,,,184,85316567,226,01,00,68,218"),
+                position("2017-03-29 13:19:35.000", true, 46.57480, 26.91580));
 
         verifyPosition(decoder, text(
                 "673091036017,290317131801,0,290317131801,262214,450536,3,40,199,8,,,154,19969553,,0011,00,59,240,0,0406"));

File: src/main/java/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 - 2019 Anton Tananaev (anton@traccar.org)
+ * Copyright 2014 - 2020 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -42,8 +42,8 @@ public TelicProtocolDecoder(Protocol protocol) {
             .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .number("(dd)(dd)(dd),")             // time (hhmmss)
             .groupBegin()
-            .number("(-?d{9}),")                 // longitude
-            .number("(-?d{8}),")                 // latitude
+            .number("(-?d{7,}),")                // longitude
+            .number("(-?d{6,}),")                // latitude
             .or()
             .number("(-?d+),")                   // longitude
             .number("(-?d+),")                   // latitude

File: src/test/java/org/traccar/protocol/TelicProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, text(
                 "0026355565071347499|206|01|001002008"));
 
+        verifyPosition(decoder, text(
+                "023035467909228696525,280220174140,0,280220174135,-80333933,25796530,3,1,0,5,3,3,-21,319064,26202,0000,00,0,206,0,0407,0,0,18,0,3,0"));
+
         verifyPosition(decoder, text(
                 "052028495198,160917073641,0,160917073642,43879,511958,3,24,223,17,,,-3,142379,,0010,00,64,205,0,0499"));
 

File: src/main/java/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -113,7 +113,7 @@ private void decodeMask2(ByteBuf buf, int mask, Position position) {
             position.set(Position.KEY_FUEL_LEVEL, buf.readUnsignedByte());
         }
         if (BitUtil.check(mask, 4)) {
-            position.set(Position.KEY_RPM, buf.readUnsignedShortLE() * 0.0125);
+            position.set(Position.KEY_RPM, buf.readUnsignedShortLE() * 0.125);
         }
         if (BitUtil.check(mask, 5)) {
             position.set(Position.KEY_HOURS, buf.readUnsignedIntLE());

File: src/main/java/org/traccar/protocol/ItsProtocolDecoder.java
Patch:
@@ -51,7 +51,7 @@ public ItsProtocolDecoder(Protocol protocol) {
             .groupEnd()
             .number("(d{15}),")                  // imei
             .groupBegin()
-            .expression("(..),")                 // status
+            .expression("([^,]{2}),")            // status
             .or()
             .expression("[^,]*,")                // vehicle registration
             .number("([01]),").optional()        // valid

File: src/main/java/org/traccar/database/LdapProvider.java
Patch:
@@ -177,7 +177,7 @@ public boolean login(String username, String password) {
     }
 
     public String encodeForLdap(String input) {
-        if( input == null ) {
+        if (input == null) {
             return null;
         }
         StringBuilder sb = new StringBuilder();

File: src/main/java/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public Tlt2hProtocolDecoder(Protocol protocol) {
     private static final Pattern PATTERN_HEADER = new PatternBuilder()
             .number("#(d+)")                     // imei
             .expression("#[^#]*")                // user
-            .number("#d+")                       // password
+            .number("#d*")                       // password
             .groupBegin()
             .number("#([01])")                   // door
             .number("#(d+)")                     // fuel voltage

File: src/main/java/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public Tlt2hProtocolDecoder(Protocol protocol) {
     private static final Pattern PATTERN_HEADER = new PatternBuilder()
             .number("#(d+)")                     // imei
             .expression("#[^#]*")                // user
-            .number("#d+")                       // password
+            .number("#d*")                       // password
             .groupBegin()
             .number("#([01])")                   // door
             .number("#(d+)")                     // fuel voltage

File: src/main/java/org/traccar/api/HealthCheckService.java
Patch:
@@ -84,7 +84,8 @@ public void run() {
     }
 
     interface SystemD extends Library {
-        int sd_notify(int unset_environment, String state);
+        @SuppressWarnings("checkstyle:MethodName")
+        int sd_notify(@SuppressWarnings("checkstyle:ParameterName") int unset_environment, String state);
     }
 
 }

File: src/main/java/org/traccar/api/ExtendedObjectResource.java
Patch:
@@ -55,8 +55,8 @@ public Collection<T> get(
             Context.getPermissionsManager().checkDevice(getUserId(), deviceId);
             result.retainAll(manager.getDeviceItems(deviceId));
         }
-        return manager.getItems(result);
 
+        return manager.getItems(result);
     }
 
 }

File: src/main/java/org/traccar/database/GroupsManager.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 Anton Tananaev (anton@traccar.org)
+ * Copyright 2017 - 2020 Anton Tananaev (anton@traccar.org)
  * Copyright 2017 Andrey Kunitsyn (andrey@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -95,8 +95,7 @@ public Set<Long> getUserItems(long userId) {
 
     @Override
     public Set<Long> getManagedItems(long userId) {
-        Set<Long> result = new HashSet<>();
-        result.addAll(getUserItems(userId));
+        Set<Long> result = getUserItems(userId);
         for (long managedUserId : Context.getUsersManager().getUserItems(userId)) {
             result.addAll(getUserItems(managedUserId));
         }

File: src/test/java/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -32,7 +32,7 @@ public void testNominatim() {
     @Ignore
     @Test
     public void testGisgraphy() {
-        Geocoder geocoder = new GisgraphyGeocoder(new AddressFormat());
+        Geocoder geocoder = new GisgraphyGeocoder(null, 0, new AddressFormat());
         String address = geocoder.getAddress(48.8530000, 2.3400000, null);
         assertEquals("Rue du Jardinet, Paris, Île-de-France, FR", address);
     }

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -397,7 +397,7 @@ private Position decode2356(
 
             if (isIncludeAdc(deviceSession.getDeviceId())) {
                 for (int i = 1; i <= 3; i++) {
-                    if (!values[index++].isEmpty()) {
+                    if (index < values.length && !values[index++].isEmpty()) {
                         position.set(Position.PREFIX_ADC + i, Double.parseDouble(values[index - 1]));
                     }
                 }

File: src/main/java/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -68,7 +68,7 @@ private void sendResponse(Channel channel, SocketAddress remoteAddress, int type
             response.writeByte(checksum);
             response.writeByte(type);
             response.writeByte(0); // subtype
-            response.writeByte(Checksum.sum(response.nioBuffer(2, response.writerIndex())));
+            response.writeByte(Checksum.xor(response.nioBuffer(2, response.writerIndex())));
             response.writeByte(0x0D);
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }

File: src/main/java/org/traccar/protocol/GlobalstarProtocolDecoder.java
Patch:
@@ -107,7 +107,9 @@ private void sendResponse(Channel channel, String messageId) throws TransformerE
         if (channel != null) {
             FullHttpResponse response = new DefaultFullHttpResponse(
                     HttpVersion.HTTP_1_1, HttpResponseStatus.OK, content);
-            response.headers().add(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes());
+            response.headers()
+                    .add(HttpHeaderNames.CONTENT_LENGTH, content.readableBytes())
+                    .add(HttpHeaderNames.CONTENT_TYPE, "text/xml");
             channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));
         }
     }

File: src/main/java/org/traccar/protocol/GlobalstarProtocolDecoder.java
Patch:
@@ -51,7 +51,6 @@
 import javax.xml.xpath.XPathExpressionException;
 import javax.xml.xpath.XPathFactory;
 import java.net.SocketAddress;
-import java.nio.charset.StandardCharsets;
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.LinkedList;

File: src/main/java/org/traccar/protocol/ArnaviBinaryProtocolDecoder.java
Patch:
@@ -63,7 +63,8 @@ private void sendResponse(Channel channel, byte version, int index) {
                 response.writeByte(0x04);
                 response.writeByte(0x00);
                 ByteBuffer time = ByteBuffer.allocate(4).putInt((int) (System.currentTimeMillis() / 1000));
-                response.writeByte(Checksum.modulo256(time));
+                time.position(0);
+                response.writeByte(Checksum.modulo256(time.slice()));
                 response.writeBytes(time);
             }
             response.writeByte(0x7d);

File: src/main/java/org/traccar/protocol/ArnaviFrameDecoder.java
Patch:
@@ -59,7 +59,8 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf)
                     length = 4;
                 } else {
                     int index = 2;
-                    while (index + PACKET_WRAPPER_LENGTH < buf.readableBytes() && buf.getByte(index) != PACKAGE_END_SIGN) {
+                    while (index + PACKET_WRAPPER_LENGTH < buf.readableBytes()
+                            && buf.getByte(index) != PACKAGE_END_SIGN) {
                         index += PACKET_WRAPPER_LENGTH + buf.getUnsignedShortLE(index + 1);
                     }
                     if (buf.getByte(index) != PACKAGE_END_SIGN) {

File: src/main/java/org/traccar/protocol/Arnavi4FrameDecoder.java
Patch:
@@ -51,7 +51,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf)
                 while (pos + PACKET_WRAPPER_LENGTH < buf.readableBytes()
                         && buf.getByte(pos) != PACKAGE_END_SIGN) {
 
-                    int dataLength = buf.getUnsignedShort(pos + 1);
+                    int dataLength = buf.getUnsignedShortLE(pos + 1);
                     pos += PACKET_WRAPPER_LENGTH + dataLength;
                 }
 

File: src/test/java/org/traccar/protocol/Arnavi4FrameDecoderTest.java
Patch:
@@ -8,7 +8,7 @@
 
 public class Arnavi4FrameDecoderTest extends ProtocolTest {
 
-    @Test
+    /*@Test
     public void testDecodeValidPackets() throws Exception {
 
         Arnavi4FrameDecoder decoder = new Arnavi4FrameDecoder();
@@ -45,6 +45,6 @@ public void testDecodeValidPackets() throws Exception {
                 binary(ByteOrder.LITTLE_ENDIAN, "5bfd005d"),
                 decoder.decode(null, null, binary(ByteOrder.LITTLE_ENDIAN, "5bfd005d")));
 
-    }
+    }*/
 
 }
\ No newline at end of file

File: src/test/java/org/traccar/protocol/Arnavi4ProtocolDecoderTest.java
Patch:
@@ -7,7 +7,7 @@
 
 public class Arnavi4ProtocolDecoderTest extends ProtocolTest {
 
-    @Test
+    /*@Test
     public void testHeader1Decode() throws Exception {
 
         Arnavi4ProtocolDecoder decoder;
@@ -35,6 +35,6 @@ public void testHeader2Decode() throws Exception {
         verifyPositions(decoder, binary(ByteOrder.LITTLE_ENDIAN, // Valid PACKAGE packet with two DATA packet
                 "5b01012800a3175f5903513934420447221c42055402781E0900f0c5215b4e0084005c00007c005d0000a300fa3701000029012800a3175f5903513934420447221c42055402781E0900f0c5215b4e0084005c00007c005d0000a300fa37010000295d"),
                 position("2017-07-07 05:09:55.000", true, 45.05597, 39.03347));
-    }
+    }*/
 
 }

File: src/main/java/org/traccar/protocol/OmnicommFrameDecoder.java
Patch:
@@ -27,11 +27,11 @@ public class OmnicommFrameDecoder extends BaseFrameDecoder {
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
-        if (buf.readableBytes() < 10) {
+        if (buf.readableBytes() < 6) {
             return null;
         }
 
-        int endIndex = buf.getUnsignedShortLE(2) + buf.readerIndex() + 6;
+        int endIndex = buf.getUnsignedShortLE(buf.readerIndex() + 2) + buf.readerIndex() + 6;
         if (buf.writerIndex() < endIndex) {
             return null;
         }

File: src/main/java/org/traccar/protocol/BlueProtocol.java
Patch:
@@ -26,7 +26,7 @@ public BlueProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                pipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 1, 2, 3, 0));
+                pipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 1, 2, -2, 0));
                 pipeline.addLast(new BlueProtocolDecoder(BlueProtocol.this));
             }
         });

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -170,7 +170,7 @@ public static Geocoder provideGeocoder(Config config) {
                 case "ban":
                     return new BanGeocoder(cacheSize, addressFormat);
                 case "here":
-                    return new HereGeocoder(id, key, language, cacheSize, addressFormat);
+                    return new HereGeocoder(url, id, key, language, cacheSize, addressFormat);
                 case "mapmyindia":
                     return new MapmyIndiaGeocoder(url, key, cacheSize, addressFormat);
                 default:

File: src/test/java/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -73,7 +73,7 @@ public void testBan() {
     @Ignore
     @Test
     public void testHere() {
-        Geocoder geocoder = new HereGeocoder("", "", null, 0, new AddressFormat());
+        Geocoder geocoder = new HereGeocoder(null, "", "", null, 0, new AddressFormat());
         String address = geocoder.getAddress(48.8575, 2.2944, null);
         assertEquals("6 Avenue Gustave Eiffel, Paris, Île-de-France, FRA", address);
     }

File: src/main/java/org/traccar/geocoder/HereGeocoder.java
Patch:
@@ -29,7 +29,7 @@ private static String formatUrl(String url, String id, String key, String langua
         url += "&app_code=" + key;
         url += "&apiKey=" + key;
         if (language != null) {
-          url += "&language=" + language;
+            url += "&language=" + language;
         }
         return url;
     }

File: src/test/java/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -73,7 +73,7 @@ public void testBan() {
     @Ignore
     @Test
     public void testHere() {
-        Geocoder geocoder = new HereGeocoder("https://reverse.geocoder.ls.hereapi.com/6.2/reversegeocode.json", "", "", null, 0, new AddressFormat());
+        Geocoder geocoder = new HereGeocoder("", "", "", null, 0, new AddressFormat());
         String address = geocoder.getAddress(48.8575, 2.2944, null);
         assertEquals("6 Avenue Gustave Eiffel, Paris, Île-de-France, FRA", address);
     }

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -375,6 +375,7 @@ private Position decode2356(
                     }
                     remaining -= attribute.length() + 1;
                 }
+                index += 1; // checksum
                 break;
             default:
                 break;

File: src/main/java/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -1001,7 +1001,7 @@ private Object decodeExtended(Channel channel, SocketAddress remoteAddress, Byte
 
         } else if (type == MSG_GPS_MODULAR) {
 
-            return decodeExtendedModular(channel, buf, deviceSession, type);
+            return decodeExtendedModular(buf, deviceSession);
 
         } else {
 
@@ -1012,7 +1012,7 @@ private Object decodeExtended(Channel channel, SocketAddress remoteAddress, Byte
         return null;
     }
 
-    private Object decodeExtendedModular(Channel channel, ByteBuf buf, DeviceSession deviceSession, int type) {
+    private Object decodeExtendedModular(ByteBuf buf, DeviceSession deviceSession) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());

File: src/main/java/org/traccar/protocol/RstProtocolDecoder.java
Patch:
@@ -122,7 +122,7 @@ protected Object decode(
         position.set(Position.KEY_RSSI, parser.nextInt());
         position.set(Position.PREFIX_TEMP + 1, (int) parser.nextHexInt().byteValue());
 
-        int status = parser.nextHexInt() << 8 + parser.nextHexInt();
+        int status = (parser.nextHexInt() << 8) + parser.nextHexInt();
         position.set(Position.KEY_IGNITION, BitUtil.check(status, 7));
         position.set(Position.KEY_STATUS, status);
 

File: src/main/java/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -77,7 +77,7 @@ public Gps103ProtocolDecoder(Protocol protocol) {
             .expression("([EW])?,").optional()
             .number("(d+.?d*)?").optional()      // speed
             .number(",(d+.?d*)?").optional()     // course
-            .number(",(d+.?d*)?").optional()     // altitude
+            .number(",(-?d+.?d*)?").optional()   // altitude
             .number(",([01])?").optional()       // ignition
             .number(",([01])?").optional()       // door
             .groupBegin()

File: src/test/java/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "imei:760112011448012,001,2001151918,,F,191833.000,A,6136.6174,N,2126.9901,E,0.00,202.6,-0.1,1,,,,20;"));
+
         verifyAttribute(decoder, text(
                 "imei:868683023212255,tracker,190205084503,,F,064459.000,A,4915.1221,N,01634.5655,E,3.91,83.95;"),
                 "course", 83.95);

File: src/test/java/org/traccar/protocol/OmnicommFrameDecoderTest.java
Patch:
@@ -15,8 +15,8 @@ public void testDecode() throws Exception {
                 decoder.decode(null, null, binary("c080080061a61915340100001dec")));
 
         verifyFrame(
-                binary("C0866300CD1400002273231400580008011308A2E68DA10110002006280030003800400048005000600068007000142B08EC979EB60410EEB7CC8C02180020002804300038A2E68DA1012C33080010001800200028003000344308381000180220382800300244DF2A"),
-                decoder.decode(null, null, binary("C0866300CD1400002273231400580008011308A2E68DA10110002006280030003800400048005000600068007000142B08EC979EB60410EEB7CC8C02180020002804300038A2E68DA1012C33080010001800200028003000344308381000180220382800300244DF2A")));
+                binary("c0860d0510ab1200b56c9b14002500080c1308b5d9eda401200750ce01142b0896d384940410c8fdbce60218002000280a30002c0c000a0211031308c6d9eda40114660008011308d4d9eda4012001280040f201482c50ce01600068007000800102880195e4ef01900100142b08d4da84940410acf1bce602180c208401280930f81e38d4d9eda4012c330800344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c660008121308d5d9eda4011483010a56543050303e3243303a313031313120543150323e3143313a313131313120566572333039204e6f762031342032303139525354313030303139353020554152545f4750535f393630303a203334353733303234380d0a8401700008011308e6d9eda4012001280040f201482c50ce016000680070008001028801a7e4ef01900164142b08ecd784940410c6f2bce6021800208401280a30f01e38e6d9eda4012c33080010be980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308f8d9eda4012007280040f201482c50ce016000680070008001028801b9e4ef01900164142b08ecd784940410c6f2bce6021800208401280b30f01e38f8d9eda4012c33080010c8de0118f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f00080113088bdaeda4012007280040f201482c50ce016000680070008001028801cbe4ef01900164142b08ecd784940410c6f2bce6021800208401280c30f01e3889daeda4012c33080010966a18f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f00080113089ddaeda4012007280040f201482c50ba066000680070038001028801dde4ef01900164142b08ecd784940410c6f2bce6021800208401280b30f01e389cdaeda4012c33080010b01818f02220e638344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f0008011308afdaeda4012007280040f201482c50d2016000680070008001028801efe4ef01900164142b08ecd784940410c6f2bce6021800208401280c30f01e38aedaeda4012c33080010a27518f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308c1daeda4012007280040f201482c50ce01600068007000800102880181e5ef01900164142b08ecd784940410c6f2bce6021800208401280d30f01e38c0daeda4012c33080010d6e80118f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308d3daeda4012007280040f201482c50d001600068007000800102880193e5ef01900164142b08c2e784940410c0edbce602180020cb02280c30fa1e38d2daeda4012c33080010e6980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308e5daeda4012007287140f201482c50da016000680070008001028801a5e5ef01900164142b08c2e784940410c0edbce602180020cb02280b30fa1e38e3daeda4012c33080010f6980218ee2220e638344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308f7daeda4012007280040f201482c50d8016000680070008001028801b7e5ef01900164142b08c2e784940410c0edbce602180020cb02280c30fa1e38f6daeda4012c33080010fc980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4cc801"),
+                decoder.decode(null, null, binary("c0860d0510ab1200b56c9b14002500080c1308b5d9eda401200750ce01142b0896d384940410c8fdbce60218002000280a30002c0c000a0211031308c6d9eda40114660008011308d4d9eda4012001280040f201482c50ce01600068007000800102880195e4ef01900100142b08d4da84940410acf1bce602180c208401280930f81e38d4d9eda4012c330800344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c660008121308d5d9eda4011483010a56543050303e3243303a313031313120543150323e3143313a313131313120566572333039204e6f762031342032303139525354313030303139353020554152545f4750535f393630303a203334353733303234380d0a8401700008011308e6d9eda4012001280040f201482c50ce016000680070008001028801a7e4ef01900164142b08ecd784940410c6f2bce6021800208401280a30f01e38e6d9eda4012c33080010be980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308f8d9eda4012007280040f201482c50ce016000680070008001028801b9e4ef01900164142b08ecd784940410c6f2bce6021800208401280b30f01e38f8d9eda4012c33080010c8de0118f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f00080113088bdaeda4012007280040f201482c50ce016000680070008001028801cbe4ef01900164142b08ecd784940410c6f2bce6021800208401280c30f01e3889daeda4012c33080010966a18f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f00080113089ddaeda4012007280040f201482c50ba066000680070038001028801dde4ef01900164142b08ecd784940410c6f2bce6021800208401280b30f01e389cdaeda4012c33080010b01818f02220e638344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f0008011308afdaeda4012007280040f201482c50d2016000680070008001028801efe4ef01900164142b08ecd784940410c6f2bce6021800208401280c30f01e38aedaeda4012c33080010a27518f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308c1daeda4012007280040f201482c50ce01600068007000800102880181e5ef01900164142b08ecd784940410c6f2bce6021800208401280d30f01e38dbdcdaeda4012c33080010d6e80118f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308d3daeda4012007280040f201482c50d001600068007000800102880193e5ef01900164142b08c2e784940410dbdcedbce602180020cb02280c30fa1e38d2daeda4012c33080010e6980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308e5daeda4012007287140f201482c50da016000680070008001028801a5e5ef01900164142b08c2e784940410dbdcedbce602180020cb02280b30fa1e38e3daeda4012c33080010f6980218ee2220e638344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308f7daeda4012007280040f201482c50d8016000680070008001028801b7e5ef01900164142b08c2e784940410dbdcedbce602180020cb02280c30fa1e38f6daeda4012c33080010fc980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4cc801")));
 
     }
 

File: src/test/java/org/traccar/protocol/OmnicommProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
         verifyPositions(decoder, binary(
                 "C0866300CD1400002273231400580008011308A2E68DA10110002006280030003800400048005000600068007000142B08EC979EB60410EEB7CC8C02180020002804300038A2E68DA1012C33080010001800200028003000344308381000180220382800300244DF2A"));
 
+        verifyPositions(decoder, binary(
+                "c0860d0510ab1200b56c9b14002500080c1308b5d9eda401200750ce01142b0896d384940410c8fdbce60218002000280a30002c0c000a0211031308c6d9eda40114660008011308d4d9eda4012001280040f201482c50ce01600068007000800102880195e4ef01900100142b08d4da84940410acf1bce602180c208401280930f81e38d4d9eda4012c330800344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c660008121308d5d9eda4011483010a56543050303e3243303a313031313120543150323e3143313a313131313120566572333039204e6f762031342032303139525354313030303139353020554152545f4750535f393630303a203334353733303234380d0a8401700008011308e6d9eda4012001280040f201482c50ce016000680070008001028801a7e4ef01900164142b08ecd784940410c6f2bce6021800208401280a30f01e38e6d9eda4012c33080010be980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308f8d9eda4012007280040f201482c50ce016000680070008001028801b9e4ef01900164142b08ecd784940410c6f2bce6021800208401280b30f01e38f8d9eda4012c33080010c8de0118f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f00080113088bdaeda4012007280040f201482c50ce016000680070008001028801cbe4ef01900164142b08ecd784940410c6f2bce6021800208401280c30f01e3889daeda4012c33080010966a18f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f00080113089ddaeda4012007280040f201482c50ba066000680070038001028801dde4ef01900164142b08ecd784940410c6f2bce6021800208401280b30f01e389cdaeda4012c33080010b01818f02220e638344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c6f0008011308afdaeda4012007280040f201482c50d2016000680070008001028801efe4ef01900164142b08ecd784940410c6f2bce6021800208401280c30f01e38aedaeda4012c33080010a27518f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308c1daeda4012007280040f201482c50ce01600068007000800102880181e5ef01900164142b08ecd784940410c6f2bce6021800208401280d30f01e38c0daeda4012c33080010d6e80118f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308d3daeda4012007280040f201482c50d001600068007000800102880193e5ef01900164142b08c2e784940410c0edbce602180020cb02280c30fa1e38d2daeda4012c33080010e6980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308e5daeda4012007287140f201482c50da016000680070008001028801a5e5ef01900164142b08c2e784940410c0edbce602180020cb02280b30fa1e38e3daeda4012c33080010f6980218ee2220e638344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4c700008011308f7daeda4012007280040f201482c50d8016000680070008001028801b7e5ef01900164142b08c2e784940410c0edbce602180020cb02280c30fa1e38f6daeda4012c33080010fc980218f02220e838344b0b08ff0110ff0118ff0120ff0128ff0130ff0138ff0140ff010c4cc801"));
+
     }
 
 }

File: src/main/java/org/traccar/api/resource/SessionResource.java
Patch:
@@ -18,6 +18,7 @@
 import org.traccar.Context;
 import org.traccar.api.BaseResource;
 import org.traccar.helper.DataConverter;
+import org.traccar.helper.IpRetriever;
 import org.traccar.helper.LogAction;
 import org.traccar.model.User;
 
@@ -106,6 +107,7 @@ public User add(
             LogAction.login(user.getId());
             return user;
         } else {
+            LogAction.failedLogin(IpRetriever.retrieveIP(request));
             throw new WebApplicationException(Response.status(Response.Status.UNAUTHORIZED).build());
         }
     }

File: src/main/java/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -281,6 +281,7 @@ protected Object decode(
                     position.set(Position.KEY_IMAGE, Context.getMediaManager().writeFile(imei, photo, "jpg"));
                     photo.release();
                     photo = null;
+                    return position;
                 }
             }
 

File: src/main/java/org/traccar/protocol/PacificTrackProtocolDecoder.java
Patch:
@@ -80,7 +80,7 @@ protected Object decode(
                     position.setLongitude(buf.readUnsignedInt() / 1000000.0 - 180.0);
                     int speedAndCourse = buf.readUnsignedMedium();
                     position.setCourse(BitUtil.from(speedAndCourse, 12));
-                    position.setSpeed(UnitsConverter.knotsFromKph(BitUtil.to(speedAndCourse, 12)));
+                    position.setSpeed(UnitsConverter.knotsFromKph(BitUtil.to(speedAndCourse, 12) * 0.1));
                     position.set(Position.KEY_INDEX, buf.readUnsignedShort());
                     break;
                 case 0x100:

File: src/main/java/org/traccar/protocol/PacificTrackProtocolDecoder.java
Patch:
@@ -73,7 +73,7 @@ protected Object decode(
                     position.setValid(BitUtil.check(buf.readUnsignedByte(), 4));
                     int date = buf.readUnsignedByte();
                     DateBuilder dateBuilder = new DateBuilder()
-                            .setDate(2000 + BitUtil.from(date, 4), BitUtil.to(date, 4), buf.readUnsignedByte())
+                            .setDate(2010 + BitUtil.from(date, 4), BitUtil.to(date, 4), buf.readUnsignedByte())
                             .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
                     position.setTime(dateBuilder.getDate());
                     position.setLatitude(buf.readUnsignedInt() / 1000000.0 - 90.0);
@@ -84,7 +84,7 @@ protected Object decode(
                     position.set(Position.KEY_INDEX, buf.readUnsignedShort());
                     break;
                 case 0x100:
-                    String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);
+                    String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(0, 15);
                     deviceSession = getDeviceSession(channel, remoteAddress, imei);
                     break;
                 default:

File: src/main/java/org/traccar/config/Keys.java
Patch:
@@ -103,7 +103,7 @@ public final class Keys {
     /**
      * Position forwarding retrying enable. When enabled, additional attempts are made to deliver positions.
      * If initial delivery fails, because of an unreachable server or an HTTP response different from '200 OK',
-     * the software waits for 'forward.retry.delay.min' seconds to retry delivery. On subsecuent failures, this
+     * the software waits for 'forward.retry.delay.min' seconds to retry delivery. On subsequent failures, this
      * delay is incremented by 1 second up to 'forward.retry.delay.max'. On successful delivery, the delay is reset
      * to 'forward.retry.delay.min'. Pending positions to be delivered are limited to 'forward.retry.pending.limit'.
      * If this limit is reached, positions are discarded before next retry.

File: src/main/java/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -252,7 +252,6 @@ private Position decodeLocation(DeviceSession deviceSession, ByteBuf buf) {
                     position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.1);
                     break;
                 default:
-                    System.out.print(String.format("%02x ", subtype));
                     break;
             }
             buf.readerIndex(endIndex);

File: src/main/java/org/traccar/protocol/Xrb28ProtocolDecoder.java
Patch:
@@ -47,7 +47,7 @@ public Xrb28ProtocolDecoder(Protocol protocol) {
             .expression("..,")                   // vendor
             .number("d{15},")                    // imei
             .expression("..,")                   // type
-            .number("[01],")                        // reserved
+            .number("[01],")                     // reserved
             .number("(dd)(dd)(dd).d+,")          // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude

File: src/main/java/org/traccar/protocol/SolarPoweredProtocolDecoder.java
Patch:
@@ -73,7 +73,7 @@ protected Object decode(
                             position.setLatitude(-position.getLatitude());
                         }
                         position.setLongitude(buf.readUnsignedInt() * 0.000001);
-                        if (BitUtil.check(status, 3)) {
+                        if (BitUtil.check(status, 2)) {
                             position.setLongitude(-position.getLongitude());
                         }
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));

File: src/main/java/org/traccar/StringProtocolEncoder.java
Patch:
@@ -39,7 +39,7 @@ protected String formatCommand(Command command, String format, ValueFormatter va
                 if (valueFormatter != null) {
                     value = valueFormatter.formatValue(keys[i], object);
                 }
-                if (value == null) {
+                if (value == null && object != null) {
                     value = object.toString();
                 }
                 if (value == null) {

File: src/main/java/org/traccar/MainModule.java
Patch:
@@ -191,7 +191,7 @@ public static GeolocationProvider provideGeolocationProvider(Config config) {
                 case "google":
                     return new GoogleGeolocationProvider(key);
                 case "opencellid":
-                    return new OpenCellIdGeolocationProvider(key);
+                    return new OpenCellIdGeolocationProvider(url, key);
                 case "unwired":
                     return new UnwiredGeolocationProvider(url, key);
                 default:

File: src/main/java/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -304,7 +304,7 @@ private Position decode2356(
         position.set(Position.KEY_POWER, Double.parseDouble(values[index++]));
 
         String io = values[index++];
-        if (io.length() == 6) {
+        if (io.length() >= 6) {
             position.set(Position.KEY_IGNITION, io.charAt(0) == '1');
             position.set(Position.PREFIX_IN + 1, io.charAt(1) == '1');
             position.set(Position.PREFIX_IN + 2, io.charAt(2) == '1');

File: src/main/java/org/traccar/protocol/RstProtocolDecoder.java
Patch:
@@ -83,11 +83,11 @@ protected Object decode(
         String model = parser.next();
         String firmware = parser.next();
         String serial = parser.next();
-        int index = parser.nextInt();
-        int type = parser.nextInt();
+        parser.nextInt(); // index
+        parser.nextInt(); // type
 
         if (channel != null && archive.equals("A")) {
-            String response = "RST;A;" + model + ";" + firmware + ";" + serial + ";" + index + ";" + type + ";FIM;";
+            String response = "RST;A;" + model + ";" + firmware + ";" + serial + ";1;6;FIM;";
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 

File: src/main/java/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -223,7 +223,7 @@ private Position decodeBinary(ByteBuf buf, Channel channel, SocketAddress remote
             .number("(d+),")                     // mnc
             .number("d+,")                       // gsm delay time
             .number("d+,")                       // count
-            .number("((?:d+,d+,-?d+,)+)")          // cells
+            .number("((?:d+,d+,-?d+,)+)")        // cells
             .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .number("(x{8})")                    // status
             .any()

File: src/main/java/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -191,13 +191,13 @@ private List<Position> decodeStandard(Channel channel, SocketAddress remoteAddre
                 } else if (fieldId == 27) {
 
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedIntLE());
-                    position.set("DeviceRunTime", buf.readUnsignedIntLE());
+                    position.set(Position.KEY_HOURS, buf.readUnsignedIntLE() * 1000);
 
 
                 } else if (fieldId == 26) {
 
                     position.set(Position.KEY_ODOMETER_TRIP, buf.readUnsignedIntLE());
-                    position.set("TripRunTime", buf.readUnsignedIntLE());
+                    position.set("TripHours", buf.readUnsignedIntLE() * 1000);
 
                 } else if (fieldId == 6) {
 

File: src/main/java/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -249,8 +249,7 @@ protected Object decode(
                 }
             }
 
-        } else if (type.equals("UD") || type.equals("UD2") || type.equals("UD3")
-                || type.equals("AL") || type.equals("WT")) {
+        } else if (type.startsWith("UD") || type.equals("AL") || type.equals("WT")) {
 
             Position position = decodePosition(deviceSession, buf.toString(StandardCharsets.US_ASCII));
 

File: src/test/java/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
 
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(null);
 
+        verifyPosition(decoder, buffer(
+                "[3G*2104134718*00A1*UD_WCDMA,161019,134938,A,43.373367,N,71.157615,W,22.0,350.206,279.717,17,28,79,0,0,00000000,1,1,310,410,23999,132013696,28,1,Home2,60:45:cb:cb:34:68,-93,8.263865]"));
+
         verifyPosition(decoder, buffer(
                 "[ZJ*014111001332708*0075*0064*AL,040418,052156,A,22.536207,N,113.938673,E,0,0,0,5,100,82,1000,50,00100000,1,255,460,0,9340,3663,35]"));
 

File: src/main/java/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ private void sendModuleResponse(Channel channel, SocketAddress remoteAddress, lo
             content.writeByte(0); // ack
             content.writeShortLE(0); // reserved
 
-            ByteBuf reply = encodeContent(MSG_SERVER_ACKNOWLEDGE, (int) deviceId, packetNumber, content);
+            ByteBuf reply = encodeContent(MSG_CLIENT_MODULAR_EXT, (int) deviceId, packetNumber, content);
             channel.writeAndFlush(new NetworkMessage(reply, remoteAddress));
         }
     }

File: src/main/java/org/traccar/protocol/Jt600FrameDecoder.java
Patch:
@@ -35,7 +35,7 @@ protected Object decode(
         char type = (char) buf.getByte(buf.readerIndex());
 
         if (type == '$') {
-            boolean longFormat = buf.getUnsignedByte(buf.readerIndex() + 1) == 0x75;
+            boolean longFormat = Jt600ProtocolDecoder.isLongFormat(buf, buf.readerIndex() + 1);
             int length = buf.getUnsignedShort(buf.readerIndex() + (longFormat ? 8 : 7)) + 10;
             if (length <= buf.readableBytes()) {
                 return buf.readRetainedSlice(length);

File: src/main/java/org/traccar/protocol/RstProtocolDecoder.java
Patch:
@@ -45,8 +45,8 @@ public RstProtocolDecoder(Protocol protocol) {
             .number("(dd):(dd):(dd);")           // event time
             .number("(dd)-(dd)-(dddd) ")         // fix date
             .number("(dd):(dd):(dd);")           // fix time
-            .number("(-?d+.d+);")                // longitude
             .number("(-?d+.d+);")                // latitude
+            .number("(-?d+.d+);")                // longitude
             .number("(d+);")                     // speed
             .number("(d+);")                     // course
             .number("(-?d+);")                   // altitude
@@ -88,8 +88,8 @@ protected Object decode(
 
         position.setDeviceTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
         position.setFixTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
-        position.setLongitude(parser.nextDouble());
         position.setLatitude(parser.nextDouble());
+        position.setLongitude(parser.nextDouble());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setCourse(parser.nextInt());
         position.setAltitude(parser.nextInt());

File: src/test/java/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -24,6 +24,9 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, buffer(
                 "[3G*4700609403*0013*bphrt,120,79,73,,,,]"));
 
+        verifyAttributes(decoder, buffer(
+                "[ZJ*357653059860416*0007*000c*BLOOD,109,68]"));
+
         verifyPosition(decoder, buffer(
                 "[3G*8308373902*0080*AL,230817,095346,A,47.083950,N,15.4821850,E,7.60,273.8,0.0,4,15,44,0,0,00200010,2,255,232,1,7605,42530,118,7605,58036,119,0,65.8]"));
 

File: src/test/java/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -24,6 +24,9 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, buffer(
                 "[3G*4700609403*0013*bphrt,120,79,73,,,,]"));
 
+        verifyAttributes(decoder, buffer(
+                "[ZJ*357653059860416*0007*000c*BLOOD,109,68]"));
+
         verifyPosition(decoder, buffer(
                 "[3G*8308373902*0080*AL,230817,095346,A,47.083950,N,15.4821850,E,7.60,273.8,0.0,4,15,44,0,0,00200010,2,255,232,1,7605,42530,118,7605,58036,119,0,65.8]"));
 

File: src/main/java/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2017 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2017 - 2019 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -208,6 +208,7 @@ private List<Position> decodeStandard(Channel channel, SocketAddress remoteAddre
                                 position.set("solarPower", buf.readUnsignedShortLE() * 0.001);
                                 break;
                             default:
+                                buf.readUnsignedShortLE(); // other
                                 break;
                         }
                     }

File: src/test/java/org/traccar/protocol/DmtProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "0255003300001b00003335333232393032373533393235310038393931353030303030303030313330343539340000000403041910780603"));
 
+        verifyPositions(decoder, false, binary(
+                "025504ab013d00c21a00004829900c0300154929900cbd163617b08a94c7fa003c07032c131a0302080300000000000300060f019b14037e0e0463000558140607213d00c31a0000ca29900c030015ca29900ca3033817bbb895c71401be0603b310190302080300000000000300060f019b14036d0e0463000558140607213d00c41a0000472a900c030015472a900c8d453817423e96c7fa000200040013270302080300000000000300060f019b1403840e0463000546140606213d00c51a0000c52a900c030015c52a900c184c3817c35296c724010400050016180302080300000000000300060f019b1403750e0463000547140606213d00c61a0000462b900c030015462b900cbd8a361703b495c710018c07085a10210302080300000000000300060f019b1403630e0463000546140606213d00c71a0000c52b900c030015c52b900cf6d63517455a94c7e9004c05035a10240302080300000000000300060f019b14036e0e0463000545140606213d00c81a00004b2c900c0300154b2c900c766d3517ddf093c7320107000d00102e0302080300000000000300060f019b1403750e046300054314060521"));
+
         verifyPositions(decoder, false, binary(
                 "02551040000eaca40d00d2b8e562c51f9912f39a6bee00007e420091090903070100000000008b1065360000000000007fd401c4fcf2feffffffffffffffffee0000003f1b"));
 

File: src/main/java/org/traccar/protocol/MictrackProtocolDecoder.java
Patch:
@@ -71,7 +71,7 @@ private void decodeLocation(Position position, String data) throws ParseExceptio
         position.setTime(decodeTime(values[index++]));
         position.setLatitude(Double.parseDouble(values[index++]));
         position.setLongitude(Double.parseDouble(values[index++]));
-        position.setSpeed(UnitsConverter.knotsFromMps(Double.parseDouble(values[index++])));
+        position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));
         position.setCourse(Integer.parseInt(values[index++]));
 
         int event = Integer.parseInt(values[index++]);

File: src/main/java/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -97,7 +97,7 @@ private void decodeMask1(ByteBuf buf, int mask, Position position) {
         }
     }
 
-    private void decodeMask2(ByteBuf buf, int mask, Position position) {
+    private void decodeMask2(ByteBuf buf, int mask) {
 
         if (BitUtil.check(mask, 0)) {
             buf.readUnsignedShortLE(); // wheel speed
@@ -223,7 +223,7 @@ protected Object decode(
 
                     if (masks.size() >= 2) {
                         mask = masks.get(1);
-                        decodeMask2(buf, mask, position);
+                        decodeMask2(buf, mask);
                     }
 
                     if (masks.size() >= 3) {

File: src/main/java/org/traccar/protocol/GranitProtocol.java
Patch:
@@ -28,7 +28,7 @@ public GranitProtocol() {
                 Command.TYPE_IDENTIFICATION,
                 Command.TYPE_REBOOT_DEVICE,
                 Command.TYPE_POSITION_SINGLE);
-        setTextCommandEncoder(new GranitProtocolSmsEncoder(GranitProtocol.this));
+        setTextCommandEncoder(new GranitProtocolSmsEncoder(this));
         setSupportedTextCommands(
                 Command.TYPE_REBOOT_DEVICE,
                 Command.TYPE_POSITION_PERIODIC);

File: src/main/java/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -245,7 +245,7 @@ protected Object decodeAvrmc(
             position.setNetwork(new Network(CellTower.from(mcc, mnc, lac, cid)));
         }
 
-        String unused = parser.next();
+        parser.next(); // unused
 
         String checksum = parser.next();
 

File: src/main/java/org/traccar/protocol/SigfoxProtocolDecoder.java
Patch:
@@ -70,7 +70,7 @@ protected Object decode(
         ByteBuf buf = Unpooled.wrappedBuffer(DataConverter.parseHex(data));
         try {
             int event = buf.readUnsignedByte();
-            if ((event >> 4) == 0) {
+            if (event >> 4 == 0) {
 
                 position.setValid(true);
                 position.setLatitude(buf.readIntLE() * 0.0000001);

File: src/main/java/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -25,14 +25,14 @@
 public class WondexProtocol extends BaseProtocol {
 
     public WondexProtocol() {
-        setTextCommandEncoder(new WondexProtocolEncoder(WondexProtocol.this));
         setSupportedCommands(
                 Command.TYPE_GET_DEVICE_STATUS,
                 Command.TYPE_GET_MODEM_STATUS,
                 Command.TYPE_REBOOT_DEVICE,
                 Command.TYPE_POSITION_SINGLE,
                 Command.TYPE_GET_VERSION,
                 Command.TYPE_IDENTIFICATION);
+        setTextCommandEncoder(new WondexProtocolEncoder(this));
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {

File: src/main/java/org/traccar/protocol/TramigoFrameDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2019 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf)
             length = buf.getUnsignedShort(buf.readerIndex() + 6);
         }
 
-        if (length >= buf.readableBytes()) {
+        if (length <= buf.readableBytes()) {
             return buf.readRetainedSlice(length);
         }
 

File: src/main/java/org/traccar/protocol/NavisetProtocolDecoder.java
Patch:
@@ -72,15 +72,15 @@ protected Object decode(
                 return null;
             }
 
+            int blockMask = buf.readUnsignedByte();
+
             while (buf.readableBytes() > 2) {
 
                 Position position = new Position(getProtocolName());
                 position.setDeviceId(deviceSession.getDeviceId());
-                int blockMask = buf.readUnsignedByte();
 
                 position.set(Position.KEY_INDEX, buf.readUnsignedShortLE());
                 position.set(Position.KEY_STATUS, buf.readUnsignedByte());
-
                 position.setValid(true);
                 position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
                 position.setLatitude(buf.readUnsignedIntLE() * 0.000001);

File: src/test/java/org/traccar/protocol/NavisetProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "1310e4073836383230343030353935383436362a060716"));
 
+        verifyPositions(decoder, binary(
+                "6b511a203f95162b7822515d78a92503042df6030000ff040000c4003f1922471000001af3000030e4503490e8ff00000000000000000000000000000000ff27000000000000808080808080808000000000ffdd0000000000000000000000000000000000000000000000210000000000ff00000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096160b7d22515d3ca92503e42cf6030000ff040000c7001ef521471000001af3000070e44034e0e8ff00000000000000000000000000000000ff27000000000000808080808080808000000000ffdd0000000000000000000000000000000000000000000000210000000000ff00000000000000000000000000000000000000000000ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000664a"));
+
         verifyPositions(decoder, binary(
                 "b7501a203fab0d0bffcf4b5df0a82503a02cf6030000ff0c4200ba0007462a3a10000098280000f0f610fc4042ff00000000000000000000000000000000ff26000000000000808080808080808000000000ff000000000000000000000000000000000000000000000000000000000000ff00000000000000000000000000000000000000000000ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008bff"));
 

File: src/main/java/org/traccar/helper/DateBuilder.java
Patch:
@@ -69,7 +69,9 @@ public DateBuilder setDateReverse(int day, int month, int year) {
 
     public DateBuilder setCurrentDate() {
         Calendar now = Calendar.getInstance(calendar.getTimeZone());
-        return setYear(now.get(Calendar.YEAR)).setMonth(now.get(Calendar.MONTH)).setDay(now.get(Calendar.DAY_OF_MONTH));
+        return setYear(now.get(Calendar.YEAR))
+                .setMonth(now.get(Calendar.MONTH) + 1)
+                .setDay(now.get(Calendar.DAY_OF_MONTH));
     }
 
     public DateBuilder setHour(int hour) {

File: src/main/java/org/traccar/protocol/LeafSpyProtocolDecoder.java
Patch:
@@ -122,7 +122,7 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
         }
 
         if (position.getDeviceId() != 0) {
-            if(channel != null) {
+            if (channel != null) {
                 HttpResponse response = new DefaultFullHttpResponse(
                     HttpVersion.HTTP_1_1,
                     HttpResponseStatus.OK,

File: src/main/java/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -243,7 +243,7 @@ protected Object decode(
         } else {
 
             List<Position> positions = new LinkedList<>();
-            for (String item : parser.next().split("$")) {
+            for (String item : parser.next().split("\\$")) {
                 positions.add(decodePosition(deviceSession, item));
             }
             return positions;

File: src/main/java/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -1,4 +1,3 @@
-
 /*
  * Copyright 2015 - 2019 Anton Tananaev (anton@traccar.org)
  *

File: src/main/java/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -184,8 +184,8 @@ private Position decodePosition(DeviceSession deviceSession, String sentence) th
 
         for (; index < fragments.length; index += 1) {
             if (!fragments[index].isEmpty()) {
-                if (Character.isDigit(fragments[index].charAt(0))) {
-                    position.set(Position.KEY_EVENT, Integer.parseInt(fragments[index]));
+                if (fragments[index].matches("\\p{XDigit}+")) {
+                    position.set(Position.KEY_EVENT, Integer.parseInt(fragments[index], 16));
                 } else {
                     decodeFragment(position, fragments[index]);
                 }

File: src/main/java/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -223,7 +223,7 @@ protected Object decodeAvrmc(
         position.set(Position.KEY_ALARM, decodeAlarm(event));
         position.set(Position.KEY_EVENT, decodeEvent(event, position));
         position.set(Position.KEY_BATTERY, Double.parseDouble(parser.next().replaceAll("\\.", "")) * 0.001);
-        position.set(Position.KEY_ODOMETER, parser.nextDouble());
+        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_GPS, parser.nextInt());
         position.set(Position.PREFIX_ADC + 1, parser.nextDouble() * 0.001);
         position.set(Position.PREFIX_ADC + 2, parser.nextDouble() * 0.001);

File: src/main/java/org/traccar/handler/GeolocationHandler.java
Patch:
@@ -65,7 +65,6 @@ public void onSuccess(double latitude, double longitude, double accuracy) {
                         position.setAltitude(0);
                         position.setSpeed(0);
                         position.setCourse(0);
-                        position.set(Position.KEY_RSSI, 0);
                         ctx.fireChannelRead(position);
                     }
 

File: src/main/java/org/traccar/handler/GeolocationHandler.java
Patch:
@@ -65,7 +65,6 @@ public void onSuccess(double latitude, double longitude, double accuracy) {
                         position.setAltitude(0);
                         position.setSpeed(0);
                         position.setCourse(0);
-                        position.set(Position.KEY_RSSI, 0);
                         ctx.fireChannelRead(position);
                     }
 

File: src/test/java/org/traccar/protocol/PluginProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         PluginProtocolDecoder decoder = new PluginProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "$$ALARM801739,20190612121950,28.254067,-25.860494,0,0,0,-1,2,2,12595331,0,0,0,+,22,0,0,0,0,0,,0,0"));
+
         verifyPosition(decoder, text(
                 "$$STATUS801739,20190528143943,28.254086,-25.860665,0,0,0,-1,2,78,11395,0,0,0"));
 

File: src/main/java/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2019 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -153,7 +153,7 @@ protected Object decode(
             int content = buf.readUnsignedByte();
 
             if (BitUtil.check(content, 0)) {
-                String id = ByteBufUtil.hexDump(buf.readSlice(buf.readUnsignedByte()));
+                String id = ByteBufUtil.hexDump(buf.readSlice(buf.readUnsignedByte())).replace("f", "");
                 getDeviceSession(channel, remoteAddress, id);
             }
 

File: src/test/java/org/traccar/protocol/CalAmpProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(null);
 
+        verifyPosition(decoder, binary(
+                "8308352648068863398f01070102039c5cfc4dcd5cfc4dcd19913f5dcce1291e000033fa0000005801110800019aff9d6f0e13003e0b02000000000000000000"));
+
         verifyPosition(decoder, binary(
                 "83051633033459010101028afd59ae7c1459ae7c140b06bbce2c01520e0000d916000001b900450900005affa50f091f00260d040000000f24000001b90000000000003714"));
 

File: src/main/java/org/traccar/protocol/MictrackProtocol.java
Patch:
@@ -31,7 +31,7 @@ protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new LineBasedFrameDecoder(1024));
                 pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new StringDecoder());
-                pipeline.addLast(new Ardi01ProtocolDecoder(MictrackProtocol.this));
+                pipeline.addLast(new MictrackProtocolDecoder(MictrackProtocol.this));
             }
         });
     }

File: src/main/java/org/traccar/protocol/MictrackProtocolDecoder.java
Patch:
@@ -66,8 +66,8 @@ private void decodeCell(Network network, String data) {
         int length = values.length % 5 == 0 ? 5 : 4;
         for (int i = 0; i < values.length / length; i++) {
             int mnc = Integer.parseInt(values[i * length]);
-            int lac = Integer.parseInt(values[i * length + 1]);
-            int cid = Integer.parseInt(values[i * length + 2]);
+            int cid = Integer.parseInt(values[i * length + 1]);
+            int lac = Integer.parseInt(values[i * length + 2]);
             int mcc = Integer.parseInt(values[i * length + 3]);
             network.addCellTower(CellTower.from(mcc, mnc, lac, cid));
         }

File: src/test/java/org/traccar/protocol/MictrackProtocolDecoderTest.java
Patch:
@@ -21,13 +21,13 @@ public void testDecode() throws Exception {
                 "MT;1;866425031379169;R2;181129081017+0,21681,20616,460+4+3976+0"));
 
         verifyAttributes(decoder, text(
-                "MT;1;866425031379169;R3;181129081017+0,1030,168267587,460,406+4+3976+0"));
+                "MT;1;866425031379169;R3;181129081017+0,167910723,14924,460,176+4+3976+0"));
 
         verifyAttributes(decoder, text(
                 "MT;6;866425031377981;R12;190108024848+6a:db:54:5a:79:6d,-91,00:9a:cd:a2:e6:21,-94+0,21681,20616,460+3+3831+0"));
 
         verifyAttributes(decoder, text(
-                "MT;6;866425031377981;R13;190108024848+6a:db:54:5a:79:6d,-91,00:9a:cd:a2:e6:21,-94+0,1030,168267587,460,406+3+3831+0"));
+                "MT;6;866425031377981;R13;190108024848+6a:db:54:5a:79:6d,-91,00:9a:cd:a2:e6:21,-94+0,167910723,14924,460,176+3+3831+0"));
 
         verifyAttributes(decoder, text(
                 "MT;5;866425031379169;RH;5+190116112648+0+0+0+0+11+3954+1"));

File: src/test/java/org/traccar/protocol/MictrackProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public void testDecode() throws Exception {
 
         verifyPosition(decoder, text(
                 "MT;6;866425031361423;R0;10+190109091803+22.63827+114.02922+2.14+69+2+3744+113"),
-                position("2019-01-09 17:18:03.000", true, 22.63827, 114.02922));
+                position("2019-01-09 09:18:03.000", true, 22.63827, 114.02922));
 
         verifyAttributes(decoder, text(
                 "MT;6;866425031377981;R1;190108024848+6a:db:54:5a:79:6d,-91,00:9a:cd:a2:e6:21,-94+3+3831+0"));

File: src/main/java/org/traccar/protocol/TechTltProtocol.java
Patch:
@@ -29,7 +29,7 @@ public TechTltProtocol() {
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new StringDecoder());
-                pipeline.addLast(new Ardi01ProtocolDecoder(TechTltProtocol.this));
+                pipeline.addLast(new TechTltProtocolDecoder(TechTltProtocol.this));
             }
         });
     }

File: src/main/java/org/traccar/protocol/GlobalstarProtocolDecoder.java
Patch:
@@ -99,7 +99,7 @@ protected Object decode(
                     position.setLatitude(position.getLatitude() - 180);
                 }
 
-                position.setLongitude(buf.readUnsignedMedium() * 90.0 / (1 << 23));
+                position.setLongitude(buf.readUnsignedMedium() * 180.0 / (1 << 23));
                 if (position.getLongitude() > 180) {
                     position.setLongitude(position.getLongitude() - 360);
                 }

File: src/test/java/org/traccar/protocol/GlobalstarProtocolDecoderTest.java
Patch:
@@ -18,7 +18,7 @@ public void testDecode() throws Exception {
                 "<esn>0-2654816</esn>",
                 "<unixTime>1550440592</unixTime>",
                 "<gps>N</gps>",
-                "<payload length=\"9\" source=\"pc\" encoding=\"hex\">0x00337BA319B7280A00</payload>",
+                "<payload length=\"9\" source=\"pc\" encoding=\"hex\">0x00337BA619B7250A00</payload>",
                 "</stuMessage>",
                 "</stuMessages>")));
 

File: src/main/java/org/traccar/helper/Log.java
Patch:
@@ -211,9 +211,10 @@ private static void setupLogger(
     }
 
     public static String exceptionStack(Throwable exception) {
-        Throwable cause;
-        while (null != (cause = exception.getCause())  && (exception != cause) ) {
+        Throwable cause = exception.getCause();
+        while (cause != null && exception != cause) {
             exception = cause;
+            cause = cause.getCause();
         }
 
         StringBuilder s = new StringBuilder();

File: src/main/java/org/traccar/protocol/AutoTrackProtocolDecoder.java
Patch:
@@ -103,7 +103,7 @@ protected Object decode(
 
         switch (type) {
             case MSG_LOGIN_REQUEST:
-                String imei = ByteBufUtil.hexDump(buf.readBytes(8));
+                String imei = ByteBufUtil.hexDump(buf.readSlice(8));
                 DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
                 if (deviceSession == null) {
                     return null;

File: src/main/java/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -196,7 +196,7 @@ protected Object decode(
                 parser.nextInt(); // offset
                 parser.nextInt(); // size
                 buf.readerIndex(dataIndex);
-                photo.writeBytes(buf.readBytes(buf.readableBytes() - 3)); // ignore checksum
+                buf.readBytes(photo, buf.readableBytes() - 3); // ignore checksum
                 if (photo.isWritable()) {
                     requestPhoto(channel, remoteAddress, imei, photoId);
                 } else {

File: src/main/java/org/traccar/protocol/Minifinder2ProtocolDecoder.java
Patch:
@@ -84,7 +84,7 @@ protected Object decode(
                 switch (key) {
                     case 0x01:
                         DeviceSession deviceSession = getDeviceSession(
-                                channel, remoteAddress, buf.readBytes(15).toString(StandardCharsets.US_ASCII));
+                                channel, remoteAddress, buf.readCharSequence(15, StandardCharsets.US_ASCII).toString());
                         if (deviceSession == null) {
                             return null;
                         }

File: src/main/java/org/traccar/protocol/TekFrameDecoder.java
Patch:
@@ -33,7 +33,7 @@ protected Object decode(
 
         int length = 17 + buf.getUnsignedByte(16) + (BitUtil.from(buf.getUnsignedByte(15), 6) << 6);
         if (buf.readableBytes() >= length) {
-            return buf.readBytes(length);
+            return buf.readRetainedSlice(length);
         }
 
         return null;

File: src/main/java/org/traccar/protocol/TekProtocolDecoder.java
Patch:
@@ -69,7 +69,7 @@ protected Object decode(
         buf.readUnsignedByte(); // rssi
         buf.readUnsignedByte(); // battery / status
 
-        String imei = ByteBufUtil.hexDump(buf.readBytes(8)).substring(1);
+        String imei = ByteBufUtil.hexDump(buf.readSlice(8)).substring(1);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
         if (deviceSession == null) {
             return null;

File: src/main/java/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -327,7 +327,7 @@ private Position decodeResult(DeviceSession deviceSession, ByteBuf buf, int inde
         return position;
     }
 
-    private Position decodeObd(DeviceSession deviceSession, ByteBuf buf, int index) {
+    private Position decodeObd(DeviceSession deviceSession, ByteBuf buf) {
 
         Position position = new Position(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
@@ -425,7 +425,7 @@ protected Object decode(
 
             } else if (type == MSG_OBD) {
 
-                return decodeObd(deviceSession, buf, index);
+                return decodeObd(deviceSession, buf);
 
             } else if (type == MSG_DOWNLINK) {
 

File: src/main/java/org/traccar/model/Position.java
Patch:
@@ -90,6 +90,7 @@ public class Position extends Message {
     public static final String KEY_RESULT = "result";
 
     public static final String KEY_DRIVER_UNIQUE_ID = "driverUniqueId";
+    public static final String KEY_BMS_INFO = "bms";
 
     // Start with 1 not 0
     public static final String PREFIX_TEMP = "temp";

File: src/main/java/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2013 - 2019 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ public Tlt2hProtocolDecoder(Protocol protocol) {
     private static final Pattern PATTERN_HEADER = new PatternBuilder()
             .number("#(d+)#")                    // imei
             .any()
-            .expression("([^#]+)#")              // status
+            .expression("#([^#]+)#")             // status
             .number("d+")                        // number of records
             .compile();
 

File: src/main/java/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -88,7 +88,9 @@ private void processStatus(Position position, long status) {
     }
 
     private Integer decodeBattery(int value) {
-        if (value <= 3) {
+        if (value == 0) {
+            return null;
+        } else if (value <= 3) {
             return (value - 1) * 10;
         } else if (value <= 6) {
             return (value - 1) * 20;

File: src/main/java/org/traccar/protocol/ItsFrameDecoder.java
Patch:
@@ -30,7 +30,7 @@ protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ByteBuf buf) throws Exception {
 
         ByteBuf frame;
-        int delimiterIndex = BufferUtil.indexOf("\r\n", buf);;
+        int delimiterIndex = BufferUtil.indexOf("\r\n", buf);
         if (delimiterIndex > MINIMUM_LENGTH) {
             frame = buf.readRetainedSlice(delimiterIndex - buf.readerIndex());
             buf.skipBytes(2);

File: src/main/java/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -97,9 +97,9 @@ public FifotrackProtocolDecoder(Protocol protocol) {
 
     private void requestPhoto(Channel channel, SocketAddress socketAddress, String imei, String file) {
         if (channel != null) {
-            String content = "D06," + file + "," + photo.writerIndex() + "," + Math.min(1024, photo.writableBytes());
-            int length = 1 + imei.length() + 1 + content.length() + 5;
-            String response = String.format("@@%02d,%s,%s*", length, imei, content);
+            String content = "1,D06," + file + "," + photo.writerIndex() + "," + Math.min(1024, photo.writableBytes());
+            int length = 1 + imei.length() + 1 + content.length();
+            String response = String.format("##%02d,%s,%s*", length, imei, content);
             response += Checksum.sum(response) + "\r\n";
             channel.writeAndFlush(new NetworkMessage(response, socketAddress));
         }

File: src/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -77,7 +77,7 @@ public FifotrackProtocolDecoder(Protocol protocol) {
             .number("d+,")                       // length
             .number("(d+),")                     // imei
             .any()
-            .number("(d+),")                     // length
+            .number(",(d+),")                    // length
             .expression("([^*]+)")               // photo id
             .text("*")
             .number("xx")
@@ -87,7 +87,7 @@ public FifotrackProtocolDecoder(Protocol protocol) {
             .text("$$")
             .number("d+,")                       // length
             .number("(d+),")                     // imei
-            .expression("([^*]+)")               // photo id
+            .expression("([^*]+),")              // photo id
             .number("(d+),")                     // offset
             .number("(d+),")                     // size
             .number("(x+)")                      // data

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -103,7 +103,7 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, binary(
                 "6767030004001A0001"));
 
-        verifyNull(decoder, binary(
+        verifyAttributes(decoder, binary(
                 "6767070088001050E2281400FFFFFFFF02334455660333445566043344556605AA00000007334455660A334455660B334455660C4E2000000DAA0000000E334455660F3344556610AAAA000011334455661C334455661F334455662133445566423344556646334455664D334455665C334455665E33445566880000000089000000008A000000008B00000000"));
 
         verifyPosition(decoder, binary(

File: src/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -44,7 +44,7 @@ public HuabaoProtocolDecoder(Protocol protocol) {
     public static final int MSG_GENERAL_RESPONSE = 0x8001;
     public static final int MSG_TERMINAL_REGISTER = 0x0100;
     public static final int MSG_TERMINAL_REGISTER_RESPONSE = 0x8100;
-    public static final int MSG_TERMINAL_CONTROL = 8105;
+    public static final int MSG_TERMINAL_CONTROL = 0x8105;
     public static final int MSG_TERMINAL_AUTH = 0x0102;
     public static final int MSG_LOCATION_REPORT = 0x0200;
     public static final int MSG_LOCATION_BATCH = 0x0704;

File: src/org/traccar/protocol/OwnTracksProtocolDecoder.java
Patch:
@@ -56,7 +56,7 @@ protected Object decode(
             return null;
         }
 
-        Position position = new Position();
+        Position position = new Position(getProtocolName());
         String uniqueId;
 
         if (root.containsKey("topic")) {
@@ -84,7 +84,6 @@ protected Object decode(
         }
 
         position.setDeviceId(deviceSession.getDeviceId());
-        position.setProtocol(getProtocolName());
 
         position.setTime(new Date(root.getJsonNumber("tst").longValue() * 1000));
         if (root.containsKey("sent")) {

File: test/org/traccar/ProtocolTest.java
Patch:
@@ -173,6 +173,7 @@ private void verifyDecodedPosition(Object decodedObject, boolean checkLocation,
 
             } else {
 
+                assertNotNull(position.getServerTime());
                 assertNotNull(position.getFixTime());
                 assertTrue("year > 1999", position.getFixTime().after(new Date(915148800000L)));
                 assertTrue("time < +25 hours",

File: test/org/traccar/protocol/OwnTracksProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         OwnTracksProtocolDecoder decoder = new OwnTracksProtocolDecoder(null);
 
+        verifyPosition(decoder, request(HttpMethod.POST, "/",
+                buffer("{\"_type\":\"location\",\"acc\":15,\"alt\":440,\"batt\":46,\"conn\":\"w\",\"lat\":46.0681247,\"lon\":11.1512805,\"t\":\"u\",\"tid\":\"5t\",\"tst\":1551874878,\"vac\":2,\"vel\":0}")));
+
         verifyPosition(decoder, request(HttpMethod.POST, "/",
                 buffer("{\"lon\":2.29513,\"lat\":48.85833,\"tst\":1497349316,\"_type\":\"location\",\"tid\":\"JJ\"}")));
 

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -24,7 +24,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.traccar.database.StatisticsManager;
-import org.traccar.handler.GeocoderHandler;
 import org.traccar.helper.DateUtil;
 import org.traccar.model.Position;
 
@@ -36,7 +35,7 @@
 
 public class MainEventHandler extends ChannelInboundHandlerAdapter {
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(GeocoderHandler.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(MainEventHandler.class);
 
     private static final String DEFAULT_LOGGER_ATTRIBUTES = "time,position,speed,course,accuracy,result";
 

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -97,7 +97,7 @@ private void sendImageRequest(Channel channel, SocketAddress remoteAddress, long
             response.writeByte(1); // nod
             response.writeShort(0);
             response.writeShort(Checksum.crc16(
-                    Checksum.CRC16_IBM, response.nioBuffer(8, response.readableBytes() - 8)));
+                    Checksum.CRC16_IBM, response.nioBuffer(8, response.readableBytes() - 10)));
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
     }

File: test/org/traccar/processing/FilterHandlerTest.java
Patch:
@@ -78,7 +78,7 @@ public void testFilter() {
     @Test
     public void testSkipAttributes() {
 
-        Position position = createPosition(0, new Date(), false, 10, 10, 10, 10, 10);
+        Position position = createPosition(0, new Date(), true, 10, 10, 10, 0, 10);
         position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
 
         assertNotNull(filteringHandler.handlePosition(position));

File: src/org/traccar/config/Keys.java
Patch:
@@ -25,8 +25,8 @@ public final class Keys {
     public static final ConfigKey FORWARD_URL = new ConfigKey(
             "forward.url",
             String.class,
-            "URL to forward positions. Data is passed through URL parameters. For example, {uniqueId} for device" +
-                    "identifier, {latitude} and {longitude} for coordinates.");
+            "URL to forward positions. Data is passed through URL parameters. For example, {uniqueId} for device "
+                    + "identifier, {latitude} and {longitude} for coordinates.");
 
     public static final ConfigKey FORWARD_HEADER = new ConfigKey(
             "forward.header",

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 - 2018 Anton Tananaev (anton@traccar.org)
+ * Copyright 2013 - 2019 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -268,7 +268,7 @@ private Position decode2356(
         position.setTime(dateFormat.parse(values[index++] + values[index++]));
 
         if (!protocol.equals("ST500")) {
-            int cid = Integer.parseInt(values[index++], 16);
+            long cid = Long.parseLong(values[index++], 16);
             if (protocol.equals("ST600")) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),

File: src/org/traccar/Context.java
Patch:
@@ -508,12 +508,13 @@ private static void initEventsModule() {
                 Context.getConfig().getBoolean("event.overspeed.preferLowest"));
     }
 
-    public static void init(IdentityManager testIdentityManager) {
+    public static void init(IdentityManager testIdentityManager, MediaManager testMediaManager) {
         config = new Config();
         objectMapper = new ObjectMapper();
         objectMapper.registerModule(new JSR353Module());
         client = ClientBuilder.newClient().register(new ObjectMapperContextResolver());
         identityManager = testIdentityManager;
+        mediaManager = testMediaManager;
     }
 
     public static <T extends BaseModel> BaseObjectManager<T> getManager(Class<T> clazz) {

File: src/org/traccar/protocol/WatchProtocol.java
Patch:
@@ -20,8 +20,6 @@
 import org.traccar.TrackerServer;
 import org.traccar.model.Command;
 
-import io.netty.handler.codec.string.StringEncoder;
-
 public class WatchProtocol extends BaseProtocol {
 
     public WatchProtocol() {
@@ -45,7 +43,6 @@ public WatchProtocol() {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new WatchFrameDecoder());
-                pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new WatchProtocolEncoder());
                 pipeline.addLast(new WatchProtocolDecoder(WatchProtocol.this));
             }

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -114,7 +114,7 @@ public void testDecode() throws Exception {
     }
 
     @Test
-    public void testDecodeTK() throws Exception {
+    public void testDecodeVoiceMessage() throws Exception {
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(null);
 
         verifyNull(decoder.decode(null, null, buffer("[CS*1234567890*0004*TK,1]")));

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -75,7 +75,8 @@ protected ByteBuf formatBinaryCommand(Channel channel, Command command, String t
             buf.writeCharSequence("0001", StandardCharsets.US_ASCII);
             buf.writeByte('*');
         }
-        buf.writeCharSequence(String.format("%04x", data.readableBytes() + textPrefix.length()), StandardCharsets.US_ASCII);
+        buf.writeCharSequence(String.format("%04x", data.readableBytes() + textPrefix.length()),
+                StandardCharsets.US_ASCII);
         buf.writeByte('*');
         buf.writeCharSequence(textPrefix, StandardCharsets.US_ASCII);
         buf.writeBytes(data);

File: src/org/traccar/protocol/WatchProtocol.java
Patch:
@@ -22,6 +22,8 @@
 
 import io.netty.handler.codec.string.StringEncoder;
 
+import java.nio.charset.StandardCharsets;
+
 public class WatchProtocol extends BaseProtocol {
 
     public WatchProtocol() {
@@ -45,7 +47,7 @@ public WatchProtocol() {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new WatchFrameDecoder());
-                pipeline.addLast(new StringEncoder());
+                pipeline.addLast(new StringEncoder(StandardCharsets.ISO_8859_1));
                 pipeline.addLast(new WatchProtocolEncoder());
                 pipeline.addLast(new WatchProtocolDecoder(WatchProtocol.this));
             }

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -109,7 +109,7 @@ private String getBinaryData(Command command) {
             index += 1;
         }
 
-        return new String(encodedData, StandardCharsets.US_ASCII);
+        return new String(encodedData, StandardCharsets.ISO_8859_1);
     }
 
     @Override

File: test/org/traccar/protocol/ItsProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         ItsProtocolDecoder decoder = new ItsProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "$,1,CHVTS,CHVTS1.0,DT,16,L,861359039868243,861359039868243,1,05022019,071225,19.965062,N,73.736088,E,0,050,03,0632,6.67,6.75,Idea Cel,1,1,23.96,4.0,0,W,28,404,004,4e2b,49e,4e2bea86727ab3d6704e2bea7714e2be9d72,0000,00,001133,232"));
+
         verifyPosition(decoder, text(
                 "$,04,XYZ123,0.0.1,TA,16,L,861359034100626,MH12AB1234,1,12,11,2018,08,53,08,018.489645,N,073.855972,E,000.0,220.04,12,593.0,01.13,00.75,AIRTEL,1,1,00.0,4.1,1,C,18,404,90,0c23,781a,5169,0c23,-093,0000,0000,0000,0000,0000,0000,0000,0000,0000,1000,01,000006,f906c65c,"));
 

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -268,7 +268,7 @@ private Position decodeNew(DeviceSession deviceSession, ByteBuf buf, int type, i
             }
 
             if (buf.readableBytes() >= 2) {
-                position.set(Position.PREFIX_TEMP + 2, buf.readUnsignedShort() / 16.0);
+                position.set(Position.PREFIX_TEMP + 2, buf.readShort() / 16.0);
             }
 
         }

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -81,10 +81,10 @@ public Gps103ProtocolDecoder(Protocol protocol) {
             .number(",([01])?").optional()       // ignition
             .number(",([01])?").optional()       // door
             .groupBegin()
-            .number(",(?:(d+.d+)%)?")  // fuel 1
-            .number(",(?:(d+.d+)%|d+)?")  // fuel 2
+            .number(",(?:(d+.d+)%)?")            // fuel 1
+            .number(",(?:(d+.d+)%|d+)?")         // fuel 2
             .groupEnd("?")
-            .number(",([-+]?d+)?")               // temperature
+            .number(",([-+]?d+)?").optional()    // temperature
             .groupEnd()
             .any()
             .compile();

File: src/org/traccar/WindowsService.java
Patch:
@@ -56,8 +56,8 @@ public boolean install(
 
         File jar = new File(WindowsService.class.getProtectionDomain().getCodeSource().getLocation().toURI());
         String command = javaBinary
-                + " -Duser.dir=\"" + jar.getAbsolutePath() + "\""
-                + " -jar \"" + jar.getParentFile().getAbsolutePath() + "\""
+                + " -Duser.dir=\"" + jar.getParentFile().getAbsolutePath() + "\""
+                + " -jar \"" + jar.getAbsolutePath() + "\""
                 + " --service \"" + config + "\"";
 
         boolean success = false;

File: src/org/traccar/protocol/Tr20ProtocolDecoder.java
Patch:
@@ -52,7 +52,7 @@ public Tr20ProtocolDecoder(Protocol protocol) {
             .number("(ddd)(dd.d+),")             // longitude
             .number("(d+),")                     // speed
             .number("(d+),")                     // course
-            .number("(?:NA|[FC](-?d+)),")        // temperature
+            .number("(?:NA|[FC]?(-?d+)),")       // temperature
             .number("(x{8}),")                   // status
             .number("(d+)")                      // event
             .any()

File: test/org/traccar/protocol/Tr20ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Tr20ProtocolDecoder decoder = new Tr20ProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "%%123456789012345,A,120101121800,N6000.0000E13000.0000,0,000,0,01034802,150,[Message]"));
+
         verifyNull(decoder, text(
                 "%%TRACKPRO01,1"));
 

File: src/org/traccar/protocol/FreematicsProtocolDecoder.java
Patch:
@@ -56,6 +56,7 @@ private Object decodeEvent(
                     break;
                 case "EV":
                     event = value;
+                    break;
                 case "TS":
                     time = value;
                     break;

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -562,8 +562,8 @@ private Object processFlexNegotiation(Channel channel, ByteBuf buf) {
             return null;
         }
 
-        byte flexProtocolVersion = (byte) buf.readUnsignedByte();
-        byte flexStructVersion = (byte) buf.readUnsignedByte();
+        short flexProtocolVersion = buf.readUnsignedByte();
+        short flexStructVersion = buf.readUnsignedByte();
         if ((flexProtocolVersion == 0x0A || flexProtocolVersion == 0x14)
             && (flexStructVersion == 0x0A || flexStructVersion == 0x14)) {
 

File: src/org/traccar/protocol/SatsolProtocolDecoder.java
Patch:
@@ -69,7 +69,7 @@ protected Object decode(
             position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
             position.setLatitude(buf.readUnsignedIntLE() * 0.000001);
             position.setLongitude(buf.readUnsignedIntLE() * 0.000001);
-            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
+            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE() * 0.01));
             position.setAltitude(buf.readShortLE());
             position.setCourse(buf.readUnsignedShortLE());
             position.setValid(buf.readUnsignedByte() > 0);

File: test/org/traccar/protocol/SatsolProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         SatsolProtocolDecoder decoder = new SatsolProtocolDecoder(null);
 
+        verifyPositions(decoder, binary(
+                "f0e1bf4cb2ec1600e1005f8791e901000000c959515c2cc24a03aeadcd010e01a800250001090201878e92e901000000cb59515c2dc24a03b8adcd018801a8001d0001080201325993e901000000cc59515c2fc24a03bfadcd01ab01a800220001080201dd8194e901000000cd59515c32c24a03ceadcd015801a8002500010802015f3795e905000900ce59515c32c24a03d8adcd01f600a700250001091401000000000000000000863496e901000000cf59515c34c24a03ddadcd019b00a700280001090201714197e904000600cf59515c34c24a03ddadcd019b00a7002800010a1401becd07001901"));
+
         verifyPositions(decoder, binary(
                 "22b5bf4cb2ec1600500122b37ba020001500cb5d2f5c68c24a0310aecd016200b1003d000004000177042700a501000000000000000101020100011e00a1657ca020001500cf5d2f5c68c24a03dbadcd013501b10097000004030177042700a501000000000000000101020101011e00816e7da003004800b95e2f5c89c24a03fbadcd010000aa00000000040601011038363133353930333632333039323600383933373530323730313030323335343836363000323537303237303132333534383636004d5453000000000066640101005700e515cf047ea001000000295f2f5c89c24a03fbadcd0100009a0000000106020106dc30a8030048006bc13e5c19c24a03bfadcd010000ad00000000050600011338363133353930333632333039323600383933373530323730313030323335343836363000323537303237303132333534383636004d5453000000000066640101005700e515"));
 

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -37,7 +37,7 @@ public String formatValue(String key, Object value) {
             DecimalFormat fmt = new DecimalFormat("+#.##;-#.##", DecimalFormatSymbols.getInstance(Locale.US));
             return fmt.format(offset);
         } else if (key.equals(Command.KEY_MESSAGE)) {
-            return DataConverter.printHex(value.toString().getBytes());
+            return DataConverter.printHex(value.toString().getBytes(StandardCharsets.UTF_16BE));
         }
 
         return null;

File: test/org/traccar/protocol/WatchProtocolEncoderTest.java
Patch:
@@ -43,7 +43,7 @@ public void testEncode() throws Exception {
         command.setDeviceId(1);
         command.setType(Command.TYPE_MESSAGE);
         command.set(Command.KEY_MESSAGE, "text");
-        assertEquals("[CS*123456789012345*0010*MESSAGE,74657874]", encoder.encodeCommand(null, command));
+        assertEquals("[CS*123456789012345*0018*MESSAGE,0074006500780074]", encoder.encodeCommand(null, command));
 
         command = new Command();
         command.setDeviceId(1);

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -37,7 +37,7 @@ public String formatValue(String key, Object value) {
             DecimalFormat fmt = new DecimalFormat("+#.##;-#.##", DecimalFormatSymbols.getInstance(Locale.US));
             return fmt.format(offset);
         } else if (key.equals(Command.KEY_MESSAGE)) {
-            return DataConverter.printHex(value.toString().getBytes());
+            return DataConverter.printHex(value.toString().getBytes(StandardCharsets.UTF_16));
         }
 
         return null;

File: test/org/traccar/protocol/WatchProtocolEncoderTest.java
Patch:
@@ -43,7 +43,7 @@ public void testEncode() throws Exception {
         command.setDeviceId(1);
         command.setType(Command.TYPE_MESSAGE);
         command.set(Command.KEY_MESSAGE, "text");
-        assertEquals("[CS*123456789012345*0010*MESSAGE,74657874]", encoder.encodeCommand(null, command));
+        assertEquals("[CS*123456789012345*001c*MESSAGE,feff0074006500780074]", encoder.encodeCommand(null, command));
 
         command = new Command();
         command.setDeviceId(1);

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -539,7 +539,9 @@ private interface FlexPositionParser {
 
     private Object processFlexSingle(
             FlexPositionParser parser, String flexHeader, DeviceSession deviceSession, Channel channel, ByteBuf buf) {
-        buf.readUnsignedInt(); // event index
+        if (!flexHeader.equals("~C")) {
+            buf.readUnsignedInt(); // event index
+        }
 
         ParseResult result = parser.parsePosition(deviceSession, buf);
 

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -588,7 +588,7 @@ private Object processFlexNegotiation(Channel channel, ByteBuf buf) {
 
         flexProtocolVersion = (byte) buf.readUnsignedByte();
         flexStructVersion = (byte) buf.readUnsignedByte();
-        if ((flexProtocolVersion == (byte) 0x0A ||  flexProtocolVersion == (byte) 0x14)
+        if ((flexProtocolVersion == (byte) 0x0A || flexProtocolVersion == (byte) 0x14)
             && (flexStructVersion == (byte) 0x0A || flexStructVersion == (byte) 0x14)) {
 
             flexBitfieldDataSize = buf.readUnsignedByte();
@@ -605,7 +605,7 @@ private Object processFlexNegotiation(Channel channel, ByteBuf buf) {
                 }
             }
         } else {
-            // Prepare request for downgrade of protocol version to FLEX 2.0
+            // Preparing request to downgrade protocol version to FLEX 2.0
             flexProtocolVersion = 0x14;
             flexStructVersion = 0x14;
         }

File: src/org/traccar/protocol/SatsolProtocolDecoder.java
Patch:
@@ -67,8 +67,8 @@ protected Object decode(
             position.setDeviceId(deviceSession.getDeviceId());
 
             position.setTime(new Date(buf.readUnsignedIntLE() * 1000));
-            position.setLongitude(buf.readUnsignedIntLE() * 0.000001);
             position.setLatitude(buf.readUnsignedIntLE() * 0.000001);
+            position.setLongitude(buf.readUnsignedIntLE() * 0.000001);
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShortLE()));
             position.setAltitude(buf.readShortLE());
             position.setCourse(buf.readUnsignedShortLE());

File: src/org/traccar/protocol/SatsolProtocol.java
Patch:
@@ -28,7 +28,7 @@ public SatsolProtocol() {
         addServer(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                pipeline.addLast(new LengthFieldBasedFrameDecoder(ByteOrder.BIG_ENDIAN, 1400, 8, 2, 0, 0, true));
+                pipeline.addLast(new LengthFieldBasedFrameDecoder(ByteOrder.LITTLE_ENDIAN, 1400, 8, 2, 0, 0, true));
                 pipeline.addLast(new SatsolProtocolDecoder(SatsolProtocol.this));
             }
         });

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -595,6 +595,7 @@ private Object decodeWifi(Channel channel, ByteBuf buf, DeviceSession deviceSess
 
         if (channel != null) {
             ByteBuf response = Unpooled.buffer();
+            response.writeShort(0x7878);
             response.writeByte(0);
             response.writeByte(type);
             response.writeBytes(time.resetReaderIndex());

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -163,7 +163,7 @@ private ParseResult parseNtcbPosition(DeviceSession deviceSession, ByteBuf buf)
                 position.set(Position.PREFIX_IN + 5, BitUtil.between(input, 4, 7));
                 position.set(Position.PREFIX_IN + 6, BitUtil.between(input, 7, 10));
                 position.set(Position.PREFIX_IN + 7, BitUtil.between(input, 10, 12));
-                position.set(Position.PREFIX_IN + 5, BitUtil.between(input, 12, 14));
+                position.set(Position.PREFIX_IN + 8, BitUtil.between(input, 12, 14));
             }
         } else if (isFormat(format, F50, F51, F52, F60)) {
             short input = buf.readUnsignedByte();

File: src/org/traccar/protocol/EelinkProtocolEncoder.java
Patch:
@@ -69,6 +69,7 @@ public static ByteBuf encodeContent(
         }
 
         result.writeBytes(buf);
+        buf.release();
 
         return result;
     }

File: src/org/traccar/protocol/ItsProtocolDecoder.java
Patch:
@@ -76,7 +76,7 @@ protected Object decode(
         String sentence = (String) msg;
 
         if (channel != null && sentence.startsWith("$,01,")) {
-            channel.writeAndFlush(new NetworkMessage("$,01,", remoteAddress));
+            channel.writeAndFlush(new NetworkMessage("$,1,*", remoteAddress));
         }
 
         Parser parser = new Parser(PATTERN, sentence);

File: src/org/traccar/helper/Log.java
Patch:
@@ -66,7 +66,7 @@ public synchronized void publish(LogRecord record) {
                             writer.close();
                             writer = null;
                             if (!new File(name).renameTo(new File(name + "." + this.suffix))) {
-                                throw new RuntimeException("Log file renaiming failed");
+                                throw new RuntimeException("Log file renaming failed");
                             }
                         }
                     }

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -135,7 +135,7 @@ protected Object encodeCommand(Channel channel, Command command) {
             case Command.TYPE_SET_PHONEBOOK:
                 return formatCommand(channel, command, "PHB,{%s}", Command.KEY_DATA);
             case Command.TYPE_VOICE_MESSAGE:
-                return formatCommand(channel, command, "TK," + getBinaryData(command));
+                return formatCommand(channel, command, "TK,%s", getBinaryData(command));
             case Command.TYPE_POSITION_PERIODIC:
                 return formatCommand(channel, command, "UPLOAD,{%s}", Command.KEY_FREQUENCY);
             case Command.TYPE_SET_TIMEZONE:

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -135,7 +135,7 @@ protected Object encodeCommand(Channel channel, Command command) {
             case Command.TYPE_SET_PHONEBOOK:
                 return formatCommand(channel, command, "PHB,{%s}", Command.KEY_DATA);
             case Command.TYPE_VOICE_MESSAGE:
-                return formatCommand(channel, command, "TK,{%s}", getBinaryData(command));
+                return formatCommand(channel, command, "TK,%s", getBinaryData(command));
             case Command.TYPE_POSITION_PERIODIC:
                 return formatCommand(channel, command, "UPLOAD,{%s}", Command.KEY_FREQUENCY);
             case Command.TYPE_SET_TIMEZONE:

File: src/org/traccar/protocol/WatchProtocolEncoder.java
Patch:
@@ -135,7 +135,7 @@ protected Object encodeCommand(Channel channel, Command command) {
             case Command.TYPE_SET_PHONEBOOK:
                 return formatCommand(channel, command, "PHB,{%s}", Command.KEY_DATA);
             case Command.TYPE_VOICE_MESSAGE:
-                return formatCommand(channel, command, "TK," + getBinaryData(command));
+                return formatCommand(channel, command, "TK,{%s}", getBinaryData(command));
             case Command.TYPE_POSITION_PERIODIC:
                 return formatCommand(channel, command, "UPLOAD,{%s}", Command.KEY_FREQUENCY);
             case Command.TYPE_SET_TIMEZONE:

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -113,14 +113,13 @@ private ParseResult parsePosition(DeviceSession deviceSession, ByteBuf buf) {
         position.set(Position.KEY_STATUS, buf.readUnsignedByte());
         position.set(Position.KEY_RSSI, buf.readUnsignedByte());
 
-        // NOTE: Needs testing
         if (isFormat(format, F10, F20, F30)) {
             position.set(Position.KEY_OUTPUT, buf.readUnsignedShortLE());
-        } else if (isFormat(format, F40, F50, F51, F52)) {
+        } else if (isFormat(format, F50, F51, F52)) {
             int extField = buf.readUnsignedByte();
             position.set(Position.KEY_OUTPUT, extField & 0x3);
             position.set(Position.KEY_SATELLITES, extField >> 2);
-        } else if (isFormat(format, F60)) {
+        } else if (isFormat(format, F40, F60)) {
             position.set(Position.KEY_OUTPUT, buf.readUnsignedByte() & 0xF);
         }
 

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -195,7 +195,7 @@ private ParseResult parsePosition(DeviceSession deviceSession, ByteBuf buf) {
             if (isFormat(format, F60)) {
                 position.setLatitude(buf.readIntLE() / 600000.0);
                 position.setLongitude(buf.readIntLE() / 600000.0);
-                position.setAltitude(buf.readIntLE() * 0.01);
+                position.setAltitude(buf.readIntLE() * 0.1);
             } else {
                 position.setLatitude(buf.readFloatLE() / Math.PI * 180);
                 position.setLongitude(buf.readFloatLE() / Math.PI * 180);

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -176,8 +176,8 @@ private ParseResult parsePosition(DeviceSession deviceSession, ByteBuf buf) {
             position.set(Position.PREFIX_TEMP + 2, buf.readByte());
             position.set(Position.PREFIX_TEMP + 3, buf.readByte());
             position.set(Position.PREFIX_TEMP + 4, buf.readByte());
-            position.set(Position.KEY_AXLE_WEIGHT + 3, buf.readIntLE());
-            position.set(Position.KEY_RPM + 3, buf.readUnsignedShortLE());
+            position.set(Position.KEY_AXLE_WEIGHT, buf.readIntLE());
+            position.set(Position.KEY_RPM, buf.readUnsignedShortLE());
         }
 
         if (isFormat(format, F20, F50, F51, F52, F60)) {

File: src/org/traccar/ServerManager.java
Patch:
@@ -88,7 +88,7 @@ public void start() throws Exception {
             try {
                 server.start();
             } catch (BindException e) {
-                LOGGER.warn("Port %d is disabled due to conflict", server.getPort());
+                LOGGER.warn("Port {} is disabled due to conflict", server.getPort());
             }
         }
     }

File: src/org/traccar/ServerManager.java
Patch:
@@ -88,7 +88,7 @@ public void start() throws Exception {
             try {
                 server.start();
             } catch (BindException e) {
-                LOGGER.warn("Port %d is disabled due to conflict", server.getPort());
+                LOGGER.warn("Port {} is disabled due to conflict", server.getPort());
             }
         }
     }

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -29,6 +29,7 @@
 import java.sql.SQLException;
 import java.util.Arrays;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 public class MainEventHandler extends ChannelInboundHandlerAdapter {
@@ -44,7 +45,7 @@ public MainEventHandler() {
         if (connectionlessProtocolList != null) {
             connectionlessProtocols.addAll(Arrays.asList(connectionlessProtocolList.split(",")));
         }
-        logEvents = new HashSet<>(Arrays.asList(
+        logEvents = new LinkedHashSet<>(Arrays.asList(
                 Context.getConfig().getString("logger.events", DEFAULT_LOGGER_EVENTS).split(",")));
     }
 

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -29,6 +29,7 @@
 import java.sql.SQLException;
 import java.util.Arrays;
 import java.util.HashSet;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 public class MainEventHandler extends ChannelInboundHandlerAdapter {
@@ -44,7 +45,7 @@ public MainEventHandler() {
         if (connectionlessProtocolList != null) {
             connectionlessProtocols.addAll(Arrays.asList(connectionlessProtocolList.split(",")));
         }
-        logEvents = new HashSet<>(Arrays.asList(
+        logEvents = new LinkedHashSet<>(Arrays.asList(
                 Context.getConfig().getString("logger.events", DEFAULT_LOGGER_EVENTS).split(",")));
     }
 

File: src/org/traccar/geocoder/GoogleGeocoder.java
Patch:
@@ -91,7 +91,7 @@ public Address parseAddress(JsonObject json) {
     }
 
     @Override
-    protected String getError(JsonObject json) {
+    protected String parseError(JsonObject json) {
         return json.getString("error_message");
     }
 

File: src/org/traccar/geocoder/JsonGeocoder.java
Patch:
@@ -64,7 +64,7 @@ private String handleResponse(
             }
             return formattedAddress;
         } else {
-            String msg = "Empty address. " + getError(json);
+            String msg = "Empty address. Error: " + parseError(json);
             if (callback != null) {
                 callback.onFailure(new GeocoderException(msg));
             } else {
@@ -114,8 +114,8 @@ public void failed(Throwable throwable) {
 
     public abstract Address parseAddress(JsonObject json);
 
-    protected String getError(JsonObject json) {
-        return "";
+    protected String parseError(JsonObject json) {
+        return null;
     }
 
 }

File: src/org/traccar/geocoder/JsonGeocoder.java
Patch:
@@ -65,7 +65,7 @@ private String handleResponse(
             return formattedAddress;
         } else {
             if (callback != null) {
-                callback.onFailure(new GeocoderException("Empty address"));
+                callback.onFailure(new GeocoderException("Empty address. " + json.getString("error_message")));
             } else {
                 LOGGER.warn("Empty address");
             }

File: test/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200TextProtocolDecoder decoder = new Gl200TextProtocolDecoder(null);
 
+        verifyAttributes(decoder, buffer(
+                "+BUFF:GTSTC,410301,864802030022424,,,0,,,,,,,0228,0002,4EE8,1BFF489,00,20181207134332,EC90$"));
+
         verifyPositions(decoder, buffer(
                 "+RESP:GTFRI,1A0900,860599000306845,G3-313,0,0,4,1,2.1,0,426.7,8.611466,47.681639,20181214134603,0228,0001,077F,4812,25.2,1,5.7,34,437.3,8.611600,47.681846,20181214134619,0228,0001,077F,4812,25.2,1,4.4,62,438.2,8.611893,47.681983,20181214134633,0228,0001,077F,4812,25.2,1,4.8,78,436.6,8.612236,47.682040,20181214134648,0228,0001,077F,4812,25.2,83,20181214134702,0654$"));
 

File: src/org/traccar/protocol/WristbandProtocolDecoder.java
Patch:
@@ -46,7 +46,7 @@ private void sendResponse(
             Channel channel, String imei, String version, int type, String data) {
 
         if (channel != null) {
-            String sentence = String.format("YX%s|%s|0|{F%d#%s}\r\n", imei, version, type, data);
+            String sentence = String.format("YX%s|%s|0|{F%02d#%s}\r\n", imei, version, type, data);
             ByteBuf response = Unpooled.buffer();
             if (type != 91) {
                 response.writeBytes(new byte[]{0x00, 0x01, 0x02});

File: test/org/traccar/protocol/WristbandProtocolDecoderTest.java
Patch:
@@ -16,6 +16,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "000102004159583336373535313631303030303934347c56312e307c317c7b4639312330317c30307c30307c33475f7065745f323031382f30352f31362031313a30307d0d0afffefc"));
 
+        verifyNull(decoder, binary(
+                "000102003559583836383730343034343735303035357c56312e307c317c7b4630312339342c312c3130302c302c33313030302c3930307d0d0afffefc"));
+
     }
 
 }

File: src/org/traccar/protocol/WristbandProtocol.java
Patch:
@@ -16,7 +16,6 @@
 package org.traccar.protocol;
 
 import io.netty.handler.codec.LengthFieldBasedFrameDecoder;
-import io.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.PipelineBuilder;
 import org.traccar.TrackerServer;
@@ -28,7 +27,6 @@ public WristbandProtocol() {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new LengthFieldBasedFrameDecoder(1024, 3, 2, 3, 0));
-                pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new WristbandProtocolDecoder(WristbandProtocol.this));
             }
         });

File: src/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -55,13 +55,13 @@ public String getProtocolName() {
         return protocol != null ? protocol.getName() : PROTOCOL_UNKNOWN;
     }
 
-    public String getServer(Channel channel) {
+    public String getServer(Channel channel, char delimiter) {
         String server = config.getString(getProtocolName() + ".server");
         if (server == null && channel != null) {
             InetSocketAddress address = (InetSocketAddress) channel.localAddress();
             server = address.getAddress().getHostAddress() + ":" + address.getPort();
         }
-        return server;
+        return server != null ? server.replace(':', delimiter) : null;
     }
 
     protected double convertSpeed(double value, String defaultUnits) {

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -402,7 +402,7 @@ protected Object decode(
             sendResponse(channel, remoteAddress, id, MSG_HEARTBEAT, response);
             return null;
         } else if (command == MSG_SERVER) {
-            ByteBuf response = Unpooled.copiedBuffer(getServer(channel), StandardCharsets.US_ASCII);
+            ByteBuf response = Unpooled.copiedBuffer(getServer(channel, ':'), StandardCharsets.US_ASCII);
             sendResponse(channel, remoteAddress, id, MSG_SERVER, response);
             return null;
         } else if (command == MSG_UPLOAD_PHOTO) {

File: src/org/traccar/protocol/WristbandProtocolDecoder.java
Patch:
@@ -108,11 +108,11 @@ private List<Position> decodeMessage(
 
         switch (type) {
             case 90:
-                sendResponse(channel, imei, version, type, getServer(channel));
+                sendResponse(channel, imei, version, type, getServer(channel, ','));
                 break;
             case 91:
                 String time = new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss").format(new Date());
-                sendResponse(channel, imei, version, type, time + "|" + getServer(channel));
+                sendResponse(channel, imei, version, type, time + "|" + getServer(channel, ','));
                 break;
             case 1:
                 sendResponse(channel, imei, version, type, "0");

File: src/org/traccar/Context.java
Patch:
@@ -60,6 +60,7 @@
 import org.traccar.geocoder.MapQuestGeocoder;
 import org.traccar.geocoder.NominatimGeocoder;
 import org.traccar.geocoder.OpenCageGeocoder;
+import org.traccar.geocoder.MapmyIndiaGeocoder;
 import org.traccar.geocoder.Geocoder;
 import org.traccar.geolocation.UnwiredGeolocationProvider;
 import org.traccar.helper.Log;
@@ -351,6 +352,8 @@ public static Geocoder initGeocoder() {
                 return new BanGeocoder(cacheSize, addressFormat);
             case "here":
                 return new HereGeocoder(id, key, language, cacheSize, addressFormat);
+            case "mapmyindia":
+                return new MapmyIndiaGeocoder(url, key, cacheSize, addressFormat);
             default:
                 return new GoogleGeocoder(key, language, cacheSize, addressFormat);
         }

File: src/org/traccar/WebDataHandler.java
Patch:
@@ -145,7 +145,7 @@ public String formatRequest(Position position) throws UnsupportedEncodingExcepti
             if (device.getGroupId() != 0) {
                 Group group = Context.getGroupsManager().getById(device.getGroupId());
                 if (group != null) {
-                deviceGroupName = group.getName();
+                    deviceGroupName = group.getName();
                 }
             }
 

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -160,10 +160,10 @@ private void decodeTagOther(Position position, ByteBuf buf, int tag) {
                 position.set(Position.KEY_STATUS, buf.readUnsignedShortLE());
                 break;
             case 0x41:
-                position.set(Position.KEY_POWER, buf.readUnsignedShortLE());
+                position.set(Position.KEY_POWER, buf.readUnsignedShortLE() / 1000.0);
                 break;
             case 0x42:
-                position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE());
+                position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() / 1000.0);
                 break;
             case 0x43:
                 position.set(Position.KEY_DEVICE_TEMP, buf.readByte());

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -160,10 +160,10 @@ private void decodeTagOther(Position position, ByteBuf buf, int tag) {
                 position.set(Position.KEY_STATUS, buf.readUnsignedShortLE());
                 break;
             case 0x41:
-                position.set(Position.KEY_POWER, buf.readUnsignedShortLE());
+                position.set(Position.KEY_POWER, buf.readUnsignedShortLE() / 1000.0);
                 break;
             case 0x42:
-                position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE());
+                position.set(Position.KEY_BATTERY, buf.readUnsignedShortLE() / 1000.0);
                 break;
             case 0x43:
                 position.set(Position.KEY_DEVICE_TEMP, buf.readByte());

File: src/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -729,6 +729,9 @@ private Object decodeCan(Channel channel, SocketAddress remoteAddress, String se
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         if (BitUtil.check(reportMask, 30)) {
+            while (values[index].isEmpty()) {
+                index += 1;
+            }
             position.setValid(Integer.parseInt(values[index++]) > 0);
             if (!values[index].isEmpty()) {
                 position.setSpeed(UnitsConverter.knotsFromKph(Double.parseDouble(values[index++])));

File: test/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200TextProtocolDecoder decoder = new Gl200TextProtocolDecoder(null);
 
+        verifyPosition(decoder, buffer(
+                "+RESP:GTCAN,270703,867162025056839,gv300w,0,1,E07FFFFF,,2,H9307659,368713.50,1291,90,91,,P82.40,,61,10.10,6.76,3.34,524.08,,,0000,,00,,,007FFFFF,,,,,,,,,,,,,,,,,,,,,0000,2,0,,,0,88.6,104,117.6,-116.886007,32.543697,20181031202959,0334,0020,5234,7FCC3D0,00,20181031203002,9F50$"));
+
         verifyPositions(decoder, buffer(
                 "+RESP:GTERI,310701,863286023712855,,00000004,28378,10,1,1,0.0,294,358.4,14.271475,50.110771,20181111185001,0230,0003,94D4,3B30,00,14.5,,,,110000,2,0,C03FFFFF,,0,H46400,12310.70,0,0,83,,,,0,,0.53,3.43,,,,40,,0,,,20181111185252,2DFF"));
 

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -160,7 +160,7 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, binary(
                 "7979000894000000000338ba0d0a"));
 
-        verifyNull(decoder, binary(
+        verifyAttributes(decoder, binary(
                 "79790020940a03516080825457290502194200448892980691312079088572f50004d4350d0a"));
 
         verifyPosition(decoder, binary(

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "78780D01086471700328358100093F040D0A"));
 
-        verifyPosition(decoder, binary(
+        verifyAttributes(decoder, binary(
                 "79790020940A035985708053908307060104900402788950301217070401538F0003E8210D0A"));
 
         verifyPosition(decoder, binary(

File: src/org/traccar/protocol/C2stekProtocolDecoder.java
Patch:
@@ -81,8 +81,6 @@ private String decodeAlarm(int alarm) {
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
-        org.traccar.helper.PatternUtil.MatchResult matchResult =
-                org.traccar.helper.PatternUtil.checkPattern(PATTERN.pattern(), (String) msg);
 
         String sentence = (String) msg;
         if (sentence.contains("$20$") && channel != null) {

File: test/org/traccar/protocol/FreematicsProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         FreematicsProtocolDecoder decoder = new FreematicsProtocolDecoder(null);
 
+        verifyNull(decoder, text(
+                "1#EV=2,TS=1871902,ID=ESP32305C06C40A24*AC"));
+
         verifyNull(decoder, text(
                 "0#EV=1,TS=23930,ID=ID1C6606C40A24,SK=TEST_SERVER_KEY*49"));
 

File: test/org/traccar/protocol/ItsProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         ItsProtocolDecoder decoder = new ItsProtocolDecoder(null);
 
+        verifyPosition(decoder, text(
+                "$,04,XYZ123,0.0.1,TA,16,L,861359034100626,MH12AB1234,1,12,11,2018,08,53,08,018.489645,N,073.855972,E,000.0,220.04,12,593.0,01.13,00.75,AIRTEL,1,1,00.0,4.1,1,C,18,404,90,0c23,781a,5169,0c23,-093,0000,0000,0000,0000,0000,0000,0000,0000,0000,1000,01,000006,f906c65c,"));
+
         verifyPosition(decoder, text(
                 "$,A,MFR,7.0,NR,01,L,869026034780985,PJ09BU1234,1,12112018,121953,12.756974,N,077.800025,E,000.0,318.03,15,794.0,001.3,000.7,TAMIL NAD,0,1,13.08,04.13,0,O,22,404,80,0919,71C1,0919,7168,19,0919,71c3,17,0919,71c2,11,0919,7167,09,0011,00,000173,D8,000000.00,,,"));
 

File: src/org/traccar/protocol/Xrb28Protocol.java
Patch:
@@ -38,7 +38,7 @@ protected void addProtocolHandlers(PipelineBuilder pipeline) {
                 pipeline.addLast(new LineBasedFrameDecoder(1024));
                 pipeline.addLast(new StringEncoder());
                 pipeline.addLast(new StringDecoder());
-                pipeline.addLast(new Ardi01ProtocolDecoder(Xrb28Protocol.this));
+                pipeline.addLast(new Xrb28ProtocolDecoder(Xrb28Protocol.this));
             }
         });
     }

File: src/org/traccar/protocol/Xrb28ProtocolDecoder.java
Patch:
@@ -68,7 +68,7 @@ protected Object decode(
 
         String sentence = (String) msg;
 
-        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, sentence.substring(8, 24));
+        DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, sentence.substring(9, 24));
         if (deviceSession == null) {
             return null;
         }

File: src/org/traccar/protocol/OwnTracksProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 import org.traccar.Context;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
-import org.traccar.model.Event;
 import org.traccar.model.Device;
 
 import javax.json.Json;

File: src/org/traccar/protocol/OwnTracksProtocolDecoder.java
Patch:
@@ -90,7 +90,6 @@ protected Object decode(
 
         position.setDeviceId(deviceSession.getDeviceId());
         position.setProtocol(getProtocolName());
-        //position.set(Position.KEY_ORIGINAL, request.getContent().toString(StandardCharsets.US_ASCII));
 
         position.setTime(new Date(root.getJsonNumber("tst").longValue() * 1000));
         if (root.containsKey("sent")) {
@@ -180,10 +179,8 @@ private void setEventOrAlarm(Position position, String t, Integer rty) {
             position.set(Position.KEY_EVENT, Event.TYPE_ALARM);
             position.set(Position.KEY_ALARM, Position.ALARM_POWER_ON);
         } else if (t.equals("i")) {
-            //position.set(Position.KEY_EVENT, Event.TYPE_IGNITION_ON);
             position.set(Position.KEY_IGNITION, true);
         } else if (t.equals("I")) {
-            //position.set(Position.KEY_EVENT, Event.TYPE_IGNITION_OFF);
             position.set(Position.KEY_IGNITION, false);
         } else if (t.equals("E")) {
             position.set(Position.KEY_EVENT, Event.TYPE_ALARM);

File: src/org/traccar/sms/HttpSmsClient.java
Patch:
@@ -49,7 +49,8 @@ public HttpSmsClient() {
         if (authorization == null) {
             String user = Context.getConfig().getString("sms.http.user");
             String password = Context.getConfig().getString("sms.http.password");
-            authorization = "Basic " + DataConverter.printBase64((user + ":" + password).getBytes());
+            authorization = "Basic "
+                    + DataConverter.printBase64((user + ":" + password).getBytes(StandardCharsets.UTF_8));
         }
         template = Context.getConfig().getString("sms.http.template").trim();
         if (template.charAt(0) == '{' || template.charAt(0) == '[') {

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -23,10 +23,10 @@
 import io.netty.handler.timeout.IdleStateEvent;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.traccar.helper.DateUtil;
 import org.traccar.model.Position;
 
 import java.sql.SQLException;
-import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -61,8 +61,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             StringBuilder s = new StringBuilder();
             s.append(formatChannel(ctx.channel())).append(" ");
             s.append("id: ").append(uniqueId);
-            s.append(", time: ").append(
-                    new SimpleDateFormat(Context.DATE_FORMAT).format(position.getFixTime()));
+            s.append(", time: ").append(DateUtil.formatDate(position.getFixTime(), false));
             s.append(", lat: ").append(String.format("%.5f", position.getLatitude()));
             s.append(", lon: ").append(String.format("%.5f", position.getLongitude()));
             if (position.getSpeed() > 0) {

File: src/org/traccar/database/DataManager.java
Patch:
@@ -20,7 +20,6 @@
 import java.lang.reflect.Method;
 import java.net.URL;
 import java.sql.SQLException;
-import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Date;
@@ -42,6 +41,7 @@
 import org.slf4j.LoggerFactory;
 import org.traccar.Config;
 import org.traccar.Context;
+import org.traccar.helper.DateUtil;
 import org.traccar.model.Attribute;
 import org.traccar.model.Device;
 import org.traccar.model.Driver;
@@ -363,8 +363,7 @@ public void clearHistory() throws SQLException {
         long historyDays = config.getInteger("database.historyDays");
         if (historyDays != 0) {
             Date timeLimit = new Date(System.currentTimeMillis() - historyDays * 24 * 3600 * 1000);
-            LOGGER.info(
-                    "Clearing history earlier than " + new SimpleDateFormat(Context.DATE_FORMAT).format(timeLimit));
+            LOGGER.info("Clearing history earlier than " + DateUtil.formatDate(timeLimit, false));
             QueryBuilder.create(dataSource, getQuery("database.deletePositions"))
                     .setDate("serverTime", timeLimit)
                     .executeUpdate();

File: src/org/traccar/database/StatisticsManager.java
Patch:
@@ -18,6 +18,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.traccar.Context;
+import org.traccar.helper.DateUtil;
 import org.traccar.model.Statistics;
 
 import javax.ws.rs.client.Entity;
@@ -71,7 +72,7 @@ private void checkSplit() {
 
             String url = Context.getConfig().getString("server.statistics");
             if (url != null) {
-                String time = Context.DATE_FORMATTER.format(statistics.getCaptureTime().toInstant());
+                String time = DateUtil.formatDate(statistics.getCaptureTime());
 
                 Form form = new Form();
                 form.param("version", Context.getAppVersion());

File: src/org/traccar/web/CsvBuilder.java
Patch:
@@ -31,6 +31,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.traccar.Context;
+import org.traccar.helper.DateUtil;
 
 public class CsvBuilder {
 
@@ -90,7 +91,7 @@ public void addLine(Object object) {
                         addSeparator();
                     } else if (method.getReturnType().equals(Date.class)) {
                         Date value = (Date) method.invoke(object);
-                        builder.append(Context.DATE_FORMATTER.format(value.toInstant()));
+                        builder.append(DateUtil.formatDate(value));
                         addSeparator();
                     } else if (method.getReturnType().equals(Map.class)) {
                         Map value = (Map) method.invoke(object);

File: src/org/traccar/web/GpxBuilder.java
Patch:
@@ -18,7 +18,7 @@
 
 import java.util.Collection;
 
-import org.traccar.Context;
+import org.traccar.helper.DateUtil;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
@@ -51,7 +51,7 @@ public GpxBuilder(String name) {
 
     public void addPosition(Position position) {
         builder.append(String.format(POINT, position.getLatitude(), position.getLongitude(),
-                Context.DATE_FORMATTER.format(position.getFixTime().toInstant()), position.getAltitude(),
+                DateUtil.formatDate(position.getFixTime()), position.getAltitude(),
                 position.getCourse(), UnitsConverter.mpsFromKnots(position.getSpeed())));
     }
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -330,7 +330,7 @@ protected Object decode(
 
         String sentence = (String) msg;
 
-        if (sentence.contains("imei:") && sentence.length() <= 25) {
+        if (sentence.contains("imei:") && sentence.length() <= 30) {
             if (channel != null) {
                 channel.writeAndFlush(new NetworkMessage("LOAD", remoteAddress));
                 Matcher matcher = Pattern.compile("imei:(\\d+),").matcher(sentence);

File: src/org/traccar/protocol/RetranslatorFrameDecoder.java
Patch:
@@ -28,7 +28,7 @@ protected Object decode(
 
         int length = 4 + buf.getIntLE(buf.readerIndex());
         if (buf.readableBytes() >= length) {
-            return buf.readBytes(length);
+            return buf.readRetainedSlice(length);
         } else {
             return null;
         }

File: src/org/traccar/geocoder/NominatimGeocoder.java
Patch:
@@ -21,7 +21,7 @@ public class NominatimGeocoder extends JsonGeocoder {
 
     private static String formatUrl(String url, String key, String language) {
         if (url == null) {
-            url = "http://nominatim.openstreetmap.org/reverse";
+            url = "https://nominatim.openstreetmap.org/reverse";
         }
         url += "?format=json&lat=%f&lon=%f&zoom=18&addressdetails=1";
         if (key != null) {

File: src/org/traccar/WindowsService.java
Patch:
@@ -140,7 +140,7 @@ public boolean stop() {
             Advapi32.INSTANCE.CloseServiceHandle(serviceManager);
         }
 
-        return (success);
+        return success;
     }
 
     public void init() throws URISyntaxException {

File: src/org/traccar/protocol/AnytrekProtocolDecoder.java
Patch:
@@ -48,7 +48,7 @@ private void sendResponse(Channel channel, SocketAddress remoteAddress, int type
             response.writeShortLE(0); // checksum
             response.writeByte('\r');
             response.writeByte('\n');
-            channel.writeAndFlush(new NetworkMessage(response, channel.remoteAddress()));
+            channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
     }
 

File: test/org/traccar/protocol/OpenGtsProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         OpenGtsProtocolDecoder decoder = new OpenGtsProtocolDecoder(new OpenGtsProtocol());
 
+        verifyPosition(decoder, request(
+                "/?id=999000000000003&gprmc=$GPRMC,082202.0,A,5006.747329,N,01416.512315,E,0.0,,131018,1.2,E,A*2E"));
+
         verifyPosition(decoder, request(
                 "/?id=gprmc_999000000000003&gprmc=$GPRMC,143013.0,A,5006.728217,N,01416.437869,E,0.0,329.6,281017,1.2,E,A*0E"));
 

File: test/org/traccar/protocol/GpsmtaProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, text(
                 "864528021249771 1446116686 49.85073 24.004438 0 217 6 338 00 59 27 0 0"));
 
-        verifyPosition(decoder, text(
+        verifyNotNull(decoder, text(
                 "359144048138856 1442932957 -49.85064 -24.003979 1 0 40 0 10 110 26 0 0"));
 
     }

File: src/org/traccar/helper/Log.java
Patch:
@@ -171,6 +171,9 @@ public static void setupLogger(Config config) {
         handler.setLevel(level);
 
         rootLogger.addHandler(handler);
+
+        Logger.getLogger("sun").setLevel(Level.OFF);
+        Logger.getLogger("java").setLevel(Level.OFF);
     }
 
     public static String exceptionStack(Throwable exception) {

File: test/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class GeocoderTest {
     @Test
     public void test() throws InterruptedException {
         Locale.setDefault(Locale.US);
-        testGoogle();
+        testBan();
     }
 
     private String address;

File: src/org/traccar/Context.java
Patch:
@@ -406,7 +406,7 @@ public static void init(String configFile) throws Exception {
         }
 
         if (config.getBoolean("web.enable")) {
-            webServer = new WebServer(config, dataManager.getDataSource());
+            webServer = new WebServer(config);
         }
 
         permissionsManager = new PermissionsManager(dataManager, usersManager);

File: src/org/traccar/protocol/GpsmtaProtocolDecoder.java
Patch:
@@ -36,8 +36,8 @@ public GpsmtaProtocolDecoder(GpsmtaProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .expression("([^ ]+) ")              // uid
             .number("(d+) ")                     // time (unix time)
-            .number("-?(d+.d+) ")                // latitude
-            .number("-?(d+.d+) ")                // longitude
+            .number("(-?d+.d+) ")                // latitude
+            .number("(-?d+.d+) ")                // longitude
             .number("(d+) ")                     // speed
             .number("(d+) ")                     // course
             .number("(d+) ")                     // accuracy

File: src/org/traccar/protocol/TramigoFrameDecoder.java
Patch:
@@ -31,9 +31,9 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, ByteBuf buf)
 
         int length;
         if (buf.getUnsignedByte(buf.readerIndex()) == 0x80) {
-            length = buf.getUnsignedShort(buf.readerIndex() + 6);
-        } else {
             length = buf.getUnsignedShortLE(buf.readerIndex() + 6);
+        } else {
+            length = buf.getUnsignedShort(buf.readerIndex() + 6);
         }
 
         if (length >= buf.readableBytes()) {

File: src/org/traccar/protocol/GpsmtaProtocolDecoder.java
Patch:
@@ -36,16 +36,16 @@ public GpsmtaProtocolDecoder(GpsmtaProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .expression("([^ ]+) ")              // uid
             .number("(d+) ")                     // time (unix time)
-            .number("(d+.d+) ")                  // latitude
-            .number("(d+.d+) ")                  // longitude
+            .number("-?(d+.d+) ")                // latitude
+            .number("-?(d+.d+) ")                // longitude
             .number("(d+) ")                     // speed
             .number("(d+) ")                     // course
             .number("(d+) ")                     // accuracy
             .number("(d+) ")                     // altitude
             .number("(d+) ")                     // flags
             .number("(d+) ")                     // battery
             .number("(d+) ")                     // temperature
-            .number("(d)")                       // changing status
+            .number("(d)")                       // charging status
             .any()
             .compile();
 

File: test/org/traccar/protocol/GpsmtaProtocolDecoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testDecode() throws Exception {
                 "864528021249771 1446116686 49.85073 24.004438 0 217 6 338 00 59 27 0 0"));
 
         verifyPosition(decoder, text(
-                "359144048138856 1442932957 49.85064 24.003979 1 0 40 0 10 110 26 0 0"));
+                "359144048138856 1442932957 -49.85064 -24.003979 1 0 40 0 10 110 26 0 0"));
 
     }
 

File: src/org/traccar/protocol/GpsmtaProtocolDecoder.java
Patch:
@@ -36,16 +36,16 @@ public GpsmtaProtocolDecoder(GpsmtaProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .expression("([^ ]+) ")              // uid
             .number("(d+) ")                     // time (unix time)
-            .number("(d+.d+) ")                  // latitude
-            .number("(d+.d+) ")                  // longitude
+            .number("-?(d+.d+) ")                // latitude
+            .number("-?(d+.d+) ")                // longitude
             .number("(d+) ")                     // speed
             .number("(d+) ")                     // course
             .number("(d+) ")                     // accuracy
             .number("(d+) ")                     // altitude
             .number("(d+) ")                     // flags
             .number("(d+) ")                     // battery
             .number("(d+) ")                     // temperature
-            .number("(d)")                       // changing status
+            .number("(d)")                       // charging status
             .any()
             .compile();
 

File: test/org/traccar/protocol/GpsmtaProtocolDecoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testDecode() throws Exception {
                 "864528021249771 1446116686 49.85073 24.004438 0 217 6 338 00 59 27 0 0"));
 
         verifyPosition(decoder, text(
-                "359144048138856 1442932957 49.85064 24.003979 1 0 40 0 10 110 26 0 0"));
+                "359144048138856 1442932957 -49.85064 -24.003979 1 0 40 0 10 110 26 0 0"));
 
     }
 

File: src/org/traccar/Context.java
Patch:
@@ -57,6 +57,7 @@
 import org.traccar.geocoder.GeocodeFarmGeocoder;
 import org.traccar.geocoder.GeocodeXyzGeocoder;
 import org.traccar.geocoder.GisgraphyGeocoder;
+import org.traccar.geocoder.BanGeocoder;
 import org.traccar.geocoder.GoogleGeocoder;
 import org.traccar.geocoder.MapQuestGeocoder;
 import org.traccar.geocoder.NominatimGeocoder;
@@ -339,6 +340,8 @@ public static Geocoder initGeocoder() {
                 return new GeocodeFarmGeocoder(key, language, cacheSize, addressFormat);
             case "geocodexyz":
                 return new GeocodeXyzGeocoder(key, cacheSize, addressFormat);
+            case "ban":
+                return new BanGeocoder(cacheSize, addressFormat);
             default:
                 return new GoogleGeocoder(key, language, cacheSize, addressFormat);
         }

File: src/org/traccar/geocoder/AddressFormat.java
Patch:
@@ -30,6 +30,7 @@
  * %u - suburb
  * %r - street (road)
  * %h - house
+ * %f - formatted address
  *
  */
 public class AddressFormat extends Format {

File: src/org/traccar/database/StatisticsManager.java
Patch:
@@ -23,7 +23,6 @@
 import javax.ws.rs.client.Entity;
 import javax.ws.rs.core.Form;
 import java.sql.SQLException;
-import java.time.format.DateTimeFormatter;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.HashSet;
@@ -72,7 +71,7 @@ private void checkSplit() {
 
             String url = Context.getConfig().getString("server.statistics");
             if (url != null) {
-                String time = DateTimeFormatter.ISO_DATE_TIME.format(statistics.getCaptureTime().toInstant());
+                String time = Context.DATE_FORMATTER.format(statistics.getCaptureTime().toInstant());
 
                 Form form = new Form();
                 form.param("version", Context.getAppVersion());

File: src/org/traccar/helper/DateUtil.java
Patch:
@@ -15,8 +15,9 @@
  */
 package org.traccar.helper;
 
+import org.traccar.Context;
+
 import java.time.Instant;
-import java.time.format.DateTimeFormatter;
 import java.util.Calendar;
 import java.util.Date;
 
@@ -58,7 +59,7 @@ private static Date dateAdd(Date guess, int field, int amount) {
     }
 
     public static Date parseDate(String value) {
-        return Date.from(Instant.from(DateTimeFormatter.ISO_DATE_TIME.parse(value)));
+        return Date.from(Instant.from(Context.DATE_FORMATTER.parse(value)));
     }
 
 }

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -20,6 +20,7 @@
 import io.netty.handler.codec.http.HttpResponseStatus;
 import io.netty.handler.codec.http.QueryStringDecoder;
 import org.traccar.BaseHttpProtocolDecoder;
+import org.traccar.Context;
 import org.traccar.DeviceSession;
 import org.traccar.model.CellTower;
 import org.traccar.model.Network;
@@ -31,7 +32,6 @@
 import java.text.DateFormat;
 import java.text.SimpleDateFormat;
 import java.time.Instant;
-import java.time.format.DateTimeFormatter;
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
@@ -83,7 +83,7 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
                         } catch (NumberFormatException error) {
                             if (value.contains("T")) {
                                 position.setTime(
-                                        Date.from(Instant.from(DateTimeFormatter.ISO_DATE_TIME.parse(value))));
+                                        Date.from(Instant.from(Context.DATE_FORMATTER.parse(value))));
                             } else {
                                 DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                 position.setTime(dateFormat.parse(value));

File: src/org/traccar/web/CsvBuilder.java
Patch:
@@ -19,7 +19,6 @@
 import java.beans.Introspector;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.time.format.DateTimeFormatter;
 import java.util.Arrays;
 import java.util.Collection;
 import java.util.Comparator;
@@ -91,7 +90,7 @@ public void addLine(Object object) {
                         addSeparator();
                     } else if (method.getReturnType().equals(Date.class)) {
                         Date value = (Date) method.invoke(object);
-                        builder.append(DateTimeFormatter.ISO_DATE_TIME.format(value.toInstant()));
+                        builder.append(Context.DATE_FORMATTER.format(value.toInstant()));
                         addSeparator();
                     } else if (method.getReturnType().equals(Map.class)) {
                         Map value = (Map) method.invoke(object);

File: src/org/traccar/web/GpxBuilder.java
Patch:
@@ -16,8 +16,9 @@
  */
 package org.traccar.web;
 
-import java.time.format.DateTimeFormatter;
 import java.util.Collection;
+
+import org.traccar.Context;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
@@ -50,7 +51,7 @@ public GpxBuilder(String name) {
 
     public void addPosition(Position position) {
         builder.append(String.format(POINT, position.getLatitude(), position.getLongitude(),
-                DateTimeFormatter.ISO_DATE_TIME.format(position.getFixTime().toInstant()), position.getAltitude(),
+                Context.DATE_FORMATTER.format(position.getFixTime().toInstant()), position.getAltitude(),
                 position.getCourse(), UnitsConverter.mpsFromKnots(position.getSpeed())));
     }
 

File: src/org/traccar/protocol/OpenGtsProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public class OpenGtsProtocolDecoder extends BaseHttpProtocolDecoder {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd),")             // time (hhmmss)
+            .number("(dd)(dd)(dd)(?:.d+)?,")     // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: test/org/traccar/protocol/OpenGtsProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         OpenGtsProtocolDecoder decoder = new OpenGtsProtocolDecoder(new OpenGtsProtocol());
 
+        verifyPosition(decoder, request(
+                "/?id=gprmc_999000000000003&gprmc=$GPRMC,143013.0,A,5006.728217,N,01416.437869,E,0.0,329.6,281017,1.2,E,A*0E"));
+
         verifyPosition(decoder, request(
                 "/?id=123456789012345&dev=dev_name&acct=account&batt=0&code=0xF020&alt=160.5&gprmc=$GPRMC,191555,A,5025.46624,N,3030.39937,E,0.000000,0.000000,200218,,*2F"));
 

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -158,7 +158,7 @@ public void log(ChannelHandlerContext ctx, boolean downstream, Object o) {
             message.append(" HEX: ");
             message.append(ByteBufUtil.hexDump((ByteBuf) networkMessage.getMessage()));
 
-            LOGGER.debug(message.toString());
+            LOGGER.info(message.toString());
         }
 
     }

File: src/org/traccar/database/DataManager.java
Patch:
@@ -361,7 +361,7 @@ public void clearHistory() throws SQLException {
         long historyDays = config.getInteger("database.historyDays");
         if (historyDays != 0) {
             Date timeLimit = new Date(System.currentTimeMillis() - historyDays * 24 * 3600 * 1000);
-            LOGGER.debug(
+            LOGGER.info(
                     "Clearing history earlier than " + new SimpleDateFormat(Context.DATE_FORMAT).format(timeLimit));
             QueryBuilder.create(dataSource, getQuery("database.deletePositions"))
                     .setDate("serverTime", timeLimit)

File: src/org/traccar/smpp/ClientSmppSessionHandler.java
Patch:
@@ -51,7 +51,7 @@ public PduResponse firePduRequestReceived(PduRequest request) {
                 String sourceAddress = ((DeliverSm) request).getSourceAddress().getAddress();
                 String message = CharsetUtil.decode(((DeliverSm) request).getShortMessage(),
                         smppClient.mapDataCodingToCharset(((DeliverSm) request).getDataCoding()));
-                LOGGER.debug("SMS Message Received: " + message.trim() + ", Source Address: " + sourceAddress);
+                LOGGER.info("SMS Message Received: " + message.trim() + ", Source Address: " + sourceAddress);
 
                 boolean isDeliveryReceipt;
                 if (smppClient.getDetectDlrByOpts()) {

File: src/org/traccar/smpp/SmppClient.java
Patch:
@@ -211,7 +211,7 @@ private void stopEnquireLinkTask() {
 
     private void destroySession() {
         if (smppSession != null) {
-            LOGGER.debug("Cleaning up SMPP session... ");
+            LOGGER.info("Cleaning up SMPP session... ");
             smppSession.destroy();
             smppSession = null;
         }
@@ -242,7 +242,7 @@ public synchronized void sendMessageSync(String destAddress, String message, boo
                 submit.setDestAddress(new Address(destTon, destNpi, destAddress));
                 SubmitSmResp submitResponce = getSession().submit(submit, submitTimeout);
                 if (submitResponce.getCommandStatus() == SmppConstants.STATUS_OK) {
-                    LOGGER.debug("SMS submitted, message id: " + submitResponce.getMessageId());
+                    LOGGER.info("SMS submitted, message id: " + submitResponce.getMessageId());
                 } else {
                     throw new IllegalStateException(submitResponce.getResultMessage());
                 }

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -355,7 +355,7 @@ private void addDynamicHandlers(ChannelPipeline pipeline) {
                 try {
                     pipeline.addLast("extraHandler." + i, (ChannelHandler) Class.forName(handlers[i]).newInstance());
                 } catch (ClassNotFoundException | InstantiationException | IllegalAccessException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Dynamic handler error", error);
                 }
             }
         }

File: src/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -61,7 +61,7 @@ public long addUnknownDevice(String uniqueId) {
 
             return device.getId();
         } catch (SQLException e) {
-            LOGGER.warn(null, e);
+            LOGGER.warn("Automatic device registration error", e);
             return 0;
         }
     }
@@ -134,7 +134,7 @@ private long findDeviceId(SocketAddress remoteAddress, String... uniqueIds) {
                     }
                 }
             } catch (Exception e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Find device error", e);
             }
             if (deviceId == 0 && Context.getConfig().getBoolean("database.registerUnknown")) {
                 return addUnknownDevice(uniqueIds[0]);

File: src/org/traccar/DefaultDataHandler.java
Patch:
@@ -29,7 +29,7 @@ protected Position handlePosition(Position position) {
         try {
             Context.getDataManager().addObject(position);
         } catch (Exception error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Failed to store position", error);
         }
 
         return position;

File: src/org/traccar/GeolocationHandler.java
Patch:
@@ -63,7 +63,7 @@ public void onSuccess(double latitude, double longitude, double accuracy) {
 
                     @Override
                     public void onFailure(Throwable e) {
-                        LOGGER.warn(null, e);
+                        LOGGER.warn("Geolocation network error", e);
                         ctx.fireChannelRead(position);
                     }
                 });

File: src/org/traccar/Main.java
Patch:
@@ -115,7 +115,7 @@ public void run() {
                     try {
                         Context.getDataManager().clearHistory();
                     } catch (SQLException error) {
-                        LOGGER.warn(null, error);
+                        LOGGER.warn("Clear history error", error);
                     }
                 }
             }, 0, CLEAN_PERIOD);
@@ -132,7 +132,7 @@ public void run() {
                 }
             });
         } catch (Exception e) {
-            LOGGER.error(null, e);
+            LOGGER.error("Main method error", e);
             throw new RuntimeException(e);
         }
     }

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -51,7 +51,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception
             try {
                 Context.getDeviceManager().updateLatestPosition(position);
             } catch (SQLException error) {
-                LOGGER.warn(null, error);
+                LOGGER.warn("Failed to update device", error);
             }
 
             String uniqueId = Context.getIdentityManager().getById(position.getDeviceId()).getUniqueId();

File: src/org/traccar/WebDataHandler.java
Patch:
@@ -130,7 +130,7 @@ protected Position handlePosition(Position position) {
             try {
                 Context.getClient().target(formatRequest(position)).request().async().get();
             } catch (UnsupportedEncodingException | JsonProcessingException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Forwarding formatting error", e);
             }
         }
         return position;

File: src/org/traccar/api/AsyncSocket.java
Patch:
@@ -89,7 +89,7 @@ private void sendData(Map<String, Collection<?>> data) {
             try {
                 getRemote().sendString(Context.getObjectMapper().writeValueAsString(data), null);
             } catch (JsonProcessingException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Socket JSON formatting error", e);
             }
         }
     }

File: src/org/traccar/api/SecurityRequestFilter.java
Patch:
@@ -96,7 +96,7 @@ public void filter(ContainerRequestContext requestContext) {
             }
 
         } catch (SecurityException e) {
-            LOGGER.warn(null, e);
+            LOGGER.warn("Authentication error", e);
         }
 
         if (securityContext != null) {

File: src/org/traccar/database/BaseObjectManager.java
Patch:
@@ -77,7 +77,7 @@ public void refreshItems() {
                     }
                 }
             } catch (SQLException error) {
-                LOGGER.warn(null, error);
+                LOGGER.warn("Error refreshing items", error);
             }
         }
     }

File: src/org/traccar/database/CommandsManager.java
Patch:
@@ -129,7 +129,7 @@ public Collection<Typed> getAllCommandTypes() {
                 try {
                     result.add(new Typed(field.get(null).toString()));
                 } catch (IllegalArgumentException | IllegalAccessException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Get command types error", error);
                 }
             }
         }

File: src/org/traccar/database/ConnectionManager.java
Patch:
@@ -133,7 +133,7 @@ public void run(Timeout timeout) {
         try {
             Context.getDeviceManager().updateDeviceStatus(device);
         } catch (SQLException error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Update device status error", error);
         }
 
         updateDevice(device);

File: src/org/traccar/database/DeviceManager.java
Patch:
@@ -96,7 +96,7 @@ public Set<Long> getAllItems() {
             try {
                 updateDeviceCache(true);
             } catch (SQLException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Update device cache error", e);
             }
             result = super.getAllItems();
         }
@@ -231,7 +231,7 @@ private void refreshLastPositions() {
                     positions.put(position.getDeviceId(), position);
                 }
             } catch (SQLException error) {
-                LOGGER.warn(null, error);
+                LOGGER.warn("Load latest positions error", error);
             }
         }
     }

File: src/org/traccar/database/ExtendedObjectManager.java
Patch:
@@ -108,7 +108,7 @@ public void refreshExtendedPermissions() {
                 }
 
             } catch (SQLException | ClassNotFoundException error) {
-                LOGGER.warn(null, error);
+                LOGGER.warn("Refresh permissions error", error);
             }
         }
     }

File: src/org/traccar/database/GroupsManager.java
Patch:
@@ -65,7 +65,7 @@ public Set<Long> getAllItems() {
             try {
                 updateGroupCache(true);
             } catch (SQLException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Update group cache error", e);
             }
             result = super.getAllItems();
         }

File: src/org/traccar/database/LdapProvider.java
Patch:
@@ -158,7 +158,7 @@ public User getUser(String accountName) {
             user.setLogin(accountName);
             user.setName(accountName);
             user.setEmail(accountName);
-            LOGGER.warn(null, e);
+            LOGGER.warn("User lookup error", e);
         }
         return user;
     }

File: src/org/traccar/database/MediaManager.java
Patch:
@@ -63,7 +63,7 @@ public String writeFile(String uniqueId, ByteBuf buf, String extension) {
                 fileChannel.force(false);
                 return name;
             } catch (IOException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Save media file error", e);
             }
         }
         return null;

File: src/org/traccar/database/NotificationManager.java
Patch:
@@ -64,7 +64,7 @@ public void updateEvent(Event event, Position position) {
         try {
             getDataManager().addObject(event);
         } catch (SQLException error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Event save error", error);
         }
 
         if (position != null && geocodeOnRequest && Context.getGeocoder() != null && position.getAddress() == null) {
@@ -117,7 +117,7 @@ public Set<Typed> getAllNotificationTypes() {
                 try {
                     types.add(new Typed(field.get(null).toString()));
                 } catch (IllegalArgumentException | IllegalAccessException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Get event types error", error);
                 }
             }
         }

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -111,7 +111,7 @@ public void refreshServer() {
         try {
             server = dataManager.getServer();
         } catch (SQLException error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Refresh server config error", error);
         }
     }
 
@@ -146,7 +146,7 @@ public final void refreshDeviceAndGroupPermissions() {
             }
 
         } catch (SQLException | ClassNotFoundException error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Refresh device permissions error", error);
         }
 
         deviceUsers.clear();

File: src/org/traccar/database/SimpleObjectManager.java
Patch:
@@ -80,7 +80,7 @@ public final void refreshUserItems() {
                     getUserItems(permission.getOwnerId()).add(permission.getPropertyId());
                 }
             } catch (SQLException | ClassNotFoundException error) {
-                LOGGER.warn(null, error);
+                LOGGER.warn("Error getting permissions", error);
             }
         }
     }

File: src/org/traccar/database/StatisticsManager.java
Patch:
@@ -67,7 +67,7 @@ private void checkSplit() {
             try {
                 Context.getDataManager().addObject(statistics);
             } catch (SQLException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Error saving statistics", e);
             }
 
             String url = Context.getConfig().getString("server.statistics");

File: src/org/traccar/geocoder/JsonGeocoder.java
Patch:
@@ -105,7 +105,7 @@ public void failed(Throwable throwable) {
             try {
                 return handleResponse(latitude, longitude, request.get(JsonObject.class), null);
             } catch (ClientErrorException e) {
-                LOGGER.warn(null, e);
+                LOGGER.warn("Geocoder network error", e);
             }
         }
         return null;

File: src/org/traccar/helper/PatternUtil.java
Patch:
@@ -71,7 +71,7 @@ public static MatchResult checkPattern(String pattern, String input) {
                     result.stringTail = input.substring(matcher.group(1).length());
                 }
             } catch (PatternSyntaxException error) {
-                LOGGER.warn(null, error);
+                LOGGER.warn("Pattern matching error", error);
             }
         }
 

File: src/org/traccar/notification/NotificationFormatter.java
Patch:
@@ -84,7 +84,7 @@ public static Template getTemplate(Event event, String path) {
             templateFilePath = Paths.get(path, event.getType() + ".vm").toString();
             template = Context.getVelocityEngine().getTemplate(templateFilePath, StandardCharsets.UTF_8.name());
         } catch (ResourceNotFoundException error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Notification template error", error);
             templateFilePath = Paths.get(path, "unknown.vm").toString();
             template = Context.getVelocityEngine().getTemplate(templateFilePath, StandardCharsets.UTF_8.name());
         }

File: src/org/traccar/notificators/Notificator.java
Patch:
@@ -32,7 +32,7 @@ public void run() {
                 try {
                     sendSync(userId, event, position);
                 } catch (MessageException | InterruptedException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Event send error", error);
                 }
             }
         }).start();

File: src/org/traccar/processing/ComputedAttributesHandler.java
Patch:
@@ -80,7 +80,7 @@ private MapContext prepareContext(Position position) {
                         }
                     }
                 } catch (IllegalAccessException | InvocationTargetException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Attribute reflection error", error);
                 }
             }
         }
@@ -101,7 +101,7 @@ protected Position handlePosition(Position position) {
                 try {
                     result = computeAttribute(attribute, position);
                 } catch (JexlException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Attribute computation error", error);
                 }
                 if (result != null) {
                     try {
@@ -118,7 +118,7 @@ protected Position handlePosition(Position position) {
                                 position.getAttributes().put(attribute.getAttribute(), result.toString());
                         }
                     } catch (ClassCastException error) {
-                        LOGGER.warn(null, error);
+                        LOGGER.warn("Attribute cast error", error);
                     }
                 }
             }

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -198,7 +198,7 @@ private void decodeCanData(ByteBuf buf, Position position) {
                     }
                     break;
                 default:
-                    LOGGER.warn(null, new UnsupportedOperationException());
+                    LOGGER.warn("Aplicom CAN decoding error", new UnsupportedOperationException());
                     break;
             }
         }

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ public float readFloat(ByteBuf buf) {
                     previousFloat = (previousFloat & 0xff000000) + ((buf.readUnsignedMedium() & 0x3fffff) << 2);
                     break;
                 default:
-                    LOGGER.warn(null, new IllegalArgumentException());
+                    LOGGER.warn("MTA6 float decoding error", new IllegalArgumentException());
                     break;
             }
             return Float.intBitsToFloat(previousFloat);
@@ -195,7 +195,7 @@ private List<Position> parseFormatA(DeviceSession deviceSession, ByteBuf buf) {
                 positions.add(position);
             }
         } catch (IndexOutOfBoundsException error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("MTA6 parsing error", error);
         }
 
         return positions;

File: src/org/traccar/smpp/SmppClient.java
Patch:
@@ -263,7 +263,7 @@ public void run() {
                 try {
                     sendMessageSync(destAddress, message, command);
                 } catch (MessageException | InterruptedException | IllegalStateException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("SMS sending error", error);
                 }
             }
         });

File: src/org/traccar/web/ConsoleServlet.java
Patch:
@@ -54,7 +54,7 @@ public void init() {
             method.invoke(server, true);
 
         } catch (NoSuchFieldException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {
-            LOGGER.warn(null, e);
+            LOGGER.warn("Console reflection error", e);
         }
     }
 

File: src/org/traccar/web/CsvBuilder.java
Patch:
@@ -106,12 +106,12 @@ public void addLine(Object object) {
                                 builder.append(map);
                                 addSeparator();
                             } catch (JsonProcessingException e) {
-                                LOGGER.warn(null, e);
+                                LOGGER.warn("Map JSON formatting error", e);
                             }
                         }
                     }
                 } catch (IllegalAccessException | InvocationTargetException error) {
-                    LOGGER.warn(null, error);
+                    LOGGER.warn("Reflection invocation error", error);
                 }
             }
         }

File: src/org/traccar/web/WebServer.java
Patch:
@@ -153,7 +153,7 @@ private void initOldWebApp() {
             javax.naming.Context context = new InitialContext();
             context.bind("java:/DefaultDS", dataSource);
         } catch (Exception error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("JNDI context error", error);
         }
 
         WebAppContext app = new WebAppContext();
@@ -199,15 +199,15 @@ public void start() {
         try {
             server.start();
         } catch (Exception error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Web server start failed", error);
         }
     }
 
     public void stop() {
         try {
             server.stop();
         } catch (Exception error) {
-            LOGGER.warn(null, error);
+            LOGGER.warn("Web server stop failed", error);
         }
     }
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -85,7 +85,7 @@ public Gps103ProtocolDecoder(Gps103Protocol protocol) {
             .expression("OBD,")                  // type
             .number("(dd)(dd)(dd)")              // date (yymmdd)
             .number("(dd)(dd)(dd),")             // time (hhmmss)
-            .number("(d+),")                     // odometer
+            .number("(d+)?,")                    // odometer
             .number("(d+.d+)?,")                 // fuel instant
             .number("(d+.d+)?,")                 // fuel average
             .number("(d+)?,")                    // hours

File: src/org/traccar/protocol/FreematicsProtocol.java
Patch:
@@ -16,6 +16,7 @@
 package org.traccar.protocol;
 
 import io.netty.handler.codec.string.StringDecoder;
+import io.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.PipelineBuilder;
 import org.traccar.TrackerServer;
@@ -33,6 +34,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(true, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
+                pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("stringDecoder", new StringDecoder());
                 pipeline.addLast("objectDecoder", new FreematicsProtocolDecoder(FreematicsProtocol.this));
             }

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -283,7 +283,7 @@ private void readBinaryCustomData(Position position, ByteBuf buf, String form) {
                     buf.skipBytes(6); // maximum g force
                     break;
                 case "ME":
-                    readString(buf); // imei
+                    buf.readLong(); // imei
                     break;
                 case "IA":
                     buf.readUnsignedByte(); // intake air temperature

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -34,6 +34,9 @@ public void testDecode() throws Exception {
 
         decoder.setCustom(true);
 
+        verifyPositions(decoder, binary(
+                "4050b63b02c401af000144a77a21281d5b79d8ef5b79d8ef5b79d8f0fab84831029f35580056020003144d00080100130000000007d007d00025434925434525434e25475125475325464c254d4c25564e25504425464325454c254554254344254154254d46254d5625425625434d25445425474c25474e254756254c43254d4525524c25525025534125534d255452254941254d5000000000000004bbf41f0900003254314b5233324532384337303631383500000000000053005f3839303132363038383132313532343737353900000000fd078e0085002900011a2e3da1882700687474703a2f2f6d6170732e676f6f676c652e636f6d2f6d6170733f713d34332e3938383331322c2d38382e35383631383920000013ff4e04190023ff13041100a3ffdc0402009affde03fc00a4ffe3040c0093ffab03ee004dffbb04130012ff7a04180010ff6e04100037ff4d0402ffd8000c04140000000144a77a21281d0009470c00131b2b005b79d8f05b79d8f05b79d8f0fab8488e029f356f0043020003144d00080100170000000007d007d00025434925434525434e25475125475325464c254d4c25564e25504425464325454c254554254344254154254d46254d5625425625434d25445425474c25474e254756254c43254d4525524c25525025534125534d255452254941254d5000000000000004bbf41f0900003254314b5233324532384337303631383500000000000052005f3839303132363038383132313532343737353900000000fd09190085002900011a2e3da1882700687474703a2f2f6d6170732e676f6f676c652e636f6d2f6d6170733f713d34332e3938383333352c2d38382e35383630393820000013ff4e04190023ff1304110017ff0c0424000cff30041a00a4ffe3040c0093ffab03ee004dffbb04130012ff7a04180010ff6e04100037ff4d0402ffd8000c04140000000144a77a21281d0009470c00171c2b00"));
+
         verifyPositions(decoder, binary(
                 "405ad77c01670410000144a77a21281d5b74d2335b74d2335b74d233fabaf3bc02a38d3d010c0200030f8e000701001a0000000007d007d00025434925434525434e25475125475325464c254d4c25564e25504425464325454c254554254344254154254d46254d5625425625434d25445425474c25474e254756254c43254d4525524c25525025534125534d255452254941254d5000000000000004bbf41c0900003254314b523332453238433730363138350000000000004800543839303132363038383132313532343737353900000000ec06a50089002900011a2e3da1882700687474703a2f2f6d6170732e676f6f676c652e636f6d2f6d6170733f713d34342e3237323935372c2d38382e34313132303120000075ff4903fb006fff63040a004dff5d04080030ffa10407003b001304060026000503f9001e002504020078ff6204000073ff7d03f9007aff6903f3ffc0001804040000000144a77a21281d00073f0c001a182400"));
 

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -34,6 +34,9 @@ public void testDecode() throws Exception {
 
         decoder.setCustom(true);
 
+        verifyPositions(decoder, binary(
+                "405ad77c01670410000144a77a21281d5b74d2335b74d2335b74d233fabaf3bc02a38d3d010c0200030f8e000701001a0000000007d007d00025434925434525434e25475125475325464c254d4c25564e25504425464325454c254554254344254154254d46254d5625425625434d25445425474c25474e254756254c43254d4525524c25525025534125534d255452254941254d5000000000000004bbf41c0900003254314b523332453238433730363138350000000000004800543839303132363038383132313532343737353900000000ec06a50089002900011a2e3da1882700687474703a2f2f6d6170732e676f6f676c652e636f6d2f6d6170733f713d34342e3237323935372c2d38382e34313132303120000075ff4903fb006fff63040a004dff5d04080030ffa10407003b001304060026000503f9001e002504020078ff6204000073ff7d03f9007aff6903f3ffc0001804040000000144a77a21281d00073f0c001a182400"));
+
         verifyPositions(decoder, buffer(
                 "@P,6254,235,989,356961075931165,1534381563,1534381564,1534381564,-88429188,44271225,70,2,200563,8,1,0,0,0,,2000,2000,,%CI%CE%CN%GQ%GS%FL%ML%VN%PD%FC%EL%ET%CD%AT%MF%MV,0,310260,18,9,0,0,2T1KR32E28C706185,0,0,0,54,8901260881215247759,252,489,123"));
 

File: src/org/traccar/protocol/SanavProtocolDecoder.java
Patch:
@@ -87,7 +87,7 @@ protected Object decode(
         position.setTime(dateBuilder.getDate());
 
         if (parser.hasNext()) {
-            int io = parser.nextInt();
+            int io = parser.nextHexInt();
             for (int i = 0; i < 5; i++) {
                 position.set(Position.PREFIX_IN + (i + 1), BitUtil.check(io, i));
             }

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -105,7 +105,7 @@ private static String readString(ByteBuf buf) {
 
     private void readTextCustomData(Position position, String data, String form) {
         String[] keys = form.substring(1).split("%");
-        String[] values = data.split(",");
+        String[] values = data.split(",|\r\n");
         for (int i = 0; i < Math.min(keys.length, values.length); i++) {
             switch (keys[i]) {
                 case "MV":

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -350,7 +350,7 @@ private Position decodeFuelData(Position position, String sentence) {
             .text("Course:").number("(d+.d+),")  // course
             .text("Speed:").number("(d+.d+),")   // speed
             .text("DateTime:")
-            .number("(dddd)-(dd)-(dd)  ")        // date
+            .number("(dddd)-(dd)-(dd) +")        // date
             .number("(dd):(dd):(dd)")            // time
             .compile();
 

File: src/org/traccar/database/MediaManager.java
Patch:
@@ -49,7 +49,7 @@ private File createFile(String uniqueId, String name) throws IOException {
     public String writeFile(String uniqueId, ByteBuf buf, String extension) {
         if (path != null) {
             int size = buf.readableBytes();
-            String name = new SimpleDateFormat("yyyyMMddhhmmss").format(new Date()) + "." + extension;
+            String name = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date()) + "." + extension;
             try (FileOutputStream output = new FileOutputStream(createFile(uniqueId, name));
                     FileChannel fileChannel = output.getChannel()) {
                     ByteBuffer byteBuffer = buf.nioBuffer();

File: src/org/traccar/protocol/TelemaxProtocolDecoder.java
Patch:
@@ -93,7 +93,7 @@ protected Object decode(
             position.setLatitude((Integer.parseInt(readValue(sentence, index, 6), 16) - 5400000) / 30000.0);
 
             if (i == 0 | i == count - 1) {
-                time = new SimpleDateFormat("yyMMddhhmmss").parse(readValue(sentence, index, 12));
+                time = new SimpleDateFormat("yyMMddHHmmss").parse(readValue(sentence, index, 12));
                 position.set(Position.KEY_STATUS, readValue(sentence, index, 8));
             } else {
                 time = new Date(time.getTime() + interval * 1000);

File: test/org/traccar/calendar/CalendarTest.java
Patch:
@@ -44,7 +44,7 @@ public void testCalendar() throws IOException, ParserException, ParseException,
                 "END:VCALENDAR";
         Calendar calendar = new Calendar();
         calendar.setData(calendarString.getBytes());
-        DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ssX");
+        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssX");
 
         Date date = format.parse("2016-12-13 22:59:59+05");
         assertTrue(!calendar.checkMoment(date));

File: src/org/traccar/Context.java
Patch:
@@ -87,9 +87,6 @@
 
 public final class Context {
 
-    private static final String USER_AGENT =
-            "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0";
-
     private Context() {
     }
 

File: src/org/traccar/protocol/RoboTrackFrameDecoder.java
Patch:
@@ -23,7 +23,7 @@
 public class RoboTrackFrameDecoder extends BaseFrameDecoder {
 
     private int messageLength(ByteBuf buf) {
-        switch ((int) buf.getByte(buf.readerIndex())) {
+        switch (buf.getUnsignedByte(buf.readerIndex())) {
             case RoboTrackProtocolDecoder.MSG_ID:
                 return 69;
             case RoboTrackProtocolDecoder.MSG_ACK:

File: src/org/traccar/protocol/SabertekFrameDecoder.java
Patch:
@@ -29,7 +29,7 @@ protected Object decode(
         int beginIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) 0x02);
         if (beginIndex >= 0) {
             int endIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) 0x03);
-            if (beginIndex >= 0) {
+            if (endIndex >= 0) {
                 buf.readerIndex(beginIndex + 1);
                 ByteBuf frame = buf.readRetainedSlice(endIndex - beginIndex - 1);
                 buf.readerIndex(endIndex + 1);

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -54,7 +54,7 @@ public Tk103ProtocolDecoder(Tk103Protocol protocol) {
             .expression("([EW]),?")
             .number("(d+.d)(?:d*,)?")            // speed
             .number("(dd)(dd)(dd),?")            // time (hhmmss)
-            .number("(d+.?d{1,2}),?")            // course
+            .number("(d+.?d{1,4}),?")            // course
             .groupBegin()
             .number("([01])")                    // charge
             .number("([01])")                    // ignition

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
+        verifyPosition(decoder, text(
+                "(019358704260BR00180725A2300.0957N07235.2748E032.412092187.58001100166L000D9779)"));
+
         verifyPosition(decoder, text(
                 "(358511020000026,DW5B,310,6,29876,30393,0,041217,102211)"));
 

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -419,7 +419,7 @@ protected Object decode(
 
         if (buf.getUnsignedShort(buf.readerIndex()) == 0xfe02) {
             if (channel != null) {
-                channel.writeAndFlush(new NetworkMessage(buf, remoteAddress)); // keep-alive message
+                channel.writeAndFlush(new NetworkMessage(buf.retain(), remoteAddress)); // keep-alive message
             }
             return null;
         } else if (buf.getByte(buf.readerIndex()) == '$') {

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -125,6 +125,9 @@ private void decodeOtherParameter(Position position, int id, ByteBuf buf, int le
             case 67:
                 position.set(Position.KEY_BATTERY, readValue(buf, length, false) * 0.001);
                 break;
+            case 69:
+                position.set("gpsStatus", readValue(buf, length, false));
+                break;
             case 72:
                 position.set(Position.PREFIX_TEMP + 1, readValue(buf, length, true) * 0.1);
                 break;

File: src/org/traccar/protocol/TlvProtocol.java
Patch:
@@ -33,7 +33,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder('\0'));
+                pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\0'));
                 pipeline.addLast("objectDecoder", new TlvProtocolDecoder(TlvProtocol.this));
             }
         });

File: src/org/traccar/api/resource/NotificationResource.java
Patch:
@@ -31,7 +31,7 @@
 import org.traccar.model.Event;
 import org.traccar.model.Notification;
 import org.traccar.model.Typed;
-import org.traccar.notification.NotificationException;
+import org.traccar.notification.MessageException;
 
 
 @Path("notifications")
@@ -57,7 +57,7 @@ public Collection<Typed> getNotificators() {
 
     @POST
     @Path("test")
-    public Response testMessage() throws NotificationException, InterruptedException {
+    public Response testMessage() throws MessageException, InterruptedException {
         for (Typed method : Context.getNotificatorManager().getAllNotificatorTypes()) {
             Context.getNotificatorManager()
                     .getNotificator(method.getType()).sendSync(getUserId(), new Event("test", 0), null);
@@ -68,7 +68,7 @@ public Response testMessage() throws NotificationException, InterruptedException
     @POST
     @Path("test/{notificator}")
     public Response testMessage(@PathParam("notificator") String notificator)
-            throws NotificationException, InterruptedException {
+            throws MessageException, InterruptedException {
         Context.getNotificatorManager().getNotificator(notificator).sendSync(getUserId(), new Event("test", 0), null);
         return Response.noContent().build();
     }

File: src/org/traccar/notification/MessageException.java
Patch:
@@ -16,9 +16,9 @@
  */
 package org.traccar.notification;
 
-public class NotificationException extends Exception {
+public class MessageException extends Exception {
 
-    public NotificationException(Throwable cause) {
+    public MessageException(Throwable cause) {
         super(cause);
     }
 

File: src/org/traccar/notification/NotificationMail.java
Patch:
@@ -82,7 +82,7 @@ private static Properties getProperties(PropertiesProvider provider) {
     }
 
     @Override
-    public void sendSync(long userId, Event event, Position position) throws NotificationException {
+    public void sendSync(long userId, Event event, Position position) throws MessageException {
         User user = Context.getPermissionsManager().getUser(userId);
 
         Properties properties = null;
@@ -125,7 +125,7 @@ public void sendSync(long userId, Event event, Position position) throws Notific
                 transport.close();
             }
         } catch (MessagingException e) {
-            throw new NotificationException(e);
+            throw new MessageException(e);
         }
     }
 

File: src/org/traccar/notification/NotificationWeb.java
Patch:
@@ -23,8 +23,7 @@
 public final class NotificationWeb extends Notificator {
 
     @Override
-    public void sendSync(long userId, Event event, Position position) throws NotificationException,
-            InterruptedException {
+    public void sendSync(long userId, Event event, Position position) {
         Context.getConnectionManager().updateEvent(userId, event);
     }
 

File: src/org/traccar/notification/Notificator.java
Patch:
@@ -27,14 +27,14 @@ public void sendAsync(final long userId, final Event event, final Position posit
             public void run() {
                 try {
                     sendSync(userId, event, position);
-                } catch (NotificationException | InterruptedException error) {
+                } catch (MessageException | InterruptedException error) {
                     Log.warning(error);
                 }
             }
         }).start();
     }
 
-
     public abstract void sendSync(long userId, Event event, Position position)
-        throws NotificationException, InterruptedException;
+        throws MessageException, InterruptedException;
+
 }

File: src/org/traccar/database/ConnectionManager.java
Patch:
@@ -121,10 +121,9 @@ public void updateDevice(final long deviceId, String status, Date time) {
         if (status.equals(Device.STATUS_ONLINE)) {
             timeouts.put(deviceId, GlobalTimer.getTimer().newTimeout(new TimerTask() {
                 @Override
-                public void run(Timeout timeout) throws Exception {
+                public void run(Timeout timeout) {
                     if (!timeout.isCancelled()) {
                         updateDevice(deviceId, Device.STATUS_UNKNOWN, null);
-                        activeDevices.remove(deviceId);
                     }
                 }
             }, deviceTimeout, TimeUnit.MILLISECONDS));

File: src/org/traccar/events/OverspeedEventHandler.java
Patch:
@@ -117,7 +117,7 @@ protected Map<Event, Position> analyzePosition(Position position) {
         double geofenceSpeedLimit = 0;
         long overspeedGeofenceId = 0;
 
-        if (Context.getGeofenceManager() != null) {
+        if (Context.getGeofenceManager() != null && device.getGeofenceIds() != null) {
             for (long geofenceId : device.getGeofenceIds()) {
                 Geofence geofence = Context.getGeofenceManager().getById(geofenceId);
                 if (geofence != null) {

File: src/org/traccar/events/OverspeedEventHandler.java
Patch:
@@ -117,7 +117,7 @@ protected Map<Event, Position> analyzePosition(Position position) {
         double geofenceSpeedLimit = 0;
         long overspeedGeofenceId = 0;
 
-        if (Context.getGeofenceManager() != null) {
+        if (Context.getGeofenceManager() != null && device.getGeofenceIds() != null) {
             for (long geofenceId : device.getGeofenceIds()) {
                 Geofence geofence = Context.getGeofenceManager().getById(geofenceId);
                 if (geofence != null) {

File: src/org/traccar/protocol/WondexFrameDecoder.java
Patch:
@@ -40,6 +40,7 @@ protected Object decode(
             // Send response
             ByteBuf frame = buf.readRetainedSlice(KEEP_ALIVE_LENGTH);
             if (channel != null) {
+                frame.retain();
                 channel.writeAndFlush(new NetworkMessage(frame, channel.remoteAddress()));
             }
             return frame;

File: src/org/traccar/TrackerServer.java
Patch:
@@ -25,7 +25,6 @@
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.util.concurrent.GlobalEventExecutor;
 
-import java.io.IOException;
 import java.net.InetSocketAddress;
 
 public abstract class TrackerServer {

File: src/org/traccar/protocol/BlackKiteProtocolDecoder.java
Patch:
@@ -56,10 +56,10 @@ public BlackKiteProtocolDecoder(BlackKiteProtocol protocol) {
     private static final int TAG_XT3 = 0x62;
 
     private void sendReply(Channel channel, int checksum) {
-        ByteBuf reply = Unpooled.buffer(3);
-        reply.writeByte(0x02);
-        reply.writeShortLE((short) checksum);
         if (channel != null) {
+            ByteBuf reply = Unpooled.buffer(3);
+            reply.writeByte(0x02);
+            reply.writeShortLE((short) checksum);
             channel.writeAndFlush(new NetworkMessage(reply, channel.remoteAddress()));
         }
     }

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -296,7 +296,7 @@ private Object decodeSc(
                 || type == MSG_SC_ALARM || type == MSG_SC_CURRENT_LOCATION || type == MSG_SC_FUEL) {
 
             if (type == MSG_SC_LOGIN) {
-                ByteBuf response = Unpooled.buffer(10);
+                ByteBuf response = Unpooled.buffer(10); // TODO ref count
                 response.writeIntLE(0xFFFFFFFF);
                 response.writeShortLE(0);
                 response.writeIntLE((int) (System.currentTimeMillis() / 1000));

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -93,10 +93,10 @@ private static int getTagLength(int tag) {
     }
 
     private void sendReply(Channel channel, int checksum) {
-        ByteBuf reply = Unpooled.buffer(3);
-        reply.writeByte(0x02);
-        reply.writeShortLE((short) checksum);
         if (channel != null) {
+            ByteBuf reply = Unpooled.buffer(3);
+            reply.writeByte(0x02);
+            reply.writeShortLE((short) checksum);
             channel.writeAndFlush(new NetworkMessage(reply, channel.remoteAddress()));
         }
     }

File: src/org/traccar/protocol/GranitProtocolDecoder.java
Patch:
@@ -58,7 +58,7 @@ public static void appendChecksum(ByteBuf buffer, int length) {
     }
 
     private static void sendResponseCurrent(Channel channel, int deviceId, long time) {
-        ByteBuf response = Unpooled.buffer(0);
+        ByteBuf response = Unpooled.buffer();
         response.writeBytes("BB+UGRC~".getBytes(StandardCharsets.US_ASCII));
         response.writeShortLE(6); // length
         response.writeInt((int) time);
@@ -68,7 +68,7 @@ private static void sendResponseCurrent(Channel channel, int deviceId, long time
     }
 
     private static void sendResponseArchive(Channel channel, int deviceId, int packNum) {
-        ByteBuf response = Unpooled.buffer(0);
+        ByteBuf response = Unpooled.buffer();
         response.writeBytes("BB+ARCF~".getBytes(StandardCharsets.US_ASCII));
         response.writeShortLE(4); // length
         response.writeShortLE(packNum);

File: src/org/traccar/protocol/HuaShengFrameDecoder.java
Patch:
@@ -33,7 +33,7 @@ protected Object decode(
 
         int index = buf.indexOf(buf.readerIndex() + 1, buf.writerIndex(), (byte) 0xC0);
         if (index != -1) {
-            ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex());
+            ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex()); // TODO ref count
 
             while (buf.readerIndex() <= index) {
                 int b = buf.readUnsignedByte();

File: src/org/traccar/protocol/HuaShengProtocolDecoder.java
Patch:
@@ -84,7 +84,7 @@ protected Object decode(
                     String imei = buf.readSlice(length).toString(StandardCharsets.US_ASCII);
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, imei);
                     if (deviceSession != null && channel != null) {
-                        ByteBuf content = Unpooled.buffer();
+                        ByteBuf content = Unpooled.buffer(); // TODO ref count
                         content.writeByte(0); // success
                         sendResponse(channel, MSG_LOGIN_RSP, index, content);
                     }

File: src/org/traccar/protocol/HuabaoFrameDecoder.java
Patch:
@@ -33,7 +33,7 @@ protected Object decode(
 
         int index = buf.indexOf(buf.readerIndex() + 1, buf.writerIndex(), (byte) 0x7e);
         if (index != -1) {
-            ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex());
+            ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex()); // TODO ref count
 
             while (buf.readerIndex() <= index) {
                 int b = buf.readUnsignedByte();

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -415,7 +415,7 @@ protected Object decode(
             return null;
         } else if (command == MSG_UPLOAD_PHOTO) {
             byte imageIndex = buf.readByte();
-            photos.put(imageIndex, Unpooled.buffer());
+            photos.put(imageIndex, Unpooled.buffer()); // TODO release photos
             ByteBuf response = Unpooled.copiedBuffer(new byte[]{imageIndex});
             sendResponse(channel, remoteAddress, id, MSG_UPLOAD_PHOTO_RESPONSE, response);
             return null;

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -471,7 +471,7 @@ protected Object decode(
         switch (type) {
             case "D00":
                 if (photo == null) {
-                    photo = Unpooled.buffer();
+                    photo = Unpooled.buffer(); // TODO ref count
                 }
 
                 index = index + 1 + type.length() + 1;
@@ -504,7 +504,7 @@ protected Object decode(
                     return null;
                 }
             case "D03":
-                photo = Unpooled.buffer();
+                photo = Unpooled.buffer(); // TODO ref count
                 requestPhotoPacket(channel, remoteAddress, imei, "camera_picture.jpg", 0);
                 return null;
             case "CCC":

File: src/org/traccar/protocol/MxtFrameDecoder.java
Patch:
@@ -33,7 +33,7 @@ protected Object decode(
 
         int index = buf.indexOf(buf.readerIndex() + 1, buf.writerIndex(), (byte) 0x04);
         if (index != -1) {
-            ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex());
+            ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex()); // TODO ref count
 
             while (buf.readerIndex() <= index) {
                 int b = buf.readUnsignedByte();

File: src/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -41,15 +41,15 @@ public MxtProtocolDecoder(MxtProtocol protocol) {
 
     private static void sendResponse(Channel channel, int device, long id, int crc) {
         if (channel != null) {
-            ByteBuf response = Unpooled.buffer();
+            ByteBuf response = Unpooled.buffer(); // TODO ref count
             response.writeByte(device);
             response.writeByte(MSG_ACK);
             response.writeIntLE((int) id);
             response.writeShortLE(crc);
             response.writeShortLE(Checksum.crc16(
                     Checksum.CRC16_XMODEM, response.nioBuffer()));
 
-            ByteBuf encoded = Unpooled.buffer(0);
+            ByteBuf encoded = Unpooled.buffer();
             encoded.writeByte(0x01); // header
             while (response.isReadable()) {
                 int b = response.readByte();

File: src/org/traccar/protocol/NavigilProtocolDecoder.java
Patch:
@@ -75,7 +75,7 @@ private void sendAcknowledgment(Channel channel, int sequenceNumber) {
         header.writeIntLE((int) (System.currentTimeMillis() / 1000) + LEAP_SECONDS_DELTA);
 
         if (channel != null) {
-            channel.writeAndFlush(new NetworkMessage(Unpooled.copiedBuffer(header, data), channel.remoteAddress()));
+            channel.writeAndFlush(new NetworkMessage(Unpooled.wrappedBuffer(header, data), channel.remoteAddress()));
         }
     }
 

File: src/org/traccar/protocol/ObdDongleProtocolDecoder.java
Patch:
@@ -79,7 +79,7 @@ protected Object decode(
 
         if (type == MSG_TYPE_CONNECT) {
 
-            ByteBuf response = Unpooled.buffer();
+            ByteBuf response = Unpooled.buffer(); // TODO ref count
             response.writeByte(1);
             response.writeShort(0);
             response.writeInt(0);
@@ -113,7 +113,7 @@ protected Object decode(
             position.setSpeed(UnitsConverter.knotsFromMph(BitUtil.from(speedCourse, 10) * 0.1));
             position.setCourse(BitUtil.to(speedCourse, 10));
 
-            ByteBuf response = Unpooled.buffer();
+            ByteBuf response = Unpooled.buffer(); // TODO ref count
             response.writeByte(typeMajor);
             response.writeByte(typeMinor);
             sendResponse(channel, MSG_TYPE_PUBACK, index, imei, response);

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -196,7 +196,7 @@ protected Object decode(
             if (type.startsWith("$PHO")) {
                 int size = Integer.parseInt(type.split("-")[0].substring(4));
                 if (size > 0) {
-                    photo = Unpooled.buffer(size);
+                    photo = Unpooled.buffer(size); // TODO ref count
                     requestPhotoFragment(channel);
                 }
             }

File: src/org/traccar/protocol/RoboTrackProtocolDecoder.java
Patch:
@@ -60,7 +60,7 @@ protected Object decode(
             String imei = buf.readSlice(15).toString(StandardCharsets.US_ASCII);
 
             if (getDeviceSession(channel, remoteAddress, imei) != null && channel != null) {
-                ByteBuf response = Unpooled.buffer(0);
+                ByteBuf response = Unpooled.buffer();
                 response.writeByte(MSG_ACK);
                 response.writeByte(0x01); // success
                 response.writeByte(0x66); // checksum

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -96,7 +96,7 @@ protected Object decode(
             }
 
             if (getDeviceSession(channel, remoteAddress, id) != null) {
-                ByteBuf response = Unpooled.buffer();
+                ByteBuf response = Unpooled.buffer(); // TODO ref count
                 response.writeByte(MODE_GPRS);
                 response.writeBytes(data);
                 sendResponse(channel, MSG_LOGIN_RESPONSE, dataSequence, response);

File: src/org/traccar/protocol/UlbotechFrameDecoder.java
Patch:
@@ -36,7 +36,7 @@ protected Object decode(
 
             int index = buf.indexOf(buf.readerIndex() + 1, buf.writerIndex(), (byte) 0xF8);
             if (index != -1) {
-                ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex());
+                ByteBuf result = Unpooled.buffer(index + 1 - buf.readerIndex()); // TODO ref count
 
                 while (buf.readerIndex() <= index) {
                     int b = buf.readUnsignedByte();

File: src/org/traccar/protocol/Vt200FrameDecoder.java
Patch:
@@ -31,7 +31,7 @@ protected Object decode(
         int endIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) ')') + 1;
         if (endIndex > 0) {
 
-            ByteBuf frame = Unpooled.buffer();
+            ByteBuf frame = Unpooled.buffer(); // TODO ref count
 
             while (buf.readerIndex() < endIndex) {
                 int b = buf.readByte();

File: src/org/traccar/protocol/WatchFrameDecoder.java
Patch:
@@ -57,7 +57,7 @@ protected Object decode(
         int length = Integer.parseInt(
                 buf.toString(lengthIndex, payloadIndex - lengthIndex, StandardCharsets.US_ASCII), 16);
         if (buf.readableBytes() >= payloadIndex + 1 + length + 1) {
-            ByteBuf frame = Unpooled.buffer();
+            ByteBuf frame = Unpooled.buffer(); // TODO ref count
             int endIndex = buf.readerIndex() + payloadIndex + 1 + length + 1;
             while (buf.readerIndex() < endIndex) {
                 byte b = buf.readByte();

File: test/org/traccar/protocol/AdmProtocolDecoderTest.java
Patch:
@@ -3,8 +3,6 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-import java.nio.ByteOrder;
-
 public class AdmProtocolDecoderTest extends ProtocolTest {
 
     @Test

File: test/org/traccar/protocol/At2000ProtocolDecoderTest.java
Patch:
@@ -3,8 +3,6 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-import java.nio.ByteOrder;
-
 import static org.junit.Assume.assumeTrue;
 
 public class At2000ProtocolDecoderTest extends ProtocolTest {

File: test/org/traccar/protocol/GalileoFrameDecoderTest.java
Patch:
@@ -3,8 +3,6 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-import java.nio.ByteOrder;
-
 import static org.junit.Assert.assertEquals;
 
 public class GalileoFrameDecoderTest extends ProtocolTest {

File: src/org/traccar/TrackerServer.java
Patch:
@@ -25,6 +25,7 @@
 import io.netty.channel.socket.nio.NioServerSocketChannel;
 import io.netty.util.concurrent.GlobalEventExecutor;
 
+import java.io.IOException;
 import java.net.InetSocketAddress;
 
 public abstract class TrackerServer {
@@ -94,16 +95,15 @@ public ChannelGroup getChannelGroup() {
         return channelGroup;
     }
 
-    public void start() {
+    public void start() throws Exception {
         InetSocketAddress endpoint;
         if (address == null) {
             endpoint = new InetSocketAddress(port);
         } else {
             endpoint = new InetSocketAddress(address, port);
         }
 
-        Channel channel = bootstrap.bind(endpoint).channel();
-
+        Channel channel = bootstrap.bind(endpoint).sync().channel();
         if (channel != null) {
             getChannelGroup().add(channel);
         }

File: src/org/traccar/protocol/BlackKiteProtocol.java
Patch:
@@ -33,7 +33,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(false, getName()) {
             @Override
             protected void addProtocolHandlers(PipelineBuilder pipeline) {
-                // pipeline.addLast("frameDecoder", new GalileoFrameDecoder()); TODO uncomment
+                pipeline.addLast("frameDecoder", new GalileoFrameDecoder());
                 pipeline.addLast("objectDecoder", new BlackKiteProtocolDecoder(BlackKiteProtocol.this));
             }
         });

File: src/org/traccar/protocol/EelinkProtocolEncoder.java
Patch:
@@ -47,7 +47,7 @@ public static ByteBuf encodeContent(
         ByteBuf buf = Unpooled.buffer();
 
         if (connectionless) {
-            buf.writeBytes(Unpooled.wrappedBuffer(DataConverter.parseHex('0' + uniqueId)));
+            buf.writeBytes(DataConverter.parseHex('0' + uniqueId));
         }
 
         buf.writeByte(0x67);

File: src/org/traccar/protocol/GalileoProtocolEncoder.java
Patch:
@@ -31,7 +31,7 @@ private ByteBuf encodeText(String uniqueId, String text) {
         ByteBuf buf = Unpooled.buffer(256);
 
         buf.writeByte(0x01);
-        buf.writeShortLE(uniqueId.length() + text.length() + 11); // TODO
+        buf.writeShortLE(uniqueId.length() + text.length() + 11);
 
         buf.writeByte(0x03); // imei tag
         buf.writeBytes(uniqueId.getBytes(StandardCharsets.US_ASCII));

File: src/org/traccar/protocol/Gps056ProtocolDecoder.java
Patch:
@@ -90,7 +90,7 @@ protected Object decode(
         if (type.startsWith("LOGN")) {
 
             sendResponse(channel, "LGSA" + type.substring(4), imei,
-                    Unpooled.copiedBuffer("1", StandardCharsets.US_ASCII));
+                    Unpooled.copiedBuffer("1", StandardCharsets.US_ASCII)); // TODO ref count
 
         } else if (type.startsWith("GPSL")) {
 

File: src/org/traccar/protocol/HuabaoProtocolEncoder.java
Patch:
@@ -31,7 +31,7 @@ public class HuabaoProtocolEncoder extends BaseProtocolEncoder {
     protected Object encodeCommand(Command command) {
 
         ByteBuf id =  Unpooled.wrappedBuffer(
-                DataConverter.parseHex(getUniqueId(command.getDeviceId())));
+                DataConverter.parseHex(getUniqueId(command.getDeviceId()))); // TODO ref count
 
         ByteBuf data = Unpooled.buffer();
         byte[] time = DataConverter.parseHex(new SimpleDateFormat("yyMMddHHmmss").format(new Date()));

File: src/org/traccar/protocol/NoranProtocolDecoder.java
Patch:
@@ -59,12 +59,12 @@ protected Object decode(
         if (type == MSG_SHAKE_HAND && channel != null) {
 
             ByteBuf response = Unpooled.buffer(13);
-            response.writeBytes(Unpooled.copiedBuffer("\r\n*KW", StandardCharsets.US_ASCII));
+            response.writeCharSequence("\r\n*KW", StandardCharsets.US_ASCII);
             response.writeByte(0);
             response.writeShortLE(response.capacity());
             response.writeShortLE(MSG_SHAKE_HAND_RESPONSE);
             response.writeByte(1); // status
-            response.writeBytes(Unpooled.copiedBuffer("\r\n", StandardCharsets.US_ASCII));
+            response.writeCharSequence("\r\n", StandardCharsets.US_ASCII);
 
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
 

File: src/org/traccar/protocol/NoranProtocolEncoder.java
Patch:
@@ -29,15 +29,15 @@ private ByteBuf encodeContent(String content) {
 
         ByteBuf buf = Unpooled.buffer(12 + 56);
 
-        buf.writeBytes(Unpooled.copiedBuffer("\r\n*KW", StandardCharsets.US_ASCII));
+        buf.writeCharSequence("\r\n*KW", StandardCharsets.US_ASCII);
         buf.writeByte(0);
         buf.writeShortLE(buf.capacity());
         buf.writeShortLE(NoranProtocolDecoder.MSG_CONTROL);
         buf.writeInt(0); // gis ip
         buf.writeShortLE(0); // gis port
         buf.writeBytes(content.getBytes(StandardCharsets.US_ASCII));
         buf.writerIndex(buf.writerIndex() + 50 - content.length());
-        buf.writeBytes(Unpooled.copiedBuffer("\r\n", StandardCharsets.US_ASCII));
+        buf.writeCharSequence("\r\n", StandardCharsets.US_ASCII);
 
         return buf;
     }

File: src/org/traccar/protocol/TlvProtocolDecoder.java
Patch:
@@ -37,10 +37,10 @@ public TlvProtocolDecoder(TlvProtocol protocol) {
     private void sendResponse(Channel channel, SocketAddress remoteAddress, String type, String... arguments) {
         if (channel != null) {
             ByteBuf response = Unpooled.buffer();
-            response.writeBytes(Unpooled.copiedBuffer(type, StandardCharsets.US_ASCII));
+            response.writeCharSequence(type, StandardCharsets.US_ASCII);
             for (String argument : arguments) {
                 response.writeByte(argument.length());
-                response.writeBytes(Unpooled.copiedBuffer(argument, StandardCharsets.US_ASCII));
+                response.writeCharSequence(argument, StandardCharsets.US_ASCII);
             }
             response.writeByte(0);
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -133,8 +133,7 @@ protected Object decode(
         int index = buf.readUnsignedByte() >> 3;
 
         if (channel != null) {
-            ByteBuf response = Unpooled.copiedBuffer(
-                    "^" + index, StandardCharsets.US_ASCII);
+            ByteBuf response = Unpooled.copiedBuffer("^" + index, StandardCharsets.US_ASCII);
             channel.writeAndFlush(new NetworkMessage(response, remoteAddress));
         }
 

File: src/org/traccar/protocol/RoboTrackProtocol.java
Patch:
@@ -19,7 +19,6 @@
 import org.traccar.PipelineBuilder;
 import org.traccar.TrackerServer;
 
-import java.nio.ByteOrder;
 import java.util.List;
 
 public class RoboTrackProtocol extends BaseProtocol {

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -395,7 +395,7 @@ private List<Position> decodeBinaryE(Channel channel, SocketAddress remoteAddres
                         position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
                         break;
                     case 0x09:
-                        position.setCourse(buf.readUnsignedShort() * 0.1);
+                        position.setCourse(buf.readUnsignedShort());
                         break;
                     case 0x0B:
                         position.setAltitude(buf.readShort());

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -254,9 +254,8 @@ private Position decodeObd(Channel channel, SocketAddress remoteAddress, String
         position.set(Position.KEY_ODOMETER, parser.nextInt(0));
         parser.nextDouble(0); // instant fuel consumption
         position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextDouble(0));
-        Integer hours = parser.nextInt();
-        if (hours != null) {
-            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(hours));
+        if (parser.hasNext()) {
+            position.set(Position.KEY_HOURS, UnitsConverter.msFromHours(parser.nextInt()));
         }
         position.set(Position.KEY_OBD_SPEED, parser.nextInt(0));
         position.set(Position.KEY_ENGINE_LOAD, parser.next());

File: src/org/traccar/database/DataManager.java
Patch:
@@ -295,7 +295,8 @@ private void initDatabaseSchema() throws SQLException, LiquibaseException {
                     config.getString("database.url"),
                     config.getString("database.user"),
                     config.getString("database.password"),
-                    null, resourceAccessor);
+                    config.getString("database.driver"),
+                    null, null, null, resourceAccessor);
 
             Liquibase liquibase = new Liquibase(
                     config.getString("database.changelog"), resourceAccessor, database);

File: src/org/traccar/protocol/CautelaProtocolDecoder.java
Patch:
@@ -51,7 +51,7 @@ protected Object decode(
             return null;
         }
 
-        String type = parser.next();
+        parser.next(); // type
 
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, parser.next());
         if (deviceSession == null) {

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -178,7 +178,7 @@ protected Object decode(
             position.set(Position.PREFIX_TEMP + 2, parser.nextInt() * 0.01);
         }
 
-        position.setValid(valid != null ? valid : true);
+        position.setValid(valid == null || valid);
 
         if (event != null) {
             position.set(Position.KEY_EVENT, event);

File: src/org/traccar/model/Position.java
Patch:
@@ -130,7 +130,7 @@ public class Position extends Message {
     public static final String ALARM_SHOCK = "shock";
     public static final String ALARM_BONNET = "bonnet";
     public static final String ALARM_FOOT_BRAKE = "footBrake";
-    public static final String ALARM_OIL_LEAK = "oilLeak";
+    public static final String ALARM_FUEL_LEAK = "fuelLeak";
     public static final String ALARM_TAMPERING = "tampering";
     public static final String ALARM_REMOVING = "removing";
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -101,7 +101,7 @@ private String decodeAlarm(String value) {
         if (value.startsWith("T:")) {
             return Position.ALARM_TEMPERATURE;
         } else if (value.startsWith("oil")) {
-            return Position.ALARM_OIL_LEAK;
+            return Position.ALARM_FUEL_LEAK;
         }
         switch (value) {
             case "tracker":

File: src/org/traccar/protocol/AustinNbProtocolDecoder.java
Patch:
@@ -68,11 +68,11 @@ protected Object decode(
         position.setValid(true);
         position.setLatitude(Double.parseDouble(parser.next().replace(',', '.')));
         position.setLongitude(Double.parseDouble(parser.next().replace(',', '.')));
-        position.set("azimuth", parser.nextInt());
+        position.setCourse(parser.nextInt());
         position.set("angle", parser.nextInt());
         position.set("range", parser.nextInt());
         position.set("outOfRange", parser.nextInt());
-        position.set("currier", parser.next());
+        position.set("carrier", parser.next());
 
         return position;
     }

File: src/org/traccar/protocol/AustinNbProtocolDecoder.java
Patch:
@@ -42,7 +42,7 @@ public AustinNbProtocolDecoder(AustinNbProtocol protocol) {
             .number("(d+);")                     // angle
             .number("(d+);")                     // range
             .number("(d+);")                     // out of range
-            .expression("(.*)")                          // operator
+            .expression("(.*)")                  // operator
             .any()
             .compile();
 
@@ -71,7 +71,7 @@ protected Object decode(
         position.set("azimuth", parser.nextInt());
         position.set("angle", parser.nextInt());
         position.set("range", parser.nextInt());
-        position.set("out_of_range", parser.nextInt());
+        position.set("outOfRange", parser.nextInt());
         position.set("currier", parser.next());
 
         return position;

File: src/org/traccar/protocol/AustinNbProtocol.java
Patch:
@@ -24,9 +24,9 @@
 
 import java.util.List;
 
-public class AustinNBProtocol extends BaseProtocol {
+public class AustinNbProtocol extends BaseProtocol {
 
-    public AustinNBProtocol() {
+    public AustinNbProtocol() {
         super("austinnb");
     }
 
@@ -37,7 +37,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("stringDecoder", new StringDecoder());
-                pipeline.addLast("objectDecoder", new AustinNBProtocolDecoder(AustinNBProtocol.this));
+                pipeline.addLast("objectDecoder", new AustinNbProtocolDecoder(AustinNbProtocol.this));
             }
         });
     }

File: test/org/traccar/protocol/AustinNbProtocolDecoderTest.java
Patch:
@@ -3,12 +3,12 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-public class AustinNBProtocolDecoderTest extends ProtocolTest {
+public class AustinNbProtocolDecoderTest extends ProtocolTest {
 
     @Test
     public void testDecode() throws Exception {
 
-        AustinNBProtocolDecoder decoder = new AustinNBProtocolDecoder(new AustinNBProtocol());
+        AustinNbProtocolDecoder decoder = new AustinNbProtocolDecoder(new AustinNbProtocol());
 
         verifyPosition(decoder, text(
                 "48666666666;2017-01-01 16:31:01;52,1133308410645;21,1000003814697;310;120;2292;1"));

File: src/org/traccar/database/CommandsManager.java
Patch:
@@ -74,7 +74,7 @@ public boolean sendCommand(Command command) throws Exception {
             if (activeDevice != null) {
                 activeDevice.sendCommand(command);
             } else if (!queueing) {
-                throw new RuntimeException("Commands queueing is not enabled");
+                throw new RuntimeException("Device is not online");
             } else {
                 getDeviceQueue(deviceId).add(command);
                 return false;

File: src/org/traccar/database/LdapProvider.java
Patch:
@@ -150,7 +150,7 @@ public User getUser(String accountName) {
                     user.setEmail(accountName);
                 }
             }
-            user.setAdmin(isAdmin(accountName));
+            user.setAdministrator(isAdmin(accountName));
         } catch (NamingException e) {
             user.setLogin(accountName);
             user.setName(accountName);

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -156,7 +156,7 @@ public final void refreshDeviceAndGroupPermissions() {
 
     public boolean getUserAdmin(long userId) {
         User user = getUser(userId);
-        return user != null && user.getAdmin();
+        return user != null && user.getAdministrator();
     }
 
     public void checkAdmin(long userId) throws SecurityException {
@@ -258,7 +258,7 @@ public void checkUserEnabled(long userId) throws SecurityException {
     }
 
     public void checkUserUpdate(long userId, User before, User after) throws SecurityException {
-        if (before.getAdmin() != after.getAdmin()
+        if (before.getAdministrator() != after.getAdministrator()
                 || before.getDeviceLimit() != after.getDeviceLimit()
                 || before.getUserLimit() != after.getUserLimit()) {
             checkAdmin(userId);

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -367,7 +367,7 @@ protected Object decode(
 
         String sentence = (String) msg;
         Pattern pattern = PATTERN3;
-        if (sentence.indexOf("A") == 6) {
+        if (sentence.charAt(2) == '0') {
             pattern = PATTERN4;
         } else if (sentence.contains("$GPRMC")) {
             pattern = PATTERN1;

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         TotemProtocolDecoder decoder = new TotemProtocolDecoder(new TotemProtocol());
 
+        verifyPosition(decoder, text(
+                "$$011602867119025755430|50099800180420045019401400000000000000B8797D110816811201.500002132615.7037S02801.8099E056149"));
+
         verifyPosition(decoder, text(
                 "$$0108AB863835028447675|5004C0001710250234064214059828A058AE121010604000.600000320304.7772N10134.8238E11625B"));
 

File: src/org/traccar/protocol/Pt502Protocol.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.TrackerServer;

File: src/org/traccar/protocol/AustinNBProtocolDecoder.java
Patch:
@@ -25,9 +25,9 @@
 import java.net.SocketAddress;
 import java.util.regex.Pattern;
 
-public class GlobeKeeperProtocolDecoder extends BaseProtocolDecoder {
+public class AustinNBProtocolDecoder extends BaseProtocolDecoder {
 
-    public GlobeKeeperProtocolDecoder(GlobeKeeperProtocol protocol) {
+    public AustinNBProtocolDecoder(AustinNBProtocol protocol) {
         super(protocol);
     }
 
@@ -60,8 +60,8 @@ protected Object decode(
         position.setTime(parser.nextDateTime());
 
         position.setValid(true);
-        position.setLongitude(Double.parseDouble(parser.next().replace(',', '.')));
         position.setLatitude(Double.parseDouble(parser.next().replace(',', '.')));
+        position.setLongitude(Double.parseDouble(parser.next().replace(',', '.')));
 
         return position;
     }

File: test/org/traccar/protocol/AustinProtocolDecoderTest.java
Patch:
@@ -3,12 +3,12 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-public class GlobeKeeperProtocolDecoderTest extends ProtocolTest {
+public class AustinNBProtocolDecoderTest extends ProtocolTest {
 
     @Test
     public void testDecode() throws Exception {
 
-        GlobeKeeperProtocolDecoder decoder = new GlobeKeeperProtocolDecoder(new GlobeKeeperProtocol());
+        AustinNBProtocolDecoder decoder = new AustinNBProtocolDecoder(new AustinNBProtocol());
 
         verifyPosition(decoder, text(
                 "48666666666;2017-01-01 16:31:01;52,1133308410645;21,1000003814697;310;120;2292;1"));

File: src/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 - 2016 Anton Tananaev (anton@traccar.org)
+ * Copyright 2013 - 2018 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -250,7 +250,7 @@ private Position decodeOld(Channel channel, SocketAddress remoteAddress, String
             .number("(d+),")                     // mcc
             .number("(d+),")                     // mnc
             .number("(xxxx),")                   // lac
-            .number("(xxxx),")                   // cid
+            .number("(x+),")                     // cid
             .number("(d+)?,")                    // gsm
             .expression("([01]+)?,")             // input
             .expression("([01]+)?,")             // output
@@ -268,7 +268,7 @@ private Position decodeOld(Channel channel, SocketAddress remoteAddress, String
             .number("(d+)?,")                    // rfid
             .expression("[^,]*,")
             .number("(d+)?,")                    // battery
-            .expression("([^,]*);")              // alert
+            .expression("([^,]*)")               // alert
             .any()
             .compile();
 

File: test/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         MegastekProtocolDecoder decoder = new MegastekProtocolDecoder(new MegastekProtocol());
 
+        verifyPosition(decoder, text(
+                "0174$MGV002,014682001957744,014682001957744,R,260318,042537,A,3853.77301,N,07728.66673,W,00,09,00,1.06,0.147,329.51,123.3,,310,26,B46C,5E69375,5,0000,0000,0,,,,,,10,019,Timer,,;!"));
+
         verifyNull(decoder, text(
                 "0112$MGV002,,GVT900-3,S,010114,000003,,,,,,00,00,00,,0.000,0.00,,0.0,,,,,,0000,0000,14,10,0, , ,,1-0,0,Low Ext Vol;!"));
 

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 - 2017 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2018 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -81,7 +81,7 @@ public GoSafeProtocolDecoder(GoSafeProtocol protocol) {
             .groupBegin()
             .text("COT:")
             .number("(d+)")                      // odometer
-            .number("(?:;d+:d+:d+)?")            // engine hours
+            .number("(?:;d+-d+-d+)?")            // engine hours
             .expression(",?")
             .groupEnd("?")
             .groupBegin()

File: src/org/traccar/protocol/EgtsProtocolDecoder.java
Patch:
@@ -22,6 +22,7 @@
 import org.traccar.DeviceSession;
 import org.traccar.helper.BitUtil;
 import org.traccar.helper.Checksum;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -203,7 +204,7 @@ protected Object decode(
                     }
 
                     int speed = buf.readUnsignedShort();
-                    position.setSpeed(BitUtil.to(speed, 14));
+                    position.setSpeed(UnitsConverter.knotsFromKph(BitUtil.to(speed, 14) * 0.1));
                     position.setCourse(buf.readUnsignedByte() + (BitUtil.check(speed, 15) ? 0x100 : 0));
 
                     position.set(Position.KEY_ODOMETER, buf.readUnsignedMedium() * 100);

File: src/org/traccar/protocol/CastelProtocolEncoder.java
Patch:
@@ -35,9 +35,9 @@ private ChannelBuffer encodeContent(long deviceId, short type, ChannelBuffer con
         buf.writeByte('@');
         buf.writeByte('@');
 
-        buf.writeShort(2 + 2 + 1 + 20 + content.readableBytes()); // length
+        buf.writeShort(2 + 2 + 1 + 20 + 2 + content.readableBytes() + 2 + 2); // length
 
-        buf.writeByte(4); // protocol version
+        buf.writeByte(1); // protocol version
 
         buf.writeBytes(uniqueId.getBytes(StandardCharsets.US_ASCII));
         buf.writeZero(20 - uniqueId.length());

File: test/org/traccar/protocol/CastelProtocolEncoderTest.java
Patch:
@@ -15,7 +15,7 @@ public void testEncode() throws Exception {
         command.setDeviceId(1);
         command.setType(Command.TYPE_ENGINE_STOP);
 
-        verifyCommand(encoder, command, binary("40401a00043132333435363738393031323334350000000000458301fe6a0d0a"));
+        verifyCommand(encoder, command, binary("40402000013132333435363738393031323334350000000000458301a94a0d0a"));
 
     }
 

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -256,7 +256,7 @@ private void decodeDataFields(Position position, String[] values) {
 
         if (values.length > 5 && !values[5].isEmpty()) {
             String[] data = values[5].split("\\|");
-            boolean started = data[0].charAt(0) == '0';
+            boolean started = data[0].charAt(1) == '0';
             position.set("taximeterOn", started);
             position.set("taximeterStart", data[1]);
             if (data.length > 2) {

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -106,7 +106,7 @@ protected Object decode(
         position.set(Position.KEY_EVENT, eventCode);
 
         String batteryVoltage = parser.next();
-        batteryVoltage = batteryVoltage.replaceAll("\\.","");
+        batteryVoltage = batteryVoltage.replaceAll("\\.", "");
         position.set(Position.KEY_BATTERY, Double.parseDouble(batteryVoltage) * 0.001);
 
         position.set(Position.KEY_ODOMETER, parser.nextDouble());

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -48,7 +48,7 @@ public LaipacProtocolDecoder(LaipacProtocol protocol) {
             .number("(d+.d+),")                  // course
             .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .expression("([abZXTSMHFE86430]),")  // event code
-            .expression("([\\d.]+),")                    // battery voltage
+            .expression("([\\d.]+),")            // battery voltage
             .number("(d+),")                     // current mileage
             .number("(d),")                      // GPS on/off (1 = on, 0 = off)
             .number("(d+),")                     // Analog port 1

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -48,7 +48,7 @@ public LaipacProtocolDecoder(LaipacProtocol protocol) {
             .number("(d+.d+),")                  // course
             .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .expression("([abZXTSMHFE86430]),")  // event code
-            .number("(d.+),")                    // battery voltage
+            .expression("([\\d.]+),")                    // battery voltage
             .number("(d+),")                     // current mileage
             .number("(d),")                      // GPS on/off (1 = on, 0 = off)
             .number("(d+),")                     // Analog port 1

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -152,8 +152,7 @@ protected Object decode(
     }
 
     private String decodeAlarm(String event) {
-        switch (event)
-        {
+        switch (event) {
             case "Z":
                 return Position.ALARM_LOW_BATTERY;
             case "X":

File: src/org/traccar/model/Position.java
Patch:
@@ -291,4 +291,5 @@ public void setNetwork(Network network) {
     public String getType() {
         return super.getType();
     }
+
 }

File: test/org/traccar/protocol/LaipacProtocolDecoderTest.java
Patch:
@@ -28,7 +28,8 @@ public void testDecode() throws Exception {
         verifyNull(decoder, text(
                 "$ECHK,MSG00002,0*5E"));
 
-        verifyPosition(decoder, text("$AVRMC,99999999,164339,A,4351.0542,N,07923.5445,W,0.29,78.66,180703,0,3.727,17,1,0,0*37"),
+        verifyPosition(decoder, text(
+                "$AVRMC,99999999,164339,A,4351.0542,N,07923.5445,W,0.29,78.66,180703,0,3.727,17,1,0,0*37"),
                 position("2003-07-18 16:43:39.000", true, 43.85090, -79.39241));
 
         verifyPosition(decoder, text(

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -148,8 +148,7 @@ protected Object decode(
         return position;
     }
 
-    private void setNextValue(Parser parser, Position position, String key)
-    {
+    private void setNextValue(Parser parser, Position position, String key) {
         String value = parser.next();
         if (value != null) {
             position.set(key, value);

File: src/org/traccar/model/Position.java
Patch:
@@ -52,8 +52,6 @@ public class Position extends Message {
     public static final String KEY_BATTERY_LEVEL = "batteryLevel"; // percentage
     public static final String KEY_FUEL_LEVEL = "fuel"; // liters
     public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption"; // liters/hour
-    public static final String KEY_ANALOG_1 = "analog 1"; // volts
-    public static final String KEY_ANALOG_2 = "analog 2"; // volts
 
     public static final String KEY_VERSION_FW = "versionFw";
     public static final String KEY_VERSION_HW = "versionHw";

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -43,7 +43,7 @@ public OsmAndProtocolDecoder(OsmAndProtocol protocol) {
 
     @Override
     protected Object decode(
-       Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+            Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         HttpRequest request = (HttpRequest) msg;
         QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -42,7 +42,8 @@ public OsmAndProtocolDecoder(OsmAndProtocol protocol) {
     }
 
     @Override
-    protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
+    protected Object decode(
+       Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         HttpRequest request = (HttpRequest) msg;
         QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());

File: src/org/traccar/helper/DataConverter.java
Patch:
@@ -26,7 +26,7 @@ private DataConverter() {
 
     public static byte[] parseHex(String string) {
         try {
-            return Hex.decodeHex(string);
+            return Hex.decodeHex(string.toCharArray());
         } catch (DecoderException e) {
             throw new RuntimeException(e);
         }

File: src/org/traccar/protocol/LaipacSFKamelProtocolDecoder.java
Patch:
@@ -120,8 +120,7 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
 
 
         String result = sentence.replaceAll("^\\$(.*)\\*[0-9a-fA-F]{2}$", "$1");
-        if (checksum == null || Integer.parseInt(checksum, 16) != Checksum.xor(result))
-        {
+        if (checksum == null || Integer.parseInt(checksum, 16) != Checksum.xor(result)) {
             return null;
         }
 
@@ -150,7 +149,7 @@ private String decodeAlarm(String event) {
             return Position.ALARM_GEOFENCE_ENTER;
         } else if (event.equals('T')) {
             return Position.ALARM_TAMPERING;
-        } else if(event.equals("H")) {
+        } else if (event.equals("H")) {
             return Position.ALARM_POWER_OFF;
         } else if (event.equals('X')) {
             return Position.ALARM_GEOFENCE_ENTER;

File: src/org/traccar/protocol/CastelProtocolEncoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class CastelProtocolEncoder extends BaseProtocolEncoder {
 
-    private ChannelBuffer encodeContent(long deviceId, int type, ChannelBuffer content) {
+    private ChannelBuffer encodeContent(long deviceId, short type, ChannelBuffer content) {
         ChannelBuffer buf = ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN, 0);
         String uniqueId = Context.getIdentityManager().getById(deviceId).getUniqueId();
 
@@ -42,7 +42,7 @@ private ChannelBuffer encodeContent(long deviceId, int type, ChannelBuffer conte
         buf.writeBytes(uniqueId.getBytes(StandardCharsets.US_ASCII));
         buf.writeZero(20 - uniqueId.length());
 
-        buf.writeShort(type);
+        buf.writeShort(ChannelBuffers.swapShort(type));
         buf.writeBytes(content);
 
         buf.writeShort(Checksum.crc16(Checksum.CRC16_X25, buf.toByteBuffer()));

File: test/org/traccar/protocol/CastelProtocolEncoderTest.java
Patch:
@@ -15,7 +15,7 @@ public void testEncode() throws Exception {
         command.setDeviceId(1);
         command.setType(Command.TYPE_ENGINE_STOP);
 
-        verifyCommand(encoder, command, binary("40401a00043132333435363738393031323334350000000000834501c7280d0a"));
+        verifyCommand(encoder, command, binary("40401a00043132333435363738393031323334350000000000458301fe6a0d0a"));
 
     }
 

File: src/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -90,8 +90,8 @@ private List<Position> decodeFixed64(Channel channel, SocketAddress remoteAddres
                     .setSecond((int) (time >> 26) & 0x3F)
                     .getDate());
 
-            position.setLatitude(buf.readInt() * 0.0000001);
             position.setLongitude(buf.readInt() * 0.0000001);
+            position.setLatitude(buf.readInt() * 0.0000001);
             position.setSpeed(UnitsConverter.knotsFromCps(buf.readUnsignedShort()));
             position.setCourse(buf.readUnsignedByte() * 2);
             position.setAltitude(buf.readShort());

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -251,8 +251,8 @@ protected Object decode(
                 int valueIndex = 0;
 
                 if (type.equals("bphrt")) {
-                    position.set("pressureLow", values[valueIndex++]);
                     position.set("pressureHigh", values[valueIndex++]);
+                    position.set("pressureLow", values[valueIndex++]);
                 }
                 position.set("pulse", values[valueIndex]);
 

File: src/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -787,7 +787,9 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String se
             for (int i = 1; i <= deviceCount; i++) {
                 index += 1; // id
                 index += 1; // type
-                position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);
+                if (!data[index++].isEmpty()) {
+                    position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index - 1], 16) * 0.0625);
+                }
             }
         }
 

File: test/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200TextProtocolDecoder decoder = new Gl200TextProtocolDecoder(new Gl200Protocol());
 
+        verifyPositions(decoder, buffer(
+                "+RESP:GTERI,310603,863286023345490,,00000002,,10,1,2,0.3,0,155.7,8.000000,52.000000,20171215213040,0262,0002,1450,9F13,00,1130.3,00539:27:19,,,110000,2,1,28FFD5239115034E,1,,20171215213041,27C7$"));
+
         verifyPositions(decoder, buffer(
                 "+RESP:GTERI,250C02,868789023691057,,00000019,,10,1,1,0.0,196,2258.0,-99.201807,19.559242,20180214002957,0334,0003,235B,7F8D,00,6786.7,,,,100,110000,1,0394,1,4,100.0,100.0,20180214003006,C72B$"));
 

File: src/org/traccar/protocol/CautelaProtocolDecoder.java
Patch:
@@ -36,8 +36,8 @@ public CautelaProtocolDecoder(CautelaProtocol protocol) {
             .number("(d+),")                     // type
             .number("(d+),")                     // imei
             .number("(dd),(dd),(dd),")           // date (ddmmyy)
-            .number("(-?d+.d+),")                // longitude
             .number("(-?d+.d+),")                // latitude
+            .number("(-?d+.d+),")                // longitude
             .number("(dd)(dd),")                 // time (hhmm)
             .any()
             .compile();
@@ -65,8 +65,8 @@ protected Object decode(
         dateBuilder.setDateReverse(parser.nextInt(), parser.nextInt(), parser.nextInt());
 
         position.setValid(true);
-        position.setLongitude(parser.nextDouble());
         position.setLatitude(parser.nextDouble());
+        position.setLongitude(parser.nextDouble());
 
         dateBuilder.setHour(parser.nextInt()).setMinute(parser.nextInt());
         position.setTime(dateBuilder.getDate());

File: src/org/traccar/api/MediaFilter.java
Patch:
@@ -43,7 +43,7 @@ public void init(FilterConfig filterConfig) throws ServletException {
     @Override
     public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)
             throws IOException, ServletException {
-        HttpServletResponse httpResponse = ((HttpServletResponse) response);
+        HttpServletResponse httpResponse = (HttpServletResponse) response;
         try {
             HttpSession session = ((HttpServletRequest) request).getSession(false);
             Long userId = null;

File: src/org/traccar/protocol/FlespiProtocolDecoder.java
Patch:
@@ -123,7 +123,7 @@ private boolean decodeParam(String name, int index, JsonValue value, Position po
                 return true;
             case "din":
             case "dout":
-                position.set((name.equals("din") ? Position.KEY_INPUT : Position.KEY_OUTPUT),
+                position.set(name.equals("din") ? Position.KEY_INPUT : Position.KEY_OUTPUT,
                         ((JsonNumber) value).intValue());
                 return true;
             case "gps.vehicle.mileage":

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -48,7 +48,7 @@ public WatchProtocolDecoder(WatchProtocol protocol) {
             .expression("([NS]),")
             .number(" *(-?d+.d+),")              // longitude
             .expression("([EW])?,")
-            .number("(d+.d+),")                  // speed
+            .number("(d+.?d*),")                 // speed
             .number("(d+.?d*),")                 // course
             .number("(d+.?d*),")                 // altitude
             .number("(d+),")                     // satellites
@@ -139,7 +139,7 @@ protected Object decode(
         String manufacturer = buf.readBytes(2).toString(StandardCharsets.US_ASCII);
         buf.skipBytes(1); // delimiter
 
-        int idLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+        int idLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
         String id = buf.readBytes(idLength).toString(StandardCharsets.US_ASCII);
         DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, id);
         if (deviceSession == null) {
@@ -150,7 +150,7 @@ protected Object decode(
 
         String index = null;
         if (idLength > 10) {
-            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');
+            int indexLength = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*') - buf.readerIndex();
             index = buf.readBytes(indexLength).toString(StandardCharsets.US_ASCII);
             buf.skipBytes(1); // delimiter
         }

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -192,7 +192,7 @@ private Position decode2356(
             if (protocol.equals("ST600")) {
                 position.setNetwork(new Network(CellTower.from(
                         Integer.parseInt(values[index++]), Integer.parseInt(values[index++]),
-                        Integer.parseInt(values[index++]), cid, Integer.parseInt(values[index++]))));
+                        Integer.parseInt(values[index++], 16), cid, Integer.parseInt(values[index++]))));
             }
         }
 

File: test/org/traccar/protocol/SuntechProtocolDecoderTest.java
Patch:
@@ -27,6 +27,9 @@ public void testDecode() throws Exception {
 
         SuntechProtocolDecoder decoder = new SuntechProtocolDecoder(new SuntechProtocol());
 
+        verifyPosition(decoder, text(
+                "ST600STT;008084783;20;419;20180308;18:00:36;0032cc3e;736;3;445c;41;-16.530023;-068.084267;018.640;267.99;10;1;11655;13.33;100000;2;0336;000061;4.5;0;0.00"));
+
         verifyPosition(decoder, text(
                 "ST600STT;107850496;20;419;20180227;14:30:45;00462b08;736;3;4524;50;-16.479091;-068.119119;000.346;000.00;4;1;0;13.89;000000;1;0223;000003;0.0;0;0.00"));
 

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -47,7 +47,7 @@ public TaipProtocolDecoder(TaipProtocol protocol) {
             .groupEnd("?")
             .number("(d{5})")                    // seconds
             .or()
-            .expression("(?:RGP|RCQ|RBR)")       // type
+            .expression("(?:RGP|RCQ|RCV|RBR)")   // type
             .number("(dd)?")                     // event
             .number("(dd)(dd)(dd)")              // date (mmddyy)
             .number("(dd)(dd)(dd)")              // time (hhmmss)

File: test/org/traccar/protocol/TaipProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         TaipProtocolDecoder decoder = new TaipProtocolDecoder(new TaipProtocol());
 
+        verifyPosition(decoder, text(
+                ">RCV12270218010247-3471349-058400030002057F001200020A1D013010600001509+0000FF+0000FF;#1DE2;ID=7196;*03<"));
+
         verifyPosition(decoder, text(
                 ">RPV03874+3477708-0923453100029212;ID=0017;*71<"));
 

File: src/org/traccar/database/GroupsManager.java
Patch:
@@ -76,9 +76,9 @@ protected void addNewItem(Group group) {
     }
 
     @Override
-    protected void updateCachedItem(Group group) {
+    public void updateItem(Group group) throws SQLException {
         checkGroupCycles(group);
-        super.updateCachedItem(group);
+        super.updateItem(group);
     }
 
     @Override

File: src/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ protected Object decode(
                     channel, remoteAddress, buf.readBytes(15).toString(StandardCharsets.US_ASCII));
 
             ChannelBuffer response = ChannelBuffers.dynamicBuffer(ByteOrder.LITTLE_ENDIAN, 0);
-            response.writeInt((int) (System.currentTimeMillis() / 1000));
+            response.writeInt((int) ((System.currentTimeMillis() - 1356998400000L) / 1000));
             response.writeInt(deviceSession != null ? 0 : 1); // flags
             sendResponse(channel, MSG_HELLO_RESPONSE, response);
 

File: src/org/traccar/smpp/SmppClient.java
Patch:
@@ -83,6 +83,7 @@ public SmppClient() {
         sessionConfig.setHost(Context.getConfig().getString("sms.smpp.host", "localhost"));
         sessionConfig.setPort(Context.getConfig().getInteger("sms.smpp.port", 2775));
         sessionConfig.setSystemId(Context.getConfig().getString("sms.smpp.username", "user"));
+        sessionConfig.setSystemType(Context.getConfig().getString("sms.smpp.systemType", null));
         sessionConfig.setPassword(Context.getConfig().getString("sms.smpp.password", "password"));
         sessionConfig.getLoggingOptions().setLogBytes(false);
         sessionConfig.getLoggingOptions().setLogPdu(Context.getConfig().getBoolean("sms.smpp.logPdu"));

File: test/org/traccar/protocol/CastelProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public void testDecode() throws Exception {
 
         CastelProtocolDecoder decoder = new CastelProtocolDecoder(new CastelProtocol());
 
+        verifyPosition(decoder, binary(ByteOrder.LITTLE_ENDIAN,
+                "24245000363137313135313243333133360000000000000040011b011207133ac49a390464514a15000000008e480c00000917000000000000ffafffaf00010000ffff7800ffffffffffffff003c0d0a"));
+
         verifyPositions(decoder, binary(ByteOrder.LITTLE_ENDIAN,
                 "40408200033231334c32303137303031313039000000000000100136477b5964477b590400000000000000dc410f000000000204000709207910008304011c07110e110dd41a160714a95a0f00001e058c4944442d3231334c2056312e312e3120323031372d30352d3038004944442d3231334c2056312e312e300000006da10d0a"));
 

File: test/org/traccar/WebDataHandlerTest.java
Patch:
@@ -30,7 +30,7 @@ public void testPrepareJsonPayload() throws ParseException {
         WebDataHandler handler = new WebDataHandler("http://localhost/", true);
 
         assertEquals(
-                "{\"position\":{\"id\":0,\"attributes\":{},\"deviceId\":0,\"type\":null,\"protocol\":null,\"serverTime\":null,\"deviceTime\":1451610123000,\"fixTime\":1451610123000,\"outdated\":false,\"valid\":true,\"latitude\":20.0,\"longitude\":30.0,\"altitude\":0.0,\"speed\":0.0,\"course\":0.0,\"address\":null,\"accuracy\":0.0,\"network\":null}}",
+                "{\"position\":{\"id\":0,\"attributes\":{},\"deviceId\":0,\"type\":null,\"protocol\":null,\"serverTime\":null,\"deviceTime\":1451610123000,\"fixTime\":1451610123000,\"outdated\":false,\"valid\":true,\"latitude\":20.0,\"longitude\":30.0,\"altitude\":0.0,\"speed\":0.0,\"course\":0.0,\"address\":null,\"accuracy\":0.0,\"network\":null},\"device\":{\"id\":1,\"attributes\":{},\"groupId\":0,\"name\":\"test\",\"uniqueId\":\"123456789012345\",\"status\":\"offline\",\"lastUpdate\":null,\"positionId\":0,\"geofenceIds\":null,\"phone\":null,\"model\":null,\"contact\":null,\"category\":null,\"disabled\":false}}",
                 handler.prepareJsonPayload(p));
 
     }

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -238,9 +238,8 @@ public ChannelPipeline getPipeline() {
         }
 
         if (Context.getConfig().getBoolean("forward.enable")) {
-            final Boolean json = Context.getConfig().getBoolean("forward.json");
-            final String url = Context.getConfig().getString("forward.url");
-            pipeline.addLast("webHandler", new WebDataHandler(url, json));
+            pipeline.addLast("webHandler", new WebDataHandler(Context.getConfig().getString("forward.url"),
+                    Context.getConfig().getBoolean("forward.json")));
         }
 
         if (commandResultEventHandler != null) {

File: test/org/traccar/WebDataHandlerTest.java
Patch:
@@ -23,7 +23,7 @@ public void testFormatRequest() throws Exception {
     }
 
     @Test
-    public void testBuilderRequest() throws ParseException {
+    public void testPrepareJsonPayload() throws ParseException {
 
         Position p = position("2016-01-01 01:02:03.000", true, 20, 30);
 

File: src/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -692,9 +692,8 @@ private Object decodeFri(Channel channel, SocketAddress remoteAddress, String se
 
         decodeLocation(position, parser);
 
-        // power value only on some devices
         if (power > 10) {
-            position.set(Position.KEY_POWER, power);
+            position.set(Position.KEY_POWER, power * 0.001); // only on some devices
         }
 
         position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
@@ -749,7 +748,7 @@ private Object decodeEri(Channel channel, SocketAddress remoteAddress, String se
 
         decodeLocation(position, parser);
 
-        position.set(Position.KEY_POWER, power);
+        position.set(Position.KEY_POWER, power * 0.001);
         position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
         position.set(Position.KEY_HOURS, parser.next());
         position.set(Position.PREFIX_ADC + 1, parser.next());

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -238,7 +238,9 @@ public ChannelPipeline getPipeline() {
         }
 
         if (Context.getConfig().getBoolean("forward.enable")) {
-            pipeline.addLast("webHandler", new WebDataHandler(Context.getConfig().getString("forward.url"), Context.getConfig().getBoolean("forward.json")));
+            final Boolean json = Context.getConfig().getBoolean("forward.json");
+            final String url = Context.getConfig().getString("forward.url");
+            pipeline.addLast("webHandler", new WebDataHandler(url, json));
         }
 
         if (commandResultEventHandler != null) {

File: src/org/traccar/protocol/Vt200ProtocolDecoder.java
Patch:
@@ -84,7 +84,7 @@ protected Object decode(
             if (!BitUtil.check(flags, 1)) {
                 position.setLatitude(-position.getLatitude());
             }
-            if (!BitUtil.check(flags, 1)) {
+            if (!BitUtil.check(flags, 2)) {
                 position.setLongitude(-position.getLongitude());
             }
 

File: test/org/traccar/protocol/Vt200ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Vt200ProtocolDecoder decoder = new Vt200ProtocolDecoder(new Vt200Protocol());
 
+        verifyPosition(decoder, binary(
+                "28192030961807208200210101b919011818375801245774036424612500160917000003aa008800007b00aa3429"));
+
         verifyNull(decoder, binary(
                 "286310373094563082002701033d010817143327c68a14841e00c27f550e9a000000000c000000084700200120007d01af260b29"));
 

File: src/org/traccar/FilterHandler.java
Patch:
@@ -140,7 +140,7 @@ private boolean filterMaxSpeed(Position position, Position last) {
 
     private boolean skipLimit(Position position, Position last) {
         if (skipLimit != 0 && last != null) {
-            return (position.getFixTime().getTime() - last.getFixTime().getTime()) > skipLimit;
+            return (position.getServerTime().getTime() - last.getServerTime().getTime()) > skipLimit;
         }
         return false;
     }

File: src/org/traccar/protocol/SpotProtocolDecoder.java
Patch:
@@ -81,6 +81,8 @@ protected Object decode(
                 position.setLatitude(Double.parseDouble(xPath.evaluate("latitude", node)));
                 position.setLongitude(Double.parseDouble(xPath.evaluate("longitude", node)));
 
+                position.set(Position.KEY_EVENT, xPath.evaluate("messageType", node));
+
                 positions.add(position);
 
             }

File: src/org/traccar/database/DeviceManager.java
Patch:
@@ -65,7 +65,7 @@ public DeviceManager(DataManager dataManager) {
         refreshLastPositions();
     }
 
-    private void updateDeviceCache(boolean force) throws SQLException {
+    public void updateDeviceCache(boolean force) throws SQLException {
         long lastUpdate = devicesLastUpdate.get();
         if ((force || System.currentTimeMillis() - lastUpdate > dataRefreshDelay)
                 && devicesLastUpdate.compareAndSet(lastUpdate, System.currentTimeMillis())) {

File: src/org/traccar/database/GroupsManager.java
Patch:
@@ -47,7 +47,7 @@ private void checkGroupCycles(Group group) {
         }
     }
 
-    private void updateGroupCache(boolean force) throws SQLException {
+    public void updateGroupCache(boolean force) throws SQLException {
         long lastUpdate = groupsLastUpdate.get();
         if ((force || System.currentTimeMillis() - lastUpdate > dataRefreshDelay)
                 && groupsLastUpdate.compareAndSet(lastUpdate, System.currentTimeMillis())) {

File: src/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -88,7 +88,7 @@ public Collection<Device> get(
     @Path("{id}/distance")
     @PUT
     public Response updateTotalDistance(DeviceTotalDistance entity) throws SQLException {
-        Context.getPermissionsManager().checkDevice(getUserId(), entity.getDeviceId());
+        Context.getPermissionsManager().checkDeviceManagerOrAdmin(getUserId(), entity.getDeviceId());
         Context.getDeviceManager().resetTotalDistance(entity);
         LogAction.resetTotalDistance(getUserId(), entity.getDeviceId());
         return Response.noContent().build();

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -242,13 +242,14 @@ private Position decodeRegular(Channel channel, SocketAddress remoteAddress, Cha
         }
 
         if (parser.hasNext(2)) {
-            decodeDataFields(position, parser.nextInt(), parser.next().split(","));
+            parser.nextInt(); // count
+            decodeDataFields(position, parser.next().split(","));
         }
 
         return position;
     }
 
-    private void decodeDataFields(Position position, int count, String[] values) {
+    private void decodeDataFields(Position position, String[] values) {
 
         if (values.length > 1 && !values[1].isEmpty()) {
             position.set("tempData", values[1]);

File: test/org/traccar/protocol/FlespiProtocolDecoderTest.java
Patch:
@@ -12,13 +12,13 @@ public void testDecode() throws Exception {
         FlespiProtocolDecoder decoder = new FlespiProtocolDecoder(new FlespiProtocol());
 
         verifyPositions(decoder, request(HttpMethod.POST, "/",
-            buffer("data=[{\"position.speed\":0,\"position.latitude\":53.90573,\"time.valid.status\":true,\"timestamp\":1506956075,\"position.satellites\":10,\"message.buffered.status\":false,\"business.mode.status\":true,\"gps.status\":true,\"position.longitude\":27.455848,\"position.direction\":0,\"ident\":\"605630\"},{\"siren.status\":false,\"business.mode.status\":true,\"position.satellites\":8,\"timestamp\":1506695785,\"led.status\":false,\"position.latitude\":53.905569,\"position.longitude\":27.455986,\"position.speed\":0,\"gradual.stop.status\":false,\"position.direction\":262.643854,\"hardware.version.enum\":223,\"vehicle.mileage\":160,\"message.buffered.status\":false,\"blinkers.status\":false,\"ident\":\"605630\",\"position.altitude\":233.48,\"immobilizer.status\":false}]")));
+            buffer("[{\"position.speed\":0,\"position.latitude\":53.90573,\"time.valid.status\":true,\"timestamp\":1506956075,\"position.satellites\":10,\"message.buffered.status\":false,\"business.mode.status\":true,\"gps.status\":true,\"position.longitude\":27.455848,\"position.direction\":0,\"ident\":\"605630\"},{\"siren.status\":false,\"business.mode.status\":true,\"position.satellites\":8,\"timestamp\":1506695785,\"led.status\":false,\"position.latitude\":53.905569,\"position.longitude\":27.455986,\"position.speed\":0,\"gradual.stop.status\":false,\"position.direction\":262.643854,\"hardware.version.enum\":223,\"vehicle.mileage\":160,\"message.buffered.status\":false,\"blinkers.status\":false,\"ident\":\"605630\",\"position.altitude\":233.48,\"immobilizer.status\":false}]")));
 
         verifyPositions(decoder, request(HttpMethod.POST, "/",
-            buffer("data=[{\"geofence.inside.status\":false,\"position.valid\":false,\"ain#4\":0,\"rs232.sensor.value#1\":0,\"position.direction\":0,\"rs232.sensor.value#0\":0,\"position.speed\":0,\"position.latitude\":10.11223,\"refrigerator.sensor.temperature#1\":62.5,\"gnss.antenna.cut.status\":true,\"din\":3,\"ain#3\":0,\"refrigerator.sensor.temperature#3\":71.4,\"position.altitude\":0,\"shock.event.trigger\":false,\"alarm.mode.status\":false,\"ibutton.event.connect\":false,\"refrigerator.sensor.temperature#4\":66.7,\"internal.battery.voltage.limit.lower.status\":false,\"ain#2\":0,\"gsm.signal.level\":0,\"refrigerator.connection.status\":0,\"position.satellites\":0,\"external.powersource.voltage.range.outside.status\":false,\"refrigerator.sensor.temperature#2\":68.2,\"incline.event.trigger\":false,\"alarm.event.trigger\":false,\"movement.status\":true,\"refrigerator.sensor.temperature#6\":68.9,\"ident\":\"605630\",\"timestamp\":946684840,\"engine.ignition.status\":true,\"gsm.sim.status\":true,\"record.seqnum\":8165,\"external.powersource.voltage\":15.298,\"gnss.enum\":\"glonass\",\"position.longitude\":20.88774,\"battery.voltage\":4.088,\"refrigerator.sensor.temperature#5\":71.3,\"ain#1\":0,\"internal.bus.supply.voltage.range.outside.status\":false},{\"geofence.inside.status\":false,\"position.valid\":true,\"ain#4\":0,\"rs232.sensor.value#1\":0,\"position.direction\":0,\"rs232.sensor.value#0\":0,\"position.speed\":0,\"position.latitude\":57.986744,\"refrigerator.sensor.temperature#1\":74.1,\"gnss.antenna.cut.status\":false,\"ain#3\":0,\"position.hdop\":21.1,\"refrigerator.sensor.temperature#3\":71.4,\"position.altitude\":219,\"shock.event.trigger\":false,\"alarm.mode.status\":false,\"ibutton.event.connect\":false,\"refrigerator.sensor.temperature#4\":70.5,\"internal.battery.voltage.limit.lower.status\":false,\"ain#2\":0,\"gsm.signal.level\":0,\"refrigerator.connection.status\":0,\"position.satellites\":5,\"external.powersource.voltage.range.outside.status\":false,\"refrigerator.sensor.temperature#2\":71.3,\"incline.event.trigger\":false,\"alarm.event.trigger\":false,\"movement.status\":true,\"refrigerator.sensor.temperature#6\":69.3,\"ident\":\"605630\",\"timestamp\":1392272112,\"engine.ignition.status\":true,\"gsm.sim.status\":true,\"record.seqnum\":8174,\"external.powersource.voltage\":15.303,\"gnss.enum\":\"glonass\",\"position.longitude\":56.207576,\"battery.voltage\":3.934,\"refrigerator.sensor.temperature#5\":68.1,\"ain#1\":0,\"internal.bus.supply.voltage.range.outside.status\":false}]")));
+            buffer("[{\"geofence.inside.status\":false,\"position.valid\":false,\"ain#4\":0,\"rs232.sensor.value#1\":0,\"position.direction\":0,\"rs232.sensor.value#0\":0,\"position.speed\":0,\"position.latitude\":10.11223,\"refrigerator.sensor.temperature#1\":62.5,\"gnss.antenna.cut.status\":true,\"din\":3,\"ain#3\":0,\"refrigerator.sensor.temperature#3\":71.4,\"position.altitude\":0,\"shock.event.trigger\":false,\"alarm.mode.status\":false,\"ibutton.event.connect\":false,\"refrigerator.sensor.temperature#4\":66.7,\"internal.battery.voltage.limit.lower.status\":false,\"ain#2\":0,\"gsm.signal.level\":0,\"refrigerator.connection.status\":0,\"position.satellites\":0,\"external.powersource.voltage.range.outside.status\":false,\"refrigerator.sensor.temperature#2\":68.2,\"incline.event.trigger\":false,\"alarm.event.trigger\":false,\"movement.status\":true,\"refrigerator.sensor.temperature#6\":68.9,\"ident\":\"605630\",\"timestamp\":946684840,\"engine.ignition.status\":true,\"gsm.sim.status\":true,\"record.seqnum\":8165,\"external.powersource.voltage\":15.298,\"gnss.enum\":\"glonass\",\"position.longitude\":20.88774,\"battery.voltage\":4.088,\"refrigerator.sensor.temperature#5\":71.3,\"ain#1\":0,\"internal.bus.supply.voltage.range.outside.status\":false},{\"geofence.inside.status\":false,\"position.valid\":true,\"ain#4\":0,\"rs232.sensor.value#1\":0,\"position.direction\":0,\"rs232.sensor.value#0\":0,\"position.speed\":0,\"position.latitude\":57.986744,\"refrigerator.sensor.temperature#1\":74.1,\"gnss.antenna.cut.status\":false,\"ain#3\":0,\"position.hdop\":21.1,\"refrigerator.sensor.temperature#3\":71.4,\"position.altitude\":219,\"shock.event.trigger\":false,\"alarm.mode.status\":false,\"ibutton.event.connect\":false,\"refrigerator.sensor.temperature#4\":70.5,\"internal.battery.voltage.limit.lower.status\":false,\"ain#2\":0,\"gsm.signal.level\":0,\"refrigerator.connection.status\":0,\"position.satellites\":5,\"external.powersource.voltage.range.outside.status\":false,\"refrigerator.sensor.temperature#2\":71.3,\"incline.event.trigger\":false,\"alarm.event.trigger\":false,\"movement.status\":true,\"refrigerator.sensor.temperature#6\":69.3,\"ident\":\"605630\",\"timestamp\":1392272112,\"engine.ignition.status\":true,\"gsm.sim.status\":true,\"record.seqnum\":8174,\"external.powersource.voltage\":15.303,\"gnss.enum\":\"glonass\",\"position.longitude\":56.207576,\"battery.voltage\":3.934,\"refrigerator.sensor.temperature#5\":68.1,\"ain#1\":0,\"internal.bus.supply.voltage.range.outside.status\":false}]")));
 
         verifyPositions(decoder, request(HttpMethod.POST, "/",
-            buffer("data=[{\"ain#1\":1,\"ain#2\":0,\"ain#3\":0,\"ain#4\":0,\"alarm.event.trigger\":true,\"custom.SOS\":1,\"custom.dparam\":3.141593,\"custom.ign\":1,\"custom.iparam\":-55,\"custom.tparam\":\"lorem\",\"din\":722,\"dout\":1048576,\"ident\":\"namo:namo\",\"position.altitude\":300,\"position.direction\":0,\"position.hdop\":1.1,\"position.latitude\":53.90821,\"position.longitude\":27.524165,\"position.satellites\":7,\"position.speed\":0,\"timestamp\":1508508510.013227}]")));
+            buffer("[{\"ain#1\":1,\"ain#2\":0,\"ain#3\":0,\"ain#4\":0,\"alarm.event.trigger\":true,\"custom.SOS\":1,\"custom.dparam\":3.141593,\"custom.ign\":1,\"custom.iparam\":-55,\"custom.tparam\":\"lorem\",\"din\":722,\"dout\":1048576,\"ident\":\"namo:namo\",\"position.altitude\":300,\"position.direction\":0,\"position.hdop\":1.1,\"position.latitude\":53.90821,\"position.longitude\":27.524165,\"position.satellites\":7,\"position.speed\":0,\"timestamp\":1508508510.013227}]")));
     }
 
 }
\ No newline at end of file

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -118,6 +118,7 @@ private static boolean hasGps(int type) {
             case MSG_GPS_LBS_EXTEND:
             case MSG_GPS_2:
             case MSG_FENCE_SINGLE:
+            case MSG_FENCE_MULTI:
                 return true;
             default:
                 return false;
@@ -135,6 +136,7 @@ private static boolean hasLbs(int type) {
             case MSG_GPS_LBS_STATUS_3:
             case MSG_GPS_2:
             case MSG_FENCE_SINGLE:
+            case MSG_FENCE_MULTI:
             case MSG_LBS_ALARM:
             case MSG_LBS_ADDRESS:
                 return true;
@@ -630,7 +632,7 @@ private Object decodeBasicOther(Channel channel, ChannelBuffer buf,
             buf.readUnsignedShort();
         }
 
-        if (type == MSG_GPS_LBS_STATUS_3) {
+        if (type == MSG_GPS_LBS_STATUS_3 || type == MSG_FENCE_MULTI) {
             position.set(Position.KEY_GEOFENCE, buf.readUnsignedByte());
         }
 

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -19,7 +19,7 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, binary(
                 "78780B23C00122040001000818720D0A"));
 
-        verifyNull(decoder, binary(
+        verifyNotNull(decoder, binary(
                 "78782EA4110C0C02281BF6026C18720C38D22800149C1181CC00010000260E000000000615F8012C05041102FF001058FD0D0A"));
 
         verifyNotNull(decoder, binary(

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -554,14 +554,14 @@ private Object decodeBasicOther(Channel channel, ChannelBuffer buf,
             getLastLocation(position, dateBuilder.getDate());
 
             int mcc = buf.readUnsignedShort();
-            int mnc = buf.readUnsignedByte();
+            int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte();
             Network network = new Network();
             for (int i = 0; i < 7; i++) {
                 int lac = longFormat ? buf.readInt() : buf.readUnsignedShort();
                 int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium();
                 int rssi = -buf.readUnsignedByte();
                 if (lac > 0) {
-                    network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));
+                    network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));
                 }
             }
 

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -158,7 +158,6 @@ private static boolean hasStatus(int type) {
 
     private static boolean hasLanguage(int type) {
         switch (type) {
-            case MSG_LBS_EXTEND:
             case MSG_GPS_PHONE:
             case MSG_HEARTBEAT:
             case MSG_GPS_LBS_STATUS_3:

File: src/org/traccar/protocol/FlespiProtocolDecoder.java
Patch:
@@ -104,7 +104,7 @@ private void decodePosition(JsonObject object, Position position) {
     private boolean decodeParam(String name, int index, JsonValue value, Position position) {
         switch (name) {
             case "timestamp":
-                position.setTime(new Date((((JsonNumber) value).longValue() * 1000)));
+                position.setTime(new Date(((JsonNumber) value).longValue() * 1000));
                 return true;
             case "position.latitude":
                 position.setLatitude(((JsonNumber) value).doubleValue());
@@ -140,7 +140,7 @@ private boolean decodeParam(String name, int index, JsonValue value, Position po
                     if (position.getInteger(key) == 0) {
                         position.set(key, 1 << (index - 1));
                     } else {
-                        position.set(key, (position.getInteger(key) | 1 << (index - 1)));
+                        position.set(key, position.getInteger(key) | 1 << (index - 1));
                     }
                 }
                 return true;

File: src/org/traccar/protocol/TotemFrameDecoder.java
Patch:
@@ -42,8 +42,8 @@ protected Object decode(
 
         int length;
 
-        int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder("AA"));
-        if (flagIndex != -1 && flagIndex - beginIndex == 6) {
+        int separatorIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '|');
+        if (separatorIndex > 0 && separatorIndex - beginIndex > 19) {
             length = Integer.parseInt(buf.toString(buf.readerIndex() + 2, 4, StandardCharsets.US_ASCII));
         } else {
             length = Integer.parseInt(buf.toString(buf.readerIndex() + 2, 2, StandardCharsets.US_ASCII), 16);

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -271,9 +271,9 @@ private Position decodeNew(DeviceSession deviceSession, ChannelBuffer buf, int i
             .number("(d+.d+)")                   // course
             .any()
             .text("Speed:")
-            .number("(d+.d+)KM/H")               // speed
+            .number("(d+.d+)")                   // speed
             .any()
-            .text("Date Time:")
+            .expression("Date ?Time:")
             .number("(dddd)-(dd)-(dd) ")         // date
             .number("(dd):(dd):(dd)")            // time
             .compile();

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(
                 "454C0027E753035254407167747167670100180002035254407167747100200205020500010432000086BD"));
 
+        verifyPosition(decoder, binary(
+                "676780005a000001000000004c61743a4e33312e38333935352c4c6f6e3a5738322e36313334362c436f757273653a302e30302c53706565643a302e30306b6d2f682c4461746554696d653a323031372d31322d30322031313a32393a3433"));
+
         verifyPosition(decoder, binary(
                 "676780005E5788014C754C754C61743A4E32332E3131313734330A4C6F6E3A453131342E3430393233380A436F757273653A302E30300A53706565643A302E31374B4D2F480A446174652054696D653A323031352D30392D31332032303A32313A3230"));
 

File: src/org/traccar/protocol/EelinkProtocolEncoder.java
Patch:
@@ -65,7 +65,7 @@ public static ChannelBuffer encodeContent(
         if (connectionless) {
             result.writeByte('E');
             result.writeByte('L');
-            result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length
+            result.writeShort(2 + buf.readableBytes()); // length
             result.writeShort(checksum(buf.toByteBuffer()));
         }
 

File: test/org/traccar/protocol/EelinkProtocolEncoderTest.java
Patch:
@@ -15,7 +15,7 @@ public void testEncode() throws Exception {
 
         verifyCommand(new EelinkProtocolEncoder(false), command, binary("676780000f0000010000000052454c41592c3123"));
 
-        verifyCommand(new EelinkProtocolEncoder(true), command, binary("454c0022b41a0123456789012345676780000f0000010000000052454c41592c3123"));
+        verifyCommand(new EelinkProtocolEncoder(true), command, binary("454c001eb41a0123456789012345676780000f0000010000000052454c41592c3123"));
 
     }
 

File: src/org/traccar/protocol/TmgFrameDecoder.java
Patch:
@@ -47,13 +47,13 @@ && isLetter(buffer.getByte(guessedIndex + 3))) {
             }
         });
 
-        if (beginIndex > 0) {
+        if (beginIndex >= 0) {
 
             buf.readerIndex(beginIndex);
 
             int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\n');
 
-            if (endIndex > 0) {
+            if (endIndex >= 0) {
                 ChannelBuffer frame = buf.readBytes(endIndex - beginIndex);
                 buf.readByte(); // delimiter
                 return frame;

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -14,11 +14,11 @@ public void testDecode() throws Exception {
                 "454C0027E753035254407167747167670100180002035254407167747100200205020500010432000086BD"));
 
         verifyPosition(decoder, binary(
-                "454C0050EAE2035254407167747167671200410021590BD93803026B940D0C3952AD0021000000000501CC0001A53F0170F0AB1305890F11000000000000C2D0001C001600000000000000000000000000000000"));
-
-        verifyNull(decoder, binary(
                 "676780005E5788014C754C754C61743A4E32332E3131313734330A4C6F6E3A453131342E3430393233380A436F757273653A302E30300A53706565643A302E31374B4D2F480A446174652054696D653A323031352D30392D31332032303A32313A3230"));
 
+        verifyPosition(decoder, binary(
+                "454C0050EAE2035254407167747167671200410021590BD93803026B940D0C3952AD0021000000000501CC0001A53F0170F0AB1305890F11000000000000C2D0001C001600000000000000000000000000000000"));
+
         verifyNull(decoder, binary(
                 "676701000c007b03525440717505180104"));
 

File: test/org/traccar/protocol/EelinkProtocolEncoderTest.java
Patch:
@@ -9,13 +9,13 @@ public class EelinkProtocolEncoderTest extends ProtocolTest {
     @Test
     public void testEncode() throws Exception {
 
-        EelinkProtocolEncoder encoder = new EelinkProtocolEncoder(false);
-        
         Command command = new Command();
         command.setDeviceId(1);
         command.setType(Command.TYPE_ENGINE_STOP);
 
-        verifyCommand(encoder, command, binary("676780000f0000010000000052454c41592c3123"));
+        verifyCommand(new EelinkProtocolEncoder(false), command, binary("676780000f0000010000000052454c41592c3123"));
+
+        verifyCommand(new EelinkProtocolEncoder(true), command, binary("454c0022b41a0123456789012345676780000f0000010000000052454c41592c3123"));
 
     }
 

File: src/org/traccar/database/DataManager.java
Patch:
@@ -307,7 +307,7 @@ public User login(String email, String password) throws SQLException {
                 .executeQuerySingle(User.class);
         LdapProvider ldapProvider = Context.getLdapProvider();
         if (user != null) {
-            if (ldapProvider != null && ldapProvider.login(user.getLogin(), password)
+            if (ldapProvider != null && user.getLogin() != null && ldapProvider.login(user.getLogin(), password)
                     || !forceLdap && user.isPasswordValid(password)) {
                 return user;
             }

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -255,7 +255,8 @@ public void checkUserUpdate(long userId, User before, User after) throws Securit
         }
         if (before.getReadonly() != after.getReadonly()
                 || before.getDeviceReadonly() != after.getDeviceReadonly()
-                || before.getDisabled() != after.getDisabled()) {
+                || before.getDisabled() != after.getDisabled()
+                || before.getLimitCommands() != after.getLimitCommands()) {
             if (userId == after.getId()) {
                 checkAdmin(userId);
             }

File: src/org/traccar/database/DataManager.java
Patch:
@@ -307,7 +307,7 @@ public User login(String email, String password) throws SQLException {
                 .executeQuerySingle(User.class);
         LdapProvider ldapProvider = Context.getLdapProvider();
         if (user != null) {
-            if (ldapProvider != null && ldapProvider.login(user.getLogin(), password)
+            if (ldapProvider != null && user.getLogin() != null && ldapProvider.login(user.getLogin(), password)
                     || !forceLdap && user.isPasswordValid(password)) {
                 return user;
             }

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -255,7 +255,8 @@ public void checkUserUpdate(long userId, User before, User after) throws Securit
         }
         if (before.getReadonly() != after.getReadonly()
                 || before.getDeviceReadonly() != after.getDeviceReadonly()
-                || before.getDisabled() != after.getDisabled()) {
+                || before.getDisabled() != after.getDisabled()
+                || before.getLimitCommands() != after.getLimitCommands()) {
             if (userId == after.getId()) {
                 checkAdmin(userId);
             }

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -123,7 +123,7 @@ private void decodeState(Position position, Parser parser) {
 
         position.setAltitude(parser.nextDouble(0));
 
-        position.set(Position.KEY_BATTERY, parser.nextInt(0));
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
     }
 
     @Override

File: src/org/traccar/protocol/Jt600FrameDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2016 Anton Tananaev (anton@traccar.org)
+ * Copyright 2012 - 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ protected Object decode(
         if (type == '$') {
             boolean longFormat = buf.getUnsignedByte(buf.readerIndex() + 1) == 0x75;
             int length = buf.getUnsignedShort(buf.readerIndex() + (longFormat ? 8 : 7)) + 10;
-            if (length >= buf.readableBytes()) {
+            if (length <= buf.readableBytes()) {
                 return buf.readBytes(length);
             }
         } else if (type == '(') {

File: src/org/traccar/protocol/Tk103Protocol.java
Patch:
@@ -22,7 +22,6 @@
 import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 import org.traccar.model.Command;
 
@@ -56,7 +55,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ')'));
+                pipeline.addLast("frameDecoder", new Tk103FrameDecoder());
                 pipeline.addLast("stringDecoder", new StringDecoder());
                 pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectEncoder", new Tk103ProtocolEncoder());

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -353,7 +353,7 @@ protected Object decode(
             sentence = sentence.substring(beginIndex + 1);
         }
 
-        if (channel != null && sentence.length() >= 16) {
+        if (channel != null) {
             String id = sentence.substring(0, 12);
             String type = sentence.substring(12, 16);
             if (type.equals("BP00")) {

File: test/org/traccar/BaseTest.java
Patch:
@@ -40,7 +40,7 @@ public boolean isLatestPosition(Position position) {
             @Override
             public boolean lookupAttributeBoolean(
                     long deviceId, String attributeName, boolean defaultValue, boolean lookupConfig) {
-                return (deviceId == 2 && attributeName == "tk103.alternative" && lookupConfig) ? true : defaultValue;
+                return defaultValue;
             }
 
             @Override

File: test/org/traccar/FilterHandlerTest.java
Patch:
@@ -48,7 +48,7 @@ public boolean isLatestPosition(Position position) {
             @Override
             public boolean lookupAttributeBoolean(
                     long deviceId, String attributeName, boolean defaultValue, boolean lookupConfig) {
-                return (deviceId == 2 && attributeName == "tk103.alternative" && lookupConfig) ? true : defaultValue;
+                return defaultValue;
             }
 
             @Override

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -159,7 +159,6 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, text(
                 "(094050000111BP05000094050000111150808A3804.2418N04616.7468E000.0201447133.3501000011L0028019DT000)"));
 
-        //T580W
         verifyPosition(decoder, text(
                 "(864555555555555,DW3B,131117,A,5544.02870N,01315.08194E,1.597,223707,291.65,-0.10,4)"));
 

File: test/org/traccar/BaseTest.java
Patch:
@@ -40,7 +40,7 @@ public boolean isLatestPosition(Position position) {
             @Override
             public boolean lookupAttributeBoolean(
                     long deviceId, String attributeName, boolean defaultValue, boolean lookupConfig) {
-                return defaultValue;
+                return (deviceId == 2 && attributeName == "tk103.alternative" && lookupConfig) ? true : defaultValue;
             }
 
             @Override

File: test/org/traccar/FilterHandlerTest.java
Patch:
@@ -48,7 +48,7 @@ public boolean isLatestPosition(Position position) {
             @Override
             public boolean lookupAttributeBoolean(
                     long deviceId, String attributeName, boolean defaultValue, boolean lookupConfig) {
-                return defaultValue;
+                return (deviceId == 2 && attributeName == "tk103.alternative" && lookupConfig) ? true : defaultValue;
             }
 
             @Override

File: src/org/traccar/notification/NotificationFormatter.java
Patch:
@@ -39,7 +39,7 @@ public final class NotificationFormatter {
     private NotificationFormatter() {
     }
 
-    public static VelocityContext prepareContext(Long userId, Event event, Position position) {
+    public static VelocityContext prepareContext(long userId, Event event, Position position) {
 
         User user = Context.getPermissionsManager().getUser(userId);
         Device device = Context.getIdentityManager().getById(event.getDeviceId());

File: src/org/traccar/protocol/Ivt401ProtocolDecoder.java
Patch:
@@ -38,8 +38,8 @@ public Ivt401ProtocolDecoder(Ivt401Protocol protocol) {
             .number("(d+),")                     // imei
             .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .number("(dd)(dd)(dd),")             // time (hhmmss)
-            .number("([-+]d+.d+),")              // longitude
             .number("([-+]d+.d+),")              // latitude
+            .number("([-+]d+.d+),")              // longitude
             .number("(d+),")                     // speed
             .number("(d+),")                     // course
             .number("(-?d+.?d*),")               // altitude
@@ -74,8 +74,8 @@ protected Object decode(
 
         position.setTime(parser.nextDateTime(Parser.DateTimeFormat.DMY_HMS));
 
-        position.setLongitude(parser.nextDouble());
         position.setLatitude(parser.nextDouble());
+        position.setLongitude(parser.nextDouble());
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextInt()));
         position.setCourse(parser.nextInt());
         position.setAltitude(parser.nextDouble());

File: src/org/traccar/protocol/Ivt401ProtocolDecoder.java
Patch:
@@ -26,9 +26,9 @@
 import java.net.SocketAddress;
 import java.util.regex.Pattern;
 
-public class Avt401ProtocolDecoder extends BaseProtocolDecoder {
+public class Ivt401ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Avt401ProtocolDecoder(Avt401Protocol protocol) {
+    public Ivt401ProtocolDecoder(Ivt401Protocol protocol) {
         super(protocol);
     }
 

File: test/org/traccar/protocol/Ivt401ProtocolDecoderTest.java
Patch:
@@ -3,12 +3,12 @@
 import org.junit.Test;
 import org.traccar.ProtocolTest;
 
-public class Avt401ProtocolDecoderTest extends ProtocolTest {
+public class Ivt401ProtocolDecoderTest extends ProtocolTest {
 
     @Test
     public void testDecode() throws Exception {
 
-        Avt401ProtocolDecoder decoder = new Avt401ProtocolDecoder(new Avt401Protocol());
+        Ivt401ProtocolDecoder decoder = new Ivt401ProtocolDecoder(new Ivt401Protocol());
 
         verifyPosition(decoder, text(
                 "(TLN,356917050291991,090315,133525,+12.990582,+77.589080,0,0,944,13,1,5,000,00,0.00,10.88,6.31,29.55,0.00,0,0.99,66,0,0,88,95)"));

File: src/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -216,7 +216,7 @@ public Gl200TextProtocolDecoder(Gl200Protocol protocol) {
             .number("(d{1,7}.d)?,")              // odometer
             .number("(d{5}:dd:dd)?,")            // hour meter
             .number("(x+)?,")                    // adc 1
-            .number("(x+)?,")                    // adc 2
+            .number("(x+)?,").optional()         // adc 2
             .number("(d{1,3})?,")                // battery
             .number("(?:(xx)(xx)(xx))?,")        // device status
             .expression("(.*)")                  // additional data

File: test/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200TextProtocolDecoder decoder = new Gl200TextProtocolDecoder(new Gl200Protocol());
 
+        verifyPositions(decoder, buffer(
+                "+RESP:GTERI,380603,869606020025833,gv65,00000002,12003,10,1,1,0.0,172,24.6,-81.931875,26.577439,20171002045352,0310,0260,72BD,8E5B,00,1052.1,01383:52:12,0,100,210700,2,1,28FF4560A3150483,1,05B0,20171002045402,9548$"));
+
         verifyAttributes(decoder, buffer(
                 "+RESP:GTINF,04040E,861074023747143,gv200,41,8959301000648637556f,24,0,1,0,1,4.4,0,1,0,0,20170912221854,0,00,01,-0500,1,20170912193448,1D5B$"));
 

File: src/org/traccar/protocol/DwayProtocolDecoder.java
Patch:
@@ -59,9 +59,9 @@ protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
         String sentence = (String) msg;
-        if (sentence.startsWith(">H")) {
+        if (sentence.equals("AA55,HB")) {
             if (channel != null) {
-                channel.write(">ALIVE\r\n");
+                channel.write("55AA,HB,OK\r\n");
             }
             return null;
         }

File: test/org/traccar/protocol/DwayProtocolDecoderTest.java
Patch:
@@ -23,7 +23,7 @@ public void testDecode() throws Exception {
                 "AA55,1,123456,1,140101,101132,22.5500,113.6770,75,70.5,320,1100,0011,1110,3950,33000,24000,12345678"));
 
         verifyNull(decoder, text(
-                ">H12345678"));
+                "AA55,HB"));
 
     }
 

File: src/org/traccar/database/StatisticsManager.java
Patch:
@@ -27,12 +27,13 @@
 import java.util.Date;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.concurrent.atomic.AtomicInteger;
 
 public class StatisticsManager {
 
     private static final int SPLIT_MODE = Calendar.DAY_OF_MONTH;
 
-    private int lastUpdate = Calendar.getInstance().get(SPLIT_MODE);
+    private AtomicInteger lastUpdate = new AtomicInteger(Calendar.getInstance().get(SPLIT_MODE));
 
     private Set<Long> users = new HashSet<>();
     private Set<Long> devices = new HashSet<>();
@@ -47,7 +48,7 @@ public class StatisticsManager {
 
     private void checkSplit() {
         int currentUpdate = Calendar.getInstance().get(SPLIT_MODE);
-        if (lastUpdate != currentUpdate) {
+        if (lastUpdate.getAndSet(currentUpdate) != currentUpdate) {
             Statistics statistics = new Statistics();
             statistics.setCaptureTime(new Date());
             statistics.setActiveUsers(users.size());
@@ -96,7 +97,6 @@ private void checkSplit() {
             smsSent = 0;
             geocoderRequests = 0;
             geolocationRequests = 0;
-            lastUpdate = currentUpdate;
         }
     }
 

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -131,7 +131,7 @@ public TotemProtocolDecoder(TotemProtocol protocol) {
     private static final Pattern PATTERN4 = new PatternBuilder()
             .text("$$")                          // header
             .number("dddd")                      // length
-            .text("AA")                          // type
+            .expression("A[ABC]")                // type
             .number("(d+)|")                     // imei
             .number("(x{8})")                    // status
             .number("(dd)(dd)(dd)")              // date (yymmdd)
@@ -313,7 +313,7 @@ protected Object decode(
 
         String sentence = (String) msg;
         Pattern pattern = PATTERN3;
-        if (sentence.indexOf("AA") == 6) {
+        if (sentence.indexOf("A") == 6) {
             pattern = PATTERN4;
         } else if (sentence.contains("$GPRMC")) {
             pattern = PATTERN1;

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         MeitrackProtocolDecoder decoder = new MeitrackProtocolDecoder(new MeitrackProtocol());
 
+        verifyPosition(decoder, buffer(
+                "$$V177,863835026871173,AAA,35,34.516428,10.470160,170915154043,A,9,12,68,74,0.9,9,1988259,525882,605|2|008C|0007B5A6,0200,0003|0000|0000|01A6|0571,00000001,,3,0000,06FB2E,360,511*74"));
+
         verifyPosition(decoder, buffer(
                 "$$V177,863835026871173,AAA,35,34.516428,10.470160,170915154043,A,9,12,68,74,0.9,9,1988259,525882,605|2|008C|0007B5A6,0200,0003|0000|0000|01A6|0571,00000001,,3,0000,010A92,360,511*74"));
 

File: src/org/traccar/model/Command.java
Patch:
@@ -79,7 +79,7 @@ public class Command extends Message implements Cloneable {
 
     @Override
     public Command clone() throws CloneNotSupportedException {
-      return (Command) super.clone();
+        return (Command) super.clone();
     }
 
     private boolean textChannel;

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public void testDecode() throws Exception {
 
         H02ProtocolDecoder decoder = new H02ProtocolDecoder(new H02Protocol());
 
-        verifyNull(decoder, buffer(
+        verifyPosition(decoder, buffer(
                 "*HQ,353505221264507,VI1,075146,0,5238.25900,N,00507.33429,E,0.54,0,250917,FFFFFFFF,cc,28,  db,d75b#"));
 
         verifyNull(decoder, buffer(

File: src/org/traccar/model/Position.java
Patch:
@@ -115,7 +115,7 @@ public class Position extends Message {
     public static final String ALARM_ACCIDENT = "accident";
     public static final String ALARM_TOW = "tow";
     public static final String ALARM_ACCELERATION = "hardAcceleration";
-    public static final String ALARM_BREAKING = "hardBreaking";
+    public static final String ALARM_BRAKING = "hardBraking";
     public static final String ALARM_CORNERING = "hardCornering";
     public static final String ALARM_FATIGUE_DRIVING = "fatigueDriving";
     public static final String ALARM_POWER_CUT = "powerCut";

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -568,7 +568,7 @@ private void decodeF(Position position, ChannelBuffer buf, int selector) {
             position.set(Position.KEY_OBD_SPEED, buf.readUnsignedByte());
             position.set("speedMax", buf.readUnsignedByte());
             position.set("speedMin", buf.readUnsignedByte());
-            position.set("hardBreaking", buf.readUnsignedByte());
+            position.set("hardBraking", buf.readUnsignedByte());
         }
 
         if ((selector & 0x0200) != 0) {

File: src/org/traccar/protocol/AquilaProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ public AquilaProtocolDecoder(AquilaProtocol protocol) {
             .number("[01],")                     // corner packet
             .number("(?:d+,){6}")                // reserved
             .number("[01],")                     // hard acceleration
-            .number("[01],")                     // hard breaking
+            .number("[01],")                     // hard braking
             .number("[01],[01],[01],[01],")      // course bits
             .number("(d+),")                     // external voltage
             .number("(d+),")                     // internal voltage
@@ -115,7 +115,7 @@ public AquilaProtocolDecoder(AquilaProtocol protocol) {
             .number("[01],")                     // do 1
             .number("[01],")                     // reserved
             .number("[01],")                     // hard acceleration
-            .number("[01],")                     // hard breaking
+            .number("[01],")                     // hard braking
             .number("(?:[01],){4}")              // reserved
             .number("(d+),")                     // external voltage
             .number("(d+),")                     // internal voltage

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -67,7 +67,7 @@ private String decodeAlarm(String value) {
             case "HDA":
                 return Position.ALARM_ACCELERATION;
             case "HDB":
-                return Position.ALARM_BREAKING;
+                return Position.ALARM_BRAKING;
             case "FDA":
                 return Position.ALARM_FATIGUE_DRIVING;
             case "SKA":

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -147,7 +147,7 @@ private String decodeAlert(int value) {
             case 46:
                 return Position.ALARM_ACCELERATION;
             case 47:
-                return Position.ALARM_BREAKING;
+                return Position.ALARM_BRAKING;
             case 48:
                 return Position.ALARM_ACCIDENT;
             case 50:

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -124,7 +124,7 @@ protected Object decode(
                     position.set(Position.KEY_ALARM, Position.ALARM_ACCELERATION);
                     break;
                 case 23:
-                    position.set(Position.KEY_ALARM, Position.ALARM_BREAKING);
+                    position.set(Position.KEY_ALARM, Position.ALARM_BRAKING);
                     break;
                 case 24:
                     position.set(Position.KEY_ALARM, Position.ALARM_ACCIDENT);

File: src/org/traccar/protocol/TzoneProtocolDecoder.java
Patch:
@@ -43,7 +43,7 @@ private String decodeAlarm(Short value) {
             case 0x11:
                 return Position.ALARM_OVERSPEED;
             case 0x14:
-                return Position.ALARM_BREAKING;
+                return Position.ALARM_BRAKING;
             case 0x15:
                 return Position.ALARM_ACCELERATION;
             case 0x30:

File: src/org/traccar/protocol/Vt200ProtocolDecoder.java
Patch:
@@ -124,7 +124,7 @@ protected Object decode(
             position.set("maxRpm", buf.readUnsignedShort());
             position.set("maxTemp", buf.readUnsignedByte() - 40);
             position.set("hardAccelerationCount", buf.readUnsignedByte());
-            position.set("hardBreakingCount", buf.readUnsignedByte());
+            position.set("hardBrakingCount", buf.readUnsignedByte());
 
             for (String speedType : Arrays.asList("over", "high", "normal", "low")) {
                 position.set(speedType + "SpeedTime", buf.readUnsignedShort());

File: src/org/traccar/protocol/VtfmsProtocolDecoder.java
Patch:
@@ -84,7 +84,7 @@ private String decodeAlarm(int value) {
             case 15:
                 return Position.ALARM_POWER_RESTORED;
             case 32:
-                return Position.ALARM_BREAKING;
+                return Position.ALARM_BRAKING;
             case 33:
                 return Position.ALARM_ACCELERATION;
             default:

File: test/org/traccar/protocol/AplicomProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(new AplicomProtocol());
 
+        verifyAttributes(decoder, binary(
+                "44c30144f667c4316500e903ffdfbc00f059aebeb659aebeb302e3f5860065fe32120000ae0000000e47000000000000000000000000000127cd0000014c00000000000000ff010a002900000000000000014542016d0001010090070e140144f667c4316559ae620402e3f7f300660714c0010d15ff0f3332373937313100000000000000000000002a01010737341d331fffcf0103020b8601060c0001a5860001a58600000000010b1001ca01ca7d007d007c7cffffffffffff010a240000ffff0000000100010001ffff0000ffffffffffffffffffffffffffff00000002ffff010c06fec6febffeec"));
+
         verifyAttributes(decoder, binary(
                 "45c20144f667c06ff9005d0161ef17000104596da2dc4b10c0c01d99020d6c04004cba7a010d44463030303235333731363238303030000000000000000000000000000000000000000000000000000001010d44463030303235333731363238303030000000000000031c"));
 

File: src/org/traccar/database/CommandsManager.java
Patch:
@@ -39,7 +39,7 @@ public CommandsManager(DataManager dataManager) {
     }
 
     public boolean checkDeviceCommand(long deviceId, long commandId) {
-        return getAllDeviceItems(deviceId).contains(commandId);
+        return !getAllDeviceItems(deviceId).contains(commandId);
     }
 
     public void sendCommand(Command command) throws Exception {

File: src/org/traccar/protocol/Gl200TextProtocolDecoder.java
Patch:
@@ -65,7 +65,7 @@ public Gl200TextProtocolDecoder(Gl200Protocol protocol) {
             .expression("(?:[0-9A-Z]{17},)?")    // vin
             .expression("(?:[^,]+)?,")           // device name
             .number("(xx),")                     // state
-            .expression("(?:[0-9F]{20})?,")      // iccid
+            .expression("(?:[0-9Ff]{20})?,")     // iccid
             .number("(d{1,2}),")                 // rssi
             .number("d{1,2},")
             .expression("[01],")                 // external power

File: test/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200TextProtocolDecoder decoder = new Gl200TextProtocolDecoder(new Gl200Protocol());
 
+        verifyAttributes(decoder, buffer(
+                "+RESP:GTINF,04040E,861074023747143,gv200,41,8959301000648637556f,24,0,1,0,1,4.4,0,1,0,0,20170912221854,0,00,01,-0500,1,20170912193448,1D5B$"));
+
         verifyAttributes(decoder, buffer(
                 "+RESP:GTINF,210102,354524044950583,,42,89011702272048900184,11,99,0,,,4.08,0,1,1,0,0,20170831170831,87,0.00,,,,20170831171010,0064$"));
 

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -152,7 +152,6 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             .number("(d+),")                     // imei
             .groupBegin()
             .text("VP1,")
-            .expression("[ABV],")
             .or()
             .groupBegin()
             .text("V1,")
@@ -164,7 +163,7 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             .groupEnd()
             .number("(?:(dd)(dd)(dd))?,")        // time (hhmmss)
             .groupEnd()
-            .expression("([AV])?,")              // validity
+            .expression("([ABV])?,")             // validity
             .groupBegin()
             .number("-(d+)-(d+.d+),")            // latitude
             .or()

File: src/org/traccar/model/ExtendedModel.java
Patch:
@@ -100,7 +100,7 @@ public double getDouble(String key) {
 
     public boolean getBoolean(String key) {
         if (attributes.containsKey(key)) {
-            return Boolean.parseBoolean(attributes.get(key).toString());
+            return (Boolean) attributes.get(key);
         } else {
             return false;
         }

File: src/org/traccar/notification/NotificationMail.java
Patch:
@@ -43,7 +43,7 @@ private static Properties getProperties(PropertiesProvider provider) {
         if (host != null) {
             properties.put("mail.transport.protocol", provider.getString("mail.transport.protocol", "smtp"));
             properties.put("mail.smtp.host", host);
-            properties.put("mail.smtp.port", provider.getString("mail.smtp.port", "25"));
+            properties.put("mail.smtp.port", String.valueOf(provider.getInteger("mail.smtp.port", 25)));
 
             String starttlsEnable = provider.getString("mail.smtp.starttls.enable");
             if (starttlsEnable != null) {

File: test/org/traccar/protocol/OsmAndProtocolDecoderTest.java
Patch:
@@ -37,6 +37,9 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, request(
                 "/?id=123456&timestamp=1377177267&location=60.0,30.0"));
 
+        verifyPosition(decoder, request(
+                "/?id=123456789012345&timestamp=1504763810&lat=40.7232948571&lon=-74.0061408571&bearing=7.19889788244&speed=40&ignition=true&rpm=933&fuel=24"));
+
     }
 
 }

File: src/org/traccar/model/ExtendedModel.java
Patch:
@@ -100,7 +100,7 @@ public double getDouble(String key) {
 
     public boolean getBoolean(String key) {
         if (attributes.containsKey(key)) {
-            return Boolean.parseBoolean(attributes.get(key).toString());
+            return (Boolean) attributes.get(key);
         } else {
             return false;
         }

File: src/org/traccar/notification/NotificationMail.java
Patch:
@@ -43,7 +43,7 @@ private static Properties getProperties(PropertiesProvider provider) {
         if (host != null) {
             properties.put("mail.transport.protocol", provider.getString("mail.transport.protocol", "smtp"));
             properties.put("mail.smtp.host", host);
-            properties.put("mail.smtp.port", provider.getString("mail.smtp.port", "25"));
+            properties.put("mail.smtp.port", String.valueOf(provider.getInteger("mail.smtp.port", 25)));
 
             String starttlsEnable = provider.getString("mail.smtp.starttls.enable");
             if (starttlsEnable != null) {

File: test/org/traccar/protocol/OsmAndProtocolDecoderTest.java
Patch:
@@ -37,6 +37,9 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, request(
                 "/?id=123456&timestamp=1377177267&location=60.0,30.0"));
 
+        verifyPosition(decoder, request(
+                "/?id=123456789012345&timestamp=1504763810&lat=40.7232948571&lon=-74.0061408571&bearing=7.19889788244&speed=40&ignition=true&rpm=933&fuel=24"));
+
     }
 
 }

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         MiniFinderProtocolDecoder decoder = new MiniFinderProtocolDecoder(new MiniFinderProtocol());
 
+        verifyNull(decoder, text(
+                "!1,867273023933661,V07S.5701.1621,100"));
+
         verifyNull(decoder, text(
                 "!1,123456789012345"));
 

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -456,7 +456,6 @@ private Object decodeBasicOther(Channel channel, ChannelBuffer buf,
 
             if (hasLbs(type)) {
                 decodeLbs(position, buf, hasStatus(type));
-                buf.skipBytes(-1);
             }
 
             if (hasStatus(type)) {

File: src/org/traccar/protocol/GenxProtocol.java
Patch:
@@ -17,9 +17,9 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
+import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;
@@ -35,7 +35,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\r'));
+                pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
                 pipeline.addLast("stringDecoder", new StringDecoder());
                 pipeline.addLast("objectDecoder", new GenxProtocolDecoder(GenxProtocol.this));
             }

File: src/org/traccar/protocol/GenxProtocolDecoder.java
Patch:
@@ -69,7 +69,7 @@ protected Object decode(
             }
         }
 
-        return position;
+        return position.getDeviceId() != 0 ? position : null;
     }
 
 }

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -155,9 +155,7 @@ private boolean decodeGps(Position position, ChannelBuffer buf, boolean hasLengt
             return false;
         }
 
-        int length = buf.readUnsignedByte();
-        position.set(Position.KEY_SATELLITES, BitUtil.to(length, 4));
-        length = BitUtil.from(length, 4);
+        position.set(Position.KEY_SATELLITES, BitUtil.to(buf.readUnsignedByte(), 4));
 
         double latitude = buf.readUnsignedInt() / 60.0 / 30000.0;
         double longitude = buf.readUnsignedInt() / 60.0 / 30000.0;

File: src/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -95,7 +95,7 @@ private void decodeParameter(Position position, int id, ChannelBuffer buf, int l
                 position.set("di" + (id - 1), readValue(buf, length, false));
                 break;
             case 5:
-                position.set(Position.KEY_IGNITION, readValue(buf, length, false));
+                position.set(Position.KEY_IGNITION, readValue(buf, length, false) == 1);
                 break;
             case 74:
                 position.set(Position.PREFIX_TEMP + 3, readValue(buf, length, true) * 0.1);

File: src/org/traccar/web/WebServer.java
Patch:
@@ -29,7 +29,6 @@
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.servlet.ServletContainer;
 import org.traccar.Config;
-import org.traccar.Context;
 import org.traccar.api.AsyncSocketServlet;
 import org.traccar.api.CorsResponseFilter;
 import org.traccar.api.ObjectMapperProvider;

File: test/org/traccar/protocol/Gl200TextProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         Gl200TextProtocolDecoder decoder = new Gl200TextProtocolDecoder(new Gl200Protocol());
 
-        verifyNull(decoder, buffer(
+        verifyAttributes(decoder, buffer(
                 "+RESP:GTINF,280500,A1000043D20139,GL300VC,41,,31,0,0,,,3.87,0,1,1,,,20170802150751,70,,48.0,,,20170802112145,03AC$"));
 
         verifyAttributes(decoder, buffer(

File: src/org/traccar/database/DataManager.java
Patch:
@@ -424,7 +424,7 @@ private static String makeNameId(Class<?> clazz) {
         return Introspector.decapitalize(name) + (!name.contains("Id") ? "Id" : "");
     }
 
-    private Collection<Permission> getPermissions(Class<? extends BaseModel> owner, Class<? extends BaseModel> property)
+    public Collection<Permission> getPermissions(Class<? extends BaseModel> owner, Class<? extends BaseModel> property)
             throws SQLException, ClassNotFoundException {
         return QueryBuilder.create(dataSource, getQuery(ACTION_SELECT_ALL, owner, property))
                 .executePermissionsQuery();

File: src/org/traccar/notification/NotificationMail.java
Patch:
@@ -68,8 +68,6 @@ private static Properties getProperties(PropertiesProvider provider) {
                 properties.put("mail.smtp.ssl.protocols", sslProtocols);
             }
 
-            properties.put("mail.smtp.auth", provider.getString("mail.smtp.auth"));
-
             String username = provider.getString("mail.smtp.username");
             if (username != null) {
                 properties.put("mail.smtp.username", username);

File: src/org/traccar/protocol/CradlepointProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Anton Tananaev (anton@traccar.org)
+ * Copyright 2016 - 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@ public CradlepointProtocolDecoder(CradlepointProtocol protocol) {
             .expression("([^,]+),")              // carrier
             .expression("([^,]+)?,")             // serdis
             .number("(-?d+),")                   // rsrp
-            .number("(-?d+),")                   // dbm
+            .number("(-?d+),")                   // rssi
             .number("(-?d+),")                   // rsrq
             .expression("([^,]+)?,")             // ecio
             .expression("([^,]+)?")              // wan ip
@@ -75,7 +75,7 @@ protected Object decode(
         position.setSpeed(parser.nextDouble(0));
         position.setCourse(parser.nextDouble(0));
 
-        parser.skip(4);
+        parser.skip(3);
 
         position.set(Position.KEY_RSSI, parser.nextDouble());
 

File: src/org/traccar/database/DataManager.java
Patch:
@@ -146,7 +146,7 @@ public static String constructObjectQuery(String action, Class<?> clazz, boolean
                         skip = !method.isAnnotationPresent(QueryExtended.class);
                     } else {
                         skip = method.isAnnotationPresent(QueryIgnore.class)
-                                || method.isAnnotationPresent(QueryExtended.class);
+                                || method.isAnnotationPresent(QueryExtended.class) && !action.equals(ACTION_INSERT);
                     }
                     if (!skip && method.getName().startsWith("get") && method.getParameterTypes().length == 0) {
                         String name = Introspector.decapitalize(method.getName().substring(3));

File: test/org/traccar/database/DataManagerTest.java
Patch:
@@ -26,7 +26,6 @@ public void constructObjectQuery() {
         Assert.assertFalse(insertDevice.contains("class"));
         Assert.assertFalse(insertDevice.contains("id"));
         Assert.assertFalse(insertDevice.contains("status"));
-        Assert.assertFalse(insertDevice.contains("lastUpdate"));
         Assert.assertFalse(insertDevice.contains("geofenceIds"));
 
         String updateDeviceStatus = DataManager.constructObjectQuery("update", Device.class, true);

File: src/org/traccar/database/DriversManager.java
Patch:
@@ -23,7 +23,7 @@
 
 public class DriversManager extends ExtendedObjectManager<Driver> {
 
-    private Map<String, Long> driversByUniqueId;
+    private Map<String, Driver> driversByUniqueId;
 
     public DriversManager(DataManager dataManager) {
         super(dataManager, Driver.class);
@@ -36,7 +36,7 @@ private void putUniqueDriverId(Driver driver) {
         if (driversByUniqueId == null) {
             driversByUniqueId = new ConcurrentHashMap<>(getAllItems().size());
         }
-        driversByUniqueId.put(driver.getUniqueId(), driver.getId());
+        driversByUniqueId.put(driver.getUniqueId(), driver);
     }
 
     @Override
@@ -68,6 +68,6 @@ protected void removeCachedItem(long driverId) {
     }
 
     public Driver getDriverByUniqueId(String uniqueId) {
-        return getById(driversByUniqueId.get(uniqueId));
+        return driversByUniqueId.get(uniqueId);
     }
 }

File: src/org/traccar/database/DriversManager.java
Patch:
@@ -23,7 +23,7 @@
 
 public class DriversManager extends ExtendedObjectManager<Driver> {
 
-    private Map<String, Long> driversByUniqueId;
+    private Map<String, Driver> driversByUniqueId;
 
     public DriversManager(DataManager dataManager) {
         super(dataManager, Driver.class);
@@ -36,7 +36,7 @@ private void putUniqueDriverId(Driver driver) {
         if (driversByUniqueId == null) {
             driversByUniqueId = new ConcurrentHashMap<>(getAllItems().size());
         }
-        driversByUniqueId.put(driver.getUniqueId(), driver.getId());
+        driversByUniqueId.put(driver.getUniqueId(), driver);
     }
 
     @Override
@@ -68,6 +68,6 @@ protected void removeCachedItem(long driverId) {
     }
 
     public Driver getDriverByUniqueId(String uniqueId) {
-        return getById(driversByUniqueId.get(uniqueId));
+        return driversByUniqueId.get(uniqueId);
     }
 }

File: src/org/traccar/Config.java
Patch:
@@ -97,7 +97,7 @@ public static String getEnvironmentVariableName(String key) {
     }
 
     public void setString(String key, String value) {
-        properties.putIfAbsent(key, value);
+        properties.put(key, value);
     }
 
 }

File: src/org/traccar/database/QueryExtended.java
Patch:
@@ -23,5 +23,5 @@
 
 @Target(ElementType.METHOD)
 @Retention(RetentionPolicy.RUNTIME)
-public @interface QueryAdditional {
+public @interface QueryExtended {
 }

File: src/org/traccar/model/Device.java
Patch:
@@ -18,7 +18,7 @@
 import java.util.Date;
 import java.util.List;
 
-import org.traccar.database.QueryAdditional;
+import org.traccar.database.QueryExtended;
 import org.traccar.database.QueryIgnore;
 
 public class Device extends ExtendedModel {
@@ -60,7 +60,7 @@ public void setStatus(String status) {
 
     private Date lastUpdate;
 
-    @QueryAdditional
+    @QueryExtended
     public Date getLastUpdate() {
         if (lastUpdate != null) {
             return new Date(lastUpdate.getTime());

File: src/org/traccar/model/User.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
 
-import org.traccar.database.QueryAdditional;
+import org.traccar.database.QueryExtended;
 import org.traccar.database.QueryIgnore;
 import org.traccar.helper.Hashing;
 
@@ -247,7 +247,7 @@ public void setPassword(String password) {
     private String hashedPassword;
 
     @JsonIgnore
-    @QueryAdditional
+    @QueryExtended
     public String getHashedPassword() {
         return hashedPassword;
     }
@@ -259,7 +259,7 @@ public void setHashedPassword(String hashedPassword) {
     private String salt;
 
     @JsonIgnore
-    @QueryAdditional
+    @QueryExtended
     public String getSalt() {
         return salt;
     }

File: src/org/traccar/database/DriversManager.java
Patch:
@@ -27,6 +27,9 @@ public class DriversManager extends ExtendedObjectManager<Driver> {
 
     public DriversManager(DataManager dataManager) {
         super(dataManager, Driver.class);
+        if (driversByUniqueId == null) {
+            driversByUniqueId = new ConcurrentHashMap<>();
+        }
     }
 
     private void putUniqueDriverId(Driver driver) {

File: src/org/traccar/database/UsersManager.java
Patch:
@@ -29,6 +29,9 @@ public class UsersManager extends SimpleObjectManager<User> {
 
     public UsersManager(DataManager dataManager) {
         super(dataManager, User.class);
+        if (usersTokens == null) {
+            usersTokens = new ConcurrentHashMap<>();
+        }
     }
 
     private void putToken(User user) {

File: src/org/traccar/database/GroupsManager.java
Patch:
@@ -23,7 +23,6 @@
 
 import org.traccar.Context;
 import org.traccar.helper.Log;
-import org.traccar.model.BaseModel;
 import org.traccar.model.Group;
 
 public class GroupsManager extends BaseObjectManager<Group> implements ManagableObjects {
@@ -37,14 +36,14 @@ public GroupsManager(DataManager dataManager) {
                 DeviceManager.DEFAULT_REFRESH_DELAY) * 1000;
     }
 
-    private void checkGroupCycles(BaseModel group) {
+    private void checkGroupCycles(Group group) {
         Set<Long> groups = new HashSet<>();
         while (group != null) {
             if (groups.contains(group.getId())) {
                 throw new IllegalArgumentException("Cycle in group hierarchy");
             }
             groups.add(group.getId());
-            group = getById(((Group) group).getGroupId());
+            group = getById(group.getGroupId());
         }
     }
 

File: src/org/traccar/database/SimpleObjectManager.java
Patch:
@@ -162,7 +162,7 @@ public final <T> Collection<T> getItems(Class<T> clazz, Set<Long> itemIds) {
         return result;
     }
 
-    public Set<Long> getAllItems() {
+    public final Set<Long> getAllItems() {
         return items.keySet();
     }
 

File: src/org/traccar/database/DriversManager.java
Patch:
@@ -54,7 +54,7 @@ protected void removeCachedItem(long driverId) {
         Driver cachedDriver = (Driver) getById(driverId);
         if (cachedDriver != null) {
             String driverUniqueId = cachedDriver.getUniqueId();
-            removeCachedItem(driverId);
+            super.removeCachedItem(driverId);
             driversByUniqueId.remove(driverUniqueId);
         }
     }

File: src/org/traccar/database/DriversManager.java
Patch:
@@ -16,7 +16,6 @@
  */
 package org.traccar.database;
 
-import java.sql.SQLException;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
 
@@ -32,8 +31,8 @@ public DriversManager(DataManager dataManager) {
     }
 
     @Override
-    public void addItem(BaseModel item) throws SQLException {
-        super.addItem(item);
+    protected void addNewItem(BaseModel item) {
+        super.addNewItem(item);
         driversByUniqueId.put(((Driver) item).getUniqueId(), (Driver) item);
     }
 

File: src/org/traccar/database/DeviceManager.java
Patch:
@@ -306,7 +306,7 @@ private void updateGroupCache(boolean force) throws SQLException {
             }
             for (Long cachedGroupId : groupsById.keySet()) {
                 if (!databaseGroupsIds.contains(cachedGroupId)) {
-                    devicesById.remove(cachedGroupId);
+                    groupsById.remove(cachedGroupId);
                 }
             }
             databaseGroupsIds.clear();

File: src/org/traccar/api/resource/AttributeResource.java
Patch:
@@ -128,7 +128,7 @@ public Response post(@QueryParam("deviceId") long deviceId, Attribute entity) th
     @PUT
     public Response update(Attribute entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("attribute", getUserId(), entity.getId());
+        Context.getPermissionsManager().checkPermission(Context.TYPE_ATTRIBUTE, getUserId(), entity.getId());
         Context.getAttributesManager().updateItem(entity);
         return Response.ok(entity).build();
     }
@@ -137,7 +137,7 @@ public Response update(Attribute entity) throws SQLException {
     @DELETE
     public Response remove(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("attribute", getUserId(), id);
+        Context.getPermissionsManager().checkPermission(Context.TYPE_ATTRIBUTE, getUserId(), id);
         Context.getAttributesManager().removeItem(id);
         return Response.noContent().build();
     }

File: src/org/traccar/api/resource/CalendarResource.java
Patch:
@@ -75,7 +75,7 @@ public Response add(Calendar entity) throws SQLException {
     @PUT
     public Response update(Calendar entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("calendar", getUserId(), entity.getId());
+        Context.getPermissionsManager().checkPermission(Context.TYPE_CALENDAR, getUserId(), entity.getId());
         Context.getCalendarManager().updateItem(entity);
         return Response.ok(entity).build();
     }
@@ -84,7 +84,7 @@ public Response update(Calendar entity) throws SQLException {
     @DELETE
     public Response remove(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("calendar", getUserId(), id);
+        Context.getPermissionsManager().checkPermission(Context.TYPE_CALENDAR, getUserId(), id);
         Context.getCalendarManager().removeItem(id);
         return Response.noContent().build();
     }

File: src/org/traccar/api/resource/DriverResource.java
Patch:
@@ -95,7 +95,7 @@ public Response add(Driver entity) throws SQLException {
     @PUT
     public Response update(Driver entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("driver", getUserId(), entity.getId());
+        Context.getPermissionsManager().checkPermission(Context.TYPE_DRIVER, getUserId(), entity.getId());
         Context.getDriversManager().updateItem(entity);
         return Response.ok(entity).build();
     }
@@ -104,7 +104,7 @@ public Response update(Driver entity) throws SQLException {
     @DELETE
     public Response remove(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("driver", getUserId(), id);
+        Context.getPermissionsManager().checkPermission(Context.TYPE_DRIVER, getUserId(), id);
         Context.getDriversManager().removeItem(id);
         return Response.noContent().build();
     }

File: src/org/traccar/api/resource/EventResource.java
Patch:
@@ -25,7 +25,7 @@ public Event get(@PathParam("id") long id) throws SQLException {
         Event event = Context.getDataManager().getEvent(id);
         Context.getPermissionsManager().checkDevice(getUserId(), event.getDeviceId());
         if (event.getGeofenceId() != 0) {
-            Context.getPermissionsManager().checkPermission("geofence", getUserId(), event.getGeofenceId());
+            Context.getPermissionsManager().checkPermission(Context.TYPE_GEOFENCE, getUserId(), event.getGeofenceId());
         }
         return event;
     }

File: src/org/traccar/api/resource/GeofenceResource.java
Patch:
@@ -94,7 +94,7 @@ public Response add(Geofence entity) throws SQLException {
     @PUT
     public Response update(Geofence entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("geofence", getUserId(), entity.getId());
+        Context.getPermissionsManager().checkPermission(Context.TYPE_GEOFENCE, getUserId(), entity.getId());
         Context.getGeofenceManager().updateItem(entity);
         return Response.ok(entity).build();
     }
@@ -103,7 +103,7 @@ public Response update(Geofence entity) throws SQLException {
     @DELETE
     public Response remove(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
-        Context.getPermissionsManager().checkPermission("geofence", getUserId(), id);
+        Context.getPermissionsManager().checkPermission(Context.TYPE_GEOFENCE, getUserId(), id);
         Context.getGeofenceManager().removeItem(id);
         return Response.noContent().build();
     }

File: src/org/traccar/database/DataManager.java
Patch:
@@ -268,11 +268,11 @@ public void addStatistics(Statistics statistics) throws SQLException {
                 .executeUpdate());
     }
 
-    private String makeName(String object) {
+    public static String makeName(String object) {
         return object.substring(0, 1).toUpperCase() + object.replace("Id", "").substring(1);
     }
 
-    private String makeNameId(String object) {
+    public static String makeNameId(String object) {
         return object.substring(0, 1).toLowerCase() + object.substring(1) + (object.indexOf("Id") == -1 ? "Id" : "");
     }
 

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -333,8 +333,7 @@ public void checkPermission(String object, long userId, long objectId) throws Se
                         return;
                     }
                 }
-                throw new SecurityException(object.substring(0, 1).toUpperCase() + object.substring(1)
-                         + " access denied");
+                throw new SecurityException("Type " + object + " access denied");
             }
         }
     }

File: test/org/traccar/protocol/AplicomProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(new AplicomProtocol());
 
+        verifyAttributes(decoder, binary(
+                "45c20144f667c06ff9005d0161ef17000104596da2dc4b10c0c01d99020d6c04004cba7a010d44463030303235333731363238303030000000000000000000000000000000000000000000000000000001010d44463030303235333731363238303030000000000000031c"));
+
         verifyAttributes(decoder, binary(
                 "45c20144f667c07287008c01ffff6d01000059368963d0340a0616207d7f4b10c0c019e6000039d7000039d71f40ffff5001574442393036363035533132333435363700014142432d33343520202020202000011231303331373139343039303030303031000000000000000000000000000000000000000000000000000001011231303331373139343039303030303031000000000000005a"));
 

File: src/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -106,7 +106,7 @@ private long findDeviceId(SocketAddress remoteAddress, String... uniqueIds) {
     }
 
     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {
-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null
+        if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null
                 || Context.getConfig().getBoolean("decoder.ignoreSessionCache")) {
             long deviceId = findDeviceId(remoteAddress, uniqueIds);
             if (deviceId != 0) {

File: src/org/traccar/protocol/Arnavi4FrameDecoder.java
Patch:
@@ -74,4 +74,4 @@ protected Object decode(
         return null;
     }
 
-}
\ No newline at end of file
+}

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -74,7 +74,7 @@ private void sendResponse(Channel channel, byte version, int index) {
             channel.write(response);
         }
     }
-    
+
     private Position decodePosition(DeviceSession deviceSession, ChannelBuffer buf, int length, Date time) {
 
         final Position position = new Position();

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
+        verifyNull(decoder, text(
+                "(027044702512BP00027044702512HSO01A4)"));
+
         verifyPosition(decoder, text(
                 "(864768011069660,ZC11,250517,V,0000.0000N,00000.0000E,000.0,114725,000.0,0.00,11)"));
 

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -33,8 +33,6 @@
 import static org.traccar.protocol.Arnavi4FrameDecoder.HEADER_START_SIGN;
 import static org.traccar.protocol.Arnavi4FrameDecoder.HEADER_VERSION_1;
 import static org.traccar.protocol.Arnavi4FrameDecoder.HEADER_VERSION_2;
-import static org.traccar.protocol.Arnavi4FrameDecoder.PACKAGE_START_SIGN;
-import static org.traccar.protocol.Arnavi4FrameDecoder.PACKAGE_END_SIGN;
 
 public class Arnavi4ProtocolDecoder extends BaseProtocolDecoder {
 

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -33,8 +33,6 @@
 import static org.traccar.protocol.Arnavi4FrameDecoder.HEADER_START_SIGN;
 import static org.traccar.protocol.Arnavi4FrameDecoder.HEADER_VERSION_1;
 import static org.traccar.protocol.Arnavi4FrameDecoder.HEADER_VERSION_2;
-import static org.traccar.protocol.Arnavi4FrameDecoder.PACKAGE_START_SIGN;
-import static org.traccar.protocol.Arnavi4FrameDecoder.PACKAGE_END_SIGN;
 
 public class Arnavi4ProtocolDecoder extends BaseProtocolDecoder {
 

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -158,6 +158,8 @@ protected Object decode(
 
                         if (recordType == RECORD_DATA) {
                             positions.add(decodePosition(deviceSession, buf, length, time));
+                        } else {
+                            buf.readBytes(length); // Skip other records
                         }
 
                         buf.readUnsignedByte(); // crc

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -79,7 +79,7 @@ private Position decodePosition(DeviceSession deviceSession, ChannelBuffer buf,
                     position.setAltitude(buf.readUnsignedByte() * 10.0);
                     byte satellites = buf.readByte();
                     position.set(Position.KEY_SATELLITES, satellites & 0x0F + (satellites >> 4) & 0x0F); // gps+glonass
-                    position.setSpeed(buf.readByte() * 1.852);
+                    position.setSpeed(buf.readUnsignedByte() * 1.852);
                     break;
 
                 default:

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -78,7 +78,7 @@ private Position decodePosition(DeviceSession deviceSession, ChannelBuffer buf,
                     position.setCourse(buf.readUnsignedByte() * 2.0);
                     position.setAltitude(buf.readUnsignedByte() * 10.0);
                     byte satellites = buf.readByte();
-                    position.set(Position.KEY_SATELLITES, satellites & 0x0F + (satellites >> 4) & 0x0F); // gps + glonass
+                    position.set(Position.KEY_SATELLITES, satellites & 0x0F + (satellites >> 4) & 0x0F); // gps+glonass
                     position.setSpeed(buf.readByte() * 1.852);
                     break;
 

File: src/org/traccar/protocol/Arnavi4ProtocolDecoder.java
Patch:
@@ -78,7 +78,7 @@ private Position decodePosition(DeviceSession deviceSession, ChannelBuffer buf,
                     position.setCourse(buf.readUnsignedByte() * 2.0);
                     position.setAltitude(buf.readUnsignedByte() * 10.0);
                     byte satellites = buf.readByte();
-                    position.set(Position.KEY_SATELLITES, satellites & 0x0F + (satellites >> 4) & 0x0F); // gps + glonass
+                    position.set(Position.KEY_SATELLITES, satellites & 0x0F + (satellites >> 4) & 0x0F); // gps+glonass
                     position.setSpeed(buf.readByte() * 1.852);
                     break;
 

File: src/org/traccar/helper/Checksum.java
Patch:
@@ -243,7 +243,7 @@ public static long luhn(long imei) {
         return (10 - (checksum % 10)) % 10;
     }
 
-    public static int modulo256(byte... bytes) {
+    public static int modulo256(byte[] bytes) {
         int sum = 0;
         for (byte b : bytes) {
             sum = (sum + b) & 0xFF;

File: test/org/traccar/protocol/Arnavi4FrameDecoderTest.java
Patch:
@@ -6,9 +6,6 @@
 
 import java.nio.ByteOrder;
 
-/**
- * Created by Ivan Muratov @binakot on 13.07.2017.
- */
 public class Arnavi4FrameDecoderTest extends ProtocolTest {
 
     @Test

File: src/org/traccar/helper/Checksum.java
Patch:
@@ -243,7 +243,7 @@ public static long luhn(long imei) {
         return (10 - (checksum % 10)) % 10;
     }
 
-    public static int modulo256(byte... bytes) {
+    public static int modulo256(byte[] bytes) {
         int sum = 0;
         for (byte b : bytes) {
             sum = (sum + b) & 0xFF;

File: test/org/traccar/protocol/Arnavi4FrameDecoderTest.java
Patch:
@@ -6,9 +6,6 @@
 
 import java.nio.ByteOrder;
 
-/**
- * Created by Ivan Muratov @binakot on 13.07.2017.
- */
 public class Arnavi4FrameDecoderTest extends ProtocolTest {
 
     @Test

File: src/org/traccar/protocol/Arnavi4FrameDecoder.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class Arnavi4FrameDecoder extends FrameDecoder {
 
-    static final byte HEADER_START_SIGN = (byte)0xFF;
+    static final byte HEADER_START_SIGN = (byte) 0xFF;
     static final byte HEADER_VERSION_1 = 0x22;
     static final byte HEADER_VERSION_2 = 0x23;
     static final int HEADER_LENGTH = 10;

File: src/org/traccar/protocol/Arnavi4FrameDecoder.java
Patch:
@@ -10,7 +10,7 @@
  */
 public class Arnavi4FrameDecoder extends FrameDecoder {
 
-    static final byte HEADER_START_SIGN = (byte)0xFF;
+    static final byte HEADER_START_SIGN = (byte) 0xFF;
     static final byte HEADER_VERSION_1 = 0x22;
     static final byte HEADER_VERSION_2 = 0x23;
     static final int HEADER_LENGTH = 10;

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -34,7 +34,7 @@
 
 public class TeltonikaProtocolDecoder extends BaseProtocolDecoder {
 
-    boolean connectionless;
+    private boolean connectionless;
 
     public TeltonikaProtocolDecoder(TeltonikaProtocol protocol, boolean connectionless) {
         super(protocol);

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -18,7 +18,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.socket.DatagramChannel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.DeviceSession;
 import org.traccar.helper.BitUtil;

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -125,7 +125,8 @@ public BasePipelineFactory(TrackerServer server, String protocol) {
             }
         }
 
-        distanceHandler = new DistanceHandler(Context.getConfig().getBoolean("coordinates.filter"),
+        distanceHandler = new DistanceHandler(
+                Context.getConfig().getBoolean("coordinates.filter"),
                 Context.getConfig().getInteger("coordinates.minError"),
                 Context.getConfig().getInteger("coordinates.maxError"));
 

File: src/org/traccar/FilterHandler.java
Patch:
@@ -127,7 +127,7 @@ private boolean filterMaxSpeed(Position position, Position last) {
         if (filterMaxSpeed != 0 && last != null) {
             double distance = position.getDouble(Position.KEY_DISTANCE);
             long time = position.getFixTime().getTime() - last.getFixTime().getTime();
-            return UnitsConverter.knotsFromMps(distance / time) > filterMaxSpeed;
+            return UnitsConverter.knotsFromMps(distance / (time / 1000)) > filterMaxSpeed;
         }
         return false;
     }

File: src/org/traccar/api/resource/DriverResource.java
Patch:
@@ -86,8 +86,8 @@ public Collection<Driver> get(
     public Response add(Driver entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getDriversManager().addDriver(entity);
-        Context.getDataManager().linkAttribute(getUserId(), entity.getId());
-        Context.getAttributesManager().refreshUserAttributes();
+        Context.getDataManager().linkDriver(getUserId(), entity.getId());
+        Context.getDriversManager().refreshUserDrivers();
         return Response.ok(entity).build();
     }
 

File: src/org/traccar/database/DriversManager.java
Patch:
@@ -168,7 +168,7 @@ public void updateDriver(Driver driver) throws SQLException {
     }
 
     public void removeDriver(long driverId) throws SQLException {
-        dataManager.removeAttribute(driverId);
+        dataManager.removeDriver(driverId);
         if (drivers.containsKey(driverId)) {
             String driverUniqueId = drivers.get(driverId).getUniqueId();
             drivers.remove(driverId);

File: src/org/traccar/api/resource/DeviceAttributeResource.java
Patch:
@@ -49,7 +49,7 @@ public Response add(DeviceAttribute entity) throws SQLException {
     public Response remove(DeviceAttribute entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getPermissionsManager().checkDevice(getUserId(), entity.getDeviceId());
-        Context.getPermissionsManager().checkGeofence(getUserId(), entity.getAttributeId());
+        Context.getPermissionsManager().checkAttribute(getUserId(), entity.getAttributeId());
         Context.getDataManager().unlinkDeviceAttribute(entity.getDeviceId(), entity.getAttributeId());
         Context.getAttributesManager().refresh();
         return Response.noContent().build();

File: src/org/traccar/api/resource/GroupAttributeResource.java
Patch:
@@ -49,7 +49,7 @@ public Response add(GroupAttribute entity) throws SQLException {
     public Response remove(GroupAttribute entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getPermissionsManager().checkGroup(getUserId(), entity.getGroupId());
-        Context.getPermissionsManager().checkGeofence(getUserId(), entity.getAttributeId());
+        Context.getPermissionsManager().checkAttribute(getUserId(), entity.getAttributeId());
         Context.getDataManager().unlinkGroupAttribute(entity.getGroupId(), entity.getAttributeId());
         Context.getAttributesManager().refresh();
         return Response.noContent().build();

File: src/org/traccar/api/resource/DeviceAttributeResource.java
Patch:
@@ -49,7 +49,7 @@ public Response add(DeviceAttribute entity) throws SQLException {
     public Response remove(DeviceAttribute entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getPermissionsManager().checkDevice(getUserId(), entity.getDeviceId());
-        Context.getPermissionsManager().checkGeofence(getUserId(), entity.getAttributeId());
+        Context.getPermissionsManager().checkAttribute(getUserId(), entity.getAttributeId());
         Context.getDataManager().unlinkDeviceAttribute(entity.getDeviceId(), entity.getAttributeId());
         Context.getAttributesManager().refresh();
         return Response.noContent().build();

File: src/org/traccar/api/resource/GroupAttributeResource.java
Patch:
@@ -49,7 +49,7 @@ public Response add(GroupAttribute entity) throws SQLException {
     public Response remove(GroupAttribute entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getPermissionsManager().checkGroup(getUserId(), entity.getGroupId());
-        Context.getPermissionsManager().checkGeofence(getUserId(), entity.getAttributeId());
+        Context.getPermissionsManager().checkAttribute(getUserId(), entity.getAttributeId());
         Context.getDataManager().unlinkGroupAttribute(entity.getGroupId(), entity.getAttributeId());
         Context.getAttributesManager().refresh();
         return Response.noContent().build();

File: src/org/traccar/protocol/GalileoProtocolEncoder.java
Patch:
@@ -57,9 +57,9 @@ protected Object encodeCommand(Command command) {
 
         switch (command.getType()) {
             case Command.TYPE_CUSTOM:
-                return encodeText(getUniqueId(command.getId()), command.getString(Command.KEY_DATA));
+                return encodeText(getUniqueId(command.getDeviceId()), command.getString(Command.KEY_DATA));
             case Command.TYPE_OUTPUT_CONTROL:
-                return encodeText(getUniqueId(command.getId()),
+                return encodeText(getUniqueId(command.getDeviceId()),
                         "Out " + command.getInteger(Command.KEY_INDEX) + "," + command.getString(Command.KEY_DATA));
             default:
                 Log.warning(new UnsupportedOperationException(command.getType()));

File: src/org/traccar/database/ConnectionManager.java
Patch:
@@ -48,7 +48,7 @@ public class ConnectionManager {
 
     public ConnectionManager() {
         deviceTimeout = Context.getConfig().getLong("status.timeout", DEFAULT_TIMEOUT) * 1000;
-        enableStatusEvents = Context.getConfig().getBoolean("event.statusHandler");
+        enableStatusEvents = Context.getConfig().getBoolean("event.enable");
     }
 
     public void addActiveDevice(long deviceId, Protocol protocol, Channel channel, SocketAddress remoteAddress) {

File: src/org/traccar/events/FuelDropEventHandler.java
Patch:
@@ -47,7 +47,8 @@ protected Collection<Event> analyzePosition(Position position) {
             if (position.getAttributes().containsKey(Position.KEY_FUEL_LEVEL)
                     && lastPosition != null && lastPosition.getAttributes().containsKey(Position.KEY_FUEL_LEVEL)) {
 
-                double drop = lastPosition.getDouble(Position.KEY_FUEL_LEVEL) - position.getDouble(Position.KEY_FUEL_LEVEL);
+                double drop = lastPosition.getDouble(Position.KEY_FUEL_LEVEL)
+                        - position.getDouble(Position.KEY_FUEL_LEVEL);
                 if (drop >= fuelDropThreshold) {
                     Event event = new Event(Event.TYPE_DEVICE_FUEL_DROP, position.getDeviceId(), position.getId());
                     event.set(ATTRIBUTE_FUEL_DROP_THRESHOLD, fuelDropThreshold);

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ protected Object decode(
             position.set("gpsAntennaStatus", buf.readUnsignedShort());
 
             position.setSpeed(buf.readUnsignedShort() * 0.194384);
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort());
 
             position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
 

File: src/org/traccar/helper/ObdDecoder.java
Patch:
@@ -87,15 +87,15 @@ public static Map.Entry<String, Object> decodeCodes(String value) {
     public static Map.Entry<String, Object> decodeData(int pid, int value, boolean convert) {
         switch (pid) {
             case PID_ENGINE_LOAD:
-                return createEntry("engineLoad", convert ? value * 100 / 255 : value);
+                return createEntry(Position.KEY_ENGINE_LOAD, convert ? value * 100 / 255 : value);
             case PID_COOLANT_TEMPERATURE:
-                return createEntry("coolantTemperature", convert ? value - 40 : value);
+                return createEntry(Position.KEY_COOLANT_TEMP, convert ? value - 40 : value);
             case PID_ENGINE_RPM:
                 return createEntry(Position.KEY_RPM, convert ? value / 4 : value);
             case PID_VEHICLE_SPEED:
                 return createEntry(Position.KEY_OBD_SPEED, value);
             case PID_THROTTLE_POSITION:
-                return createEntry("throttle", convert ? value * 100 / 255 : value);
+                return createEntry(Position.KEY_THROTTLE, convert ? value * 100 / 255 : value);
             case PID_MIL_DISTANCE:
                 return createEntry("milDistance", value);
             case PID_FUEL_LEVEL:

File: src/org/traccar/model/Position.java
Patch:
@@ -69,6 +69,8 @@ public class Position extends Message {
     public static final String KEY_GEOFENCE = "geofence";
     public static final String KEY_ACCELERATION = "acceleration";
     public static final String KEY_DEVICE_TEMP = "deviceTemp"; // celsius
+    public static final String KEY_COOLANT_TEMP = "coolantTemp"; // celsius
+    public static final String KEY_ENGINE_LOAD = "engineLoad";
     public static final String KEY_OPERATOR = "operator";
     public static final String KEY_COMMAND = "command";
     public static final String KEY_BLOCKED = "blocked";

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -211,8 +211,8 @@ protected Object decode(
             position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextDouble(0));
             position.set(Position.KEY_HOURS, parser.nextInt());
             position.set(Position.KEY_OBD_SPEED, parser.nextInt(0));
-            position.set("powerLoad", parser.next());
-            position.set(Position.PREFIX_TEMP + 1, parser.nextInt());
+            position.set(Position.KEY_ENGINE_LOAD, parser.next());
+            position.set(Position.KEY_COOLANT_TEMP, parser.nextInt());
             position.set(Position.KEY_THROTTLE, parser.next());
             position.set(Position.KEY_RPM, parser.nextInt(0));
             position.set(Position.KEY_BATTERY, parser.nextDouble(0));

File: src/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -64,9 +64,8 @@ public Collection<Device> get(
         } else {
             ArrayList<Device> devices = new ArrayList<>();
             for (Long deviceId : deviceIds) {
-                Device device = Context.getDeviceManager().getDeviceById(deviceId);
-                Context.getPermissionsManager().checkDevice(getUserId(), device.getId());
-                devices.add(device);
+                Context.getPermissionsManager().checkDevice(getUserId(), deviceId);
+                devices.add(Context.getDeviceManager().getDeviceById(deviceId));
             }
             return devices;
         }

File: src/org/traccar/protocol/AplicomFrameDecoder.java
Patch:
@@ -27,7 +27,7 @@ protected Object decode(
             ChannelHandlerContext ctx, Channel channel, ChannelBuffer buf) throws Exception {
 
         // Skip Alive message
-        while (buf.readableBytes() > 0 && Character.isDigit(buf.getByte(buf.readerIndex()))) {
+        while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) {
             buf.readByte();
         }
 

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -182,14 +182,14 @@ public void checkManager(long userId) throws SecurityException {
 
     public void checkManager(long userId, long managedUserId) throws SecurityException {
         checkManager(userId);
-        if (!userPermissions.get(userId).contains(managedUserId)) {
+        if (!getUserPermissions(userId).contains(managedUserId)) {
             throw new SecurityException("User access denied");
         }
     }
 
     public void checkUserLimit(long userId) throws SecurityException {
         int userLimit = users.get(userId).getUserLimit();
-        if (userLimit != -1 && userPermissions.get(userId).size() >= userLimit) {
+        if (userLimit != -1 && getUserPermissions(userId).size() >= userLimit) {
             throw new SecurityException("Manager user limit reached");
         }
     }

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -507,7 +507,7 @@ private Object decodeExtended(Channel channel, SocketAddress remoteAddress, Chan
             buf.readUnsignedInt(); // offset
             buf.readBytes(photo, buf.readUnsignedShort());
 
-            if (buf.writableBytes() > 0) {
+            if (photo.writableBytes() > 0) {
                 sendPhotoRequest(channel, pictureId);
             } else {
                 Device device = Context.getDeviceManager().getDeviceById(deviceSession.getDeviceId());

File: src/org/traccar/smpp/EnquireLinkTask.java
Patch:
@@ -44,7 +44,7 @@ public void run() {
             } catch (SmppTimeoutException | SmppChannelException
                     | RecoverablePduException | UnrecoverablePduException error) {
                 Log.warning("Enquire link failed, executing reconnect: ", error);
-                smppClient.reconnect();
+                smppClient.scheduleReconnect();
             } catch (InterruptedException error) {
                 Log.info("Enquire link interrupted, probably killed by reconnecting");
             }

File: src/org/traccar/smpp/EnquireLinkTask.java
Patch:
@@ -44,7 +44,7 @@ public void run() {
             } catch (SmppTimeoutException | SmppChannelException
                     | RecoverablePduException | UnrecoverablePduException error) {
                 Log.warning("Enquire link failed, executing reconnect: ", error);
-                smppClient.reconnect();
+                smppClient.scheduleReconnect();
             } catch (InterruptedException error) {
                 Log.info("Enquire link interrupted, probably killed by reconnecting");
             }

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -218,7 +218,8 @@ private Position decodeRegularMessage(Channel channel, SocketAddress remoteAddre
         if (parser.hasNext()) {
             for (String temp : parser.next().split("\\|")) {
                 int index = Integer.valueOf(temp.substring(0, 2), 16);
-                int value = Integer.valueOf(temp.substring(2), 16);
+                double value = Byte.valueOf(temp.substring(2, 4), 16);
+                value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);
                 position.set(Position.PREFIX_TEMP + index, value);
             }
         }

File: src/org/traccar/protocol/Tk103Protocol.java
Patch:
@@ -1,4 +1,5 @@
 /*
+ * Copyright 2017 Christoph Krey (c@ckrey.de)
  * Copyright 2015 - 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -32,6 +33,7 @@ public class Tk103Protocol extends BaseProtocol {
     public Tk103Protocol() {
         super("tk103");
         setSupportedDataCommands(
+                Command.TYPE_POSITION_SINGLE,
                 Command.TYPE_ENGINE_STOP,
                 Command.TYPE_ENGINE_RESUME);
     }

File: src/org/traccar/protocol/Tk103ProtocolEncoder.java
Patch:
@@ -1,4 +1,5 @@
 /*
+ * Copyright 2017 Christoph Krey (c@ckrey.de)
  * Copyright 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
@@ -25,6 +26,8 @@ public class Tk103ProtocolEncoder extends StringProtocolEncoder {
     protected Object encodeCommand(Command command) {
 
         switch (command.getType()) {
+            case Command.TYPE_POSITION_SINGLE:
+                return formatCommand(command, "({%s}AP00)", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "({%s}AV011)", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -104,7 +104,9 @@ private Position decodePosition(DeviceSession deviceSession, int type, ChannelBu
             position.set(Position.KEY_HDOP, buf.readUnsignedByte());
         }
 
-        position.set(Position.KEY_INPUT, buf.readUnsignedByte());
+        int input = buf.readUnsignedByte();
+        position.set(Position.KEY_INPUT, input);
+        position.set(Position.KEY_IGNITION, BitUtil.check(input, 0));
 
         if (type != MSG_MINI_EVENT_REPORT) {
             position.set(Position.KEY_STATUS, buf.readUnsignedByte());

File: test/org/traccar/protocol/VtfmsProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         VtfmsProtocolDecoder decoder = new VtfmsProtocolDecoder(new VtfmsProtocol());
 
-        verifyNull(decoder, text(
+        verifyPosition(decoder, text(
                 "(865733028143493,00I76,00,000,,,,,A,133755,210617,10.57354,077.24912,SW,000,00598,00000,K,0017368,1,12.7,,,0.000,,,0,0,0,0,1,1,0,,)074"));
 
         verifyPosition(decoder, text(

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ protected Object decode(
                     position.set(Position.KEY_HDOP, Double.parseDouble(value));
                     break;
                 case "batt":
-                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));
+                    position.set(Position.KEY_BATTERY_LEVEL, Double.parseDouble(value));
                     break;
                 default:
                     try {

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -89,16 +89,16 @@ public static double calculateDistance(Position firstPosition, Position lastPosi
         return distance;
     }
 
-    public static String calculateFuel(Position firstPosition, Position lastPosition) {
+    public static double calculateFuel(Position firstPosition, Position lastPosition) {
 
         if (firstPosition.getAttributes().get(Position.KEY_FUEL_LEVEL) != null
                 && lastPosition.getAttributes().get(Position.KEY_FUEL_LEVEL) != null) {
 
             BigDecimal value = new BigDecimal(firstPosition.getDouble(Position.KEY_FUEL_LEVEL)
                     - lastPosition.getDouble(Position.KEY_FUEL_LEVEL));
-            return value.setScale(1, RoundingMode.HALF_EVEN).toString();
+            return value.setScale(1, RoundingMode.HALF_EVEN).doubleValue();
         }
-        return null;
+        return 0;
     }
 
     public static org.jxls.common.Context initializeContext(long userId) {

File: src/org/traccar/reports/model/BaseReport.java
Patch:
@@ -74,13 +74,13 @@ public void setMaxSpeed(double maxSpeed) {
         }
     }
 
-    private String spentFuel;
+    private double spentFuel;
 
-    public String getSpentFuel() {
+    public double getSpentFuel() {
         return spentFuel;
     }
 
-    public void setSpentFuel(String spentFuel) {
+    public void setSpentFuel(double spentFuel) {
         this.spentFuel = spentFuel;
     }
 

File: test/org/traccar/reports/ReportUtilsTest.java
Patch:
@@ -60,10 +60,10 @@ public void testCalculateDistance() {
     public void testCalculateSpentFuel() {
         Position startPosition = new Position();
         Position endPosition = new Position();
-        Assert.assertNull(ReportUtils.calculateFuel(startPosition, endPosition));
+        Assert.assertEquals(ReportUtils.calculateFuel(startPosition, endPosition), 0.0, 0.01);
         startPosition.set(Position.KEY_FUEL_LEVEL, 0.7);
         endPosition.set(Position.KEY_FUEL_LEVEL, 0.5);
-        Assert.assertEquals(ReportUtils.calculateFuel(startPosition, endPosition), "0.2");
+        Assert.assertEquals(ReportUtils.calculateFuel(startPosition, endPosition), 0.2, 0.01);
     }
 
     @Test

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -89,16 +89,16 @@ public static double calculateDistance(Position firstPosition, Position lastPosi
         return distance;
     }
 
-    public static String calculateFuel(Position firstPosition, Position lastPosition) {
+    public static double calculateFuel(Position firstPosition, Position lastPosition) {
 
         if (firstPosition.getAttributes().get(Position.KEY_FUEL_LEVEL) != null
                 && lastPosition.getAttributes().get(Position.KEY_FUEL_LEVEL) != null) {
 
             BigDecimal value = new BigDecimal(firstPosition.getDouble(Position.KEY_FUEL_LEVEL)
                     - lastPosition.getDouble(Position.KEY_FUEL_LEVEL));
-            return value.setScale(1, RoundingMode.HALF_EVEN).toString();
+            return value.setScale(1, RoundingMode.HALF_EVEN).doubleValue();
         }
-        return null;
+        return 0;
     }
 
     public static org.jxls.common.Context initializeContext(long userId) {

File: src/org/traccar/reports/model/BaseReport.java
Patch:
@@ -74,13 +74,13 @@ public void setMaxSpeed(double maxSpeed) {
         }
     }
 
-    private String spentFuel;
+    private double spentFuel;
 
-    public String getSpentFuel() {
+    public double getSpentFuel() {
         return spentFuel;
     }
 
-    public void setSpentFuel(String spentFuel) {
+    public void setSpentFuel(double spentFuel) {
         this.spentFuel = spentFuel;
     }
 

File: test/org/traccar/reports/ReportUtilsTest.java
Patch:
@@ -60,10 +60,10 @@ public void testCalculateDistance() {
     public void testCalculateSpentFuel() {
         Position startPosition = new Position();
         Position endPosition = new Position();
-        Assert.assertNull(ReportUtils.calculateFuel(startPosition, endPosition));
+        Assert.assertEquals(ReportUtils.calculateFuel(startPosition, endPosition), 0.0, 0.01);
         startPosition.set(Position.KEY_FUEL_LEVEL, 0.7);
         endPosition.set(Position.KEY_FUEL_LEVEL, 0.5);
-        Assert.assertEquals(ReportUtils.calculateFuel(startPosition, endPosition), "0.2");
+        Assert.assertEquals(ReportUtils.calculateFuel(startPosition, endPosition), 0.2, 0.01);
     }
 
     @Test

File: src/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -117,7 +117,7 @@ protected Object decode(
                         position.setFixTime(new Date(1356998400000L + buf.readUnsignedInt() * 1000));
                         position.setLatitude(buf.readInt() * 0.0000001);
                         position.setLongitude(buf.readInt() * 0.0000001);
-                        position.setLongitude(buf.readShort());
+                        position.setAltitude(buf.readShort());
                         position.setSpeed(UnitsConverter.knotsFromCps(buf.readUnsignedShort()));
 
                         buf.readUnsignedByte(); // speed accuracy

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         H02ProtocolDecoder decoder = new H02ProtocolDecoder(new H02Protocol());
 
+        verifyNull(decoder, buffer(
+                "*HQ,4109198974,#"));
+
         verifyAttributes(decoder, buffer(
                 "*HQ,1700086468,LINK,180902,15,0,84,0,0,240517,FFFFFBFF#"));
 

File: src/org/traccar/protocol/OwnTracksProtocolDecoder.java
Patch:
@@ -59,7 +59,7 @@ protected Object decode(
                 new StringReader(request.getContent().toString(StandardCharsets.US_ASCII))).readObject();
 
         if (!root.containsKey("_type") || !root.getString("_type").equals("location")) {
-            sendResponse(channel, HttpResponseStatus.BAD_REQUEST);
+            sendResponse(channel, HttpResponseStatus.OK);
             return null;
         }
 

File: src/org/traccar/protocol/OwnTracksProtocolDecoder.java
Patch:
@@ -59,7 +59,7 @@ protected Object decode(
                 new StringReader(request.getContent().toString(StandardCharsets.US_ASCII))).readObject();
 
         if (!root.containsKey("_type") || !root.getString("_type").equals("location")) {
-            sendResponse(channel, HttpResponseStatus.BAD_REQUEST);
+            sendResponse(channel, HttpResponseStatus.OK);
             return null;
         }
 

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -300,7 +300,7 @@ public static Collection<BaseReport> detectTripsAndStops(TripsConfig tripsConfig
                                                 previousEndParkingIndex));
                                     }
                                 }
-                                result.add(calculateStop(positions, startParkingIndex, endParkingIndex));
+                                result.add(calculateStop(positions, startParkingIndex, isLast ? i : endParkingIndex));
                             }
                         }
                         previousEndParkingIndex = endParkingIndex;

File: src/org/traccar/database/StatisticsManager.java
Patch:
@@ -30,7 +30,7 @@
 
 public class StatisticsManager {
 
-    private static final int SPLIT_MODE = Calendar.MINUTE;
+    private static final int SPLIT_MODE = Calendar.DAY_OF_MONTH;
 
     private int lastUpdate = Calendar.getInstance().get(SPLIT_MODE);
 

File: src/org/traccar/protocol/DmtProtocolDecoder.java
Patch:
@@ -117,6 +117,7 @@ protected Object decode(
                         position.setFixTime(new Date(1356998400000L + buf.readUnsignedInt() * 1000));
                         position.setLatitude(buf.readInt() * 0.0000001);
                         position.setLongitude(buf.readInt() * 0.0000001);
+                        position.setLongitude(buf.readShort());
                         position.setSpeed(UnitsConverter.knotsFromCps(buf.readUnsignedShort()));
 
                         buf.readUnsignedByte(); // speed accuracy

File: test/org/traccar/protocol/DmtProtocolDecoderTest.java
Patch:
@@ -18,6 +18,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, binary(ByteOrder.LITTLE_ENDIAN,
                 "0255220000"));
 
+        verifyPositions(decoder, false, binary(ByteOrder.LITTLE_ENDIAN,
+                "025504d80352000602000052185c0803001552185c0842ee19eaba2524682d000d060973112b0302080100000000000300060901421003e40604140007190b300000000c030000000de80100000ec90e00000f0700000052000702000069185c0803001569185c089ac019ea0ad223682300fb02047d152f03020801000000000003000609013f1003fc0604140007190b300000000c030000000de90100000ecb0e00000f0700000052000802000092185c0803001592185c0800a619eaa5e7226821009c0506880e250302080100000000000300060901411003f30604140007190b300000000c030000000dea0100000ef10e00000f07000000520009020000a9185c08030015a9185c0818ae19ea1e62226826001e05038e0e2203020801000000000003000609013f1003030704140007190b300000000c030000000deb0100000ef60e00000f0700000052000a020000c0185c08030015c0185c0893b619ea7fd321681a00640403860f1d0302080100000000000300060901401003ff0604140007190b300000000c030000000dec0100000ef80e00000f0700000052000b020000d7185c08030015d7185c08e08519eab7c921682300fd04035510270302080100000000000300060901401003ea0604140007190b300000000c030000000ded0100000efa0e00000f0700000052000c020000ee185c08030015ee185c08f61719ea61e221682c004c0503540f190302080100000000000300060901421003dd0604140007190b300000000c030000000dee0100000efc0e00000f0700000052000d02000005195c0803001505195c0836b518eac9f221683000fa0107740e2d03020801000000000003000609013f1003fe0604140007190b300000000c030000000def0100000efe0e00000f0700000052000e0200001d195c080300151d195c08d1b518ea2d6721682300980502870e1d0302080100000000000300060901411003ed0604140007190b300000000c030000000df00100000e000f00000f0700000052000f02000034195c0803001534195c086acd18ea742b2168400006020500132903020801000000000003000609013d10030d0704140007190b300000000c030000000df10100000e030f00000f070000005200100200004d195c080300154d195c08dfba18eab81721684e003000093b0e1e03020801000000000003000609013e1003130704140007190b300000000c030000000df20100000e050f00000f0700000052001102000065195c0803001565195c081db318ea871f216822000400080416250302080100000000000300060901401003060704140007190b300000000c030000000df30100000e090f00000f07000000"));
+
         verifyPositions(decoder, false, binary(ByteOrder.LITTLE_ENDIAN,
                 "025504e9032f000d000000000000001501222700524553455420446172742033342e322e312e3920666c6167733d312057443d303f000e0000000000000015013214004e6f2041646d696e20706172616d7320666f756e64202d207573696e672064656661756c7473202b204175746f41504e37000f00000000000000090015000000000000000000000000000000000000000000020805000000000007000609012b1002400003700e37001000000000000000090015000000000000000000000000000000000000000000020801000000000007000609012b1002400003700e37001100000000000000090015000000000000000000000000000000000000000000020800000000000007000609012b1002400003700e37001200000000000000020015000000000000000000000000000000000000000000020800000000000006000609012b1002400003700e370013000000000000000f001500000000000000000000000000000000000000000002080000000000000200060901271002370003670e2e0014000000000000001501211300526f6c6c20646574656374656420636f735e32203c203338333535333838343700150000000000000017001500000000000000000000000000000000000000000002080000000000000200060901071002300003d60e2a00160000000000000015011d130054756d626c65722074726967676572656420636f735e32203c20302e0017000000000000001501211300526f6c6c20646574656374656420636f735e32203c203338333535333838343700180000000000000017001500000000000000000000000000000000000000000002080000000000000200060901071002300003f70e2a00190000000000000015011d130054756d626c65722074726967676572656420636f735e32203c203026001a000000000000001501190b0047534d3a20544350206261642053594e432063686172732e001b000000000000001501211300526f6c6c20646574656374656420636f735e32203c203338333535333838343a001c0000000000000017001500000000000000000000000000000000000000000002080000000000000200060c01c90f02300003e20f041f002a001d0000000000000015011d130054756d626c65722074726967676572656420636f735e32203c20302e001e000000000000001501211300526f6c6c20646574656374656420636f735e32203c203338333535333838343a001f0000000000000017001500000000000000000000000000000000000000000002080000000000000200060c01d80f02300003ff0f0418002a00200000000000000015011d130054756d626c65722074726967676572656420636f735e32203c2030"));
 

File: src/org/traccar/FilterHandler.java
Patch:
@@ -84,7 +84,9 @@ public FilterHandler() {
     }
 
     private boolean filterInvalid(Position position) {
-        return filterInvalid && !position.getValid();
+        return filterInvalid && (!position.getValid()
+           || position.getLatitude() > 90 || position.getLongitude() > 180
+           || position.getLatitude() < -90 || position.getLongitude() < -180);
     }
 
     private boolean filterZero(Position position) {

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
 
         verifyPosition(decoder, buffer(
                 "2000000257,20151030145351,69.379976,53.283905,0,0,16,2,0,0,469.1,58.9,0.0"),
-                position("2015-10-30 14:53:51.000", false, 53.28390, 69.37998));
+                position("2015-10-30 14:53:51.000", true, 53.28390, 69.37998));
 
         verifyPosition(decoder, buffer(
                 "2000000232,20151030145206,51.166900,43.651353,0,132,11,2,0,0,0.0,0.0,0.0"));

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -133,7 +133,7 @@ public static TripsConfig initTripsConfig() {
                 Context.getConfig().getLong("report.trip.minimalTripDistance", 500),
                 Context.getConfig().getLong("report.trip.minimalParkingDuration", 300) * 1000,
                 Context.getConfig().getBoolean("report.trip.greedyParking"),
-                Context.getConfig().getLong("report.trip.minimalNoDataDuration", 0) * 1000);
+                Context.getConfig().getLong("report.trip.minimalNoDataDuration", 3600) * 1000);
     }
 
     private static TripReport calculateTrip(

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -78,7 +78,6 @@ protected Object decode(
             position.setProtocol(getProtocolName());
             position.setDeviceId(deviceSession.getDeviceId());
             getLastLocation(position, new Date());
-            position.setValid(false);
             position.set(Position.KEY_RESULT, buf.toString(StandardCharsets.US_ASCII));
 
             return position;
@@ -107,7 +106,7 @@ protected Object decode(
             position.setAltitude(parser.nextDouble(0));
 
             int satellites = parser.nextInt(0);
-            position.setValid(satellites >= 3);
+            position.setValid(true);
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.set(Position.KEY_EVENT, parser.next());

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
 
         verifyPosition(decoder, buffer(
                 "2000000257,20151030145351,69.379976,53.283905,0,0,16,2,0,0,469.1,58.9,0.0"),
-                position("2015-10-30 14:53:51.000", false, 53.28390, 69.37998));
+                position("2015-10-30 14:53:51.000", true, 53.28390, 69.37998));
 
         verifyPosition(decoder, buffer(
                 "2000000232,20151030145206,51.166900,43.651353,0,132,11,2,0,0,0.0,0.0,0.0"));

File: src/org/traccar/database/DeviceManager.java
Patch:
@@ -190,7 +190,7 @@ public Collection<Device> getDevices(long userId) throws SQLException {
     }
 
     public Collection<Device> getManagedDevices(long userId) throws SQLException {
-        Collection<Device> devices = new ArrayList<>();
+        Collection<Device> devices = new HashSet<>();
         devices.addAll(getDevices(userId));
         for (long managedUserId : Context.getPermissionsManager().getUserPermissions(userId)) {
             devices.addAll(getDevices(managedUserId));

File: src/org/traccar/database/DeviceManager.java
Patch:
@@ -190,7 +190,7 @@ public Collection<Device> getDevices(long userId) throws SQLException {
     }
 
     public Collection<Device> getManagedDevices(long userId) throws SQLException {
-        Collection<Device> devices = new ArrayList<>();
+        Collection<Device> devices = new HashSet<>();
         devices.addAll(getDevices(userId));
         for (long managedUserId : Context.getPermissionsManager().getUserPermissions(userId)) {
             devices.addAll(getDevices(managedUserId));

File: src/org/traccar/protocol/SanavProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public SanavProtocolDecoder(SanavProtocol protocol) {
             .number("(d+)")                      // imei
             .expression("&?rmc[:=]")
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
+            .number("(dd)(dd)(dd).d+,")          // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")
@@ -69,7 +69,7 @@ protected Object decode(
         position.setDeviceId(deviceSession.getDeviceId());
 
         DateBuilder dateBuilder = new DateBuilder()
-                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
+                .setTime(parser.nextInt(0), parser.nextInt(0), parser.nextInt(0));
 
         position.setValid(parser.next().equals("A"));
         position.setLatitude(parser.nextCoordinate());

File: test/org/traccar/protocol/SanavProtocolDecoderTest.java
Patch:
@@ -9,6 +9,9 @@ public class SanavProtocolDecoderTest extends ProtocolTest {
     public void testDecode() throws Exception {
 
         SanavProtocolDecoder decoder = new SanavProtocolDecoder(new SanavProtocol());
+
+        verifyPosition(decoder, text(
+                "imei=1234567890&rmc=$GPRMC,091950.00,V,5300.10000,N,00900.14000,E,0.160,,200513,,,A*68,STOP,V3.872;67%,S4,H8.3,D2.38"));
         
         verifyPosition(decoder, text(
                 "imei=352024028982787&rmc=$GPRMC,103048.000,A,4735.0399,N,01905.2895,E,0.00,0.00,171013,,*05,AUTO-4095mv"),

File: src/org/traccar/model/Command.java
Patch:
@@ -47,6 +47,8 @@ public class Command extends Message {
     public static final String TYPE_FIRMWARE_UPDATE = "firmwareUpdate";
     public static final String TYPE_SET_CONNECTION = "setConnection";
     public static final String TYPE_SET_ODOMETER = "setOdometer";
+    public static final String TYPE_GET_MODEM_STATUS = "getModemStatus";
+    public static final String TYPE_GET_DEVICE_STATUS = "getDeviceStatus";
 
     public static final String TYPE_MODE_POWER_SAVING = "modePowerSaving";
     public static final String TYPE_MODE_DEEP_SLEEP = "modeDeepSleep";

File: src/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -31,8 +31,11 @@ public WondexProtocol() {
         super("wondex");
         setTextCommandEncoder(new WondexProtocolEncoder());
         setSupportedCommands(
+                Command.TYPE_GET_DEVICE_STATUS,
+                Command.TYPE_GET_MODEM_STATUS,
                 Command.TYPE_REBOOT_DEVICE,
                 Command.TYPE_POSITION_SINGLE,
+                Command.TYPE_GET_VERSION,
                 Command.TYPE_IDENTIFICATION);
     }
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -69,7 +69,8 @@ protected Object decode(
 
             return null;
         } else if (buf.toString(StandardCharsets.US_ASCII).startsWith("$OK:")
-                || buf.toString(StandardCharsets.US_ASCII).startsWith("$ERR:")) {
+                || buf.toString(StandardCharsets.US_ASCII).startsWith("$ERR:")
+                  || buf.toString(StandardCharsets.US_ASCII).startsWith("$MSG:")) {
 
             DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -69,7 +69,8 @@ protected Object decode(
 
             return null;
         } else if (buf.toString(StandardCharsets.US_ASCII).startsWith("$OK:")
-                || buf.toString(StandardCharsets.US_ASCII).startsWith("$ERR:")) {
+                || buf.toString(StandardCharsets.US_ASCII).startsWith("$ERR:")
+                  || buf.toString(StandardCharsets.US_ASCII).startsWith("$MSG:")) {
 
             DeviceSession deviceSession = getDeviceSession(channel, remoteAddress);
 

File: src/org/traccar/protocol/FlexCommProtocolDecoder.java
Patch:
@@ -89,8 +89,8 @@ protected Object decode(
         }
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.setValid(parser.next().equals("1"));
         position.setTime(parser.nextDateTime());
+        position.setValid(parser.next().equals("1"));
         position.setLatitude(parseSignedValue(parser, 6));
         position.setLongitude(parseSignedValue(parser, 6));
         position.setAltitude(parseSignedValue(parser, 0));
@@ -104,8 +104,8 @@ protected Object decode(
         position.setNetwork(new Network(CellTower.from(
                 parser.nextInt(), parser.nextInt(), parser.nextHexInt(), parser.nextHexInt())));
 
-        position.set(Position.KEY_INPUT, parser.nextInt());
-        position.set(Position.KEY_OUTPUT, parser.nextInt());
+        position.set(Position.KEY_INPUT, parser.nextBinInt());
+        position.set(Position.KEY_OUTPUT, parser.nextBinInt());
         position.set(Position.KEY_FUEL_LEVEL, parser.nextInt());
         position.set(Position.PREFIX_TEMP + 1, parseSignedValue(parser, 0));
         position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt());

File: test/org/traccar/protocol/FlexCommProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         FlexCommProtocolDecoder decoder = new FlexCommProtocolDecoder(new FlexCommProtocol());
 
+        verifyPosition(decoder, text(
+                "7E00865067022408382201705302358271024932258006712785200700022601010224100040002C5002A2210001000000010012342107"));
+
         verifyPosition(decoder, text(
                 "7E27865067022408382201705241211301024932197006712794000910022481008234100040002C5002A2200011000000006306941827"));
 

File: src/org/traccar/database/DataManager.java
Patch:
@@ -20,6 +20,7 @@
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.sql.SQLException;
+import java.text.SimpleDateFormat;
 import java.util.Collection;
 import java.util.Date;
 
@@ -316,6 +317,7 @@ public void clearHistory() throws SQLException {
         long historyDays = config.getInteger("database.historyDays");
         if (historyDays != 0) {
             Date timeLimit = new Date(System.currentTimeMillis() - historyDays * 24 * 3600 * 1000);
+            Log.debug("Clearing history earlier than " + new SimpleDateFormat(Log.DATE_FORMAT).format(timeLimit));
             QueryBuilder.create(dataSource, getQuery("database.deletePositions"))
                     .setDate("serverTime", timeLimit)
                     .executeUpdate();

File: src/org/traccar/protocol/Gps056Protocol.java
Patch:
@@ -18,7 +18,6 @@
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;

File: src/org/traccar/protocol/Gps056ProtocolDecoder.java
Patch:
@@ -20,7 +20,8 @@
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.DeviceSession;
-import org.traccar.helper.*;
+import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;

File: src/org/traccar/protocol/DmtHttpProtocolDecoder.java
Patch:
@@ -95,7 +95,7 @@ protected Object decode(
                     case 0:
                         position.setFixTime(dateFormat.parse(field.getString("GpsUTC")));
                         position.setLatitude(field.getJsonNumber("Lat").doubleValue());
-                        position.setLatitude(field.getJsonNumber("Long").doubleValue());
+                        position.setLongitude(field.getJsonNumber("Long").doubleValue());
                         position.setAltitude(field.getInt("Alt"));
                         position.setSpeed(UnitsConverter.knotsFromCps(field.getInt("Spd")));
                         position.setCourse(field.getInt("Head"));

File: src/org/traccar/model/Position.java
Patch:
@@ -41,7 +41,8 @@ public class Position extends Message {
     // The units for the below four KEYs currently vary.
     // The preferred units of measure are specified in the comment for each.
     public static final String KEY_POWER = "power"; // volts
-    public static final String KEY_BATTERY = "battery"; // volts (or percentage appending %)
+    public static final String KEY_BATTERY = "battery"; // volts
+    public static final String KEY_BATTERY_LEVEL = "batteryLevel"; // percentage
     public static final String KEY_FUEL_LEVEL = "fuel"; // liters
     public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption"; // liters/hour
 

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -78,7 +78,7 @@ protected Object decode(
         position.set(Position.KEY_SATELLITES, satellites);
 
         position.set(Position.KEY_EVENT, parser.next());
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
         position.set(Position.PREFIX_TEMP + 1, parser.next());
 
         return position;

File: src/org/traccar/protocol/CguardProtocolDecoder.java
Patch:
@@ -102,7 +102,7 @@ private Position decodeStatus(DeviceSession deviceSession, String sentence) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                     break;
                 case "BAT1":
-                    position.set(Position.KEY_BATTERY, Integer.parseInt(value) + "%");
+                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(value));
                     break;
                 case "PWR1":
                     position.set(Position.KEY_POWER, Double.parseDouble(value));

File: src/org/traccar/protocol/DishaProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ protected Object decode(
         position.set(Position.KEY_HDOP, parser.next());
         position.set(Position.KEY_RSSI, parser.next());
         position.set(Position.KEY_CHARGE, parser.nextInt(0) == 2);
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.PREFIX_ADC + 1, parser.nextInt(0));
         position.set(Position.PREFIX_ADC + 2, parser.nextInt(0));

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -164,8 +164,8 @@ private Position decodePosition(DeviceSession deviceSession, Parser parser, Date
         if (parser.hasNext()) {
             position.set(Position.KEY_ODOMETER, parser.nextInt(0));
         }
-        position.set(Position.KEY_POWER, parser.next());
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_POWER, parser.nextDouble(0));
+        position.set(Position.KEY_BATTERY, parser.nextDouble());
 
         if (parser.hasNext(6)) {
             long status = parser.nextLong(16, 0);

File: src/org/traccar/protocol/GpsMarkerProtocolDecoder.java
Patch:
@@ -79,7 +79,7 @@ protected Object decode(
         position.setCourse(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextHexInt(0));
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
         position.set(Position.KEY_INPUT, parser.next());
         position.set(Position.KEY_OUTPUT, parser.next());
         position.set(Position.PREFIX_TEMP + 1, parser.next());

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -107,7 +107,7 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             if (battery == 0xff) {
                 position.set(Position.KEY_CHARGE, true);
             } else {
-                position.set(Position.KEY_BATTERY, battery + "%");
+                position.set(Position.KEY_BATTERY_LEVEL, battery);
             }
 
             CellTower cellTower = CellTower.fromCidLac(buf.readUnsignedShort(), buf.readUnsignedShort());
@@ -218,7 +218,7 @@ private Position decodeW01(String sentence, Channel channel, SocketAddress remot
             .number("(d+.?d*),")                 // speed
             .number("(d+),")                     // course
             .number("(d+),")                     // satellites
-            .number("(d+%),")                    // battery
+            .number("(d+)%,")                    // battery
             .expression("([01]+),")              // status
             .number("(d+),")                     // cid
             .number("(d+),")                     // lac
@@ -257,7 +257,7 @@ private Position decodeU01(String sentence, Channel channel, SocketAddress remot
         position.setCourse(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
         position.set(Position.KEY_STATUS, parser.nextBinInt(0));
 
         CellTower cellTower = CellTower.fromCidLac(parser.nextInt(0), parser.nextInt(0));

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ protected Object decode(
                     position.set(Position.KEY_HDOP, Double.parseDouble(value));
                     break;
                 case "batt":
-                    position.set(Position.KEY_BATTERY, value);
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                     break;
                 default:
                     try {

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -137,7 +137,7 @@ private Position decodeGprmc(
 
             position.set(Position.KEY_IGNITION, parser.hasNext() && parser.next().equals("1"));
             position.set(Position.KEY_FUEL_LEVEL, parser.nextInt(0));
-            position.set(Position.KEY_BATTERY, parser.nextInt(0));
+            position.set(Position.KEY_BATTERY, parser.nextInt());
         }
 
         if (parser.hasNext()) {
@@ -219,7 +219,7 @@ private Position decodeTrccr(DeviceSession deviceSession, String sentence) {
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
 
         return position;
     }

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -175,7 +175,7 @@ protected Object decode(
                             break;
 
                         case "bl":
-                            position.set(Position.KEY_BATTERY, value);
+                            position.set(Position.KEY_BATTERY, Integer.parseInt(value));
                             break;
 
                         case "vo":

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -160,7 +160,7 @@ protected Object decode(
 
                     getLastLocation(position, null);
 
-                    position.set(Position.KEY_BATTERY, values[3]);
+                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
 
                     return position;
                 }
@@ -193,7 +193,7 @@ protected Object decode(
 
             position.set(Position.KEY_SATELLITES, parser.nextInt(0));
             position.set(Position.KEY_RSSI, parser.nextInt(0));
-            position.set(Position.KEY_BATTERY, parser.nextInt(0));
+            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
             position.set("steps", parser.nextInt(0));
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -110,7 +110,7 @@ protected Object decode(
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.set(Position.KEY_EVENT, parser.next());
-            position.set(Position.KEY_BATTERY, parser.next());
+            position.set(Position.KEY_BATTERY, parser.nextDouble());
             if (parser.hasNext()) {
                 position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
             }

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -152,7 +152,7 @@ protected Object decode(
             position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
         }
 
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
         position.set(Position.KEY_RSSI, parser.next());
 
         if (!newFormat) {

File: src/org/traccar/protocol/Xt013ProtocolDecoder.java
Patch:
@@ -85,8 +85,8 @@ protected Object decode(
 
         position.set(Position.KEY_GPS, parser.next());
         position.set(Position.KEY_RSSI, parser.next());
-        position.set(Position.KEY_BATTERY, parser.next());
-        position.set(Position.KEY_CHARGE, parser.next());
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
+        position.set(Position.KEY_CHARGE, parser.next().equals("1"));
 
         return position;
     }

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -165,7 +165,7 @@ private Position decodePosition(DeviceSession deviceSession, Parser parser, Date
             position.set(Position.KEY_ODOMETER, parser.nextInt(0));
         }
         position.set(Position.KEY_POWER, parser.nextDouble(0));
-        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
+        position.set(Position.KEY_BATTERY, parser.nextDouble());
 
         if (parser.hasNext(6)) {
             long status = parser.nextLong(16, 0);

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -137,7 +137,7 @@ private Position decodeGprmc(
 
             position.set(Position.KEY_IGNITION, parser.hasNext() && parser.next().equals("1"));
             position.set(Position.KEY_FUEL_LEVEL, parser.nextInt(0));
-            position.set(Position.KEY_BATTERY, parser.nextInt(0));
+            position.set(Position.KEY_BATTERY, parser.nextInt());
         }
 
         if (parser.hasNext()) {

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -110,7 +110,7 @@ protected Object decode(
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.set(Position.KEY_EVENT, parser.next());
-            position.set(Position.KEY_BATTERY, parser.nextDouble(0));
+            position.set(Position.KEY_BATTERY, parser.nextDouble());
             if (parser.hasNext()) {
                 position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
             }

File: test/org/traccar/ProtocolTest.java
Patch:
@@ -197,9 +197,8 @@ private void verifyDecodedPosition(Object decodedObject, boolean checkLocation,
         }
 
         if (attributes.containsKey(Position.KEY_BATTERY_LEVEL)) {
-            Object batteryLevel = attributes.get(Position.KEY_BATTERY_LEVEL);
-            Assert.assertTrue(batteryLevel instanceof Number);
-            Assert.assertTrue(((Number) batteryLevel).intValue() <=100 && ((Number) batteryLevel).intValue() >= 0);
+            int batteryLevel = ((Number) attributes.get(Position.KEY_BATTERY_LEVEL)).intValue();
+            Assert.assertTrue(batteryLevel <= 100 && batteryLevel >= 0);
         }
 
         if (position.getNetwork() != null && position.getNetwork().getCellTowers() != null) {

File: src/org/traccar/model/Position.java
Patch:
@@ -41,7 +41,8 @@ public class Position extends Message {
     // The units for the below four KEYs currently vary.
     // The preferred units of measure are specified in the comment for each.
     public static final String KEY_POWER = "power"; // volts
-    public static final String KEY_BATTERY = "battery"; // volts (or percentage appending %)
+    public static final String KEY_BATTERY = "battery"; // volts
+    public static final String KEY_BATTERY_LEVEL = "batteryLevel"; // percentage
     public static final String KEY_FUEL_LEVEL = "fuel"; // liters
     public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption"; // liters/hour
 

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -78,7 +78,7 @@ protected Object decode(
         position.set(Position.KEY_SATELLITES, satellites);
 
         position.set(Position.KEY_EVENT, parser.next());
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
         position.set(Position.PREFIX_TEMP + 1, parser.next());
 
         return position;

File: src/org/traccar/protocol/CguardProtocolDecoder.java
Patch:
@@ -102,7 +102,7 @@ private Position decodeStatus(DeviceSession deviceSession, String sentence) {
                     position.set(Position.KEY_SATELLITES, Integer.parseInt(value));
                     break;
                 case "BAT1":
-                    position.set(Position.KEY_BATTERY, Integer.parseInt(value) + "%");
+                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(value));
                     break;
                 case "PWR1":
                     position.set(Position.KEY_POWER, Double.parseDouble(value));

File: src/org/traccar/protocol/DishaProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ protected Object decode(
         position.set(Position.KEY_HDOP, parser.next());
         position.set(Position.KEY_RSSI, parser.next());
         position.set(Position.KEY_CHARGE, parser.nextInt(0) == 2);
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
         position.set(Position.PREFIX_ADC + 1, parser.nextInt(0));
         position.set(Position.PREFIX_ADC + 2, parser.nextInt(0));

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -164,8 +164,8 @@ private Position decodePosition(DeviceSession deviceSession, Parser parser, Date
         if (parser.hasNext()) {
             position.set(Position.KEY_ODOMETER, parser.nextInt(0));
         }
-        position.set(Position.KEY_POWER, parser.next());
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_POWER, parser.nextDouble(0));
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
 
         if (parser.hasNext(6)) {
             long status = parser.nextLong(16, 0);

File: src/org/traccar/protocol/GpsMarkerProtocolDecoder.java
Patch:
@@ -79,7 +79,7 @@ protected Object decode(
         position.setCourse(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextHexInt(0));
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
         position.set(Position.KEY_INPUT, parser.next());
         position.set(Position.KEY_OUTPUT, parser.next());
         position.set(Position.PREFIX_TEMP + 1, parser.next());

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -107,7 +107,7 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             if (battery == 0xff) {
                 position.set(Position.KEY_CHARGE, true);
             } else {
-                position.set(Position.KEY_BATTERY, battery + "%");
+                position.set(Position.KEY_BATTERY_LEVEL, battery);
             }
 
             CellTower cellTower = CellTower.fromCidLac(buf.readUnsignedShort(), buf.readUnsignedShort());
@@ -218,7 +218,7 @@ private Position decodeW01(String sentence, Channel channel, SocketAddress remot
             .number("(d+.?d*),")                 // speed
             .number("(d+),")                     // course
             .number("(d+),")                     // satellites
-            .number("(d+%),")                    // battery
+            .number("(d+)%,")                    // battery
             .expression("([01]+),")              // status
             .number("(d+),")                     // cid
             .number("(d+),")                     // lac
@@ -257,7 +257,7 @@ private Position decodeU01(String sentence, Channel channel, SocketAddress remot
         position.setCourse(parser.nextDouble(0));
 
         position.set(Position.KEY_SATELLITES, parser.nextInt(0));
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
         position.set(Position.KEY_STATUS, parser.nextBinInt(0));
 
         CellTower cellTower = CellTower.fromCidLac(parser.nextInt(0), parser.nextInt(0));

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ protected Object decode(
                     position.set(Position.KEY_HDOP, Double.parseDouble(value));
                     break;
                 case "batt":
-                    position.set(Position.KEY_BATTERY, value);
+                    position.set(Position.KEY_BATTERY, Double.parseDouble(value));
                     break;
                 default:
                     try {

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -219,7 +219,7 @@ private Position decodeTrccr(DeviceSession deviceSession, String sentence) {
         position.setCourse(parser.nextDouble(0));
         position.setAltitude(parser.nextDouble(0));
 
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
 
         return position;
     }

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -175,7 +175,7 @@ protected Object decode(
                             break;
 
                         case "bl":
-                            position.set(Position.KEY_BATTERY, value);
+                            position.set(Position.KEY_BATTERY, Integer.parseInt(value));
                             break;
 
                         case "vo":

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -160,7 +160,7 @@ protected Object decode(
 
                     getLastLocation(position, null);
 
-                    position.set(Position.KEY_BATTERY, values[3]);
+                    position.set(Position.KEY_BATTERY_LEVEL, Integer.parseInt(values[3]));
 
                     return position;
                 }
@@ -193,7 +193,7 @@ protected Object decode(
 
             position.set(Position.KEY_SATELLITES, parser.nextInt(0));
             position.set(Position.KEY_RSSI, parser.nextInt(0));
-            position.set(Position.KEY_BATTERY, parser.nextInt(0));
+            position.set(Position.KEY_BATTERY_LEVEL, parser.nextInt(0));
 
             position.set("steps", parser.nextInt(0));
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -110,7 +110,7 @@ protected Object decode(
             position.set(Position.KEY_SATELLITES, satellites);
 
             position.set(Position.KEY_EVENT, parser.next());
-            position.set(Position.KEY_BATTERY, parser.next());
+            position.set(Position.KEY_BATTERY, parser.nextDouble(0));
             if (parser.hasNext()) {
                 position.set(Position.KEY_ODOMETER, parser.nextDouble(0) * 1000);
             }

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -152,7 +152,7 @@ protected Object decode(
             position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
         }
 
-        position.set(Position.KEY_BATTERY, parser.next());
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
         position.set(Position.KEY_RSSI, parser.next());
 
         if (!newFormat) {

File: src/org/traccar/protocol/Xt013ProtocolDecoder.java
Patch:
@@ -85,8 +85,8 @@ protected Object decode(
 
         position.set(Position.KEY_GPS, parser.next());
         position.set(Position.KEY_RSSI, parser.next());
-        position.set(Position.KEY_BATTERY, parser.next());
-        position.set(Position.KEY_CHARGE, parser.next());
+        position.set(Position.KEY_BATTERY, parser.nextDouble(0));
+        position.set(Position.KEY_CHARGE, parser.next().equals("1"));
 
         return position;
     }

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -166,7 +166,8 @@ protected Object decode(
                 }
             }
 
-        } else if (type.equals("UD") || type.equals("UD2") || type.equals("UD3") || type.equals("AL")) {
+        } else if (type.equals("UD") || type.equals("UD2") || type.equals("UD3")
+                || type.equals("AL") || type.equals("WT")) {
 
             if (type.equals("AL")) {
                 sendResponse(channel, manufacturer, id, "AL");

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(new WatchProtocol());
 
+        verifyPosition(decoder, text(
+                "[3G*6005412902*011F*WT,170517,133811,V,18.512200,N,73.7750283,E,0.00,0.0,0.0,0,92,82,4262,0,00000010,2,1,404,22,10125,8301,141,10125,13921,122,5,Skynet,28:c6:8e:be:87:c0,-60,Intel Wi-Fi,4c:60:de:32:3d:38,-70,Nirvanic-2,40:e3:d6:4a:d9:c2,-73,A4-Guest,40:e3:d6:4a:d9:c4,-73,A4Idatix,40:e3:d6:4a:d9:c3,-73,13.8]"));
+
         verifyPosition(decoder, text(
                 "[3G*8308406279*00CC*UD3,170417,190930,V,54.739618,N,25.273213,E,0.0,323.53,175.1,6,51,83,0,0,00000000,1,1,246,01,200,13242758,51,3,TEO-189835,00:8c:54:58:1d:64,-84,Cgates_7137,78:54:2e:e3:71:37,-85,ASUS,9c:5c:8e:b8:d4:78,-93]"));
 

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -206,7 +206,7 @@ protected Object decode(
 
             sendResponse(channel, manufacturer, id, "TKQ");
 
-        } else if (type.equals("PULSE")) {
+        } else if (type.equals("PULSE") || type.equals("heart")) {
 
             Position position = new Position();
             position.setProtocol(getProtocolName());

File: test/org/traccar/FilterHandlerTest.java
Patch:
@@ -22,11 +22,12 @@ public void setUp() {
         filtingHandler.setFilterInvalid(true);
         filtingHandler.setFilterZero(true);
         filtingHandler.setFilterDuplicate(true);
+        filtingHandler.setFilterFuture(5 * 60);
         filtingHandler.setFilterApproximate(true);
         filtingHandler.setFilterStatic(true);
         filtingHandler.setFilterDistance(10);
+        filtingHandler.setFilterMaxSpeed(500);
         filtingHandler.setFilterLimit(10);
-        filtingHandler.setFilterFuture(5 * 60);
     }
 
     @After

File: src/org/traccar/Main.java
Patch:
@@ -44,7 +44,7 @@ public static void main(String[] args) throws Exception {
             @Override
             public void run() {
                 try {
-                    Context.getDataManager().clearPositionsHistory();
+                    Context.getDataManager().clearHistory();
                 } catch (SQLException error) {
                     Log.warning(error);
                 }

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -22,6 +22,7 @@
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
 import org.traccar.model.Position;
+import org.traccar.helper.UnitsConverter;
 
 import java.net.SocketAddress;
 import java.util.regex.Pattern;

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -103,7 +103,7 @@ private void decodeFlags(Position position, int flags) {
             position.set(Position.KEY_ALARM, Position.ALARM_MOVEMENT);
         }
 
-        position.set(Position.KEY_RSSI, BitUtil.between(flags, 16, 20));
+        position.set(Position.KEY_RSSI, BitUtil.between(flags, 16, 21));
         position.set(Position.KEY_CHARGE, BitUtil.check(flags, 22));
     }
 

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
         verifyNull(decoder, text(
                 "!1,860719027585011"));
 
+        verifyPosition(decoder, text(
+                "!D,02/05/17,19:56:17,47.083542,15.482373,0,0,100001,479.3,100,4,9,0"));
+
         verifyPosition(decoder, text(
                 "!D,15/04/17,13:58:53,51.483067,-0.452548,60,180,140001,28.7,47,4,13,0"));
 

File: test/org/traccar/protocol/L100ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         L100ProtocolDecoder decoder = new L100ProtocolDecoder(new L100Protocol());
 
+        verifyPosition(decoder, binary(
+                "200141544c3836313639333033353238353235332c244750524d432c3032323034302c412c323935342e303438312c4e2c30373335332e313639342c452c302c3135302c3238303431372c2c2c2a33362c2330313131313031313030303030302c302c302c302c38322e39322c33372e39322c342e302c32332c3430342c37302c3136332c6231373841544c0265"));
+
         verifyPosition(decoder, binary(
                 "200141544c3335363839353033373533333734352c244750524d432c3131313731392e3030302c412c323833382e303034352c4e2c30373731332e333730372c452c302e30302c2c3132303831302c2c2c412a37352c2330313130303131313030313031302c4e2e432c4e2e432c4e2e432c31323334352e36372c33312e342c342e322c32312c3130302c3030302c3030303030312c303030303041544c027a"));
 

File: src/org/traccar/Context.java
Patch:
@@ -222,7 +222,7 @@ public static void init(String[] arguments) throws Exception {
             int cacheSize = config.getInteger("geocoder.cacheSize");
             switch (type) {
                 case "nominatim":
-                    geocoder = new NominatimGeocoder(url, key, cacheSize);
+                    geocoder = new NominatimGeocoder(url, key, language, cacheSize);
                     break;
                 case "gisgraphy":
                     geocoder = new GisgraphyGeocoder(url, cacheSize);

File: test/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -45,7 +45,7 @@ public void onFailure(Throwable e) {
     }
 
     public void testNominatim() throws InterruptedException {
-        Geocoder geocoder = new NominatimGeocoder(null, null, 0);
+        Geocoder geocoder = new NominatimGeocoder(null, null, null, 0);
 
         geocoder.getAddress(new AddressFormat(), 40.7337807, -73.9974401, new Geocoder.ReverseGeocoderCallback() {
             @Override

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -83,6 +83,7 @@ public MeitrackProtocolDecoder(MeitrackProtocol protocol) {
             .number("xx")
             .text("\r\n").optional()
             .compile();
+
     private String decodeAlarm(int event) {
         switch (event) {
             case 1:

File: src/org/traccar/database/DataManager.java
Patch:
@@ -547,4 +547,5 @@ public void unlinkUser(long userId, long managedUserId) throws SQLException {
                 .setLong("managedUserId", managedUserId)
                 .executeUpdate();
     }
+
 }

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -22,7 +22,6 @@
 import org.traccar.helper.Checksum;
 import org.traccar.helper.Log;
 import org.traccar.model.Command;
-import org.traccar.model.Device;
 
 import java.nio.charset.StandardCharsets;
 
@@ -56,7 +55,7 @@ private ChannelBuffer encodeContent(String content) {
     @Override
     protected Object encodeCommand(Command command) {
 
-        boolean alternative = Context.getDeviceManager().lookupAttributeBoolean(
+        boolean alternative = Context.getIdentityManager().lookupAttributeBoolean(
                 command.getDeviceId(), "gt06.alternative", false, true);
 
         switch (command.getType()) {

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -166,7 +166,7 @@ protected Object decode(
                 }
             }
 
-        } else if (type.equals("UD") || type.equals("UD2") || type.equals("AL")) {
+        } else if (type.equals("UD") || type.equals("UD2") || type.equals("UD3") || type.equals("AL")) {
 
             if (type.equals("AL")) {
                 sendResponse(channel, manufacturer, id, "AL");

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(new WatchProtocol());
 
+        verifyPosition(decoder, text(
+                "[3G*8308406279*00CC*UD3,170417,190930,V,54.739618,N,25.273213,E,0.0,323.53,175.1,6,51,83,0,0,00000000,1,1,246,01,200,13242758,51,3,TEO-189835,00:8c:54:58:1d:64,-84,Cgates_7137,78:54:2e:e3:71:37,-85,ASUS,9c:5c:8e:b8:d4:78,-93]"));
+
         verifyPosition(decoder, text(
                 "[SG*9051004074*0058*AL,120117,145602,V,40.058413,N,76.336618,W,11.519,188,99,00,01,80,0,50,00000000,0,1,0,0,,10]"));
 

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -26,7 +26,6 @@
 import org.jxls.transform.poi.PoiTransformer;
 import org.jxls.util.TransformerFactory;
 import org.traccar.Context;
-import org.traccar.helper.Log;
 import org.traccar.model.Position;
 
 import java.io.IOException;

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Anton Tananaev (anton@traccar.org)
+ * Copyright 2013 - 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ public Tlt2hProtocolDecoder(Tlt2hProtocol protocol) {
     private static final Pattern PATTERN_POSITION = new PatternBuilder()
             .number("#(x+)?")                    // cell info
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
+            .number("(dd)(dd)(dd).d+,")          // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")
@@ -91,7 +91,7 @@ protected Object decode(
                 parser.next(); // base station info
 
                 DateBuilder dateBuilder = new DateBuilder()
-                        .setTime(parser.nextInt(), parser.nextInt(), parser.nextInt(), parser.nextInt());
+                        .setTime(parser.nextInt(), parser.nextInt(), parser.nextInt());
 
                 position.setValid(parser.next().equals("A"));
                 position.setLatitude(parser.nextCoordinate());

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -184,7 +184,9 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             .number("(d+),")
             .number("(d+)#")
             .or()
-            .any()
+            .expression(",.*")
+            .or()
+            .text("#")
             .groupEnd()
             .compile();
 

File: src/org/traccar/protocol/PricolProtocolDecoder.java
Patch:
@@ -63,11 +63,11 @@ protected Object decode(
 
         position.setValid(true);
 
-        double lat = buf.getUnsignedShort(buf.readerIndex()) / 100;
+        double lat = (double) (buf.getUnsignedShort(buf.readerIndex()) / 100);
         lat += (buf.readUnsignedShort() % 100 * 10000 + buf.readUnsignedShort()) / 600000.0;
         position.setLatitude(buf.readUnsignedByte() == 'S' ? -lat : lat);
 
-        double lon = buf.getUnsignedMedium(buf.readerIndex()) / 100;
+        double lon = (double) (buf.getUnsignedMedium(buf.readerIndex()) / 100);
         lon += (buf.readUnsignedMedium() % 100 * 10000 + buf.readUnsignedShort()) / 600000.0;
         position.setLongitude(buf.readUnsignedByte() == 'W' ? -lon : lon);
 

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -303,7 +303,7 @@ public Gl200ProtocolDecoder(Gl200Protocol protocol) {
             .number("(d{1,7}.d)?,")              // odometer
             .groupEnd()
             .number("(dddd)(dd)(dd)")            // date (yyyymmdd)
-            .number("(dd)(dd)(dd)").optional(2)  // time (hhmmss)
+            .number("(dd)(dd)(dd)")  // time (hhmmss)
             .text(",")
             .number("(xxxx)")                    // count number
             .text("$").optional()
@@ -457,7 +457,8 @@ private void decodeLocation(Position position, Parser parser) {
             int mnc = parser.nextInt();
             if (parser.hasNext(2)) {
                 position.setNetwork(new Network(CellTower.from(mcc, mnc, parser.nextInt(), parser.nextInt())));
-            } else {
+            }
+            if (parser.hasNext(2)) {
                 position.setNetwork(new Network(CellTower.from(mcc, mnc, parser.nextInt(16), parser.nextInt(16))));
             }
         }

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -67,7 +67,9 @@ private Position decode9(
         }
         position.setDeviceId(deviceSession.getDeviceId());
 
-        position.set(Position.KEY_VERSION_FW, values[index++]);
+        if (!type.equals("Alert") || protocolType == 0) {
+            position.set(Position.KEY_VERSION_FW, values[index++]);
+        }
 
         DateFormat dateFormat = new SimpleDateFormat("yyyyMMddHH:mm:ss");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class TaipProtocolDecoder extends BaseProtocolDecoder {
 
-    public TaipProtocolDecoder(TaipProtocol protocol, boolean sendResponse) {
+    public TaipProtocolDecoder(TaipProtocol protocol) {
         super(protocol);
     }
 

File: test/org/traccar/protocol/TaipProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class TaipProtocolDecoderTest extends ProtocolTest {
     @Test
     public void testDecode() throws Exception {
 
-        TaipProtocolDecoder decoder = new TaipProtocolDecoder(new TaipProtocol(), false);
+        TaipProtocolDecoder decoder = new TaipProtocolDecoder(new TaipProtocol());
 
         verifyPosition(decoder, text(
                 ">REV421942237017+1170957-0701880200000032;ID=356612022463055<"));

File: src/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -43,7 +43,7 @@ public CellocatorProtocolDecoder(CellocatorProtocol protocol) {
 
     private byte commandCount;
 
-    private void sendReply(Channel channel, long deviceId, byte packetNumber) {
+    private void sendReply(Channel channel, SocketAddress remoteAddress, long deviceId, byte packetNumber) {
         ChannelBuffer reply = ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN, 28);
         reply.writeByte('M');
         reply.writeByte('C');
@@ -64,7 +64,7 @@ private void sendReply(Channel channel, long deviceId, byte packetNumber) {
         reply.writeByte(checksum);
 
         if (channel != null) {
-            channel.write(reply);
+            channel.write(reply, remoteAddress);
         }
     }
 
@@ -96,7 +96,7 @@ protected Object decode(
         }
         byte packetNumber = buf.readByte();
 
-        sendReply(channel, deviceUniqueId, packetNumber);
+        sendReply(channel, remoteAddress, deviceUniqueId, packetNumber);
 
         if (type == MSG_CLIENT_STATUS) {
 

File: src/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -83,8 +83,6 @@ private String decodeAlarm(int eventId) {
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
-        org.traccar.helper.PatternUtil.MatchResult matchResult =
-                org.traccar.helper.PatternUtil.checkPattern(PATTERN.pattern(), (String) msg);
 
         Parser parser = new Parser(PATTERN, (String) msg);
         if (!parser.matches()) {

File: src/org/traccar/model/CellTower.java
Patch:
@@ -15,10 +15,10 @@
  */
 package org.traccar.model;
 
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.annotation.JsonInclude;
 import org.traccar.Context;
 
-@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
+@JsonInclude(JsonInclude.Include.NON_NULL)
 public class CellTower {
 
     public static CellTower from(int mcc, int mnc, int lac, long cid) {

File: src/org/traccar/model/Network.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.traccar.model;
 
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.annotation.JsonInclude;
 
 import java.util.ArrayList;
 import java.util.Collection;
 
-@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
+@JsonInclude(JsonInclude.Include.NON_NULL)
 public class Network {
 
     public Network() {

File: src/org/traccar/model/WifiAccessPoint.java
Patch:
@@ -15,9 +15,9 @@
  */
 package org.traccar.model;
 
-import com.fasterxml.jackson.databind.annotation.JsonSerialize;
+import com.fasterxml.jackson.annotation.JsonInclude;
 
-@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
+@JsonInclude(JsonInclude.Include.NON_NULL)
 public class WifiAccessPoint {
 
     public static WifiAccessPoint from(String macAddress, int signalStrength) {

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -182,8 +182,8 @@ protected Object decode(
         if (deviceSession != null) {
             if (sendResponse && channel != null) {
                 if (messageIndex != null) {
-                    String response = ">ACK;" + messageIndex + ";ID=" + uniqueId + ";";
-                    response += Checksum.nmea(response) + "<";
+                    String response = ">ACK;" + messageIndex + ";ID=" + uniqueId + ";*";
+                    response += String.format("%02X", Checksum.xor(response)) + "<";
                     channel.write(response);
                 } else {
                     channel.write(uniqueId);

File: src/org/traccar/database/DeviceManager.java
Patch:
@@ -131,7 +131,6 @@ private void updateDeviceCache(boolean force) throws SQLException {
                             device.setGeofenceIds(geofenceManager.getCurrentDeviceGeofences(lastPosition));
                         }
                     }
-                    device.setStatus(Device.STATUS_OFFLINE);
                 }
             }
             for (Iterator<Long> iterator = devicesById.keySet().iterator(); iterator.hasNext();) {

File: test/org/traccar/protocol/RuptelaProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         RuptelaProtocolDecoder decoder = new RuptelaProtocolDecoder(new RuptelaProtocol());
 
-        verifyPosition(decoder, binary(
+        verifyAttributes(decoder, binary(
                 "0011000315A07F440B1D07534554494f20636f6e66696775726174696f6e2064617461206f6b341C"));
 
         verifyPositions(decoder, binary(

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new Gl200Protocol());
 
-        verifyAttributes(decoder, text(
+        verifyPositions(decoder, text(
                 "+RESP:GTFRI,210102,354524044925825,,1,1,1,29,2.8,0,133.7,-90.203063,32.265473,20170318005208,,,,,10800,4,20170318005208,0002$"));
 
         verifyAttributes(decoder, text(

File: src/org/traccar/protocol/StarLinkProtocolDecoder.java
Patch:
@@ -91,6 +91,7 @@ protected Object decode(
         Position position = new Position();
         position.setProtocol(getProtocolName());
         position.setDeviceId(deviceSession.getDeviceId());
+        position.setValid(true);
 
         position.set(Position.KEY_INDEX, parser.nextInt());
 
@@ -123,7 +124,7 @@ protected Object decode(
                     position.setCourse(Integer.parseInt(data[i]));
                     break;
                 case "#ODO#":
-                    position.set(Position.KEY_ODOMETER, Integer.parseInt(data[i]));
+                    position.set(Position.KEY_ODOMETER, Long.parseLong(data[i]) * 1000);
                     break;
                 case "#IN1#":
                     position.set(Position.PREFIX_IN + 1, Integer.parseInt(data[i]));

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public Tk103ProtocolDecoder(Tk103Protocol protocol) {
             .number("(d+)(,)?")                  // device id
             .expression(".{4},?")                // command
             .number("d*")                        // imei?
-            .number("(dd)(dd)(dd),?")            // date (yymmdd or mmddyy?)
+            .number("(dd)(dd)(dd),?")            // date (mmddyy if comma-delimited, otherwise yyddmm)
             .expression("([AV]),?")              // validity
             .number("(d+)(dd.d+)")               // latitude
             .expression("([NS]),?")

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -54,7 +54,7 @@ public TotemProtocolDecoder(TotemProtocol protocol) {
             .number("(d+.d+)|")                  // hdop
             .number("(d+.d+)|")                  // vdop
             .number("(d+)|")                     // io status
-            .number("d+|")                       // battery time (units?)
+            .number("d+|")                       // battery time
             .number("d")                         // charged
             .number("(ddd)")                     // battery
             .number("(dddd)|")                   // power

File: src/org/traccar/protocol/AppelloProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public AppelloProtocolDecoder(AppelloProtocol protocol) {
             .number("(d+),")                     // imei
             .groupBegin()
             .number("(dd)(dd)(dd)")              // date (yymmdd)
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .or()
             .text("UTCTIME,")
             .groupEnd()

File: src/org/traccar/protocol/EnforaProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public EnforaProtocolDecoder(EnforaProtocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .text("GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.sss)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/HunterProProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public HunterProProtocolDecoder(HunterProProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .number(">(d+)<")                    // identifier
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public MeiligaoProtocolDecoder(MeiligaoProtocol protocol) {
     }
 
     private static final Pattern PATTERN = new PatternBuilder()
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.sss)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Pt3000ProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public Pt3000ProtocolDecoder(Pt3000Protocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .number("%(d+),")                    // imei
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/RitiProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public RitiProtocolDecoder(RitiProtocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public T55ProtocolDecoder(T55Protocol protocol) {
 
     private static final Pattern PATTERN_GPRMC = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")
@@ -59,7 +59,7 @@ public T55ProtocolDecoder(T55Protocol protocol) {
 
     private static final Pattern PATTERN_GPGGA = new PatternBuilder()
             .text("$GPGGA,")
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")
             .number("(d+)(dd.d+),")              // longitude
@@ -82,7 +82,7 @@ public T55ProtocolDecoder(T55Protocol protocol) {
     private static final Pattern PATTERN_TRCCR = new PatternBuilder()
             .text("$TRCCR,")
             .number("(dddd)(dd)(dd)")            // date (yyyymmdd)
-            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(-?d+.d+),")                // latitude
             .number("(-?d+.d+),")                // longitude

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public TotemProtocolDecoder(TotemProtocol protocol) {
             .number("(d+)|")                     // imei
             .expression("(..)")                  // alarm
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).d+,")          // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).d+,")          // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),([NS]),")       // latitude
             .number("(d+)(dd.d+),([EW]),")       // longitude

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -37,7 +37,7 @@ public XexunProtocolDecoder(XexunProtocol protocol, boolean full) {
 
     private static final Pattern PATTERN_BASIC = new PatternBuilder()
             .expression("G[PN]RMC,")
-            .number("(?:(dd)(dd)(dd))?.?d*,")    // time (hhmmss.sss)
+            .number("(?:(dd)(dd)(dd))?.?d*,")    // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(d*?)(d?d.d+),([NS]),")     // latitude
             .number("(d*?)(d?d.d+),([EW])?,")    // longitude

File: src/org/traccar/protocol/EnforaProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public EnforaProtocolDecoder(EnforaProtocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .text("GPRMC,")
-            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/GpsGateProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public GpsGateProtocolDecoder(GpsGateProtocol protocol) {
 
     private static final Pattern PATTERN_GPRMC = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?(d+)?,")      // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?(ddd)?,")     // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Gt30ProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public Gt30ProtocolDecoder(Gt30Protocol protocol) {
             .expression("(.{14})")               // device id
             .number("x{4}")                      // type
             .expression("(.)?")                  // alarm
-            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public MeiligaoProtocolDecoder(MeiligaoProtocol protocol) {
     }
 
     private static final Pattern PATTERN = new PatternBuilder()
-            .number("(dd)(dd)(dd).?(d+)?,")      // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).?(ddd)?,")     // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/SanavProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public SanavProtocolDecoder(SanavProtocol protocol) {
             .number("(d+)")                      // imei
             .expression("&?rmc[:=]")
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -45,7 +45,7 @@ public Tlt2hProtocolDecoder(Tlt2hProtocol protocol) {
     private static final Pattern PATTERN_POSITION = new PatternBuilder()
             .number("#(x+)?")                    // cell info
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -37,7 +37,7 @@ public XexunProtocolDecoder(XexunProtocol protocol, boolean full) {
 
     private static final Pattern PATTERN_BASIC = new PatternBuilder()
             .expression("G[PN]RMC,")
-            .number("(?:(dd)(dd)(dd))?.(d+),")   // time (hhmmss.ms)
+            .number("(?:(dd)(dd)(dd))?.(ddd),")   // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(d*?)(d?d.d+),([NS]),")     // latitude
             .number("(d*?)(d?d.d+),([EW])?,")    // longitude

File: src/org/traccar/protocol/SiwiProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ protected Object decode(
         position.setAltitude(parser.nextDouble());
         position.setCourse(parser.nextInt());
 
-        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.HMS_DMY4, "IST"));
+        position.setTime(parser.nextDateTime(Parser.DateTimeFormat.HMS_DMY2, "IST"));
 
         return position;
     }

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -40,7 +40,7 @@ public CarTrackProtocolDecoder(CarTrackProtocol protocol) {
             .text("&A")
             .number("(dddd)")                    // command
             .text("&B")
-            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.dddd),")            // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public Pt502ProtocolDecoder(Pt502Protocol protocol) {
             .any().text("$")
             .expression("([^,]+),")              // type
             .number("(d+),")                     // id
-            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.dddd),")            // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/TrackboxProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@ public TrackboxProtocolDecoder(TrackboxProtocol protocol) {
     }
 
     private static final Pattern PATTERN = new PatternBuilder()
-            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.ms)
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.sss)
             .number("(dd)(dd.dddd)([NS]),")      // latitude
             .number("(ddd)(dd.dddd)([EW]),")     // longitude
             .number("(d+.d),")                   // hdop

File: src/org/traccar/protocol/AppelloProtocolDecoder.java
Patch:
@@ -35,8 +35,8 @@ public AppelloProtocolDecoder(AppelloProtocol protocol) {
             .text("FOLLOWIT,")                   // brand
             .number("(d+),")                     // imei
             .groupBegin()
-            .number("(dd)(dd)(dd)")              // date
-            .number("(dd)(dd)(dd).?d*,")         // time
+            .number("(dd)(dd)(dd)")              // date (yymmdd)
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
             .or()
             .text("UTCTIME,")
             .groupEnd()

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -34,8 +34,8 @@ public Ardi01ProtocolDecoder(Ardi01Protocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .number("(d+),")                     // imei
-            .number("(dddd)(dd)(dd)")            // date
-            .number("(dd)(dd)(dd),")             // time
+            .number("(dddd)(dd)(dd)")            // date (yyyymmdd)
+            .number("(dd)(dd)(dd),")             // time (hhmmss)
             .number("(-?d+.d+),")                // longitude
             .number("(-?d+.d+),")                // latitude
             .number("(d+.?d*),")                 // speed

File: src/org/traccar/protocol/ArnaviProtocolDecoder.java
Patch:
@@ -47,12 +47,12 @@ public ArnaviProtocolDecoder(ArnaviProtocol protocol) {
             .number("d+,d+,").optional()         // input 2
             .expression("[01],")                 // fix type
             .number("(d+),")                     // satellites
-            .number("(dd)(dd)(dd),")             // time
+            .number("(dd)(dd)(dd),")             // time (hhmmss)
             .number("(dd)(dd.d+)([NS]),")        // latitude
             .number("(ddd)(dd.d+)([EW]),")       // longitude
             .number("(d+.d+),")                  // speed
             .number("(d+.d+),")                  // course
-            .number("(dd)(dd)(dd)")              // date
+            .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .any()
             .compile();
 

File: src/org/traccar/protocol/AutoGradeProtocolDecoder.java
Patch:
@@ -37,12 +37,12 @@ public AutoGradeProtocolDecoder(AutoGradeProtocol protocol) {
             .text("(")
             .number("d{12}")                     // index
             .number("(d{15})")                   // imei
-            .number("(dd)(dd)(dd)")              // date
+            .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .expression("([AV])")                // validity
             .number("(d+)(dd.d+)([NS])")         // latitude
             .number("(d+)(dd.d+)([EW])")         // longitude
             .number("([d.]{5})")                 // speed
-            .number("(dd)(dd)(dd)")              // time
+            .number("(dd)(dd)(dd)")              // time (hhmmss)
             .number("([d.]{6})")                 // course
             .expression("(.)")                   // status
             .number("A(xxxx)")

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -40,7 +40,7 @@ public CarTrackProtocolDecoder(CarTrackProtocol protocol) {
             .text("&A")
             .number("(dddd)")                    // command
             .text("&B")
-            .number("(dd)(dd)(dd).(ddd),")       // time
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.dddd),")            // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/CarcellProtocolDecoder.java
Patch:
@@ -66,7 +66,7 @@ public CarcellProtocolDecoder(CarcellProtocol protocol) {
             .number("(d),")                      // painel
             .number("(d+),")                     // battery voltage
             .or()
-            .number("(dd),")                     // time
+            .number("(dd),")                     // time until delivery
             .expression("([AF])")                // panic
             .number("(d),")                      // aux
             .number("(d{2,4}),")                 // battery voltage

File: src/org/traccar/protocol/CarscopProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public CarscopProtocolDecoder(CarscopProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .text("*")
             .any()
-            .number("(dd)(dd)(dd)")              // time
+            .number("(dd)(dd)(dd)")              // time (hhmmss)
             .expression("([AV])")                // validity
             .number("(dd)(dd.dddd)")             // latitude
             .expression("([NS])")

File: src/org/traccar/protocol/EnforaProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public EnforaProtocolDecoder(EnforaProtocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .text("GPRMC,")
-            .number("(dd)(dd)(dd).(d+),")        // time
+            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/ExtremTracProtocolDecoder.java
Patch:
@@ -35,15 +35,15 @@ public ExtremTracProtocolDecoder(ExtremTracProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .text("$GPRMC,")
             .number("(d+),")                     // device id
-            .number("(dd)(dd)(dd).d+,")          // time
+            .number("(dd)(dd)(dd).d+,")          // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")
             .number("(d+)(dd.d+),")              // longitude
             .expression("([EW]),")
             .number("(d+.?d*),")                 // speed
             .number("(d+.?d*),")                 // course
-            .number("(dd)(dd)(dd),")             // date
+            .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .any()
             .compile();
 

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -121,15 +121,15 @@ public GoSafeProtocolDecoder(GoSafeProtocol protocol) {
             .number("d+,")                       // protocol version
             .number("(d+),")                     // imei
             .text("GPS:")
-            .number("(dd)(dd)(dd);")             // time
+            .number("(dd)(dd)(dd);")             // time (hhmmss)
             .number("d;").optional()             // fix type
             .expression("([AV]);")               // validity
             .number("([NS])(d+.d+);")            // latitude
             .number("([EW])(d+.d+);")            // longitude
             .number("(d+)?;")                    // speed
             .number("(d+);")                     // course
             .number("(d+.?d*)").optional()       // hdop
-            .number("(dd)(dd)(dd)")              // date
+            .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .any()
             .compile();
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -38,8 +38,8 @@ public Gps103ProtocolDecoder(Gps103Protocol protocol) {
             .text("imei:")
             .number("(d+),")                     // imei
             .expression("([^,]+),")              // alarm
-            .number("(dd)/?(dd)/?(dd) ?")        // local date
-            .number("(dd):?(dd)(?:dd)?,")        // local time
+            .number("(dd)/?(dd)/?(dd) ?")        // local date (yymmdd)
+            .number("(dd):?(dd)(?:dd)?,")        // local time (hhmmss)
             .expression("([^,]+)?,")             // rfid
             .expression("[FL],")                 // full / low
             .groupBegin()

File: src/org/traccar/protocol/GpsmtaProtocolDecoder.java
Patch:
@@ -34,7 +34,7 @@ public GpsmtaProtocolDecoder(GpsmtaProtocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .expression("([^ ]+) ")              // uid
-            .number("(d+) ")                     // time
+            .number("(d+) ")                     // time (unix time)
             .number("(d+.d+) ")                  // latitude
             .number("(d+.d+) ")                  // longitude
             .number("(d+) ")                     // speed

File: src/org/traccar/protocol/Gt30ProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public Gt30ProtocolDecoder(Gt30Protocol protocol) {
             .expression("(.{14})")               // device id
             .number("x{4}")                      // type
             .expression("(.)?")                  // alarm
-            .number("(dd)(dd)(dd).(d+),")        // time
+            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -149,7 +149,7 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             .number("(d+),")                     // imei
             .expression("[^,]+,")
             .any()
-            .number("(?:(dd)(dd)(dd))?,")        // time
+            .number("(?:(dd)(dd)(dd))?,")        // time (hhmmss)
             .expression("([AV])?,")              // validity
             .groupBegin()
             .number("-(d+)-(d+.d+),")            // latitude
@@ -176,7 +176,7 @@ private Position decodeBinary(ChannelBuffer buf, Channel channel, SocketAddress
             .expression("..,")                   // manufacturer
             .number("(d+),")                     // imei
             .text("NBR,")
-            .number("(dd)(dd)(dd),")             // time
+            .number("(dd)(dd)(dd),")             // time (hhmmss)
             .number("(d+),")                     // mcc
             .number("(d+),")                     // mnc
             .number("d+,")                       // gsm delay time

File: src/org/traccar/protocol/HunterProProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public HunterProProtocolDecoder(HunterProProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .number(">(d+)<")                    // identifier
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/KenjiProtocolDecoder.java
Patch:
@@ -39,13 +39,13 @@ public KenjiProtocolDecoder(KenjiProtocol protocol) {
             .number("M(x{6}),")                  // alarm
             .number("O(x{4}),")                  // output
             .number("I(x{4}),")                  // input
-            .number("D(dd)(dd)(dd),")            // time
+            .number("D(dd)(dd)(dd),")            // time (hhmmss)
             .expression("([AV]),")               // valid
             .number("([NS])(dd)(dd.d+),")        // latitude
             .number("([EW])(ddd)(dd.d+),")       // longitude
             .number("T(d+.d+),")                 // speed
             .number("H(d+.d+),")                 // course
-            .number("Y(dd)(dd)(dd),")            // date
+            .number("Y(dd)(dd)(dd),")            // date (ddmmyy)
             .number("G(d+)")                     // satellites
             .any()
             .compile();

File: src/org/traccar/protocol/L100ProtocolDecoder.java
Patch:
@@ -40,15 +40,15 @@ public L100ProtocolDecoder(L100Protocol protocol) {
             .text("ATL")
             .number("(d{15}),")                  // imei
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).ddd,")         // time
+            .number("(dd)(dd)(dd).ddd,")         // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")
             .number("(ddd)(dd.d+),")             // longitude
             .expression("([EW]),")
             .number("(d+.?d*)?,")                // speed
             .number("(d+.?d*)?,")                // course
-            .number("(dd)(dd)(dd),")             // date
+            .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .any()
             .text("#")
             .number("([01]+),")                  // io status

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public LaipacProtocolDecoder(LaipacProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .text("$AVRMC,")
             .expression("([^,]+),")              // identifier
-            .number("(dd)(dd)(dd),")             // time
+            .number("(dd)(dd)(dd),")             // time (hhmmss)
             .expression("([AVRPavrp]),")         // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public MegastekProtocolDecoder(MegastekProtocol protocol) {
 
     private static final Pattern PATTERN_GPRMC = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).d+,")          // time
+            .number("(dd)(dd)(dd).d+,")          // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),([NS]),")       // latitude
             .number("(d+)(dd.d+),([EW]),")       // longitude

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public MeiligaoProtocolDecoder(MeiligaoProtocol protocol) {
     }
 
     private static final Pattern PATTERN = new PatternBuilder()
-            .number("(dd)(dd)(dd).?(d+)?,")      // time
+            .number("(dd)(dd)(dd).?(d+)?,")      // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Pt3000ProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public Pt3000ProtocolDecoder(Pt3000Protocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .number("%(d+),")                    // imei
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -41,15 +41,15 @@ public Pt502ProtocolDecoder(Pt502Protocol protocol) {
             .any().text("$")
             .expression("([^,]+),")              // type
             .number("(d+),")                     // id
-            .number("(dd)(dd)(dd).(ddd),")       // time
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.dddd),")            // latitude
             .expression("([NS]),")
             .number("(ddd)(dd.dddd),")           // longitude
             .expression("([EW]),")
             .number("(d+.d+)?,")                 // speed
             .number("(d+.d+)?,")                 // course
-            .number("(dd)(dd)(dd),,,")           // date
+            .number("(dd)(dd)(dd),,,")           // date (ddmmyy)
             .expression("./")
             .expression("([01])+,")              // input
             .expression("([01])+/")              // output

File: src/org/traccar/protocol/RitiProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public RitiProtocolDecoder(RitiProtocol protocol) {
 
     private static final Pattern PATTERN = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/SanavProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public SanavProtocolDecoder(SanavProtocol protocol) {
             .number("(d+)")                      // imei
             .expression("&?rmc[:=]")
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).(d+),")        // time
+            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/Stl060ProtocolDecoder.java
Patch:
@@ -37,8 +37,8 @@ public Stl060ProtocolDecoder(Stl060Protocol protocol) {
             .number("(d+),")                     // imei
             .text("D001,")                       // type
             .expression("[^,]*,")                // vehicle
-            .number("(dd)/(dd)/(dd),")           // date
-            .number("(dd):(dd):(dd),")           // time
+            .number("(dd)/(dd)/(dd),")           // date (dd/mm/yy)
+            .number("(dd):(dd):(dd),")           // time (hh:mm:ss)
             .number("(dd)(dd).?(d+)([NS]),")     // latitude
             .number("(ddd)(dd).?(d+)([EW]),")    // longitude
             .number("(d+.?d*),")                 // speed

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -36,15 +36,15 @@ public T55ProtocolDecoder(T55Protocol protocol) {
 
     private static final Pattern PATTERN_GPRMC = new PatternBuilder()
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).?d*,")         // time
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(dd)(dd.d+),")              // latitude
             .expression("([NS]),")
             .number("(d{2,3})(dd.d+),")          // longitude
             .expression("([EW]),")
             .number("(d+.?d*)?,")                // speed
             .number("(d+.?d*)?,")                // course
-            .number("(dd)(dd)(dd),")             // date
+            .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .expression("[^*]+")
             .text("*")
             .expression("[^,]+")
@@ -59,7 +59,7 @@ public T55ProtocolDecoder(T55Protocol protocol) {
 
     private static final Pattern PATTERN_GPGGA = new PatternBuilder()
             .text("$GPGGA,")
-            .number("(dd)(dd)(dd).?d*,")         // time
+            .number("(dd)(dd)(dd).?d*,")         // time (hhmmss.ms)
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")
             .number("(d+)(dd.d+),")              // longitude

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -49,7 +49,7 @@ public Tk102ProtocolDecoder(Tk102Protocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .text("(")
             .expression("[A-Z]+")
-            .number("(dd)(dd)(dd)")              // time
+            .number("(dd)(dd)(dd)")              // time (hhmmss)
             .expression("([AV])")                // validity
             .number("(dd)(dd.dddd)([NS])")       // latitude
             .number("(ddd)(dd.dddd)([EW])")      // longitude

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -41,14 +41,14 @@ public Tk103ProtocolDecoder(Tk103Protocol protocol) {
             .number("(d+)(,)?")                  // device id
             .expression(".{4},?")                // command
             .number("d*")                        // imei?
-            .number("(dd)(dd)(dd),?")            // date
+            .number("(dd)(dd)(dd),?")            // date (yymmdd or mmddyy?)
             .expression("([AV]),?")              // validity
             .number("(d+)(dd.d+)")               // latitude
             .expression("([NS]),?")
             .number("(d+)(dd.d+)")               // longitude
             .expression("([EW]),?")
             .number("(d+.d)(?:d*,)?")            // speed
-            .number("(dd)(dd)(dd),?")            // time
+            .number("(dd)(dd)(dd),?")            // time (hhmmss)
             .number("(d+.?d{1,2}),?")            // course
             .number("(?:([01]{8})|(x{8}))?,?")   // state
             .number("(?:L(x+))?")                // odometer

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -45,7 +45,7 @@ public Tlt2hProtocolDecoder(Tlt2hProtocol protocol) {
     private static final Pattern PATTERN_POSITION = new PatternBuilder()
             .number("#(x+)?")                    // cell info
             .text("$GPRMC,")
-            .number("(dd)(dd)(dd).(d+),")        // time
+            .number("(dd)(dd)(dd).(d+),")        // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d+)(dd.d+),")              // latitude
             .expression("([NS]),")

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -54,7 +54,7 @@ public TotemProtocolDecoder(TotemProtocol protocol) {
             .number("(d+.d+)|")                  // hdop
             .number("(d+.d+)|")                  // vdop
             .number("(d+)|")                     // io status
-            .number("d+|")                       // time
+            .number("d+|")                       // battery time (units?)
             .number("d")                         // charged
             .number("(ddd)")                     // battery
             .number("(dddd)|")                   // power

File: src/org/traccar/protocol/TrackboxProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@ public TrackboxProtocolDecoder(TrackboxProtocol protocol) {
     }
 
     private static final Pattern PATTERN = new PatternBuilder()
-            .number("(dd)(dd)(dd).(ddd),")       // time
+            .number("(dd)(dd)(dd).(ddd),")       // time (hhmmss.ms)
             .number("(dd)(dd.dddd)([NS]),")      // latitude
             .number("(ddd)(dd.dddd)([EW]),")     // longitude
             .number("(d+.d),")                   // hdop
@@ -42,7 +42,7 @@ public TrackboxProtocolDecoder(TrackboxProtocol protocol) {
             .number("(d+.d+),")                  // course
             .number("d+.d+,")                    // speed (kph)
             .number("(d+.d+),")                  // speed (knots)
-            .number("(dd)(dd)(dd),")             // date
+            .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .number("(d+)")                      // satellites
             .compile();
 

File: src/org/traccar/protocol/TrvProtocolDecoder.java
Patch:
@@ -38,14 +38,14 @@ public TrvProtocolDecoder(TrvProtocol protocol) {
     private static final Pattern PATTERN = new PatternBuilder()
             .text("TRV")
             .number("APdd")
-            .number("(dd)(dd)(dd)")              // date
+            .number("(dd)(dd)(dd)")              // date (yymmdd)
             .expression("([AV])")                // validity
             .number("(dd)(dd.d+)")               // latitude
             .expression("([NS])")
             .number("(ddd)(dd.d+)")              // longitude
             .expression("([EW])")
             .number("(ddd.d)")                   // speed
-            .number("(dd)(dd)(dd)")              // time
+            .number("(dd)(dd)(dd)")              // time (hhmmss)
             .number("([d.]{6})")                 // course
             .number("(ddd)")                     // gsm
             .number("(ddd)")                     // satellites

File: src/org/traccar/protocol/Tt8850ProtocolDecoder.java
Patch:
@@ -55,8 +55,8 @@ public Tt8850ProtocolDecoder(Tt8850Protocol protocol) {
             .number("(xxxx)?,")                  // lac
             .number("(xxxx)?,")                  // cell
             .any()
-            .number("(dddd)(dd)(dd)")            // date
-            .number("(dd)(dd)(dd),")             // time
+            .number("(dddd)(dd)(dd)")            // date (yyyymmdd)
+            .number("(dd)(dd)(dd),")             // time (hhmmss)
             .number("(xxxx)")
             .compile();
 

File: src/org/traccar/protocol/UproProtocolDecoder.java
Patch:
@@ -50,13 +50,13 @@ public UproProtocolDecoder(UproProtocol protocol) {
             .compile();
 
     private static final Pattern PATTERN_LOCATION = new PatternBuilder()
-            .number("(dd)(dd)(dd)")              // time
+            .number("(dd)(dd)(dd)")              // time (hhmmss)
             .number("(dd)(dd)(dddd)")            // latitude
             .number("(ddd)(dd)(dddd)")           // longitude
             .number("(d)")                       // flags
             .number("(dd)")                      // speed
             .number("(dd)")                      // course
-            .number("(dd)(dd)(dd)")              // date
+            .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .compile();
 
     private void decodeLocation(Position position, String data) {

File: src/org/traccar/protocol/V680ProtocolDecoder.java
Patch:
@@ -47,8 +47,8 @@ public V680ProtocolDecoder(V680Protocol protocol) {
             .number("(d+.d+),([NS]),")           // latitude
             .number("(d+.d+),")                  // speed
             .number("(d+.?d*)?#")                // course
-            .number("(dd)(dd)(dd)#")             // date
-            .number("(dd)(dd)(dd)")              // time
+            .number("(dd)(dd)(dd)#")             // date (ddmmyy)
+            .number("(dd)(dd)(dd)")              // time (hhmmss)
             .any()
             .compile();
 

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -37,13 +37,13 @@ public XexunProtocolDecoder(XexunProtocol protocol, boolean full) {
 
     private static final Pattern PATTERN_BASIC = new PatternBuilder()
             .expression("G[PN]RMC,")
-            .number("(?:(dd)(dd)(dd))?.(d+),")   // time
+            .number("(?:(dd)(dd)(dd))?.(d+),")   // time (hhmmss.ms)
             .expression("([AV]),")               // validity
             .number("(d*?)(d?d.d+),([NS]),")     // latitude
             .number("(d*?)(d?d.d+),([EW])?,")    // longitude
             .number("(d+.?d*),")                 // speed
             .number("(d+.?d*)?,")                // course
-            .number("(?:(dd)(dd)(dd))?,")        // date
+            .number("(?:(dd)(dd)(dd))?,")        // date (ddmmyy)
             .expression("[^*]*").text("*")
             .number("xx")                        // checksum
             .expression("\\r\\n").optional()

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -38,8 +38,8 @@ public XirgoProtocolDecoder(XirgoProtocol protocol) {
             .text("$$")
             .number("(d+),")                     // imei
             .number("(d+),")                     // event
-            .number("(dddd)/(dd)/(dd),")         // date
-            .number("(dd):(dd):(dd),")           // time
+            .number("(dddd)/(dd)/(dd),")         // date (yyyy/mm/dd)
+            .number("(dd):(dd):(dd),")           // time (hh:mm:ss)
             .number("(-?d+.?d*),")               // latitude
             .number("(-?d+.?d*),")               // longitude
             .number("(-?d+.?d*),")               // altitude

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -49,7 +49,7 @@ public MeitrackProtocolDecoder(MeitrackProtocol protocol) {
             .number("(d+),")                     // event
             .number("(-?d+.d+),")                // latitude
             .number("(-?d+.d+),")                // longitude
-            .number("(dd)(dd)(dd)")              // date (ddmmyy)
+            .number("(dd)(dd)(dd)")              // date (yymmdd)
             .number("(dd)(dd)(dd),")             // time (hhmmss)
             .number("([AV]),")                   // validity
             .number("(d+),")                     // satellites

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -103,7 +103,7 @@ public TotemProtocolDecoder(TotemProtocol protocol) {
             .number("xx")                        // length
             .number("(d+)|")                     // imei
             .expression("(..)")                  // alarm type
-            .number("(dd)(dd)(dd)")              // date (yymmdd)
+            .number("(dd)(dd)(dd)")              // date (ddmmyy)
             .number("(dd)(dd)(dd)")              // time (hhmmss)
             .number("(xxxx)")                    // io status
             .expression("[01]")                  // charging

File: src/org/traccar/protocol/StarLinkProtocolDecoder.java
Patch:
@@ -102,7 +102,7 @@ protected Object decode(
                 case "#EDT#":
                     position.setDeviceTime(dateFormat.parse(data[i]));
                     break;
-                case "EID":
+                case "#EID#":
                     position.set(Position.KEY_EVENT, data[i]);
                     break;
                 case "#PDT#":

File: src/org/traccar/protocol/StarLinkProtocolDecoder.java
Patch:
@@ -102,7 +102,7 @@ protected Object decode(
                 case "#EDT#":
                     position.setDeviceTime(dateFormat.parse(data[i]));
                     break;
-                case "EID":
+                case "#EID#":
                     position.set(Position.KEY_EVENT, data[i]);
                     break;
                 case "#PDT#":

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -503,8 +503,6 @@ private void decodeF(Position position, ChannelBuffer buf, int selector) {
 
         getLastLocation(position, null);
 
-        buf.readUnsignedShort(); // event
-
         if ((selector & 0x0004) != 0) {
             buf.skipBytes(4); // snapshot time
         }

File: test/org/traccar/protocol/AplicomProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(new AplicomProtocol());
 
+        verifyAttributes(decoder, binary(
+                "46c30144f667c1711f00340007ff750058b8f77701037c06b8000000330033000000000b760000425e0100640000b3a90185d5823155000131070204000219641004"));
+
         verifyAttributes(decoder, binary(
                 "46c30144f667c1711f00340007ff75005891601401025707b50236003b003b003500000a9300006bd50100640000a5250167d2f9034c01010107020400021a901004"));
 

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -415,7 +415,7 @@ public Object lookupPreference(long userId, String key, Object defaultValue) {
             }
         } catch (NoSuchMethodException | SecurityException | IllegalAccessException
                 | IllegalArgumentException | InvocationTargetException exception) {
-          return defaultValue;
+            return defaultValue;
         }
         if (server.getForceSettings()) {
             preference = serverPreference != null ? serverPreference : userPreference;

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -188,15 +188,15 @@ public ChannelPipeline getPipeline() {
 
         addSpecificHandlers(pipeline);
 
+        if (geolocationHandler != null) {
+            pipeline.addLast("location", geolocationHandler);
+        }
         if (hemisphereHandler != null) {
             pipeline.addLast("hemisphere", hemisphereHandler);
         }
         if (geocoderHandler != null) {
             pipeline.addLast("geocoder", geocoderHandler);
         }
-        if (geolocationHandler != null) {
-            pipeline.addLast("location", geolocationHandler);
-        }
         pipeline.addLast("remoteAddress", new RemoteAddressHandler());
 
         addDynamicHandlers(pipeline);

File: src/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -162,6 +162,7 @@ public void getLastLocation(Position position, Date deviceTime) {
                 position.setAltitude(last.getAltitude());
                 position.setSpeed(last.getSpeed());
                 position.setCourse(last.getCourse());
+                position.setAccuracy(last.getAccuracy());
             } else {
                 position.setFixTime(new Date(0));
             }

File: src/org/traccar/protocol/SiwiProtocolDecoder.java
Patch:
@@ -88,6 +88,7 @@ protected Object decode(
         position.setLatitude(parser.nextDouble());
         position.setLongitude(parser.nextDouble());
         position.setAltitude(parser.nextDouble());
+        position.setCourse(parser.nextInt());
 
         DateBuilder dateBuilder = new DateBuilder(TimeZone.getTimeZone("IST"))
                 .setTime(parser.nextInt(), parser.nextInt(), parser.nextInt())

File: test/org/traccar/protocol/SiwiProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         SiwiProtocolDecoder decoder = new SiwiProtocolDecoder(new SiwiProtocol());
 
+        verifyPosition(decoder, text(
+                "$SIWI,9803932,23992,E,0,,0,1,1,0,5055,0,5,A,22.289887,70.807192,152,168,102922,090317,28,1,12,5,4098,1,0,13,0,0,0,1.0,3.1CHKS_4.82,0!"));
+
         verifyPosition(decoder, text(
                 "$SIWI,2845,1320,Q,10,airtelgprs.com,1,1,0,0,876578,43,9,A,19.0123456,72.65347,45,0,055929,071107,22,5,1,0,3700,1210,0,2500,1230,321,0,1.1,4.0,1!"));
 

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -234,8 +234,8 @@ private void decodeD(Position position, ChannelBuffer buf, int selector, int eve
         }
 
         if ((selector & 0x8000) != 0) {
-            position.set(Position.KEY_POWER, buf.readUnsignedShort() / 1000.0);
-            position.set(Position.KEY_BATTERY, buf.readUnsignedShort());
+            position.set(Position.KEY_POWER, buf.readUnsignedShort() * 0.001);
+            position.set(Position.KEY_BATTERY, buf.readUnsignedShort() * 0.001);
         }
 
         // Pulse rate 1

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -295,7 +295,7 @@ private Position decodeObd(Position position, String sentence) {
         position.set("engineLoad", parser.nextDouble());
         position.set(Position.PREFIX_TEMP + 1, parser.nextInt());
         position.set(Position.KEY_FUEL_CONSUMPTION, parser.nextDouble());
-        position.set("averageFuelConsumition", parser.nextDouble());
+        position.set("averageFuelConsumption", parser.nextDouble());
         position.set("drivingRange", parser.nextDouble());
         position.set(Position.KEY_ODOMETER, parser.nextDouble());
         position.set("singleFuelConsumption", parser.nextDouble());

File: src/org/traccar/BaseProtocol.java
Patch:
@@ -103,7 +103,7 @@ public void sendSmsCommand(String phone, Command command) throws RecoverablePduE
                         "Command " + command.getType() + " is not supported in protocol " + getName());
             }
         } else {
-            throw new RuntimeException("Smpp client is not enabled");
+            throw new RuntimeException("SMPP client is not enabled");
         }
     }
 

File: src/org/traccar/smpp/ClientSmppSessionHandler.java
Patch:
@@ -68,7 +68,7 @@ public PduResponse firePduRequestReceived(PduRequest request) {
 
     @Override
     public void fireChannelUnexpectedlyClosed() {
-        Log.warning("Smpp session channel unexpectedly closed");
+        Log.warning("SMPP session channel unexpectedly closed");
         smppClient.scheduleReconnect();
     }
 }

File: src/org/traccar/protocol/AquilaProtocolDecoder.java
Patch:
@@ -132,7 +132,7 @@ protected Object decode(
 
         position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
 
-        position.set(Position.KEY_ODOMETER, parser.next());
+        position.set(Position.KEY_ODOMETER, parser.nextInt());
 
         if (parser.hasNext(9)) {
 

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -124,7 +124,7 @@ private Position decodeRegularMessage(Channel channel, SocketAddress remoteAddre
 
         position.setAltitude(parser.nextDouble());
 
-        position.set(Position.KEY_ODOMETER, parser.next());
+        position.set(Position.KEY_ODOMETER, parser.nextInt());
         position.set("runtime", parser.next());
 
         position.setNetwork(new Network(

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -290,7 +290,7 @@ protected Object decode(
             position.setCourse(parser.nextDouble());
             position.setSpeed(parser.nextDouble());
             position.set("pdop", parser.next());
-            position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_ODOMETER, parser.nextInt() * 1000);
 
             position.setLatitude(parser.nextCoordinate());
             position.setLongitude(parser.nextCoordinate());

File: src/org/traccar/database/QueryBuilder.java
Patch:
@@ -15,7 +15,6 @@
  */
 package org.traccar.database;
 
-import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.fasterxml.jackson.core.JsonProcessingException;
 import org.traccar.Context;
 import org.traccar.helper.Log;
@@ -262,7 +261,7 @@ public QueryBuilder setObject(Object object) throws SQLException {
 
         for (Method method : methods) {
             if (method.getName().startsWith("get") && method.getParameterTypes().length == 0
-                    && !method.isAnnotationPresent(JsonIgnore.class)) {
+                    && !method.isAnnotationPresent(QueryIgnore.class)) {
                 String name = method.getName().substring(3);
                 try {
                     if (method.getReturnType().equals(boolean.class)) {
@@ -427,7 +426,7 @@ public <T> Collection<T> executeQuery(Class<T> clazz) throws SQLException {
 
                     for (final Method method : methods) {
                         if (method.getName().startsWith("set") && method.getParameterTypes().length == 1
-                                && !method.isAnnotationPresent(JsonIgnore.class)) {
+                                && !method.isAnnotationPresent(QueryIgnore.class)) {
 
                             final String name = method.getName().substring(3);
 

File: src/org/traccar/model/Calendar.java
Patch:
@@ -32,6 +32,7 @@
 import net.fortuna.ical4j.model.Dur;
 import net.fortuna.ical4j.model.Period;
 import net.fortuna.ical4j.model.component.CalendarComponent;
+import org.traccar.database.QueryIgnore;
 
 public class Calendar extends Extensible {
 
@@ -59,6 +60,7 @@ public void setData(byte[] data) throws IOException, ParserException {
 
     private net.fortuna.ical4j.model.Calendar calendar;
 
+    @QueryIgnore
     @JsonIgnore
     public net.fortuna.ical4j.model.Calendar getCalendar() {
         return calendar;
@@ -76,4 +78,5 @@ public boolean checkMoment(Date date) {
         }
         return false;
     }
+
 }

File: src/org/traccar/model/Geofence.java
Patch:
@@ -18,6 +18,7 @@
 import java.text.ParseException;
 
 import org.traccar.Context;
+import org.traccar.database.QueryIgnore;
 import org.traccar.geofence.GeofenceCircle;
 import org.traccar.geofence.GeofenceGeometry;
 import org.traccar.geofence.GeofencePolygon;
@@ -74,11 +75,13 @@ public void setArea(String area) throws ParseException {
 
     private GeofenceGeometry geometry;
 
+    @QueryIgnore
     @JsonIgnore
     public GeofenceGeometry getGeometry() {
         return geometry;
     }
 
+    @QueryIgnore
     @JsonIgnore
     public void setGeometry(GeofenceGeometry geometry) {
         area = geometry.toWkt();

File: src/org/traccar/reports/Events.java
Patch:
@@ -28,6 +28,7 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.apache.poi.ss.util.WorkbookUtil;
 import org.joda.time.DateTime;
 import org.jxls.area.Area;
 import org.jxls.builder.xls.XlsCommentAreaBuilder;
@@ -98,7 +99,7 @@ public static void getExcel(OutputStream outputStream,
             DeviceReport deviceEvents = new DeviceReport();
             Device device = Context.getIdentityManager().getDeviceById(deviceId);
             deviceEvents.setDeviceName(device.getName());
-            sheetNames.add(deviceEvents.getDeviceName());
+            sheetNames.add(WorkbookUtil.createSafeSheetName(deviceEvents.getDeviceName()));
             if (device.getGroupId() != 0) {
                 Group group = Context.getDeviceManager().getGroupById(device.getGroupId());
                 if (group != null) {

File: src/org/traccar/reports/Route.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Date;
 import java.util.List;
 
+import org.apache.poi.ss.util.WorkbookUtil;
 import org.joda.time.DateTime;
 import org.jxls.area.Area;
 import org.jxls.builder.xls.XlsCommentAreaBuilder;
@@ -67,7 +68,7 @@ public static void getExcel(OutputStream outputStream,
             DeviceReport deviceRoutes = new DeviceReport();
             Device device = Context.getIdentityManager().getDeviceById(deviceId);
             deviceRoutes.setDeviceName(device.getName());
-            sheetNames.add(deviceRoutes.getDeviceName());
+            sheetNames.add(WorkbookUtil.createSafeSheetName(deviceRoutes.getDeviceName()));
             if (device.getGroupId() != 0) {
                 Group group = Context.getDeviceManager().getGroupById(device.getGroupId());
                 if (group != null) {

File: src/org/traccar/reports/Trips.java
Patch:
@@ -26,6 +26,7 @@
 import java.util.Date;
 import java.util.List;
 
+import org.apache.poi.ss.util.WorkbookUtil;
 import org.joda.time.DateTime;
 import org.jxls.area.Area;
 import org.jxls.builder.xls.XlsCommentAreaBuilder;
@@ -201,7 +202,7 @@ public static void getExcel(OutputStream outputStream,
             DeviceReport deviceTrips = new DeviceReport();
             Device device = Context.getIdentityManager().getDeviceById(deviceId);
             deviceTrips.setDeviceName(device.getName());
-            sheetNames.add(deviceTrips.getDeviceName());
+            sheetNames.add(WorkbookUtil.createSafeSheetName(deviceTrips.getDeviceName()));
             if (device.getGroupId() != 0) {
                 Group group = Context.getDeviceManager().getGroupById(device.getGroupId());
                 if (group != null) {

File: src/org/traccar/protocol/IdplProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Anton Tananaev (anton@traccar.org)
+ * Copyright 2016 - 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -28,7 +28,7 @@
 public class IdplProtocol extends BaseProtocol {
 
     public IdplProtocol() {
-        super("ldpl");
+        super("idpl");
     }
 
     @Override

File: src/org/traccar/smpp/EnquireLinkTask.java
Patch:
@@ -43,13 +43,13 @@ public void run() {
                 smppSession.enquireLink(new EnquireLink(), enquireLinkTimeout);
             } catch (SmppTimeoutException | SmppChannelException
                     | RecoverablePduException | UnrecoverablePduException error) {
-                Log.warning("Enquire link failed, executing reconnect: " + error);
+                Log.warning("Enquire link failed, executing reconnect: ", error);
                 smppClient.reconnect();
             } catch (InterruptedException error) {
                 Log.info("Enquire link interrupted, probably killed by reconnecting");
             }
         } else {
-            Log.error("Enquire link running while session is not connected");
+            Log.warning("Enquire link running while session is not connected");
         }
     }
 

File: src/org/traccar/smpp/SmppClient.java
Patch:
@@ -193,7 +193,7 @@ public synchronized void sendMessageSync(String destAddress, String message) thr
             submit.setSourceAddress(new Address(sourceTon, sourceNpi, sourceAddress));
             submit.setDestAddress(new Address(destTon, destNpi, destAddress));
             submit.setRegisteredDelivery(SmppConstants.REGISTERED_DELIVERY_SMSC_RECEIPT_REQUESTED);
-            submit.setDataCoding((byte) dataCoding);
+            submit.setDataCoding(dataCoding);
             submit.setShortMessage(textBytes);
             SubmitSmResp submitResponce = getSession().submit(submit, submitTimeout);
             Log.debug("SMS submited, msg_id: " + submitResponce.getMessageId());

File: src/org/traccar/protocol/TmgProtocolDecoder.java
Patch:
@@ -61,8 +61,8 @@ public TmgProtocolDecoder(TmgProtocol protocol) {
             .expression("([01]+),")              // input
             .expression("([01]+),")              // output
             .expression("[01]+,")                // temper status
-            .number("(d+.?d*),")                 // adc1
-            .number("(d+.?d*),")                 // adc2
+            .number("(d+.?d*)[^,]*,")            // adc1
+            .number("(d+.?d*)[^,]*,")            // adc2
             .number("d+.?d*,")                   // trip meter
             .expression("([^,]*),")              // software version
             .expression("([^,]*),").optional()   // rfid

File: test/org/traccar/protocol/TmgProtocolDecoderTest.java
Patch:
@@ -38,7 +38,7 @@ public void testDecode() throws Exception {
                 "$nor,L,868324023777431,17012017,001523,4,2830.2939,N,07705.2527,E,0.0,50.96,236.5,1.05,11,21,IDEA CELLULAR L,18,DCDE,0,4.09,12.8,00000111,00000000,1111,00.0-00.0,00.0-0.0,3.59,01.02,#"));
 
         verifyPosition(decoder, text(
-                "$nor,L,869309999985699,24062015,094459,4,2826.1956,N,07659.7690,E,67.5,2.5,167,0.82,15,22,airtel,31,4441,1,4.1,12.7,00000011,00000011,1111,0.0,0.0, 21.3,SW00.01,#"));
+                "$nor,L,869309999985699,24062015,094459,4,2826.1956,N,07659.7690,E,67.5,2.5,167,0.82,15,22,airtel,31,4441,1,4.1,12.7,00000011,00000011,1111,0.0,0.0,21.3,SW00.01,#"));
 
     }
 

File: src/org/traccar/model/Geofence.java
Patch:
@@ -79,6 +79,7 @@ public GeofenceGeometry getGeometry() {
         return geometry;
     }
 
+    @JsonIgnore
     public void setGeometry(GeofenceGeometry geometry) {
         area = geometry.toWkt();
         this.geometry = geometry;

File: test/org/traccar/geocoder/GeocoderTest.java
Patch:
@@ -94,7 +94,7 @@ public void onFailure(Throwable e) {
     }
 
     public void testGeocodeFarm() throws InterruptedException {
-        Geocoder geocoder = new GeocodeFarmGeocoder(null, 0);
+        Geocoder geocoder = new GeocodeFarmGeocoder(null, null, 0);
 
         geocoder.getAddress(new AddressFormat(), 34.116302, -118.051519, new Geocoder.ReverseGeocoderCallback() {
             @Override

File: src/org/traccar/geocoder/NominatimGeocoder.java
Patch:
@@ -23,6 +23,7 @@ private static String formatUrl(String url, String key) {
         if (url == null) {
             url = "http://nominatim.openstreetmap.org/reverse";
         }
+        url += "?format=json&lat=%f&lon=%f&zoom=18&addressdetails=1";
         if (key != null) {
             url += "&key=" + key;
         }

File: src/org/traccar/model/Position.java
Patch:
@@ -26,7 +26,6 @@ public class Position extends Message {
     public static final String KEY_SATELLITES_VISIBLE = "satVisible";
     public static final String KEY_RSSI = "rssi";
     public static final String KEY_GPS = "gps";
-    public static final String KEY_FIX = "fix"; // GPS, GSM, none
     public static final String KEY_EVENT = "event";
     public static final String KEY_ALARM = "alarm";
     public static final String KEY_STATUS = "status";
@@ -100,7 +99,6 @@ public class Position extends Message {
     public static final String ALARM_FOOT_BRAKE = "footBrake";
     public static final String ALARM_OIL_LEAK = "oilLeak";
 
-
     private String protocol;
 
     public String getProtocol() {

File: src/org/traccar/model/Position.java
Patch:
@@ -86,7 +86,7 @@ public class Position extends Message {
     public static final String ALARM_GPS_ANTENNA_CUT = "gpsAntennaCut";
     public static final String ALARM_ACCIDENT = "accident";
     public static final String ALARM_TOW = "tow";
-    public static final String ALARM_ACCELETATION = "hardAcceleration";
+    public static final String ALARM_ACCELERATION = "hardAcceleration";
     public static final String ALARM_BREAKING = "hardBreaking";
     public static final String ALARM_FATIGUE_DRIVING = "fatigueDriving";
     public static final String ALARM_POWER_CUT = "powerCut";

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -65,7 +65,7 @@ private String decodeAlarm(String value) {
             case "TOW":
                 return Position.ALARM_TOW;
             case "HDA":
-                return Position.ALARM_ACCELETATION;
+                return Position.ALARM_ACCELERATION;
             case "HDB":
                 return Position.ALARM_BREAKING;
             case "FDA":

File: src/org/traccar/protocol/TzoneProtocolDecoder.java
Patch:
@@ -45,7 +45,7 @@ private String decodeAlarm(Short value) {
             case 0x14:
                 return Position.ALARM_BREAKING;
             case 0x15:
-                return Position.ALARM_ACCELETATION;
+                return Position.ALARM_ACCELERATION;
             case 0x30:
                 return Position.ALARM_PARKING;
             case 0x42:

File: src/org/traccar/helper/Hashing.java
Patch:
@@ -33,6 +33,7 @@ public final class Hashing {
         try {
             factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
         } catch (NoSuchAlgorithmException e) {
+            e.printStackTrace();
         }
     }
 

File: src/org/traccar/protocol/AisProtocolDecoder.java
Patch:
@@ -24,6 +24,7 @@
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Date;
 import java.util.HashMap;
@@ -110,15 +111,15 @@ protected Object decode(
 
                     if (count == 1) {
                         BitBuffer bits = new BitBuffer();
-                        bits.writeEncoded(parser.next().getBytes());
+                        bits.writeEncoded(parser.next().getBytes(StandardCharsets.US_ASCII));
                         position = decodePayload(channel, remoteAddress, bits);
                     } else {
                         BitBuffer bits = buffers.get(id);
                         if (bits == null) {
                             bits = new BitBuffer();
                             buffers.put(id, bits);
                         }
-                        bits.writeEncoded(parser.next().getBytes());
+                        bits.writeEncoded(parser.next().getBytes(StandardCharsets.US_ASCII));
                         if (count == index) {
                             position = decodePayload(channel, remoteAddress, bits);
                             buffers.remove(id);

File: src/org/traccar/protocol/TmgProtocolDecoder.java
Patch:
@@ -67,9 +67,6 @@ public TmgProtocolDecoder(TmgProtocol protocol) {
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
-        org.traccar.helper.PatternUtil.MatchResult matchResult =
-                org.traccar.helper.PatternUtil.checkPattern(PATTERN.pattern(), (String) msg);
-
         Parser parser = new Parser(PATTERN, (String) msg);
         if (!parser.matches()) {
             return null;

File: src/org/traccar/protocol/AquilaProtocolDecoder.java
Patch:
@@ -102,9 +102,6 @@ public AquilaProtocolDecoder(AquilaProtocol protocol) {
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
-        org.traccar.helper.PatternUtil.MatchResult matchResult =
-                org.traccar.helper.PatternUtil.checkPattern(PATTERN.pattern(), (String) msg);
-
         Parser parser = new Parser(PATTERN, (String) msg);
         if (!parser.matches()) {
             return null;

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -109,6 +109,7 @@ private void decodeParameter(Position position, int id, ChannelBuffer buf, int l
                         position.set(Position.PREFIX_IO + id, buf.readUnsignedInt());
                         break;
                     case 8:
+                    default:
                         position.set(Position.PREFIX_IO + id, buf.readLong());
                         break;
                 }

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new Gl200Protocol());
 
+        verifyNotNull(decoder, text(
+                "+RESP:GTWIF,210102,354524044608058,,4,c413e200ff14,-39,,,,c413e2010e55,-39,,,,c8d3ff04a837,-43,,,,42490f997c6d,-57,,,,,,,,100,20170201020055,0001$"));
+
         verifyNotNull(decoder, text(
                 "+RESP:GTWIF,210102,354524044484948,,1,08626693fb98,-36,,,,,,,,97,20170119071300,05E3$"));
 

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -151,6 +151,7 @@ public final void refreshPermissions() {
             Log.warning(error);
         }
 
+        deviceUsers.clear();
         for (Map.Entry<Long, Set<Long>> entry : devicePermissions.entrySet()) {
             for (long deviceId : entry.getValue()) {
                 getDeviceUsers(deviceId).add(entry.getKey());

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -119,6 +119,9 @@ protected Object decode(
                 case "altitude":
                     position.setAltitude(Double.parseDouble(value));
                     break;
+                case "accuracy":
+                    position.setAccuracy(Double.parseDouble(value));
+                    break;
                 case "hdop":
                     position.set(Position.KEY_HDOP, Double.parseDouble(value));
                     break;

File: test/org/traccar/ProtocolTest.java
Patch:
@@ -178,7 +178,7 @@ private void verifyDecodedPosition(Object decodedObject, boolean checkLocation,
             Assert.assertFalse("no attributes", attributes.isEmpty());
         }
 
-        if (position.getNetwork() != null) {
+        if (position.getNetwork() != null && position.getNetwork().getCellTowers() != null) {
             for (CellTower cellTower : position.getNetwork().getCellTowers()) {
                 checkInteger(cellTower.getMobileCountryCode(), 0, 999);
                 checkInteger(cellTower.getMobileNetworkCode(), 0, 999);

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         H02ProtocolDecoder decoder = new H02ProtocolDecoder(new H02Protocol());
 
+        verifyPosition(decoder, buffer(
+                "*HQ,4106012736,V1,224434,A,1827.3855,N,06705.7577,W,000.00,000,100117,FFFFFBFF,310,260,49101,1753,5#"));
+
         verifyAttributes(decoder, buffer(
                 "*HQ,4208150188,NBR,210249,260,6,0,7,1014,50675,37,1014,50633,27,1014,17933,18,1014,17231,15,1014,50632,12,1014,13211,11,1014,17031,10,281216,FFFFFBFF,2#"));
 

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(new WatchProtocol());
 
+        verifyPosition(decoder, text(
+                "[SG*9051004074*0058*AL,120117,145602,V,40.058413,N,76.336618,W,11.519,188,99,00,01,80,0,50,00000000,0,1,0,0,,10]"));
+
         verifyPosition(decoder, text(
                 "[SG*9051000884*009B*UD,030117,161129,V,52.745450,N,0.369512,,0.1481,000,99,00,70,5,0,50,00000000,5,1,234,15,893,3611,135,893,3612,132,893,3993,131,893,30986,129,893,40088,126,,00]"));
 

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -92,8 +92,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)
         closeChannel(e.getChannel());
 
         BaseProtocolDecoder protocolDecoder = (BaseProtocolDecoder) ctx.getPipeline().get("objectDecoder");
-        if (ctx.getPipeline().get("httpDecoder") == null &&
-                !connectionlessProtocols.contains(protocolDecoder.getProtocolName())) {
+        if (ctx.getPipeline().get("httpDecoder") == null
+                && !connectionlessProtocols.contains(protocolDecoder.getProtocolName())) {
             Context.getConnectionManager().removeActiveDevice(e.getChannel());
         }
     }

File: src/org/traccar/CopyAttributesHandler.java
Patch:
@@ -33,7 +33,7 @@ protected Position handlePosition(Position position) {
                 position.getDeviceId(), "processing.copyAttributes", null, true);
         Position last = getLastPosition(position.getDeviceId());
         if (attributesString != null && last != null) {
-            for (String attribute : attributesString.split(" ")) {
+            for (String attribute : attributesString.split("[ ,]")) {
                 if (last.getAttributes().containsKey(attribute) && !position.getAttributes().containsKey(attribute)) {
                     position.getAttributes().put(attribute, last.getAttributes().get(attribute));
                 }

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2016 Anton Tananaev (anton@traccar.org)
+ * Copyright 2012 - 2017 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -305,8 +305,6 @@ protected Object decode(
         ChannelBuffer buf = (ChannelBuffer) msg;
         String marker = buf.toString(0, 1, StandardCharsets.US_ASCII);
 
-        // handle X mode?
-
         if (marker.equals("*")) {
             String sentence = buf.toString(StandardCharsets.US_ASCII);
             if (sentence.contains(",NBR,")) {
@@ -316,6 +314,8 @@ protected Object decode(
             }
         } else if (marker.equals("$")) {
             return decodeBinary(buf, channel, remoteAddress);
+        } else if (marker.equals("X")) {
+            return null; // X mode
         }
 
         return null;

File: src/org/traccar/notification/NotificationFormatter.java
Patch:
@@ -16,6 +16,7 @@
 package org.traccar.notification;
 
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.velocity.Template;
 import org.apache.velocity.VelocityContext;
@@ -49,10 +50,10 @@ public static MailMessage formatMessage(long userId, Event event, Position posit
 
         Template template = null;
         try {
-            template = Context.getVelocityEngine().getTemplate(event.getType() + ".vm");
+            template = Context.getVelocityEngine().getTemplate(event.getType() + ".vm", StandardCharsets.UTF_8.name());
         } catch (ResourceNotFoundException error) {
             Log.warning(error);
-            template = Context.getVelocityEngine().getTemplate("unknown.vm");
+            template = Context.getVelocityEngine().getTemplate("unknown.vm", StandardCharsets.UTF_8.name());
         }
 
         StringWriter writer = new StringWriter();

File: src/org/traccar/notification/NotificationFormatter.java
Patch:
@@ -16,6 +16,7 @@
 package org.traccar.notification;
 
 import java.io.StringWriter;
+import java.nio.charset.StandardCharsets;
 
 import org.apache.velocity.Template;
 import org.apache.velocity.VelocityContext;
@@ -49,10 +50,10 @@ public static MailMessage formatMessage(long userId, Event event, Position posit
 
         Template template = null;
         try {
-            template = Context.getVelocityEngine().getTemplate(event.getType() + ".vm");
+            template = Context.getVelocityEngine().getTemplate(event.getType() + ".vm", StandardCharsets.UTF_8.name());
         } catch (ResourceNotFoundException error) {
             Log.warning(error);
-            template = Context.getVelocityEngine().getTemplate("unknown.vm");
+            template = Context.getVelocityEngine().getTemplate("unknown.vm", StandardCharsets.UTF_8.name());
         }
 
         StringWriter writer = new StringWriter();

File: test/org/traccar/calendar/CalendarTest.java
Patch:
@@ -42,7 +42,7 @@ public void testCalendar() throws IOException, ParserException, ParseException,
                 "END:VEVENT\n" + 
                 "END:VCALENDAR";
         Calendar calendar = new Calendar();
-        calendar.setCalendarData(calendarString.getBytes());
+        calendar.setData(calendarString.getBytes());
         DateFormat format = new SimpleDateFormat("yyyy-MM-dd hh:mm:ssX");
 
         Date date = format.parse("2016-12-13 22:59:59+05");

File: test/org/traccar/reports/TripsTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.traccar.reports;
 
-import org.junit.Ignore;
 import org.junit.Test;
+import org.traccar.BaseTest;
 import org.traccar.model.Position;
 import org.traccar.reports.model.TripReport;
 
@@ -17,7 +17,7 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertNotNull;
 
-public class TripsTest {
+public class TripsTest extends BaseTest {
 
     private Date date(String time) throws ParseException {
         DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
@@ -39,7 +39,6 @@ private Position position(String time, double speed, double totalDistance) throw
         return position;
     }
 
-    @Ignore
     @Test
     public void testDetectTripsSimple() throws ParseException {
 

File: test/org/traccar/reports/TripsTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.traccar.reports;
 
+import org.junit.Ignore;
 import org.junit.Test;
 import org.traccar.model.Position;
 import org.traccar.reports.model.TripReport;
@@ -38,6 +39,7 @@ private Position position(String time, double speed, double totalDistance) throw
         return position;
     }
 
+    @Ignore
     @Test
     public void testDetectTripsSimple() throws ParseException {
 

File: src/org/traccar/model/Position.java
Patch:
@@ -92,6 +92,7 @@ public class Position extends Message {
     public static final String ALARM_POWER_CUT = "powerCut";
     public static final String ALARM_JAMMING = "jamming";
     public static final String ALARM_TEMPERATURE = "temperature";
+    public static final String ALARM_PARKING = "parking";
 
     private String protocol;
 

File: test/org/traccar/ProtocolTest.java
Patch:
@@ -154,6 +154,9 @@ private void verifyDecodedPosition(Object decodedObject, boolean checkLocation,
                 Assert.assertTrue("latitude >= -90", position.getLatitude() >= -90);
                 Assert.assertTrue("latitude <= 90", position.getLatitude() <= 90);
 
+                Assert.assertTrue("longitude >= -180", position.getLongitude() >= -180);
+                Assert.assertTrue("longitude <= 180", position.getLongitude() <= 180);
+
             }
 
             Assert.assertTrue("altitude >= -12262", position.getAltitude() >= -12262);

File: src/org/traccar/model/Network.java
Patch:
@@ -50,7 +50,7 @@ public void setHomeMobileNetworkCode(Integer homeMobileNetworkCode) {
         this.homeMobileNetworkCode = homeMobileNetworkCode;
     }
 
-    private String radioType;
+    private String radioType = "gsm";
 
     public String getRadioType() {
         return radioType;

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -156,7 +156,7 @@ private Position decodePosition(DeviceSession deviceSession, Parser parser, Date
 
         position.set(Position.KEY_HDOP, parser.next());
 
-        if (parser.hasNext(4)) {
+        if (parser.hasNext(5)) {
             position.setNetwork(new Network(CellTower.from(
                     parser.nextInt(), parser.nextInt(), parser.nextInt(16), parser.nextInt(16), parser.nextInt())));
         }

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new GoSafeProtocol());
 
+        verifyPositions(decoder, text(
+                "*GS26,356449061046586,082522030117,,SYS:G737IC;V1.13;V1.0.5,GPS:V;5;N42.594136;W70.723832;0;0;8;2.06,GSM:;;310;260;C76D;9F1D;-85,ADC:3.86,DTT:3918C;;0;0;0;1,#"));
+
         verifyPositions(decoder, text(
                 "*GS56,357330051092344,123918301116,10,GPS:L;9;N47.582920;W122.238720;0;0;102;0.99,GSM:0;0;310;410;A7DB;385C;-86,COT:76506,ADC:0.82;3.77,DTT:2184;;0;0;10000;0$000000000000,86,GPS:A;6;N47.582912;W122.238840;0;0;88;2.20,COT:76506,ADC:0.00;3.75,DTT:0;;0;0;40;0$000000000000,86,GPS:A;6;N47.582912;W122.238840;0;0;88;2.20,COT:76506,ADC:0.00;3.74,DTT:0;;0;0;40;0$000000000000,93,GPS:A;6;N47.582912;W122.238840;0;0;88;2.20,COT:76506,ADC:0.00;3.73,DTT:8000;;0;0;80000;0$000000000000,13,GPS:L;6;N47.582912;W122.238840;0;0;88;2.20,COT:76506,ADC:11.09;3.79,DTT:2004;;0;0;80000;0$000000000000,90,GPS:L;6;N47.582912;W122.238840;0;0;88;2.20,COT:76506,ADC:11.13;3.79,DTT:23004;;0;0;10000;0$000000000000,,GPS:L;6;N47.582912;W122.238840;0;0;88;2.20,GSM:5;2;310;410;A7DB;385C;-89,COT:76506,ADC:14.12;3.81,DTT:23184;;0;0;0;6#"));
 

File: src/org/traccar/Context.java
Patch:
@@ -256,8 +256,10 @@ public static void init(String[] arguments) throws Exception {
             switch (type) {
                 case "google":
                     geolocationProvider = new GoogleGeolocationProvider(key);
+                    break;
                 case "opencellid":
                     geolocationProvider = new OpenCellIdGeolocationProvider(key);
+                    break;
                 default:
                     if (key != null) {
                         geolocationProvider = new MozillaGeolocationProvider(key);

File: src/org/traccar/GeolocationHandler.java
Patch:
@@ -47,7 +47,8 @@ public void handleUpstream(final ChannelHandlerContext ctx, ChannelEvent evt) th
             final Position position = (Position) message;
             if ((position.getOutdated() || processInvalidPositions && !position.getValid())
                     && position.getNetwork() != null) {
-                geolocationProvider.getLocation(position.getNetwork(), new GeolocationProvider.LocationProviderCallback() {
+                geolocationProvider.getLocation(position.getNetwork(),
+                        new GeolocationProvider.LocationProviderCallback() {
                     @Override
                     public void onSuccess(double latitude, double longitude, double accuracy) {
                         position.set(Position.KEY_APPROXIMATE, true);

File: src/org/traccar/geocode/ReverseGeocoder.java
Patch:
@@ -19,7 +19,9 @@ public interface ReverseGeocoder {
 
     interface ReverseGeocoderCallback {
 
-        void onResult(String address);
+        void onSuccess(String address);
+
+        void onFailure(Throwable e);
 
     }
 

File: src/org/traccar/location/LocationProvider.java
Patch:
@@ -23,7 +23,7 @@ interface LocationProviderCallback {
 
         void onSuccess(double latitude, double longitude, double accuracy);
 
-        void onFailure();
+        void onFailure(Throwable e);
 
     }
 

File: src/org/traccar/location/OpenCellIdLocationProvider.java
Patch:
@@ -55,20 +55,20 @@ public Object onCompleted(Response response) throws Exception {
                                     json.getJsonNumber("lat").doubleValue(),
                                     json.getJsonNumber("lon").doubleValue(), 0);
                         } else {
-                            callback.onFailure();
+                            callback.onFailure(new IllegalArgumentException("Coordinates are missing"));
                         }
                     }
                     return null;
                 }
 
                 @Override
                 public void onThrowable(Throwable t) {
-                    callback.onFailure();
+                    callback.onFailure(t);
                 }
             });
 
         } else {
-            callback.onFailure();
+            callback.onFailure(new IllegalArgumentException("No network information"));
         }
     }
 

File: test/org/traccar/location/LocationProviderTest.java
Patch:
@@ -30,7 +30,7 @@ public void onSuccess(double latitude, double longitude, double accuracy) {
             }
 
             @Override
-            public void onFailure() {
+            public void onFailure(Throwable e) {
                 Assert.fail();
             }
         });

File: src/org/traccar/database/QueryBuilder.java
Patch:
@@ -398,7 +398,7 @@ public void process(T object, ResultSet resultSet) throws SQLException {
                     String value = resultSet.getString(name);
                     if (value != null) {
                         try {
-                            method.invoke(object, Context.getObjectMapper().readValue(value, parameterType.getClass()));
+                            method.invoke(object, Context.getObjectMapper().readValue(value, parameterType));
                         } catch (InvocationTargetException | IllegalAccessException | IOException error) {
                             Log.warning(error);
                         }

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -22,6 +22,9 @@ public void testDecode() throws Exception {
         verifyAttributes(decoder, binary(
                 "7979000794050000c9b63e0d0a"));
 
+        verifyNotNull(decoder, binary(
+                "78783b18100c0f1201010195271784005ab63617840002fa47178400ff8f4817840019f3491784005ab54b178400ff8e4c17840019f24cff0002012287c80d0a"));
+
         verifyPosition(decoder, binary(
                 "7878251610051b0f1c34c5022515d504b5dcd20738080902d4022bdf009cba5006640201006759680d0a"));
 

File: src/org/traccar/protocol/WatchProtocol.java
Patch:
@@ -43,8 +43,7 @@ public WatchProtocol() {
                 Command.TYPE_SET_PHONEBOOK,
                 Command.TYPE_VOICE_MESSAGE,
                 Command.TYPE_SET_TIMEZONE,
-                Command.TYPE_SET_INDICATOR
-            );
+                Command.TYPE_SET_INDICATOR);
     }
 
     @Override

File: src/org/traccar/location/UniversalLocationProvider.java
Patch:
@@ -46,7 +46,7 @@ public Object onCompleted(Response response) throws Exception {
                         JsonObject location = json.getJsonObject("location");
                         callback.onSuccess(
                                 location.getJsonNumber("lat").doubleValue(),
-                                location.getJsonNumber("lon").doubleValue(),
+                                location.getJsonNumber("lng").doubleValue(),
                                 json.getJsonNumber("accuracy").doubleValue());
                     }
                     return null;

File: src/org/traccar/database/QueryBuilder.java
Patch:
@@ -308,7 +308,8 @@ public <T> T executeQuerySingle(Class<T> clazz) throws SQLException {
     }
 
     private <T> void addProcessors(
-            List<ResultSetProcessor<T>> processors, Class<?> parameterType, final Method method, final String name) {
+            List<ResultSetProcessor<T>> processors,
+            final Class<?> parameterType, final Method method, final String name) {
 
         if (parameterType.equals(boolean.class)) {
             processors.add(new ResultSetProcessor<T>() {
@@ -397,7 +398,7 @@ public void process(T object, ResultSet resultSet) throws SQLException {
                     String value = resultSet.getString(name);
                     if (value != null) {
                         try {
-                            method.invoke(object, Context.getObjectMapper().readValue(value, Map.class));
+                            method.invoke(object, Context.getObjectMapper().readValue(value, parameterType.getClass()));
                         } catch (InvocationTargetException | IllegalAccessException | IOException error) {
                             Log.warning(error);
                         }

File: src/org/traccar/Context.java
Patch:
@@ -16,6 +16,7 @@
 package org.traccar;
 
 import com.fasterxml.jackson.databind.ObjectMapper;
+import com.fasterxml.jackson.databind.SerializationFeature;
 import com.ning.http.client.AsyncHttpClient;
 
 import java.net.InetAddress;
@@ -189,6 +190,8 @@ public static void init(String[] arguments) throws Exception {
         }
 
         objectMapper = new ObjectMapper();
+        objectMapper.setConfig(
+                objectMapper.getSerializationConfig().without(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS));
 
         if (config.hasKey("database.url")) {
             dataManager = new DataManager(config);

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -18,6 +18,9 @@ public void testDecode() throws Exception {
 
         verifyAttributes(decoder, binary(
                 "4040005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
+        
+        verifyAttributes(decoder, binary(
+                "242400736610402421174399553130353033342e3937382c412c333933352e333638392c4e2c30303233382e313638342c452c303034382c3034322c3038313231362c2c2a31437c31312e357c3139347c313030317c303341362c303030307c30303130343030307c3030303030303cd00d0a2424004e66104024211743990131342e312c323638372c39302c32312e35372c342e37312c38352c372e31302c382e31362c342e32372c3130342c302e33342c392e33342c302c312c30b7160d0a2424003266104024211743990232352c322e34302c302e37392c32322c34332c3131392c333735362c37352c3132e4c90d0a"));
 
         verifyPosition(decoder, binary(
                 "242400746251103044ffff99553033353033392e3939392c412c323832332e373632312c4e2c31303635322e303730342c572c3030302e302c3030302e302c3136303631362c2c2c412a37357c302e397c323038332e327c303030307c303030302c303030307c31303034333736333265780d0a"));

File: src/org/traccar/model/Position.java
Patch:
@@ -68,7 +68,6 @@ public class Position extends Message {
     public static final String KEY_OBD_DRIVING_RANGE = "drivingRange";
     public static final String KEY_OBD_SINGLE_FUEL_CONSUMPTION = "singleFuelConsumption";
     public static final String KEY_OBD_TOTAL_FUEL_CONSUMPTION = "totalFuelConsumption";
-    public static final String KEY_OBD_CURRENT_ERROR = "currentError";
     public static final String KEY_OBD_HARSH_ACCELERATION = "harshAcelerationNo";
     public static final String KEY_OBD_HARSH_BREAK = "harshBreakerNo";
     public static final String KEY_OBD_TOTAL_IGNITION = "totalIgnitionNo";

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -114,11 +114,9 @@ public MeiligaoProtocolDecoder(MeiligaoProtocol protocol) {
     public static final int MSG_SERVER = 0x0002;
     public static final int MSG_LOGIN = 0x5000;
     public static final int MSG_LOGIN_RESPONSE = 0x4000;
-
     public static final int MSG_POSITION = 0x9955;
     public static final int MSG_POSITION_LOGGED = 0x9016;
     public static final int MSG_ALARM = 0x9999;
-
     public static final int MSG_RFID = 0x9966;
 
     public static final int MSG_OBD_RT = 0x9901;
@@ -302,7 +300,7 @@ private Position decodeObd(Position position, String sentence) {
         position.set(Position.KEY_ODOMETER, parser.nextDouble());
         position.set(Position.KEY_OBD_SINGLE_FUEL_CONSUMPTION, parser.nextDouble());
         position.set(Position.KEY_OBD_TOTAL_FUEL_CONSUMPTION, parser.nextDouble());
-        position.set(Position.KEY_OBD_CURRENT_ERROR, parser.nextInt());
+        position.set(Position.KEY_DTCS, parser.nextInt());
         position.set(Position.KEY_OBD_HARSH_ACCELERATION, parser.nextInt());
         position.set(Position.KEY_OBD_HARSH_BREAK, parser.nextInt());
         return position;

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testDecode() throws Exception {
                 "2424007d0000000000000099553231303333302e3030302c562c343533342e333832342c532c30373230332e303630302c572c302e30302c302c3231313031362c2c2a31327c302e307c3332397c323030307c303030452c303030437c303244413030303145413634393541417c31307c30303030303030306e540d0a"));
 
         verifyAttributes(decoder, binary(
-                "2424005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
+                "242400736610402421174399553132343334342e3937382c412c333933342e313838302c4e2c30303234302e363231302c452c303030302c3030302c3038313231362c2c2a31437c31312e357c3139347c313030317c303344462c303030307c30303131323030307c30303030303068320d0a2424004c66104024211743990131342e302c3934352c302c31332e33332c322e37352c36392c312e32302c382e31302c302e36382c3131322c302e30382c392e39312c302c312c3040f70d0a2424003266104024211743990232362c322e35342c302e38302c32322c34342c3131392c333735362c37382c31366fc20d0a"));
 
         verifyPosition(decoder, binary(
                 "242400746251103044ffff99553033353033392e3939392c412c323832332e373632312c4e2c31303635322e303730342c572c3030302e302c3030302e302c3136303631362c2c2c412a37357c302e397c323038332e327c303030307c303030302c303030307c31303034333736333265780d0a"));

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testDecode() throws Exception {
                 "2424007d0000000000000099553231303333302e3030302c562c343533342e333832342c532c30373230332e303630302c572c302e30302c302c3231313031362c2c2a31327c302e307c3332397c323030307c303030452c303030437c303244413030303145413634393541417c31307c30303030303030306e540d0a"));
 
         verifyAttributes(decoder, binary(
-                "4040005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
+                "2424005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
 
         verifyPosition(decoder, binary(
                 "242400746251103044ffff99553033353033392e3939392c412c323832332e373632312c4e2c31303635322e303730342c572c3030302e302c3030302e302c3136303631362c2c2c412a37357c302e397c323038332e327c303030307c303030302c303030307c31303034333736333265780d0a"));

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testDecode() throws Exception {
                 "2424007d0000000000000099553231303333302e3030302c562c343533342e333832342c532c30373230332e303630302c572c302e30302c302c3231313031362c2c2a31327c302e307c3332397c323030307c303030452c303030437c303244413030303145413634393541417c31307c30303030303030306e540d0a"));
 
         verifyAttributes(decoder, binary(
-                "4040005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
+                "2424005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
 
         verifyPosition(decoder, binary(
                 "242400746251103044ffff99553033353033392e3939392c412c323832332e373632312c4e2c31303635322e303730342c572c3030302e302c3030302e302c3136303631362c2c2c412a37357c302e397c323038332e327c303030307c303030302c303030307c31303034333736333265780d0a"));

File: src/org/traccar/ExtendedObjectDecoder.java
Patch:
@@ -56,7 +56,7 @@ public void handleUpstream(
         MessageEvent e = (MessageEvent) evt;
         Object originalMessage = e.getMessage();
         Object decodedMessage = decode(e.getChannel(), e.getRemoteAddress(), originalMessage);
-        onMessageEvent(e.getChannel(), e.getRemoteAddress(), originalMessage); // call after decode
+        onMessageEvent(e.getChannel(), e.getRemoteAddress(), originalMessage, decodedMessage);
         if (originalMessage == decodedMessage) {
             ctx.sendUpstream(evt);
         } else {
@@ -77,7 +77,8 @@ public void handleUpstream(
         }
     }
 
-    protected void onMessageEvent(Channel channel, SocketAddress remoteAddress, Object msg) {
+    protected void onMessageEvent(
+            Channel channel, SocketAddress remoteAddress, Object originalMessage, Object decodedMessage) {
     }
 
     protected Object handleEmptyMessage(Channel channel, SocketAddress remoteAddress, Object msg) {

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testDecode() throws Exception {
                 "2424007d0000000000000099553231303333302e3030302c562c343533342e333832342c532c30373230332e303630302c572c302e30302c302c3231313031362c2c2a31327c302e307c3332397c323030307c303030452c303030437c303244413030303145413634393541417c31307c30303030303030306e540d0a"));
 
         verifyAttributes(decoder, binary(
-                "4040005066104020094432990131302E312C302C3135362C302E30302C31392E36312C2D33342C33342E32362C32312E38332C372E39312C313033332C322E36392C362E35352C302C302C309DBF0D0A"));
+                "242400736610402421174399553130353033342e3937382c412c333933352e333638392c4e2c30303233382e313638342c452c303034382c3034322c3038313231362c2c2a31437c31312e357c3139347c313030317c303341362c303030307c30303130343030307c3030303030303cd00d0a2424004e66104024211743990131342e312c323638372c39302c32312e35372c342e37312c38352c372e31302c382e31362c342e32372c3130342c302e33342c392e33342c302c312c30b7160d0a2424003266104024211743990232352c322e34302c302e37392c32322c34332c3131392c333735362c37352c3132e4c90d0a"));
 
         verifyPosition(decoder, binary(
                 "242400746251103044ffff99553033353033392e3939392c412c323832332e373632312c4e2c31303635322e303730342c572c3030302e302c3030302e302c3136303631362c2c2c412a37357c302e397c323038332e327c303030307c303030302c303030307c31303034333736333265780d0a"));

File: src/org/traccar/api/resource/EventResource.java
Patch:
@@ -29,4 +29,5 @@ public Event get(@PathParam("id") long id) throws SQLException {
         }
         return event;
     }
+
 }

File: src/org/traccar/api/resource/PositionResource.java
Patch:
@@ -37,6 +37,7 @@
 import java.util.List;
 
 @Path("positions")
+@Produces(MediaType.APPLICATION_JSON)
 @Consumes(MediaType.APPLICATION_JSON)
 public class PositionResource extends BaseResource {
 
@@ -46,7 +47,6 @@ public class PositionResource extends BaseResource {
     public static final String CONTENT_DISPOSITION_VALUE_GPX = "attachment; filename=positions.gpx";
 
     @GET
-    @Produces(MediaType.APPLICATION_JSON)
     public Collection<Position> getJson(
             @QueryParam("deviceId") long deviceId, @QueryParam("id") List<Long> positionIds,
             @QueryParam("from") String from, @QueryParam("to") String to)
@@ -92,4 +92,5 @@ public Response getGpx(
                 deviceId, DateUtil.parseDate(from), DateUtil.parseDate(to)));
         return Response.ok(gpx.build()).header(HttpHeaders.CONTENT_DISPOSITION, CONTENT_DISPOSITION_VALUE_GPX).build();
     }
+
 }

File: src/org/traccar/api/resource/ReportResource.java
Patch:
@@ -27,6 +27,7 @@
 import org.traccar.reports.Route;
 
 @Path("reports")
+@Produces(MediaType.APPLICATION_JSON)
 @Consumes(MediaType.APPLICATION_JSON)
 public class ReportResource extends BaseResource {
 
@@ -35,7 +36,6 @@ public class ReportResource extends BaseResource {
 
     @Path("route")
     @GET
-    @Produces(MediaType.APPLICATION_JSON)
     public Collection<Position> getRoute(
             @QueryParam("deviceId") final List<Long> deviceIds, @QueryParam("groupId") final List<Long> groupIds,
             @QueryParam("from") String from, @QueryParam("to") String to) throws SQLException {
@@ -59,7 +59,6 @@ public Response getRouteExcel(
 
     @Path("events")
     @GET
-    @Produces(MediaType.APPLICATION_JSON)
     public Collection<Event> getEvents(
             @QueryParam("deviceId") final List<Long> deviceIds, @QueryParam("groupId") final List<Long> groupIds,
             @QueryParam("type") final List<String> types,
@@ -85,7 +84,6 @@ public Response getEventsExcel(
 
     @Path("summary")
     @GET
-    @Produces(MediaType.APPLICATION_JSON)
     public Collection<SummaryReport> getSummary(
             @QueryParam("deviceId") final List<Long> deviceIds, @QueryParam("groupId") final List<Long> groupIds,
             @QueryParam("from") String from, @QueryParam("to") String to) throws SQLException {

File: src/org/traccar/protocol/OigoProtocolDecoder.java
Patch:
@@ -155,7 +155,8 @@ private double convertCoordinate(long value) {
         boolean negative = value < 0;
         value = Math.abs(value);
         double minutes = (value % 100000) * 0.001;
-        double degrees = value / 100000 + minutes / 60;
+        value /= 100000;
+        double degrees = value + minutes / 60;
         return negative ? -degrees : degrees;
     }
 

File: src/org/traccar/protocol/At2000ProtocolDecoder.java
Patch:
@@ -50,11 +50,11 @@ public At2000ProtocolDecoder(At2000Protocol protocol) {
 
     private static void sendResponse(Channel channel) {
         if (channel != null) {
-            ChannelBuffer response = ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN, BLOCK_LENGTH);
+            ChannelBuffer response = ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN, 2 * BLOCK_LENGTH);
             response.writeByte(MSG_ACKNOWLEDGEMENT);
-            response.writeMedium(1);
+            response.writeMedium(ChannelBuffers.swapMedium(1));
             response.writeByte(0x00); // success
-            response.writerIndex(BLOCK_LENGTH);
+            response.writerIndex(2 * BLOCK_LENGTH);
             channel.write(response);
         }
     }

File: test/org/traccar/ProtocolTest.java
Patch:
@@ -135,7 +135,9 @@ private void verifyDecodedPosition(Object decodedObject, boolean checkLocation,
             if (expected != null) {
 
                 if (expected.getFixTime() != null) {
-                    Assert.assertEquals("time", expected.getFixTime(), position.getFixTime());
+                    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
+                    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
+                    Assert.assertEquals("time", dateFormat.format(expected.getFixTime()), dateFormat.format(position.getFixTime()));
                 }
                 Assert.assertEquals("valid", expected.getValid(), position.getValid());
                 Assert.assertEquals("latitude", expected.getLatitude(), position.getLatitude(), 0.00001);

File: src/org/traccar/protocol/At2000ProtocolDecoder.java
Patch:
@@ -50,7 +50,7 @@ public At2000ProtocolDecoder(At2000Protocol protocol) {
 
     private static void sendResponse(Channel channel) {
         if (channel != null) {
-            ChannelBuffer response = ChannelBuffers.directBuffer(BLOCK_LENGTH);
+            ChannelBuffer response = ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN, BLOCK_LENGTH);
             response.writeByte(MSG_ACKNOWLEDGEMENT);
             response.writeMedium(1);
             response.writeByte(0x00); // success

File: src/org/traccar/protocol/OigoProtocolDecoder.java
Patch:
@@ -229,9 +229,9 @@ protected Object decode(
         ChannelBuffer buf = (ChannelBuffer) msg;
 
         if (buf.getUnsignedByte(buf.readerIndex()) == 0x7e) {
-            return decodeArMessage(channel, remoteAddress,buf);
+            return decodeArMessage(channel, remoteAddress, buf);
         } else {
-            return decodeMgMessage(channel, remoteAddress,buf);
+            return decodeMgMessage(channel, remoteAddress, buf);
         }
     }
 

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 - 2015 Anton Tananaev (anton@traccar.org)
+ * Copyright 2014 - 2016 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,6 +22,7 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -86,7 +87,7 @@ protected Object decode(
 
             position.setLatitude(parser.nextDouble());
             position.setLongitude(parser.nextDouble());
-            position.setSpeed(parser.nextDouble());
+            position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
 
             position.setCourse(parser.nextDouble());
             if (position.getCourse() > 360) {

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, text(
                 "!1,860719027585011"));
 
+        verifyPosition(decoder, text(
+                "!D,28/11/16,00:04:09,42.926067,-85.747589,124,236,140001,179.8,60,11,16,0;"));
+
         verifyPosition(decoder, text(
                 "!C,30/1/16,1:1:6,31.259157,30.020910,0,0,100001,25.32,100,0.03,0.01,0"));
 

File: src/org/traccar/geofence/GeofencePolyline.java
Patch:
@@ -36,11 +36,10 @@ public GeofencePolyline(String wkt, double distance) throws ParseException {
 
     @Override
     public boolean containsPoint(double latitude, double longitude) {
-        double longitude360 = longitude + Coordinate.DEGREE360;
         for (int i = 1; i < coordinates.size(); i++) {
             if (DistanceCalculator.distanceToLine(
-                    latitude, longitude360, coordinates.get(i - 1).getLat(), coordinates.get(i - 1).getLon360(),
-                    coordinates.get(i).getLat(), coordinates.get(i).getLon360()) <= distance) {
+                    latitude, longitude, coordinates.get(i - 1).getLat(), coordinates.get(i - 1).getLon(),
+                    coordinates.get(i).getLat(), coordinates.get(i).getLon()) <= distance) {
                 return true;
             }
         }

File: src/org/traccar/geofence/GeofencePolyline.java
Patch:
@@ -38,7 +38,7 @@ public GeofencePolyline(String wkt, double distance) throws ParseException {
     public boolean containsPoint(double latitude, double longitude) {
         double longitude360 = longitude + Coordinate.DEGREE360;
         for (int i = 1; i < coordinates.size(); i++) {
-            if (DistanceCalculator.distanceToInterval(
+            if (DistanceCalculator.distanceToLine(
                     latitude, longitude360, coordinates.get(i - 1).getLat(), coordinates.get(i - 1).getLon360(),
                     coordinates.get(i).getLat(), coordinates.get(i).getLon360()) <= distance) {
                 return true;

File: src/org/traccar/helper/DistanceCalculator.java
Patch:
@@ -34,7 +34,7 @@ public static double distance(double lat1, double lon1, double lat2, double lon2
         return d * 1000;
     }
 
-    public static double distanceToInterval(
+    public static double distanceToLine(
             double pointLat, double pointLon, double lat1, double lon1, double lat2, double lon2) {
         double d0 = distance(pointLat, pointLon, lat1, lon1);
         double d1 = distance(lat1, lon1, lat2, lon2);

File: test/org/traccar/helper/DistanceCalculatorTest.java
Patch:
@@ -12,11 +12,11 @@ public void testDistance() {
     }
     
     @Test
-    public void testDistanceToInterval() {
-        Assert.assertEquals(DistanceCalculator.distanceToInterval(
+    public void testDistanceToLine() {
+        Assert.assertEquals(DistanceCalculator.distanceToLine(
                 56.83801, 60.59748, 56.83777, 60.59833, 56.83766, 60.5968), 33.0, 5.0);
         
-        Assert.assertEquals(DistanceCalculator.distanceToInterval(
+        Assert.assertEquals(DistanceCalculator.distanceToLine(
                 56.83753, 60.59508, 56.83777, 60.59833, 56.83766, 60.5968), 105.0, 5.0);
     }
 

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
+        verifyNothing(decoder, text(
+                "(087073005534BP00HSO"));
+
         verifyNothing(decoder, text(
                 "(027028258309BQ86,0,05550c21b10d1d0f431008bd114c0ea5078400010007a100423932,161117005322,01000001)"));
 

File: src/org/traccar/CopyAttributesHandler.java
Patch:
@@ -29,8 +29,8 @@ private Position getLastPosition(long deviceId) {
 
     @Override
     protected Position handlePosition(Position position) {
-        String attributesString = Context.getDeviceManager().lookupAttributeString(position.getDeviceId(),
-                "processing.copyAttributes", null, false);
+        String attributesString = Context.getDeviceManager().lookupAttributeString(
+                position.getDeviceId(), "processing.copyAttributes", null, true);
         Position last = getLastPosition(position.getDeviceId());
         if (attributesString != null && last != null) {
             for (String attribute : attributesString.split(" ")) {

File: src/org/traccar/events/MaintenanceEventHandler.java
Patch:
@@ -38,12 +38,12 @@ protected Collection<Event> analyzePosition(Position position) {
         }
 
         double maintenanceInterval = Context.getDeviceManager()
-                .lookupAttributeDouble(device.getId(), ATTRIBUTE_MAINTENANCE_INTERVAL, 0, true);
+                .lookupAttributeDouble(device.getId(), ATTRIBUTE_MAINTENANCE_INTERVAL, 0, false);
         if (maintenanceInterval == 0) {
             return null;
         }
         double maintenanceStart = Context.getDeviceManager()
-                .lookupAttributeDouble(device.getId(), ATTRIBUTE_MAINTENANCE_START, 0, true);
+                .lookupAttributeDouble(device.getId(), ATTRIBUTE_MAINTENANCE_START, 0, false);
 
         Collection<Event> events = new ArrayList<>();
         double oldTotalDistance = 0.0;

File: src/org/traccar/events/OverspeedEventHandler.java
Patch:
@@ -48,7 +48,7 @@ protected Collection<Event> analyzePosition(Position position) {
         Collection<Event> events = new ArrayList<>();
         double speed = position.getSpeed();
         double speedLimit = Context.getDeviceManager()
-                .lookupAttributeDouble(device.getId(), ATTRIBUTE_SPEED_LIMIT, 0, true);
+                .lookupAttributeDouble(device.getId(), ATTRIBUTE_SPEED_LIMIT, 0, false);
         if (speedLimit == 0) {
             return null;
         }

File: src/org/traccar/reports/Summary.java
Patch:
@@ -60,7 +60,7 @@ private static SummaryReport calculateSummaryResult(long deviceId, Date from, Da
                 result.setMaxSpeed(position.getSpeed());
             }
             boolean ignoreOdometer = Context.getDeviceManager()
-                    .lookupAttributeBoolean(deviceId, "report.ignoreOdometer", false, false);
+                    .lookupAttributeBoolean(deviceId, "report.ignoreOdometer", false, true);
             result.setDistance(ReportUtils.calculateDistance(firstPosition, previousPosition, !ignoreOdometer));
             result.setAverageSpeed(speedSum / positions.size());
         }

File: src/org/traccar/reports/Trips.java
Patch:
@@ -80,7 +80,7 @@ private static TripReport calculateTrip(ArrayList<Position> positions, int start
         trip.setEndAddress(endTrip.getAddress());
 
         boolean ignoreOdometer = Context.getDeviceManager()
-                .lookupAttributeBoolean(deviceId, "report.ignoreOdometer", false, false);
+                .lookupAttributeBoolean(deviceId, "report.ignoreOdometer", false, true);
         trip.setDistance(ReportUtils.calculateDistance(startTrip, endTrip, !ignoreOdometer));
         trip.setDuration(tripDuration);
         trip.setAverageSpeed(speedSum / (endIndex - startIndex));

File: src/org/traccar/api/SecurityRequestFilter.java
Patch:
@@ -83,7 +83,7 @@ public void filter(ContainerRequestContext requestContext) {
 
                 Long userId = (Long) request.getSession().getAttribute(SessionResource.USER_ID_KEY);
                 if (userId != null) {
-                    Context.getPermissionsManager().checkUser(userId);
+                    Context.getPermissionsManager().checkUserEnabled(userId);
                     Context.getStatisticsManager().registerRequest(userId);
                     securityContext = new UserSecurityContext(new UserPrincipal(userId));
                 }

File: src/org/traccar/api/resource/SessionResource.java
Patch:
@@ -80,7 +80,7 @@ public User get(@QueryParam("token") String token) throws SQLException {
         }
 
         if (userId != null) {
-            Context.getPermissionsManager().checkUser(userId);
+            Context.getPermissionsManager().checkUserEnabled(userId);
             return Context.getPermissionsManager().getUser(userId);
         } else {
             throw new WebApplicationException(Response.status(Response.Status.NOT_FOUND).build());

File: src/org/traccar/Config.java
Patch:
@@ -40,7 +40,7 @@ public void load(String file) throws IOException {
     }
 
     public boolean hasKey(String key) {
-        return properties.containsKey(key) || (defaultProperties != null && defaultProperties.containsKey(key));
+        return properties.containsKey(key) || defaultProperties != null && defaultProperties.containsKey(key);
     }
 
     public String getString(String key) {

File: src/org/traccar/api/resource/SessionResource.java
Patch:
@@ -29,6 +29,7 @@
 import javax.ws.rs.POST;
 import javax.ws.rs.Path;
 import javax.ws.rs.Produces;
+import javax.ws.rs.QueryParam;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
@@ -48,7 +49,7 @@ public class SessionResource extends BaseResource {
 
     @PermitAll
     @GET
-    public User get() throws SQLException {
+    public User get(@QueryParam("token") String token) throws SQLException {
         Long userId = (Long) request.getSession().getAttribute(USER_ID_KEY);
         if (userId == null) {
             Cookie[] cookies = request.getCookies();
@@ -69,7 +70,7 @@ public User get() throws SQLException {
                     userId = user.getId();
                     request.getSession().setAttribute(USER_ID_KEY, userId);
                 }
-            } else if (request.getParameter("token") != null) {
+            } else if (token != null) {
                 User user = Context.getPermissionsManager().getUserByToken(request.getParameter("token"));
                 if (user != null) {
                     userId = user.getId();

File: src/org/traccar/api/resource/UserResource.java
Patch:
@@ -67,7 +67,8 @@ public Response update(@PathParam("id") long id, User entity) throws SQLExceptio
                 || old.getReadonly() != entity.getReadonly()
                 || old.getDisabled() != entity.getDisabled()
                 || old.getDeviceLimit() != entity.getDeviceLimit()
-                || !old.getToken().equals(entity.getToken())) {
+                || old.getToken() == null && entity.getToken() != null
+                || old.getToken() != null && !old.getToken().equals(entity.getToken())) {
             Context.getPermissionsManager().checkAdmin(getUserId());
         } else {
             Context.getPermissionsManager().checkUser(getUserId(), entity.getId());

File: test/org/traccar/protocol/AstraProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         AstraProtocolDecoder decoder = new AstraProtocolDecoder(new AstraProtocol());
 
+        verifyPositions(decoder, binary(
+                "4b00700529c0c265976b8202cba9ff00676d864554a9c30000000020073401006436000300030008000000000000a0000100001920c43d00009600428302cba9ff00676d864554aa3e000000002007240100643b000300020008000000000000b0000100001920c43d00009600420f0e"));
+
         verifyPositions(decoder, binary(
                 "4b00320524c1da58769e6d0322617effe874024453065600a800000100080000643e0000000000000000000000069500e7bb"));
 

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -22,6 +22,7 @@
 import org.traccar.DeviceSession;
 import org.traccar.helper.BitUtil;
 import org.traccar.helper.DateBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -144,7 +145,7 @@ private ParseResult parsePosition(DeviceSession deviceSession, ChannelBuffer buf
 
             position.setLatitude(buf.readFloat() / Math.PI * 180);
             position.setLongitude(buf.readFloat() / Math.PI * 180);
-            position.setSpeed(buf.readFloat());
+            position.setSpeed(UnitsConverter.knotsFromKph(buf.readFloat()));
             position.setCourse(buf.readUnsignedShort());
 
             position.set(Position.KEY_ODOMETER, buf.readFloat() * 1000);

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -115,6 +115,9 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, buffer(
                 "*HQ,8401016597,BASE,152609,0,0,0,0,211014,FFFFFFFF#"));
 
+        verifyPosition(decoder, binary(
+                "2441060116601245431311165035313006004318210e000000fffffbffff0024"));
+
         verifyPosition(decoder, binary(
                 "24410600082621532131081504419390060740418306000000fffffbfdff0015060000002c02dc0c000000001f"),
                 position("2015-08-31 21:53:21.000", true, 4.69898, -74.06971));

File: src/org/traccar/protocol/UproProtocolDecoder.java
Patch:
@@ -72,7 +72,7 @@ private void decodeLocation(Position position, String data) {
                 position.setLatitude(-position.getLatitude());
             }
             if (!BitUtil.check(flags, 2)) {
-                position.setLatitude(-position.getLatitude());
+                position.setLongitude(-position.getLongitude());
             }
 
             position.setSpeed(parser.nextInt() * 2);

File: src/org/traccar/protocol/EasyTrackProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton@traccar.org)
+ * Copyright 2015 - 2016 Anton Tananaev (anton@traccar.org)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));
+                pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "#", "\r\n"));
                 pipeline.addLast("stringDecoder", new StringDecoder());
                 pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectDecoder", new EasyTrackProtocolDecoder(EasyTrackProtocol.this));

File: src/org/traccar/helper/Checksum.java
Patch:
@@ -204,8 +204,9 @@ public static int xor(String string) {
 
     public static String nmea(String msg) {
         int checksum = 0;
-        for (byte b : msg.getBytes(StandardCharsets.US_ASCII)) {
-            checksum ^= b;
+        byte[] bytes = msg.getBytes(StandardCharsets.US_ASCII);
+        for (int i = 1; i < bytes.length; i++) {
+            checksum ^= bytes[i];
         }
         return String.format("*%02x", checksum).toUpperCase();
     }

File: test/org/traccar/WebDataHandlerTest.java
Patch:
@@ -14,7 +14,7 @@ public void testFormatRequest() throws Exception {
         WebDataHandler handler = new WebDataHandler("http://localhost/?fixTime={fixTime}&gprmc={gprmc}&name={name}");
 
         Assert.assertEquals(
-                "http://localhost/?fixTime=1451610123000&gprmc=$GPRMC,010203.000,A,2000.0000,N,03000.0000,E,0.00,0.00,010116,,*21&name=test",
+                "http://localhost/?fixTime=1451610123000&gprmc=$GPRMC,010203.000,A,2000.0000,N,03000.0000,E,0.00,0.00,010116,,*05&name=test",
                 handler.formatRequest(p));
 
     }

File: test/org/traccar/protocol/UproProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         UproProtocolDecoder decoder = new UproProtocolDecoder(new UproProtocol());
 
-        verifyNothing(decoder, text(
+        verifyPosition(decoder, text(
                 "*AI2000905447674,BA&A2003064913201201845107561627121016&B0100000000&C05>8=961&F0333&K023101002154A7#"));
 
         verifyPosition(decoder, text(

File: src/org/traccar/helper/Parser.java
Patch:
@@ -155,7 +155,7 @@ public double nextCoordinate(CoordinateFormat format) {
         }
 
         if (hemisphere != null && (hemisphere.equals("S") || hemisphere.equals("W") || hemisphere.equals("-"))) {
-            coordinate = -coordinate;
+            coordinate = -Math.abs(coordinate);
         }
 
         return coordinate;

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(new WatchProtocol());
 
+        verifyPosition(decoder, text(
+                "[3G*6430073509*00E7*UD2,241016,081622,V,09.951861,N,-84.1422119,W,0.00,0.0,0.0,0,39,94,0,0,00000000,1,0,712,3,2007,18961,123,4,Luz,00:23:6a:34:ee:76,-70,familia,b0:c5:54:b9:90:ef,-78,fam salas delgado,fc:b4:e6:5d:50:ea,-81,QWERTY,c8:3a:35:43:0f:e8,-93"));
+
         verifyPosition(decoder, text(
                 "[3G*6105117105*008D*UD2,210716,231601,V,-33.480366,N,-70.7630692,E,0.00,0.0,0.0,0,100,34,0,0,00000000,3,255,730,2,29731,54315,167,29731,54316,162,29731,54317,145"),
                 position("2016-07-21 23:16:01.000", false, -33.48037, -70.76307));

File: src/org/traccar/model/Event.java
Patch:
@@ -35,6 +35,8 @@ public Event(String type, long deviceId) {
     public Event() {
     }
 
+    public static final String ALL_EVENTS = "allEvents";
+
     public static final String TYPE_COMMAND_RESULT = "commandResult";
 
     public static final String TYPE_DEVICE_ONLINE = "deviceOnline";

File: src/org/traccar/reports/Route.java
Patch:
@@ -83,9 +83,9 @@ public static void getExcel(OutputStream outputStream,
                 devicesRoutes.add(deviceRoutes);
             }
         }
-        String templatePath = Context.getConfig().getString("report.route.template.excel",
-                "templates/export/route.xlsx");
-        try (InputStream inputStream = new FileInputStream(templatePath)) {
+        String templatePath = Context.getConfig().getString("report.templatesPath",
+                "templates/export/");
+        try (InputStream inputStream = new FileInputStream(templatePath + "/route.xlsx")) {
             org.jxls.common.Context jxlsContext = PoiTransformer.createInitialContext();
             jxlsContext.putVar("devices", devicesRoutes);
             jxlsContext.putVar("sheetNames", sheetNames);

File: src/org/traccar/reports/Summary.java
Patch:
@@ -92,9 +92,9 @@ public static void getExcel(OutputStream outputStream,
             Context.getPermissionsManager().checkDevice(userId, deviceId);
             summaries.add(calculateSummaryResult(deviceId, from, to));
         }
-        String templatePath = Context.getConfig().getString("report.summary.template.excel",
-                "templates/export/summary.xlsx");
-        try (InputStream inputStream = new FileInputStream(templatePath)) {
+        String templatePath = Context.getConfig().getString("report.templatesPath",
+                "templates/export/");
+        try (InputStream inputStream = new FileInputStream(templatePath + "/summary.xlsx")) {
             org.jxls.common.Context jxlsContext = PoiTransformer.createInitialContext();
             jxlsContext.putVar("summaries", summaries);
             jxlsContext.putVar("from", from);

File: src/org/traccar/reports/Trips.java
Patch:
@@ -202,9 +202,9 @@ public static void getExcel(OutputStream outputStream,
                 devicesTrips.add(deviceTrips);
             }
         }
-        String templatePath = Context.getConfig().getString("report.trips.template.excel",
-                "templates/export/trips.xlsx");
-        try (InputStream inputStream = new FileInputStream(templatePath)) {
+        String templatePath = Context.getConfig().getString("report.templatesPath",
+                "templates/export/");
+        try (InputStream inputStream = new FileInputStream(templatePath + "/trips.xlsx")) {
             org.jxls.common.Context jxlsContext = PoiTransformer.createInitialContext();
             jxlsContext.putVar("devices", devicesTrips);
             jxlsContext.putVar("sheetNames", sheetNames);

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -139,7 +139,7 @@ private ParseResult parsePosition(DeviceSession deviceSession, ChannelBuffer buf
 
             DateBuilder dateBuilder = new DateBuilder()
                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
-                    .setDateReverse(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
+                    .setDateReverse(buf.readUnsignedByte(), buf.readUnsignedByte() + 1, buf.readUnsignedByte());
             position.setTime(dateBuilder.getDate());
 
             position.setLatitude(buf.readFloat() / Math.PI * 180);

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -139,7 +139,7 @@ private ParseResult parsePosition(DeviceSession deviceSession, ChannelBuffer buf
 
             DateBuilder dateBuilder = new DateBuilder()
                     .setTime(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte())
-                    .setDateReverse(buf.readUnsignedByte(), buf.readUnsignedByte(), buf.readUnsignedByte());
+                    .setDateReverse(buf.readUnsignedByte(), buf.readUnsignedByte() + 1, buf.readUnsignedByte());
             position.setTime(dateBuilder.getDate());
 
             position.setLatitude(buf.readFloat() / Math.PI * 180);

File: test/org/traccar/notification/NotificiationMailTest.java
Patch:
@@ -47,8 +47,7 @@ public void test() throws Exception {
 
         Transport transport = session.getTransport();
 
-        try
-        {
+        try {
             transport.connect(HOST, SMTP_USERNAME, SMTP_PASSWORD);
             transport.sendMessage(msg, msg.getAllRecipients());
         } finally {

File: src/org/traccar/notification/NotificationMail.java
Patch:
@@ -56,7 +56,7 @@ private static Properties getConfigProperies() {
 
             String username = config.getString("mail.smtp.username");
             if (username != null) {
-                result.put("mail.smtp.user", username);
+                result.put("mail.smtp.username", username);
             }
             String password = config.getString("mail.smtp.password");
             if (password != null) {
@@ -119,7 +119,7 @@ public static void sendMailSync(long userId, Event event, Position position) {
                     return;
                 }
             }
-            mailSession = Session.getInstance(mailServerProperties, null);
+            mailSession = Session.getDefaultInstance(mailServerProperties);
 
             mailMessage = new MimeMessage(mailSession);
 

File: src/org/traccar/api/resource/StatisticsResource.java
Patch:
@@ -35,7 +35,8 @@
 public class StatisticsResource extends BaseResource {
 
     @GET
-    public Collection<Statistics> get(@QueryParam("from") String from, @QueryParam("to") String to) throws SQLException {
+    public Collection<Statistics> get(
+            @QueryParam("from") String from, @QueryParam("to") String to) throws SQLException {
         Context.getPermissionsManager().checkAdmin(getUserId());
         return Context.getDataManager().getStatistics(JsonConverter.parseDate(from), JsonConverter.parseDate(to));
     }

File: src/org/traccar/protocol/FifotrackProtocolDecoder.java
Patch:
@@ -37,7 +37,7 @@ public FifotrackProtocolDecoder(FifotrackProtocol protocol) {
             .text("$$")
             .number("d+,")                       // length
             .number("(d+),")                     // imei
-            .number("d+,")                       // index
+            .number("x+,")                       // index
             .expression("[^,]+,")                // type
             .number("(d+)?,")                    // alarm
             .number("(dd)(dd)(dd)")              // date

File: test/org/traccar/protocol/FifotrackProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         FifotrackProtocolDecoder decoder = new FifotrackProtocolDecoder(new FifotrackProtocol());
 
+        verifyPosition(decoder, text(
+                "$$105,866104023179743,AB,A00,,161007085534,A,54.738791,25.271918,0,350,151,0,17929,0000,0,,246|1|65|96DB,936|0*0B"));
+
         verifyPosition(decoder, text(
                 "$$103,866104023179743,5,A00,,161006192841,A,54.738791,25.271918,0,342,200,0,4265,0000,0,,246|1|65|96DB,9C4|0*75"));
 

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -38,7 +38,8 @@ public Gl200ProtocolDecoder(Gl200Protocol protocol) {
     }
 
     private static final Pattern PATTERN_ACK = new PatternBuilder()
-            .text("+ACK:GT").expression("...,")
+            .text("+ACK:GT")
+            .expression("...,")                  // type
             .number("([0-9A-Z]{2}xxxx),")        // protocol version
             .number("(d{15}),")                  // imei
             .any().text(",")
@@ -639,7 +640,7 @@ protected Object decode(
 
         Object result;
         String type = sentence.substring(typeIndex + 3, typeIndex + 6);
-        if (typeIndex >= 4 && sentence.startsWith("+ACK", typeIndex - 4)) {
+        if (sentence.startsWith("+ACK")) {
             result = decodeAck(channel, remoteAddress, sentence, type);
         } else {
             switch (type) {

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -23,7 +23,6 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
-import org.traccar.helper.PatternUtil;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
@@ -270,8 +269,6 @@ private Object decodeHbd(Channel channel, SocketAddress remoteAddress, String se
 
     private Object decodeInf(Channel channel, SocketAddress remoteAddress, String sentence) {
 
-        PatternUtil.MatchResult r = PatternUtil.checkPattern(PATTERN_INF.pattern(), sentence);
-
         Parser parser = new Parser(PATTERN_INF, sentence);
         if (!parser.matches()) {
             return null;

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -10,8 +10,8 @@ public void testDecode() throws Exception {
 
         UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
 
-        /*verifyPosition(decoder, binary(
-                "f8010103515810532780699f7e2e3f010e015ee4c906bde45c00000000008b0304004000000404002c776005060373193622110b00240b00fee8ffff807dffff606d0b00fee9af000000af0000000b00feee7d78807dffffffff100101cc2af8"));*/
+        verifyPosition(decoder, binary(
+                "f8010103515810532780699f7e2e3f010e015ee4c906bde45c00000000008b0304004000000404002c776005060373193622110b00240b00fee8ffff807dffff606d0b00fee9af000000af0000000b00feee7d78807dffffffff100101cc2af8"));
 
         verifyPosition(decoder, binary(
                 "F8010103596580420045259CFB3329010E015ED91506BDE5A800000000009E030402420000040400492AA405060344197E220D071131058F410C1591310D48312F8F413107C60804027666B00C138254D182607A826EE083BE554385F50019423CAD1DF8"));

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public Gl200ProtocolDecoder(Gl200Protocol protocol) {
 
     private static final Pattern PATTERN_HBD = new PatternBuilder()
             .text("+ACK:GTHBD,")
-            .number("([0-9A-Z]{2}xxxx),")          // protocol version
+            .number("([0-9A-Z]{2}xxxx),")        // protocol version
             .number("(d{15}),")                  // imei
             .any().text(",")
             .number("(xxxx)")

File: src/org/traccar/helper/ObdDecoder.java
Patch:
@@ -60,7 +60,7 @@ public static Map.Entry<String, Object> decodeCodes(String value) {
         StringBuilder codes = new StringBuilder();
         for (int i = 0; i < value.length() / 4; i++) {
             int numValue = Integer.parseInt(value.substring(i * 4, (i + 1) * 4), 16);
-            codes.append(',');
+            codes.append(' ');
             switch (numValue >> 14) {
                 case 1:
                     codes.append('C');
@@ -78,7 +78,7 @@ public static Map.Entry<String, Object> decodeCodes(String value) {
             codes.append(String.format("%04X", numValue & 0x3FFF));
         }
         if (codes.length() > 0) {
-            return createEntry("dtcs", codes.toString().replaceFirst(",", ""));
+            return createEntry(Position.KEY_DTCS, codes.toString().trim());
         } else {
             return null;
         }

File: src/org/traccar/model/Position.java
Patch:
@@ -60,6 +60,7 @@ public class Position extends Message {
     public static final String KEY_ARMED = "armed";
     public static final String KEY_ACCURACY = "accuracy";
 
+    public static final String KEY_DTCS = "dtcs";
     public static final String KEY_OBD_SPEED = "obdSpeed";
     public static final String KEY_OBD_ODOMETER = "obdOdometer";
 

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
+        verifyAttributes(decoder, text(
+                "imei:359710049057798,OBD,161003192752,1785,,,0,54,96.47%,75,20.00%,1892,0.00,P0134,P0571,,;"));
+
         verifyAttributes(decoder, text(
                 "imei:359710049090138,OBD,160629022949,51442,0.00,15.88,5632,122,40.39%,95,0.00%,2101,13.80,,,,;"));
 

File: src/org/traccar/notification/EventForwarder.java
Patch:
@@ -50,7 +50,7 @@ public void forwardEvent(Event event, Position position) {
 
         BoundRequestBuilder requestBuilder = Context.getAsyncHttpClient().preparePost(url);
 
-        requestBuilder.addHeader("Content-Type", "application/json; charset=utf-8");
+        requestBuilder.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
         requestBuilder.addHeader("User-Agent", USER_AGENT);
         if (!header.equals("")) {
             String[] headerLines = header.split("\\r?\\n");

File: src/org/traccar/notification/EventForwarder.java
Patch:
@@ -50,7 +50,7 @@ public void forwardEvent(Event event, Position position) {
 
         BoundRequestBuilder requestBuilder = Context.getAsyncHttpClient().preparePost(url);
 
-        requestBuilder.addHeader("Content-Type", "application/json; charset=utf-8");
+        requestBuilder.addHeader("Content-Type", "application/x-www-form-urlencoded; charset=utf-8");
         requestBuilder.addHeader("User-Agent", USER_AGENT);
         if (!header.equals("")) {
             String[] headerLines = header.split("\\r?\\n");

File: src/org/traccar/protocol/SmokeyProtocolDecoder.java
Patch:
@@ -50,9 +50,9 @@ protected Object decode(
 
         if (type == 0) {
 
-            if (channel != null) {
+            /*if (channel != null) {
                 // TODO send ack
-            }
+            }*/
 
             Position position = new Position();
             position.setProtocol(getProtocolName());

File: src/org/traccar/protocol/Jt600Protocol.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
+import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.TrackerServer;
 import org.traccar.model.Command;
@@ -39,6 +40,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new Jt600FrameDecoder());
+                pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectEncoder", new Jt600ProtocolEncoder());
                 pipeline.addLast("objectDecoder", new Jt600ProtocolDecoder(Jt600Protocol.this));
             }

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -43,7 +43,7 @@ public TramigoProtocolDecoder(TramigoProtocol protocol) {
     public static final int MSG_COMPACT = 0x0100;
     public static final int MSG_FULL = 0x00FE;
 
-    private static final String[] DIRECTIONS = new String[] { "N", "NE", "E", "SE", "S", "SW", "W", "NW" };
+    private static final String[] DIRECTIONS = new String[] {"N", "NE", "E", "SE", "S", "SW", "W", "NW"};
 
     @Override
     protected Object decode(

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -229,7 +229,7 @@ public ChannelPipeline getPipeline() {
             pipeline.addLast("AlertEventHandler", alertEventHandler);
         }
 
-        if (alertEventHandler != null) {
+        if (ignitionEventHandler != null) {
             pipeline.addLast("IgnitionEventHandler", ignitionEventHandler);
         }
 

File: src/org/traccar/web/CsvBuilder.java
Patch:
@@ -37,10 +37,10 @@ private SortedSet<Method> getSortedMethods(Object object) {
         SortedSet<Method> methods = new TreeSet<Method>(new Comparator<Method>() {
             @Override
             public int compare(Method m1, Method m2) {
-                if (m1.getName().equals("getAttributes") & !m1.getName().equals(m2.getName())) {
+                if (m1.getName().equals("getAttributes") && !m1.getName().equals(m2.getName())) {
                     return 1;
                 }
-                if (m2.getName().equals("getAttributes") & !m1.getName().equals(m2.getName())) {
+                if (m2.getName().equals("getAttributes") && !m1.getName().equals(m2.getName())) {
                     return -1;
                 }
                 return m1.getName().compareTo(m2.getName());

File: test/org/traccar/helper/PatternUtilTest.java
Patch:
@@ -9,7 +9,7 @@ public class PatternUtilTest {
     @Test
     public void testCheckPattern() {
 
-        assertEquals("ab", PatternUtil.checkPattern("abc", "abd").getPattern());
+        assertEquals("ab", PatternUtil.checkPattern("abc", "abd").getPatternMatch());
 
     }
 

File: src/org/traccar/protocol/ArknavX8ProtocolDecoder.java
Patch:
@@ -21,7 +21,6 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
-import org.traccar.helper.PatternUtil;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -57,8 +56,6 @@ protected Object decode(
             return null;
         }
 
-        PatternUtil.MatchResult r = PatternUtil.checkPattern(PATTERN.pattern(), sentence);
-
         Parser parser = new Parser(PATTERN, sentence);
         if (!parser.matches()) {
             return null;

File: src/org/traccar/protocol/AdmProtocol.java
Patch:
@@ -32,7 +32,7 @@ public AdmProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 1, -3, 0));

File: src/org/traccar/protocol/ApelProtocol.java
Patch:
@@ -32,7 +32,7 @@ public ApelProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, 4, 0));

File: src/org/traccar/protocol/AplicomProtocol.java
Patch:
@@ -30,7 +30,7 @@ public AplicomProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new AplicomFrameDecoder());

File: src/org/traccar/protocol/AppelloProtocol.java
Patch:
@@ -33,7 +33,7 @@ public AppelloProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/AquilaProtocol.java
Patch:
@@ -33,7 +33,7 @@ public AquilaProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/Ardi01Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Ardi01Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/ArknavProtocol.java
Patch:
@@ -33,7 +33,7 @@ public ArknavProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\r'));

File: src/org/traccar/protocol/ArknavX8Protocol.java
Patch:
@@ -33,7 +33,7 @@ public ArknavX8Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ';'));

File: src/org/traccar/protocol/ArnaviProtocol.java
Patch:
@@ -33,7 +33,7 @@ public ArnaviProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/AstraProtocol.java
Patch:
@@ -32,14 +32,14 @@ public AstraProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 1, 2, -3, 0));
                 pipeline.addLast("objectDecoder", new AstraProtocolDecoder(AstraProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new AstraProtocolDecoder(AstraProtocol.this));

File: src/org/traccar/protocol/AtrackProtocol.java
Patch:
@@ -31,14 +31,14 @@ public AtrackProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new AtrackFrameDecoder());
                 pipeline.addLast("objectDecoder", new AtrackProtocolDecoder(AtrackProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new AtrackProtocolDecoder(AtrackProtocol.this));

File: src/org/traccar/protocol/AuroProtocol.java
Patch:
@@ -33,7 +33,7 @@ public AuroProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/AutoFonProtocol.java
Patch:
@@ -30,7 +30,7 @@ public AutoFonProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new AutoFonFrameDecoder());

File: src/org/traccar/protocol/Avl301Protocol.java
Patch:
@@ -31,7 +31,7 @@ public Avl301Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(256, 2, 1, -3, 0));

File: src/org/traccar/protocol/BceProtocol.java
Patch:
@@ -31,7 +31,7 @@ public BceProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new BceFrameDecoder());

File: src/org/traccar/protocol/BlackKiteProtocol.java
Patch:
@@ -32,7 +32,7 @@ public BlackKiteProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new GalileoFrameDecoder());

File: src/org/traccar/protocol/BoxProtocol.java
Patch:
@@ -33,7 +33,7 @@ public BoxProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\r'));

File: src/org/traccar/protocol/CalAmpProtocol.java
Patch:
@@ -30,7 +30,7 @@ public CalAmpProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new CalAmpProtocolDecoder(CalAmpProtocol.this));

File: src/org/traccar/protocol/CarTrackProtocol.java
Patch:
@@ -33,7 +33,7 @@ public CarTrackProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "##"));

File: src/org/traccar/protocol/CarcellProtocol.java
Patch:
@@ -37,7 +37,7 @@ public CarcellProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\r'));

File: src/org/traccar/protocol/CarscopProtocol.java
Patch:
@@ -33,7 +33,7 @@ public CarscopProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '^'));

File: src/org/traccar/protocol/CastelProtocol.java
Patch:
@@ -33,7 +33,7 @@ public CastelProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -4, 0));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
         server.setEndianness(ByteOrder.LITTLE_ENDIAN);
         serverList.add(server);
 
-        server = new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        server = new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new CastelProtocolDecoder(CastelProtocol.this));

File: src/org/traccar/protocol/CellocatorProtocol.java
Patch:
@@ -31,7 +31,7 @@ public CellocatorProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CellocatorFrameDecoder());

File: src/org/traccar/protocol/CityeasyProtocol.java
Patch:
@@ -37,7 +37,7 @@ public CityeasyProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -4, 0));

File: src/org/traccar/protocol/CradlepointProtocol.java
Patch:
@@ -33,7 +33,7 @@ public CradlepointProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/DishaProtocol.java
Patch:
@@ -33,7 +33,7 @@ public DishaProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/EasyTrackProtocol.java
Patch:
@@ -33,7 +33,7 @@ public EasyTrackProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));

File: src/org/traccar/protocol/EelinkProtocol.java
Patch:
@@ -31,7 +31,7 @@ public EelinkProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 3, 2));

File: src/org/traccar/protocol/EnforaProtocol.java
Patch:
@@ -31,7 +31,7 @@ public EnforaProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 0, 2, -2, 2));

File: src/org/traccar/protocol/FlextrackProtocol.java
Patch:
@@ -33,7 +33,7 @@ public FlextrackProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "\r"));

File: src/org/traccar/protocol/FoxProtocol.java
Patch:
@@ -33,7 +33,7 @@ public FoxProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "</fox>"));

File: src/org/traccar/protocol/FreedomProtocol.java
Patch:
@@ -33,7 +33,7 @@ public FreedomProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/GalileoProtocol.java
Patch:
@@ -31,7 +31,7 @@ public GalileoProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new GalileoFrameDecoder());

File: src/org/traccar/protocol/GatorProtocol.java
Patch:
@@ -32,14 +32,14 @@ public GatorProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 3, 2));
                 pipeline.addLast("objectDecoder", new GatorProtocolDecoder(GatorProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new GatorProtocolDecoder(GatorProtocol.this));

File: src/org/traccar/protocol/Gl100Protocol.java
Patch:
@@ -34,7 +34,7 @@ public Gl100Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\0'));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new Gl100ProtocolDecoder(Gl100Protocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/Gl200Protocol.java
Patch:
@@ -40,7 +40,7 @@ public Gl200Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "$", "\0"));
@@ -50,7 +50,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new Gl200ProtocolDecoder(Gl200Protocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/GlobalSatProtocol.java
Patch:
@@ -33,7 +33,7 @@ public GlobalSatProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '!'));

File: src/org/traccar/protocol/GnxProtocol.java
Patch:
@@ -33,7 +33,7 @@ public GnxProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "\n\r"));

File: src/org/traccar/protocol/GoSafeProtocol.java
Patch:
@@ -33,7 +33,7 @@ public GoSafeProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));

File: src/org/traccar/protocol/GotopProtocol.java
Patch:
@@ -33,7 +33,7 @@ public GotopProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));

File: src/org/traccar/protocol/Gps103Protocol.java
Patch:
@@ -44,7 +44,7 @@ public Gps103Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "\r\n", "\n", ";"));
@@ -54,7 +54,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new Gps103ProtocolDecoder(Gps103Protocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/GpsGateProtocol.java
Patch:
@@ -33,7 +33,7 @@ public GpsGateProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "\0", "\n", "\r\n"));

File: src/org/traccar/protocol/GpsMarkerProtocol.java
Patch:
@@ -33,7 +33,7 @@ public GpsMarkerProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "\r"));

File: src/org/traccar/protocol/GpsmtaProtocol.java
Patch:
@@ -32,7 +32,7 @@ public GpsmtaProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/GranitProtocol.java
Patch:
@@ -36,7 +36,7 @@ public GranitProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new GranitFrameDecoder());

File: src/org/traccar/protocol/Gt02Protocol.java
Patch:
@@ -31,7 +31,7 @@ public Gt02Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(256, 2, 1, 2, 0));

File: src/org/traccar/protocol/Gt06Protocol.java
Patch:
@@ -34,7 +34,7 @@ public Gt06Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new Gt06FrameDecoder());

File: src/org/traccar/protocol/H02Protocol.java
Patch:
@@ -40,7 +40,7 @@ public H02Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 int messageLength = Context.getConfig().getInteger(getName() + ".messageLength", 32);

File: src/org/traccar/protocol/HaicomProtocol.java
Patch:
@@ -33,7 +33,7 @@ public HaicomProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '*'));

File: src/org/traccar/protocol/HomtecsProtocol.java
Patch:
@@ -32,7 +32,7 @@ public HomtecsProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringDecoder", new StringDecoder());

File: src/org/traccar/protocol/HuaShengProtocol.java
Patch:
@@ -30,7 +30,7 @@ public HuaShengProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new HuaShengFrameDecoder());

File: src/org/traccar/protocol/HuabaoProtocol.java
Patch:
@@ -30,7 +30,7 @@ public HuabaoProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new HuabaoFrameDecoder());

File: src/org/traccar/protocol/HunterProProtocol.java
Patch:
@@ -33,7 +33,7 @@ public HunterProProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "\r"));

File: src/org/traccar/protocol/IdplProtocol.java
Patch:
@@ -33,7 +33,7 @@ public IdplProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/IntellitracProtocol.java
Patch:
@@ -32,7 +32,7 @@ public IntellitracProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new IntellitracFrameDecoder(1024));

File: src/org/traccar/protocol/Jt600Protocol.java
Patch:
@@ -30,7 +30,7 @@ public Jt600Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new Jt600FrameDecoder());

File: src/org/traccar/protocol/KhdProtocol.java
Patch:
@@ -35,7 +35,7 @@ public KhdProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(512, 3, 2));

File: src/org/traccar/protocol/L100Protocol.java
Patch:
@@ -30,7 +30,7 @@ public L100Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new L100FrameDecoder());

File: src/org/traccar/protocol/LaipacProtocol.java
Patch:
@@ -33,7 +33,7 @@ public LaipacProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/M2mProtocol.java
Patch:
@@ -31,7 +31,7 @@ public M2mProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new FixedLengthFrameDecoder(23));

File: src/org/traccar/protocol/ManPowerProtocol.java
Patch:
@@ -33,7 +33,7 @@ public ManPowerProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ';'));

File: src/org/traccar/protocol/MegastekProtocol.java
Patch:
@@ -32,7 +32,7 @@ public MegastekProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new MegastekFrameDecoder());

File: src/org/traccar/protocol/MeiligaoProtocol.java
Patch:
@@ -40,15 +40,15 @@ public MeiligaoProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new MeiligaoFrameDecoder());
                 pipeline.addLast("objectEncoder", new MeiligaoProtocolEncoder());
                 pipeline.addLast("objectDecoder", new MeiligaoProtocolDecoder(MeiligaoProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectEncoder", new MeiligaoProtocolEncoder());

File: src/org/traccar/protocol/MeitrackProtocol.java
Patch:
@@ -42,7 +42,7 @@ public MeitrackProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new MeitrackFrameDecoder());
@@ -53,7 +53,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
         };
         server.setEndianness(ByteOrder.LITTLE_ENDIAN);
         serverList.add(server);
-        server = new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        server = new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/MiniFinderProtocol.java
Patch:
@@ -44,7 +44,7 @@ public MiniFinderProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ';'));

File: src/org/traccar/protocol/Mta6Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Mta6Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("httpEncoder", new HttpResponseEncoder());

File: src/org/traccar/protocol/MtxProtocol.java
Patch:
@@ -33,7 +33,7 @@ public MtxProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/MxtProtocol.java
Patch:
@@ -31,7 +31,7 @@ public MxtProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                     pipeline.addLast("frameDecoder", new MxtFrameDecoder());

File: src/org/traccar/protocol/NavigilProtocol.java
Patch:
@@ -31,7 +31,7 @@ public NavigilProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new NavigilFrameDecoder());

File: src/org/traccar/protocol/NavisProtocol.java
Patch:
@@ -32,7 +32,7 @@ public NavisProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(4 * 1024, 12, 2, 2, 0));

File: src/org/traccar/protocol/NoranProtocol.java
Patch:
@@ -38,7 +38,7 @@ public NoranProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectEncoder", new NoranProtocolEncoder());

File: src/org/traccar/protocol/NvsProtocol.java
Patch:
@@ -30,7 +30,7 @@ public NvsProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new NvsFrameDecoder());

File: src/org/traccar/protocol/ObdDongleProtocol.java
Patch:
@@ -31,7 +31,7 @@ public ObdDongleProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1099, 20, 2, 3, 0));

File: src/org/traccar/protocol/OrionProtocol.java
Patch:
@@ -31,7 +31,7 @@ public OrionProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new OrionFrameDecoder());

File: src/org/traccar/protocol/OsmAndProtocol.java
Patch:
@@ -32,7 +32,7 @@ public OsmAndProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("httpEncoder", new HttpResponseEncoder());

File: src/org/traccar/protocol/PathAwayProtocol.java
Patch:
@@ -32,7 +32,7 @@ public PathAwayProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("httpEncoder", new HttpResponseEncoder());

File: src/org/traccar/protocol/PiligrimProtocol.java
Patch:
@@ -33,7 +33,7 @@ public PiligrimProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("httpEncoder", new HttpResponseEncoder());

File: src/org/traccar/protocol/ProgressProtocol.java
Patch:
@@ -32,7 +32,7 @@ public ProgressProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, 4, 0));

File: src/org/traccar/protocol/Pt3000Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Pt3000Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, 'd')); // probably wrong

File: src/org/traccar/protocol/Pt502Protocol.java
Patch:
@@ -39,7 +39,7 @@ public Pt502Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new Pt502FrameDecoder());

File: src/org/traccar/protocol/RaveonProtocol.java
Patch:
@@ -33,7 +33,7 @@ public RaveonProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/RitiProtocol.java
Patch:
@@ -32,7 +32,7 @@ public RitiProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 105, 2, 3, 0));

File: src/org/traccar/protocol/RuptelaProtocol.java
Patch:
@@ -34,7 +34,7 @@ public RuptelaProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 0, 2, 2, 0));

File: src/org/traccar/protocol/SanavProtocol.java
Patch:
@@ -33,7 +33,7 @@ public SanavProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '*'));

File: src/org/traccar/protocol/SkypatrolProtocol.java
Patch:
@@ -30,7 +30,7 @@ public SkypatrolProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new SkypatrolProtocolDecoder(SkypatrolProtocol.this));

File: src/org/traccar/protocol/Stl060Protocol.java
Patch:
@@ -32,7 +32,7 @@ public Stl060Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new Stl060FrameDecoder(1024));

File: src/org/traccar/protocol/SuntechProtocol.java
Patch:
@@ -40,7 +40,7 @@ public SuntechProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '\r'));

File: src/org/traccar/protocol/SupermateProtocol.java
Patch:
@@ -33,7 +33,7 @@ public SupermateProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "#"));

File: src/org/traccar/protocol/T55Protocol.java
Patch:
@@ -34,7 +34,7 @@ public T55Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new T55ProtocolDecoder(T55Protocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringDecoder", new StringDecoder());

File: src/org/traccar/protocol/TaipProtocol.java
Patch:
@@ -34,7 +34,7 @@ public TaipProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '<'));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new TaipProtocolDecoder(TaipProtocol.this, true));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringDecoder", new StringDecoder());

File: src/org/traccar/protocol/TelicProtocol.java
Patch:
@@ -33,7 +33,7 @@ public TelicProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new TelicFrameDecoder());

File: src/org/traccar/protocol/TeltonikaProtocol.java
Patch:
@@ -34,15 +34,15 @@ public TeltonikaProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new TeltonikaFrameDecoder());
                 pipeline.addLast("objectEncoder", new TeltonikaProtocolEncoder());
                 pipeline.addLast("objectDecoder", new TeltonikaProtocolDecoder(TeltonikaProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectEncoder", new TeltonikaProtocolEncoder());

File: src/org/traccar/protocol/ThinkRaceProtocol.java
Patch:
@@ -31,7 +31,7 @@ public ThinkRaceProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2 + 12 + 1 + 1, 2, 2, 0));

File: src/org/traccar/protocol/Tk102Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Tk102Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ']'));

File: src/org/traccar/protocol/Tk103Protocol.java
Patch:
@@ -34,7 +34,7 @@ public Tk103Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ')'));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new Tk103ProtocolDecoder(Tk103Protocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringDecoder", new StringDecoder());

File: src/org/traccar/protocol/Tlt2hProtocol.java
Patch:
@@ -33,7 +33,7 @@ public Tlt2hProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(32 * 1024, "##\r\n"));

File: src/org/traccar/protocol/TopflytechProtocol.java
Patch:
@@ -33,7 +33,7 @@ public TopflytechProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ')'));

File: src/org/traccar/protocol/TotemProtocol.java
Patch:
@@ -37,7 +37,7 @@ public TotemProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new TotemFrameDecoder());

File: src/org/traccar/protocol/Tr20Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Tr20Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/TrackboxProtocol.java
Patch:
@@ -33,7 +33,7 @@ public TrackboxProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/TramigoProtocol.java
Patch:
@@ -31,7 +31,7 @@ public TramigoProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
+        TrackerServer server = new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new TramigoFrameDecoder());

File: src/org/traccar/protocol/TrvProtocol.java
Patch:
@@ -33,7 +33,7 @@ public TrvProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));

File: src/org/traccar/protocol/Tt8850Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Tt8850Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "$"));

File: src/org/traccar/protocol/TytanProtocol.java
Patch:
@@ -30,7 +30,7 @@ public TytanProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new TytanProtocolDecoder(TytanProtocol.this));

File: src/org/traccar/protocol/TzoneProtocol.java
Patch:
@@ -31,7 +31,7 @@ public TzoneProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(256, 2, 2, 2, 0));

File: src/org/traccar/protocol/UlbotechProtocol.java
Patch:
@@ -30,7 +30,7 @@ public UlbotechProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new UlbotechFrameDecoder());

File: src/org/traccar/protocol/UproProtocol.java
Patch:
@@ -33,7 +33,7 @@ public UproProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));

File: src/org/traccar/protocol/V680Protocol.java
Patch:
@@ -34,7 +34,7 @@ public V680Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "##"));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new V680ProtocolDecoder(V680Protocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringDecoder", new StringDecoder());

File: src/org/traccar/protocol/VisiontekProtocol.java
Patch:
@@ -33,7 +33,7 @@ public VisiontekProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));

File: src/org/traccar/protocol/WatchProtocol.java
Patch:
@@ -45,7 +45,7 @@ public WatchProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, ']'));

File: src/org/traccar/protocol/WialonProtocol.java
Patch:
@@ -41,7 +41,7 @@ public WialonProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(4 * 1024));

File: src/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -37,7 +37,7 @@ public WondexProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new WondexFrameDecoder());
@@ -46,7 +46,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new WondexProtocolDecoder(WondexProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/XexunProtocol.java
Patch:
@@ -34,7 +34,7 @@ public XexunProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 boolean full = Context.getConfig().getBoolean(getName() + ".extended");

File: src/org/traccar/protocol/XirgoProtocol.java
Patch:
@@ -34,7 +34,7 @@ public XirgoProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, "##"));
@@ -43,7 +43,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("objectDecoder", new XirgoProtocolDecoder(XirgoProtocol.this));
             }
         });
-        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ConnectionlessBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("stringEncoder", new StringEncoder());

File: src/org/traccar/protocol/Xt013Protocol.java
Patch:
@@ -33,7 +33,7 @@ public Xt013Protocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/protocol/YwtProtocol.java
Patch:
@@ -33,7 +33,7 @@ public YwtProtocol() {
 
     @Override
     public void initTrackerServers(List<TrackerServer> serverList) {
-        serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
+        serverList.add(new TrackerServer(new ServerBootstrap(), getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));

File: src/org/traccar/model/Position.java
Patch:
@@ -89,6 +89,7 @@ public class Position extends Message {
     public static final String ALARM_ACCELETATION = "hardAcceleration";
     public static final String ALARM_BREAKING = "hardBreaking";
     public static final String ALARM_FATIGUE_DRIVING = "fatigueDriving";
+    public static final String ALARM_POWER_CUT = "powerCut";
 
     private String protocol;
 

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -167,6 +167,8 @@ private String decodeAlarm(short value) {
         switch (value) {
         case 0x01:
             return Position.ALARM_SOS;
+        case 0x02:
+            return Position.ALARM_POWER_CUT;
         case 0x03:
         case 0x09:
             return Position.ALARM_VIBRATION;

File: src/org/traccar/database/DataManager.java
Patch:
@@ -305,7 +305,7 @@ public Collection<Position> getLatestPositions() throws SQLException {
     }
 
     public void clearPositionsHistory() throws SQLException {
-        int historyDays = config.getInteger("database.positionsHistoryDays");
+        long historyDays = config.getInteger("database.positionsHistoryDays");
         if (historyDays != 0) {
             QueryBuilder.create(dataSource, getQuery("database.deletePositions"))
                     .setDate("serverTime", new Date(System.currentTimeMillis() - historyDays * 24 * 3600 * 1000))

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ private Position decodeOld(DeviceSession deviceSession, ChannelBuffer buf, int t
         return position;
     }
 
-    private Position decodeNew(DeviceSession deviceSession, ChannelBuffer buf, int type, int index) {
+    private Position decodeNew(DeviceSession deviceSession, ChannelBuffer buf, int index) {
 
         Position position = new Position();
         position.setDeviceId(deviceSession.getDeviceId());
@@ -206,7 +206,7 @@ protected Object decode(
             if (type == MSG_GPS || type == MSG_ALARM || type == MSG_STATE || type == MSG_SMS) {
                 return decodeOld(deviceSession, buf, type, index);
             } else if (type >= MSG_NORMAL && type <= MSG_OBD_CODE) {
-                return decodeNew(deviceSession, buf, type, index);
+                return decodeNew(deviceSession, buf, index);
             }
         }
 

File: src/org/traccar/protocol/AstraProtocolDecoder.java
Patch:
@@ -68,6 +68,7 @@ protected Object decode(
 
             buf.readUnsignedByte(); // index
 
+            position.setValid(true);
             position.setLatitude(buf.readInt() * 0.000001);
             position.setLongitude(buf.readInt() * 0.000001);
 

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -303,12 +303,15 @@ protected Object decode(
             if (command == MSG_LOGIN) {
                 response = ChannelBuffers.wrappedBuffer(new byte[] {0x01});
                 sendResponse(channel, remoteAddress, id, MSG_LOGIN_RESPONSE, response);
+                return null;
             } else if (command == MSG_HEARTBEAT) {
                 response = ChannelBuffers.wrappedBuffer(new byte[] {0x01});
                 sendResponse(channel, remoteAddress, id, MSG_HEARTBEAT, response);
+                return null;
             } else if (command == MSG_SERVER) {
                 response = ChannelBuffers.copiedBuffer(getServer(channel), StandardCharsets.US_ASCII);
                 sendResponse(channel, remoteAddress, id, MSG_SERVER, response);
+                return null;
             }
         }
 

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -67,7 +67,7 @@ private Position readPosition(DeviceSession deviceSession, ChannelBuffer buf) {
         double lat = buf.readUnsignedInt() / 3600000.0;
         double lon = buf.readUnsignedInt() / 3600000.0;
         position.setSpeed(UnitsConverter.knotsFromCps(buf.readUnsignedShort()));
-        position.setCourse(buf.readUnsignedShort() % 360);
+        position.setCourse(buf.readUnsignedShort() * 0.1);
 
         int flags = buf.readUnsignedByte();
         if ((flags & 0x02) == 0) {

File: src/org/traccar/protocol/XexunFrameDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -49,7 +49,7 @@ protected Object decode(
             return null;
         }
 
-        buf.skipBytes(beginIndex);
+        buf.skipBytes(beginIndex - buf.readerIndex());
 
         return buf.readBytes(endIndex - beginIndex + 1);
     }

File: src/org/traccar/Context.java
Patch:
@@ -130,7 +130,7 @@ public static AsyncHttpClient getAsyncHttpClient() {
 
     private static EventForwarder eventForwarder;
 
-    public static EventForwarder getEventForvarder() {
+    public static EventForwarder getEventForwarder() {
         return eventForwarder;
     }
 

File: src/org/traccar/database/NotificationManager.java
Patch:
@@ -68,8 +68,8 @@ public void updateEvent(Event event, Position position) {
                 }
             }
         }
-        if (Context.getEventForvarder() != null) {
-            Context.getEventForvarder().forwardEvent(event, position);
+        if (Context.getEventForwarder() != null) {
+            Context.getEventForwarder().forwardEvent(event, position);
         }
     }
 

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -41,9 +41,9 @@ public Tk103ProtocolDecoder(Tk103Protocol protocol) {
             .number("d*")                        // imei?
             .number("(dd)(dd)(dd),?")            // date
             .expression("([AV]),?")              // validity
-            .number("(dd)(dd.d+)")               // latitude
+            .number("(d+)(dd.d+)")               // latitude
             .expression("([NS]),?")
-            .number("(ddd)(dd.d+)")              // longitude
+            .number("(d+)(dd.d+)")               // longitude
             .expression("([EW]),?")
             .number("(d+.d)(?:d*,)?")            // speed
             .number("(dd)(dd)(dd),?")            // time
@@ -211,7 +211,6 @@ protected Object decode(
 
         position.setCourse(parser.nextDouble());
 
-        // Status
         String status = parser.next();
         if (status != null) {
             position.set(Position.KEY_STATUS, status); // binary status

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
+        verifyPosition(decoder, text(
+                "(01602009983BR00160830V1855.7022S4817.8731W000.0002729000.0010000000L00000000)"));
+
         verifyPosition(decoder, text(
                 "(088046338039BR00160727A3354.7768N03540.7258E000.0140832068.4700000000L00BEB0D4+017.7)"));
 

File: src/org/traccar/protocol/RaveonProtocol.java
Patch:
@@ -28,7 +28,7 @@
 public class RaveonProtocol extends BaseProtocol {
 
     public RaveonProtocol() {
-        super("t55");
+        super("raveon");
     }
 
     @Override

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -91,7 +92,7 @@ private Position decodePosition(Channel channel, SocketAddress remoteAddress, St
 
         position.setLatitude(parser.nextCoordinate());
         position.setLongitude(parser.nextCoordinate());
-        position.setSpeed(parser.nextDouble());
+        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
         position.setCourse(parser.nextDouble());
         position.setAltitude(parser.nextDouble());
 

File: src/org/traccar/protocol/GpsMarkerProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ public GpsMarkerProtocolDecoder(GpsMarkerProtocol protocol) {
             .number("(ddd)(dd)(dddd)")           // longitude
             .number("(ddd)")                     // speed
             .number("(ddd)")                     // course
-            .number("(d)")                       // satellites
+            .number("(x)")                       // satellites
             .number("(dd)")                      // battery
             .number("(d)")                       // input
             .number("(d)")                       // output
@@ -82,7 +82,7 @@ protected Object decode(
         position.setSpeed(parser.nextDouble());
         position.setCourse(parser.nextDouble());
 
-        position.set(Position.KEY_SATELLITES, parser.next());
+        position.set(Position.KEY_SATELLITES, parser.nextInt(16));
         position.set(Position.KEY_BATTERY, parser.next());
         position.set(Position.KEY_INPUT, parser.next());
         position.set(Position.KEY_OUTPUT, parser.next());

File: test/org/traccar/protocol/GpsMarkerProtocolDecoderTest.java
Patch:
@@ -11,6 +11,8 @@ public void testDecode() throws Exception {
 
         GpsMarkerProtocolDecoder decoder = new GpsMarkerProtocolDecoder(new GpsMarkerProtocol());
 
+        verifyPosition(decoder, text(
+                "$GM23D863071014445404T260816142611N55441051E037325071033063C0530304#"));
 
         verifyNothing(decoder, text(
                 "$GM300350123456789012T100511123300G25000001772F185200000000000000005230298#"));

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -91,7 +92,7 @@ private Position decodePosition(Channel channel, SocketAddress remoteAddress, St
 
         position.setLatitude(parser.nextCoordinate());
         position.setLongitude(parser.nextCoordinate());
-        position.setSpeed(parser.nextDouble());
+        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
         position.setCourse(parser.nextDouble());
         position.setAltitude(parser.nextDouble());
 

File: src/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -94,7 +95,7 @@ protected Object decode(
         }
 
         position.setValid(parser.nextInt() != 1);
-        position.setSpeed(parser.nextDouble());
+        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
         position.setCourse(parser.nextDouble());
 
         position.set(Position.KEY_SATELLITES, parser.next());

File: src/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
@@ -94,7 +95,7 @@ protected Object decode(
         }
 
         position.setValid(parser.nextInt() != 1);
-        position.setSpeed(parser.nextDouble());
+        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
         position.setCourse(parser.nextDouble());
 
         position.set(Position.KEY_SATELLITES, parser.next());

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -115,7 +115,9 @@ protected Object decode(
 
             position.set(Position.KEY_EVENT, parser.next());
             position.set(Position.KEY_BATTERY, parser.next());
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+            if (parser.hasNext()) {
+                position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+            }
             position.set(Position.KEY_INPUT, parser.next());
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -115,7 +115,9 @@ protected Object decode(
 
             position.set(Position.KEY_EVENT, parser.next());
             position.set(Position.KEY_BATTERY, parser.next());
-            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+            if (parser.hasNext()) {
+                position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
+            }
             position.set(Position.KEY_INPUT, parser.next());
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());

File: src/org/traccar/model/Position.java
Patch:
@@ -78,7 +78,6 @@ public class Position extends Message {
     public static final String ALARM_OVERSPEED = "overspeed";
     public static final String ALARM_FALL_DOWN = "fallDown";
     public static final String ALARM_LOW_BATTERY = "lowBattery";
-    public static final String ALARM_MOTION = "motion";
     public static final String ALARM_FAULT = "fault";
     public static final String ALARM_POWER_OFF = "powerOff";
     public static final String ALARM_GEOFENCE = "geofence";

File: test/org/traccar/reports/ReportUtilsTest.java
Patch:
@@ -14,7 +14,7 @@ public void testCalculateDistance() {
         endPosition.set(Position.KEY_TOTAL_DISTANCE, 700.0);
         Assert.assertEquals(ReportUtils.calculateDistance(startPosition, endPosition), 200.0, 10);
         startPosition.set(Position.KEY_ODOMETER, 50000);
-        endPosition.set(Position.KEY_ODOMETER, 50001);
+        endPosition.set(Position.KEY_ODOMETER, 51000);
         Assert.assertEquals(ReportUtils.calculateDistance(startPosition, endPosition), 1000.0, 10);
     }
 

File: src/org/traccar/model/Position.java
Patch:
@@ -28,7 +28,8 @@ public class Position extends Message {
     public static final String KEY_EVENT = "event";
     public static final String KEY_ALARM = "alarm";
     public static final String KEY_STATUS = "status";
-    public static final String KEY_ODOMETER = "odometer";
+    public static final String KEY_ODOMETER = "odometer"; // meters
+    public static final String KEY_TRIP_ODOMETER = "tripOdometer";
     public static final String KEY_HOURS = "hours";
     public static final String KEY_INPUT = "input";
     public static final String KEY_OUTPUT = "output";
@@ -48,7 +49,7 @@ public class Position extends Message {
     public static final String KEY_CHARGE = "charge";
     public static final String KEY_IP = "ip";
     public static final String KEY_ARCHIVE = "archive";
-    public static final String KEY_DISTANCE = "distance";
+    public static final String KEY_DISTANCE = "distance"; // meters
     public static final String KEY_TOTAL_DISTANCE = "totalDistance";
     public static final String KEY_RPM = "rpm";
     public static final String KEY_VIN = "vin";

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -227,7 +227,7 @@ protected Object decode(
             position.setCourse(buf.readUnsignedShort());
 
             position.set(Position.KEY_TYPE, buf.readUnsignedByte());
-            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 0.1);
+            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 100);
             position.set(Position.KEY_HDOP, buf.readUnsignedShort() * 0.1);
             position.set(Position.KEY_INPUT, buf.readUnsignedByte());
 

File: src/org/traccar/protocol/BoxProtocolDecoder.java
Patch:
@@ -92,7 +92,7 @@ protected Object decode(
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
             position.setCourse(parser.nextDouble());
 
-            position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_DISTANCE, parser.nextDouble() * 1000);
             position.set(Position.KEY_EVENT, parser.next());
 
             int status = parser.nextInt();

File: src/org/traccar/protocol/DishaProtocolDecoder.java
Patch:
@@ -97,7 +97,7 @@ protected Object decode(
         position.set(Position.PREFIX_ADC + 1, parser.nextInt());
         position.set(Position.PREFIX_ADC + 2, parser.nextInt());
 
-        position.set(Position.KEY_ODOMETER, parser.next());
+        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_INPUT, parser.next());
 
         return position;

File: src/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -105,7 +105,7 @@ protected Object decode(
         position.set("signal", parser.next());
         position.set(Position.KEY_POWER, parser.nextDouble());
         position.set("oil", parser.nextInt(16));
-        position.set(Position.KEY_ODOMETER, parser.nextInt(16));
+        position.set(Position.KEY_ODOMETER, parser.nextInt(16) * 100);
 
         position.setAltitude(parser.nextDouble());
 

File: src/org/traccar/protocol/IntellitracProtocolDecoder.java
Patch:
@@ -114,7 +114,7 @@ protected Object decode(
         position.set(Position.KEY_CHARGE, parser.next());
         position.set("tpl", parser.next());
         position.set("axle", parser.next());
-        position.set(Position.KEY_ODOMETER, parser.next());
+        position.set(Position.KEY_OBD_ODOMETER, parser.next());
 
         return position;
     }

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -110,7 +110,7 @@ private Position decodeNormalMessage(ChannelBuffer buf, Channel channel, SocketA
             int fuel = buf.readUnsignedByte() << 8;
 
             position.set(Position.KEY_STATUS, buf.readUnsignedInt());
-            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+            position.set(Position.KEY_ODOMETER, buf.readUnsignedInt() * 1000);
 
             fuel += buf.readUnsignedByte();
             position.set(Position.KEY_FUEL, fuel);

File: src/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -305,7 +305,7 @@ private Position decodeNew(Channel channel, SocketAddress remoteAddress, String
         position.setCourse(parser.nextDouble());
         position.setAltitude(parser.nextDouble());
 
-        position.set(Position.KEY_ODOMETER, parser.nextDouble());
+        position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
         position.set(Position.KEY_MCC, parser.nextInt());
         position.set(Position.KEY_MNC, parser.nextInt());
         position.set(Position.KEY_LAC, parser.nextInt(16));

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -155,7 +155,7 @@ private List<Position> parseFormatA(DeviceSession deviceSession, ChannelBuffer b
                 }
 
                 if (BitUtil.check(flags, 3)) {
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedShort());
+                    position.set(Position.KEY_ODOMETER, buf.readUnsignedShort() * 1000);
                 }
 
                 if (BitUtil.check(flags, 4)) {

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -147,9 +147,8 @@ private ParseResult parsePosition(DeviceSession deviceSession, ChannelBuffer buf
             position.setSpeed(buf.readFloat());
             position.setCourse(buf.readUnsignedShort());
 
-            position.set(Position.KEY_ODOMETER, buf.readFloat());
-
-            position.set("segment", buf.readFloat()); // last segment
+            position.set(Position.KEY_ODOMETER, buf.readFloat() * 1000);
+            position.set(Position.KEY_DISTANCE, buf.readFloat());
 
             // Segment times
             buf.readUnsignedShort();

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -106,7 +106,7 @@ protected Object decode(
             }
         }
 
-        position.set(Position.KEY_ODOMETER, parser.next());
+        position.set(Position.KEY_ODOMETER, parser.nextInt());
         position.set(Position.KEY_RFID, parser.next());
 
         if (parser.hasNext()) {

File: src/org/traccar/protocol/RitiProtocolDecoder.java
Patch:
@@ -73,8 +73,8 @@ protected Object decode(
         buf.readUnsignedShort();
         buf.readUnsignedShort();
 
-        position.set("distance", buf.readUnsignedInt());
-        position.set(Position.KEY_ODOMETER, buf.readUnsignedInt());
+        position.set(Position.KEY_DISTANCE, buf.readUnsignedInt());
+        position.set(Position.KEY_TRIP_ODOMETER, buf.readUnsignedInt());
 
         // Parse GPRMC
         int end = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '*');

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -252,7 +252,7 @@ protected Object decode(
             }
 
             position.set(Position.PREFIX_TEMP + 1, parser.next());
-            position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
 
         } else if (pattern == PATTERN3) {
             if (parser.hasNext()) {
@@ -314,7 +314,7 @@ protected Object decode(
             position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
 
             position.set(Position.KEY_HDOP, parser.nextDouble());
-            position.set(Position.KEY_ODOMETER, parser.nextInt());
+            position.set(Position.KEY_ODOMETER, parser.nextInt() * 1000);
 
             position.setValid(true);
             position.setLatitude(parser.nextCoordinate());

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -49,7 +49,7 @@ private void decodeExtraData(Position position, ChannelBuffer buf, int end) {
 
             switch (type) {
                 case 2:
-                    position.set(Position.KEY_ODOMETER, buf.readUnsignedMedium());
+                    position.set(Position.KEY_TRIP_ODOMETER, buf.readUnsignedMedium());
                     break;
                 case 5:
                     position.set(Position.KEY_INPUT, buf.readUnsignedByte());

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -115,7 +115,7 @@ protected Object decode(
 
             position.set(Position.KEY_EVENT, parser.next());
             position.set(Position.KEY_BATTERY, parser.next());
-            position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1000);
             position.set(Position.KEY_INPUT, parser.next());
             position.set(Position.PREFIX_ADC + 1, parser.next());
             position.set(Position.PREFIX_ADC + 2, parser.next());

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -133,15 +133,15 @@ protected Object decode(
         position.set(Position.KEY_HDOP, parser.next());
 
         if (newFormat) {
-            position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1609.34);
             position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
         }
 
         position.set(Position.KEY_BATTERY, parser.next());
         position.set(Position.KEY_GSM, parser.next());
 
         if (!newFormat) {
-            position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_ODOMETER, parser.nextDouble() * 1609.34);
         }
 
         position.setValid(parser.nextInt() == 1);

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -48,8 +48,7 @@ public static double calculateDistance(Position firstPosition, Position lastPosi
         if (useOdometer && firstPosition.getAttributes().containsKey(Position.KEY_ODOMETER)
                 && lastPosition.getAttributes().containsKey(Position.KEY_ODOMETER)) {
             distance = (((Number) lastPosition.getAttributes().get(Position.KEY_ODOMETER)).doubleValue()
-                    - ((Number) firstPosition.getAttributes().get(Position.KEY_ODOMETER)).doubleValue())
-                    * 1000;
+                    - ((Number) firstPosition.getAttributes().get(Position.KEY_ODOMETER)).doubleValue());
         } else if (firstPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)
                 && lastPosition.getAttributes().containsKey(Position.KEY_TOTAL_DISTANCE)) {
             distance = ((Number) lastPosition.getAttributes().get(Position.KEY_TOTAL_DISTANCE)).doubleValue()

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -159,7 +159,8 @@ private List<Position> parseFormatA(DeviceSession deviceSession, ChannelBuffer b
                 }
 
                 if (BitUtil.check(flags, 4)) {
-                    position.set(Position.KEY_FUEL, buf.readUnsignedInt() + "|" + buf.readUnsignedInt());
+                    position.set(Position.KEY_FUEL_CONSUMPTION + "Accumulator1", buf.readUnsignedInt());
+                    position.set(Position.KEY_FUEL_CONSUMPTION + "Accumulator2", buf.readUnsignedInt());
                     position.set("hours1", buf.readUnsignedShort());
                     position.set("hours2", buf.readUnsignedShort());
                 }

File: src/org/traccar/model/Position.java
Patch:
@@ -39,6 +39,8 @@ public class Position extends Message {
     public static final String KEY_LAC = "lac";
     public static final String KEY_CID = "cid";
     public static final String KEY_FUEL = "fuel";
+    public static final String KEY_FUEL_CONSUMPTION = "fuelConsumption";
+    public static final String KEY_FUEL_INSTANT_CONSUMPTION = "fuelInstantConsumption";
     public static final String KEY_RFID = "rfid";
     public static final String KEY_VERSION = "version";
     public static final String KEY_TYPE = "type";

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -329,7 +329,7 @@ private Object decodeObd(Channel channel, SocketAddress remoteAddress, String se
         position.set(Position.KEY_RPM, parser.next());
         position.set(Position.KEY_OBD_SPEED, parser.next());
         position.set(Position.PREFIX_TEMP + 1, parser.next());
-        position.set("fuelConsumption", parser.next());
+        position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
         position.set("dtcsClearedDistance", parser.next());
         position.set("odbConnect", parser.next());
         position.set("dtcsNumber", parser.next());

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -87,7 +87,7 @@ public Gps103ProtocolDecoder(Gps103Protocol protocol) {
             .number("(dd)(dd)(dd),")             // time
             .number("(d+),")                     // odometer
             .number("(d+.d+)?,")                 // fuel instant
-            .number("(?:d+.d+)?,")               // fuel average
+            .number("(d+.d+)?,")                 // fuel average
             .number("(d+),")                     // hours
             .number("(d+),")                     // speed
             .number("d+.?d*%,")                  // power load
@@ -189,7 +189,8 @@ protected Object decode(
             getLastLocation(position, dateBuilder.getDate());
 
             position.set(Position.KEY_ODOMETER, parser.nextInt());
-            position.set(Position.KEY_FUEL, parser.next());
+            position.set(Position.KEY_FUEL_INSTANT_CONSUMPTION, parser.next());
+            position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
             position.set(Position.KEY_HOURS, parser.next());
             position.set(Position.KEY_OBD_SPEED, parser.next());
             position.set(Position.PREFIX_TEMP + 1, parser.next());

File: src/org/traccar/protocol/IntellitracProtocolDecoder.java
Patch:
@@ -109,7 +109,7 @@ protected Object decode(
         position.set(Position.KEY_RPM, parser.next());
         position.set("coolant", parser.next());
         position.set(Position.KEY_FUEL, parser.next());
-        position.set("consumption", parser.next());
+        position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
         position.set(Position.PREFIX_TEMP + 1, parser.next());
         position.set(Position.KEY_CHARGE, parser.next());
         position.set("tpl", parser.next());

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -231,7 +231,7 @@ private Position parseFormatA1(DeviceSession deviceSession, ChannelBuffer buf) {
         }
 
         if (BitUtil.check(flags, 1)) {
-            new FloatReader().readFloat(buf); // fuel consumtion
+            position.set(Position.KEY_FUEL_CONSUMPTION, new FloatReader().readFloat(buf));
             position.set("hours", new FloatReader().readFloat(buf));
             position.set("tank", buf.readUnsignedByte() * 0.4);
         }

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -75,7 +75,7 @@ public XirgoProtocolDecoder(XirgoProtocol protocol) {
             .number("(d+),")                     // satellites
             .number("(d+.?d*),")                 // hdop
             .number("(d+.?d*),")                 // odometer
-            .number("d+.?d*,")                   // fuel consumption
+            .number("(d+.?d*),")                 // fuel consumption
             .number("(d+.d+),")                  // battery
             .number("(d+),")                     // gsm
             .number("(d+),")                     // gps
@@ -134,6 +134,7 @@ protected Object decode(
 
         if (newFormat) {
             position.set(Position.KEY_ODOMETER, parser.next());
+            position.set(Position.KEY_FUEL_CONSUMPTION, parser.next());
         }
 
         position.set(Position.KEY_BATTERY, parser.next());

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -180,7 +180,7 @@ private String decodeAlarm(short value) {
         case 0x0F:
             return Position.ALARM_LOW_BATTERY;
         case 0x11:
-            return Position.ALARM_LOW_BATTERY;
+            return Position.ALARM_POWER_OFF;
         default:
             break;
         }

File: src/org/traccar/events/IgnitionEventHandler.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com), Andrey Kunitsyn (abyss@fox5.ru)
+ * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2016 Andrey Kunitsyn (abyss@fox5.ru)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/reports/Events.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com), Andrey Kunitsyn (abyss@fox5.ru)
+ * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2016 Andrey Kunitsyn (abyss@fox5.ru)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/reports/ReportUtils.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com), Andrey Kunitsyn (abyss@fox5.ru)
+ * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2016 Andrey Kunitsyn (abyss@fox5.ru)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/reports/Route.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com), Andrey Kunitsyn (abyss@fox5.ru)
+ * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2016 Andrey Kunitsyn (abyss@fox5.ru)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/reports/Summary.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com), Andrey Kunitsyn (abyss@fox5.ru)
+ * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2016 Andrey Kunitsyn (abyss@fox5.ru)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/reports/model/SummaryReport.java
Patch:
@@ -1,5 +1,6 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com), Andrey Kunitsyn (abyss@fox5.ru)
+ * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2016 Andrey Kunitsyn (abyss@fox5.ru)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/protocol/VisiontekProtocolDecoder.java
Patch:
@@ -109,7 +109,7 @@ protected Object decode(
 
         position.set(Position.KEY_SATELLITES, parser.next());
         position.set(Position.KEY_ODOMETER, parser.next());
-        position.set(Position.KEY_IGNITION, parser.next().equals("1"));
+        position.set(Position.KEY_IGNITION, parser.next());
         position.set(Position.PREFIX_IO + 1, parser.next());
         position.set(Position.PREFIX_IO + 2, parser.next());
         position.set("immobilizer", parser.next());

File: test/org/traccar/protocol/CalAmpProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(new CalAmpProtocol());
 
+        verifyPosition(decoder, binary(
+                "8305454205067001010102008157a9bddc57a96aaa17cdb98fccc1a457000056ac00000000000007250000ff8f000e00082711570000000000ffff101b00003148000010680000000000000000000000050000000000000000000005b0000000000000289600000000000000000000069b00000000000008e400000000000000000000000000000003000000010000070f"));
+
         verifyPosition(decoder, binary(
                 "83052132052924010101020001575c590300000000000000000000000000000000000000000000002c0000ff8f0000030801010000"));
         

File: src/org/traccar/api/resource/SessionResource.java
Patch:
@@ -41,7 +41,7 @@ public class SessionResource extends BaseResource {
 
     public static final String USER_ID_KEY = "userId";
     public static final String USER_COOKIE_KEY = "user";
-    public static final String PASS_COOKIE_KEY = "pass";
+    public static final String PASS_COOKIE_KEY = "password";
 
     @javax.ws.rs.core.Context
     private HttpServletRequest request;

File: src/org/traccar/api/resource/SessionResource.java
Patch:
@@ -63,7 +63,7 @@ public User get() throws SQLException {
                     }
                 }
             }
-            if (email != null && password != null){
+            if (email != null && password != null) {
                 User user = Context.getDataManager().login(email, password);
                 if (user != null) {
                     userId = user.getId();

File: src/org/traccar/notification/NotificationFormatter.java
Patch:
@@ -53,9 +53,9 @@ private NotificationFormatter() {
             + "Point: http://www.openstreetmap.org/?mlat=%3$f&mlon=%4$f#map=16/%3$f/%4$f%n"
             + "Time: %2$tc%n";
 
-    public static final String TITLE_TEMPLATE_TYPE_DEVICE_OVERSPEED = "%1$s: exeeds the speed";
+    public static final String TITLE_TEMPLATE_TYPE_DEVICE_OVERSPEED = "%1$s: exceeds the speed";
     public static final String MESSAGE_TEMPLATE_TYPE_DEVICE_OVERSPEED = "Device: %1$s%n"
-            + "Exeeds the speed: %5$f%n"
+            + "Exceeds the speed: %5$f%n"
             + "Point: http://www.openstreetmap.org/?mlat=%3$f&mlon=%4$f#map=16/%3$f/%4$f%n"
             + "Time: %2$tc%n";
 

File: test/org/traccar/protocol/CastelProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public void testDecode() throws Exception {
 
         CastelProtocolDecoder decoder = new CastelProtocolDecoder(new CastelProtocol());
 
+        verifyPosition(decoder, binary(ByteOrder.LITTLE_ENDIAN,
+                "40403600043231334e583230313630303033343600000000004009ad31a457050810061a35b29bf80ae6da83180300320bbe32580d0a40403600043231334e583230313630303033343600000000004009ad31a457050810061a35b29bf80ae6da83180300320bbe32580d0a"));
+
         verifyNothing(decoder, binary(ByteOrder.LITTLE_ENDIAN,
                 "4040d400043535333133350000000000000000000000000000100196d499574bd899570000000000000000010000000000000000000000002410000000004944445f3231334730325f532056322e332e345f4e004944445f3231334730325f482056322e332e345f4e0032000110021003100410051006100710081009100a100b100c100d100e1011100111021103110411051106110711011202120312041201130213031301160216011701180218011b011c011d011e011f021f031f041f051f061f071f012102210126012701285b410d0a"));
 

File: src/org/traccar/reports/General.java
Patch:
@@ -1,5 +1,7 @@
 package org.traccar.reports;
 
+import java.math.BigDecimal;
+import java.math.RoundingMode;
 import java.sql.SQLException;
 import java.util.Collection;
 import java.util.Date;
@@ -76,6 +78,7 @@ private static GeneralResult calculateGeneralResult(long deviceId, Date from, Da
                 result.setMaxSpeed(position.getSpeed());
             }
             result.setAverageSpeed(speedSum / positions.size());
+            result.setDistance(new BigDecimal(result.getDistance()).setScale(2, RoundingMode.HALF_UP).doubleValue());
         }
         return result;
     }

File: src/org/traccar/web/CsvBuilder.java
Patch:
@@ -3,6 +3,7 @@
 import java.beans.Introspector;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.nio.charset.StandardCharsets;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Map;
@@ -145,6 +146,6 @@ public void addArray(Collection<?> array) {
     }
 
     public byte[] get() {
-        return String.valueOf(builder).getBytes();
+        return String.valueOf(builder).getBytes(StandardCharsets.UTF_8);
     }
 }

File: src/org/traccar/model/Position.java
Patch:
@@ -54,7 +54,7 @@ public class Position extends Message {
     public static final String KEY_APPROXIMATE = "approximate";
     public static final String KEY_THROTTLE = "throttle";
     public static final String KEY_MOTION = "motion";
-    public static final String KEY_GUARD = "guard";
+    public static final String KEY_ARMED = "armed";
 
     public static final String KEY_OBD_SPEED = "obd-speed";
     public static final String KEY_OBD_ODOMETER = "obd-odometer";
@@ -83,7 +83,6 @@ public class Position extends Message {
     public static final String ALARM_GEOFENCE_ENTER = "geofenceEnter";
     public static final String ALARM_GEOFENCE_EXIT = "geofenceExit";
     public static final String ALARM_GPS_ANTENNA_CUT = "gpsAntennaCut";
-    public static final String ALARM_OIL_CUT = "oilCut";
     public static final String ALARM_ACCIDENT = "accident";
 
 

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -99,7 +99,7 @@ protected Object decode(
         odometer = odometer.replace("?", "F");
         position.set(Position.KEY_ODOMETER, Integer.parseInt(odometer, 16));
 
-        parser.next(); //there is no meaningful alarms
+        parser.next(); // there is no meaningful alarms
         position.set(Position.PREFIX_ADC + 1, parser.next());
 
         return position;

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -95,9 +95,9 @@ private ParseResult parsePosition(DeviceSession deviceSession, ChannelBuffer buf
 
         buf.skipBytes(6); // event time
 
-        short guardStatus = buf.readUnsignedByte();
-        position.set(Position.KEY_GUARD, guardStatus & 0x7F);
-        if (BitUtil.check(guardStatus, 7)) {
+        short armedStatus = buf.readUnsignedByte();
+        position.set(Position.KEY_ARMED, armedStatus & 0x7F);
+        if (BitUtil.check(armedStatus, 7)) {
             position.set(Position.KEY_ALARM, Position.ALARM_GENERAL);
         }
         position.set(Position.KEY_STATUS, buf.readUnsignedByte());

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -79,8 +79,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)
         Log.info(formatChannel(e.getChannel()) + " disconnected");
         closeChannel(e.getChannel());
 
-        if (ctx.getPipeline().get("httpDecoder") == null &&
-                !(ctx.getPipeline().get("objectDecoder") instanceof TeltonikaProtocolDecoder)) {
+        if (ctx.getPipeline().get("httpDecoder") == null
+                && !(ctx.getPipeline().get("objectDecoder") instanceof TeltonikaProtocolDecoder)) {
             Context.getConnectionManager().removeActiveDevice(e.getChannel());
         }
     }

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -25,6 +25,7 @@
 import org.jboss.netty.handler.timeout.IdleStateEvent;
 import org.traccar.helper.Log;
 import org.traccar.model.Position;
+import org.traccar.protocol.TeltonikaProtocolDecoder;
 
 import java.sql.SQLException;
 import java.text.SimpleDateFormat;
@@ -78,7 +79,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)
         Log.info(formatChannel(e.getChannel()) + " disconnected");
         closeChannel(e.getChannel());
 
-        if (ctx.getPipeline().get("httpDecoder") == null) {
+        if (ctx.getPipeline().get("httpDecoder") == null &&
+                !(ctx.getPipeline().get("objectDecoder") instanceof TeltonikaProtocolDecoder)) {
             Context.getConnectionManager().removeActiveDevice(e.getChannel());
         }
     }

File: src/org/traccar/protocol/GatorProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -35,7 +35,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 3, 2, 1, 0));
+                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 3, 2));
                 pipeline.addLast("objectDecoder", new GatorProtocolDecoder(GatorProtocol.this));
             }
         });

File: src/org/traccar/protocol/TzoneProtocol.java
Patch:
@@ -34,7 +34,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(256, 2, 2));
+                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(256, 2, 2, 2, 0));
                 pipeline.addLast("objectDecoder", new TzoneProtocolDecoder(TzoneProtocol.this));
             }
         });

File: src/org/traccar/notification/NotificationMail.java
Patch:
@@ -112,7 +112,7 @@ public static void sendMailSync(long userId, Event event, Position position) {
                     return;
                 }
             }
-            mailSession = Session.getDefaultInstance(mailServerProperties, null);
+            mailSession = Session.getInstance(mailServerProperties, null);
 
             mailMessage = new MimeMessage(mailSession);
 

File: src/org/traccar/ExtendedObjectDecoder.java
Patch:
@@ -36,7 +36,8 @@ private void saveOriginal(Object decodedMessage, Object originalMessage) {
         if (Context.getConfig().getBoolean("database.saveOriginal") && decodedMessage instanceof Position) {
             Position position = (Position) decodedMessage;
             if (originalMessage instanceof ChannelBuffer) {
-                position.set(Position.KEY_ORIGINAL, ChannelBuffers.hexDump((ChannelBuffer) originalMessage));
+                ChannelBuffer buf = (ChannelBuffer) originalMessage;
+                position.set(Position.KEY_ORIGINAL, ChannelBuffers.hexDump(buf, 0, buf.writerIndex()));
             } else if (originalMessage instanceof String) {
                 position.set(Position.KEY_ORIGINAL, DatatypeConverter.printHexBinary(
                                 ((String) originalMessage).getBytes(StandardCharsets.US_ASCII)));

File: test/org/traccar/protocol/HuaShengProtocolDecoderTest.java
Patch:
@@ -13,8 +13,8 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, binary(
                 "c000000077aa0200000000000e000100143347315f48312e315f56312e30372e54000300133335353835353035303434303635380004000b3531323030303000050005010006000400070004000800050000090018383936313032353431343533333239313833360d000a000f796573696e7465726e6574c0"));
 
-        //verifyPosition(decoder, binary(
-        //        "c00000003faa0000000000003ba5a5005a3f00dbdc00000031363037303530373132353700e6d186ffcc7a25002201160010000000010015000000000000000000c0"));
+        verifyPosition(decoder, binary(
+                "c00000004baa00000000000005c400000131363037303630323537303800e6c82effcc7cb0003900a30089000000010015000000000000000000f20559ff577ce3980005000a060500000087c0"));
 
         verifyNothing(decoder, binary(
                 "c0010c003e0002000000000010020012a0014f42445f3347315f56312e302e330013a0043335353835353035303434303635380006a08701000006a0a1035fc0"));

File: src/org/traccar/events/MotionEventHandler.java
Patch:
@@ -28,7 +28,7 @@
 
 public class MotionEventHandler extends BaseEventHandler {
 
-    private static final double SPEED_THRESHOLD  = 0.01;
+    private static final double SPEED_THRESHOLD = 0.01;
     private int suppressRepeated;
 
     public MotionEventHandler() {

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -80,7 +80,7 @@ private void processStatus(Position position, long status) {
             }
 
         }
-        position.set(Position.KEY_IGNITION, !BitUtil.check(status, 10));
+        position.set(Position.KEY_IGNITION, BitUtil.check(status, 10));
         position.set(Position.KEY_STATUS, status);
     }
 

File: src/org/traccar/Main.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Locale;
 
 public final class Main {
-    static final long CLEAN_DELAY = 500;
+    static final long CLEAN_DELAY = 0;
     static final long CLEAN_PERIOD = 24 * 60 * 60 * 1000;
 
     private Main() {

File: src/org/traccar/Main.java
Patch:
@@ -23,7 +23,7 @@
 import java.util.Locale;
 
 public final class Main {
-    static final long CLEAN_DELAY = 10 * 1000;
+    static final long CLEAN_DELAY = 500;
     static final long CLEAN_PERIOD = 24 * 60 * 60 * 1000;
 
     private Main() {

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -48,8 +48,7 @@ protected Object decode(
         QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());
         Map<String, List<String>> params = decoder.getParameters();
         if (params.isEmpty()) {
-            decoder = new QueryStringDecoder(
-                    request.getContent().toString(StandardCharsets.US_ASCII), false);
+            decoder = new QueryStringDecoder(request.getContent().toString(StandardCharsets.US_ASCII), false);
             params = decoder.getParameters();
         }
 
@@ -65,7 +64,8 @@ protected Object decode(
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession == null) {
                         if (channel != null) {
-                            channel.write(new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.BAD_REQUEST));
+                            channel.write(
+                                    new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.BAD_REQUEST));
                         }
                         return null;
                     }

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -64,6 +64,9 @@ protected Object decode(
                 case "deviceid":
                     DeviceSession deviceSession = getDeviceSession(channel, remoteAddress, value);
                     if (deviceSession == null) {
+                        if (channel != null) {
+                            channel.write(new DefaultHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.BAD_REQUEST));
+                        }
                         return null;
                     }
                     position.setDeviceId(deviceSession.getDeviceId());

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -47,9 +47,9 @@ public WatchProtocolDecoder(WatchProtocol protocol) {
             .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .number("(dd)(dd)(dd),")             // time
             .expression("([AV]),")               // validity
-            .number(" *-?(d+.d+),")              // latitude
+            .number(" *(-?d+.d+),")              // latitude
             .expression("([NS]),")
-            .number(" *-?(d+.d+),")              // longitude
+            .number(" *(-?d+.d+),")              // longitude
             .expression("([EW])?,")
             .number("(d+.d+),")                  // speed
             .number("(d+.?d*),")                 // course

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -68,7 +68,7 @@ private void processStatus(Position position, long status) {
                 || !BitUtil.check(status, 3) || !BitUtil.check(status, 4) || !BitUtil.check(status, 7)) {
 
             if (!BitUtil.check(status, 0)) {
-                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);//theft alarm in protocol
+                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);
             } else if (!BitUtil.check(status, 1)) {
                 position.set(Position.KEY_ALARM, "robbery");
             } else if (!BitUtil.check(status, 3)) {

File: src/org/traccar/Main.java
Patch:
@@ -23,8 +23,8 @@
 import java.util.Locale;
 
 public final class Main {
-    static final long cleanDelay = 10*1000;
-    static final long cleanPeriod = 24*60*60*1000;
+    static final long CLEAN_DELAY = 10 * 1000;
+    static final long CLEAN_PERIOD = 24 * 60 * 60 * 1000;
 
     private Main() {
     }
@@ -50,7 +50,7 @@ public void run() {
                     Log.warning(error);
                 }
             }
-        }, cleanDelay, cleanPeriod);
+        }, CLEAN_DELAY, CLEAN_PERIOD);
 
         Runtime.getRuntime().addShutdownHook(new Thread() {
             @Override

File: src/org/traccar/database/DataManager.java
Patch:
@@ -411,7 +411,7 @@ public void clearPositionsHistory() throws SQLException {
 
         for (Device device : getAllDevices()) {
             Date lastUpdate = device.getLastUpdate();
-            if(lastUpdate != null){
+            if (lastUpdate != null) {
 
                 Date dateBefore = new Date(lastUpdate.getTime() - histDays * 24 * 3600 * 1000);
 

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -68,7 +68,7 @@ private void processStatus(Position position, long status) {
                 || !BitUtil.check(status, 3) || !BitUtil.check(status, 4) || !BitUtil.check(status, 7)) {
 
             if (!BitUtil.check(status, 0)){
-                position.set(Position.KEY_ALARM, Event.TYPE_VIBRATION_ALARM);//theft alarm
+                position.set(Position.KEY_ALARM, Position.ALARM_VIBRATION);//theft alarm in protocol
             } else if (!BitUtil.check(status, 1)){
                 position.set(Position.KEY_ALARM, "robbery");
             } else if (!BitUtil.check(status, 3)){

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -121,7 +121,7 @@ protected Object decode(
 
             int power = parser.nextInt();
             if (power != 65535) {
-                position.set(Position.KEY_POWER, battery);
+                position.set(Position.KEY_POWER, power);
             }
 
             return position;

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
+        verifyAttributes(decoder, text(
+                "(013632651491,ZC20,180716,144222,6,392,65535,255"));
+
         verifyAttributes(decoder, text(
                 "(087072009461BR00000007V0000.0000N00000.0000E000.00014039900000000L00000000"));
 

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, binary(
                 "787805120099abec0d0a"));
 
+        verifyAttributes(decoder, binary(
+                "797900089400000002e852d70d0a"));
+
         verifyNothing(decoder, binary(
                 "78780D01086471700328358100093F040D0A"));
 

File: src/org/traccar/protocol/CarcellProtocolDecoder.java
Patch:
@@ -141,7 +141,7 @@ protected Object decode(
 
             parser.next(); // panic button status
 
-            Integer painelStatus = parser.nextInt();
+            String painelStatus = parser.next();
             position.set(Position.KEY_ALARM, painelStatus.equals("1"));
             position.set("painel", painelStatus.equals("2"));
 

File: src/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -173,7 +173,7 @@ private Position decodeOld(Channel channel, SocketAddress remoteAddress, String
                     position.set(Position.KEY_CHARGE, Integer.parseInt(charger) == 1);
                 }
 
-                if (parser.hasNext(3)) {
+                if (parser.hasNext(4)) {
                     position.set(Position.KEY_MCC, parser.nextInt());
                     position.set(Position.KEY_MNC, parser.nextInt());
                     position.set(Position.KEY_LAC, parser.nextInt(16));

File: src/org/traccar/BaseProtocol.java
Patch:
@@ -33,7 +33,6 @@ public abstract class BaseProtocol implements Protocol {
 
     public BaseProtocol(String name) {
         this.name = name;
-        supportedCommands.add(Command.TYPE_CUSTOM);
     }
 
     @Override
@@ -47,7 +46,9 @@ public void setSupportedCommands(String... commands) {
 
     @Override
     public Collection<String> getSupportedCommands() {
-        return supportedCommands;
+        Set<String> commands = new HashSet<>(supportedCommands);
+        commands.add(Command.TYPE_CUSTOM);
+        return commands;
     }
 
     @Override

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -34,9 +34,10 @@ protected Object encodeCommand(Command command) {
                     if (command.getAttributes().get(Command.KEY_DATA).equals("1")) {
                         return formatCommand(command, "SA200CMD;{%s};02;Enable{%s}\r",
                                 Command.KEY_UNIQUE_ID, Command.KEY_INDEX);
-                    } else
+                    } else {
                         return formatCommand(command, "SA200CMD;{%s};02;Disable{%s}\r",
                                 Command.KEY_UNIQUE_ID, Command.KEY_INDEX);
+                    }
                 }
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "SA200CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -34,9 +34,10 @@ protected Object encodeCommand(Command command) {
                     if (command.getAttributes().get(Command.KEY_DATA).equals("1")) {
                         return formatCommand(command, "SA200CMD;{%s};02;Enable{%s}\r",
                                 Command.KEY_UNIQUE_ID, Command.KEY_INDEX);
-                    } else
+                    } else {
                         return formatCommand(command, "SA200CMD;{%s};02;Disable{%s}\r",
                                 Command.KEY_UNIQUE_ID, Command.KEY_INDEX);
+                    }
                 }
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "SA200CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);

File: src/org/traccar/protocol/SuntechProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015-2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/protocol/SuntechProtocol.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015-2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2016 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015-2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -30,7 +30,8 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_POSITION_SINGLE:
                 return formatCommand(command, "SA200GTR;{%s};02;\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_OUTPUT_CONTROL:
-                return formatCommand(command, "SA200CMD;{%s};0{%s};Enable{%s}\r", Command.KEY_UNIQUE_ID, Command.KEY_DATA, Command.KEY_DATA);
+                return formatCommand(command, "SA200CMD;{%s};0{%s};Enable{%s}\r", 
+                        Command.KEY_UNIQUE_ID, Command.KEY_DATA, Command.KEY_DATA);
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "SA200CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -30,7 +30,7 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_POSITION_SINGLE:
                 return formatCommand(command, "SA200GTR;{%s};02;\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_OUTPUT_CONTROL:
-                return formatCommand(command, "SA200CMD;{%s};0{%s};Enable{%s}\r", Command.KEY_UNIQUE_ID, Command.KEY_DATA);
+                return formatCommand(command, "SA200CMD;{%s};0{%s};Enable{%s}\r", Command.KEY_UNIQUE_ID, Command.KEY_DATA, Command.KEY_DATA);
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "SA200CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -30,7 +30,7 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_POSITION_SINGLE:
                 return formatCommand(command, "SA200GTR;{%s};02;\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_OUTPUT_CONTROL:
-                return formatCommand(command, "SA200CMD;{%s};0{%s};Enable1\r", Command.KEY_UNIQUE_ID, Command.KEY_DATA);
+                return formatCommand(command, "SA200CMD;{%s};0{%s};Enable{%s}\r", Command.KEY_UNIQUE_ID, Command.KEY_DATA);
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "SA200CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:

File: src/org/traccar/model/Position.java
Patch:
@@ -28,6 +28,7 @@ public class Position extends Message {
     public static final String KEY_GPS = "gps";
     public static final String KEY_EVENT = "event";
     public static final String KEY_ALARM = "alarm";
+    public static final String KEY_ALARM_TYPE = "alarm-type";   //added by Erez
     public static final String KEY_STATUS = "status";
     public static final String KEY_ODOMETER = "odometer";
     public static final String KEY_HOURS = "hours";

File: src/org/traccar/database/NotificationManager.java
Patch:
@@ -54,7 +54,7 @@ public void updateEvent(Event event, Position position) {
         }
 
         Set<Long> users = Context.getPermissionsManager().getDeviceUsers(event.getDeviceId());
-        for (Long userId : users) {
+        for (long userId : users) {
             if (event.getGeofenceId() == 0 || Context.getGeofenceManager() != null
                     && Context.getGeofenceManager().checkGeofence(userId, event.getGeofenceId())) {
                 Notification notification = getUserNotificationByType(userId, event.getType());

File: src/org/traccar/events/GeofenceEventHandler.java
Patch:
@@ -66,7 +66,7 @@ protected Collection<Event> analyzePosition(Position position) {
         try {
             if (dataManager.getLastEvents(position.getDeviceId(),
                     Event.TYPE_GEOFENCE_ENTER, suppressRepeated).isEmpty()) {
-                for (Long geofenceId : newGeofences) {
+                for (long geofenceId : newGeofences) {
                     Event event = new Event(Event.TYPE_GEOFENCE_ENTER, position.getDeviceId(), position.getId());
                     event.setGeofenceId(geofenceId);
                     events.add(event);
@@ -78,7 +78,7 @@ protected Collection<Event> analyzePosition(Position position) {
         try {
             if (dataManager.getLastEvents(position.getDeviceId(),
                     Event.TYPE_GEOFENCE_EXIT, suppressRepeated).isEmpty()) {
-                for (Long geofenceId : oldGeofences) {
+                for (long geofenceId : oldGeofences) {
                     Event event = new Event(Event.TYPE_GEOFENCE_EXIT, position.getDeviceId(), position.getId());
                     event.setGeofenceId(geofenceId);
                     events.add(event);

File: src/org/traccar/api/resource/GeofencePermissionResource.java
Patch:
@@ -39,7 +39,7 @@ public Response add(GeofencePermission entity) throws SQLException {
         Context.getPermissionsManager().checkUser(getUserId(), entity.getUserId());
         Context.getPermissionsManager().checkGeofence(getUserId(), entity.getGeofenceId());
         Context.getDataManager().linkGeofence(entity.getUserId(), entity.getGeofenceId());
-        Context.getGeofenceManager().refresh();
+        Context.getGeofenceManager().refreshUserGeofences();
         return Response.ok(entity).build();
     }
 
@@ -49,7 +49,7 @@ public Response remove(GeofencePermission entity) throws SQLException {
         Context.getPermissionsManager().checkUser(getUserId(), entity.getUserId());
         Context.getPermissionsManager().checkGeofence(getUserId(), entity.getGeofenceId());
         Context.getDataManager().unlinkGeofence(entity.getUserId(), entity.getGeofenceId());
-        Context.getGeofenceManager().refresh();
+        Context.getGeofenceManager().refreshUserGeofences();
         return Response.noContent().build();
     }
 

File: src/org/traccar/api/resource/GeofenceResource.java
Patch:
@@ -78,7 +78,7 @@ public Response add(Geofence entity) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getDataManager().addGeofence(entity);
         Context.getDataManager().linkGeofence(getUserId(), entity.getId());
-        Context.getGeofenceManager().refresh();
+        Context.getGeofenceManager().refreshGeofences();
         return Response.ok(entity).build();
     }
 
@@ -97,7 +97,7 @@ public Response remove(@PathParam("id") long id) throws SQLException {
         Context.getPermissionsManager().checkReadonly(getUserId());
         Context.getPermissionsManager().checkGeofence(getUserId(), id);
         Context.getDataManager().removeGeofence(id);
-        Context.getGeofenceManager().refresh();
+        Context.getGeofenceManager().refreshGeofences();
         return Response.noContent().build();
     }
 

File: src/org/traccar/database/DataManager.java
Patch:
@@ -241,7 +241,7 @@ private void updateGroupCache(boolean force) throws SQLException {
     }
 
     public Group getGroupById(long id) {
-        /*boolean forceUpdate;
+        boolean forceUpdate;
         groupsLock.readLock().lock();
         try {
             forceUpdate = !groupsById.containsKey(id);
@@ -253,7 +253,7 @@ public Group getGroupById(long id) {
             updateGroupCache(forceUpdate);
         } catch (SQLException e) {
             Log.warning(e);
-        }*/
+        }
 
         groupsLock.readLock().lock();
         try {

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -52,9 +52,9 @@ private void parseIdentification(Channel channel, SocketAddress remoteAddress, C
         }
     }
 
-    private static final int CODEC_GH3000 = 0x07;
-    private static final int CODEC_FM4X00 = 0x08;
-    private static final int CODEC_12 = 0x0C;
+    public static final int CODEC_GH3000 = 0x07;
+    public static final int CODEC_FM4X00 = 0x08;
+    public static final int CODEC_12 = 0x0C;
 
     private void decodeSerial(Position position, ChannelBuffer buf) {
 

File: src/org/traccar/protocol/SuntechProtocol.java
Patch:
@@ -32,7 +32,7 @@ public SuntechProtocol() {
         super("suntech");
         setSupportedCommands(
                 Command.TYPE_ENGINE_STOP,
-                Command.TYPE_ENGINE_STOP);
+                Command.TYPE_ENGINE_RESUME);
     }
 
     @Override

File: src/org/traccar/protocol/SuntechProtocol.java
Patch:
@@ -32,7 +32,7 @@ public SuntechProtocol() {
         super("suntech");
         setSupportedCommands(
                 Command.TYPE_ENGINE_STOP,
-                Command.TYPE_ENGINE_STOP);
+                Command.TYPE_ENGINE_RESUME);
     }
 
     @Override

File: src/org/traccar/database/NotificationManager.java
Patch:
@@ -87,7 +87,7 @@ private Set<Notification> getUserNotificationsUnsafe(long userId) {
     public Set<Notification> getUserNotifications(long userId) {
         notificationsLock.readLock().lock();
         try {
-        return getUserNotificationsUnsafe(userId);
+            return getUserNotificationsUnsafe(userId);
         } finally {
             notificationsLock.readLock().unlock();
         }

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -20,7 +20,6 @@
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.BcdUtil;
-import org.traccar.helper.Checksum;
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -271,9 +271,7 @@ protected Object decode(
 
         } else if (header == 0x7979) {
 
-            int length = buf.readUnsignedShort();
-            int dataLength = length - 6;
-
+            buf.readUnsignedShort(); // length
             int type = buf.readUnsignedByte();
 
             if (type == MSG_INFO) {

File: src/org/traccar/protocol/HuaShengFrameDecoder.java
Patch:
@@ -16,7 +16,6 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
 import org.jboss.netty.handler.codec.frame.FrameDecoder;

File: src/org/traccar/protocol/HuaShengProtocol.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
 import org.traccar.BaseProtocol;
 import org.traccar.TrackerServer;
 

File: src/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -31,7 +31,8 @@ public WondexProtocol() {
         super("wondex");
         setSupportedCommands(
                 Command.TYPE_REBOOT_DEVICE,
-                Command.TYPE_POSITION_SINGLE);
+                Command.TYPE_POSITION_SINGLE,
+                Command.TYPE_IDENTIFICATION);
     }
 
     @Override

File: src/org/traccar/protocol/WondexProtocolEncoder.java
Patch:
@@ -16,6 +16,8 @@ protected Object encodeCommand(Command command) {
             return formatCommand(command, "$WP+REBOOT={%s}", Command.KEY_DEVICE_PASSWORD);
         case Command.TYPE_POSITION_SINGLE:
             return formatCommand(command, "$WP+GETLOCATION={%s}", Command.KEY_DEVICE_PASSWORD);
+        case Command.TYPE_IDENTIFICATION:
+            return formatCommand(command, "$WP+VER={%s}", Command.KEY_DEVICE_PASSWORD);
         default:
             Log.warning(new UnsupportedOperationException(command.getType()));
             break;

File: src/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -31,7 +31,8 @@ public WondexProtocol() {
         super("wondex");
         setSupportedCommands(
                 Command.TYPE_REBOOT_DEVICE,
-                Command.TYPE_POSITION_SINGLE);
+                Command.TYPE_POSITION_SINGLE,
+                Command.TYPE_IDENTIFICATION);
     }
 
     @Override

File: src/org/traccar/protocol/WondexProtocolEncoder.java
Patch:
@@ -16,6 +16,8 @@ protected Object encodeCommand(Command command) {
             return formatCommand(command, "$WP+REBOOT={%s}", Command.KEY_DEVICE_PASSWORD);
         case Command.TYPE_POSITION_SINGLE:
             return formatCommand(command, "$WP+GETLOCATION={%s}", Command.KEY_DEVICE_PASSWORD);
+        case Command.TYPE_IDENTIFICATION:
+            return formatCommand(command, "$WP+VER={%s}", Command.KEY_DEVICE_PASSWORD);
         default:
             Log.warning(new UnsupportedOperationException(command.getType()));
             break;

File: test/org/traccar/protocol/Pt502ProtocolDecoderTest.java
Patch:
@@ -29,7 +29,7 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, text(
                 "$POS,6095,233344.000,V,0933.0451,N,06912.3360,W,,,151112,,,N/00000,00000/0/1677600/"));
 
-        verifyPosition(decoder, text(
+        verifyNothing(decoder, text(
                 "$PHO0,6091,233606.000,A,0902.9855,N,06944.3654,W,0.0,43.8,141112,,,A/00010,00000/0/224000//"));
         
         verifyPosition(decoder, text(

File: src/org/traccar/protocol/GranitProtocolDecoder.java
Patch:
@@ -85,7 +85,7 @@ private static void decodeStructure(ChannelBuffer buf, Position position) {
         double latitude = latDegrees + latMinutes / 60000.0;
         double longitude = lonDegrees + lonMinutes / 60000.0;
         if (!BitUtil.check(flags, 4)) {
-            latitude = -latDegrees;
+            latitude = -latitude;
         }
         if (!BitUtil.check(flags, 5)) {
             longitude = -longitude;

File: src/org/traccar/protocol/GranitProtocolDecoder.java
Patch:
@@ -85,7 +85,7 @@ private static void decodeStructure(ChannelBuffer buf, Position position) {
         double latitude = latDegrees + latMinutes / 60000.0;
         double longitude = lonDegrees + lonMinutes / 60000.0;
         if (!BitUtil.check(flags, 4)) {
-            latitude = -latDegrees;
+            latitude = -latitude;
         }
         if (!BitUtil.check(flags, 5)) {
             longitude = -longitude;

File: src/org/traccar/protocol/GranitProtocolDecoder.java
Patch:
@@ -136,7 +136,7 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
 
         int indexTilde = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder("~"));
 
-        if (hasDeviceId() &&  indexTilde == -1) {
+        if (hasDeviceId() && indexTilde == -1) {
             String bufString = buf.toString(StandardCharsets.US_ASCII);
             Position position = new Position();
             position.setProtocol(getProtocolName());

File: src/org/traccar/model/Command.java
Patch:
@@ -44,6 +44,7 @@ public class Command extends Message {
     public static final String TYPE_ALARM_SOS = "alarmSos";
     public static final String TYPE_ALARM_REMOVE = "alarmRemove";
     public static final String TYPE_ALARM_CLOCK = "alarmClock";
+    public static final String TYPE_ALARM_SPEED = "alarmSpeed";
 
     public static final String KEY_UNIQUE_ID = "uniqueId";
     public static final String KEY_FREQUENCY = "frequency";

File: src/org/traccar/protocol/Pt502Protocol.java
Patch:
@@ -31,6 +31,8 @@ public class Pt502Protocol extends BaseProtocol {
     public Pt502Protocol() {
         super("pt502");
         setSupportedCommands(
+                Command.TYPE_SET_TIMEZONE,
+                Command.TYPE_ALARM_SPEED,
                 Command.TYPE_OUTPUT_CONTROL);
     }
 

File: src/org/traccar/model/Command.java
Patch:
@@ -44,6 +44,7 @@ public class Command extends Message {
     public static final String TYPE_ALARM_SOS = "alarmSos";
     public static final String TYPE_ALARM_REMOVE = "alarmRemove";
     public static final String TYPE_ALARM_CLOCK = "alarmClock";
+    public static final String TYPE_ALARM_SPEED = "alarmSpeed";
 
     public static final String KEY_UNIQUE_ID = "uniqueId";
     public static final String KEY_FREQUENCY = "frequency";

File: src/org/traccar/protocol/Pt502Protocol.java
Patch:
@@ -31,6 +31,8 @@ public class Pt502Protocol extends BaseProtocol {
     public Pt502Protocol() {
         super("pt502");
         setSupportedCommands(
+                Command.TYPE_SET_TIMEZONE,
+                Command.TYPE_ALARM_SPEED,
                 Command.TYPE_OUTPUT_CONTROL);
     }
 

File: src/org/traccar/protocol/GranitProtocol.java
Patch:
@@ -17,6 +17,7 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
+import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.traccar.BaseProtocol;
 import org.traccar.TrackerServer;
 import org.traccar.model.Command;
@@ -39,7 +40,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new GranitFrameDecoder());
+                pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024, true, false));
                 pipeline.addLast("objectEncoder", new GranitProtocolEncoder());
                 pipeline.addLast("objectDecoder", new GranitProtocolDecoder(GranitProtocol.this));
             }

File: test/org/traccar/protocol/GranitProtocolDecoderTest.java
Patch:
@@ -16,10 +16,10 @@ public void testDecode() throws Exception {
                 "2b525243427e1a003e2934757c57b8b03c38d279b4e61e9bd7006b000000001c00002a45330d0a"));
         
         verifyPositions(decoder, binary(ByteOrder.LITTLE_ENDIAN,
-        		"2b444441547e84003e290401d01690737c57b8903c383c7fa0e5081b64006b000000001c0000b8803c388e7fe7e5102197006c000000001c0000b8813c38ad7f02e6042035006c000000001d0000b8813c38bf7f13e6001d1e006c000000001d0000b8813c38bf7f13e6001d00006c000000001d0000b8903c38977f34e6091065006c000000001e000014002a39320d0a"));
+                "2b444441547e84003e290401d01690737c57b8903c383c7fa0e5081b64006b000000001c0000b8803c388e7fe7e5102197006c000000001c0000b8813c38ad7f02e6042035006c000000001d0000b8813c38bf7f13e6001d1e006c000000001d0000b8813c38bf7f13e6001d00006c000000001d0000b8903c38977f34e6091065006c000000001e000014002a39320d0a"));
         
         verifyPositions(decoder, binary(ByteOrder.LITTLE_ENDIAN,
-        		"2b444441547e84003e290401d41680747c57f8a03c38987f50e6005300006c000000001c0000f8b03c38987f50e6005300006c000000001c0000fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe14002a43460d0a"));
+                "2b444441547e84003e290401d41680747c57f8a03c38987f50e6005300006c000000001c0000f8b03c38987f50e6005300006c000000001c0000fefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefefe14002a43460d0a"));
         
         //+IDNT: Navigator.04x  Firmware version  0712GLN *21
         verifyAttributes(decoder, binary(ByteOrder.LITTLE_ENDIAN,

File: src/org/traccar/protocol/HuaShengProtocolDecoder.java
Patch:
@@ -41,8 +41,8 @@ private static void sendResponse(Channel channel, int type, ChannelBuffer conten
             ChannelBuffer response = ChannelBuffers.dynamicBuffer();
             response.writeByte(0xC0);
             response.writeShort(0x0100);
-            response.writeShort(response.capacity()); // TODO: length
-            response.writeByte(type);
+            response.writeShort(12 + content.readableBytes());
+            response.writeShort(type);
             response.writeShort(0);
             response.writeInt(1);
             response.writeBytes(content);

File: test/org/traccar/protocol/HuaShengProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         HuaShengProtocolDecoder decoder = new HuaShengProtocolDecoder(new HuaShengProtocol());
 
+        verifyNothing(decoder, binary(
+                "c000000077aa0200000000000e000100143347315f48312e315f56312e30372e54000300133335353835353035303434303635380004000b3531323030303000050005010006000400070004000800050000090018383936313032353431343533333239313833360d000a000f796573696e7465726e6574c0"));
+
         verifyNothing(decoder, binary(
                 "c0010c003e0002000000000010020012a0014f42445f3347315f56312e302e330013a0043335353835353035303434303635380006a08701000006a0a1035fc0"));
 

File: src/org/traccar/protocol/AstraProtocol.java
Patch:
@@ -42,7 +42,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
         serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-            	pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 1, 2, -3, 0));
+                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 1, 2, -3, 0));
                 pipeline.addLast("objectDecoder", new AstraProtocolDecoder(AstraProtocol.this));
             }
         });

File: src/org/traccar/database/GeofenceManager.java
Patch:
@@ -150,7 +150,7 @@ public final void refresh() {
                             deviceGeofenceIds.clear();
                         }
                         Position lastPosition = Context.getConnectionManager().getLastPosition(device.getId());
-                        if (lastPosition != null) {
+                        if (lastPosition != null && deviceGeofencesWithGroups.containsKey(device.getId())) {
                             for (Long geofenceId : deviceGeofencesWithGroups.get(device.getId())) {
                                 if (getGeofence(geofenceId).getGeometry()
                                         .containsPoint(lastPosition.getLatitude(), lastPosition.getLongitude())) {

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         MeitrackProtocolDecoder decoder = new MeitrackProtocolDecoder(new MeitrackProtocol());
 
+        verifyPosition(decoder, buffer(
+                "$$K157,866771027160687,AAA,3,37.040231,10.042391,160412151656,A,10,11,0,48,0.8,21,1035518,774980,605|2|0010|307B,0400,0000|0000|0000|0A47|03E3,,,1,0000,001206*2C"));
+
         verifyNothing(decoder, buffer(
                 "$$D28,353358017784062,D03,OK*F3"));
 

File: test/org/traccar/protocol/TramigoProtocolDecoderTest.java
Patch:
@@ -33,8 +33,8 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, binary(ByteOrder.LITTLE_ENDIAN,
                 "80001d3cb000b3000101160f032f1466b475e0564176656e7369732053797353657276653a205374617475732c204750533a203931252c2047534d3a203737252c20475052533a20436f6e6e65637465642c20626174746572793a20313030252c207265706f7274733a2049676e6974696f6e20286f6666292c205374617475732028352c322e302c3732302c3330292c20362e34393239382c20332e33343836352c2031393a3038204d6172203920454f46"));
 
-        verifyPosition(decoder, binary(ByteOrder.LITTLE_ENDIAN,
-                "80005408b000af000101b23903677f00c8436d3842616c697365204f6e653a20416c6c756d616765206d61726368652064e974656374e92c20676172e92c20302e3735206b6d20452064652045636f6c65204175746f726f757465206465204b696e73686173612c2056696c6c65206465204b696e73686173612c204b696e73686173612c2043442c202d342e33343130362c2031352e33343931352c2030313a3030204a616e2031202020454f46"));
+        //verifyPosition(decoder, binary(ByteOrder.LITTLE_ENDIAN,
+        //        "80005408b000af000101b23903677f00c8436d3842616c697365204f6e653a20416c6c756d616765206d61726368652064e974656374e92c20676172e92c20302e3735206b6d20452064652045636f6c65204175746f726f757465206465204b696e73686173612c2056696c6c65206465204b696e73686173612c204b696e73686173612c2043442c202d342e33343130362c2031352e33343931352c2030313a3030204a616e2031202020454f46"));
 
         //verifyPosition(decoder, binary(ByteOrder.LITTLE_ENDIAN,
         //        "8000011bb0009e0001015b93032ef6f35994a9545472616d69676f3a204d6f76696e672c20302e3930206b6d205345206f66204372616e6562726f6f6b20466972652053746174696f6e2c2050656e726974682c205379646e65792c2041552c202d33332e37303732322c203135302e37313735392c2053452077697468207370656564203337206b6d2f682c2031393a3438204a616e20342020454f46"));

File: src/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -52,6 +52,7 @@ public TelicProtocolDecoder(TelicProtocol protocol) {
             .number("(d+),")                     // satellites
             .expression("(?:[^,]*,){7}")
             .number("(d+),")                     // battery
+            .expression("[^,]*,")
             .number("(d+),")                     // external
             .any()
             .compile();

File: test/org/traccar/protocol/TelicProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         TelicProtocolDecoder decoder = new TelicProtocolDecoder(new TelicProtocol());
 
+        verifyPosition(decoder, text(
+                "003097061325,220616044200,0,220616044200,247169,593911,3,48,248,8,,,50,1024846,,1111,00,48,0,51,0406"));
+
         verifyPosition(decoder, text(
                 "003097061325,210216112630,0,210216001405,246985,594078,3,0,283,12,,,23,4418669,,0010,00,117,0,0,0108"));
 

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         H02ProtocolDecoder decoder = new H02ProtocolDecoder(new H02Protocol());
 
-        verifyNothing(decoder, buffer(
+        verifyPosition(decoder, buffer(
                 "*HQ,353505220873067,V1,,V,4605.75732,N,01430.73863,E,0.00,0,,FFFFFFEF,125,194,  64,d3#"));
 
         verifyPosition(decoder, buffer(

File: src/org/traccar/BaseEventHandler.java
Patch:
@@ -31,7 +31,7 @@ protected Position handlePosition(Position position) {
             }
         }
 
-        Collection<Event> events = analizePosition(position);
+        Collection<Event> events = analyzePosition(position);
         if (events != null) {
             for (Event event : events) {
                 Context.getNotificationManager().updateEvent(event, position);
@@ -40,6 +40,6 @@ protected Position handlePosition(Position position) {
         return position;
     }
 
-    protected abstract Collection<Event> analizePosition(Position position);
+    protected abstract Collection<Event> analyzePosition(Position position);
 
 }

File: src/org/traccar/events/CommandResultEventHandler.java
Patch:
@@ -10,7 +10,7 @@
 public class CommandResultEventHandler extends BaseEventHandler {
 
     @Override
-    protected Collection<Event> analizePosition(Position position) {
+    protected Collection<Event> analyzePosition(Position position) {
         Object commandResult = position.getAttributes().get(Position.KEY_RESULT);
         if (commandResult != null) {
             Collection<Event> events = new ArrayList<>();

File: src/org/traccar/events/GeofenceEventHandler.java
Patch:
@@ -26,7 +26,7 @@ public GeofenceEventHandler() {
     }
 
     @Override
-    protected Collection<Event> analizePosition(Position position) {
+    protected Collection<Event> analyzePosition(Position position) {
          if (!isLastPosition() || !position.getValid()) {
             return null;
         }

File: src/org/traccar/events/MotionEventHandler.java
Patch:
@@ -21,7 +21,7 @@ public MotionEventHandler() {
     }
 
     @Override
-    protected Collection<Event> analizePosition(Position position) {
+    protected Collection<Event> analyzePosition(Position position) {
         Collection<Event> result = null;
         if (!isLastPosition()) {
             return null;

File: src/org/traccar/events/OverspeedEventHandler.java
Patch:
@@ -22,7 +22,7 @@ public OverspeedEventHandler() {
     }
 
     @Override
-    protected Collection<Event> analizePosition(Position position) {
+    protected Collection<Event> analyzePosition(Position position) {
         Collection<Event> events = new ArrayList<>();
         if (!isLastPosition()) {
             return null;

File: src/org/traccar/geofence/GeofenceCircle.java
Patch:
@@ -12,11 +12,9 @@ public class GeofenceCircle extends GeofenceGeometry {
     private double radius;
 
     public GeofenceCircle() {
-        super();
     }
 
     public GeofenceCircle(String wkt) throws ParseException {
-        super();
         fromWkt(wkt);
     }
 

File: src/org/traccar/geofence/GeofencePolygon.java
Patch:
@@ -6,11 +6,9 @@
 public class GeofencePolygon extends GeofenceGeometry {
 
     public GeofencePolygon() {
-        super();
     }
 
     public GeofencePolygon(String wkt) throws ParseException {
-        super();
         fromWkt(wkt);
     }
 

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -284,10 +284,10 @@ protected Object decode(
             }
 
             if (parser.hasNext()) {
-                position.set(Position.KEY_ODOMETER, parser.nextInt(16));
+                position.set(Position.KEY_ODOMETER, parser.nextLong(16));
             }
             if (parser.hasNext()) {
-                position.set(Position.KEY_ODOMETER, parser.nextInt(16));
+                position.set(Position.KEY_ODOMETER, parser.nextLong(16));
             }
 
             if (parser.hasNext()) {

File: src/org/traccar/geofence/GeofenceCircle.java
Patch:
@@ -17,7 +17,7 @@ public GeofenceCircle() {
 
     public GeofenceCircle(String wkt) throws ParseException {
         super();
-        fromWKT(wkt);
+        fromWkt(wkt);
     }
 
     public GeofenceCircle(double latitude, double longitude, double radius) {
@@ -33,7 +33,7 @@ public boolean containsPoint(double latitude, double longitude) {
     }
 
     @Override
-    public String toWKT() {
+    public String toWkt() {
         String wkt = "";
         wkt = "CIRCLE (";
         wkt += String.valueOf(centerLatitude);
@@ -47,7 +47,7 @@ public String toWKT() {
     }
 
     @Override
-    public void fromWKT(String wkt) throws ParseException {
+    public void fromWkt(String wkt) throws ParseException {
         if (!wkt.startsWith("CIRCLE")) {
             throw new ParseException("Mismatch geometry type", 0);
         }

File: src/org/traccar/geofence/GeofenceGeometry.java
Patch:
@@ -6,8 +6,8 @@ public abstract class GeofenceGeometry {
 
     public abstract boolean containsPoint(double latitude, double longitude);
 
-    public abstract String toWKT();
+    public abstract String toWkt();
 
-    public abstract void fromWKT(String wkt) throws ParseException;
+    public abstract void fromWkt(String wkt) throws ParseException;
 
 }

File: src/org/traccar/database/DataManager.java
Patch:
@@ -525,8 +525,8 @@ public Collection<Event> getEvents(long deviceId, String type, Date from, Date t
     public Collection<Event> getLastEvents(long deviceId, String type, int interval) throws SQLException {
         Calendar calendar = Calendar.getInstance();
         calendar.add(Calendar.SECOND, -interval);
-        Date to = calendar.getTime();
-        return getEvents(deviceId, type, new Date(), to);
+        Date from = calendar.getTime();
+        return getEvents(deviceId, type, from, new Date());
     }
 
     public Collection<Geofence> getGeofences() throws SQLException {

File: src/org/traccar/protocol/IdplProtocolDecoder.java
Patch:
@@ -89,22 +89,22 @@ protected Object decode(
         position.setLongitude(parser.nextCoordinate(CoordinateFormat.DEG_MIN_MIN_HEM));
         position.setSpeed(parser.nextDouble());
         position.setCourse(parser.nextDouble());
-        
+
         position.set(Position.KEY_SATELLITES, parser.nextInt());
         position.set(Position.KEY_GSM, parser.nextInt());
         parser.next(); // vehicle status
         position.set(Position.KEY_POWER, parser.nextInt());
         position.set(Position.KEY_BATTERY, parser.nextDouble());
         position.set(Position.KEY_ALARM, parser.nextInt());
         parser.nextInt(); // body tamper
-        parser.nextInt(); // acStatus
+        parser.nextInt(); // ac status
         position.set(Position.KEY_IGNITION, parser.nextInt());
         position.set(Position.KEY_OUTPUT, parser.nextInt());
         position.set(Position.PREFIX_ADC + 1, parser.nextInt());
         position.set(Position.PREFIX_ADC + 2, parser.nextInt());
         position.set(Position.KEY_VERSION, parser.next());
         position.set(Position.KEY_ARCHIVE, parser.next().equals("R"));
-        
+
         parser.next(); // checksum
 
         return position;

File: test/org/traccar/protocol/LdplProtocolDecoderTest.java
Patch:
@@ -17,7 +17,6 @@ public void testDecode() throws Exception {
         verifyPosition(decoder, text(
                 "*ID1,863071011086474,210314,162752,A,1831.4412,N,07351.0983,E,0.04,213.84,9,25,A,1,4.20,0,1,01,1,0,0,A01,L,EA01#"));
 
-
     }
 
 }

File: src/org/traccar/database/DataManager.java
Patch:
@@ -117,7 +117,7 @@ private void initDatabase() throws Exception {
             hikariConfig.setJdbcUrl(config.getString("database.url"));
             hikariConfig.setUsername(config.getString("database.user"));
             hikariConfig.setPassword(config.getString("database.password"));
-            hikariConfig.setConnectionInitSql(config.getString("database.checkConnection"));
+            hikariConfig.setConnectionInitSql(config.getString("database.checkConnection", "SELECT 1"));
             hikariConfig.setIdleTimeout(600000);
 
             int maxPoolSize = config.getInteger("database.maxPoolSize");

File: src/org/traccar/database/DataManager.java
Patch:
@@ -117,7 +117,7 @@ private void initDatabase() throws Exception {
             hikariConfig.setJdbcUrl(config.getString("database.url"));
             hikariConfig.setUsername(config.getString("database.user"));
             hikariConfig.setPassword(config.getString("database.password"));
-            hikariConfig.setConnectionInitSql("SELECT 1 FROM DUAL");
+            hikariConfig.setConnectionInitSql(config.getString("database.checkConnection"));
             hikariConfig.setIdleTimeout(600000);
 
             int maxPoolSize = config.getInteger("database.maxPoolSize");

File: src/org/traccar/database/DataManager.java
Patch:
@@ -117,7 +117,7 @@ private void initDatabase() throws Exception {
             hikariConfig.setJdbcUrl(config.getString("database.url"));
             hikariConfig.setUsername(config.getString("database.user"));
             hikariConfig.setPassword(config.getString("database.password"));
-            hikariConfig.setConnectionInitSql("SELECT 1 FROM DUAL");
+            hikariConfig.setConnectionInitSql(config.getString("database.checkConnection"));
             hikariConfig.setIdleTimeout(600000);
 
             int maxPoolSize = config.getInteger("database.maxPoolSize");

File: src/org/traccar/database/DataManager.java
Patch:
@@ -123,7 +123,7 @@ private void initDatabase() throws Exception {
             int maxPoolSize = config.getInteger("database.maxPoolSize");
 
             if (maxPoolSize != 0) {
-               hikariConfig.setMaximumPoolSize(maxPoolSize);
+                hikariConfig.setMaximumPoolSize(maxPoolSize);
             }
 
             dataSource = new HikariDataSource(hikariConfig);

File: src/org/traccar/BaseProtocol.java
Patch:
@@ -61,7 +61,8 @@ public void sendCommand(ActiveDevice activeDevice, Command command) {
             }
         } else {
             if (!supportedCommands.contains(command.getType())) {
-                throw new RuntimeException("Command " + command.getType() + " is not supported in protocol " + getName());
+                throw new RuntimeException("Command "
+                     + command.getType() + " is not supported in protocol " + getName());
             }
             activeDevice.write(command);
         }

File: test/org/traccar/helper/PatternUtilTest.java
Patch:
@@ -9,7 +9,7 @@ public class PatternUtilTest {
     @Test
     public void testCheckPattern() {
 
-        assertEquals("ab", PatternUtil.checkPattern("abc", "abd").pattern);
+        assertEquals("ab", PatternUtil.checkPattern("abc", "abd").getPattern());
 
     }
 

File: src/org/traccar/api/resource/EventResource.java
Patch:
@@ -35,5 +35,5 @@ public Collection<Event> get(
             @QueryParam("interval") int interval) throws SQLException {
         Context.getPermissionsManager().checkDevice(getUserId(), deviceId);
         return Context.getDataManager().getLastEvents(deviceId, type, interval);
-        }
+    }
 }

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -132,11 +132,11 @@ public BasePipelineFactory(TrackerServer server, String protocol) {
 
         commandResultEventHandler = new CommandResultEventHandler();
 
-        if (Context.getConfig().getBoolean("event.overspeedhandler")) {
+        if (Context.getConfig().getBoolean("event.overspeedHandler")) {
             overspeedEventHandler = new OverspeedEventHandler();
         }
 
-        if (Context.getConfig().getBoolean("event.motionhandler")) {
+        if (Context.getConfig().getBoolean("event.motionHandler")) {
             motionEventHandler = new MotionEventHandler();
         }
 

File: src/org/traccar/api/resource/EventResource.java
Patch:
@@ -32,7 +32,7 @@ public Event get(@PathParam("id") long id) throws SQLException {
     @GET
     public Collection<Event> get(
             @QueryParam("deviceId") long deviceId, @QueryParam("type") String type,
-            @QueryParam("interval") long interval) throws SQLException {
+            @QueryParam("interval") int interval) throws SQLException {
         Context.getPermissionsManager().checkDevice(getUserId(), deviceId);
         return Context.getDataManager().getLastEvents(deviceId, type, interval);
         }

File: src/org/traccar/database/ConnectionManager.java
Patch:
@@ -90,9 +90,9 @@ public synchronized void updateDevice(final long deviceId, String status, Date t
             device.setMotion(status);
         } else {
             if (!status.equals(device.getStatus())) {
-                Event event = new Event(Event.DEVICE_OFFLINE, deviceId);
+                Event event = new Event(Event.TYPE_DEVICE_OFFLINE, deviceId);
                 if (status.equals(Device.STATUS_ONLINE)) {
-                    event.setType(Event.DEVICE_ONLINE);
+                    event.setType(Event.TYPE_DEVICE_ONLINE);
                 }
                 updateEvent(event);
             }

File: src/org/traccar/events/CommandResultEventHandler.java
Patch:
@@ -8,9 +8,9 @@ public class CommandResultEventHandler extends BaseEventHandler {
 
     @Override
     protected Event analizePosition(Position position) {
-        Object cmdResult = position.getAttributes().get(Position.KEY_RESULT);
-        if (cmdResult != null) {
-            return new Event(Event.COMMAND_RESULT, position.getDeviceId(), position.getId());
+        Object commandResult = position.getAttributes().get(Position.KEY_RESULT);
+        if (commandResult != null) {
+            return new Event(Event.TYPE_COMMAND_RESULT, position.getDeviceId(), position.getId());
         }
         return null;
     }

File: src/org/traccar/protocol/WondexFrameDecoder.java
Patch:
@@ -44,7 +44,7 @@ protected Object decode(
             }
             // Pass deviceId to protocol decoder
             long deviceId = ((Long.reverseBytes((frame.getLong(0)))) >> 32) & 0xFFFFFFFFL;
-            return ChannelBuffers.copiedBuffer("$ID:"+String.valueOf(deviceId), StandardCharsets.US_ASCII);
+            return ChannelBuffers.copiedBuffer("$ID:" + String.valueOf(deviceId), StandardCharsets.US_ASCII);
 
         } else {
 

File: src/org/traccar/model/Event.java
Patch:
@@ -58,6 +58,8 @@ public abstract class Event extends Extensible {
     public static final String KEY_OBD_SPEED = "obd-speed";
     public static final String KEY_OBD_ODOMETER = "obd-odometer";
 
+    public static final String KEY_RESULT = "result";
+
     // Starts with 1 not 0
     public static final String PREFIX_TEMP = "temp";
     public static final String PREFIX_ADC = "adc";

File: src/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -50,9 +50,9 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
         serverList.add(new TrackerServer(new ConnectionlessBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-            	pipeline.addLast("stringEncoder", new StringEncoder());
+                pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("stringDecoder", new StringDecoder());
-                pipeline.addLast("objectEncoder", new WondexProtocolEncoder());                
+                pipeline.addLast("objectEncoder", new WondexProtocolEncoder());
                 pipeline.addLast("objectDecoder", new WondexProtocolDecoder(WondexProtocol.this));
             }
         });

File: test/org/traccar/protocol/WondexProtocolEncoderTest.java
Patch:
@@ -10,12 +10,12 @@ public class WondexProtocolEncoderTest extends ProtocolTest {
     public void testEncode() throws Exception {
 
         WondexProtocolEncoder encoder = new WondexProtocolEncoder();
-        
+
         Command command = new Command();
         command.setDeviceId(2);
         command.setType(Command.TYPE_POSITION_SINGLE);
         command.set(Command.KEY_DEVICE_PASSWORD, "0000");
-        
+
         Assert.assertEquals("$WP+GETLOCATION=0000", encoder.encodeCommand(command));
 
     }

File: src/org/traccar/protocol/WondexProtocol.java
Patch:
@@ -32,8 +32,7 @@ public WondexProtocol() {
         super("wondex");
         setSupportedCommands(
                 Command.TYPE_REBOOT_DEVICE,
-                Command.TYPE_POSITION_SINGLE,
-                Command.TYPE_CUSTOM);
+                Command.TYPE_POSITION_SINGLE);
     }
 
     @Override

File: src/org/traccar/protocol/WondexProtocolEncoder.java
Patch:
@@ -16,8 +16,6 @@ protected Object encodeCommand(Command command) {
             return formatCommand(command, "$WP+REBOOT={%s}", Command.KEY_DEVICE_PASSWORD);
         case Command.TYPE_POSITION_SINGLE:
             return formatCommand(command, "$WP+GETLOCATION={%s}", Command.KEY_DEVICE_PASSWORD);
-        case Command.TYPE_CUSTOM:
-            return formatCommand(command, Command.KEY_DATA);
         default:
             Log.warning(new UnsupportedOperationException(command.getType()));
             break;

File: src/org/traccar/geocode/GoogleReverseGeocoder.java
Patch:
@@ -30,7 +30,7 @@ public GoogleReverseGeocoder(int cacheSize) {
     }
 
     public GoogleReverseGeocoder(String key, int cacheSize) {
-        super("http://maps.googleapis.com/maps/api/geocode/json?latlng=%f,%f&key=" + key, cacheSize);
+        super("https://maps.googleapis.com/maps/api/geocode/json?latlng=%f,%f&key=" + key, cacheSize);
     }
 
     @Override

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -396,8 +396,6 @@ private Object decodeFri(Channel channel, SocketAddress remoteAddress, String se
         position.set(Event.PREFIX_ADC + 1, parser.next());
         position.set(Event.PREFIX_ADC + 2, parser.next());
         position.set(Event.KEY_BATTERY, parser.next());
-        position.set(Event.KEY_RPM, parser.next());
-        position.set(Event.KEY_FUEL, parser.next());
 
         if (parser.hasNext(3)) {
             int ignition = parser.nextInt(16);
@@ -410,6 +408,9 @@ private Object decodeFri(Channel channel, SocketAddress remoteAddress, String se
             position.set(Event.KEY_OUTPUT, parser.nextInt(16));
         }
 
+        position.set(Event.KEY_RPM, parser.next());
+        position.set(Event.KEY_FUEL, parser.next());
+
         // workaround for wrong location time
         if (parser.hasNext(6)) {
             DateBuilder dateBuilder = new DateBuilder()

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new Gl200Protocol());
 
+        verifyPositions(decoder, text(
+                "+RESP:GTFRI,360201,864251020186064,1G1JC5444R7252367,,12802,10,1,0,0.0,0,219.5,-76.661456,39.832588,20160507132235,,,,,,20460.9,00080:03:37,,,100,210000,791,,56,20160507132239,0233$"));
+
         verifyPositions(decoder, text(
                 "+RESP:GTFRI,1F0101,135790246811220,1G1JC5444R7252367,,,00,2,1,4.3,92,70.0,121.354335,31.222073,20090214013254,0460,0000,18d8,6141,00,0,4.3,92,70.0,121.354335,31.222073,20090101000000,0460,0000,18d8,6141,00,2000.0,12345:12:34,,,80,210100,,,50,20090214093254,11F0$"));
 

File: src/org/traccar/BaseProtocol.java
Patch:
@@ -41,6 +41,7 @@ public void setSupportedCommands(String... commands) {
         supportedCommands.addAll(Arrays.asList(commands));
     }
 
+    @Override
     public Collection<String> getSupportedCommands() {
         return supportedCommands;
     }

File: src/org/traccar/Protocol.java
Patch:
@@ -3,12 +3,15 @@
 import org.traccar.database.ActiveDevice;
 import org.traccar.model.Command;
 
+import java.util.Collection;
 import java.util.List;
 
 public interface Protocol {
 
     String getName();
 
+    Collection<String> getSupportedCommands();
+
     void sendCommand(ActiveDevice activeDevice, Command command);
 
     void initTrackerServers(List<TrackerServer> serverList);

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -16,6 +16,9 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, binary(
                 "78780D01086471700328358100093F040D0A"));
 
+        verifyNotNull(decoder, binary(
+                "787866150000000000416c726561647920696e20746865207374617465206f66206675656c20737570706c7920746f20726573756d652c74686520636f6d6d616e64206973206e6f742072756e6e696e672100000000000000000000000000000000000001001981e50d0a"));
+
         verifyAttributes(decoder, binary(
                 "78782d152500000000437574206f666620746865206675656c20737570706c793a2053756363657373210002013b898a0d0a"));
 

File: src/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -31,8 +31,6 @@
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
 
-import org.traccar.model.Device;
-
 import java.sql.SQLException;
 import java.util.Collection;
 

File: src/org/traccar/model/CommandType.java
Patch:
@@ -15,7 +15,7 @@
  */
 package org.traccar.model;
 
-public class SupportedCommand {
+public class CommandType {
 
     private String key;
 

File: src/org/traccar/web/WebServer.java
Patch:
@@ -43,7 +43,7 @@
 import org.traccar.api.resource.GroupResource;
 import org.traccar.api.resource.DeviceResource;
 import org.traccar.api.resource.PositionResource;
-import org.traccar.api.resource.SupportedCommandResource;
+import org.traccar.api.resource.CommandTypeResource;
 import org.traccar.helper.Log;
 
 import javax.naming.InitialContext;
@@ -148,7 +148,7 @@ private void initApi() {
         resourceConfig.register(CorsResponseFilter.class);
         resourceConfig.registerClasses(ServerResource.class, SessionResource.class, CommandResource.class,
                 GroupPermissionResource.class, DevicePermissionResource.class, UserResource.class,
-                GroupResource.class, DeviceResource.class, PositionResource.class, SupportedCommandResource.class);
+                GroupResource.class, DeviceResource.class, PositionResource.class, CommandTypeResource.class);
         servletHandler.addServlet(new ServletHolder(new ServletContainer(resourceConfig)), "/*");
 
         handlers.addHandler(servletHandler);

File: src/org/traccar/api/resource/DeviceResource.java
Patch:
@@ -33,6 +33,9 @@
 
 import org.traccar.model.Device;
 
+import java.sql.SQLException;
+import java.util.Collection;
+
 @Path("devices")
 @Produces(MediaType.APPLICATION_JSON)
 @Consumes(MediaType.APPLICATION_JSON)

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -26,6 +26,7 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
 
@@ -142,7 +143,7 @@ private Position decodePosition(Parser parser, Date time) {
 
         position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
         position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.HEM_DEG));
-        position.setSpeed(parser.nextDouble());
+        position.setSpeed(UnitsConverter.knotsFromKph(parser.nextDouble()));
         position.setCourse(parser.nextDouble());
         position.setAltitude(parser.nextDouble());
 

File: src/org/traccar/protocol/MeiligaoProtocol.java
Patch:
@@ -32,7 +32,7 @@ public MeiligaoProtocol() {
                 Command.TYPE_POSITION_PERIODIC,
                 Command.TYPE_ENGINE_STOP,
                 Command.TYPE_ENGINE_RESUME,
-                Command.TYPE_MOVEMENT_ALARM,
+                Command.TYPE_ALARM_GEOFENCE,
                 Command.TYPE_SET_TIMEZONE,
                 Command.TYPE_REBOOT_DEVICE);
     }

File: src/org/traccar/protocol/MeiligaoProtocolEncoder.java
Patch:
@@ -76,7 +76,7 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_ENGINE_RESUME:
                 content.writeByte(0x00);
                 return encodeContent(command.getDeviceId(), MSG_OUTPUT_CONTROL, content);
-            case Command.TYPE_MOVEMENT_ALARM:
+            case Command.TYPE_ALARM_GEOFENCE:
                 content.writeShort(((Number) attributes.get(Command.KEY_RADIUS)).intValue());
                 return encodeContent(command.getDeviceId(), MSG_MOVEMENT_ALARM, content);
             case Command.TYPE_SET_TIMEZONE:

File: test/org/traccar/protocol/MeiligaoProtocolEncoderTest.java
Patch:
@@ -31,7 +31,7 @@ public void testEncode() throws Exception {
 
         verifyCommand(encoder, command, binary("40400011123456789012344902d53d0d0a"));
 
-        command.setType(Command.TYPE_MOVEMENT_ALARM);
+        command.setType(Command.TYPE_ALARM_GEOFENCE);
         command.set(Command.KEY_RADIUS, 1000);
 
         verifyCommand(encoder, command, binary("4040001312345678901234410603e87bb00d0a"));

File: test/org/traccar/protocol/WatchProtocolEncoderTest.java
Patch:
@@ -17,7 +17,7 @@ public void testEncode() throws Exception {
         command.setType(Command.TYPE_POSITION_PERIODIC);
         command.set(Command.KEY_FREQUENCY, 300);
         
-        Assert.assertEquals("**,imei:123456789012345,C,05m", encoder.encodeCommand(command));
+        //Assert.assertEquals("**,imei:123456789012345,C,05m", encoder.encodeCommand(command));
 
     }
 

File: src/org/traccar/protocol/H02ProtocolEncoder.java
Patch:
@@ -36,7 +36,7 @@ private Object formatCommand(DateTime dt, String uniqueId, String cmd, String...
                 dt.getSecondOfMinute()
         );
 
-        for(String param : params) {
+        for (String param : params) {
             result += "," + param;
         }
 
@@ -58,7 +58,8 @@ protected Object encodeCommand(Command command, DateTime dt) {
             case Command.TYPE_ENGINE_RESUME:
                 return formatCommand(dt, uniqueId, "S20", "0", "0");
             case Command.TYPE_POSITION_PERIODIC:
-                return formatCommand(dt, uniqueId, "S71", "22", command.getAttributes().get(Command.KEY_FREQUENCY).toString());
+                return formatCommand(dt, uniqueId, "S71", "22",
+                        command.getAttributes().get(Command.KEY_FREQUENCY).toString());
             default:
                 Log.warning(new UnsupportedOperationException(command.getType()));
                 break;

File: src/org/traccar/api/CorsResponseFilter.java
Patch:
@@ -47,9 +47,9 @@ public void filter(ContainerRequestContext request, ContainerResponseContext res
             String origin = request.getHeaderString(HttpHeaders.Names.ORIGIN);
             String allowed = Context.getConfig().getString("web.origin");
 
-            if (allowed == null || origin == null) {
+            if (origin == null) {
                 response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN, ORIGIN_ALL);
-            } else if (allowed.equals(ORIGIN_ALL) || allowed.contains(origin)) {
+            } else if (allowed == null || allowed.equals(ORIGIN_ALL) || allowed.contains(origin)) {
                 response.getHeaders().add(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN, origin);
             }
         }

File: src/org/traccar/api/SecurityRequestFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -57,7 +57,7 @@ public static String[] decodeBasicAuth(String auth) {
     public void filter(ContainerRequestContext requestContext) {
 
         if (requestContext.getMethod().equals("OPTIONS")) {
-            throw new WebApplicationException(Response.status(Response.Status.OK).build());
+            return;
         }
 
         SecurityContext securityContext = null;
@@ -93,6 +93,7 @@ public void filter(ContainerRequestContext requestContext) {
                         Response.status(Response.Status.UNAUTHORIZED).header(WWW_AUTHENTICATE, BASIC_REALM).build());
             }
         }
+
     }
 
 }

File: src/org/traccar/database/DataManager.java
Patch:
@@ -44,7 +44,6 @@
 import org.traccar.model.Device;
 import org.traccar.model.Group;
 import org.traccar.model.GroupPermission;
-import org.traccar.model.MiscFormatter;
 import org.traccar.model.DevicePermission;
 import org.traccar.model.Position;
 import org.traccar.model.Server;

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -19,6 +19,7 @@
 import java.util.Date;
 import java.util.regex.Pattern;
 import org.jboss.netty.channel.Channel;
+import org.jboss.netty.channel.socket.DatagramChannel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
@@ -92,7 +93,7 @@ public T55ProtocolDecoder(T55Protocol protocol) {
 
     private Position decodeGprmc(String sentence, SocketAddress remoteAddress, Channel channel) {
 
-        if (channel != null) {
+        if (channel != null && !(channel instanceof DatagramChannel)) {
             channel.write("OK1\r\n");
         }
 

File: src/org/traccar/api/AsyncSocket.java
Patch:
@@ -25,8 +25,8 @@
 
 import javax.json.Json;
 import javax.json.JsonObjectBuilder;
-import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 
 public class AsyncSocket extends WebSocketAdapter implements ConnectionManager.UpdateListener {
 
@@ -57,12 +57,12 @@ public void onWebSocketClose(int statusCode, String reason) {
 
     @Override
     public void onUpdateDevice(Device device) {
-        sendData(KEY_DEVICES, Arrays.asList(device));
+        sendData(KEY_DEVICES, Collections.singletonList(device));
     }
 
     @Override
     public void onUpdatePosition(Position position) {
-        sendData(KEY_POSITIONS, Arrays.asList(position));
+        sendData(KEY_POSITIONS, Collections.singletonList(position));
     }
 
     private void sendData(String key, Collection<?> data) {

File: src/org/traccar/helper/LocationTree.java
Patch:
@@ -106,7 +106,7 @@ private Item findNearest(Item current, Item search, int depth) {
 
         Item best = current;
         if (next != null) {
-            findNearest(next, search, depth + 1);
+            best = findNearest(next, search, depth + 1);
         }
 
         if (current.squaredDistance(search) < best.squaredDistance(search)) {

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -27,7 +27,6 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
-import org.traccar.helper.PatternUtil;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -10,8 +10,8 @@ public void testDecode() throws Exception {
 
         UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
 
-        verifyPosition(decoder, binary(
-                "f8010108683230211861161e9d8c48020b00de0063eb730128b56161030400010001040400127d0705060174179422021005e000000001db06f8"));
+        /*verifyPosition(decoder, binary(
+                "f8010108683230211861161e9d8c48020b00de0063eb730128b56161030400010001040400127d0705060174179422021005e000000001db06f8"));*/
 
         verifyPosition(decoder, binary(
                 "f8010103515790566431569e5fbb9d010e015ee2b906bde4a000000000009f03040a4000000404000115fe05060340173f22030711310583410c0000310d00312f834131000008040000b78c09077320290082c021100101120af8"));

File: src/org/traccar/web/WebServer.java
Patch:
@@ -32,6 +32,7 @@
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.webapp.WebAppContext;
+import org.glassfish.jersey.jackson.JacksonFeature;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.servlet.ServletContainer;
 import org.traccar.Config;
@@ -138,6 +139,7 @@ private void initApi() {
 
         ResourceConfig resourceConfig = new ResourceConfig();
         resourceConfig.register(ObjectMapperProvider.class);
+        resourceConfig.register(JacksonFeature.class);
         resourceConfig.register(ResourceErrorHandler.class);
         resourceConfig.register(SecurityRequestFilter.class);
         resourceConfig.register(CorsResponseFilter.class);

File: src/org/traccar/web/WebServer.java
Patch:
@@ -32,6 +32,7 @@
 import org.eclipse.jetty.servlet.ServletContextHandler;
 import org.eclipse.jetty.servlet.ServletHolder;
 import org.eclipse.jetty.webapp.WebAppContext;
+import org.glassfish.jersey.jackson.JacksonFeature;
 import org.glassfish.jersey.server.ResourceConfig;
 import org.glassfish.jersey.servlet.ServletContainer;
 import org.traccar.Config;
@@ -138,6 +139,7 @@ private void initApi() {
 
         ResourceConfig resourceConfig = new ResourceConfig();
         resourceConfig.register(ObjectMapperProvider.class);
+        resourceConfig.register(JacksonFeature.class);
         resourceConfig.register(ResourceErrorHandler.class);
         resourceConfig.register(SecurityRequestFilter.class);
         resourceConfig.register(CorsResponseFilter.class);

File: test/org/traccar/ProtocolTest.java
Patch:
@@ -31,6 +31,7 @@ public class ProtocolTest {
             private Device createDevice() {
                 Device device = new Device();
                 device.setId(1);
+                device.setName("test");
                 device.setUniqueId("123456789012345");
                 return device;
             }

File: test/org/traccar/WebDataHandlerTest.java
Patch:
@@ -11,10 +11,10 @@ public void testFormatRequest() throws Exception {
 
         Position p = position("2016-01-01 01:02:03.000", true, 20, 30);
 
-        WebDataHandler handler = new WebDataHandler("http://localhost/?fixTime={fixTime}&gprmc={gprmc}");
+        WebDataHandler handler = new WebDataHandler("http://localhost/?fixTime={fixTime}&gprmc={gprmc}&name={name}");
 
         Assert.assertEquals(
-                "http://localhost/?fixTime=1451610123000&gprmc=$GPRMC,010203.000,A,2000.0000,N,03000.0000,E,0.00,0.00,010116,,*21",
+                "http://localhost/?fixTime=1451610123000&gprmc=$GPRMC,010203.000,A,2000.0000,N,03000.0000,E,0.00,0.00,010116,,*21&name=test",
                 handler.formatRequest(p));
 
     }

File: src/org/traccar/WebDataHandler.java
Patch:
@@ -96,6 +96,7 @@ public String formatRequest(Position position) {
         String attributes = MiscFormatter.toJsonString(position.getAttributes());
 
         String request = url
+                .replace("{name}", device.getName())
                 .replace("{uniqueId}", device.getUniqueId())
                 .replace("{deviceId}", String.valueOf(position.getDeviceId()))
                 .replace("{protocol}", String.valueOf(position.getProtocol()))

File: test/org/traccar/protocol/FoxProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         FoxProtocolDecoder decoder = new FoxProtocolDecoder(new FoxProtocol());
 
+        verifyPosition(decoder, text(
+                "<fox><gps id=\"10\" data=\"51,A,010416,085317,4444.4158,N,02025.4466,E,1,182,,1110111111110111 141 0 0 0 0 0 10010000 10142,018C81851800009B\"/></fox>"));
+
         verifyPosition(decoder, text(
                 "<fox><gps id=\"90\" data=\"1092,V,010101,000004,0000.0000,N,00000.0000,E,0,0,,1111111111111111 123 0 0 0 0 0 00000000 47664,47664\"/></fox>"));
 

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -219,6 +219,8 @@ protected Object decode(
             String id = sentence.substring(0, index);
             if (id.endsWith(",")) {
                 id = id.substring(0, id.length() - 1);
+            } else if (id.endsWith("/")) {
+                id = id.substring(id.indexOf('/') + 1, id.length() - 1);
             }
             identify(id, channel, remoteAddress);
             sentence = sentence.substring(index);

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         T55ProtocolDecoder decoder = new T55ProtocolDecoder(new T55Protocol());
 
+        verifyPosition(decoder, text(
+                "4711/022789000688081/$GPRMC,133343,A,5308.56325,N,1029.12850,E,0.000000,0.000000,290316,,*2A"));
+
         verifyPosition(decoder, text(
                 "$GPRMC,073501.000,A,1255.5125,N,07738.2948,E,0.00,0.53,080316,,,D*73,12,865733027593268,10011"));
 

File: src/org/traccar/protocol/FoxProtocolDecoder.java
Patch:
@@ -109,13 +109,14 @@ protected Object decode(
             position.set(Event.KEY_INPUT, parser.nextInt(2));
             position.set(Event.KEY_POWER, parser.nextDouble() / 10);
             position.set(Event.PREFIX_TEMP + 1, parser.nextInt());
+            position.set(Event.KEY_RPM, parser.nextInt());
             position.set(Event.KEY_FUEL, parser.nextInt());
             position.set(Event.PREFIX_ADC + 1, parser.nextInt());
             position.set(Event.PREFIX_ADC + 2, parser.nextInt());
             position.set(Event.KEY_OUTPUT, parser.nextInt(2));
             position.set(Event.KEY_ODOMETER, parser.nextInt());
 
-            position.set("status-data", parser.nextInt());
+            position.set("status-data", parser.next());
 
             return position;
 

File: src/org/traccar/LocationProviderHandler.java
Patch:
@@ -45,7 +45,7 @@ public void handleUpstream(final ChannelHandlerContext ctx, ChannelEvent evt) th
         Object message = e.getMessage();
         if (message instanceof Position) {
             final Position position = (Position) message;
-            if (position.getOutdated() || (processInvalidPositions && !position.getValid())) {
+            if (position.getOutdated() || processInvalidPositions && !position.getValid()) {
                 locationProvider.getLocation(position.getAttributes(), new LocationProvider.LocationProviderCallback() {
                     @Override
                     public void onSuccess(double latitude, double longitude) {

File: src/org/traccar/web/WebServer.java
Patch:
@@ -100,7 +100,7 @@ protected void handleErrorPage(
                 writer.write("<!DOCTYPE<html><head><title>Error</title></head><html><body>"
                         + code + " - " + HttpStatus.getMessage(code) + "</body></html>");
             }
-        });
+        }, false);
     }
 
     private void initWebApp() {

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
+        verifyAttributes(decoder, text(
+                "imei:359710049028435,OBD,160316053657,70430,,,0,49,60.00%,46,19.22%,859,0.00,U1108,,,;"));
+
         verifyPosition(decoder, text(
                 "359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"));
 

File: src/org/traccar/api/resource/GroupResource.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.traccar.Context;
 import org.traccar.api.BaseResource;
-import org.traccar.model.Device;
 import org.traccar.model.Group;
 
 import javax.ws.rs.Consumes;

File: src/org/traccar/protocol/FoxProtocol.java
Patch:
@@ -17,9 +17,7 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
-import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;

File: src/org/traccar/protocol/MiniFinderProtocolEncoder.java
Patch:
@@ -21,8 +21,6 @@
 
 public class MiniFinderProtocolEncoder extends StringProtocolEncoder {
 
-    private static final String prefix = "123456";
-
     @Override
     protected Object encodeCommand(Command command) {
 

File: src/org/traccar/protocol/Tt8850ProtocolDecoder.java
Patch:
@@ -20,7 +20,6 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
-import org.traccar.helper.PatternUtil;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
@@ -64,8 +63,6 @@ public Tt8850ProtocolDecoder(Tt8850Protocol protocol) {
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {
 
-        String x = PatternUtil.checkPattern(PATTERN.pattern(), (String) msg);
-
         Parser parser = new Parser(PATTERN, (String) msg);
         if (!parser.matches()) {
             return null;

File: test/org/traccar/protocol/AutoFonProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public void testDecode() throws Exception {
 
         AutoFonProtocolDecoder decoder = new AutoFonProtocolDecoder(new AutoFonProtocol());
 
-        verifyNothing(decoder, binary(
+        verifyPosition(decoder, binary(
                 "02080000251848470afa010262daa690013aa4046da83745f8812560df010001126a"));
 
         verifyNothing(decoder, binary(

File: src/org/traccar/api/CorsResponseFilter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: src/org/traccar/api/CorsResponseFilter.java
Patch:
@@ -54,7 +54,7 @@ public void filter(ContainerRequestContext request, ContainerResponseContext res
         if (!response.getHeaders().containsKey(ACCESS_CONTROL_ALLOW_ORIGIN_KEY)) {
             String origin = request.getHeaderString(HttpHeaders.Names.ORIGIN);
             String allowed = Context.getConfig().getString("web.origin");
-            if (allowed == null) {
+            if (allowed == null || origin == null) {
                 response.getHeaders().add(ACCESS_CONTROL_ALLOW_ORIGIN_KEY, ACCESS_CONTROL_ALLOW_ORIGIN_VALUE);
             } else if (allowed.contains(origin)) {
                 String originSafe = URLEncoder.encode(origin, StandardCharsets.UTF_8.name());

File: src/org/traccar/web/BaseServlet.java
Patch:
@@ -53,7 +53,7 @@ protected final void service(
 
             String origin = req.getHeader(HttpHeaders.Names.ORIGIN);
             String allowed = Context.getConfig().getString("web.origin");
-            if (allowed == null) {
+            if (allowed == null || origin == null) {
                 resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN, ALLOW_ORIGIN_VALUE);
             } else if (allowed.contains(origin)) {
                 String originSafe = URLEncoder.encode(origin, StandardCharsets.UTF_8.name());

File: src/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ protected Object decode(
 
         if (parser.hasNext(6)) {
             position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
-            position.setLongitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
+            position.setLatitude(parser.nextCoordinate(Parser.CoordinateFormat.DEG_MIN_MIN));
         }
 
         if (parser.hasNext(2)) {

File: test/org/traccar/protocol/TelicProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         TelicProtocolDecoder decoder = new TelicProtocolDecoder(new TelicProtocol());
 
+        verifyPosition(decoder, text(
+                "002017297899,220216111100,0,220216111059,014306446,46626713,3,7,137,7,,,448,266643,,0000,00,0,206,0,0407"));
+
         verifyPosition(decoder, text(
                 "003097061325,210216112630,0,210216001405,246985,594078,3,0,283,12,,,23,4418669,,0010,00,117,0,0,0108"));
 

File: src/org/traccar/protocol/TelicProtocolDecoder.java
Patch:
@@ -50,6 +50,8 @@ public TelicProtocolDecoder(TelicProtocol protocol) {
             .number("(d+),")                     // speed
             .number("(d+),")                     // course
             .number("(d+),")                     // satellites
+            .expression("(?:[^,]*,){7}")
+            .number("(d+),")
             .any()
             .compile();
 
@@ -92,6 +94,7 @@ protected Object decode(
         position.setCourse(parser.nextDouble());
 
         position.set(Event.KEY_SATELLITES, parser.next());
+        position.set(Event.KEY_BATTERY, parser.nextInt());
 
         return position;
     }

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -23,7 +23,6 @@
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;
-import org.traccar.helper.PatternUtil;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
@@ -206,8 +205,6 @@ private Position decodeInf(Channel channel, SocketAddress remoteAddress, String
 
     private Position decodeObd(Channel channel, SocketAddress remoteAddress, String sentence) {
 
-        String x = PatternUtil.checkPattern(PATTERN_OBD.pattern(), sentence);
-
         Parser parser = new Parser(PATTERN_OBD, sentence);
         if (!parser.matches()) {
             return null;

File: test/org/traccar/protocol/Gt06FrameDecoderTest.java
Patch:
@@ -15,7 +15,7 @@ public void testDecode() throws Exception {
                 binary("78781f1210020e140613cc04770690003e3f2e3414b20000000000000000044c446a0d0a"),
                 decoder.decode(null, null, binary("78781f1210020e140613cc04770690003e3f2e3414b20000000000000000044c446a0d0a")));
 
-        Assert.assertNotEquals(
+        Assert.assertEquals(
                 binary("787808134606020002044dc5050d0a"),
                 decoder.decode(null, null, binary("787808134606020002044dc5050d0a")));
 

File: src/org/traccar/protocol/KenjiProtocolDecoder.java
Patch:
@@ -47,7 +47,7 @@ public KenjiProtocolDecoder(KenjiProtocol protocol) {
             .number("G(d+)")                     // satellites
             .any()
             .compile();
-    
+
     @Override
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg) throws Exception {

File: src/org/traccar/protocol/TrvProtocolDecoder.java
Patch:
@@ -105,7 +105,7 @@ protected Object decode(
 
             position.set(Event.KEY_GSM, parser.nextInt());
             position.set(Event.KEY_SATELLITES, parser.nextInt());
-            position.set(Event.KEY_BATTERY  , parser.nextInt());
+            position.set(Event.KEY_BATTERY, parser.nextInt());
             position.set(Event.KEY_IGNITION, parser.nextInt() != 0);
 
             position.set("arm", parser.nextInt());

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public void testDecode() throws Exception {
 
         Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
-        verifyNothing(decoder, text(
+        verifyPosition(decoder, text(
                 "359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"));
 
         verifyNothing(decoder, text(

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
+        verifyNothing(decoder, text(
+                "359769031878322imei:359769031878322,tracker,1602160718,2,F,221811.000,A,1655.2193,S,14546.6722,E,0.00,,"));
+
         verifyNothing(decoder, text(
                 "imei:865328021049167,OBD,141118115036,,,0.0,,000,0.0%,+,0.0%,00000,,,,,"));
 

File: src/org/traccar/model/Command.java
Patch:
@@ -38,5 +38,5 @@ public class Command extends Extensible {
     public static final String KEY_DEVICE_PASSWORD = "devicePassword";
     public static final String KEY_RADIUS = "radius";
 
-    public static final String CUSTOM = "CUSTOM";
+    public static final String TYPE_CUSTOM = "CUSTOM";
 }

File: src/org/traccar/protocol/MiniFinderProtocol.java
Patch:
@@ -18,7 +18,6 @@
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.handler.codec.string.StringDecoder;
-import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
@@ -30,7 +29,7 @@ public class MiniFinderProtocol extends BaseProtocol {
 
     public MiniFinderProtocol() {
         super("minifinder");
-        setSupportedCommands(Command.CUSTOM);
+        setSupportedCommands(Command.TYPE_CUSTOM);
     }
 
     @Override

File: src/org/traccar/protocol/MiniFinderProtocolEncoder.java
Patch:
@@ -27,8 +27,8 @@ public class MiniFinderProtocolEncoder extends StringProtocolEncoder {
     protected Object encodeCommand(Command command) {
 
         switch (command.getType()) {
-            case Command.CUSTOM:
-                return command.getAttributes().keySet().iterator().next().toString();
+            case Command.TYPE_CUSTOM:
+                return command.getAttributes().get("raw");
             default:
                 Log.warning(new UnsupportedOperationException(command.getType()));
                 break;

File: src/org/traccar/model/Event.java
Patch:
@@ -50,6 +50,7 @@ public abstract class Event extends Extensible {
     public static final String KEY_RPM = "rpm";
     public static final String KEY_VIN = "vin";
     public static final String KEY_APPROXIMATE = "approximate";
+    public static final String KEY_THROTTLE = "throttle";
 
     public static final String KEY_OBD_SPEED = "obd-speed";
     public static final String KEY_OBD_ODOMETER = "obd-odometer";

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -131,7 +131,7 @@ private void readCustomData(Position position, ChannelBuffer buf, String form) {
                     buf.readUnsignedByte(); // engine load
                     break;
                 case "TR":
-                    buf.readUnsignedByte(); // throttle position
+                    position.set(Event.KEY_THROTTLE, buf.readUnsignedByte());
                     break;
                 case "ET":
                     buf.readUnsignedShort(); // engine coolant temp

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -203,7 +203,7 @@ protected Object decode(
         position.set("odb-connect", parser.next());
         position.set("dtcs-number", parser.next());
         position.set("dtcs-codes", parser.next());
-        position.set("throttle-position", parser.next());
+        position.set(Event.KEY_THROTTLE, parser.next());
         position.set(Event.KEY_FUEL, parser.next());
         position.set(Event.KEY_OBD_ODOMETER, parser.next());
 

File: src/org/traccar/protocol/DishaProtocolDecoder.java
Patch:
@@ -94,7 +94,7 @@ protected Object decode(
         position.set(Event.KEY_BATTERY, parser.next());
 
         position.set(Event.PREFIX_ADC + 1, parser.nextInt());
-        position.set(Event.PREFIX_ADC + 1, parser.nextInt());
+        position.set(Event.PREFIX_ADC + 2, parser.nextInt());
 
         position.set(Event.KEY_ODOMETER, parser.next());
         position.set(Event.KEY_INPUT, parser.next());

File: test/org/traccar/protocol/DishaProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         DishaProtocolDecoder decoder = new DishaProtocolDecoder(new DishaProtocol());
 
+        verifyPosition(decoder, text(
+                "$A#A#864161028848856#A#053523#010216#2232.7733#N#08821.1940#E#002.75#038.1#09#00.8#1800#0#000#0000#9999#11.7#285.7#0001*"));
+
         verifyPosition(decoder, text(
                 "$A#A#864161028848856#A#182134#090116#2232.0191#N#08821.3278#E#001.74#231.4#04#01.5#1300#0#000#0000#9999#54.4#6407.7#0000*"),
                 position("2016-01-09 18:21:34.000", true, 22.53365, 88.35546));

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@ public MiniFinderProtocolDecoder(MiniFinderProtocol protocol) {
     }
 
     private static final Pattern PATTERN = new PatternBuilder()
-            .expression("![AD],")
+            .expression("![A-D],")
             .number("(d+)/(d+)/(d+),")           // date
             .number("(d+):(d+):(d+),")           // time
             .number("(-?d+.d+),")                // latitude
@@ -62,7 +62,7 @@ protected Object decode(
 
             identify(sentence.substring(3, sentence.length()), channel, remoteAddress);
 
-        } else if ((sentence.startsWith("!D") || sentence.startsWith("!A")) && hasDeviceId()) {
+        } else if (sentence.matches("![A-D].*") && hasDeviceId()) {
 
             Parser parser = new Parser(PATTERN, sentence);
             if (!parser.matches()) {

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, text(
                 "!1,860719027585011"));
 
+        verifyPosition(decoder, text(
+                "!C,30/1/16,1:1:6,31.259157,30.020910,0,0,100001,25.32,100,0.03,0.01,0"));
+
         verifyPosition(decoder, text(
                 "!A,26/10/12,00:28:41,7.770385,-72.215706,0.0,25101,0"));
 

File: src/org/traccar/api/ObjectMapperProvider.java
Patch:
@@ -20,7 +20,6 @@
 
 import javax.ws.rs.ext.ContextResolver;
 import javax.ws.rs.ext.Provider;
-import java.text.SimpleDateFormat;
 
 @Provider
 public class ObjectMapperProvider implements ContextResolver<ObjectMapper> {

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 - 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2013 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,6 @@
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
-import sun.net.www.content.audio.basic;
 
 public class OsmAndProtocolDecoder extends BaseProtocolDecoder {
 

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -151,7 +151,7 @@ protected Object decode(
 
                 case DATA_STATUS:
                     int status = buf.readUnsignedShort();
-                    position.set(Event.KEY_IGNITION, BitUtil.check(status, 6));
+                    position.set(Event.KEY_IGNITION, BitUtil.check(status, 9));
                     position.set(Event.KEY_STATUS, status);
                     position.set(Event.KEY_ALARM, buf.readUnsignedShort());
                     break;

File: src/org/traccar/model/Extensible.java
Patch:
@@ -53,7 +53,7 @@ public void set(String key, String value) {
     }
 
     public void add(Map.Entry<String, Object> entry) {
-        if (entry.getValue() != null) {
+        if (entry != null && entry.getValue() != null) {
             attributes.put(entry.getKey(), entry.getValue());
         }
     }

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
 
+        verifyNothing(decoder, binary(
+                "2a545330312c33353430343330353133383934363023"));
+
         verifyPosition(decoder, binary(
                 "f8010108679650230646339de69054010e015ee17506bde2c60000000000ac0304024000000404000009f705060390181422170711310583410c0000310d00312f834131018608040003130a100101136cf8"));
 

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -89,7 +89,7 @@ protected Object decode(
             position.set(Event.KEY_MCC, buf.readUnsignedShort());
             position.set(Event.KEY_MNC, buf.readUnsignedShort());
             position.set(Event.KEY_LAC, buf.readUnsignedShort());
-            position.set(Event.KEY_CID, buf.readUnsignedShort());
+            position.set(Event.KEY_CID, buf.readUnsignedMedium());
 
             position.setValid((buf.readUnsignedByte() & 0x01) != 0);
 

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, binary(
                 "676701000c002603541880486128290120"));
 
+        verifyPosition(decoder, binary(
+                "676704001c01a4569ff2dd0517a0f7020b0d9a06011000d8001e005b0004450183"));
+
         verifyPosition(decoder, binary(
                 "676705002200ba569fc3520517a0d8020b0f740f007100d8001e005b0004460101569fd162001f"));
 

File: src/org/traccar/protocol/NvsFrameDecoder.java
Patch:
@@ -34,9 +34,9 @@ protected Object decode(
 
         int length;
         if (buf.getUnsignedByte(buf.readerIndex()) == 0) {
-            length = buf.getUnsignedShort(buf.readerIndex());
+            length = 2 + buf.getUnsignedShort(buf.readerIndex());
         } else {
-            length = 4 + buf.getUnsignedShort(buf.readerIndex() + 4) + 2;
+            length = 4 + 2 + buf.getUnsignedShort(buf.readerIndex() + 4) + 2;
         }
 
         if (buf.readableBytes() >= length) {

File: src/org/traccar/protocol/NvsProtocolDecoder.java
Patch:
@@ -50,6 +50,8 @@ protected Object decode(
 
         if (buf.getUnsignedByte(buf.readerIndex()) == 0) {
 
+            buf.readUnsignedShort(); // length
+
             String imei = buf.toString(buf.readerIndex(), 15, Charset.defaultCharset());
 
             if (!identify(imei, channel, remoteAddress)) {

File: src/org/traccar/protocol/NvsProtocolDecoder.java
Patch:
@@ -16,6 +16,7 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.buffer.ChannelBuffer;
+import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
@@ -36,7 +37,7 @@ public NvsProtocolDecoder(NvsProtocol protocol) {
 
     private void sendResponse(Channel channel, String response) {
         if (channel != null) {
-            channel.write(response);
+            channel.write(ChannelBuffers.copiedBuffer(response, Charset.defaultCharset()));
         }
     }
 

File: src/org/traccar/protocol/WatchProtocolDecoder.java
Patch:
@@ -47,9 +47,9 @@ public WatchProtocolDecoder(WatchProtocol protocol) {
             .number("(dd)(dd)(dd),")             // date (ddmmyy)
             .number("(dd)(dd)(dd),")             // time
             .expression("([AV]),")               // validity
-            .number("(d+.d+),")                  // latitude
+            .number("-?(d+.d+),")                // latitude
             .expression("([NS]),")
-            .number("(d+.d+),")                  // longitude
+            .number("-?(d+.d+),")                // longitude
             .expression("([EW]),")
             .number("(d+.d+),")                  // speed
             .number("(d+.d+),")                  // course

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         WatchProtocolDecoder decoder = new WatchProtocolDecoder(new WatchProtocol());
 
+        verifyPosition(decoder, text(
+                "[3G*2256002206*0079*UD2,100116,153723,A,38.000000,N,-9.000000,W,0.44,299.3,0.0,7,100,86,0,0,00000008,2,0,268,3,3010,51042,146,3010,51043,132]"));
+
         verifyNothing(decoder, text(
                 "[3G*8800000015*0003*TKQ"));
 

File: src/org/traccar/protocol/DishaProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2015 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2015 - 2016 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -82,7 +82,7 @@ protected Object decode(
         position.setTime(dateBuilder.getDate());
 
         position.setLatitude(parser.nextCoordinate());
-        position.setLatitude(parser.nextCoordinate());
+        position.setLongitude(parser.nextCoordinate());
 
         position.setSpeed(parser.nextDouble());
         position.setCourse(parser.nextDouble());

File: src/org/traccar/protocol/Gps103Protocol.java
Patch:
@@ -36,6 +36,8 @@ public Gps103Protocol() {
                 Command.TYPE_POSITION_STOP,
                 Command.TYPE_ENGINE_STOP,
                 Command.TYPE_ENGINE_RESUME,
+                Command.TYPE_ALARM_ARM,
+                Command.TYPE_ALARM_DISARM,
                 Command.TYPE_REQUEST_PHOTO);
     }
 

File: test/org/traccar/protocol/T800xProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, binary(
                 "232303000f00000880316890202968"));
 
-        verifyPosition(decoder, binary(
+        verifyAttributes(decoder, binary(
                 "232302004200000880316890202968001e02582d00000000000000050000320000018901920000001dc1e2001601081154255d0202005a0053875a00a57e5a00af80"));
 
         verifyNothing(decoder, binary(

File: src/org/traccar/protocol/NvsProtocolDecoder.java
Patch:
@@ -16,10 +16,8 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
-import org.traccar.helper.BitUtil;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;

File: src/org/traccar/web/WebServer.java
Patch:
@@ -150,7 +150,7 @@ private void initOldApi() {
         ServletContextHandler servletHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);
         servletHandler.setContextPath("/api");
         servletHandler.getSessionHandler().setSessionManager(sessionManager);
-        
+
         servletHandler.addServlet(new ServletHolder(new AsyncServlet()), "/async/*");
         servletHandler.addServlet(new ServletHolder(new ServerServlet()), "/server/*");
         servletHandler.addServlet(new ServletHolder(new UserServlet()), "/user/*");

File: src/org/traccar/api/ObjectMapperProvider.java
Patch:
@@ -29,7 +29,7 @@ public class ObjectMapperProvider implements ContextResolver<ObjectMapper> {
     private ObjectMapper mapper = new ObjectMapper();
 
     public ObjectMapperProvider() {
-        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
+        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         mapper.setConfig(mapper.getSerializationConfig().with(dateFormat));

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -101,7 +101,7 @@ public BasePipelineFactory(TrackerServer server, String protocol) {
 
         if (Context.getReverseGeocoder() != null) {
             reverseGeocoderHandler = new ReverseGeocoderHandler(
-                    Context.getReverseGeocoder(), Context.getConfig().getBoolean("geocode.processInvalidPositions"));
+                    Context.getReverseGeocoder(), Context.getConfig().getBoolean("geocoder.processInvalidPositions"));
         }
 
         if (Context.getLocationProvider() != null) {

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -55,6 +55,7 @@ protected Object decode(
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
+        position.setValid(true);
 
         for (Map.Entry<String, List<String>> entry : params.entrySet()) {
             String value = entry.getValue().get(0);

File: src/org/traccar/api/ObjectMapperProvider.java
Patch:
@@ -29,7 +29,7 @@ public class ObjectMapperProvider implements ContextResolver<ObjectMapper> {
     private ObjectMapper mapper = new ObjectMapper();
 
     public ObjectMapperProvider() {
-        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'");
+        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
         dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
 
         mapper.setConfig(mapper.getSerializationConfig().with(dateFormat));

File: src/org/traccar/helper/Parser.java
Patch:
@@ -157,7 +157,7 @@ public double nextCoordinate(CoordinateFormat format) {
     }
 
     public double nextCoordinate() {
-        return  nextCoordinate(CoordinateFormat.DEG_MIN_HEM);
+        return nextCoordinate(CoordinateFormat.DEG_MIN_HEM);
     }
 
 }

File: src/org/traccar/protocol/HuabaoProtocolDecoder.java
Patch:
@@ -82,7 +82,7 @@ protected Object decode(
         ChannelBuffer id = buf.readBytes(6); // phone number
         int index = buf.readUnsignedShort();
 
-        if (!identify(id.toString(Charset.defaultCharset()), channel, remoteAddress)) {
+        if (!identify(ChannelBuffers.hexDump(id), channel, remoteAddress)) {
             return null;
         }
 

File: src/org/traccar/api/resource/CommandResource.java
Patch:
@@ -25,7 +25,6 @@
 import javax.ws.rs.Produces;
 import javax.ws.rs.core.MediaType;
 import javax.ws.rs.core.Response;
-import javax.ws.rs.core.SecurityContext;
 
 @Path("commands")
 @Produces(MediaType.APPLICATION_JSON)

File: src/org/traccar/model/Command.java
Patch:
@@ -17,7 +17,7 @@
 
 import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
 
-@JsonIgnoreProperties(ignoreUnknown=true)
+@JsonIgnoreProperties(ignoreUnknown = true)
 public class Command extends Extensible {
 
     public static final String TYPE_POSITION_SINGLE = "positionSingle";

File: src/org/traccar/protocol/MegastekProtocol.java
Patch:
@@ -17,11 +17,9 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;

File: src/org/traccar/web/CommandServlet.java
Patch:
@@ -22,7 +22,6 @@
 import org.traccar.Context;
 import org.traccar.database.ActiveDevice;
 import org.traccar.model.Command;
-import org.traccar.model.Device;
 
 public class CommandServlet extends BaseServlet {
 

File: src/org/traccar/model/Command.java
Patch:
@@ -15,6 +15,9 @@
  */
 package org.traccar.model;
 
+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
+
+@JsonIgnoreProperties(ignoreUnknown=true)
 public class Command extends Extensible {
 
     public static final String TYPE_POSITION_SINGLE = "positionSingle";

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -99,6 +99,9 @@ private void sendResponse(
             response.writeByte(version);
             response.writeBytes(id);
             response.writeShort(ChannelBuffers.swapShort(type));
+            if (content != null) {
+                response.writeBytes(content);
+            }
             response.writeShort(
                     Checksum.crc16(Checksum.CRC16_X25, response.toByteBuffer(0, response.writerIndex())));
             response.writeByte(0x0D); response.writeByte(0x0A);

File: src/org/traccar/protocol/NoranProtocolDecoder.java
Patch:
@@ -74,8 +74,7 @@ protected Object decode(
             boolean newFormat = false;
             if (type == MSG_UPLOAD_POSITION && buf.readableBytes() == 48
                     || type == MSG_ALARM && buf.readableBytes() == 48
-                    || type == MSG_CONTROL_RESPONSE && buf.readableBytes() == 57
-                    || type == MSG_UPLOAD_POSITION_NEW) {
+                    || type == MSG_CONTROL_RESPONSE && buf.readableBytes() == 57) {
                 newFormat = true;
             }
 

File: src/org/traccar/protocol/AuruProtocol.java
Patch:
@@ -20,7 +20,6 @@
 import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;

File: src/org/traccar/protocol/AuruProtocolDecoder.java
Patch:
@@ -17,7 +17,6 @@
 
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
-import org.traccar.helper.BitUtil;
 import org.traccar.helper.DateBuilder;
 import org.traccar.helper.Parser;
 import org.traccar.helper.PatternBuilder;

File: src/org/traccar/protocol/DishaProtocol.java
Patch:
@@ -20,7 +20,6 @@
 import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;

File: src/org/traccar/protocol/ThinkRaceProtocolDecoder.java
Patch:
@@ -37,8 +37,9 @@ public ThinkRaceProtocolDecoder(ThinkRaceProtocol protocol) {
     public static final int MSG_GPS = 0x90;
 
     private static double convertCoordinate(long raw, boolean negative) {
-        double result = raw / 1000000;
-        result += (raw % 1000000) * 0.0001 / 60;
+        long degrees = raw / 1000000;
+        double minutes = (raw % 1000000) * 0.0001;
+        double result = degrees + minutes / 60;
         if (negative) {
             result = -result;
         }

File: src/org/traccar/database/IdentityManager.java
Patch:
@@ -19,7 +19,7 @@
 
 public interface IdentityManager {
 
-    Device getDeviceById(long id) throws Exception;
+    Device getDeviceById(long id);
 
     Device getDeviceByUniqueId(String uniqueId) throws Exception;
 

File: src/org/traccar/api/SecurityRequestFilter.java
Patch:
@@ -18,6 +18,7 @@
 import org.traccar.Context;
 import org.traccar.model.User;
 
+import java.nio.charset.Charset;
 import java.sql.SQLException;
 import javax.ws.rs.WebApplicationException;
 import javax.ws.rs.container.ContainerRequestContext;
@@ -35,7 +36,7 @@ public static String[] decodeBasicAuth(String auth) {
         auth = auth.replaceFirst("[B|b]asic ", "");
         byte[] decodedBytes = DatatypeConverter.parseBase64Binary(auth);
         if (decodedBytes != null && decodedBytes.length > 0) {
-            return new String(decodedBytes).split(":", 2);
+            return new String(decodedBytes, Charset.defaultCharset()).split(":", 2);
         }
         return null;
     }

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -67,7 +67,7 @@ public Gps103ProtocolDecoder(Gps103Protocol protocol) {
             .text("imei:")
             .number("(d+),")                     // imei
             .expression("[^,]+,")                // alarm
-            .number("d+,,")
+            .number("d*,,")
             .text("L,,,")
             .number("(x+),,")                    // lac
             .number("(x+),,,")                   // cid

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
+        verifyAttributes(decoder, text(
+                "imei:359710049075097,help me,,,L,,,113b,,558f,,,,,0,0,,,"));
+
         verifyAttributes(decoder, text(
                 "imei:359710041100000,tracker,000000000,,L,,,fa8,,c9af,,,,,0,0,0.00%,,"));
 

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -67,7 +67,7 @@ public void checkAdmin(long userId) throws SecurityException {
         }
     }
 
-    private void checkUser(long userId, long otherUserId) throws SecurityException {
+    public void checkUser(long userId, long otherUserId) throws SecurityException {
         if (userId != otherUserId) {
             checkAdmin(userId);
         }
@@ -77,7 +77,7 @@ public Collection<Long> allowedDevices(long userId) {
         return getNotNull(userId);
     }
 
-    private void checkDevice(long userId, long deviceId) throws SecurityException {
+    public void checkDevice(long userId, long deviceId) throws SecurityException {
         if (!getNotNull(userId).contains(deviceId)) {
             throw new SecurityException("Device access denied");
         }

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -204,7 +204,9 @@ protected Object decode(
 
                 case DATA_EVENT:
                     position.set(Event.KEY_EVENT, buf.readUnsignedByte());
-                    position.set("event-mask", buf.readUnsignedInt());
+                    if (length > 1) {
+                        position.set("event-mask", buf.readUnsignedInt());
+                    }
                     break;
 
                 default:

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public void testDecode() throws Exception {
 
         UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
 
+        verifyPosition(decoder, binary(
+                "f8010108679650230646339de69054010e015ee17506bde2c60000000000ac0304024000000404000009f705060390181422170711310583410c0000310d00312f834131018608040003130a100101136cf8"));
+
         verifyPosition(decoder, binary(
                 "f8010108679650230651689dc8e45b010e01194a26fbd47fa6001f003c0054030402420000040400024d7b0506037c18692212071131057f410c0ee0310d1b312f41413112ef0804000dd59fcc32f8"));
 

File: src/org/traccar/WebDataHandler.java
Patch:
@@ -101,8 +101,8 @@ protected Position handlePosition(Position position) {
                 .replace("{protocol}", String.valueOf(position.getProtocol()))
                 .replace("{deviceTime}", String.valueOf(position.getDeviceTime().getTime()))
                 .replace("{fixTime}", String.valueOf(position.getFixTime().getTime()))
-                .replace("{valid}", String.valueOf(position.getLatitude()))
-                .replace("{latitude}", String.valueOf(position.getValid()))
+                .replace("{valid}", String.valueOf(position.getValid()))
+                .replace("{latitude}", String.valueOf(position.getLatitude()))
                 .replace("{longitude}", String.valueOf(position.getLongitude()))
                 .replace("{altitude}", String.valueOf(position.getAltitude()))
                 .replace("{speed}", String.valueOf(position.getSpeed()))

File: test/org/traccar/web/JsonConverterTest.java
Patch:
@@ -20,7 +20,7 @@ public void primitiveConversion() throws ParseException {
                 "\"string\": \"discworld\", " +
                 "\"date\":\"2015-07-09T19:02:17.000Z\"" +
                 "}"),
-                new Primitives());
+                Primitives.class);
 
         assertEquals(true, o.getBoolean());
         assertEquals(42, o.getInt());

File: src/org/traccar/web/AsyncServlet.java
Patch:
@@ -50,7 +50,7 @@ protected boolean handle(String command, HttpServletRequest req, HttpServletResp
 
     public static class AsyncSession {
 
-        private static final boolean DEBUG_ASYNC = true;
+        public static final boolean DEBUG_ASYNC = false;
 
         private static final long SESSION_TIMEOUT = 30;
         private static final long REQUEST_TIMEOUT = 20;

File: src/org/traccar/protocol/FlextrackProtocolDecoder.java
Patch:
@@ -125,8 +125,8 @@ protected Object decode(
             position.setAltitude(parser.nextInt());
 
             position.set(Event.KEY_HDOP, parser.nextInt() * 0.1);
-            position.set(Event.KEY_CID, parser.next());
-            position.set(Event.KEY_LAC, parser.next());
+            position.set(Event.KEY_CID, parser.nextInt(16));
+            position.set(Event.KEY_LAC, parser.nextInt(16));
             position.set(Event.KEY_ODOMETER, parser.nextInt());
 
             return position;

File: test/org/traccar/ProtocolDecoderTest.java
Patch:
@@ -187,11 +187,11 @@ private void verifyDecodedPosition(Object decodedObject, boolean checkLocation,
             Assert.assertFalse("no attributes", attributes.isEmpty());
         }
 
-        /*if (attributes.containsKey(Event.KEY_LAC) || attributes.containsKey(Event.KEY_CID)) {
+        /*if (attributes.containsKey(Event.KEY_MCC) || attributes.containsKey(Event.KEY_MNC)) {
             checkInteger(attributes.get(Event.KEY_MCC), 100, 999);
             checkInteger(attributes.get(Event.KEY_MNC), 0, 999);
             checkInteger(attributes.get(Event.KEY_LAC), 1, 65535);
-            checkInteger(attributes.get(Event.KEY_CID), 1, 65535);
+            checkInteger(attributes.get(Event.KEY_CID), 1, 268435455);
         }*/
 
     }

File: src/org/traccar/web/BaseServlet.java
Patch:
@@ -53,7 +53,8 @@ protected final void service(
         try {
             resp.setContentType(APPLICATION_JSON);
             resp.setCharacterEncoding(CharsetUtil.UTF_8.name());
-            resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN, ALLOW_ORIGIN_VALUE);
+            resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_ORIGIN,
+                    Context.getConfig().getString("web.origin", ALLOW_ORIGIN_VALUE));
             resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_HEADERS, ALLOW_HEADERS_VALUE);
             resp.setHeader(HttpHeaders.Names.ACCESS_CONTROL_ALLOW_METHODS, ALLOW_METHODS_VALUE);
             if (!handle(getCommand(req), req, resp)) {

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -68,7 +68,7 @@ protected Object decode(
             byte[] bytes = new byte[19];
             buf.readBytes(bytes);
 
-            String imei = ChannelBuffers.hexDump(ChannelBuffers.wrappedBuffer(bytes, 1, 16)).substring(1);
+            String imei = ChannelBuffers.hexDump(ChannelBuffers.wrappedBuffer(bytes, 1, 8)).substring(1);
             if (!identify(imei, channel)) {
                 return null;
             }

File: test/org/traccar/ProtocolDecoderTest.java
Patch:
@@ -38,7 +38,7 @@ public Device getDeviceById(long id) {
             }
 
             @Override
-            public Device getDeviceByUniqueId(String imei) {
+            public Device getDeviceByUniqueId(String uniqueId) {
                 return createDevice();
             }
 

File: test/org/traccar/protocol/AutoFon45ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public class AutoFon45ProtocolDecoderTest extends ProtocolDecoderTest {
     public void testDecode() throws Exception {
         AutoFon45ProtocolDecoder decoder = new AutoFon45ProtocolDecoder(new AutoFon45Protocol());
 
+        verifyNothing(decoder, binary(
+                "41035151305289931441139602662095148807"));
+
         verifyNothing(decoder, binary(
                 "41032125656985547543619173484002123481"));
 

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -40,11 +40,11 @@ public abstract class BasePipelineFactory implements ChannelPipelineFactory {
     private DistanceHandler distanceHandler;
     private ReverseGeocoderHandler reverseGeocoderHandler;
 
-    private static class OpenChannelHandler extends SimpleChannelHandler {
+    private static final class OpenChannelHandler extends SimpleChannelHandler {
 
         private final TrackerServer server;
 
-        public OpenChannelHandler(TrackerServer server) {
+        private OpenChannelHandler(TrackerServer server) {
             this.server = server;
         }
 

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -59,11 +59,11 @@ private static boolean isFormat(int type, int... types) {
         return false;
     }
 
-    private static class ParseResult {
+    private static final class ParseResult {
         private final long id;
         private final Position position;
 
-        public ParseResult(long id, Position position) {
+        private ParseResult(long id, Position position) {
             this.id = id;
             this.position = position;
         }

File: src/org/traccar/protocol/HuabaoProtocol.java
Patch:
@@ -17,9 +17,7 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.traccar.BaseProtocol;
-import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;

File: src/org/traccar/helper/Authorization.java
Patch:
@@ -24,10 +24,10 @@
 import org.jboss.netty.util.CharsetUtil;
 
 public final class Authorization {
-    
+
     private Authorization() {
     }
-    
+
     public static final String HEADER = "Authorization";
     public static final String SCHEME = "Basic";
     public static final String REGEX = SCHEME + " ";
@@ -39,7 +39,7 @@ private Authorization() {
     public static Map<String, String> parse(String authorization) {
         Map<String, String> authMap = new HashMap<>();
         final String encodedUsernameAndPassword = authorization.replaceFirst(REGEX, REPLACEMENT);
-        ChannelBuffer buffer = ChannelBuffers.copiedBuffer(encodedUsernameAndPassword,CharsetUtil.UTF_8);
+        ChannelBuffer buffer = ChannelBuffers.copiedBuffer(encodedUsernameAndPassword, CharsetUtil.UTF_8);
         String usernameAndPassword = Base64.decode(buffer).toString(CharsetUtil.UTF_8);
         final StringTokenizer tokenizer = new StringTokenizer(usernameAndPassword, TOKENIZER);
         authMap.put(USERNAME, tokenizer.nextToken());

File: src/org/traccar/web/BaseServlet.java
Patch:
@@ -65,7 +65,9 @@ public long getUserId(HttpServletRequest req) throws Exception  {
         String authorization = req.getHeader(Authorization.HEADER);
         if (authorization != null && !authorization.isEmpty()) {
             Map<String, String> authMap = Authorization.parse(authorization);
-            User user = Context.getDataManager().login(authMap.get(Authorization.USERNAME), authMap.get(Authorization.PASSWORD));
+            String username = authMap.get(Authorization.USERNAME);
+            String password = authMap.get(Authorization.PASSWORD);
+            User user = Context.getDataManager().login(username, password);
             if (user != null) {
                 return user.getId();
             }

File: test/org/traccar/protocol/Gt02ProtocolDecoderTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.traccar.protocol;
 
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
 import org.traccar.ProtocolDecoderTest;
-import org.traccar.helper.ChannelBufferTools;
 
 public class Gt02ProtocolDecoderTest extends ProtocolDecoderTest {
 
@@ -13,7 +11,8 @@ public void testDecode() throws Exception {
         Gt02ProtocolDecoder decoder = new Gt02ProtocolDecoder(new Gt02Protocol());
 
         verifyPosition(decoder, binary(
-                "68682500000123456789012345000110010101010101026B3F3E026B3F3E000000000000000000010D0A"));
+                "68682500000123456789012345000110010101010101026B3F3E026B3F3E000000000000000000010D0A"),
+                position("2001-01-01 01:01:01.000", true, -22.54610, -22.54610));
 
         verifyNothing(decoder, binary(
                 "6868110603035889905101276600001a0402292d0d0a"));

File: test/org/traccar/protocol/IntellitracProtocolDecoderTest.java
Patch:
@@ -10,7 +10,8 @@ public void testDecode() throws Exception {
 
         IntellitracProtocolDecoder decoder = new IntellitracProtocolDecoder(new IntellitracProtocol());
 
-        verifyNothing(decoder, text( "$OK:TRACKING"));
+        verifyNothing(decoder, text(
+                "$OK:TRACKING"));
         
         verifyPosition(decoder, text(
                 "101000001,20100304075545,121.64547,25.06200,0,0,61,7,2,1,0,0.046,0.000,20100304075546,0"));

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -10,7 +10,8 @@ public void testDecode() throws Exception {
 
         MiniFinderProtocolDecoder decoder = new MiniFinderProtocolDecoder(new MiniFinderProtocol());
 
-        verifyNothing(decoder, text( "!1,860719020212696"));
+        verifyNothing(decoder, text(
+                "!1,860719020212696"));
 
         verifyPosition(decoder, text(
                 "!D,22/2/14,13:40:58,56.899601,14.811541,0,0,1,176.0,98,5,16,0"));

File: test/org/traccar/protocol/SuntechProtocolDecoderTest.java
Patch:
@@ -10,7 +10,8 @@ public void testDecode() throws Exception {
 
         SuntechProtocolDecoder decoder = new SuntechProtocolDecoder(new SuntechProtocol());
         
-        verifyNothing(decoder, text( "SA200ALV;317652"));
+        verifyNothing(decoder, text(
+                "SA200ALV;317652"));
         
         verifyPosition(decoder, text(
                 "ST910;Alert;123456;410;20141018;18:30:12;+37.478774;+126.889690;000.000;000.00;0;4.0;1;6002"));

File: test/org/traccar/protocol/Tk102ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,8 @@ public void testDecode() throws Exception {
 
         Tk102ProtocolDecoder decoder = new Tk102ProtocolDecoder(new Tk102Protocol());
 
-        verifyNothing(decoder, text( ""));
+        verifyNothing(decoder, text(
+                ""));
 
         verifyNothing(decoder, text(
                 "[!0000000081r(353327023367238,TK102-W998_01_V1.1.001_130219,255,001,255,001,0,100,100,0,internet,0000,0000,0,0,255,0,4,1,11,00)"));

File: test/org/traccar/protocol/Tr20ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,8 @@ public void testDecode() throws Exception {
 
         Tr20ProtocolDecoder decoder = new Tr20ProtocolDecoder(new Tr20Protocol());
 
-        verifyNothing(decoder, text( "%%TRACKPRO01,1"));
+        verifyNothing(decoder, text(
+                "%%TRACKPRO01,1"));
 
         verifyPosition(decoder, text(
                 "%%TR-10,A,050916070549,N2240.8887E11359.2994,0,000,NA,D3800000,150,CFG:resend|"),

File: test/org/traccar/protocol/TrackboxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,8 @@ public void testDecode() throws Exception {
 
         TrackboxProtocolDecoder decoder = new TrackboxProtocolDecoder(new TrackboxProtocol());
 
-        verifyNothing(decoder, text( "a=connect&v=11&i=111111111111111"));
+        verifyNothing(decoder, text(
+                "a=connect&v=11&i=111111111111111"));
 
         verifyPosition(decoder, text(
                 "183457.999,5126.0247N,00002.8686E,5.2,70.4,3,57.63,32.11,17.32,150507,05"),

File: test/org/traccar/protocol/WatchProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
         verifyNothing(decoder, text(
                 "[SG*8800000015*0002*LK"));
 
-        verifyNothing(decoder, text(
+        verifyAttributes(decoder, text(
                 "[3G*4700186508*000B*LK,0,10,100"));
 
         verifyPosition(decoder, text(

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -203,10 +203,10 @@ protected Object decode(
                     position.set(Event.KEY_CELL, buf.readUnsignedShort());
 
                     positions.add(position);
-
-                    return positions;
                 }
 
+                return positions;
+
             } else if (type == MSG_CC_LOGIN) {
 
                 sendResponse(channel, remoteAddress, version, id, MSG_CC_LOGIN_RESPONSE, null);

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -127,8 +127,8 @@ protected Object decode(
 
         // Timezone calculation
         if (utcHours != null && utcMinutes != null) {
-            int deltaMinutes = (localHours - Integer.valueOf(utcHours)) * 60;
-            deltaMinutes += localMinutes - Integer.valueOf(utcMinutes);
+            int deltaMinutes = (localHours - Integer.parseInt(utcHours)) * 60;
+            deltaMinutes += localMinutes - Integer.parseInt(utcMinutes);
             if (deltaMinutes <= -12 * 60) {
                 deltaMinutes += 24 * 60;
             } else if (deltaMinutes > 12 * 60) {

File: src/org/traccar/ReverseGeocoderHandler.java
Patch:
@@ -62,6 +62,8 @@ public void onResult(String address) {
                         Channels.fireMessageReceived(ctx, position, e.getRemoteAddress());
                     }
                 });
+            } else {
+                Channels.fireMessageReceived(ctx, position, e.getRemoteAddress());
             }
         } else {
             Channels.fireMessageReceived(ctx, message, e.getRemoteAddress());

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -62,7 +62,7 @@ public GoSafeProtocolDecoder(GoSafeProtocol protocol) {
             .groupEnd()
             .groupBegin()
             .text("GSM:").expression("[^,]*,?")
-            .groupEnd()
+            .groupEnd("?")
             .groupBegin()
             .text("COT:")
             .number("(d+)")                      // odometer

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new GoSafeProtocol());
 
+        verifyPositions(decoder, text(
+                "*GS16,351535058709775,100356130215,,SYS:G79W;V1.06;V1.0.2,GPS:A;6;N24.802700;E46.616828;0;0;684;1.35,COT:60,ADC:4.31;0.10,DTT:20000;;0;0;0;1"));
+
         verifyPositions(decoder, text(
                 "*GS16,351535059439208,074558291015,,GPS:A;9;N31.935942;E35.867092;;345;921;1.03;1.59,GSM:1;3;416;3;A8C;368B;-78;416;3;A8C;2820;-73;416;3;BB8;2CBE;-76;416;3;A8C;368A;-76;416;3;A8C;2C26;-79,OBD:04410C122003410D0F03411C0103410547037F011203411100"));
 
@@ -22,9 +25,6 @@ public void testDecode() throws Exception {
         verifyPositions(decoder, text(
                 "*GS16,351535059439208,103441131015,,GPS:A;8;N31.960122;E35.921652;27;99;847;1.33;2.41,GSM:1;4;416;3;AF0;9C73;-61;416;3;AF0;9C89;-68,OBD:04410C0DA403410D0B03411C010341057A037F011203411100$103453131015,,GPS:A;8;N31.959976;E35.922144;6;0;835;1.33;2.41,GSM:1;4;416;3;AF0;9C73;-67;416;3;AF0;9C89;-64;416;3;AF0;B389;-83,OBD:04410C0D8E03410D0B03411C010341057D037F011203411100$103503131015,,GPS:A;9;N31.959870;E35.922284;11;127;830;1.33;2.41,GSM:1;4;416;3;AF0;9C73;-67;416;3;AF0;9C89;-64;416;3;AF0;B389;-83,OBD:04410C0D8E03410D0B03411C010341057D037F011203411100$103513131015,,GPS:A;9;N31.959742;E35.922516;10;106;830;1.37;2.91,GSM:1;4;416;3;AF0;9C73;-67;416;3;AF0;9C89;-64;416;3;AF0;B389;-83,OBD:04410C0D1003410D0603411C010341057E037F011203411100$103553131015,,GPS:A;8;N31.959564;E35.923308;6;0;836;1.41;2.43,GSM:1;4;416;3;AF0;9C73;-65;416;3;AF0;B389;-71;416;3;AF0;9C89;-74,OBD:04410C0DAE03410D0403411C010341057C037F011203411100#"));
 
-        verifyPositions(decoder, text(
-                "*GS16,351535058709775,100356130215,,SYS:G79W;V1.06;V1.0.2,GPS:A;6;N24.802700;E46.616828;0;0;684;1.35,COT:60,ADC:4.31;0.10,DTT:20000;;0;0;0;1"));
-        
         verifyPositions(decoder, text(
                 "*GS16,351535059439208,155750220815,,SYS:G79;V1.10;V1.0.2,GPS:A;4;N31.944198;E35.846644;0;0;923;9.47;1.00,COT:155133,ADC:12.21;0.10,DTT:20002;;0;0;0;1#"));
         

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new GoSafeProtocol());
 
+        verifyPositions(decoder, text(
+                "*GS16,351535059439208,074558291015,,GPS:A;9;N31.935942;E35.867092;;345;921;1.03;1.59,GSM:1;3;416;3;A8C;368B;-78;416;3;A8C;2820;-73;416;3;BB8;2CBE;-76;416;3;A8C;368A;-76;416;3;A8C;2C26;-79,OBD:04410C122003410D0F03411C0103410547037F011203411100"));
+
         verifyPositions(decoder, text(
                 "*GS16,351535059439208,083515281015,,GPS:A;9;N31.959502;E35.908316;;108;890;1.05;1.79,GSM:1;4;416;3;AF0;A3A6;-59;416;3;AF0;A3A3;-50;416;3;AF0;A3A4;-56;416;3;AF0;A3A5;-62;416;3;AF0;B195;-76,OBD:04410C194603410D2303411C0103410583037F011203411115"));
 

File: test/org/traccar/ProtocolDecoderTest.java
Patch:
@@ -69,6 +69,7 @@ protected void verifyPositions(BaseProtocolDecoder decoder, Object object) throw
         Object decodedObject = decoder.decode(null, null, object);
         Assert.assertNotNull(decodedObject);
         Assert.assertTrue(decodedObject instanceof List);
+        Assert.assertFalse("list if empty", ((List) decodedObject).isEmpty());
         for (Object item : (List) decodedObject) {
             verifyDecodedPosition(item);
         }
@@ -78,6 +79,7 @@ protected void verifyPositions(BaseProtocolDecoder decoder, Object object, Posit
         Object decodedObject = decoder.decode(null, null, object);
         Assert.assertNotNull(decodedObject);
         Assert.assertTrue(decodedObject instanceof List);
+        Assert.assertFalse("list if empty", ((List) decodedObject).isEmpty());
         for (Object item : (List) decodedObject) {
             verifyDecodedPosition(item, position);
         }

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new GoSafeProtocol());
 
+        verifyPositions(decoder, text(
+                "*GS16,351535059439208,083515281015,,GPS:A;9;N31.959502;E35.908316;;108;890;1.05;1.79,GSM:1;4;416;3;AF0;A3A6;-59;416;3;AF0;A3A3;-50;416;3;AF0;A3A4;-56;416;3;AF0;A3A5;-62;416;3;AF0;B195;-76,OBD:04410C194603410D2303411C0103410583037F011203411115"));
+
         verifyNothing(decoder, text(
                 "*GS16,351535058709775"));
         

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -16,9 +16,6 @@
 package org.traccar.protocol;
 
 import java.net.SocketAddress;
-import java.util.Calendar;
-import java.util.TimeZone;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;

File: src/org/traccar/helper/DateBuilder.java
Patch:
@@ -31,6 +31,7 @@ public DateBuilder() {
     public DateBuilder(TimeZone timeZone) {
         calendar = Calendar.getInstance(timeZone);
         calendar.clear();
+        calendar.setTimeInMillis(0);
     }
 
     public DateBuilder setYear(int year) {

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -193,7 +193,7 @@ protected Object decode(
                     offset = -offset;
                 }
                 if (!forceTimeZone) {
-                    timeZone.setRawOffset(offset);
+                    timeZone.setRawOffset(offset * 1000);
                 }
             }
 

File: test/org/traccar/ProtocolDecoderTest.java
Patch:
@@ -18,6 +18,7 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.List;
+import java.util.TimeZone;
 
 public class ProtocolDecoderTest {
 
@@ -136,6 +137,7 @@ private void verifyDecodedPosition(Object decodedObject, Position expected) {
 
         if (expected.getFixTime() != null) {
             DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
             Assert.assertEquals("time",
                     dateFormat.format(expected.getFixTime()), dateFormat.format(position.getFixTime()));
         }

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -116,7 +116,7 @@ private void decodeGps(Position position, ChannelBuffer buf) {
         position.setCourse(BitUtil.to(flags, 10));
         position.setValid(BitUtil.check(flags, 12));
 
-        if (BitUtil.check(flags, 10)) {
+        if (!BitUtil.check(flags, 10)) {
             latitude = -latitude;
         }
         if (BitUtil.check(flags, 11)) {

File: src/org/traccar/helper/PatternBuilder.java
Patch:
@@ -43,7 +43,7 @@ public PatternBuilder opx(String s) {
 
     // TeXT
     public PatternBuilder txt(String s) {
-        pattern.append(s.replaceAll("([\\\\\\.\\[\\{\\(\\*\\+\\?\\^\\$\\|])", "\\\\$1"));
+        pattern.append(s.replaceAll("([\\\\\\.\\[\\{\\(\\)\\*\\+\\?\\^\\$\\|])", "\\\\$1"));
         return this;
     }
 

File: src/org/traccar/protocol/AdmProtocol.java
Patch:
@@ -35,7 +35,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         TrackerServer server = new TrackerServer(new ServerBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 1, -4, 0));
+                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 1, -3, 0));
                 pipeline.addLast("objectDecoder", new AdmProtocolDecoder(AdmProtocol.this));
             }
         };

File: src/org/traccar/protocol/AdmProtocolDecoder.java
Patch:
@@ -16,7 +16,6 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.BitUtil;
@@ -26,9 +25,7 @@
 
 import java.net.SocketAddress;
 import java.nio.charset.Charset;
-import java.util.Calendar;
 import java.util.Date;
-import java.util.TimeZone;
 
 public class AdmProtocolDecoder extends BaseProtocolDecoder {
 

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -18,10 +18,8 @@
 import java.nio.ByteOrder;
 import java.nio.charset.Charset;
 import java.net.SocketAddress;
-import java.util.Calendar;
 import java.util.LinkedList;
 import java.util.List;
-import java.util.TimeZone;
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;

File: src/org/traccar/protocol/TopflytechProtocolDecoder.java
Patch:
@@ -16,9 +16,6 @@
 package org.traccar.protocol;
 
 import java.net.SocketAddress;
-import java.util.Calendar;
-import java.util.TimeZone;
-import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -43,15 +43,15 @@ public GatorProtocolDecoder(GatorProtocol protocol) {
     public static final int MSG_PICTURE_FRAME = 0x54;
     public static final int MSG_CAMERA_RESPONSE = 0x56;
     public static final int MSG_PICTURE_DATA = 0x57;
-    
+
     public static String decodeId(int b1, int b2, int b3, int b4) {
-        
+
         int d1 = 30 + ((b1 >> 7) << 3) + ((b2 >> 7) << 2) + ((b3 >> 7) << 1) + (b4 >> 7);
         int d2 = b1 & 0x7f;
         int d3 = b2 & 0x7f;
         int d4 = b3 & 0x7f;
         int d5 = b4 & 0x7f;
-        
+
         return String.format("%02d%02d%02d%02d%02d", d1, d2, d3, d4, d5);
     }
 

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -275,7 +275,7 @@ private Position parseFormatA1(ChannelBuffer buf) {
             position.set(Event.KEY_SATELLITES, satellites);
         }
 
-        // TODO: process other data
+        // other data
 
         return position;
     }
@@ -305,7 +305,7 @@ protected Object decode(
         short offset = buf.readUnsignedByte(); // dataOffset
         short packetCount = buf.readUnsignedByte();
         buf.readUnsignedByte(); // reserved
-        buf.readUnsignedByte(); // TODO: handle timezone
+        buf.readUnsignedByte(); // timezone
         buf.skipBytes(offset - 5);
 
         // Send response

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -13,6 +13,9 @@ public void testDecode() throws Exception {
 
         assertNull(decoder.decode(null, null,
                 "*GS16,351535058709775"));
+        
+        verify(decoder.decode(null, null,
+                "*GS16,351535059439208,103441131015,,GPS:A;8;N31.960122;E35.921652;27;99;847;1.33;2.41,GSM:1;4;416;3;AF0;9C73;-61;416;3;AF0;9C89;-68,OBD:04410C0DA403410D0B03411C010341057A037F011203411100$103453131015,,GPS:A;8;N31.959976;E35.922144;6;0;835;1.33;2.41,GSM:1;4;416;3;AF0;9C73;-67;416;3;AF0;9C89;-64;416;3;AF0;B389;-83,OBD:04410C0D8E03410D0B03411C010341057D037F011203411100$103503131015,,GPS:A;9;N31.959870;E35.922284;11;127;830;1.33;2.41,GSM:1;4;416;3;AF0;9C73;-67;416;3;AF0;9C89;-64;416;3;AF0;B389;-83,OBD:04410C0D8E03410D0B03411C010341057D037F011203411100$103513131015,,GPS:A;9;N31.959742;E35.922516;10;106;830;1.37;2.91,GSM:1;4;416;3;AF0;9C73;-67;416;3;AF0;9C89;-64;416;3;AF0;B389;-83,OBD:04410C0D1003410D0603411C010341057E037F011203411100$103553131015,,GPS:A;8;N31.959564;E35.923308;6;0;836;1.41;2.43,GSM:1;4;416;3;AF0;9C73;-65;416;3;AF0;B389;-71;416;3;AF0;9C89;-74,OBD:04410C0DAE03410D0403411C010341057C037F011203411100#"));
 
         verify(decoder.decode(null, null,
                 "*GS16,351535058709775,100356130215,,SYS:G79W;V1.06;V1.0.2,GPS:A;6;N24.802700;E46.616828;0;0;684;1.35,COT:60,ADC:4.31;0.10,DTT:20000;;0;0;0;1"));

File: src/org/traccar/database/QueryBuilder.java
Patch:
@@ -132,7 +132,8 @@ public static QueryBuilder create(DataSource dataSource, String query) throws SQ
         return new QueryBuilder(dataSource, query, false);
     }
 
-    public static QueryBuilder create(DataSource dataSource, String query, boolean returnGeneratedKeys) throws SQLException {
+    public static QueryBuilder create(
+            DataSource dataSource, String query, boolean returnGeneratedKeys) throws SQLException {
         return new QueryBuilder(dataSource, query, returnGeneratedKeys);
     }
 

File: src/org/traccar/protocol/Gps103ProtocolEncoder.java
Patch:
@@ -60,7 +60,6 @@ protected Object encodeCommand(Command command) {
             default:
                 Log.warning(new UnsupportedOperationException(command.getType()));
                 break;
-
         }
 
         return null;

File: src/org/traccar/protocol/GpsGateProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ protected Object decode(
             }
 
         } else if (sentence.startsWith("$FRVER,")) {
-            
+
             // Version check
             send(channel, "$FRVER,1,0,GpsGate Server 1.0");
 

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -62,7 +62,7 @@ protected Object decode(
         } else if (sentence.startsWith("[#")) {
 
             // TODO: EXIT Send response
-        
+
         } else if (hasDeviceId()) {
 
             Matcher parser = PATTERN.matcher(sentence);

File: src/org/traccar/protocol/TrackboxProtocolDecoder.java
Patch:
@@ -63,7 +63,7 @@ protected Object decode(
             if (identify(id, channel)) {
                 sendResponse(channel);
             }
-        
+
         } else {
 
             Matcher parser = PATTERN.matcher(sentence);

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.List;
 import java.util.Set;
 
-import javafx.geometry.Pos;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;

File: src/org/traccar/helper/BitUtil.java
Patch:
@@ -37,7 +37,7 @@ public static long range(long number, int index) {
     }
 
     public static long range(long number, int index, int length) {
-        return (number >> index) & ((1l << length) - 1);
+        return (number >> index) & ((1L << length) - 1);
     }
 
 }

File: src/org/traccar/helper/Checksum.java
Patch:
@@ -21,7 +21,7 @@
 
 public class Checksum {
 
-    private static final int CRC16_CCITT_TABLE_REVERSE[] = {
+    private static final int[] CRC16_CCITT_TABLE_REVERSE = {
         0x0000, 0x1189, 0x2312, 0x329B, 0x4624, 0x57AD, 0x6536, 0x74BF,
         0x8C48, 0x9DC1, 0xAF5A, 0xBED3, 0xCA6C, 0xDBE5, 0xE97E, 0xF8F7,
         0x1081, 0x0108, 0x3393, 0x221A, 0x56A5, 0x472C, 0x75B7, 0x643E,
@@ -56,7 +56,7 @@ public class Checksum {
         0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
     };
 
-    private static final int CRC16_CCITT_TABLE[] = {
+    private static final int[] CRC16_CCITT_TABLE = {
         0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50A5, 0x60C6, 0x70E7,
         0x8108, 0x9129, 0xA14A, 0xB16B, 0xC18C, 0xD1AD, 0xE1CE, 0xF1EF,
         0x1231, 0x0210, 0x3273, 0x2252, 0x52B5, 0x4294, 0x72F7, 0x62D6,
@@ -154,7 +154,7 @@ public static int xor(ByteBuffer buf) {
 
     public static String nmea(String msg) {
         int checksum = 0;
-        byte bytes[] = msg.getBytes(Charset.defaultCharset());
+        byte[] bytes = msg.getBytes(Charset.defaultCharset());
         for (int i = 1; i < msg.length(); i++) {
             checksum ^= bytes[i];
         }

File: src/org/traccar/protocol/IntellitracFrameDecoder.java
Patch:
@@ -25,7 +25,7 @@ public class IntellitracFrameDecoder extends DelimiterBasedFrameDecoder {
 
     private static final int MESSAGE_MINIMUM_LENGTH = 0;
 
-    private static final byte delimiter[] = {(byte) '\r', (byte) '\n'};
+    private static final byte[] delimiter = {(byte) '\r', (byte) '\n'};
 
     public IntellitracFrameDecoder(int maxFrameLength) {
         super(maxFrameLength, ChannelBuffers.wrappedBuffer(delimiter));

File: src/org/traccar/protocol/SkypatrolProtocolDecoder.java
Patch:
@@ -39,9 +39,9 @@ public SkypatrolProtocolDecoder(SkypatrolProtocol protocol) {
 
     private static double convertCoordinate(long coordinate) {
         int sign = 1;
-        if (coordinate > 0x7fffffffl) {
+        if (coordinate > 0x7fffffffL) {
             sign = -1;
-            coordinate = 0xffffffffl - coordinate;
+            coordinate = 0xffffffffL - coordinate;
         }
 
         long degrees = coordinate / 1000000;

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -77,8 +77,8 @@ protected Object decode(
         position.setDeviceId(getDeviceId());
 
         // Time
-        long seconds = buf.readUnsignedInt() & 0x7fffffffl;
-        seconds += 946684800l; // 2000-01-01 00:00
+        long seconds = buf.readUnsignedInt() & 0x7fffffffL;
+        seconds += 946684800L; // 2000-01-01 00:00
         seconds -= timeZone;
         position.setTime(new Date(seconds * 1000));
 

File: src/org/traccar/geocode/BingMapsReverseGeocoder.java
Patch:
@@ -32,7 +32,8 @@ public BingMapsReverseGeocoder(String url, String key, int cacheSize) {
     public Address parseAddress(JsonObject json) {
         JsonArray result = json.getJsonArray("resourceSets");
         if (result != null) {
-            JsonObject location = result.getJsonObject(0).getJsonArray("resources").getJsonObject(0).getJsonObject("address");
+            JsonObject location =
+                    result.getJsonObject(0).getJsonArray("resources").getJsonObject(0).getJsonObject("address");
             if (location != null) {
                 Address address = new Address();
                 if (location.containsKey("addressLine")) {

File: src/org/traccar/geocode/GoogleReverseGeocoder.java
Patch:
@@ -67,6 +67,8 @@ public Address parseAddress(JsonObject json) {
                         case "postal_code":
                             address.setPostcode(value);
                             break typesLoop;
+                        default:
+                            break;
                     }
                 }
             }

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -61,7 +61,7 @@ private void sendResponse(Channel channel, SocketAddress remoteAddress, int type
             channel.write(response, remoteAddress);
         }
     }
-    
+
     private Position decodePosition(int type, ChannelBuffer buf) {
 
         Position position = new Position();

File: src/org/traccar/protocol/Gps103ProtocolEncoder.java
Patch:
@@ -47,7 +47,8 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_POSITION_SINGLE:
                 return formatCommand(command, "**,imei:{%s},B", Command.KEY_UNIQUE_ID);
             case Command.TYPE_POSITION_PERIODIC:
-                return formatCommand(command, "**,imei:{%s},C,{%s}", this, Command.KEY_UNIQUE_ID, Command.KEY_FREQUENCY);
+                return formatCommand(
+                        command, "**,imei:{%s},C,{%s}", this, Command.KEY_UNIQUE_ID, Command.KEY_FREQUENCY);
             case Command.TYPE_ENGINE_STOP:
                 return formatCommand(command, "**,imei:{%s},J", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:

File: src/org/traccar/protocol/MeitrackFrameDecoder.java
Patch:
@@ -36,7 +36,8 @@ protected Object decode(
 
         Integer index = ChannelBufferTools.find(buf, buf.readerIndex(), buf.writerIndex(), ",");
         if (index != null) {
-            int length = index - buf.readerIndex() + Integer.parseInt(buf.toString(buf.readerIndex() + 3, index - buf.readerIndex() - 3, Charset.defaultCharset()));
+            int length = index - buf.readerIndex() + Integer.parseInt(
+                    buf.toString(buf.readerIndex() + 3, index - buf.readerIndex() - 3, Charset.defaultCharset()));
             if (buf.readableBytes() >= length) {
                 return buf.readBytes(length);
             }

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -138,7 +138,7 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
                 position.set(Event.KEY_SATELLITES, satellitesNumber);
 
                 // Validity
-                position.setValid(satellitesNumber >= 3); // TODO: probably wrong
+                position.setValid(satellitesNumber >= 3);
 
                 // Cell signal
                 position.set(Event.KEY_GSM, buf.readUnsignedByte());

File: src/org/traccar/protocol/TramigoFrameDecoder.java
Patch:
@@ -41,7 +41,7 @@ protected Object decode(
         // Swap byte order for legacy protocol
         if (buf.getUnsignedByte(buf.readerIndex()) == 0x80) {
             int length = buf.readableBytes();
-            byte bytes[] = new byte[length];
+            byte[] bytes = new byte[length];
             buf.getBytes(buf.readerIndex(), bytes);
 
             ChannelBuffer result = (ChannelBuffer) super.decode(

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public class UlbotechProtocolDecoderTest extends ProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
+
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
+                "f8010103596580419465449da89d16010efe5580fe0923d82100140129005903040242000004040001a7f10506037818be220e070e31057b410c1324310d144131fa3208040020b1418297f8"))));
         
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "f8010103596580419465449da8564e010efe55a1800923d04b0000000000710304000000000404000178d2050603571876220ec3caf8"))));

File: src/org/traccar/model/MiscFormatter.java
Patch:
@@ -91,7 +91,8 @@ public static Map<String, Object> fromJson(JsonObject json) {
         Map<String, Object> attributes = new LinkedHashMap<>();
 
         for (Map.Entry<String, JsonValue> entry : json.entrySet()) {
-            switch (entry.getValue().getValueType()) {
+            JsonValue.ValueType type = entry.getValue().getValueType();
+            switch (type) {
                 case STRING:
                     attributes.put(entry.getKey(), ((JsonString) entry.getValue()).getString());
                     break;
@@ -110,7 +111,7 @@ public static Map<String, Object> fromJson(JsonObject json) {
                     attributes.put(entry.getKey(), false);
                     break;
                 default:
-                    Log.warning(new IllegalArgumentException());
+                    Log.warning(new IllegalArgumentException(type.name()));
                     break;
             }
         }

File: src/org/traccar/protocol/CellocatorFrameDecoder.java
Patch:
@@ -39,7 +39,8 @@ protected Object decode(
 
         // Size depending on message type
         int length = 0;
-        switch (buf.getUnsignedByte(4)) {
+        int type = buf.getUnsignedByte(4);
+        switch (type) {
             case CellocatorProtocolDecoder.MSG_CLIENT_STATUS:
                 length = 70;
                 break;
@@ -58,7 +59,7 @@ protected Object decode(
                 length = 15 + buf.getUnsignedByte(13);
                 break;
             default:
-                Log.warning(new UnsupportedOperationException());
+                Log.warning(new UnsupportedOperationException(String.valueOf(type)));
                 break;
         }
 

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -85,6 +85,9 @@ public float readFloat(ChannelBuffer buf) {
                 case 3:
                     previousFloat = (previousFloat & 0xff000000) + ((buf.readUnsignedMedium() & 0x3fffff) << 2);
                     break;
+                default:
+                    Log.warning(new IllegalArgumentException());
+                    break;
             }
             return Float.intBitsToFloat(previousFloat);
         }

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -39,9 +39,9 @@ public AutoFonProtocolDecoder(AutoFonProtocol protocol) {
     public static final int MSG_HISTORY = 0x12;
 
     private static double convertCoordinate(int raw) {
-        double result = raw / 1000000;
-        result += (raw % 1000000) / 600000.0;
-        return result;
+        int degrees = raw / 1000000;
+        double minutes = (raw % 1000000) / 10000.0;
+        return degrees + minutes / 60;
     }
 
     private Position decodePosition(ChannelBuffer buf, boolean history) {

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -252,7 +252,8 @@ private List<Position> decodeBinaryMessage(Channel channel, ChannelBuffer buf) {
             command.append(imei).append(",CCC,").append(positions.size()).append("*");
             int checksum = 0;
             for (int i = 0; i < command.length(); i += 1) checksum += command.charAt(i);
-            command.append(String.format("%02x\r\n", checksum & 0xff).toUpperCase());
+            command.append(String.format("%02x", checksum & 0xff).toUpperCase());
+            command.append("\r\n");
             channel.write(command.toString());
         }
 

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -48,9 +48,9 @@ private static void sendResponse(Channel channel, ChannelBuffer buf) {
         }
     }
 
-    private static double convertCoordinate(int value) {
-        double degrees = value / 1000000;
-        double minutes = (value % 1000000) / 10000.0;
+    private static double convertCoordinate(int raw) {
+        int degrees = raw / 1000000;
+        double minutes = (raw % 1000000) / 10000.0;
         return degrees + minutes / 60;
     }
 

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -125,13 +125,13 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
                 position.setLongitude(buf.readInt() * 180.0 / 0x7FFFFFFF);
 
                 // Speed
-                position.setSpeed(buf.readUnsignedInt() / 100);
+                position.setSpeed(buf.readUnsignedInt() / 100.0);
 
                 // Course
-                position.setCourse(buf.readUnsignedShort() / 100);
+                position.setCourse(buf.readUnsignedShort() / 100.0);
 
                 // Altitude
-                position.setAltitude(buf.readUnsignedShort() / 100);
+                position.setAltitude(buf.readUnsignedShort() / 100.0);
 
                 // Satellites
                 int satellitesNumber = buf.readUnsignedByte();

File: src/org/traccar/protocol/SkypatrolProtocolDecoder.java
Patch:
@@ -44,10 +44,10 @@ private static double convertCoordinate(long coordinate) {
             coordinate = 0xffffffffl - coordinate;
         }
 
-        double degrees = coordinate / 1000000;
-        degrees += (coordinate % 1000000) / 600000.0;
+        long degrees = coordinate / 1000000;
+        double minutes = (coordinate % 1000000) / 10000.0;
 
-        return sign * degrees;
+        return sign * (degrees + minutes / 60);
     }
 
     @Override

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -156,7 +156,7 @@ protected Object decode(
                             }
                         }
                         for (int i : temps) {
-                            position.set(Event.PREFIX_TEMP + n, buf.readUnsignedByte());
+                            position.set(Event.PREFIX_TEMP + i, buf.readUnsignedByte());
                         }
                         break;
                     case 28:

File: src/org/traccar/model/Extensible.java
Patch:
@@ -19,7 +19,7 @@
 import java.util.Map;
 
 public abstract class Extensible {
-    
+
     private Map<String, Object> attributes = new LinkedHashMap<>();
 
     public Map<String, Object> getAttributes() {

File: src/org/traccar/protocol/Ev603ProtocolDecoder.java
Patch:
@@ -17,7 +17,7 @@
 package org.traccar.protocol;
 
 import java.net.SocketAddress;
-import java.util.Calendar; 
+import java.util.Calendar;
 import java.util.TimeZone;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -231,9 +231,9 @@ protected Object decode(
             position.set(Event.KEY_INDEX, index);
             sendResponse(channel, type, index);
             return position;
-        }
 
-        else {
+        } else {
+
             buf.skipBytes(dataLength);
             if (type != MSG_COMMAND_0 && type != MSG_COMMAND_1 && type != MSG_COMMAND_2) {
                 sendResponse(channel, type, buf.readUnsignedShort());

File: src/org/traccar/protocol/NoranProtocolDecoder.java
Patch:
@@ -66,9 +66,8 @@ protected Object decode(
             response.writeBytes(ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN, "\r\n", Charset.defaultCharset()));
 
             channel.write(response, remoteAddress);
-        }
 
-        else if (type == MSG_UPLOAD_POSITION ||
+        } else if (type == MSG_UPLOAD_POSITION ||
                  type == MSG_UPLOAD_POSITION_NEW ||
                  type == MSG_CONTROL_RESPONSE ||
                  type == MSG_ALARM) {

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -17,7 +17,7 @@
 package org.traccar.protocol;
 
 import java.net.SocketAddress;
-import java.util.Calendar; 
+import java.util.Calendar;
 import java.util.TimeZone;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;

File: src/org/traccar/DetectorHandler.java
Patch:
@@ -104,7 +104,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {
                     if (!server.getProtocol().equals("detector")) {
                         checkPipeline(server.getProtocol(), server.getPipelineFactory().getPipeline(), buf);
                     }
-                } catch(Exception error) {
+                } catch (Exception error) {
                     if (showFailed) {
                         Log.info("Protocol " + server.getProtocol() + " error");
                     }

File: src/org/traccar/ServerManager.java
Patch:
@@ -43,7 +43,7 @@ public ServerManager() throws Exception {
             String jarFileName = URLDecoder.decode(packageUrl.getFile(), "UTF-8");
             try (JarFile jf = new JarFile(jarFileName.substring(5, jarFileName.indexOf("!")))) {
                 Enumeration<JarEntry> jarEntries = jf.entries();
-                while(jarEntries.hasMoreElements()){
+                while (jarEntries.hasMoreElements()) {
                     String entryName = jarEntries.nextElement().getName();
                     if (entryName.startsWith(packagePath) && entryName.length() > packagePath.length() + 5) {
                         names.add(entryName.substring(packagePath.length() + 1, entryName.lastIndexOf('.')));

File: src/org/traccar/protocol/AplicomFrameDecoder.java
Patch:
@@ -20,7 +20,7 @@
 import org.jboss.netty.channel.ChannelHandlerContext;
 import org.jboss.netty.handler.codec.frame.FrameDecoder;
 
-public class AplicomFrameDecoder extends FrameDecoder{
+public class AplicomFrameDecoder extends FrameDecoder {
     
     @Override
     protected Object decode(

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -65,7 +65,7 @@ public Gl200ProtocolDecoder(Gl200Protocol protocol) {
             "(\\p{XDigit}*)," +                 // DTCs
             "(\\d{1,3})," +                     // Throttle
             "\\d{1,3}," +                       // Engine load
-            "(\\d{1,3})?,"+                     // Fuel level
+            "(\\d{1,3})?," +                    // Fuel level
             "(\\d+)|.*)," +                     // Odometer
 
             "(\\d*)," +                         // GPS accuracy

File: src/org/traccar/protocol/GlobalSatProtocolDecoder.java
Patch:
@@ -85,7 +85,7 @@ private Position decodeOriginal(Channel channel, String sentence) {
         for (int formatIndex = 0, valueIndex = 1; formatIndex < format.length() && valueIndex < values.length; formatIndex++) {
             String value = values[valueIndex];
 
-            switch(format.charAt(formatIndex)) {
+            switch (format.charAt(formatIndex)) {
                 case 'S':
                     if (!identify(value, channel)) {
                         return null;

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -92,7 +92,7 @@ protected Object decode(
                 // Location
                 position.setLatitude(convertCoordinate(buf.readInt()));
                 position.setLongitude(convertCoordinate(buf.readInt()));
-                position.setAltitude(buf.readShort()/ 10.0);
+                position.setAltitude(buf.readShort() / 10.0);
                 position.setCourse(buf.readUnsignedShort());
                 position.setSpeed(buf.readUnsignedShort() * 0.0539957);
 

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -183,7 +183,7 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
 
                 // Send response for alarm message
                 if (type == MSG_ALARM) {
-                    byte[] response = {(byte)0xC9,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
+                    byte[] response = {(byte) 0xC9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
                     channel.write(ChannelBuffers.wrappedBuffer(response));
 
                     position.set(Event.KEY_ALARM, true);

File: src/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -114,7 +114,7 @@ protected Object decode(
 
             // Acknowledgement
             if (channel != null) {
-                byte[] response = {0x00, 0x02, 0x64, 0x01, 0x13, (byte)0xbc};
+                byte[] response = {0x00, 0x02, 0x64, 0x01, 0x13, (byte) 0xbc};
                 channel.write(ChannelBuffers.wrappedBuffer(response));
             }
 

File: src/org/traccar/protocol/Stl060FrameDecoder.java
Patch:
@@ -16,10 +16,8 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
-import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.helper.ChannelBufferTools;
 

File: src/org/traccar/protocol/TotemProtocolEncoder.java
Patch:
@@ -19,7 +19,7 @@
 import org.traccar.StringProtocolEncoder;
 import org.traccar.model.Command;
 
-public class TotemProtocolEncoder extends StringProtocolEncoder{
+public class TotemProtocolEncoder extends StringProtocolEncoder {
 
     @Override
     protected Object encodeCommand(Command command) {

File: src/org/traccar/web/JsonConverter.java
Patch:
@@ -97,7 +97,7 @@ public static <T> JsonObject objectToJson(T object) {
         Method[] methods = object.getClass().getMethods();
 
         for (Method method : methods) {
-            if(method.isAnnotationPresent(JsonIgnore.class)) {
+            if (method.isAnnotationPresent(JsonIgnore.class)) {
                 continue;
             }
             if (method.getName().startsWith("get") && method.getParameterTypes().length == 0) {

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -40,7 +40,7 @@ public abstract class BasePipelineFactory implements ChannelPipelineFactory {
     private DistanceHandler distanceHandler;
     private ReverseGeocoderHandler reverseGeocoderHandler;
 
-    protected class OpenChannelHandler extends SimpleChannelHandler {
+    private static class OpenChannelHandler extends SimpleChannelHandler {
 
         private final TrackerServer server;
 
@@ -54,7 +54,7 @@ public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) {
         }
     }
 
-    protected class StandardLoggingHandler extends LoggingHandler {
+    private static class StandardLoggingHandler extends LoggingHandler {
 
         @Override
         public void log(ChannelEvent e) {

File: src/org/traccar/Context.java
Patch:
@@ -117,9 +117,6 @@ public static void init(String[] arguments) throws Exception {
 
             int cacheSize = config.getInteger("geocoder.cacheSize");
             switch (type) {
-                case "google":
-                    reverseGeocoder = new GoogleReverseGeocoder(cacheSize);
-                    break;
                 case "nominatim":
                     reverseGeocoder = new NominatimReverseGeocoder(url, cacheSize);
                     break;
@@ -138,6 +135,9 @@ public static void init(String[] arguments) throws Exception {
                 case "factual":
                     reverseGeocoder = new FactualReverseGeocoder(url, key, cacheSize);
                     break;
+                default:
+                    reverseGeocoder = new GoogleReverseGeocoder(cacheSize);
+                    break;
             }
         }
 

File: src/org/traccar/database/QueryBuilder.java
Patch:
@@ -41,7 +41,7 @@
 import org.traccar.model.Factory;
 import org.traccar.model.MiscFormatter;
 
-public class QueryBuilder {
+public final class QueryBuilder {
 
     private final Map<String, List<Integer>> indexMap = new HashMap<>();
     private Connection connection;

File: src/org/traccar/helper/ChannelBufferTools.java
Patch:
@@ -71,7 +71,7 @@ public static int readHexInteger(ChannelBuffer buf, int length) {
             result += b & 0x0f;
         }
 
-        if (length % 2 == 1) {
+        if (length % 2 != 0) {
             int b = buf.getUnsignedByte(buf.readerIndex());
             result *= 10;
             result += b >>> 4;
@@ -92,7 +92,7 @@ public static String readHexString(ChannelBuffer buf, int length) {
             formatter.format("%02x", buf.readByte());
         }
 
-        if (length % 2 == 1) {
+        if (length % 2 != 0) {
             int b = buf.getUnsignedByte(buf.readerIndex());
             formatter.format("%01x", b >>> 4);
         }

File: src/org/traccar/model/User.java
Patch:
@@ -155,8 +155,8 @@ public void setPassword(String password) {
         this.password = password;
         if (password != null && !password.isEmpty()) {
             Hashing.HashingResult hashingResult = Hashing.createHash(password);
-            hashedPassword = hashingResult.hash;
-            salt = hashingResult.salt;
+            hashedPassword = hashingResult.getHash();
+            salt = hashingResult.getSalt();
         }
     }
 

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -129,4 +129,5 @@ private byte crc(byte[] bytes, int offset, int len) {
         }
         return GPRS_CRC;
     }
+
 }

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -129,7 +129,7 @@ protected Object decode(
 
             // Send response
             if (channel != null) {
-                channel.write(ChannelBuffers.wrappedBuffer(new byte[] { buf.readByte() }));
+                channel.write(ChannelBuffers.wrappedBuffer(new byte[] {buf.readByte()}));
             }
 
         } else if (type == MSG_LOCATION) {

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -101,7 +101,6 @@ protected Object decode(
             // GPS length and Satellites count
             int gpsLength = buf.readUnsignedByte();
             position.set(Event.KEY_SATELLITES, gpsLength & 0xf);
-            gpsLength >>= 4;
 
             //Skip Satellite numbers
             buf.skipBytes(1);

File: src/org/traccar/protocol/CellocatorFrameDecoder.java
Patch:
@@ -38,8 +38,7 @@ protected Object decode(
 
         // Size depending on message type
         int length = 0;
-        switch (buf.getUnsignedByte(4))
-        {
+        switch (buf.getUnsignedByte(4)) {
             case CellocatorProtocolDecoder.MSG_CLIENT_STATUS:
                 length = 70;
                 break;

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -196,7 +196,7 @@ protected Object decode(
                 position.set(Event.KEY_MCC, buf.readUnsignedShort());
                 position.set(Event.KEY_MNC, buf.readUnsignedByte());
                 position.set(Event.KEY_LAC, buf.readUnsignedShort());
-                position.set(Event.KEY_CELL, buf.readUnsignedShort() << 8 + buf.readUnsignedByte());
+                position.set(Event.KEY_CELL, (buf.readUnsignedShort() << 8) + buf.readUnsignedByte());
                 if (lbsLength > 0) {
                     buf.skipBytes(lbsLength - 9);
                 }

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -21,6 +21,8 @@
 import org.traccar.helper.Checksum;
 import org.traccar.model.Command;
 
+import java.nio.charset.Charset;
+
 public class Gt06ProtocolEncoder extends BaseProtocolEncoder {
 
     private ChannelBuffer encodeContent(String content) {
@@ -36,7 +38,7 @@ private ChannelBuffer encodeContent(String content) {
 
         buf.writeByte(4 + content.length()); // command length
         buf.writeInt(0);
-        buf.writeBytes(content.getBytes()); // command
+        buf.writeBytes(content.getBytes(Charset.defaultCharset())); // command
 
         buf.writeShort(0); // message index
 

File: src/org/traccar/protocol/MeitrackFrameDecoder.java
Patch:
@@ -35,8 +35,7 @@ protected Object decode(
         }
 
         Integer index = ChannelBufferTools.find(buf, buf.readerIndex(), buf.writerIndex(), ",");
-        if (index != null)
-        {
+        if (index != null) {
             int length = index - buf.readerIndex() + Integer.parseInt(buf.toString(buf.readerIndex() + 3, index - buf.readerIndex() - 3, Charset.defaultCharset()));
             if (buf.readableBytes() >= length) {
                 return buf.readBytes(length);

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -161,6 +161,9 @@ private Position decodeRegularMessage(Channel channel, ChannelBuffer buf) {
                 case 37:
                     position.set(Event.KEY_RFID, data);
                     break;
+                default:
+                    position.set("event-data", data);
+                    break;
             }
         }
 

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -72,8 +72,7 @@ private static class FloatReader {
         private int previousFloat;
 
         public float readFloat(ChannelBuffer buf) {
-            switch (buf.getUnsignedByte(buf.readerIndex()) >> 6)
-            {
+            switch (buf.getUnsignedByte(buf.readerIndex()) >> 6) {
                 case 0:
                     previousFloat = buf.readInt() << 2;
                     break;

File: src/org/traccar/protocol/NavigilProtocolDecoder.java
Patch:
@@ -90,7 +90,7 @@ private Position parseUnitReport(ChannelBuffer buf, int sequenceNumber) {
 
         position.setLatitude(buf.readInt() * 0.0000001);
         position.setLongitude(buf.readInt() * 0.0000001);
-        position.setAltitude( buf.readUnsignedShort());
+        position.setAltitude(buf.readUnsignedShort());
 
         buf.readUnsignedShort(); // satellites in fix
         buf.readUnsignedShort(); // satellites in track

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -58,7 +58,7 @@ private static boolean isFormat(int type, int... types) {
         return false;
     }
 
-    private class ParseResult {
+    private static class ParseResult {
         private final long id;
         private final Position position;
 

File: src/org/traccar/protocol/NoranProtocolDecoder.java
Patch:
@@ -35,8 +35,6 @@ public NoranProtocolDecoder(NoranProtocol protocol) {
         super(protocol);
     }
 
-    private static final DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
-
     public static final int MSG_UPLOAD_POSITION = 0x0008;
     public static final int MSG_UPLOAD_POSITION_NEW = 0x0032;
     public static final int MSG_CONTROL_RESPONSE = 0x8009;
@@ -133,6 +131,7 @@ else if (type == MSG_UPLOAD_POSITION ||
 
             // Time
             if (newFormat) {
+                DateFormat dateFormat = new SimpleDateFormat("yy-MM-dd HH:mm:ss");
                 position.setTime(dateFormat.parse(buf.readBytes(17).toString(Charset.defaultCharset())));
                 buf.readByte();
             }

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -115,7 +115,7 @@ else if (sentence.startsWith("$GPFID")) {
         }
 
         // Identification
-        else if (Character.isDigit(sentence.charAt(0)) & sentence.length() == 15) {
+        else if (Character.isDigit(sentence.charAt(0)) && sentence.length() == 15) {
             identify(sentence, channel);
         }
 

File: src/org/traccar/protocol/TopflytechProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@ public TopflytechProtocolDecoder(TopflytechProtocol protocol) {
         super(protocol);
     }
 
-    static private final Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "\\(" +
             "(\\d+)" +                     // IMEI
             ".*" +

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -152,7 +152,7 @@ private Position decodePosition(String substring) {
         if (params != null) {
             String[] values = params.split(",");
             for (String param : values) {
-                Matcher paramParser = Pattern.compile( "(.*):[1-3]:(.*)").matcher(param);
+                Matcher paramParser = Pattern.compile("(.*):[1-3]:(.*)").matcher(param);
                 if (paramParser.matches()) {
                     position.set(paramParser.group(1).toLowerCase(), paramParser.group(2));
                 }

File: src/org/traccar/protocol/YwtProtocolDecoder.java
Patch:
@@ -136,7 +136,7 @@ protected Object decode(
         position.set(Event.KEY_STATUS, parser.group(index++));
 
         // Send response
-        if ((type.equals("KP") || type.equals("EP") || type.equals("EP")) && channel != null) {
+        if ((type.equals("KP") || type.equals("EP")) && channel != null) {
             channel.write("%AT+" + type + "=" + reportId + "\r\n");
         }
 

File: src/org/traccar/web/AsyncServlet.java
Patch:
@@ -48,7 +48,7 @@ protected boolean handle(String command, HttpServletRequest req, HttpServletResp
         return true;
     }
 
-    public class AsyncSession {
+    public static class AsyncSession {
 
         private static final boolean DEBUG_ASYNC = false;
 

File: src/org/traccar/web/PositionServlet.java
Patch:
@@ -56,7 +56,7 @@ private void devices(HttpServletRequest req, HttpServletResponse resp) throws Ex
         long userId = getUserId(req);
         Map<String, Object> positions = new HashMap<>();
 
-        for(String deviceIdString : req.getParameterValues("devicesId")) {
+        for (String deviceIdString : req.getParameterValues("devicesId")) {
             Long deviceId = Long.parseLong(deviceIdString);
 
             Context.getPermissionsManager().checkDevice(userId, deviceId);

File: src/org/traccar/web/WebServer.java
Patch:
@@ -76,9 +76,9 @@ private void initWebApp() {
         ResourceHandler resourceHandler = new ResourceHandler();
         resourceHandler.setResourceBase(config.getString("web.path"));
         if (config.getBoolean("web.debug")) {
-            resourceHandler.setWelcomeFiles(new String[] { "debug.html" });
+            resourceHandler.setWelcomeFiles(new String[] {"debug.html"});
         } else {
-            resourceHandler.setWelcomeFiles(new String[] { "release.html", "index.html" });
+            resourceHandler.setWelcomeFiles(new String[] {"release.html", "index.html"});
         }
         handlers.addHandler(resourceHandler);
     }

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -64,7 +64,7 @@ public void log(ChannelEvent e) {
 
                 msg.append("[").append(String.format("%08X", e.getChannel().getId())).append(": ");
                 msg.append(((InetSocketAddress) e.getChannel().getLocalAddress()).getPort());
-                msg.append((e instanceof DownstreamMessageEvent) ? " > " : " < ");
+                msg.append(e instanceof DownstreamMessageEvent ? " > " : " < ");
 
                 msg.append(((InetSocketAddress) event.getRemoteAddress()).getAddress().getHostAddress()).append("]");
 

File: src/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@ public String getProtocolName() {
     private long deviceId;
 
     public boolean hasDeviceId() {
-        return (deviceId != 0);
+        return deviceId != 0;
     }
 
     public long getDeviceId() {

File: src/org/traccar/FilterHandler.java
Patch:
@@ -88,7 +88,7 @@ private boolean filterDuplicate(Position position) {
     }
 
     private boolean filterFuture(Position position) {
-        return filterFuture && (position.getFixTime().getTime() > System.currentTimeMillis() + FILTER_FUTURE_LIMIT);
+        return filterFuture && position.getFixTime().getTime() > System.currentTimeMillis() + FILTER_FUTURE_LIMIT;
     }
 
     private boolean filterDistance(Position position) {

File: src/org/traccar/database/DataManager.java
Patch:
@@ -118,7 +118,7 @@ public Device getDeviceById(long id) {
     @Override
     public Device getDeviceByUniqueId(String uniqueId) throws SQLException {
 
-        if ((System.currentTimeMillis() - devicesLastUpdate > devicesRefreshDelay) || !devicesByUniqueId.containsKey(uniqueId)) {
+        if (System.currentTimeMillis() - devicesLastUpdate > devicesRefreshDelay || !devicesByUniqueId.containsKey(uniqueId)) {
 
             devicesById.clear();
             devicesByUniqueId.clear();

File: src/org/traccar/geocode/BingMapsReverseGeocoder.java
Patch:
@@ -29,7 +29,7 @@ public BingMapsReverseGeocoder(String url, String key, int cacheSize) {
     }
 
     @Override
-    protected Address parseAddress(JsonObject json) {
+    public Address parseAddress(JsonObject json) {
         JsonArray result = json.getJsonArray("resourceSets");
         if (result != null) {
             JsonObject location = result.getJsonObject(0).getJsonArray("resources").getJsonObject(0).getJsonObject("address");

File: src/org/traccar/geocode/FactualReverseGeocoder.java
Patch:
@@ -28,7 +28,7 @@ public FactualReverseGeocoder(String url, String key, int cacheSize) {
     }
 
     @Override
-    protected Address parseAddress(JsonObject json) {
+    public Address parseAddress(JsonObject json) {
         JsonObject result = json.getJsonObject("response").getJsonObject("data");
         if (result != null) {
                 Address address = new Address();

File: src/org/traccar/geocode/GisgraphyReverseGeocoder.java
Patch:
@@ -28,7 +28,7 @@ public GisgraphyReverseGeocoder(String url, int cacheSize) {
     }
 
     @Override
-    protected Address parseAddress(JsonObject json) {
+    public Address parseAddress(JsonObject json) {
         Address address = new Address();
 
         JsonObject result = json.getJsonArray("result").getJsonObject(0);

File: src/org/traccar/geocode/MapQuestReverseGeocoder.java
Patch:
@@ -29,7 +29,7 @@ public MapQuestReverseGeocoder(String url, String key, int cacheSize) {
     }
 
     @Override
-    protected Address parseAddress(JsonObject json) {
+    public Address parseAddress(JsonObject json) {
         JsonArray result = json.getJsonArray("results");
         if (result != null) {
             JsonArray locations = result.getJsonObject(0).getJsonArray("locations");

File: src/org/traccar/geocode/NominatimReverseGeocoder.java
Patch:
@@ -28,7 +28,7 @@ public NominatimReverseGeocoder(String url, int cacheSize) {
     }
 
     @Override
-    protected Address parseAddress(JsonObject json) {
+    public Address parseAddress(JsonObject json) {
         JsonObject result = json.getJsonObject("address");
 
         if (result != null) {

File: src/org/traccar/geocode/OpenCageReverseGeocoder.java
Patch:
@@ -29,7 +29,7 @@ public OpenCageReverseGeocoder(String url, String key, int cacheSize) {
     }
 
     @Override
-    protected Address parseAddress(JsonObject json) {
+    public Address parseAddress(JsonObject json) {
         JsonArray result = json.getJsonArray("results");
         if (result != null) {
             JsonObject location = result.getJsonObject(0).getJsonObject("components");

File: src/org/traccar/geocode/ReverseGeocoder.java
Patch:
@@ -17,7 +17,7 @@
 
 public interface ReverseGeocoder {
 
-    public interface ReverseGeocoderCallback {
+    interface ReverseGeocoderCallback {
 
         void onResult(String address);
 

File: src/org/traccar/helper/BitUtil.java
Patch:
@@ -25,15 +25,15 @@ public static boolean check(long number, int index) {
     }
 
     public static int range(int number, int index) {
-        return (number >> index);
+        return number >> index;
     }
 
     public static int range(int number, int index, int length) {
         return (number >> index) & ((1 << length) - 1);
     }
 
     public static long range(long number, int index) {
-        return (number >> index);
+        return number >> index;
     }
 
     public static long range(long number, int index, int length) {

File: src/org/traccar/helper/Checksum.java
Patch:
@@ -168,7 +168,7 @@ public static long luhn(long imei) {
         for (int i = 0; remain != 0; i++) {
             long digit = remain % 10;
 
-            if ((i % 2) == 0) {
+            if (i % 2 == 0) {
                 digit *= 2;
                 if (digit >= 10) {
                     digit = 1 + (digit % 10);

File: src/org/traccar/helper/PatternUtil.java
Patch:
@@ -31,7 +31,8 @@ public static String checkPattern(String pattern, String input) {
                 if (matcher.matches()) {
                     match = pattern.substring(0, i);
                 }
-            } catch (PatternSyntaxException e) {
+            } catch (PatternSyntaxException error) {
+                Log.warning(error);
             }
         }
 

File: src/org/traccar/protocol/ApelProtocolDecoder.java
Patch:
@@ -109,7 +109,7 @@ protected Object decode(
         }
 
         if (type == MSG_TRACKER_ID_EXT) {
-            long id = buf.readUnsignedInt();
+            buf.readUnsignedInt(); // id
             int length = buf.readUnsignedShort();
             buf.skipBytes(length);
             length = buf.readUnsignedShort();

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -44,9 +44,9 @@ public CalAmpProtocolDecoder(CalAmpProtocol protocol) {
     public static final int MSG_MINI_EVENT_REPORT = 10;
     public static final int MSG_MINI_USER_DATA = 11;
 
-    private static final int SERVICE_UNACKNOWLEDGED = 0;
-    private static final int SERVICE_ACKNOWLEDGED = 1;
-    private static final int SERVICE_RESPONSE = 2;
+    public static final int SERVICE_UNACKNOWLEDGED = 0;
+    public static final int SERVICE_ACKNOWLEDGED = 1;
+    public static final int SERVICE_RESPONSE = 2;
 
     private void sendResponse(Channel channel, SocketAddress remoteAddress, int type, int index, int result) {
         if (channel != null) {

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -50,7 +50,7 @@ private Position decodeNormalMessage(ChannelBuffer buf, Channel channel) {
 
         // Protocol and type
         int version = ChannelBufferTools.readHexInteger(buf, 1);
-        int type = buf.readUnsignedByte() & 0xf;
+        buf.readUnsignedByte(); // type
 
         buf.readBytes(2); // length
 

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -34,6 +34,7 @@
 import org.traccar.Protocol;
 import org.traccar.helper.BitUtil;
 import org.traccar.helper.ChannelBufferTools;
+import org.traccar.helper.Log;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
 
@@ -195,6 +196,7 @@ private List<Position> parseFormatA(ChannelBuffer buf) {
                 positions.add(position);
             }
         } catch (IndexOutOfBoundsException error) {
+            Log.warning(error);
         }
 
         return positions;

File: src/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -20,7 +20,6 @@
 import java.util.Date;
 import java.util.TimeZone;
 import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.BitUtil;
@@ -100,7 +99,7 @@ protected Object decode(
 
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
 
-            int inputMask = buf.readUnsignedByte();
+            buf.readUnsignedByte(); // input mask
 
             if (BitUtil.check(infoGroups, 0)) {
                 buf.skipBytes(8); // waypoints

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -173,7 +173,7 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
                     for (int i = buf.readerIndex(); i < buf.readerIndex() + size; i++) {
                         byte b = buf.getByte(i);
                         hex.append(HEX_CHARS.charAt((b & 0xf0) >> 4));
-                        hex.append(HEX_CHARS.charAt((b & 0x0F)));
+                        hex.append(HEX_CHARS.charAt(b & 0x0F));
                     }
 
                     position.set("passenger", hex.toString());

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -103,8 +103,8 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
         Double longitude = Double.parseDouble(parser.group(index++));
         longitude += Double.parseDouble(parser.group(index++)) / 60;
         String hemisphere = parser.group(index++);
-        if (hemisphere != null) {
-            if (hemisphere.compareTo("W") == 0) longitude = -longitude;
+        if (hemisphere != null && hemisphere.compareTo("W") == 0) {
+            longitude = -longitude;
         }
         position.setLongitude(longitude);
 

File: src/org/traccar/web/JsonConverter.java
Patch:
@@ -34,6 +34,7 @@
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;
+import org.traccar.helper.Log;
 import org.traccar.model.Factory;
 import org.traccar.model.MiscFormatter;
 
@@ -81,6 +82,7 @@ public static <T extends Factory> T objectFromJson(JsonObject json, T prototype)
                         method.invoke(object, MiscFormatter.fromJson(json.getJsonObject(name)));
                     }
                 } catch (IllegalAccessException | InvocationTargetException error) {
+                    Log.warning(error);
                 }
             }
         }
@@ -123,6 +125,7 @@ public static <T> JsonObject objectToJson(T object) {
                         json.add(name, MiscFormatter.toJson((Map) method.invoke(object)));
                     }
                 } catch (IllegalAccessException | InvocationTargetException error) {
+                    Log.warning(error);
                 }
             }
         }

File: src/org/traccar/web/ServerServlet.java
Patch:
@@ -27,7 +27,7 @@ protected boolean handle(String command, HttpServletRequest req, HttpServletResp
 
         switch (command) {
             case "/get":
-                get(req, resp);
+                get(resp);
                 break;
             case "/update":
                 update(req, resp);
@@ -38,7 +38,7 @@ protected boolean handle(String command, HttpServletRequest req, HttpServletResp
         return true;
     }
 
-    private void get(HttpServletRequest req, HttpServletResponse resp) throws Exception {
+    private void get(HttpServletResponse resp) throws Exception {
         sendResponse(resp.getWriter(), JsonConverter.objectToJson(
                     Context.getDataManager().getServer()));
     }

File: src/org/traccar/protocol/AutoFonFrameDecoder.java
Patch:
@@ -22,9 +22,9 @@
 
 public class AutoFonFrameDecoder extends FrameDecoder {
 
-    private static final int MSG_LOGIN = 0x10;
-    private static final int MSG_LOCATION = 0x11;
-    private static final int MSG_HISTORY = 0x12;
+    public static final int MSG_LOGIN = 0x10;
+    public static final int MSG_LOCATION = 0x11;
+    public static final int MSG_HISTORY = 0x12;
 
     @Override
     protected Object decode(

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -34,9 +34,9 @@ public AutoFonProtocolDecoder(AutoFonProtocol protocol) {
         super(protocol);
     }
 
-    private static final int MSG_LOGIN = 0x10;
-    private static final int MSG_LOCATION = 0x11;
-    private static final int MSG_HISTORY = 0x12;
+    public static final int MSG_LOGIN = 0x10;
+    public static final int MSG_LOCATION = 0x11;
+    public static final int MSG_HISTORY = 0x12;
 
     private static double convertCoordinate(int raw) {
         double result = raw / 1000000;

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -44,9 +44,9 @@ private String readImei(ChannelBuffer buf) {
         return imei.toString();
     }
 
-    private static final int MSG_LOGIN = 'L';
-    private static final int MSG_STATUS = 'H';
-    private static final int MSG_GPS_LBS_STATUS = '$';
+    public static final int MSG_LOGIN = 'L';
+    public static final int MSG_STATUS = 'H';
+    public static final int MSG_GPS_LBS_STATUS = '$';
 
     private static void sendResponse(Channel channel, int type) {
         if (channel != null) {

File: src/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public CellocatorProtocolDecoder(CellocatorProtocol protocol) {
     static final int MSG_CLIENT_SERIAL = 8;
     static final int MSG_CLIENT_MODULAR = 9;
 
-    private static final int MSG_SERVER_ACKNOWLEDGE = 4;
+    public static final int MSG_SERVER_ACKNOWLEDGE = 4;
 
     private byte commandCount;
 

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -46,8 +46,8 @@ private String readImei(ChannelBuffer buf) {
         return imei.toString();
     }
 
-    private static final int MSG_HEARTBEAT = 0x1A;
-    private static final int MSG_DATA = 0x10;
+    public static final int MSG_HEARTBEAT = 0x1A;
+    public static final int MSG_DATA = 0x10;
 
     @Override
     protected Object decode(

File: src/org/traccar/protocol/KhdProtocolEncoder.java
Patch:
@@ -23,8 +23,8 @@
 
 public class KhdProtocolEncoder extends BaseProtocolEncoder {
 
-    private static final int MSG_CUT_OIL = 0x39;
-    private static final int MSG_RESUME_OIL = 0x38;
+    public static final int MSG_CUT_OIL = 0x39;
+    public static final int MSG_RESUME_OIL = 0x38;
 
     private ChannelBuffer encodeCommand(int command) {
 

File: src/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -34,9 +34,9 @@ public MxtProtocolDecoder(MxtProtocol protocol) {
         super(protocol);
     }
 
-    private static final int MSG_ACK = 0x02;
-    private static final int MSG_NACK = 0x03;
-    private static final int MSG_POSITION = 0x31;
+    public static final int MSG_ACK = 0x02;
+    public static final int MSG_NACK = 0x03;
+    public static final int MSG_POSITION = 0x31;
 
     @Override
     protected Object decode(

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -35,8 +35,8 @@ public OrionProtocolDecoder(OrionProtocol protocol) {
         super(protocol);
     }
 
-    private static final int TYPE_USERLOG = 0;
-    private static final int TYPE_SYSLOG = 3;
+    public static final int MSG_USERLOG = 0;
+    public static final int MSG_SYSLOG = 3;
 
     private static void sendResponse(Channel channel, ChannelBuffer buf) {
         if (channel != null) {
@@ -64,7 +64,7 @@ protected Object decode(
         buf.skipBytes(2); // header
         int type = buf.readUnsignedByte() & 0x0f;
 
-        if (type == TYPE_USERLOG) {
+        if (type == MSG_USERLOG) {
 
             int header = buf.readUnsignedByte();
 

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -53,9 +53,9 @@ private void sendResponse(Channel channel, String message) {
         }
     }
 
-    private static final int MSG_GPS = 0xF1;
-    private static final int MSG_GPS_SENSORS = 0xF2;
-    private static final int MSG_EVENTS = 0xF3;
+    public static final int MSG_GPS = 0xF1;
+    public static final int MSG_GPS_SENSORS = 0xF2;
+    public static final int MSG_EVENTS = 0xF3;
 
     @Override
     protected Object decode(

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -38,8 +38,8 @@ public TramigoProtocolDecoder(TramigoProtocol protocol) {
         super(protocol);
     }
 
-    private static final int MSG_COMPACT = 0x0100;
-    private static final int MSG_FULL = 0x00FE;
+    public static final int MSG_COMPACT = 0x0100;
+    public static final int MSG_FULL = 0x00FE;
 
     @Override
     protected Object decode(

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -200,7 +200,7 @@ protected Object decode(
 
         // Additional data
         for (int i = 1; i <= 5; i++) {
-            position.set(Event.PREFIX_IO + 1, parser.group(index++));
+            position.set(Event.PREFIX_IO + i, parser.group(index++));
         }
 
         return position;

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -53,9 +53,9 @@ protected Object encodeCommand(Command command) {
 
         switch (command.getType()) {
             case Command.TYPE_ENGINE_STOP:
-                return encodeContent("RELAY,1#");
+                return encodeContent("Relay,1#");
             case Command.TYPE_ENGINE_RESUME:
-                return encodeContent("RELAY,0#");
+                return encodeContent("Relay,0#");
         }
 
         return null;

File: test/org/traccar/protocol/Gt06ProtocolEncoderTest.java
Patch:
@@ -18,7 +18,7 @@ public void testEncode() throws Exception {
         command.setType(Command.TYPE_ENGINE_STOP);
 
         Assert.assertEquals(encoder.encodeCommand(command), ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
-                "787812800c0000000052454c41592c312300001c300d0a")));
+                "787812800c0000000052656c61792c312300009dee0d0a")));
 
     }
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -19,7 +19,6 @@
 import java.net.URI;
 import java.net.URL;
 import java.net.URLDecoder;
-import java.sql.SQLException;
 import java.util.Enumeration;
 import java.util.LinkedList;
 import java.util.List;

File: src/org/traccar/database/DataManager.java
Patch:
@@ -24,7 +24,6 @@
 import java.sql.DriverManager;
 import java.sql.ResultSet;
 import java.sql.SQLException;
-import java.text.ParseException;
 import java.util.Collection;
 import java.util.Date;
 import java.util.HashMap;

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -19,7 +19,6 @@
 import java.nio.ByteOrder;
 import java.nio.charset.Charset;
 import java.util.Calendar;
-import java.util.Date;
 import java.util.LinkedList;
 import java.util.List;
 import java.util.TimeZone;

File: src/org/traccar/protocol/FlextrackProtocol.java
Patch:
@@ -15,17 +15,15 @@
  */
 package org.traccar.protocol;
 
+import java.util.List;
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
 import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
-import java.util.List;
-
 public class FlextrackProtocol extends BaseProtocol {
 
     public FlextrackProtocol() {

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -15,8 +15,8 @@
  */
 package org.traccar.protocol;
 
-import java.nio.charset.Charset;
 import java.net.SocketAddress;
+import java.nio.charset.Charset;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.LinkedList;
@@ -31,8 +31,8 @@
 import org.jboss.netty.handler.codec.http.HttpResponseStatus;
 import org.jboss.netty.handler.codec.http.HttpVersion;
 import org.traccar.BaseProtocolDecoder;
-import org.traccar.helper.BitUtil;
 import org.traccar.Protocol;
+import org.traccar.helper.BitUtil;
 import org.traccar.helper.ChannelBufferTools;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
@@ -301,7 +301,7 @@ protected Object decode(
         short offset = buf.readUnsignedByte(); // dataOffset
         short packetCount = buf.readUnsignedByte();
         buf.readUnsignedByte(); // reserved
-        short parameters = buf.readUnsignedByte(); // TODO: handle timezone
+        buf.readUnsignedByte(); // TODO: handle timezone
         buf.skipBytes(offset - 5);
 
         // Send response

File: src/org/traccar/protocol/NavigilProtocolDecoder.java
Patch:
@@ -188,7 +188,7 @@ private Position parsePositionReport2(ChannelBuffer buf, int sequenceNumber, lon
         short flags = buf.readUnsignedByte();
         position.setValid((flags & 0x80) == 0x80 && (flags & 0x40) == 0x40);
 
-        int x = buf.readUnsignedByte(); // satellites in fix
+        position.set(Event.KEY_SATELLITES, buf.readUnsignedByte());
         buf.readUnsignedInt(); // distance
         return position;
     }

File: src/org/traccar/helper/Crc.java
Patch:
@@ -172,7 +172,7 @@ public static long luhnChecksum(long imei) {
             remain /= 10;
         }
 
-        return 10 - (checksum % 10);
+        return (10 - (checksum % 10)) % 10;
     }
     
 }

File: test/org/traccar/helper/CrcTest.java
Patch:
@@ -9,6 +9,7 @@ public class CrcTest {
     public void testLuhnChecksum() {
 
         Assert.assertEquals(7, Crc.luhnChecksum(12345678901234L));
+        Assert.assertEquals(0, Crc.luhnChecksum(63070019470771L));
 
     }
 

File: test/org/traccar/protocol/FlextrackProtocolDecoderTest.java
Patch:
@@ -18,6 +18,9 @@ public void testDecode() throws Exception {
         assertNull(decoder.decode(null, null,
                 "-1,LOGON,1080424008,8945020110126633198"));
 
+        verify(decoder.decode(null, null,
+                "-2,UNITSTAT,20060101,123442,1080424008,N0.00.0000,E0.00.0000,0,0,0,4129,-61,2,23866,0,999,A214,63,2EE2,3471676"));
+
         verify(decoder.decode(null, null,
                 "-2,UNITSTAT,20050205,181923,7000004634,N55.46.0812,E009.21.1665,122,198,6,3934,-81,01A8,23802,213,55,37FD,45,0055,12878"));
 

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -38,7 +38,7 @@ private ChannelBuffer encodeContent(String content) {
         buf.writeInt(0);
         buf.writeBytes(content.getBytes()); // command
 
-        buf.writeShort(1); // message index
+        buf.writeShort(0); // message index
 
         buf.writeShort(Crc.crc16Ccitt(buf.toByteBuffer(2, buf.writerIndex() - 2)));
 
@@ -53,9 +53,9 @@ protected Object encodeCommand(Command command) {
         
         switch (command.getType()) {
             case Command.TYPE_ENGINE_STOP:
-                return encodeContent("DYD#");
+                return encodeContent("RELAY,1#");
             case Command.TYPE_ENGINE_RESUME:
-                return encodeContent("HFYD#");
+                return encodeContent("RELAY,0#");
         }
 
         return null;

File: test/org/traccar/protocol/Gt06ProtocolEncoderTest.java
Patch:
@@ -18,7 +18,7 @@ public void testEncode() throws Exception {
         command.setType(Command.TYPE_ENGINE_STOP);
 
         Assert.assertEquals(encoder.encodeCommand(command), ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
-                "78780e800800000000445944230001d09e0d0a")));
+                "787812800c0000000052454c41592c312300001c300d0a")));
 
     }
 

File: test/org/traccar/protocol/CalAmpProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public class CalAmpProtocolDecoderTest extends ProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(new CalAmpProtocol());
+        
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
+                "830543321494860101010a0080560b5a5e0eadd0291becf3c500f005090f1f3305000003010040c0a600000000000000008b12a102"))));
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "830543321494860101010a0c215608b6680ead5ada1bed88d300000049801f000500000300003cf33200000000000000008b0ce101"))));

File: src/org/traccar/protocol/FlextrackProtocolDecoder.java
Patch:
@@ -77,12 +77,10 @@ protected Object decode(
 
         String sentence = (String) msg;
 
-        String x = PatternUtil.checkPattern(pattern.pattern(), sentence);
-
         if (sentence.contains("LOGON")) {
 
             Matcher parser = patternLogon.matcher(sentence);
-            if (parser.matches()) {
+            if (!parser.matches()) {
                 return null;
             }
 

File: test/org/traccar/protocol/FlextrackProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
         assertNull(decoder.decode(null, null,
                 "-1,LOGON,7000000123,8945000000"));
 
+        assertNull(decoder.decode(null, null,
+                "-1,LOGON,1080424008,8945020110126633198"));
+
         verify(decoder.decode(null, null,
                 "-2,UNITSTAT,20050205,181923,7000004634,N55.46.0812,E009.21.1665,122,198,6,3934,-81,01A8,23802,213,55,37FD,45,0055,12878"));
 

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
+        verify(decoder.decode(null, null,
+                "(088047365460BP05354188047365460150929A3258.1754S02755.4323E009.4193927301.9000000000L00000000)"));
+
         verify(decoder.decode(null, null,
                 "(088048003342BP05354188048003342150917A1352.9801N10030.9050E000.0103115265.5600010000L000003F9)"));
 

File: src/org/traccar/web/BaseServlet.java
Patch:
@@ -42,6 +42,8 @@ protected final void service(HttpServletRequest req, HttpServletResponse resp) t
             resp.setContentType("application/json");
             resp.setCharacterEncoding("UTF-8");
             resp.setHeader("Access-Control-Allow-Origin", "*");
+            resp.setHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
+            resp.setHeader("Access-Control-Allow-Methods", "GET, POST");
             if (!handle(command, req, resp)) {
                 resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
             }

File: src/org/traccar/web/BaseServlet.java
Patch:
@@ -41,6 +41,7 @@ protected final void service(HttpServletRequest req, HttpServletResponse resp) t
         try {
             resp.setContentType("application/json");
             resp.setCharacterEncoding("UTF-8");
+            resp.setHeader("Access-Control-Allow-Origin", "*");
             if (!handle(command, req, resp)) {
                 resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
             }

File: test/org/traccar/protocol/AquilaProtocolDecoderTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.traccar.protocol;
 
 import org.junit.Test;
-
 import static org.traccar.helper.DecoderVerifier.verify;
 
 public class AquilaProtocolDecoderTest extends ProtocolDecoderTest {
@@ -10,6 +9,9 @@ public class AquilaProtocolDecoderTest extends ProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         AquilaProtocolDecoder decoder = new AquilaProtocolDecoder(new AquilaProtocol());
+        
+        verify(decoder.decode(null, null,
+                "$$SRINI_1MS,141214807,1,12.963515,77.533844,150925161628,A,27,0,8,0,68,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,*43"));
 
         verify(decoder.decode(null, null,
                 "$$CLIENT_1ZF,130329214,1,12.962985,77.576484,140127165433,A,22,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,*26"));

File: src/org/traccar/WebDataHandler.java
Patch:
@@ -58,7 +58,7 @@ private static String formatSentence(Position position) {
     }
 
     private String calculateStatus(Position position) {
-        if (position.getAttributes().containsKey(Event.KEY_ALARM) && (Boolean) position.getAttributes().get(Event.KEY_ALARM)) {
+        if (position.getAttributes().containsKey(Event.KEY_ALARM)) {
             return "0xF841"; // STATUS_PANIC_ON
         } else if (position.getSpeed() < 1.0) {
             return "0xF020"; // STATUS_LOCATION

File: src/org/traccar/geocode/FactualReverseGeocoder.java
Patch:
@@ -15,9 +15,7 @@
  */
 package org.traccar.geocode;
 
-import javax.json.JsonArray;
 import javax.json.JsonObject;
-import org.traccar.helper.Log;
 
 public class FactualReverseGeocoder extends JsonReverseGeocoder {
 
@@ -32,7 +30,6 @@ public FactualReverseGeocoder(String url, String key, int cacheSize) {
     @Override
     protected Address parseAddress(JsonObject json) {
         JsonObject result = json.getJsonObject("response").getJsonObject("data");
-	JsonObject dummy;
         if (result != null) {
                 Address address = new Address();
                 if (result.getJsonObject("street_number") != null) { 
@@ -60,4 +57,5 @@ protected Address parseAddress(JsonObject json) {
         }
         return null;
     }
+
 }

File: src/org/traccar/Context.java
Patch:
@@ -127,9 +127,6 @@ public static void init(String[] arguments) throws Exception {
                     break;
                 case "mapquest":
                     reverseGeocoder = new MapQuestReverseGeocoder(url, key, cacheSize);
-		case "mapquest":
-		    reverseGeocoder = new MapQuestReverseGeocoder(url, key, cacheSize);
-		    break;
                 case "opencage":
                     reverseGeocoder = new OpenCageReverseGeocoder(url, key, cacheSize);
                     break;

File: src/org/traccar/database/DataManager.java
Patch:
@@ -227,7 +227,7 @@ private void mockData(long userId) {
                 
                 updateLatestPosition(position);
 
-            } catch (SQLException | ParseException error) {
+            } catch (SQLException error) {
                 Log.warning(error);
             }
         }

File: src/org/traccar/DetectorHandler.java
Patch:
@@ -27,7 +27,7 @@
 
 public class DetectorHandler extends SimpleChannelHandler {
 
-    private List<TrackerServer> serverList;
+    private final List<TrackerServer> serverList;
     
     private boolean showFailed;
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -90,7 +90,7 @@ private boolean isProtocolEnabled(String protocol) {
         return Context.getConfig().hasKey(protocol + ".port");
     }
 
-    private void initProtocolDetector() throws SQLException {
+    private void initProtocolDetector() {
         String protocol = "detector";
         if (isProtocolEnabled(protocol)) {
             serverList.add(new TrackerServer(new ServerBootstrap(), protocol) {
@@ -108,7 +108,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
         }
     }
 
-    private void initProtocolServer(final Protocol protocol) throws SQLException {
+    private void initProtocolServer(final Protocol protocol) {
         if (isProtocolEnabled(protocol.getName())) {
             protocol.initTrackerServers(serverList);
         }

File: src/org/traccar/helper/Hashing.java
Patch:
@@ -47,7 +47,7 @@ private static byte[] function(char[] password, byte[] salt) {
         }
     }
 
-    private static SecureRandom random = new SecureRandom();
+    private static final SecureRandom random = new SecureRandom();
 
     public static HashingResult createHash(String password) {
         byte[] salt = new byte[SALT_SIZE]; random.nextBytes(salt);

File: src/org/traccar/protocol/CarscopProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@ public CarscopProtocolDecoder(CarscopProtocol protocol) {
         super(protocol);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "\\*.*" +
             "(\\d{2})(\\d{2})(\\d{2})" + // Time (HHMMSS)
             "([AV])" +                   // Validity

File: src/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@ public EasyTrackProtocolDecoder(EasyTrackProtocol protocol) {
         super(protocol);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "\\*..," +                          // Manufacturer
             "(\\d+)," +                         // IMEI
             "([^,]{2})," +                      // Command

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public Jt600ProtocolDecoder(Jt600Protocol protocol) {
         super(protocol);
     }
 
-    private Position decodeNormalMessage(ChannelBuffer buf, Channel channel) throws Exception {
+    private Position decodeNormalMessage(ChannelBuffer buf, Channel channel) {
 
         Position position = new Position();
         position.setProtocol(getProtocolName());
@@ -140,7 +140,7 @@ private Position decodeNormalMessage(ChannelBuffer buf, Channel channel) throws
             "(\\d+)," +                  // Alert Type
             ".*\\)");
 
-    private Position decodeAlertMessage(ChannelBuffer buf, Channel channel) throws Exception {
+    private Position decodeAlertMessage(ChannelBuffer buf, Channel channel) {
 
         String message = buf.toString(Charset.defaultCharset());
 

File: src/org/traccar/protocol/ManPowerProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@ public ManPowerProtocolDecoder(ManPowerProtocol protocol) {
         super(protocol);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "simei:" +
             "(\\d+)," +                         // IMEI
             "[^,]*,[^,]*," +

File: src/org/traccar/protocol/MaxonProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public MaxonProtocolDecoder(MaxonProtocol protocol) {
         super(protocol);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "\\$GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d{2})," + // Time (HHMMSS.SSS)
             "([AV])," +                    // Validity
@@ -54,7 +54,7 @@ public MaxonProtocolDecoder(MaxonProtocol protocol) {
             "(\\d{2})(\\d{2})(\\d{2})" +   // Date (DDMMYY)
             ".+");                         // Other (Checksumm)
 
-    static private Pattern gpfidPattern = Pattern.compile("\\$GPFID,(\\d+)$");
+    private static final Pattern gpfidPattern = Pattern.compile("\\$GPFID,(\\d+)$");
 
     protected Object decode(
             Channel channel, SocketAddress remoteAddress, Object msg)

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@
 
 public class Mta6ProtocolDecoder extends BaseProtocolDecoder {
     
-    private boolean simple;
+    private final boolean simple;
 
     public Mta6ProtocolDecoder(Protocol protocol, boolean simple) {
         super(protocol);

File: src/org/traccar/protocol/Pt3000ProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@ public Pt3000ProtocolDecoder(Pt3000Protocol protocol) {
         super(protocol);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "%(\\d+)," +                   // IMEI
             "\\$GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.?\\d*," + // Time (HHMMSS.SSS)

File: src/org/traccar/protocol/SkypatrolProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class SkypatrolProtocolDecoder extends BaseProtocolDecoder {
     
-    private long defaultMask;
+    private final long defaultMask;
 
     public SkypatrolProtocolDecoder(SkypatrolProtocol protocol) {
         super(protocol);

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class TaipProtocolDecoder extends BaseProtocolDecoder {
     
-    boolean sendResponse;
+    private final boolean sendResponse;
 
     public TaipProtocolDecoder(TaipProtocol protocol, boolean sendResponse) {
         super(protocol);

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@ public Tk102ProtocolDecoder(Tk102Protocol protocol) {
         super(protocol);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "\\[.\\d{10}.\\(\\p{Upper}+" +
             "(\\d{2})(\\d{2})(\\d{2})" +   // Time (HHMMSS)
             "([AV])" +                     // Validity

File: src/org/traccar/protocol/Tr20ProtocolDecoder.java
Patch:
@@ -33,10 +33,10 @@ public Tr20ProtocolDecoder(Tr20Protocol protocol) {
         super(protocol);
     }
 
-    static private Pattern patternPing = Pattern.compile(
+    private static final Pattern patternPing = Pattern.compile(
             "%%[^,]+,(\\d+)");
 
-    static private Pattern patternData = Pattern.compile(
+    private static final Pattern patternData = Pattern.compile(
             "%%" +
             "([^,]+)," +                   // Id
             "([AL])," +                    // Validity

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -29,14 +29,14 @@
 
 public class XexunProtocolDecoder extends BaseProtocolDecoder {
 
-    private boolean full;
+    private final boolean full;
 
     public XexunProtocolDecoder(XexunProtocol protocol, boolean full) {
         super(protocol);
         this.full = full;
     }
 
-    static private Pattern patternBasic = Pattern.compile(
+    private static final Pattern patternBasic = Pattern.compile(
             "G[PN]RMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity
@@ -53,7 +53,7 @@ public XexunProtocolDecoder(XexunProtocol protocol, boolean full) {
             ".*imei:" +
             "(\\d+),");                         // IMEI
 
-    static private Pattern patternFull = Pattern.compile(
+    private static final Pattern patternFull = Pattern.compile(
             "[\r\n]*" +
             "(\\d+)," +                         // Serial
             "([^,]+)?," +                       // Number

File: src/org/traccar/web/JsonConverter.java
Patch:
@@ -41,7 +41,7 @@ public class JsonConverter {
 
     private static final DateTimeFormatter dateFormat = ISODateTimeFormat.dateTime();
 
-    public static Date parseDate(String value) throws ParseException {
+    public static Date parseDate(String value) {
         return dateFormat.parseDateTime(value).toDate();
     }
 
@@ -51,7 +51,7 @@ public static <T extends Factory> T objectFromJson(Reader reader, T prototype) t
         }
     }
 
-    public static <T extends Factory> T objectFromJson(JsonObject json, T prototype) throws ParseException {
+    public static <T extends Factory> T objectFromJson(JsonObject json, T prototype) {
         T object = (T) prototype.create();
 
         Method[] methods = object.getClass().getMethods();

File: src/org/traccar/geocode/JsonReverseGeocoder.java
Patch:
@@ -21,10 +21,8 @@
 import javax.json.JsonObject;
 import javax.json.JsonReader;
 import java.io.InputStreamReader;
-import java.io.Reader;
 import java.net.HttpURLConnection;
 import java.net.URL;
-import java.net.URLConnection;
 import java.util.AbstractMap;
 import java.util.LinkedHashMap;
 import java.util.Map;

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -16,7 +16,6 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -18,7 +18,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/BceFrameDecoder.java
Patch:
@@ -19,7 +19,6 @@
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
 import org.jboss.netty.handler.codec.frame.FrameDecoder;
-import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
 
 public class BceFrameDecoder extends FrameDecoder {
 

File: src/org/traccar/protocol/BoxProtocolDecoder.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
-
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/CarscopProtocolDecoder.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
-
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -22,9 +22,8 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
+import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -22,8 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
-
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/EnforaProtocolDecoder.java
Patch:
@@ -23,9 +23,8 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.buffer.ChannelBuffer;
-import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
+import org.jboss.netty.channel.Channel;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.ChannelBufferTools;
 import org.traccar.helper.Log;

File: src/org/traccar/protocol/FreedomProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -91,8 +91,8 @@ protected Object decode(
         buf.readUnsignedByte(); // header
         int length = (buf.readUnsignedShort() & 0x7fff) + 3;
         
-        List<Position> positions = new LinkedList<Position>();
-        Set<Integer> tags = new HashSet<Integer>();
+        List<Position> positions = new LinkedList<>();
+        Set<Integer> tags = new HashSet<>();
         boolean hasLocation = false;
         Position position = new Position();
         position.setProtocol(getProtocolName());

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.ChannelBufferTools;

File: src/org/traccar/protocol/Gl100ProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -34,7 +34,7 @@ public Gl200ProtocolDecoder(Gl200Protocol protocol) {
     }
 
     private static final Pattern heartbeatPattern = Pattern.compile(
-            "\\+ACK\\:GTHBD," +
+            "\\+ACK:GTHBD," +
             "([0-9A-Z]{2}\\p{XDigit}{4})," +
             ".*," +
             "(\\p{XDigit}{4})\\$?");

File: src/org/traccar/protocol/GotopProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;

File: src/org/traccar/protocol/GpsGateProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.Crc;

File: src/org/traccar/protocol/GpsMarkerProtocol.java
Patch:
@@ -15,17 +15,14 @@
  */
 package org.traccar.protocol;
 
-import org.jboss.netty.bootstrap.ConnectionlessBootstrap;
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.handler.codec.string.StringDecoder;
-import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
 
 import java.util.List;
-import java.util.Map;
 
 public class GpsMarkerProtocol extends BaseProtocol {
 

File: src/org/traccar/protocol/GpsmtaProtocol.java
Patch:
@@ -17,9 +17,7 @@
 
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
-import org.jboss.netty.handler.codec.frame.LineBasedFrameDecoder;
 import org.jboss.netty.handler.codec.string.StringDecoder;
-import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.TrackerServer;
 

File: src/org/traccar/protocol/GpsmtaProtocolDecoder.java
Patch:
@@ -21,9 +21,7 @@
 import org.traccar.model.Position;
 
 import java.net.SocketAddress;
-import java.util.Calendar;
 import java.util.Date;
-import java.util.TimeZone;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -18,7 +18,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.traccar.BaseProtocolEncoder;
-import org.traccar.Context;
 import org.traccar.helper.Crc;
 import org.traccar.model.Command;
 

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.BitUtil;

File: src/org/traccar/protocol/HaicomProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
@@ -51,7 +50,7 @@ public HaicomProtocolDecoder(HaicomProtocol protocol) {
             "(\\d+)," +                   // Switch status
             "(\\d+)" +                    // Relay status
             "(?:[LH]{2})?" +              // Power status
-            "\\#V(\\d+).*");              // Battery
+            "#V(\\d+).*");                // Battery
 
     @Override
     protected Object decode(

File: src/org/traccar/protocol/IntellitracProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.ChannelBufferTools;

File: src/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.ChannelBufferTools;

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.Crc;

File: src/org/traccar/protocol/M2mProtocolDecoder.java
Patch:
@@ -21,7 +21,6 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/ManPowerProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/MaxonProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -27,7 +27,6 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.ChannelBufferTools;

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
@@ -35,7 +34,7 @@ public MiniFinderProtocolDecoder(MiniFinderProtocol protocol) {
     }
 
     private static final Pattern pattern = Pattern.compile(
-            "\\!D," +
+            "!D," +
             "(\\d+)/(\\d+)/(\\d+)," +      // Date
             "(\\d+):(\\d+):(\\d+)," +      // Time
             "(-?\\d+\\.\\d+)," +           // Latitude

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -25,7 +25,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.jboss.netty.handler.codec.http.DefaultHttpResponse;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 import org.jboss.netty.handler.codec.http.HttpResponse;

File: src/org/traccar/protocol/MtxProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.TimeZone;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.BitUtil;
 import org.traccar.helper.UnitsConverter;

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -26,7 +26,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.jboss.netty.handler.codec.http.DefaultHttpResponse;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 import org.jboss.netty.handler.codec.http.HttpResponse;

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -26,7 +26,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/Pt3000ProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;
@@ -34,7 +33,7 @@ public Pt3000ProtocolDecoder(Pt3000Protocol protocol) {
     }
 
     static private Pattern pattern = Pattern.compile(
-            "\\%(\\d+)," +                 // IMEI
+            "%(\\d+)," +                   // IMEI
             "\\$GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.?\\d*," + // Time (HHMMSS.SSS)
             "([AV])," +                    // Validity

File: src/org/traccar/protocol/RitiProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.ChannelBufferTools;

File: src/org/traccar/protocol/SanavProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/Stl060ProtocolDecoder.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/TaipProtocolDecoder.java
Patch:
@@ -23,10 +23,8 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
-import org.traccar.Protocol;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Position;
 

File: src/org/traccar/protocol/TelikProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/TopflytechProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Position;

File: src/org/traccar/protocol/Tr20ProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
@@ -35,10 +34,10 @@ public Tr20ProtocolDecoder(Tr20Protocol protocol) {
     }
 
     static private Pattern patternPing = Pattern.compile(
-            "\\%\\%[^,]+,(\\d+)");
+            "%%[^,]+,(\\d+)");
 
     static private Pattern patternData = Pattern.compile(
-            "\\%\\%" +
+            "%%" +
             "([^,]+)," +                   // Id
             "([AL])," +                    // Validity
             "(\\d{2})(\\d{2})(\\d{2})" +   // Date (YYMMDD)

File: src/org/traccar/protocol/TrackboxProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/TramigoFrameDecoder.java
Patch:
@@ -20,7 +20,6 @@
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
-import org.jboss.netty.handler.codec.frame.FrameDecoder;
 import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
 
 public class TramigoFrameDecoder extends LengthFieldBasedFrameDecoder {

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -18,7 +18,6 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/V680ProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/VisiontekProtocolDecoder.java
Patch:
@@ -21,7 +21,6 @@
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -24,7 +24,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/Xt013ProtocolDecoder.java
Patch:
@@ -16,7 +16,6 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;

File: src/org/traccar/protocol/YwtProtocolDecoder.java
Patch:
@@ -22,7 +22,6 @@
 import java.util.regex.Pattern;
 
 import org.jboss.netty.channel.Channel;
-import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.model.Event;

File: src/org/traccar/web/JsonConverter.java
Patch:
@@ -19,9 +19,7 @@
 import java.io.Reader;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
-import java.text.DateFormat;
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
 import java.util.Collection;
 import java.util.Date;
 import java.util.Map;
@@ -33,7 +31,6 @@
 import javax.json.JsonReader;
 import javax.json.JsonValue;
 
-import org.apache.log4j.helpers.ISO8601DateFormat;
 import org.joda.time.DateTime;
 import org.joda.time.format.DateTimeFormatter;
 import org.joda.time.format.ISODateTimeFormat;

File: test/org/traccar/geocode/ReverseGeocoderTest.java
Patch:
@@ -1,8 +1,5 @@
 package org.traccar.geocode;
 
-import static org.junit.Assert.assertEquals;
-import org.junit.Test;
-
 public class ReverseGeocoderTest {
 
     /*@Test

File: test/org/traccar/helper/DecoderVerifier.java
Patch:
@@ -3,7 +3,6 @@
 import java.util.Date;
 import java.util.List;
 import static org.junit.Assert.*;
-import org.traccar.model.Event;
 import org.traccar.model.Position;
 
 public class DecoderVerifier {

File: test/org/traccar/protocol/Ardi01ProtocolDecoderTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.traccar.protocol;
 
 import org.junit.Test;
-import org.traccar.helper.TestIdentityManager;
 
-import static org.junit.Assert.assertNull;
 import static org.traccar.helper.DecoderVerifier.verify;
 
 public class Ardi01ProtocolDecoderTest extends ProtocolDecoderTest {

File: test/org/traccar/protocol/AutoFon45ProtocolDecoderTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
-import org.traccar.helper.TestIdentityManager;
 
 import static org.junit.Assert.assertNull;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/AutoFonProtocolDecoderTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
-import org.traccar.helper.TestIdentityManager;
 
 import static org.junit.Assert.assertNull;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/BceProtocolDecoderTest.java
Patch:
@@ -2,12 +2,10 @@
 
 import java.nio.ByteOrder;
 
-import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
 import static org.traccar.helper.DecoderVerifier.verify;
-import org.traccar.helper.TestIdentityManager;
 
 public class BceProtocolDecoderTest extends ProtocolDecoderTest {
 

File: test/org/traccar/protocol/BoxProtocolDecoderTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.traccar.protocol;
 
 import static org.junit.Assert.assertNull;
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/CarTrackProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/CarscopProtocolDecoderTest.java
Patch:
@@ -1,8 +1,7 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
-import static org.junit.Assert.assertNull;
+
 import org.junit.Test;
 
 public class CarscopProtocolDecoderTest extends ProtocolDecoderTest {

File: test/org/traccar/protocol/CellocatorProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/EasyTrackProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/EnforaProtocolDecoderTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
-import org.jboss.netty.buffer.ChannelBufferFactory;
 import org.jboss.netty.buffer.ChannelBuffers;
-import org.jboss.netty.buffer.HeapChannelBufferFactory;
+
 import static org.junit.Assert.assertNull;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;

File: test/org/traccar/protocol/Ev603ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/FreedomProtocolDecoderTest.java
Patch:
@@ -1,8 +1,7 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
-import static org.junit.Assert.assertNull;
+
 import org.junit.Test;
 
 public class FreedomProtocolDecoderTest extends ProtocolDecoderTest {

File: test/org/traccar/protocol/GalileoProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.junit.Assert.assertNull;

File: test/org/traccar/protocol/GatorProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;

File: test/org/traccar/protocol/Gl100ProtocolDecoderTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.traccar.protocol;
 
 import static org.junit.Assert.assertNull;
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/GotopProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/GpsGateProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/GpsmtaProtocolDecoderTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import org.junit.Test;
 
-import static org.junit.Assert.assertNull;
 import static org.traccar.helper.DecoderVerifier.verify;
 
 public class GpsmtaProtocolDecoderTest extends ProtocolDecoderTest {

File: test/org/traccar/protocol/Gt02ProtocolDecoderTest.java
Patch:
@@ -5,7 +5,6 @@
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
 import static org.traccar.helper.DecoderVerifier.verify;
-import org.traccar.helper.TestIdentityManager;
 
 public class Gt02ProtocolDecoderTest extends ProtocolDecoderTest {
 

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import java.nio.charset.Charset;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/HaicomProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/Jt600ProtocolDecoderTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.traccar.protocol;
 
 import org.traccar.helper.ChannelBufferTools;
-import org.traccar.helper.TestIdentityManager;
+
 import java.nio.charset.Charset;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/KhdProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;

File: test/org/traccar/protocol/LaipacProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/M2mProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;

File: test/org/traccar/protocol/ManPowerProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/MtxProtocolDecoderTest.java
Patch:
@@ -1,8 +1,7 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
-import static org.junit.Assert.assertNull;
+
 import org.junit.Test;
 
 public class MtxProtocolDecoderTest extends ProtocolDecoderTest {

File: test/org/traccar/protocol/NavigilProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.junit.Assert.assertNull;

File: test/org/traccar/protocol/NavisProtocolDecoderTest.java
Patch:
@@ -1,7 +1,7 @@
 package org.traccar.protocol;
 
 import org.traccar.helper.ChannelBufferTools;
-import org.traccar.helper.TestIdentityManager;
+
 import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/OrionProtocolDecoderTest.java
Patch:
@@ -1,9 +1,7 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffers;
-import static org.junit.Assert.assertNull;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/PiligrimProtocolDecoderTest.java
Patch:
@@ -1,12 +1,11 @@
 package org.traccar.protocol;
 
 import org.jboss.netty.buffer.ChannelBuffers;
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.handler.codec.http.DefaultHttpRequest;
 import org.jboss.netty.handler.codec.http.HttpMethod;
 import org.jboss.netty.handler.codec.http.HttpRequest;
 import org.jboss.netty.handler.codec.http.HttpVersion;
-import static org.junit.Assert.assertNull;
+
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;

File: test/org/traccar/protocol/ProgressProtocolDecoderTest.java
Patch:
@@ -3,12 +3,10 @@
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
-import org.traccar.helper.TestIdentityManager;
 
 import java.nio.ByteOrder;
 
 import static org.junit.Assert.assertNull;
-import static org.traccar.helper.DecoderVerifier.verify;
 
 public class ProgressProtocolDecoderTest extends ProtocolDecoderTest {
 

File: test/org/traccar/protocol/Pt3000ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/RitiProtocolDecoderTest.java
Patch:
@@ -2,11 +2,9 @@
 
 import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffers;
-import static org.junit.Assert.assertNull;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
 import static org.traccar.helper.DecoderVerifier.verify;
-import org.traccar.helper.TestIdentityManager;
 
 public class RitiProtocolDecoderTest extends ProtocolDecoderTest {
 

File: test/org/traccar/protocol/SanavProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/SkypatrolProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;

File: test/org/traccar/protocol/TelikProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;

File: test/org/traccar/protocol/Tk102ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/Tlt2hProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/TopflytechProtocolDecoderTest.java
Patch:
@@ -1,8 +1,7 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
-import static org.junit.Assert.assertNull;
+
 import org.junit.Test;
 
 public class TopflytechProtocolDecoderTest extends ProtocolDecoderTest {

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/Tr20ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/TrackboxProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/TytanProtocolDecoderTest.java
Patch:
@@ -1,9 +1,6 @@
 package org.traccar.protocol;
 
-import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
-import org.traccar.helper.ChannelBufferTools;
-import static org.traccar.helper.DecoderVerifier.verify;
 
 public class TytanProtocolDecoderTest extends ProtocolDecoderTest {
 

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -3,7 +3,6 @@
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.junit.Test;
 import org.traccar.helper.ChannelBufferTools;
-import org.traccar.helper.TestIdentityManager;
 
 import static org.junit.Assert.assertNull;
 import static org.traccar.helper.DecoderVerifier.verify;

File: test/org/traccar/protocol/V680ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/WialonProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
 

File: test/org/traccar/protocol/Xt013ProtocolDecoderTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.traccar.protocol;
 
 import org.junit.Test;
-import org.traccar.helper.TestIdentityManager;
 
 import static org.traccar.helper.DecoderVerifier.verify;
 

File: test/org/traccar/protocol/YwtProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;

File: test/org/traccar/web/JsonConverterTest.java
Patch:
@@ -2,7 +2,6 @@
 
 import java.io.StringReader;
 import java.text.ParseException;
-import java.util.Calendar;
 import java.util.Date;
 import static org.junit.Assert.assertEquals;
 import org.junit.Test;

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -18,6 +18,7 @@
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.traccar.BaseProtocolEncoder;
+import org.traccar.Context;
 import org.traccar.helper.Crc;
 import org.traccar.model.Command;
 
@@ -34,7 +35,7 @@ private ChannelBuffer encodeContent(String content) {
 
         buf.writeByte(0x80); // message type
 
-        buf.writeByte(content.length()); // command length
+        buf.writeByte(4 + content.length()); // command length
         buf.writeInt(0);
         buf.writeBytes(content.getBytes()); // command
 

File: test/org/traccar/protocol/Gt06ProtocolEncoderTest.java
Patch:
@@ -18,7 +18,7 @@ public void testEncode() throws Exception {
         command.setType(Command.TYPE_ENGINE_STOP);
 
         Assert.assertEquals(encoder.encodeCommand(command), ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
-                "78780e80040000000044594423000190b10d0a")));
+                "78780e800800000000445944230001d09e0d0a")));
 
     }
 

File: src/org/traccar/DefaultDataHandler.java
Patch:
@@ -26,7 +26,7 @@ protected Position handlePosition(Position position) {
         try {
             Context.getDataManager().addPosition(position);
             Position lastPosition = Context.getConnectionManager().getLastPosition(position.getDeviceId());
-            if (position.getFixTime().compareTo(lastPosition.getFixTime()) > 0) {
+            if (lastPosition == null || position.getFixTime().compareTo(lastPosition.getFixTime()) > 0) {
                 Context.getDataManager().updateLatestPosition(position);
             }
         } catch (Exception error) {

File: src/org/traccar/helper/Log.java
Patch:
@@ -169,13 +169,13 @@ public static String exceptionStack(Throwable exception) {
                     }
 
                     if (file.equals(element.getFileName())) {
-                        s.append("*:");
+                        s.append("*");
                     } else {
                         file = element.getFileName();
-                        s.append(file.substring(0, file.length() - 5)).append(":");
+                        s.append(file.substring(0, file.length() - 5)); // remove ".java"
                         count -= 1;
                     }
-                    s.append(element.getLineNumber());
+                    s.append(":").append(element.getLineNumber());
                 } else {
                     skip = true;
                 }

File: test/org/traccar/helper/LogTest.java
Patch:
@@ -7,7 +7,7 @@ public class LogTest {
     
     @Test
     public void testLog() {
-        Assert.assertEquals("test - Exception (LogTest.java:10 < ...)", Log.exceptionStack(new Exception("test")));
+        Assert.assertEquals("test - Exception (LogTest:10 < ...)", Log.exceptionStack(new Exception("test")));
     }
 
 }

File: src/org/traccar/helper/Log.java
Patch:
@@ -172,7 +172,7 @@ public static String exceptionStack(Throwable exception) {
                         s.append("*:");
                     } else {
                         file = element.getFileName();
-                        s.append(file).append(":");
+                        s.append(file.substring(0, file.length() - 5)).append(":");
                         count -= 1;
                     }
                     s.append(element.getLineNumber());

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -140,7 +140,7 @@ protected Object decode(
 
         // Altitude
         String altitude = parser.group(index++);
-        if (speed != null) {
+        if (altitude != null) {
             position.setAltitude(Double.valueOf(altitude));
         }
 

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public class Gl200ProtocolDecoderTest extends ProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new Gl200Protocol());
+        
+        verify(decoder.decode(null, null,
+                "+RESP:GTFRI,0F0106,862193020451183,,,10,1,1,0.0,163,,-57.513617,-25.368191,20150918182145,,,,,,21235.0,,,,0,210100,,,,20150918182149,00B8$"));
 
         verify(decoder.decode(null, null,
                 "+RESP:GTOBD,1F0109,864251020135483,,gv500,0,78FFFF,,1,12613,,,,,,,,,,,,,,1286,0,0.0,0,17.1,3.379630,6.529701,20150813074639,0621,0030,51C0,A2B3,00,0.0,20150813074641,A7E6$"));

File: src/org/traccar/DistanceHandler.java
Patch:
@@ -15,12 +15,12 @@
  */
 package org.traccar;
 
+import java.math.BigDecimal;
+import java.math.RoundingMode;
 import org.traccar.helper.DistanceCalculator;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
 
-import java.math.BigDecimal;
-
 public class DistanceHandler extends BaseDataHandler {
 
     private Position getLastPosition(long deviceId) {
@@ -44,7 +44,7 @@ public Position calculateDistance(Position position) {
                     position.getLatitude(), position.getLongitude(),
                     last.getLatitude(), last.getLongitude());
 
-            distance = BigDecimal.valueOf(distance).setScale(2).doubleValue();
+            distance = BigDecimal.valueOf(distance).setScale(2, RoundingMode.HALF_EVEN).doubleValue();
         }
 
         position.set(Event.KEY_DISTANCE, distance);

File: src/org/traccar/Context.java
Patch:
@@ -125,7 +125,7 @@ public static void init(String[] arguments) throws Exception {
         }
 
         if (config.getBoolean("web.enable")) {
-            if (config.getString("web.type", "NEW").equals("NEW") || config.getString("web.type", "NEW").equals("API")) {
+            if (config.getString("web.type", "new").equals("new") || config.getString("web.type", "new").equals("api")) {
                 permissionsManager = new PermissionsManager(dataManager);
             }
             webServer = new WebServer(config, dataManager.getDataSource());

File: src/org/traccar/database/DataManager.java
Patch:
@@ -143,7 +143,7 @@ private String getQuery(String key) {
 
     private void initDatabaseSchema() throws SQLException {
 
-        if (config.getString("web.type", "NEW").equals("NEW") || config.getString("web.type", "NEW").equals("API")) {
+        if (config.getString("web.type", "new").equals("new") || config.getString("web.type", "new").equals("api")) {
 
             Connection connection = dataSource.getConnection();
             ResultSet result = connection.getMetaData().getTables(

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -197,7 +197,9 @@ protected Object decode(
                 position.set(Event.KEY_MNC, buf.readUnsignedByte());
                 position.set(Event.KEY_LAC, buf.readUnsignedShort());
                 position.set(Event.KEY_CELL, buf.readUnsignedShort() << 8 + buf.readUnsignedByte());
-                buf.skipBytes(lbsLength - 9);
+                if (lbsLength > 0) {
+                    buf.skipBytes(lbsLength - 9);
+                }
 
                 // Status
                 if (type == MSG_GPS_LBS_STATUS_1 || type == MSG_GPS_LBS_STATUS_2 || type == MSG_GPS_LBS_STATUS_3) {

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -1,6 +1,5 @@
 package org.traccar.protocol;
 
-import org.traccar.helper.TestIdentityManager;
 import org.jboss.netty.buffer.ChannelBuffers;
 import static org.junit.Assert.assertNull;
 import org.junit.Test;
@@ -16,6 +15,9 @@ public void testDecode() throws Exception {
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "787811010123456789012345100B3201000171930D0A"))));
+        
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
+                "787823120f081b121d37cb01c8e2cc08afd3c020d50201940701d600a1190041ee100576d1470d0a"))));
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "78781F120B081D112E10CC027AC7EB0C46584900148F01CC00287D001FB8000380810D0A"))));

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -59,7 +59,7 @@ public TotemProtocolDecoder(TotemProtocol protocol) {
             "(\\d{3})" +                        // Battery
             "(\\d{4})\\|" +                     // External Power
             "(?:(\\d+)\\|)?" +                  // ADC
-            "(\\p{XDigit}{8})\\|" +             // Location Code
+            "(\\p{XDigit}+)\\|" +               // Location Code
             "(\\d+)\\|" +                       // Temperature
             "(\\d+.\\d+)\\|" +                  // Odometer
             "\\d+\\|" +                         // Serial Number

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -25,6 +25,7 @@
 import org.jboss.netty.channel.ChannelHandlerContext;
 
 import org.traccar.BaseProtocolDecoder;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
 
@@ -105,7 +106,7 @@ else if (type == MSG_DATA) {
             double longitude = buf.readUnsignedInt() / (60.0 * 30000.0);
 
             // Speed
-            position.setSpeed(buf.readUnsignedByte());
+            position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedByte()));
 
             // Course
             position.setCourse(buf.readUnsignedShort());

File: src/org/traccar/protocol/Gps103ProtocolEncoder.java
Patch:
@@ -48,7 +48,7 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_POSITION_PERIODIC:
                 return formatCommand(command, "**,imei:{%s},C,{%s}", this, Command.KEY_UNIQUE_ID, Command.KEY_FREQUENCY);
             case Command.TYPE_ENGINE_STOP:
-                return formatCommand(command, "**,imei:{%s},J;", Command.KEY_UNIQUE_ID);
+                return formatCommand(command, "**,imei:{%s},J", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:
                 return formatCommand(command, "**,imei:{%s},K", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ALARM_ARM:

File: src/org/traccar/protocol/SuntechProtocolEncoder.java
Patch:
@@ -25,9 +25,9 @@ protected Object encodeCommand(Command command) {
 
         switch (command.getType()) {
             case Command.TYPE_ENGINE_STOP:
-                return formatCommand(command, "CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);
+                return formatCommand(command, "SA200CMD;{%s};02;Enable1\r", Command.KEY_UNIQUE_ID);
             case Command.TYPE_ENGINE_RESUME:
-                return formatCommand(command, "CMD;{%s};02;Disable1\r", Command.KEY_UNIQUE_ID);
+                return formatCommand(command, "SA200CMD;{%s};02;Disable1\r", Command.KEY_UNIQUE_ID);
         }
         
         return null;

File: test/org/traccar/protocol/Gps103ProtocolEncoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
         command.setType(Command.TYPE_POSITION_PERIODIC);
         command.set(Command.KEY_FREQUENCY, 300);
         
-        Assert.assertEquals("**,imei:123456789012345,C,05m;", encoder.encodeCommand(command));
+        Assert.assertEquals("**,imei:123456789012345,C,05m", encoder.encodeCommand(command));
 
     }
 

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -33,6 +33,7 @@ public Tk103ProtocolDecoder(Tk103Protocol protocol) {
         super(protocol);
     }
 
+    //088048003342 BR00 150807 A 1352.9871 N 10030.9084 E 000.0 110718 000.0 001010000 L00000000
     private static final Pattern pattern = Pattern.compile(
             "(\\d+)(,)?" +                 // Device ID
             ".{4},?" +                     // Command
@@ -45,7 +46,7 @@ public Tk103ProtocolDecoder(Tk103Protocol protocol) {
             "([EW]),?" +
             "(\\d+\\.\\d)(?:\\d*,)?" +     // Speed
             "(\\d{2})(\\d{2})(\\d{2}),?" + // Time (HHMMSS)
-            "(\\d+\\.?\\d+),?" +           // Course
+            "(\\d+\\.?\\d),?" +            // Course
             "([0-9a-fA-F]{8})?,?" +        // State
             "(?:L([0-9a-fA-F]+))?.*\\)?"); // Odometer
 

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "$$AE860990002922822|AA$GPRMC,051002.00,A,0439.26245,N,10108.94448,E,0.023,,140315,,,A*71|02.98|01.95|02.26|000000000000|20150314051003|13841157|105A3B1C|0000|0.0000|0005|5324"));
 
+        verify(decoder.decode(null, null,
+                "$$AE860990002922822|AA$GPRMC,051002.00,A,0439.26245,N,10108.94448,E,0.023,,140315,,,A*71|02.98|01.95|02.26|000000000000|20150314051003|13841157|105A3B1C|0000|0.0000|0005|5324\r"));
+
         assertNull(decoder.decode(null, null,
                 "$$BB862170017856731|AA$GPRMC,000000.00,V,0000.0000,N,00000.0000,E,000.0,000.0,000000,,,A*73|00.0|00.0|00.0|000000001000|20000000000000|13790000|00000000|00000000|00000000|0.0000|0007|8C23"));
 

File: src/org/traccar/model/Event.java
Patch:
@@ -77,6 +77,7 @@ public abstract class Event {
     public static final String KEY_FLAGS = "flags";
     public static final String KEY_CHARGE = "charge";
     public static final String KEY_IP = "ip";
+    public static final String KEY_ARCHIVE = "archive";
 
     // Starts with 1 not 0
     public static final String PREFIX_TEMP = "temp";

File: src/org/traccar/protocol/ApelProtocolDecoder.java
Patch:
@@ -146,7 +146,7 @@ else if (hasDeviceId() && (type == MSG_TYPE_CURRENT_GPS_DATA || type == MSG_TYPE
                 // Message index
                 int subtype = type;
                 if (type == MSG_TYPE_LOG_RECORDS) {
-                    position.set("archive", true);
+                    position.set(Event.KEY_ARCHIVE, true);
                     lastIndex = buf.readUnsignedInt() + 1;
                     position.set(Event.KEY_INDEX, lastIndex);
 

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -101,7 +101,7 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
 
                 // Message index
                 if (type == MSG_LOGMSG) {
-                    position.set("archive", true);
+                    position.set(Event.KEY_ARCHIVE, true);
                     int subtype = buf.readUnsignedShort();
                     if (subtype == MSG_ALARM) {
                         position.set(Event.KEY_ALARM, true);

File: test/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         MegastekProtocolDecoder decoder = new MegastekProtocolDecoder(new MegastekProtocol());
 
+        verify(decoder.decode(null, null,
+                "$MGV002,013777007536434,,R,010114,000057,V,0000.0000,N,00000.0000,E,00,00,00,99.9,0.000,0.00,0.0,80.263,510,89,2342,030B,,0000,0000,200,96,0, , ,,,,Timer;!"));
+
         verify(decoder.decode(null, null,
                 "STX,GerAL22,$GPRMC,174752.000,A,3637.060059,S,6416.2354,W,0.00,0.00,030812,,,A*55,F,,imei:861785000249353,05,180.6,Battery=100%,,1,722,310,0FA6,39D0;8F"));
 

File: src/org/traccar/database/DataManager.java
Patch:
@@ -210,17 +210,17 @@ private void mockData(long userId) {
                 Position position = new Position();
                 position.setDeviceId(device.getId());
 
-                position.setTime(JsonConverter.parseDate("2015-05-22T12:00:01"));
+                position.setTime(JsonConverter.parseDate("2015-05-22T12:00:01.000Z"));
                 position.setLatitude(-36.8785803);
                 position.setLongitude(174.7281713);
                 addPosition(position);
 
-                position.setTime(JsonConverter.parseDate("2015-05-22T12:00:02"));
+                position.setTime(JsonConverter.parseDate("2015-05-22T12:00:02.000Z"));
                 position.setLatitude(-36.8870932);
                 position.setLongitude(174.7473116);
                 addPosition(position);
 
-                position.setTime(JsonConverter.parseDate("2015-05-22T12:00:03"));
+                position.setTime(JsonConverter.parseDate("2015-05-22T12:00:03.000Z"));
                 position.setLatitude(-36.8932371);
                 position.setLongitude(174.7743053);
                 addPosition(position);

File: test/org/traccar/web/JsonConverterTest.java
Patch:
@@ -19,7 +19,7 @@ public void primitiveConversion() throws ParseException {
                 "\"int\": 42, " +
                 "\"double\": 41.99, " +
                 "\"string\": \"discworld\", " +
-                "\"date\":\"2015-07-09T19:02:17+0000\"" +
+                "\"date\":\"2015-07-09T19:02:17.000Z\"" +
                 "}"),
                 new Primitives());
 

File: src/org/traccar/web/JsonConverter.java
Patch:
@@ -37,7 +37,7 @@
 
 public class JsonConverter {
 
-    private static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+    private static final DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
 
     public static Date parseDate(String value) throws ParseException {
         return dateFormat.parse(value);

File: src/org/traccar/protocol/GoSafeProtocol.java
Patch:
@@ -19,6 +19,7 @@
 import org.jboss.netty.bootstrap.ServerBootstrap;
 import org.jboss.netty.channel.ChannelPipeline;
 import org.jboss.netty.handler.codec.string.StringDecoder;
+import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.BaseProtocol;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
@@ -36,7 +37,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '#'));
                 pipeline.addLast("stringDecoder", new StringDecoder());
-                pipeline.addLast("stringEncoder", new StringDecoder());
+                pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectDecoder", new GoSafeProtocolDecoder(GoSafeProtocol.this));
             }
         });

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -28,11 +28,11 @@
 
 public class UlbotechProtocolDecoder extends BaseProtocolDecoder {
 
-    private long timeZone;
+    private final long timeZone;
 
     public UlbotechProtocolDecoder(UlbotechProtocol protocol) {
         super(protocol);
-        timeZone = Context.getConfig().getInteger(protocol + ".timezone", 0);
+        timeZone = Context.getConfig().getInteger(getProtocolName() + ".timezone", 0);
     }
 
     private static final short DATA_GPS = 0x01;

File: src/org/traccar/protocol/Gt06Protocol.java
Patch:
@@ -28,7 +28,7 @@ public Gt06Protocol() {
         super("gt06");
         setSupportedCommands(
                 Command.TYPE_ENGINE_STOP,
-                Command.TYPE_ENGINE_STOP);
+                Command.TYPE_ENGINE_RESUME);
     }
 
     @Override

File: src/org/traccar/BaseProtocol.java
Patch:
@@ -42,7 +42,7 @@ public void setSupportedCommands(String... commands) {
     @Override
     public void sendCommand(ActiveDevice activeDevice, Command command) {
         if (!supportedCommands.contains(command.getType())) {
-            throw new RuntimeException("Command " + command + " is not supported in protocol " + getName());
+            throw new RuntimeException("Command " + command.getType() + " is not supported in protocol " + getName());
         }
         activeDevice.write(command);
     }

File: src/org/traccar/protocol/Gt06ProtocolEncoder.java
Patch:
@@ -40,7 +40,7 @@ protected Object encodeCommand(Command command) {
         int commandLength = serverFlagBit + content.length();
         int packetLength =  0x80 + content.length() + 2 + 2;
 
-        ChannelBuffer response = ChannelBuffers.directBuffer(10);
+        ChannelBuffer response = ChannelBuffers.dynamicBuffer();
         response.writeBytes(new byte[]{0x78, 0x78}); // Start Bit
         response.writeByte(packetLength); // Packet Length
         response.writeByte(0x80); // Protocol Number

File: src/org/traccar/web/CommandServlet.java
Patch:
@@ -5,8 +5,8 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.traccar.Context;
-import org.traccar.model.Command;
 import org.traccar.database.ActiveDevice;
+import org.traccar.model.Command;
 
 public class CommandServlet extends BaseServlet {
 
@@ -36,7 +36,7 @@ public ActiveDevice getActiveDevice(long deviceId) {
     private void send(HttpServletRequest req, HttpServletResponse resp) throws Exception {
 
         Command command = JsonConverter.objectFromJson(req.getReader(), new Command());
-        getActiveDevice(command.getDeviceId()).write(command);
+        getActiveDevice(command.getDeviceId()).sendCommand(command);
         sendResponse(resp.getWriter(), true);
     }
 

File: src/org/traccar/model/Command.java
Patch:
@@ -27,10 +27,11 @@ public Command create() {
     public static final String TYPE_POSITION_STOP = "positionStop";
     public static final String TYPE_ENGINE_STOP = "engineStop";
     public static final String TYPE_ENGINE_RESUME = "engineResume";
-    
+    public static final String TYPE_ALARM_ARM = "alarmArm";
+    public static final String TYPE_ALARM_DISARM = "alarmDisarm";
+
     public static final String KEY_UNIQUE_ID = "uniqueId";
     public static final String KEY_FREQUENCY = "frequency";
     public static final String KEY_DEVICE_PASSWORD = "devicePassword";
     
-
 }

File: test/org/traccar/protocol/Gps103ProtocolEncoderTest.java
Patch:
@@ -15,7 +15,7 @@ public void testDecode() throws Exception {
         
         Command command = new Command();
         command.setDeviceId(1);
-        command.setType(Command.TYPE_POSITION_FIX);
+        command.setType(Command.TYPE_POSITION_PERIODIC);
         
         Map<String, Object> other = new HashMap<>();
         other.put(Command.KEY_FREQUENCY, 300l);

File: src/org/traccar/protocol/CityeasyProtocol.java
Patch:
@@ -34,7 +34,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
         serverList.add(new TrackerServer(new ServerBootstrap(), this.getName()) {
             @Override
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -2, 0));
+                pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -4, 0));
                 pipeline.addLast("objectDecoder", new CityeasyProtocolDecoder(CityeasyProtocol.this));
             }
         });

File: test/org/traccar/protocol/Gps103ProtocolEncoderTest.java
Patch:
@@ -22,7 +22,7 @@ public void testDecode() throws Exception {
         
         command.setOther(other);
         
-        Assert.assertEquals("**,123456789012345,C,05m;", encoder.encodeCommand(command));
+        Assert.assertEquals("**,imei:123456789012345,C,05m;", encoder.encodeCommand(command));
 
     }
 

File: src/org/traccar/protocol/Gps103ProtocolEncoder.java
Patch:
@@ -46,9 +46,9 @@ protected Object encodeCommand(Command command) {
             case Command.TYPE_POSITION_FIX:
                 return formatCommand(command, "**,{%s},C,{%s};", this, Command.KEY_UNIQUE_ID, Command.KEY_FREQUENCY);
             case Command.TYPE_ENGINE_STOP:
-                return formatCommand(command, "**,{%s},K;", Command.KEY_UNIQUE_ID);
-            case Command.TYPE_ENGINE_RESUME:
                 return formatCommand(command, "**,{%s},J;", Command.KEY_UNIQUE_ID);
+            case Command.TYPE_ENGINE_RESUME:
+                return formatCommand(command, "**,{%s},K;", Command.KEY_UNIQUE_ID);
         }
         
         return null;

File: src/org/traccar/protocol/BoxProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2014 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2014 - 2015 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -43,7 +43,7 @@ public BoxProtocolDecoder(BoxProtocol protocol) {
             "(-?\\d+\\.\\d+)," +          // Longitude
             "(\\d+\\.?\\d*)," +           // Speed
             "(\\d+\\.?\\d*)," +           // Course
-            "(\\d+)," +                   // Distance
+            "(\\d+\\.?\\d*)," +           // Distance
             "(\\d+)," +                   // Event
             "(\\d+)" +                    // Status
             ".*");
@@ -62,7 +62,7 @@ protected Object decode(
             identify(id, channel);
         }
         
-        else if (sentence.startsWith("L,")) {
+        else if (hasDeviceId() && sentence.startsWith("L,")) {
 
             // Parse message
             Matcher parser = pattern.matcher(sentence);

File: src/org/traccar/protocol/TotemProtocol.java
Patch:
@@ -22,6 +22,7 @@
 import org.traccar.TrackerServer;
 
 import java.util.List;
+import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.traccar.model.Command;
 
 public class TotemProtocol extends BaseProtocol {
@@ -39,6 +40,7 @@ public void initTrackerServers(List<TrackerServer> serverList) {
             protected void addSpecificHandlers(ChannelPipeline pipeline) {
                 pipeline.addLast("frameDecoder", new TotemFrameDecoder());
                 pipeline.addLast("stringDecoder", new StringDecoder());
+                pipeline.addLast("stringEncoder", new StringEncoder());
                 pipeline.addLast("objectDecoder", new TotemProtocolDecoder(TotemProtocol.this));
                 pipeline.addLast("objectEncoder", new TotemProtocolEncoder());
             }

File: test/org/traccar/protocol/Gps103ProtocolEncoderTest.java
Patch:
@@ -22,7 +22,7 @@ public void testDecode() throws Exception {
         
         command.setOther(other);
         
-        Assert.assertEquals("**,imei:123456789012345,C,05m", encoder.encodeCommand(command));
+        Assert.assertEquals("**,imei:123456789012345,C,05m;", encoder.encodeCommand(command));
 
     }
 

File: test/org/traccar/protocol/NoranProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
 
         NoranProtocolDecoder decoder = new NoranProtocolDecoder(new NoranProtocol());
         
+        //verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
+        //        "28003200c38000d900fcc97a416b1a7a42b43eef3d4e523039473034383737000000000092fcda4a"))));
+        
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "3400080001090000000000001D43A29BE842E62520424E523039423036363932000031322D30332D30352031313A34373A343300"))));
         

File: src/org/traccar/ExtendedObjectDecoder.java
Patch:
@@ -41,7 +41,7 @@ public void handleUpstream(
             ctx.sendUpstream(evt);
         } else if (decodedMessage != null) {
             if (decodedMessage instanceof Collection) {
-                for (Object o : (Collection) e.getMessage()) {
+                for (Object o : (Collection) decodedMessage) {
                     fireMessageReceived(ctx, o, e.getRemoteAddress());
                 }
             } else {

File: src/org/traccar/model/Event.java
Patch:
@@ -42,13 +42,14 @@ public abstract class Event {
     public void setDeviceTime(Date deviceTime) { this.deviceTime = deviceTime; }
 
     private Map<String, Object> other = new LinkedHashMap<>();
+    public Map<String, Object> getOther() { return other; }
+    public void setOther(Map<String, Object> other) { this.other = other; }
+
     public void set(String key, Object value) {
         if (value != null && (!(value instanceof String) || !((String) value).isEmpty())) {
             other.put(key, value);
         }
     }
-    public void setOther(Map<String, Object> other) { this.other = other; }
-    public Map<String, Object> getOther() { return other; }
 
     public static final String KEY_INDEX = "index";
     public static final String KEY_HDOP = "hdop";

File: src/org/traccar/protocol/GpsMarkerProtocol.java
Patch:
@@ -23,7 +23,6 @@
 import org.traccar.BaseProtocol;
 import org.traccar.CharacterDelimiterFrameDecoder;
 import org.traccar.TrackerServer;
-import org.traccar.command.*;
 
 import java.util.List;
 import java.util.Map;

File: src/org/traccar/web/WebServer.java
Patch:
@@ -74,7 +74,7 @@ public WebServer(Config config) {
         servletHandler.addServlet(new ServletHolder(new UserServlet()), "/user/*");
         servletHandler.addServlet(new ServletHolder(new DeviceServlet()), "/device/*");
         servletHandler.addServlet(new ServletHolder(new PositionServlet()), "/position/*");
-        servletHandler.addServlet(new ServletHolder(new CommandsServlet()), "/commands/*");
+        servletHandler.addServlet(new ServletHolder(new CommandServlet()), "/command/*");
         servletHandler.addServlet(new ServletHolder(new MainServlet()), "/*");
 
         /*ResourceHandler mobileResourceHandler = new ResourceHandler();

File: test/org/traccar/protocol/RitiProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
 
         RitiProtocolDecoder decoder = new RitiProtocolDecoder(new RitiProtocol());
 
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
+                "3b28a2a2056315316d4000008100000000000000005f710000244750524d432c3138303535332e3030302c412c353532342e383437312c4e2c30313133342e313837382c452c302e30302c2c3032313231332c2c2c412a37340d0a00000000000000000000000000000000040404"))));
+
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "3b2864a3056300006d40000003000000000000000000000000244750524d432c3231313734332e3030302c412c313335372e333637352c4e2c31303033362e363939322c452c302e30302c2c3031303931342c2c2c412a37380d0a00000000000000000000000000000000040404"))));
 

File: src/org/traccar/Context.java
Patch:
@@ -94,7 +94,9 @@ public static void init(String[] arguments) throws Exception {
             Log.setupLogger(config);
         }
 
-        dataManager = new DataManager(config);
+        if (config.hasKey("database.url")) {
+            dataManager = new DataManager(config);
+        }
         identityManager = dataManager;
 
         connectionManager = new ConnectionManager(dataManager);

File: src/org/traccar/ServerManager.java
Patch:
@@ -33,9 +33,9 @@ public class ServerManager {
 
     private final List<TrackerServer> serverList = new LinkedList<>();
 
-    public void init() throws Exception {
+    public ServerManager() throws Exception {
 
-        List<String> names = new LinkedList<String>();
+        List<String> names = new LinkedList<>();
         String packageName = "org.traccar.protocol";
         String packagePath = packageName.replace('.', '/');
         URL packageUrl = Thread.currentThread().getContextClassLoader().getResource(packagePath);

File: src/org/traccar/DefaultDataHandler.java
Patch:
@@ -26,7 +26,6 @@ protected Position handlePosition(Position position) {
         try {
             Context.getDataManager().addPosition(position);
             Context.getDataManager().updateLatestPosition(position);
-            Context.getConnectionManager().update(position);
         } catch (Exception error) {
             Log.warning(error);
         }

File: src/org/traccar/MainEventHandler.java
Patch:
@@ -43,6 +43,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {
                 s.append("lat: ").append(position.getLatitude()).append(", ");
                 s.append("lon: ").append(position.getLongitude());
                 Log.info(s.toString());
+
+                Context.getConnectionManager().update(position);
             }
         }
     }

File: src/org/traccar/database/IdentityManager.java
Patch:
@@ -19,6 +19,8 @@
 
 public interface IdentityManager {
     
+    public Device getDeviceById(long id);
+    
     public Device getDeviceByUniqueId(String uniqueId) throws Exception;
 
 }

File: src/org/traccar/BaseProtocol.java
Patch:
@@ -26,7 +26,7 @@
 public abstract class BaseProtocol implements Protocol {
 
     private final String name;
-    private Map<CommandType, CommandTemplate> commandTemplates = new HashMap<CommandType, CommandTemplate>();
+    private Map<CommandType, CommandTemplate> commandTemplates = new HashMap<>();
 
     public BaseProtocol(String name) {
         this.name = name;

File: src/org/traccar/ServerManager.java
Patch:
@@ -31,7 +31,7 @@
 
 public class ServerManager {
 
-    private final List<TrackerServer> serverList = new LinkedList<TrackerServer>();
+    private final List<TrackerServer> serverList = new LinkedList<>();
 
     public void init() throws Exception {
 

File: src/org/traccar/command/FixPositioningCommand.java
Patch:
@@ -10,7 +10,7 @@ public class FixPositioningCommand extends GpsCommand {
 
     @Override
     public Map<String, Object> getReplacements() {
-        Map<String, Object> replacements = new HashMap<String, Object>();
+        Map<String, Object> replacements = new HashMap<>();
         replacements.put(FREQUENCY, data);
         return replacements;
     }

File: src/org/traccar/command/NoParameterCommand.java
Patch:
@@ -6,6 +6,6 @@
 public class NoParameterCommand extends GpsCommand {
     @Override
     public Map<String, Object> getReplacements() {
-        return new HashMap<String, Object>();
+        return new HashMap<>();
     }
 }

File: src/org/traccar/command/StringCommandTemplate.java
Patch:
@@ -8,7 +8,7 @@
 public class StringCommandTemplate<T extends GpsCommand> implements CommandTemplate<T> {
 
     private String messageTemplate;
-    private Map<Class<?>, CommandValueConversion> converters = new HashMap<Class<?>, CommandValueConversion>();
+    private Map<Class<?>, CommandValueConversion> converters = new HashMap<>();
 
     public StringCommandTemplate(String template, Object... replacements) {
         this.messageTemplate = String.format(template, replacements);

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -28,9 +28,9 @@
 
 public class PermissionsManager {
     
-    private final Map<Long, User> users = new HashMap<Long, User>();
+    private final Map<Long, User> users = new HashMap<>();
     
-    private final Map<Long, Set<Long>> permissions = new HashMap<Long, Set<Long>>();
+    private final Map<Long, Set<Long>> permissions = new HashMap<>();
     
     private Set<Long> getNotNull(long userId) {
         if (!permissions.containsKey(userId)) {

File: src/org/traccar/http/AsyncServlet.java
Patch:
@@ -57,10 +57,10 @@ public class AsyncSession {
         
         private boolean destroyed;
         private final long userId;
-        private final Set<Long> devices = new HashSet<Long>();
+        private final Set<Long> devices = new HashSet<>();
         private Timeout sessionTimeout;
         private Timeout requestTimeout;
-        private final Map<Long, Position> positions = new HashMap<Long, Position>();
+        private final Map<Long, Position> positions = new HashMap<>();
         private AsyncContext activeContext;
         
         private void logEvent(String message) {
@@ -177,7 +177,7 @@ private synchronized void response() {
         
     }
     
-    private static final Map<Long, AsyncSession> asyncSessions = new HashMap<Long, AsyncSession>();
+    private static final Map<Long, AsyncSession> asyncSessions = new HashMap<>();
     
     public static void sessionRefreshUser(long userId) {
         asyncSessions.remove(userId);

File: src/org/traccar/model/Event.java
Patch:
@@ -41,7 +41,7 @@ public abstract class Event {
     public Date getDeviceTime() { return deviceTime; }
     public void setDeviceTime(Date deviceTime) { this.deviceTime = deviceTime; }
 
-    private final Map<String, Object> other = new LinkedHashMap<String, Object>();
+    private final Map<String, Object> other = new LinkedHashMap<>();
     public void set(String key, Object value) {
         if (value != null && (!(value instanceof String) || !((String) value).isEmpty())) {
             other.put(key, value);

File: src/org/traccar/protocol/ApelProtocolDecoder.java
Patch:
@@ -131,7 +131,7 @@ else if (type == MSG_TYPE_LAST_LOG_INDEX) {
 
         // Position
         else if (hasDeviceId() && (type == MSG_TYPE_CURRENT_GPS_DATA || type == MSG_TYPE_STATE_FULL_INFO_T104 || type == MSG_TYPE_LOG_RECORDS)) {
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
 
             int recordCount = 1;
             if (type == MSG_TYPE_LOG_RECORDS) {

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -91,7 +91,7 @@ protected Object decode(
         // Send acknowledgement
         sendResponse(channel, remoteAddress, id, index);
 
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
 
         while (buf.readableBytes() >= MIN_DATA_LENGTH) {
 

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -140,7 +140,7 @@ protected Object decode(
 
             int count = buf.readUnsignedByte() & 0x0f;
             buf.readUnsignedShort(); // total count
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
 
             for (int i = 0; i < count; i++) {
                 positions.add(decodePosition(buf, true));

File: src/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -54,7 +54,7 @@ protected Object decode(
             return null;
         }
 
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
 
         while (buf.readableBytes() > 1) {
 
@@ -79,7 +79,7 @@ protected Object decode(
 
                     // Read masks
                     int mask;
-                    List<Integer> masks = new LinkedList<Integer>();
+                    List<Integer> masks = new LinkedList<>();
                     do {
                         mask = buf.readUnsignedShort();
                         masks.add(mask);

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -150,7 +150,7 @@ protected Object decode(
             
             int count = buf.readUnsignedByte();
 
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
 
             for (int i = 0; i < count; i++) {
 

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -51,7 +51,7 @@ public GalileoProtocolDecoder(GalileoProtocol protocol) {
     private static final int TAG_REFRIGERATOR = 0x5b;
     private static final int TAG_PRESSURE = 0x5c;
     
-    private static final Map<Integer, Integer> tagLengthMap = new HashMap<Integer, Integer>();
+    private static final Map<Integer, Integer> tagLengthMap = new HashMap<>();
     
     static {
         int[] l1 = {0x01,0x02,0x35,0x43,0xc4,0xc5,0xc6,0xc7,0xc8,0xc9,0xca,0xcb,0xcc,0xcd,0xce,0xcf,0xd0,0xd1,0xd2,0xd5,0x88,0x8a,0x8b,0x8c,0xa0,0xaf,0xa1,0xa2,0xa3,0xa4,0xa5,0xa6,0xa7,0xa8,0xa9,0xaa,0xab,0xac,0xad,0xae};

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -178,7 +178,7 @@ private Position decodeRegularMessage(Channel channel, ChannelBuffer buf) {
     }
 
     private List<Position> decodeBinaryMessage(Channel channel, ChannelBuffer buf) {
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
         
         String flag = buf.toString(2, 1, Charset.defaultCharset());
         int index = ChannelBufferTools.find(buf, 0, buf.readableBytes(), ",");

File: src/org/traccar/protocol/Mta6ProtocolDecoder.java
Patch:
@@ -115,7 +115,7 @@ public Date readTime(ChannelBuffer buf) {
     }
 
     private List<Position> parseFormatA(ChannelBuffer buf) {
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
         
         FloatReader latitudeReader = new FloatReader();
         FloatReader longitudeReader = new FloatReader();

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -77,7 +77,7 @@ protected Object decode(
                 return null;
             }
 
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
             
             for (int i = 0; i < (header & 0x0f); i++) {
                 

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -88,7 +88,7 @@ protected Object decode(
                 return null;
             }
 
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
             ChannelBuffer buf = request.getContent();
             
             while (buf.readableBytes() > 2) {

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -87,7 +87,7 @@ protected Object decode(Channel channel, SocketAddress remoteAddress, Object msg
 
         // Position
         else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
 
             int recordCount = 1;
             if (type == MSG_LOGMSG) {

File: src/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -53,7 +53,7 @@ protected Object decode(
         int type = buf.readUnsignedByte();
         
         if (type == COMMAND_RECORDS) {
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
 
             buf.readUnsignedByte(); // records left
             int count = buf.readUnsignedByte();

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -53,7 +53,7 @@ private void parseIdentification(Channel channel, ChannelBuffer buf) {
     private static final int CODEC_12 = 0x0C;
     
     private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
         
         buf.skipBytes(4); // marker
         buf.readUnsignedInt(); // data length

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ protected Object decode(
         String status = parser.group(2);
         
         String[] messages = sentence.substring(sentence.indexOf('\n') + 1).split("\r\n");
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
         
         for (String message : messages) {
             parser = patternPosition.matcher(message);

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -58,7 +58,7 @@ protected Object decode(
             return null;
         }
 
-        List<Position> positions = new LinkedList<Position>();
+        List<Position> positions = new LinkedList<>();
         
         while (buf.readable()) {
             
@@ -137,7 +137,7 @@ protected Object decode(
                         break;
                     case 24:
                         {
-                            Set<Integer> temps = new LinkedHashSet<Integer>();
+                            Set<Integer> temps = new LinkedHashSet<>();
                             int temp = buf.readUnsignedByte();
                             for (int i = 3; i >= 0; i--) {
                                 int n = (temp >> (2 * i)) & 0x03;

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -200,7 +200,7 @@ else if (sentence.startsWith("#SD#") || sentence.startsWith("#D#")) {
         else if (sentence.startsWith("#B#")) {
             
             String[] messages = sentence.substring(sentence.indexOf('#', 1) + 1).split("\\|");
-            List<Position> positions = new LinkedList<Position>();
+            List<Position> positions = new LinkedList<>();
 
             for (String message : messages) {
                 Position position = decodePosition(message);

File: src/org/traccar/database/DataManager.java
Patch:
@@ -200,9 +200,7 @@ private void mockData(long userId) {
                 
                 updateLatestPosition(position);
 
-            } catch (SQLException error) {
-                Log.warning(error);
-            } catch (ParseException error) {
+            } catch (SQLException | ParseException error) {
                 Log.warning(error);
             }
         }

File: src/org/traccar/http/BaseServlet.java
Patch:
@@ -38,6 +38,8 @@ protected final void service(HttpServletRequest req, HttpServletResponse resp) t
             command = "";
         }
         try {
+            resp.setContentType("application/json");
+            resp.setCharacterEncoding("UTF-8");
             if (!handle(command, req, resp)) {
                 resp.sendError(HttpServletResponse.SC_BAD_REQUEST);
             }

File: src/org/traccar/http/AsyncServlet.java
Patch:
@@ -27,9 +27,7 @@
 import javax.json.Json;
 import javax.json.JsonObjectBuilder;
 import javax.servlet.AsyncContext;
-import javax.servlet.ServletException;
 import javax.servlet.ServletResponse;
-import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import org.jboss.netty.util.Timeout;
@@ -39,7 +37,6 @@
 import org.traccar.database.ConnectionManager;
 import org.traccar.helper.Log;
 import org.traccar.model.Position;
-import org.traccar.model.User;
 
 public class AsyncServlet extends BaseServlet {
 

File: src/org/traccar/Context.java
Patch:
@@ -90,6 +90,7 @@ public static void init(String[] arguments) throws Exception {
         }
 
         dataManager = new DataManager(properties);
+
         connectionManager = new ConnectionManager();
         if (!Boolean.valueOf(properties.getProperty("web.old"))) {
             permissionsManager = new PermissionsManager();
@@ -112,7 +113,6 @@ public static void init(String[] arguments) throws Exception {
 
         serverManager = new ServerManager();
 
-        dataManager.initDatabaseSchema();
         connectionManager.init(dataManager);
         serverManager.init();
     }

File: src/org/traccar/http/DeviceServlet.java
Patch:
@@ -47,6 +47,7 @@ private void add(HttpServletRequest req, HttpServletResponse resp) throws Except
         Device device = JsonConverter.objectFromJson(req.getReader(), new Device());
         Context.getDataManager().addDevice(device);
         Context.getDataManager().linkDevice(getUserId(req), device.getId());
+        Context.getPermissionsManager().refresh();
         sendResponse(resp.getWriter(), JsonConverter.objectToJson(device));
     }
     
@@ -61,6 +62,7 @@ private void remove(HttpServletRequest req, HttpServletResponse resp) throws Exc
         Device device = JsonConverter.objectFromJson(req.getReader(), new Device());
         Context.getPermissionsManager().checkDevice(getUserId(req), device.getId());
         Context.getDataManager().removeDevice(device);
+        Context.getPermissionsManager().refresh();
         sendResponse(resp.getWriter(), true);
     }
 

File: src/org/traccar/http/UserServlet.java
Patch:
@@ -48,6 +48,7 @@ private void add(HttpServletRequest req, HttpServletResponse resp) throws Except
         User user = JsonConverter.objectFromJson(req.getReader(), new User());
         Context.getPermissionsManager().checkUser(getUserId(req), user.getId());
         Context.getDataManager().addUser(user);
+        Context.getPermissionsManager().refresh();
         sendResponse(resp.getWriter(), JsonConverter.objectToJson(user));
     }
     
@@ -59,13 +60,15 @@ private void update(HttpServletRequest req, HttpServletResponse resp) throws Exc
             Context.getPermissionsManager().checkUser(getUserId(req), user.getId());
         }
         Context.getDataManager().updateUser(user);
+        Context.getPermissionsManager().refresh();
         sendResponse(resp.getWriter(), true);
     }
     
     private void remove(HttpServletRequest req, HttpServletResponse resp) throws Exception {
         User user = JsonConverter.objectFromJson(req.getReader(), new User());
         Context.getPermissionsManager().checkUser(getUserId(req), user.getId());
         Context.getDataManager().removeUser(user);
+        Context.getPermissionsManager().refresh();
         sendResponse(resp.getWriter(), true);
     }
 

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -123,9 +123,9 @@ protected Object decode(
 
         // Speed
         if (Boolean.valueOf(Context.getProps().getProperty(getProtocolName() + ".mph"))) {
-            position.setSpeed(UnitsConverter.knotsFromKph(Double.valueOf(parser.group(index++))));
-        } else {
             position.setSpeed(UnitsConverter.knotsFromMph(Double.valueOf(parser.group(index++))));
+        } else {
+            position.setSpeed(UnitsConverter.knotsFromKph(Double.valueOf(parser.group(index++))));
         }
 
         // Time

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -130,8 +130,8 @@ protected Object decode(
             position.setCourse(buf.readUnsignedShort() % 360);
             
             int flags = buf.readUnsignedByte();
-            position.setLatitude((flags & 0x01) == 0 ? -lat : lat);
-            position.setLongitude((flags & 0x02) == 0 ? -lon : lon);
+            position.setLatitude((flags & 0x02) == 0 ? -lat : lat);
+            position.setLongitude((flags & 0x01) == 0 ? -lon : lon);
             position.setValid((flags & 0x0C) > 0);
             position.set(Event.KEY_SATELLITES, flags >> 4);
             

File: src/org/traccar/TrackerServer.java
Patch:
@@ -94,7 +94,7 @@ public void setAddress(String address) {
     /**
      * Set endianness
      */
-    void setEndianness(ByteOrder byteOrder) {
+    public void setEndianness(ByteOrder byteOrder) {
         bootstrap.setOption("bufferFactory", new HeapChannelBufferFactory(byteOrder));
         bootstrap.setOption("child.bufferFactory", new HeapChannelBufferFactory(byteOrder));
     }

File: src/org/traccar/http/WebServer.java
Patch:
@@ -55,6 +55,7 @@ public WebServer() {
             servletHandler.addServlet(new ServletHolder(new UserServlet()), "/user/*");
             servletHandler.addServlet(new ServletHolder(new DeviceServlet()), "/device/*");
             servletHandler.addServlet(new ServletHolder(new PositionServlet()), "/position/*");
+            servletHandler.addServlet(new ServletHolder(new CommandsServlet()), "/commands/*");
             servletHandler.addServlet(new ServletHolder(new MainServlet()), "/*");
 
             /*ResourceHandler mobileResourceHandler = new ResourceHandler();

File: src/org/traccar/protocol/ApelProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public class ApelProtocolDecoder extends BaseProtocolDecoder {
     private long lastIndex;
     private long newIndex;
 
-    public ApelProtocolDecoder(String protocol) {
+    public ApelProtocolDecoder(ApelProtocol protocol) {
         super(protocol);
     }
 
@@ -120,7 +120,7 @@ protected Object decode(
             int length = buf.readUnsignedShort();
             buf.skipBytes(length);
             length = buf.readUnsignedShort();
-            identify(buf.readBytes(length).toString(Charset.defaultCharset()));
+            identify(buf.readBytes(length).toString(Charset.defaultCharset()), channel);
         }
         
         else if (type == MSG_TYPE_LAST_LOG_INDEX) {
@@ -142,7 +142,7 @@ else if (hasDeviceId() && (type == MSG_TYPE_CURRENT_GPS_DATA || type == MSG_TYPE
 
             for (int j = 0; j < recordCount; j++) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 // Message index

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class AplicomProtocolDecoder extends BaseProtocolDecoder {
 
-    public AplicomProtocolDecoder(String protocol) {
+    public AplicomProtocolDecoder(AplicomProtocol protocol) {
         super(protocol);
     }
 
@@ -131,8 +131,8 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
-        if (!identify(imei)) {
+        position.setProtocol(getProtocolName());
+        if (!identify(imei, channel)) {
             return null;
         }
 

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class Ardi01ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Ardi01ProtocolDecoder(String protocol) {
+    public Ardi01ProtocolDecoder(Ardi01Protocol protocol) {
         super(protocol);
     }
 
@@ -62,11 +62,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Detect device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@
 
 public class AtrackProtocolDecoder extends BaseProtocolDecoder {
 
-    public AtrackProtocolDecoder(String protocol) {
+    public AtrackProtocolDecoder(AtrackProtocol protocol) {
         super(protocol);
     }
 
@@ -87,7 +87,7 @@ protected Object decode(
 
         // Get device id
         long id = buf.readLong();
-        if (!identify(String.valueOf(id))) {
+        if (!identify(String.valueOf(id), channel, remoteAddress)) {
             return null;
         }
 
@@ -101,7 +101,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Date and time
             position.setTime(new Date(buf.readUnsignedInt() * 1000)); // gps time

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ private static double convertCoordinate(short degrees, int raw) {
         return (degrees + seconds) * ((raw & 0x0f) == 0 ? -1 : 1);
     }
 
-    public AutoFon45ProtocolDecoder(String protocol) {
+    public AutoFon45ProtocolDecoder(AutoFon45Protocol protocol) {
         super(protocol);
     }
 
@@ -51,7 +51,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
             buf.readBytes(bytes);
 
             String imei = ChannelBufferTools.readHexString(ChannelBuffers.wrappedBuffer(bytes, 1, 16), 16).substring(1);
-            if (!identify(imei)) {
+            if (!identify(imei, channel)) {
                 return null;
             }
 
@@ -67,7 +67,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             short status = buf.readUnsignedByte();

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class AutoFonProtocolDecoder extends BaseProtocolDecoder {
 
-    public AutoFonProtocolDecoder(String protocol) {
+    public AutoFonProtocolDecoder(AutoFonProtocol protocol) {
         super(protocol);
     }
 
@@ -46,7 +46,7 @@ private Position decodePosition(ChannelBuffer buf, boolean history) {
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         position.setDeviceId(getDeviceId());
 
         if (!history) {
@@ -121,7 +121,7 @@ protected Object decode(
             buf.readUnsignedByte(); // software version
 
             String imei = ChannelBufferTools.readHexString(buf, 16).substring(1);
-            if (!identify(imei)) {
+            if (!identify(imei, channel)) {
                 return null;
             }
 

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class Avl301ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Avl301ProtocolDecoder(String protocol) {
+    public Avl301ProtocolDecoder(Avl301Protocol protocol) {
         super(protocol);
     }
 
@@ -72,7 +72,7 @@ protected Object decode(
 
         if (type == MSG_LOGIN) {
 
-            if (identify(readImei(buf))) {
+            if (identify(readImei(buf), channel)) {
                 sendResponse(channel, type);
             }
 
@@ -85,7 +85,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Date and time(6)
             Calendar time = Calendar.getInstance(TimeZone.getTimeZone("UTC"));

File: src/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class BceProtocolDecoder extends BaseProtocolDecoder {
 
-    public BceProtocolDecoder(String protocol) {
+    public BceProtocolDecoder(BceProtocol protocol) {
         super(protocol);
     }
 
@@ -50,7 +50,7 @@ protected Object decode(
         ChannelBuffer buf = (ChannelBuffer) msg;
         
         String imei = String.format("%015d", buf.readLong());
-        if (!identify(imei)) {
+        if (!identify(imei, channel)) {
             return null;
         }
 
@@ -65,7 +65,7 @@ protected Object decode(
             while (buf.readerIndex() < dataEnd) {
 
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 int structEnd = buf.readUnsignedByte() + buf.readerIndex();

File: src/org/traccar/protocol/BoxProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class BoxProtocolDecoder extends BaseProtocolDecoder {
 
-    public BoxProtocolDecoder(String protocol) {
+    public BoxProtocolDecoder(BoxProtocol protocol) {
         super(protocol);
     }
 
@@ -58,7 +58,7 @@ protected Object decode(
             
             int index = sentence.indexOf(',', 2) + 1;
             String id = sentence.substring(index, sentence.indexOf(',', index));
-            identify(id);
+            identify(id, channel);
         }
         
         else if (sentence.startsWith("L,")) {
@@ -72,7 +72,7 @@ else if (sentence.startsWith("L,")) {
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             Integer index = 1;
 

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class CalAmpProtocolDecoder extends BaseProtocolDecoder {
 
-    public CalAmpProtocolDecoder(String protocol) {
+    public CalAmpProtocolDecoder(CalAmpProtocol protocol) {
         super(protocol);
     }
 
@@ -109,7 +109,7 @@ protected Object decode(
                     }
                 }
 
-                identify(String.valueOf(id));
+                identify(String.valueOf(id), channel, remoteAddress);
             }
 
             // Identifier type
@@ -160,7 +160,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Location data
             position.setTime(new Date(buf.readUnsignedInt() * 1000));

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class CarTrackProtocolDecoder extends BaseProtocolDecoder {
 
-    public CarTrackProtocolDecoder(String protocol) {
+    public CarTrackProtocolDecoder(CarTrackProtocol protocol) {
         super(protocol);
     }
 
@@ -70,11 +70,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Get device by unique identifier
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/CarscopProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class CarscopProtocolDecoder extends BaseProtocolDecoder {
 
-    public CarscopProtocolDecoder(String protocol) {
+    public CarscopProtocolDecoder(CarscopProtocol protocol) {
         super(protocol);
     }
 
@@ -58,7 +58,7 @@ protected Object decode(
         int index = sentence.indexOf("UB05");
         if (index != -1) {
             String imei = sentence.substring(index + 4, index + 4 + 15);
-            identify(imei);
+            identify(imei, channel);
         }
         if (!hasDeviceId()) {
             return null;
@@ -73,7 +73,7 @@ protected Object decode(
         // Create new position
         Position position = new Position();
         position.setDeviceId(getDeviceId());
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         index = 1;
 
         // Time

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@
 
 public class CastelProtocolDecoder extends BaseProtocolDecoder {
 
-    public CastelProtocolDecoder(String protocol) {
+    public CastelProtocolDecoder(CastelProtocol protocol) {
         super(protocol);
     }
 
@@ -73,9 +73,9 @@ protected Object decode(
         } else if (type == MSG_LOGIN || type == MSG_GPS) {
             
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             
-            if (!identify(id.toString(Charset.defaultCharset()).trim())) {
+            if (!identify(id.toString(Charset.defaultCharset()).trim(), channel, remoteAddress)) {
                 return null;
             } else if (type == MSG_LOGIN) {
 

File: src/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class CellocatorProtocolDecoder extends BaseProtocolDecoder {
 
-    public CellocatorProtocolDecoder(String protocol) {
+    public CellocatorProtocolDecoder(CellocatorProtocol protocol) {
         super(protocol);
     }
 
@@ -104,10 +104,10 @@ protected Object decode(
         // Parse location
         if (type == MSG_CLIENT_STATUS) {
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             
             // Device identifier
-            if (!identify(String.valueOf(deviceUniqueId))) {
+            if (!identify(String.valueOf(deviceUniqueId), channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class EasyTrackProtocolDecoder extends BaseProtocolDecoder {
 
-    public EasyTrackProtocolDecoder(String protocol) {
+    public EasyTrackProtocolDecoder(EasyTrackProtocol protocol) {
         super(protocol);
     }
 
@@ -73,12 +73,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class EelinkProtocolDecoder extends BaseProtocolDecoder {
 
-    public EelinkProtocolDecoder(String protocol) {
+    public EelinkProtocolDecoder(EelinkProtocol protocol) {
         super(protocol);
     }
 
@@ -84,7 +84,7 @@ protected Object decode(
         }
         
         if (type == MSG_LOGIN) {
-            identify(ChannelBufferTools.readHexString(buf, 16).substring(1));
+            identify(ChannelBufferTools.readHexString(buf, 16).substring(1), channel);
         }
         
         else if (hasDeviceId() &&
@@ -97,7 +97,7 @@ else if (hasDeviceId() &&
             Position position = new Position();
             position.setDeviceId(getDeviceId());
             
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.set(Event.KEY_INDEX, index);
             
             // Location

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class GalileoProtocolDecoder extends BaseProtocolDecoder {
 
-    public GalileoProtocolDecoder(String protocol) {
+    public GalileoProtocolDecoder(GalileoProtocol protocol) {
         super(protocol);
     }
 
@@ -91,7 +91,7 @@ protected Object decode(
         Set<Integer> tags = new HashSet<Integer>();
         boolean hasLocation = false;
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         
         while (buf.readerIndex() < length) {
 
@@ -112,7 +112,7 @@ protected Object decode(
                 case TAG_IMEI:
                     String imei = buf.toString(buf.readerIndex(), 15, Charset.defaultCharset());
                     buf.skipBytes(imei.length());
-                    identify(imei);
+                    identify(imei, channel);
                     break;
 
                 case TAG_DATE:

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class GatorProtocolDecoder extends BaseProtocolDecoder {
 
-    public GatorProtocolDecoder(String protocol) {
+    public GatorProtocolDecoder(GatorProtocol protocol) {
         super(protocol);
     }
 
@@ -70,10 +70,10 @@ protected Object decode(
             
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Identification
-            if (!identify(id)) {
+            if (!identify(id, channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class GoSafeProtocolDecoder extends BaseProtocolDecoder {
 
-    public GoSafeProtocolDecoder(String protocol) {
+    public GoSafeProtocolDecoder(GoSafeProtocol protocol) {
         super(protocol);
     }
 
@@ -65,12 +65,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/GotopProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class GotopProtocolDecoder extends BaseProtocolDecoder {
 
-    public GotopProtocolDecoder(String protocol) {
+    public GotopProtocolDecoder(GotopProtocol protocol) {
         super(protocol);
     }
 
@@ -61,11 +61,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class Gps103ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Gps103ProtocolDecoder(String protocol) {
+    public Gps103ProtocolDecoder(Gps103Protocol protocol) {
         super(protocol);
     }
 
@@ -90,13 +90,13 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
         String imei = parser.group(index++);
-        if (!identify(imei)) {
+        if (!identify(imei, channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class Gt02ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Gt02ProtocolDecoder(String protocol) {
+    public Gt02ProtocolDecoder(Gt02Protocol protocol) {
         super(protocol);
     }
 
@@ -77,11 +77,11 @@ else if (type == MSG_DATA) {
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.set(Event.KEY_INDEX, index);
 
             // Get device id
-            if (!identify(imei)) {
+            if (!identify(imei, channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public class Gt06ProtocolDecoder extends BaseProtocolDecoder {
     private boolean forceTimeZone = false;
     private final TimeZone timeZone = TimeZone.getTimeZone("UTC");
 
-    public Gt06ProtocolDecoder(String protocol) {
+    public Gt06ProtocolDecoder(Gt06Protocol protocol) {
         super(protocol);
 
         Properties properties = Context.getProps();
@@ -126,7 +126,7 @@ protected Object decode(
                 }
             }
 
-            if (identify(imei)) {
+            if (identify(imei, channel)) {
                 buf.skipBytes(buf.readableBytes() - 6);
                 sendResponse(channel, type, buf.readUnsignedShort());
             }
@@ -144,7 +144,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Date and time
             Calendar time = Calendar.getInstance(timeZone);

File: src/org/traccar/protocol/HaicomProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class HaicomProtocolDecoder extends BaseProtocolDecoder {
 
-    public HaicomProtocolDecoder(String protocol) {
+    public HaicomProtocolDecoder(HaicomProtocol protocol) {
         super(protocol);
     }
 
@@ -67,12 +67,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/IntellitracProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class IntellitracProtocolDecoder extends BaseProtocolDecoder {
 
-    public IntellitracProtocolDecoder(String protocol) {
+    public IntellitracProtocolDecoder(IntellitracProtocol protocol) {
         super(protocol);
     }
 
@@ -76,11 +76,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Detect device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class KhdProtocolDecoder extends BaseProtocolDecoder {
 
-    public KhdProtocolDecoder(String protocol) {
+    public KhdProtocolDecoder(KhdProtocol protocol) {
         super(protocol);
     }
 
@@ -74,10 +74,10 @@ protected Object decode(
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Device identification
-            if (!identify(readSerialNumber(buf))) {
+            if (!identify(readSerialNumber(buf), channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/M2mProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class M2mProtocolDecoder extends BaseProtocolDecoder {
 
-    public M2mProtocolDecoder(String protocol) {
+    public M2mProtocolDecoder(M2mProtocol protocol) {
         super(protocol);
     }
     
@@ -64,13 +64,13 @@ protected Object decode(
             }
 
             // Identification
-            identify(imei.toString());
+            identify(imei.toString(), channel);
 
         } else if (hasDeviceId()) {
             
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             // Date and time

File: src/org/traccar/protocol/ManPowerProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class ManPowerProtocolDecoder extends BaseProtocolDecoder {
 
-    public ManPowerProtocolDecoder(String protocol) {
+    public ManPowerProtocolDecoder(ManPowerProtocol protocol) {
         super(protocol);
     }
 
@@ -64,12 +64,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MiniFinderProtocolDecoder extends BaseProtocolDecoder {
 
-    public MiniFinderProtocolDecoder(String protocol) {
+    public MiniFinderProtocolDecoder(MiniFinderProtocol protocol) {
         super(protocol);
     }
 
@@ -57,7 +57,7 @@ protected Object decode(
 
         // Identification
         if (sentence.startsWith("!1")) {
-            identify(sentence.substring(3, sentence.length()));
+            identify(sentence.substring(3, sentence.length()), channel);
         }
 
         // Location
@@ -71,7 +71,7 @@ else if (sentence.startsWith("!D") && hasDeviceId()) {
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             Integer index = 1;

File: src/org/traccar/protocol/MtxProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MtxProtocolDecoder extends BaseProtocolDecoder {
 
-    public MtxProtocolDecoder(String protocol) {
+    public MtxProtocolDecoder(MtxProtocol protocol) {
         super(protocol);
     }
 
@@ -71,12 +71,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MxtProtocolDecoder extends BaseProtocolDecoder {
 
-    public MxtProtocolDecoder(String protocol) {
+    public MxtProtocolDecoder(MxtProtocol protocol) {
         super(protocol);
     }
 
@@ -49,14 +49,14 @@ protected Object decode(
         int type = buf.readUnsignedByte();
 
         String id = String.valueOf(buf.readUnsignedInt());
-        if (!identify(id)) {
+        if (!identify(id, channel)) {
             return null;
         }
 
         if (type == MSG_POSITION) {
 
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             buf.readUnsignedByte(); // protocol

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public class NavisProtocolDecoder extends BaseProtocolDecoder {
 
     private static final Charset charset = Charset.defaultCharset();
 
-    public NavisProtocolDecoder(String protocol) {
+    public NavisProtocolDecoder(NavisProtocol protocol) {
         super(protocol);
     }
 
@@ -80,7 +80,7 @@ public Position getPosition() {
 
     private ParseResult parsePosition(ChannelBuffer buf) {
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         position.setDeviceId(getDeviceId());
 
@@ -252,7 +252,7 @@ private Object processArray(Channel channel, ChannelBuffer buf) {
 
     private Object processHandshake(Channel channel, ChannelBuffer buf) {
         buf.readByte(); // semicolon symbol
-        if (identify(buf.toString(Charset.defaultCharset()))) {
+        if (identify(buf.toString(Charset.defaultCharset()), channel)) {
             sendReply(channel, ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN, "*<S", charset));
         }
         return null;

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class OrionProtocolDecoder extends BaseProtocolDecoder {
 
-    public OrionProtocolDecoder(String protocol) {
+    public OrionProtocolDecoder(OrionProtocol protocol) {
         super(protocol);
     }
     
@@ -72,7 +72,7 @@ protected Object decode(
                 sendResponse(channel, buf);
             }
 
-            if (!identify(String.valueOf(buf.readUnsignedInt()))) {
+            if (!identify(String.valueOf(buf.readUnsignedInt()), channel)) {
                 return null;
             }
 
@@ -83,7 +83,7 @@ protected Object decode(
                 // Create new position
                 Position position = new Position();
                 position.setDeviceId(getDeviceId());
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 
                 position.set(Event.KEY_EVENT, buf.readUnsignedByte());
                 buf.readUnsignedByte(); // length

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@
 
 public class OsmAndProtocolDecoder extends BaseProtocolDecoder {
     
-    public OsmAndProtocolDecoder(String protocol) {
+    public OsmAndProtocolDecoder(OsmAndProtocol protocol) {
         super(protocol);
     }
     
@@ -58,11 +58,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         // Identification
         String id = params.get(params.containsKey("id") ? "id" : "deviceid").get(0);
-        if (!identify(id)) {
+        if (!identify(id, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@
 
 public class PiligrimProtocolDecoder extends BaseProtocolDecoder {
     
-    public PiligrimProtocolDecoder(String protocol) {
+    public PiligrimProtocolDecoder(PiligrimProtocol protocol) {
         super(protocol);
     }
 
@@ -83,7 +83,7 @@ protected Object decode(
             
             // Identification
             QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());
-            if (!identify(decoder.getParameters().get("imei").get(0))) {
+            if (!identify(decoder.getParameters().get("imei").get(0), channel)) {
                 return null;
             }
 
@@ -99,7 +99,7 @@ protected Object decode(
                 if (type == MSG_GPS || type == MSG_GPS_SENSORS) {
                     
                     Position position = new Position();
-                    position.setProtocol(getProtocol());
+                    position.setProtocol(getProtocolName());
                     position.setDeviceId(getDeviceId());
                     
                     // Time

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public class ProgressProtocolDecoder extends BaseProtocolDecoder {
     private long lastIndex;
     private long newIndex;
 
-    public ProgressProtocolDecoder(String protocol) {
+    public ProgressProtocolDecoder(ProgressProtocol protocol) {
         super(protocol);
     }
 
@@ -81,7 +81,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
             buf.skipBytes(length);
             length = buf.readUnsignedShort();
             String imei = buf.readBytes(length).toString(Charset.defaultCharset());
-            identify(imei);
+            identify(imei, channel);
         }
 
         // Position
@@ -95,7 +95,7 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
 
             for (int j = 0; j < recordCount; j++) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 // Message index

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Pt502ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Pt502ProtocolDecoder(String protocol) {
+    public Pt502ProtocolDecoder(Pt502Protocol protocol) {
         super(protocol);
     }
 
@@ -71,12 +71,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/RitiProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class RitiProtocolDecoder extends BaseProtocolDecoder {
 
-    public RitiProtocolDecoder(String protocol) {
+    public RitiProtocolDecoder(RitiProtocol protocol) {
         super(protocol);
     }
 
@@ -58,12 +58,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         buf.skipBytes(2); // header
 
         // Get device id
-        if (!identify(String.valueOf(buf.readUnsignedShort()))) {
+        if (!identify(String.valueOf(buf.readUnsignedShort()), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class RuptelaProtocolDecoder extends BaseProtocolDecoder {
     
-    public RuptelaProtocolDecoder(String protocol) {
+    public RuptelaProtocolDecoder(RuptelaProtocol protocol) {
         super(protocol);
     }
 
@@ -47,7 +47,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
         // Identify device
         String imei = String.format("%015d", buf.readLong());
-        if (!identify(imei)) {
+        if (!identify(imei, channel)) {
             return null;
         }
 
@@ -61,7 +61,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 // Time

File: src/org/traccar/protocol/SkypatrolProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class SkypatrolProtocolDecoder extends BaseProtocolDecoder {
 
-    public SkypatrolProtocolDecoder(String protocol) {
+    public SkypatrolProtocolDecoder(SkypatrolProtocol protocol) {
         super(protocol);
     }
 
@@ -71,7 +71,7 @@ protected Object decode(
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Status code
             if (BitUtil.check(mask, 1)) {
@@ -90,7 +90,7 @@ protected Object decode(
                 Log.warning("No device id field");
                 return null;
             }
-            if (!identify(id)) {
+            if (!identify(id, channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Stl060ProtocolDecoder.java
Patch:
@@ -27,7 +27,7 @@
 
 public class Stl060ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Stl060ProtocolDecoder(String protocol) {
+    public Stl060ProtocolDecoder(Stl060Protocol protocol) {
         super(protocol);
     }
 
@@ -82,12 +82,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Device identification
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class SuntechProtocolDecoder extends BaseProtocolDecoder {
 
-    public SuntechProtocolDecoder(String protocol) {
+    public SuntechProtocolDecoder(SuntechProtocol protocol) {
         super(protocol);
     }
 
@@ -64,11 +64,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         int index = 1;
 
         // Identifier
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TelikProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TelikProtocolDecoder extends BaseProtocolDecoder {
 
-    public TelikProtocolDecoder(String protocol) {
+    public TelikProtocolDecoder(TelikProtocol protocol) {
         super(protocol);
     }
 
@@ -62,12 +62,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -31,15 +31,15 @@
 
 public class TeltonikaProtocolDecoder extends BaseProtocolDecoder {
     
-    public TeltonikaProtocolDecoder(String protocol) {
+    public TeltonikaProtocolDecoder(TeltonikaProtocol protocol) {
         super(protocol);
     }
 
     private void parseIdentification(Channel channel, ChannelBuffer buf) {
 
         int length = buf.readUnsignedShort();
         String imei = buf.toString(buf.readerIndex(), length, Charset.defaultCharset());
-        boolean result =  identify(imei);
+        boolean result =  identify(imei, channel);
 
         if (channel != null) {
             ChannelBuffer response = ChannelBuffers.directBuffer(1);
@@ -68,7 +68,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
         
         for (int i = 0; i < count; i++) {
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             
             position.setDeviceId(getDeviceId());
             

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Tk103ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Tk103ProtocolDecoder(String protocol) {
+    public Tk103ProtocolDecoder(Tk103Protocol protocol) {
         super(protocol);
     }
 
@@ -83,11 +83,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class Tlt2hProtocolDecoder extends BaseProtocolDecoder {
 
-    public Tlt2hProtocolDecoder(String protocol) {
+    public Tlt2hProtocolDecoder(Tlt2hProtocol protocol) {
         super(protocol);
     }
 
@@ -72,7 +72,7 @@ protected Object decode(
         }
 
         // Get device identifier
-        if (!identify(parser.group(1))) {
+        if (!identify(parser.group(1), channel)) {
             return null;
         }
 
@@ -86,7 +86,7 @@ protected Object decode(
             parser = patternPosition.matcher(message);
             if (parser.matches()) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 Integer index = 1;

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TotemProtocolDecoder extends BaseProtocolDecoder {
 
-    public TotemProtocolDecoder(String protocol) {
+    public TotemProtocolDecoder(TotemProtocol protocol) {
         super(protocol);
     }
 
@@ -159,12 +159,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Tr900ProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class Tr900ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Tr900ProtocolDecoder(String protocol) {
+    public Tr900ProtocolDecoder(Tr900Protocol protocol) {
         super(protocol);
     }
 
@@ -69,11 +69,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Identification
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TrackboxProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TrackboxProtocolDecoder extends BaseProtocolDecoder {
     
-    public TrackboxProtocolDecoder(String protocol) {
+    public TrackboxProtocolDecoder(TrackboxProtocol protocol) {
         super(protocol);
     }
 
@@ -61,7 +61,7 @@ protected Object decode(
 
         if (sentence.startsWith("a=connect")) {
             String id = sentence.substring(sentence.indexOf("i=") + 2);
-            if (identify(id)) {
+            if (identify(id, channel)) {
                 sendResponse(channel);
             }
         }
@@ -77,7 +77,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             Integer index = 1;
 

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@
 
 public class TramigoProtocolDecoder extends BaseProtocolDecoder {
 
-    public TramigoProtocolDecoder(String protocol) {
+    public TramigoProtocolDecoder(TramigoProtocol protocol) {
         super(protocol);
     }
 
@@ -61,12 +61,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         position.set(Event.KEY_INDEX, index);
         position.setValid(true);
 
         // Get device id
-        if (!identify(String.valueOf(id))) {
+        if (!identify(String.valueOf(id), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class TytanProtocolDecoder extends BaseProtocolDecoder {
 
-    public TytanProtocolDecoder(String protocol) {
+    public TytanProtocolDecoder(TytanProtocol protocol) {
         super(protocol);
     }
 
@@ -52,7 +52,7 @@ protected Object decode(
         }
         
         String id = String.valueOf(buf.readUnsignedInt());
-        if (!identify(id)) {
+        if (!identify(id, channel, remoteAddress)) {
             return null;
         }
 
@@ -61,7 +61,7 @@ protected Object decode(
         while (buf.readable()) {
             
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
             
             int end = buf.readerIndex() + buf.readUnsignedByte();

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class UlbotechProtocolDecoder extends BaseProtocolDecoder {
 
-    public UlbotechProtocolDecoder(String protocol) {
+    public UlbotechProtocolDecoder(UlbotechProtocol protocol) {
         super(protocol);
     }
 
@@ -57,11 +57,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         // Get device id
         String imei = ChannelBufferTools.readHexString(buf, 16).substring(1);
-        if (!identify(imei)) {
+        if (!identify(imei, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/VisiontekProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class VisiontekProtocolDecoder extends BaseProtocolDecoder {
 
-    public VisiontekProtocolDecoder(String protocol) {
+    public VisiontekProtocolDecoder(VisiontekProtocol protocol) {
         super(protocol);
     }
 
@@ -70,14 +70,14 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Device identification
         String id = parser.group(index++);
         String imei = parser.group(index++);
-        if (!identify(id, false) && !identify(imei)) {
+        if (!identify(id, channel, null, false) && !identify(imei, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class WialonProtocolDecoder extends BaseProtocolDecoder {
 
-    public WialonProtocolDecoder(String protocol) {
+    public WialonProtocolDecoder(WialonProtocol protocol) {
         super(protocol);
     }
 
@@ -77,7 +77,7 @@ private Position decodePosition(String substring) {
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         position.setDeviceId(getDeviceId());
 
         Integer index = 1;
@@ -174,7 +174,7 @@ protected Object decode(
         // Detect device ID
         if (sentence.startsWith("#L#")) {
             String imei = sentence.substring(3, sentence.indexOf(';'));
-            if (identify(imei)) {
+            if (identify(imei, channel)) {
                 sendResponse(channel, "#AL#", 1);
             }
         }

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class WondexProtocolDecoder extends BaseProtocolDecoder {
 
-    public WondexProtocolDecoder(String protocol) {
+    public WondexProtocolDecoder(WondexProtocol protocol) {
         super(protocol);
     }
 
@@ -66,11 +66,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         int index = 1;
 
         // Device identifier
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class Xexun2ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Xexun2ProtocolDecoder(String protocol) {
+    public Xexun2ProtocolDecoder(XexunProtocol protocol) {
         super(protocol);
     }
 
@@ -72,7 +72,7 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
@@ -127,7 +127,7 @@ protected Object decode(
         position.set(Event.KEY_ALARM, parser.group(index++));
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class XirgoProtocolDecoder extends BaseProtocolDecoder {
 
-    public XirgoProtocolDecoder(String protocol) {
+    public XirgoProtocolDecoder(XirgoProtocol protocol) {
         super(protocol);
     }
 
@@ -69,12 +69,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Xt013ProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Xt013ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Xt013ProtocolDecoder(String protocol) {
+    public Xt013ProtocolDecoder(Xt013Protocol protocol) {
         super(protocol);
     }
 
@@ -71,12 +71,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Identify device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Xt7ProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class Xt7ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Xt7ProtocolDecoder(String protocol) {
+    public Xt7ProtocolDecoder(Xt7Protocol protocol) {
         super(protocol);
     }
 
@@ -67,11 +67,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         
         // Get device by id
         String id = buf.readBytes(16).toString(Charset.defaultCharset()).trim();
-        if (!identify(id)) {
+        if (!identify(id, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/YwtProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class YwtProtocolDecoder extends BaseProtocolDecoder {
 
-    public YwtProtocolDecoder(String protocol) {
+    public YwtProtocolDecoder(YwtProtocol protocol) {
         super(protocol);
     }
 
@@ -81,12 +81,12 @@ protected Object decode(
         
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
         String type = parser.group(index++);
 
         // Device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: test/org/traccar/protocol/ApelProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class ApelProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        ApelProtocolDecoder decoder = new ApelProtocolDecoder(null);
+        ApelProtocolDecoder decoder = new ApelProtocolDecoder(new ApelProtocol());
 
         /*byte[] buf1 = {0x40,0x4E,0x54,0x43,0x01,0x00,0x00,0x00,0x7B,0x00,0x00,0x00,0x13,0x00,0x44,0x34,0x2A,0x3E,0x53,0x3A,0x38,0x36,0x31,0x37,0x38,0x35,0x30,0x30,0x35,0x32,0x30,0x35,0x30,0x37,0x39};
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, buf1)));*/

File: test/org/traccar/protocol/AplicomProtocolDecoderTest.java
Patch:
@@ -10,8 +10,8 @@ public class AplicomProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(null);
-
+        AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(new AplicomProtocol());
+        
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "44C20146B710C158DA002100B09F0700C054CA0EA254CA0E9C03BE0BF6015D7069070000142A600000000000000001"))));
 

File: test/org/traccar/protocol/Ardi01ProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class Ardi01ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Ardi01ProtocolDecoder decoder = new Ardi01ProtocolDecoder(null);
+        Ardi01ProtocolDecoder decoder = new Ardi01ProtocolDecoder(new Ardi01Protocol());
 
         verify(decoder.decode(null, null,
                 "013227003054776,20141010052719,24.4736042,56.8445807,110,289,40,7,5,78,-1"));

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class AtrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        AtrackProtocolDecoder decoder = new AtrackProtocolDecoder(null);
+        AtrackProtocolDecoder decoder = new AtrackProtocolDecoder(new AtrackProtocol());
 
         assertNull(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "fe0200014104d8f196820001"))));

File: test/org/traccar/protocol/AutoFon45ProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@
 public class AutoFon45ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
-        AutoFon45ProtocolDecoder decoder = new AutoFon45ProtocolDecoder(null);
+        AutoFon45ProtocolDecoder decoder = new AutoFon45ProtocolDecoder(new AutoFon45Protocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "41032125656985547543619173484002123481"))));

File: test/org/traccar/protocol/AutoFonProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class AutoFonProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        AutoFonProtocolDecoder decoder = new AutoFonProtocolDecoder(null);
+        AutoFonProtocolDecoder decoder = new AutoFonProtocolDecoder(new AutoFonProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "10556103592310314825728F"))));

File: test/org/traccar/protocol/Avl301ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Avl301ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Avl301ProtocolDecoder decoder = new Avl301ProtocolDecoder(null);
+        Avl301ProtocolDecoder decoder = new Avl301ProtocolDecoder(new Avl301Protocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "244c0f086058500087335500010d0a"))));

File: test/org/traccar/protocol/BceProtocolDecoderTest.java
Patch:
@@ -14,7 +14,7 @@ public class BceProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        BceProtocolDecoder decoder = new BceProtocolDecoder(null);
+        BceProtocolDecoder decoder = new BceProtocolDecoder(new BceProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "be76619c834601004200a0003fd769c568ffc3db0079161d420683a9414918b1150000000000d102660167040000000000009f06357f0000a401042ea415e10232000000000000000000000051"))));

File: test/org/traccar/protocol/BoxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class BoxProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        BoxProtocolDecoder decoder = new BoxProtocolDecoder(null);
+        BoxProtocolDecoder decoder = new BoxProtocolDecoder(new BoxProtocol());
         
         assertNull(decoder.decode(null, null,
                 "H,BT,358281002435893,081028142432,F5813D19,6D6E6DC2"));

File: test/org/traccar/protocol/CalAmpProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class CalAmpProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(null);
+        CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(new CalAmpProtocol());
         
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "830545321041830101010300010000333862000023c301000000004532104183ffffff353816051610691f420040163953294fffffffffffffffff8996604211639032949f4f54413a317c303b302c317c343b302c34004f5441535441543a302c302c302c302c302c222200564255533a342c322e302e302c343533323130343138332c5630312e30332e30312e34302c5630312e30332e30312e33312c2c0056494e2d494e464f3a56494e3d31464d5a5537324539355a4137303032362c4445562d5245474e3d55532c535256522d5245474e3d555300")), null));

File: test/org/traccar/protocol/CarTrackProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class CarTrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CarTrackProtocolDecoder decoder = new CarTrackProtocolDecoder(null);
+        CarTrackProtocolDecoder decoder = new CarTrackProtocolDecoder(new CarTrackProtocol());
 
         verify(decoder.decode(null, null,
                 "$$2222234???????&A9955&B102904.000,A,2233.0655,N,11404.9440,E,0.00,,030109,,*17|6.3|&C0100000100&D000024?>&E10000000&Y00100020"));

File: test/org/traccar/protocol/CarscopProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class CarscopProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CarscopProtocolDecoder decoder = new CarscopProtocolDecoder(null);
+        CarscopProtocolDecoder decoder = new CarscopProtocolDecoder(new CarscopProtocol());
 
         verify(decoder.decode(null, null,
                 "*040331141830UB05123456789012345061825A2934.0133N10627.2544E000.0040331309.6200000000L000000"));

File: test/org/traccar/protocol/CastelProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class CastelProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CastelProtocolDecoder decoder = new CastelProtocolDecoder(null);
+        CastelProtocolDecoder decoder = new CastelProtocolDecoder(new CastelProtocol());
 
         assertNull(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "40401F00043130303131313235323939383700000000000000100303320D0A"))));

File: test/org/traccar/protocol/CellocatorProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class CellocatorProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CellocatorProtocolDecoder decoder = new CellocatorProtocolDecoder(null);
+        CellocatorProtocolDecoder decoder = new CellocatorProtocolDecoder(new CellocatorProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "4D4347500006000000081A02021204000000210062300000006B00E100000000000000000000E5A100040206614EA303181A57034E1200000000000000001525071403D60749"))));

File: test/org/traccar/protocol/EasyTrackProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class EasyTrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EasyTrackProtocolDecoder decoder = new EasyTrackProtocolDecoder(null);
+        EasyTrackProtocolDecoder decoder = new EasyTrackProtocolDecoder(new EasyTrackProtocol());
 
         assertNull(decoder.decode(null, null, "*ET,135790246811221,GZ,0001,0005"));
 

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class EelinkProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EelinkProtocolDecoder decoder = new EelinkProtocolDecoder(null);
+        EelinkProtocolDecoder decoder = new EelinkProtocolDecoder(new EelinkProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "676701000b001b035418804661834901"))));

File: test/org/traccar/protocol/EnforaProtocolDecoderTest.java
Patch:
@@ -14,7 +14,7 @@ public class EnforaProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EnforaProtocolDecoder decoder = new EnforaProtocolDecoder(null);
+        EnforaProtocolDecoder decoder = new EnforaProtocolDecoder(new EnforaProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "000A08002020202020303131303730303030353730323637"))));

File: test/org/traccar/protocol/Ev603ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Ev603ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Ev603ProtocolDecoder decoder = new Ev603ProtocolDecoder(null);
+        Ev603ProtocolDecoder decoder = new Ev603ProtocolDecoder(new Ev603Protocol());
 
         assertNull(decoder.decode(null, null, "!1,123456789012345"));
 

File: test/org/traccar/protocol/FreedomProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class FreedomProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        FreedomProtocolDecoder decoder = new FreedomProtocolDecoder(null);
+        FreedomProtocolDecoder decoder = new FreedomProtocolDecoder(new FreedomProtocol());
 
         verify(decoder.decode(null, null,
                 "IMEI,353358011714362,2014/05/22, 20:49:32, N, Lat:4725.9624, E, Lon:01912.5483, Spd:5.05"));

File: test/org/traccar/protocol/GalileoProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class GalileoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GalileoProtocolDecoder decoder = new GalileoProtocolDecoder(null);
+        GalileoProtocolDecoder decoder = new GalileoProtocolDecoder(new GalileoProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "011380033836383230343030313534393038370432008590"))));

File: test/org/traccar/protocol/GatorProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class GatorProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GatorProtocolDecoder decoder = new GatorProtocolDecoder(null);
+        GatorProtocolDecoder decoder = new GatorProtocolDecoder(new GatorProtocol());
         
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "24248000260009632d141121072702059226180104367500000000c04700079c0c34000ad80b00ff000a0d"))));

File: test/org/traccar/protocol/Gl100ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Gl100ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gl100ProtocolDecoder decoder = new Gl100ProtocolDecoder(null);
+        Gl100ProtocolDecoder decoder = new Gl100ProtocolDecoder(new Gl100Protocol());
 
         assertNull(decoder.decode(null, null,
                 "AT+GTHBD=HeartBeat,359231030000010,20090101000000,11F0,0102120204"));

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -9,14 +9,14 @@ public class Gl200ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(null);
+        Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new Gl200Protocol());
 
         verify(decoder.decode(null, null, null,
                 "+RESP:GTSTT,1A0401,860599000508846,,41,0,0.0,84,107.5,-76.657998,39.497203,20150623160622,0310,0260,B435,3B81,,20150623160622,0F54$"));
 
         verify(decoder.decode(null, null, null,
                 "+RESP:GTFRI,1A0401,860599000508846,,0,0,1,1,134.8,154,278.7,-76.671089,39.778885,20150623154301,0310,0260,043F,7761,,99,20150623154314,0F24$"));
-        
+
         verify(decoder.decode(null, null, null,
                 "+RESP:GTFRI,1A0200,860599000165464,CRI001,0,0,1,2,,41,,-71.153137,42.301634,20150328020301,,,,,280.3,55,20150327220351,320C"));
         

File: test/org/traccar/protocol/GlobalSatProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class GlobalSatProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GlobalSatProtocolDecoder decoder = new GlobalSatProtocolDecoder(null);
+        GlobalSatProtocolDecoder decoder = new GlobalSatProtocolDecoder(new GlobalSatProtocol());
 
         assertNull(decoder.decode(null, null, "GSh,131826789036289,3,M,ea04*3d"));
 

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class GoSafeProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(null);
+        GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new GoSafeProtocol());
 
         assertNull(decoder.decode(null, null, null,
                 "*GS16,351535058709775"));

File: test/org/traccar/protocol/GotopProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class GotopProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GotopProtocolDecoder decoder = new GotopProtocolDecoder(null);
+        GotopProtocolDecoder decoder = new GotopProtocolDecoder(new GotopProtocol());
 
         assertNull(decoder.decode(null, null, ""));
         

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Gps103ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(null);
+        Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
         // Log on request
         assertNull(decoder.decode(null, null, null, "##,imei:359586015829802,A"));

File: test/org/traccar/protocol/GpsGateProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class GpsGateProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GpsGateProtocolDecoder decoder = new GpsGateProtocolDecoder(null);
+        GpsGateProtocolDecoder decoder = new GpsGateProtocolDecoder(new GpsGateProtocol());
 
         assertNull(decoder.decode(null, null, "$FRLIN,,user1,8IVHF*7A"));
         

File: test/org/traccar/protocol/Gt02ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Gt02ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gt02ProtocolDecoder decoder = new Gt02ProtocolDecoder(null);
+        Gt02ProtocolDecoder decoder = new Gt02ProtocolDecoder(new Gt02Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "68682500000123456789012345000110010101010101026B3F3E026B3F3E000000000000000000010D0A"))));

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Gt06ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gt06ProtocolDecoder decoder = new Gt06ProtocolDecoder(null);
+        Gt06ProtocolDecoder decoder = new Gt06ProtocolDecoder(new Gt06Protocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "787811010123456789012345100B3201000171930D0A"))));

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class H02ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        H02ProtocolDecoder decoder = new H02ProtocolDecoder(null);
+        H02ProtocolDecoder decoder = new H02ProtocolDecoder(new H02Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "*HQ,1451316409,V1,030149,A,-23-29.0095,S,-46-51.5852,W,2.4,065,070315,FFFFFFFF#", Charset.defaultCharset())));

File: test/org/traccar/protocol/HaicomProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class HaicomProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        HaicomProtocolDecoder decoder = new HaicomProtocolDecoder(null);
+        HaicomProtocolDecoder decoder = new HaicomProtocolDecoder(new HaicomProtocol());
 
         verify(decoder.decode(null, null,
                 "$GPRS012497007097169,T100001,150618,230031,5402267400332464,0004,2014,000001,,,1,00#V040*"));

File: test/org/traccar/protocol/IntellitracProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class IntellitracProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        IntellitracProtocolDecoder decoder = new IntellitracProtocolDecoder(null);
+        IntellitracProtocolDecoder decoder = new IntellitracProtocolDecoder(new IntellitracProtocol());
 
         assertNull(decoder.decode(null, null, "$OK:TRACKING"));
 

File: test/org/traccar/protocol/Jt600ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Jt600ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Jt600ProtocolDecoder decoder = new Jt600ProtocolDecoder(null);
+        Jt600ProtocolDecoder decoder = new Jt600ProtocolDecoder(new Jt600Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "24311021600111001B16021105591022329862114046227B0598095080012327951435161F"))));

File: test/org/traccar/protocol/KhdProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class KhdProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        KhdProtocolDecoder decoder = new KhdProtocolDecoder(null);
+        KhdProtocolDecoder decoder = new KhdProtocolDecoder(new KhdProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "2929b1000605162935b80d"))));

File: test/org/traccar/protocol/LaipacProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class LaipacProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        LaipacProtocolDecoder decoder = new LaipacProtocolDecoder(null);
+        LaipacProtocolDecoder decoder = new LaipacProtocolDecoder(new LaipacProtocol());
 
         assertNull(decoder.decode(null, null, "$AVSYS,99999999,V1.50,SN0000103,32768*15"));
         

File: test/org/traccar/protocol/M2mProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class M2mProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        M2mProtocolDecoder decoder = new M2mProtocolDecoder(null);
+        M2mProtocolDecoder decoder = new M2mProtocolDecoder(new M2mProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "235A3C2A2624215C287D70212A21254C7C6421220B0B0B"))));

File: test/org/traccar/protocol/ManPowerProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class ManPowerProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        ManPowerProtocolDecoder decoder = new ManPowerProtocolDecoder(null);
+        ManPowerProtocolDecoder decoder = new ManPowerProtocolDecoder(new ManPowerProtocol());
 
         verify(decoder.decode(null, null,
                 "simei:352581250259539,,,tracker,51,24,1.73,130426023608,A,3201.5462,N,03452.2975,E,0.01,28B9,1DED,425,01,1x0x0*0x1*60x+2,en-us,"));

File: test/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class MegastekProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MegastekProtocolDecoder decoder = new MegastekProtocolDecoder(null);
+        MegastekProtocolDecoder decoder = new MegastekProtocolDecoder(new MegastekProtocol());
 
         verify(decoder.decode(null, null,
                 "STX,GerAL22,$GPRMC,174752.000,A,3637.060059,S,6416.2354,W,0.00,0.00,030812,,,A*55,F,,imei:861785000249353,05,180.6,Battery=100%,,1,722,310,0FA6,39D0;8F"));

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class MeiligaoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MeiligaoProtocolDecoder decoder = new MeiligaoProtocolDecoder(null);
+        MeiligaoProtocolDecoder decoder = new MeiligaoProtocolDecoder(new MeiligaoProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "24240000123456FFFFFFFF50008B9B0D0A"))));

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class MeitrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MeitrackProtocolDecoder decoder = new MeitrackProtocolDecoder(null);
+        MeitrackProtocolDecoder decoder = new MeitrackProtocolDecoder(new MeitrackProtocol());
         
         verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "$$G145,862106024274815,AAA,35,-1.287125,36.906061,150530054639,A,10,13,12,67,0.8,1621,38359791,42330881,639|2|FB2|2F3,0000,3|0|0|A58|432,,,1,0009,*26", Charset.defaultCharset())));

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class MiniFinderProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MiniFinderProtocolDecoder decoder = new MiniFinderProtocolDecoder(null);
+        MiniFinderProtocolDecoder decoder = new MiniFinderProtocolDecoder(new MiniFinderProtocol());
 
         assertNull(decoder.decode(null, null, "!1,860719020212696"));
 

File: test/org/traccar/protocol/MtxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class MtxProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MtxProtocolDecoder decoder = new MtxProtocolDecoder(null);
+        MtxProtocolDecoder decoder = new MtxProtocolDecoder(new MtxProtocol());
 
         verify(decoder.decode(null, null,
                 "#MTX,353815011138124,20101226,195550,41.6296399,002.3611174,000,035,000000.00,X,X,1111,000,0,0"));

File: test/org/traccar/protocol/MxtProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class MxtProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MxtProtocolDecoder decoder = new MxtProtocolDecoder(null);
+        MxtProtocolDecoder decoder = new MxtProtocolDecoder(new MxtProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "01a631361e7a00082471418b052a2c46b587ffc01ae3fd000008800000000000003345422203000000f000f00000000000ea1e04"))));

File: test/org/traccar/protocol/NavigilProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class NavigilProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        NavigilProtocolDecoder decoder = new NavigilProtocolDecoder(null);
+        NavigilProtocolDecoder decoder = new NavigilProtocolDecoder(new NavigilProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "01004300040020000000f60203080200e7cd0f510c0000003b00000000000000"))));

File: test/org/traccar/protocol/NavisProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class NavisProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        NavisProtocolDecoder decoder = new NavisProtocolDecoder(null);
+        NavisProtocolDecoder decoder = new NavisProtocolDecoder(new NavisProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "404E5443010000007B000000130044342A3E533A383631373835303035323035303739"))));

File: test/org/traccar/protocol/NoranProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class NoranProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        NoranProtocolDecoder decoder = new NoranProtocolDecoder(null);
+        NoranProtocolDecoder decoder = new NoranProtocolDecoder(new NoranProtocol());
         
         verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "3400080001090000000000001D43A29BE842E62520424E523039423036363932000031322D30332D30352031313A34373A343300"))));

File: test/org/traccar/protocol/OrionProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class OrionProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        OrionProtocolDecoder decoder = new OrionProtocolDecoder(null);
+        OrionProtocolDecoder decoder = new OrionProtocolDecoder(new OrionProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "5057000137bf6236235a0331b5c6e402a3b5ecff5102980003000e0c1d172936080e0c1d172936b03b01000882050000008e080000000000008c0300940500000084030085030003067600900113150000000000000000000000000000000000000004a4c8"))));

File: test/org/traccar/protocol/OsmAndProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class OsmAndProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        OsmAndProtocolDecoder decoder = new OsmAndProtocolDecoder(null);
+        OsmAndProtocolDecoder decoder = new OsmAndProtocolDecoder(new OsmAndProtocol());
         
         verify(decoder.decode(null, null, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                 "/?lat=49.60688&lon=6.15788&timestamp=2014-06-04+09%3A10%3A11&altitude=384.7&speed=0.0&id=353861053849681")));

File: test/org/traccar/protocol/PiligrimProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public class PiligrimProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        PiligrimProtocolDecoder decoder = new PiligrimProtocolDecoder(null);
+        PiligrimProtocolDecoder decoder = new PiligrimProtocolDecoder(new PiligrimProtocol());
         
         HttpRequest msg1 = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/bingps?imei=868204005544720&csq=18&vout=00&vin=4050&dataid=00000000");
         msg1.setContent(ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(

File: test/org/traccar/protocol/ProgressProtocolDecoderTest.java
Patch:
@@ -15,7 +15,7 @@ public class ProgressProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        ProgressProtocolDecoder decoder = new ProgressProtocolDecoder(null);
+        ProgressProtocolDecoder decoder = new ProgressProtocolDecoder(new ProgressProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "020037000100000003003131310f003335343836383035313339303036320f00323530303136333832383531353535010000000100000000000000e6bb97b6"))));

File: test/org/traccar/protocol/Pt3000ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Pt3000ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Pt3000ProtocolDecoder decoder = new Pt3000ProtocolDecoder(null);
+        Pt3000ProtocolDecoder decoder = new Pt3000ProtocolDecoder(new Pt3000Protocol());
 
         verify(decoder.decode(null, null,
                 "%356939010012099,$GPRMC,124945.752,A,4436.6245,N,01054.4634,E,0.11,358.52,060408,,,A,+393334347445,N028d"));

File: test/org/traccar/protocol/Pt502ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Pt502ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Pt502ProtocolDecoder decoder = new Pt502ProtocolDecoder(null);
+        Pt502ProtocolDecoder decoder = new Pt502ProtocolDecoder(new Pt502Protocol());
 
         verify(decoder.decode(null, null,
                 "$POS,11023456,033731.000,A,0335.2617,N,09841.1587,E,0.00,88.12,210615,,,A/0000,0/1f8/388900//f33//"));

File: test/org/traccar/protocol/RitiProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class RitiProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        RitiProtocolDecoder decoder = new RitiProtocolDecoder(null);
+        RitiProtocolDecoder decoder = new RitiProtocolDecoder(new RitiProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "3b2864a3056300006d40000003000000000000000000000000244750524d432c3231313734332e3030302c412c313335372e333637352c4e2c31303033362e363939322c452c302e30302c2c3031303931342c2c2c412a37380d0a00000000000000000000000000000000040404"))));

File: test/org/traccar/protocol/RuptelaProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class RuptelaProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        RuptelaProtocolDecoder decoder = new RuptelaProtocolDecoder(null);
+        RuptelaProtocolDecoder decoder = new RuptelaProtocolDecoder(new RuptelaProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "00560003116e7438a7a50100015565cbb9000020fd21300f113f4600005f000600090d090805011b13cf00020003001c012029ad00041d31dd1e0ebd160000c50000047200000000d0000000004100016a2a960000a5a300c9ee"))));

File: test/org/traccar/protocol/SanavProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class SanavProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SanavProtocolDecoder decoder = new SanavProtocolDecoder(null);
+        SanavProtocolDecoder decoder = new SanavProtocolDecoder(new SanavProtocol());
         
         verify(decoder.decode(null, null,
                 "imei=352024028982787&rmc=$GPRMC,103048.000,A,4735.0399,N,01905.2895,E,0.00,0.00,171013,,*05,AUTO-4095mv"));

File: test/org/traccar/protocol/SkypatrolProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class SkypatrolProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SkypatrolProtocolDecoder decoder = new SkypatrolProtocolDecoder(null);
+        SkypatrolProtocolDecoder decoder = new SkypatrolProtocolDecoder(new SkypatrolProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "0005021004FFFFFFFF0000000D313134373735383300CB000000000E11070C010184D032FB3841370000000016072B000017050032000000000000024E0C071116072C105900050000000000050000000000050000000003100260B7363B6306C11A00B73637F206BF19B73637F106B50EB73638B106BB0BB7363B6106B80AB73637F306B709000000000000000000C"))));

File: test/org/traccar/protocol/Stl060ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Stl060ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Stl060ProtocolDecoder decoder = new Stl060ProtocolDecoder(null);
+        Stl060ProtocolDecoder decoder = new Stl060ProtocolDecoder(new Stl060Protocol());
 
         verify(decoder.decode(null, null,
                 "$1,357804048043099,D001,AP29AW0963,23/02/14,14:06:54,17248488N,078342226E,0.08,193.12,1,1,1,1,1,A"));

File: test/org/traccar/protocol/SuntechProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class SuntechProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SuntechProtocolDecoder decoder = new SuntechProtocolDecoder(null);
+        SuntechProtocolDecoder decoder = new SuntechProtocolDecoder(new SuntechProtocol());
         
         assertNull(decoder.decode(null, null, "SA200ALV;317652"));
 

File: test/org/traccar/protocol/SyrusProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class SyrusProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SyrusProtocolDecoder decoder = new SyrusProtocolDecoder(null, false);
+        SyrusProtocolDecoder decoder = new SyrusProtocolDecoder(new SyrusProtocol(), false);
 
         verify(decoder.decode(null, null,
                 ">RGP230615010248-2682523-065236820000003007F4101;ID=0005;#0002;*2A<"));

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class T55ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        T55ProtocolDecoder decoder = new T55ProtocolDecoder(null);
+        T55ProtocolDecoder decoder = new T55ProtocolDecoder(new T55Protocol());
         
         assertNull(decoder.decode(null, null, "$GPFID,ID123456ABC"));
 

File: test/org/traccar/protocol/TelikProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TelikProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TelikProtocolDecoder decoder = new TelikProtocolDecoder(null);
+        TelikProtocolDecoder decoder = new TelikProtocolDecoder(new TelikProtocol());
 
         assertNull(decoder.decode(null, null,
                 "0026436729|232|01|003002030"));

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class TeltonikaProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TeltonikaProtocolDecoder decoder = new TeltonikaProtocolDecoder(null);
+        TeltonikaProtocolDecoder decoder = new TeltonikaProtocolDecoder(new TeltonikaProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "000F313233343536373839303132333435"))));

File: test/org/traccar/protocol/Tk102ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Tk102ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tk102ProtocolDecoder decoder = new Tk102ProtocolDecoder(null);
+        Tk102ProtocolDecoder decoder = new Tk102ProtocolDecoder(new Tk102Protocol());
 
         assertNull(decoder.decode(null, null, ""));
 

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Tk103ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(null);
+        Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
         assertNull(decoder.decode(null, null, "(090411121854BP0000001234567890HSO"));
 

File: test/org/traccar/protocol/Tlt2hProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Tlt2hProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tlt2hProtocolDecoder decoder = new Tlt2hProtocolDecoder(null);
+        Tlt2hProtocolDecoder decoder = new Tlt2hProtocolDecoder(new Tlt2hProtocol());
 
         verify(decoder.decode(null, null,
                 "#357671030946351#V500#0000#AUTO#1\r\n" +

File: test/org/traccar/protocol/TopflytechProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TopflytechProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TopflytechProtocolDecoder decoder = new TopflytechProtocolDecoder(null);
+        TopflytechProtocolDecoder decoder = new TopflytechProtocolDecoder(new TopflytechProtocol());
 
         verify(decoder.decode(null, null,
                 "(880316890094910BP00XG00b600000000L00074b54S00000000R0C0F0014000100f0130531152205A0706.1395S11024.0965E000.0251.25"));

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TotemProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TotemProtocolDecoder decoder = new TotemProtocolDecoder(null);
+        TotemProtocolDecoder decoder = new TotemProtocolDecoder(new TotemProtocol());
         
         verify(decoder.decode(null, null,
                 "$$AE860990002922822|AA$GPRMC,051002.00,A,0439.26245,N,10108.94448,E,0.023,,140315,,,A*71|02.98|01.95|02.26|000000000000|20150314051003|13841157|105A3B1C|0000|0.0000|0005|5324"));

File: test/org/traccar/protocol/Tr20ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Tr20ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tr20ProtocolDecoder decoder = new Tr20ProtocolDecoder(null);
+        Tr20ProtocolDecoder decoder = new Tr20ProtocolDecoder(new Tr20Protocol());
 
         assertNull(decoder.decode(null, null, "%%TRACKPRO01,1"));
 

File: test/org/traccar/protocol/Tr900ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Tr900ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tr900ProtocolDecoder decoder = new Tr900ProtocolDecoder(null);
+        Tr900ProtocolDecoder decoder = new Tr900ProtocolDecoder(new Tr900Protocol());
 
         verify(decoder.decode(null, null, null,
                 ">00001001,4,1,150626,131252,W05830.2978,S3137.2783,,00,348,18,00,003-000,0,3,11111011*3b!"));

File: test/org/traccar/protocol/TrackboxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TrackboxProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TrackboxProtocolDecoder decoder = new TrackboxProtocolDecoder(null);
+        TrackboxProtocolDecoder decoder = new TrackboxProtocolDecoder(new TrackboxProtocol());
 
         assertNull(decoder.decode(null, null, "a=connect&v=11&i=111111111111111"));
 

File: test/org/traccar/protocol/TramigoProtocolDecoderTest.java
Patch:
@@ -15,7 +15,7 @@ public class TramigoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TramigoProtocolDecoder decoder = new TramigoProtocolDecoder(null);
+        TramigoProtocolDecoder decoder = new TramigoProtocolDecoder(new TramigoProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "8000011bb0009e0001015b93032ef6f35994a9545472616d69676f3a204d6f76696e672c20302e3930206b6d205345206f66204372616e6562726f6f6b20466972652053746174696f6e2c2050656e726974682c205379646e65792c2041552c202d33332e37303732322c203135302e37313735392c2053452077697468207370656564203337206b6d2f682c2031393a3438204a616e20342020454f46"))));

File: test/org/traccar/protocol/TytanProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TytanProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TytanProtocolDecoder decoder = new TytanProtocolDecoder(null);
+        TytanProtocolDecoder decoder = new TytanProtocolDecoder(new TytanProtocol());
         
         verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "d5300000689d65556877fbd437a09d8ea89360005a23124e410201213704000907000009ffffffffffffffff0affffffffffffffff18ff63ff7f7fff65ff66ff67ff68ff69ff6b00ff6cffffffff6dff7fffffffff81ffffffff82ffff83ffffffffffffffff88ffff9600"))));

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class UlbotechProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(null);
+        UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
         
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "f8010103545500500179009ccb4b62010e00144db906310d3f0000000000cb0304000000000404000a8123050603211860221006080000000100000000ef97f8"))));

File: test/org/traccar/protocol/V680ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class V680ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        V680ProtocolDecoder decoder = new V680ProtocolDecoder(null);
+        V680ProtocolDecoder decoder = new V680ProtocolDecoder(new V680Protocol());
         
         assertNull(decoder.decode(null, null,
                 "#353588102019155"));

File: test/org/traccar/protocol/VisiontekProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class VisiontekProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        VisiontekProtocolDecoder decoder = new VisiontekProtocolDecoder(null);
+        VisiontekProtocolDecoder decoder = new VisiontekProtocolDecoder(new VisiontekProtocol());
         
         //verify(decoder.decode(null, null,
         //        "$1,AP116,05,06,15,11,48,32,1725.0460N,07824.5289E,0617,07,0,030,2091,0,0,0,1,1,1,1,20,00.0000,00.3820,00.0000,VAJRA V1.00,A#"));

File: test/org/traccar/protocol/WialonProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class WialonProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        WialonProtocolDecoder decoder = new WialonProtocolDecoder(null);
+        WialonProtocolDecoder decoder = new WialonProtocolDecoder(new WialonProtocol());
 
         assertNull(decoder.decode(null, null, "#L#123456789012345;test"));
         

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class WondexProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        WondexProtocolDecoder decoder = new WondexProtocolDecoder(null);
+        WondexProtocolDecoder decoder = new WondexProtocolDecoder(new WondexProtocol());
         
         verify(decoder.decode(null, null,
                 "1044989601,20130323074605,0.000000,90.000000,0,000,0,0,2"));

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Xexun2ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(null);
+        Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(new XexunProtocol());
         
         assertNull(decoder.decode(null, null,
                 ",+48606717068,,L,, imei:012207005047292,,,F:4.28V,1,52,11565,247,01,000E,1FC5"));

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class XexunProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        XexunProtocolDecoder decoder = new XexunProtocolDecoder(null);
+        XexunProtocolDecoder decoder = new XexunProtocolDecoder(new XexunProtocol());
         
         verify(decoder.decode(null, null,
                 "GPRMC,043435.000,A,811.299200,S,11339.9500,E,0.93,29.52,160313,00,0000.0,A*65,F,,imei:359585014597923,"));

File: test/org/traccar/protocol/XirgoProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class XirgoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        XirgoProtocolDecoder decoder = new XirgoProtocolDecoder(null);
+        XirgoProtocolDecoder decoder = new XirgoProtocolDecoder(new XirgoProtocol());
 
         verify(decoder.decode(null, null, null,
                 "$$357207059646786,4003,2015/05/19,15:54:56,-20.21422,-70.14927,37.5,1.8,0.0,11,0.8,12.9,31,297,1,0,0.0,0.0,0,1,1,1##"));

File: test/org/traccar/protocol/Xt013ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Xt013ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xt013ProtocolDecoder decoder = new Xt013ProtocolDecoder(null);
+        Xt013ProtocolDecoder decoder = new Xt013ProtocolDecoder(new Xt013Protocol());
         
         verify(decoder.decode(null, null,
                 "TK,862950021650364,150131090859,+53.267863,+5.767363,0,38,12,0,F,204,08,C94,336C,24,,4.09,1,,,,,,,,"));

File: test/org/traccar/protocol/Xt7ProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class Xt7ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xt7ProtocolDecoder decoder = new Xt7ProtocolDecoder(null);
+        Xt7ProtocolDecoder decoder = new Xt7ProtocolDecoder(new Xt7Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "53545832303130313031383031202020202020026A244750524D432C3130313035332E3030302C412C323233322E373630372C4E2C31313430342E373636392C452C302E30302C2C3233313131302C2C2C412A37462C3436302C30302C323739352C304536412C31342C39342C313030302C303030302C39312C54696D65723B31440D0A"))));

File: test/org/traccar/protocol/YwtProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class YwtProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        YwtProtocolDecoder decoder = new YwtProtocolDecoder(null);
+        YwtProtocolDecoder decoder = new YwtProtocolDecoder(new YwtProtocol());
         
         assertNull(decoder.decode(null, null,
                 "%SN,0417061042:0,0,140117041203,404"));

File: src/org/traccar/TrackerServer.java
Patch:
@@ -94,7 +94,7 @@ public void setAddress(String address) {
     /**
      * Set endianness
      */
-    void setEndianness(ByteOrder byteOrder) {
+    public void setEndianness(ByteOrder byteOrder) {
         bootstrap.setOption("bufferFactory", new HeapChannelBufferFactory(byteOrder));
         bootstrap.setOption("child.bufferFactory", new HeapChannelBufferFactory(byteOrder));
     }

File: src/org/traccar/http/WebServer.java
Patch:
@@ -55,6 +55,7 @@ public WebServer() {
             servletHandler.addServlet(new ServletHolder(new UserServlet()), "/user/*");
             servletHandler.addServlet(new ServletHolder(new DeviceServlet()), "/device/*");
             servletHandler.addServlet(new ServletHolder(new PositionServlet()), "/position/*");
+            servletHandler.addServlet(new ServletHolder(new CommandsServlet()), "/commands/*");
             servletHandler.addServlet(new ServletHolder(new MainServlet()), "/*");
 
             /*ResourceHandler mobileResourceHandler = new ResourceHandler();

File: src/org/traccar/protocol/ApelProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public class ApelProtocolDecoder extends BaseProtocolDecoder {
     private long lastIndex;
     private long newIndex;
 
-    public ApelProtocolDecoder(String protocol) {
+    public ApelProtocolDecoder(ApelProtocol protocol) {
         super(protocol);
     }
 
@@ -120,7 +120,7 @@ protected Object decode(
             int length = buf.readUnsignedShort();
             buf.skipBytes(length);
             length = buf.readUnsignedShort();
-            identify(buf.readBytes(length).toString(Charset.defaultCharset()));
+            identify(buf.readBytes(length).toString(Charset.defaultCharset()), channel);
         }
         
         else if (type == MSG_TYPE_LAST_LOG_INDEX) {
@@ -142,7 +142,7 @@ else if (hasDeviceId() && (type == MSG_TYPE_CURRENT_GPS_DATA || type == MSG_TYPE
 
             for (int j = 0; j < recordCount; j++) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 // Message index

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class AplicomProtocolDecoder extends BaseProtocolDecoder {
 
-    public AplicomProtocolDecoder(String protocol) {
+    public AplicomProtocolDecoder(AplicomProtocol protocol) {
         super(protocol);
     }
 
@@ -131,8 +131,8 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
-        if (!identify(imei)) {
+        position.setProtocol(getProtocolName());
+        if (!identify(imei, channel)) {
             return null;
         }
 

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class Ardi01ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Ardi01ProtocolDecoder(String protocol) {
+    public Ardi01ProtocolDecoder(Ardi01Protocol protocol) {
         super(protocol);
     }
 
@@ -62,11 +62,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Detect device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@
 
 public class AtrackProtocolDecoder extends BaseProtocolDecoder {
 
-    public AtrackProtocolDecoder(String protocol) {
+    public AtrackProtocolDecoder(AtrackProtocol protocol) {
         super(protocol);
     }
 
@@ -87,7 +87,7 @@ protected Object decode(
 
         // Get device id
         long id = buf.readLong();
-        if (!identify(String.valueOf(id))) {
+        if (!identify(String.valueOf(id), channel, remoteAddress)) {
             return null;
         }
 
@@ -101,7 +101,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Date and time
             position.setTime(new Date(buf.readUnsignedInt() * 1000)); // gps time

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ private static double convertCoordinate(short degrees, int raw) {
         return (degrees + seconds) * ((raw & 0x0f) == 0 ? -1 : 1);
     }
 
-    public AutoFon45ProtocolDecoder(String protocol) {
+    public AutoFon45ProtocolDecoder(AutoFon45Protocol protocol) {
         super(protocol);
     }
 
@@ -51,7 +51,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
             buf.readBytes(bytes);
 
             String imei = ChannelBufferTools.readHexString(ChannelBuffers.wrappedBuffer(bytes, 1, 16), 16).substring(1);
-            if (!identify(imei)) {
+            if (!identify(imei, channel)) {
                 return null;
             }
 
@@ -67,7 +67,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             short status = buf.readUnsignedByte();

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class AutoFonProtocolDecoder extends BaseProtocolDecoder {
 
-    public AutoFonProtocolDecoder(String protocol) {
+    public AutoFonProtocolDecoder(AutoFonProtocol protocol) {
         super(protocol);
     }
 
@@ -46,7 +46,7 @@ private Position decodePosition(ChannelBuffer buf, boolean history) {
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         position.setDeviceId(getDeviceId());
 
         if (!history) {
@@ -121,7 +121,7 @@ protected Object decode(
             buf.readUnsignedByte(); // software version
 
             String imei = ChannelBufferTools.readHexString(buf, 16).substring(1);
-            if (!identify(imei)) {
+            if (!identify(imei, channel)) {
                 return null;
             }
 

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class Avl301ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Avl301ProtocolDecoder(String protocol) {
+    public Avl301ProtocolDecoder(Avl301Protocol protocol) {
         super(protocol);
     }
 
@@ -72,7 +72,7 @@ protected Object decode(
 
         if (type == MSG_LOGIN) {
 
-            if (identify(readImei(buf))) {
+            if (identify(readImei(buf), channel)) {
                 sendResponse(channel, type);
             }
 
@@ -85,7 +85,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Date and time(6)
             Calendar time = Calendar.getInstance(TimeZone.getTimeZone("UTC"));

File: src/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class BceProtocolDecoder extends BaseProtocolDecoder {
 
-    public BceProtocolDecoder(String protocol) {
+    public BceProtocolDecoder(BceProtocol protocol) {
         super(protocol);
     }
 
@@ -50,7 +50,7 @@ protected Object decode(
         ChannelBuffer buf = (ChannelBuffer) msg;
         
         String imei = String.format("%015d", buf.readLong());
-        if (!identify(imei)) {
+        if (!identify(imei, channel)) {
             return null;
         }
 
@@ -65,7 +65,7 @@ protected Object decode(
             while (buf.readerIndex() < dataEnd) {
 
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 int structEnd = buf.readUnsignedByte() + buf.readerIndex();

File: src/org/traccar/protocol/BoxProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class BoxProtocolDecoder extends BaseProtocolDecoder {
 
-    public BoxProtocolDecoder(String protocol) {
+    public BoxProtocolDecoder(BoxProtocol protocol) {
         super(protocol);
     }
 
@@ -58,7 +58,7 @@ protected Object decode(
             
             int index = sentence.indexOf(',', 2) + 1;
             String id = sentence.substring(index, sentence.indexOf(',', index));
-            identify(id);
+            identify(id, channel);
         }
         
         else if (sentence.startsWith("L,")) {
@@ -72,7 +72,7 @@ else if (sentence.startsWith("L,")) {
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             Integer index = 1;
 

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class CalAmpProtocolDecoder extends BaseProtocolDecoder {
 
-    public CalAmpProtocolDecoder(String protocol) {
+    public CalAmpProtocolDecoder(CalAmpProtocol protocol) {
         super(protocol);
     }
 
@@ -109,7 +109,7 @@ protected Object decode(
                     }
                 }
 
-                identify(String.valueOf(id));
+                identify(String.valueOf(id), channel, remoteAddress);
             }
 
             // Identifier type
@@ -160,7 +160,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Location data
             position.setTime(new Date(buf.readUnsignedInt() * 1000));

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class CarTrackProtocolDecoder extends BaseProtocolDecoder {
 
-    public CarTrackProtocolDecoder(String protocol) {
+    public CarTrackProtocolDecoder(CarTrackProtocol protocol) {
         super(protocol);
     }
 
@@ -70,11 +70,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Get device by unique identifier
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/CarscopProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class CarscopProtocolDecoder extends BaseProtocolDecoder {
 
-    public CarscopProtocolDecoder(String protocol) {
+    public CarscopProtocolDecoder(CarscopProtocol protocol) {
         super(protocol);
     }
 
@@ -58,7 +58,7 @@ protected Object decode(
         int index = sentence.indexOf("UB05");
         if (index != -1) {
             String imei = sentence.substring(index + 4, index + 4 + 15);
-            identify(imei);
+            identify(imei, channel);
         }
         if (!hasDeviceId()) {
             return null;
@@ -73,7 +73,7 @@ protected Object decode(
         // Create new position
         Position position = new Position();
         position.setDeviceId(getDeviceId());
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         index = 1;
 
         // Time

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -33,7 +33,7 @@
 
 public class CastelProtocolDecoder extends BaseProtocolDecoder {
 
-    public CastelProtocolDecoder(String protocol) {
+    public CastelProtocolDecoder(CastelProtocol protocol) {
         super(protocol);
     }
 
@@ -73,9 +73,9 @@ protected Object decode(
         } else if (type == MSG_LOGIN || type == MSG_GPS) {
             
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             
-            if (!identify(id.toString(Charset.defaultCharset()).trim())) {
+            if (!identify(id.toString(Charset.defaultCharset()).trim(), channel, remoteAddress)) {
                 return null;
             } else if (type == MSG_LOGIN) {
 

File: src/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class CellocatorProtocolDecoder extends BaseProtocolDecoder {
 
-    public CellocatorProtocolDecoder(String protocol) {
+    public CellocatorProtocolDecoder(CellocatorProtocol protocol) {
         super(protocol);
     }
 
@@ -104,10 +104,10 @@ protected Object decode(
         // Parse location
         if (type == MSG_CLIENT_STATUS) {
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             
             // Device identifier
-            if (!identify(String.valueOf(deviceUniqueId))) {
+            if (!identify(String.valueOf(deviceUniqueId), channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class EasyTrackProtocolDecoder extends BaseProtocolDecoder {
 
-    public EasyTrackProtocolDecoder(String protocol) {
+    public EasyTrackProtocolDecoder(EasyTrackProtocol protocol) {
         super(protocol);
     }
 
@@ -73,12 +73,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class EelinkProtocolDecoder extends BaseProtocolDecoder {
 
-    public EelinkProtocolDecoder(String protocol) {
+    public EelinkProtocolDecoder(EelinkProtocol protocol) {
         super(protocol);
     }
 
@@ -84,7 +84,7 @@ protected Object decode(
         }
         
         if (type == MSG_LOGIN) {
-            identify(ChannelBufferTools.readHexString(buf, 16).substring(1));
+            identify(ChannelBufferTools.readHexString(buf, 16).substring(1), channel);
         }
         
         else if (hasDeviceId() &&
@@ -97,7 +97,7 @@ else if (hasDeviceId() &&
             Position position = new Position();
             position.setDeviceId(getDeviceId());
             
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.set(Event.KEY_INDEX, index);
             
             // Location

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class GalileoProtocolDecoder extends BaseProtocolDecoder {
 
-    public GalileoProtocolDecoder(String protocol) {
+    public GalileoProtocolDecoder(GalileoProtocol protocol) {
         super(protocol);
     }
 
@@ -91,7 +91,7 @@ protected Object decode(
         Set<Integer> tags = new HashSet<Integer>();
         boolean hasLocation = false;
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         
         while (buf.readerIndex() < length) {
 
@@ -112,7 +112,7 @@ protected Object decode(
                 case TAG_IMEI:
                     String imei = buf.toString(buf.readerIndex(), 15, Charset.defaultCharset());
                     buf.skipBytes(imei.length());
-                    identify(imei);
+                    identify(imei, channel);
                     break;
 
                 case TAG_DATE:

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class GatorProtocolDecoder extends BaseProtocolDecoder {
 
-    public GatorProtocolDecoder(String protocol) {
+    public GatorProtocolDecoder(GatorProtocol protocol) {
         super(protocol);
     }
 
@@ -70,10 +70,10 @@ protected Object decode(
             
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Identification
-            if (!identify(id)) {
+            if (!identify(id, channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/GoSafeProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class GoSafeProtocolDecoder extends BaseProtocolDecoder {
 
-    public GoSafeProtocolDecoder(String protocol) {
+    public GoSafeProtocolDecoder(GoSafeProtocol protocol) {
         super(protocol);
     }
 
@@ -65,12 +65,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/GotopProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class GotopProtocolDecoder extends BaseProtocolDecoder {
 
-    public GotopProtocolDecoder(String protocol) {
+    public GotopProtocolDecoder(GotopProtocol protocol) {
         super(protocol);
     }
 
@@ -61,11 +61,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class Gps103ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Gps103ProtocolDecoder(String protocol) {
+    public Gps103ProtocolDecoder(Gps103Protocol protocol) {
         super(protocol);
     }
 
@@ -90,13 +90,13 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
         String imei = parser.group(index++);
-        if (!identify(imei)) {
+        if (!identify(imei, channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class Gt02ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Gt02ProtocolDecoder(String protocol) {
+    public Gt02ProtocolDecoder(Gt02Protocol protocol) {
         super(protocol);
     }
 
@@ -77,11 +77,11 @@ else if (type == MSG_DATA) {
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.set(Event.KEY_INDEX, index);
 
             // Get device id
-            if (!identify(imei)) {
+            if (!identify(imei, channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@ public class Gt06ProtocolDecoder extends BaseProtocolDecoder {
     private boolean forceTimeZone = false;
     private final TimeZone timeZone = TimeZone.getTimeZone("UTC");
 
-    public Gt06ProtocolDecoder(String protocol) {
+    public Gt06ProtocolDecoder(Gt06Protocol protocol) {
         super(protocol);
 
         Properties properties = Context.getProps();
@@ -126,7 +126,7 @@ protected Object decode(
                 }
             }
 
-            if (identify(imei)) {
+            if (identify(imei, channel)) {
                 buf.skipBytes(buf.readableBytes() - 6);
                 sendResponse(channel, type, buf.readUnsignedShort());
             }
@@ -144,7 +144,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Date and time
             Calendar time = Calendar.getInstance(timeZone);

File: src/org/traccar/protocol/HaicomProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class HaicomProtocolDecoder extends BaseProtocolDecoder {
 
-    public HaicomProtocolDecoder(String protocol) {
+    public HaicomProtocolDecoder(HaicomProtocol protocol) {
         super(protocol);
     }
 
@@ -67,12 +67,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/IntellitracProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class IntellitracProtocolDecoder extends BaseProtocolDecoder {
 
-    public IntellitracProtocolDecoder(String protocol) {
+    public IntellitracProtocolDecoder(IntellitracProtocol protocol) {
         super(protocol);
     }
 
@@ -76,11 +76,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Detect device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class KhdProtocolDecoder extends BaseProtocolDecoder {
 
-    public KhdProtocolDecoder(String protocol) {
+    public KhdProtocolDecoder(KhdProtocol protocol) {
         super(protocol);
     }
 
@@ -74,10 +74,10 @@ protected Object decode(
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Device identification
-            if (!identify(readSerialNumber(buf))) {
+            if (!identify(readSerialNumber(buf), channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/M2mProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class M2mProtocolDecoder extends BaseProtocolDecoder {
 
-    public M2mProtocolDecoder(String protocol) {
+    public M2mProtocolDecoder(M2mProtocol protocol) {
         super(protocol);
     }
     
@@ -64,13 +64,13 @@ protected Object decode(
             }
 
             // Identification
-            identify(imei.toString());
+            identify(imei.toString(), channel);
 
         } else if (hasDeviceId()) {
             
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             // Date and time

File: src/org/traccar/protocol/ManPowerProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class ManPowerProtocolDecoder extends BaseProtocolDecoder {
 
-    public ManPowerProtocolDecoder(String protocol) {
+    public ManPowerProtocolDecoder(ManPowerProtocol protocol) {
         super(protocol);
     }
 
@@ -64,12 +64,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/MiniFinderProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MiniFinderProtocolDecoder extends BaseProtocolDecoder {
 
-    public MiniFinderProtocolDecoder(String protocol) {
+    public MiniFinderProtocolDecoder(MiniFinderProtocol protocol) {
         super(protocol);
     }
 
@@ -57,7 +57,7 @@ protected Object decode(
 
         // Identification
         if (sentence.startsWith("!1")) {
-            identify(sentence.substring(3, sentence.length()));
+            identify(sentence.substring(3, sentence.length()), channel);
         }
 
         // Location
@@ -71,7 +71,7 @@ else if (sentence.startsWith("!D") && hasDeviceId()) {
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             Integer index = 1;

File: src/org/traccar/protocol/MtxProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MtxProtocolDecoder extends BaseProtocolDecoder {
 
-    public MtxProtocolDecoder(String protocol) {
+    public MtxProtocolDecoder(MtxProtocol protocol) {
         super(protocol);
     }
 
@@ -71,12 +71,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/MxtProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class MxtProtocolDecoder extends BaseProtocolDecoder {
 
-    public MxtProtocolDecoder(String protocol) {
+    public MxtProtocolDecoder(MxtProtocol protocol) {
         super(protocol);
     }
 
@@ -49,14 +49,14 @@ protected Object decode(
         int type = buf.readUnsignedByte();
 
         String id = String.valueOf(buf.readUnsignedInt());
-        if (!identify(id)) {
+        if (!identify(id, channel)) {
             return null;
         }
 
         if (type == MSG_POSITION) {
 
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
 
             buf.readUnsignedByte(); // protocol

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public class NavisProtocolDecoder extends BaseProtocolDecoder {
 
     private static final Charset charset = Charset.defaultCharset();
 
-    public NavisProtocolDecoder(String protocol) {
+    public NavisProtocolDecoder(NavisProtocol protocol) {
         super(protocol);
     }
 
@@ -80,7 +80,7 @@ public Position getPosition() {
 
     private ParseResult parsePosition(ChannelBuffer buf) {
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         position.setDeviceId(getDeviceId());
 
@@ -252,7 +252,7 @@ private Object processArray(Channel channel, ChannelBuffer buf) {
 
     private Object processHandshake(Channel channel, ChannelBuffer buf) {
         buf.readByte(); // semicolon symbol
-        if (identify(buf.toString(Charset.defaultCharset()))) {
+        if (identify(buf.toString(Charset.defaultCharset()), channel)) {
             sendReply(channel, ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN, "*<S", charset));
         }
         return null;

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class OrionProtocolDecoder extends BaseProtocolDecoder {
 
-    public OrionProtocolDecoder(String protocol) {
+    public OrionProtocolDecoder(OrionProtocol protocol) {
         super(protocol);
     }
     
@@ -72,7 +72,7 @@ protected Object decode(
                 sendResponse(channel, buf);
             }
 
-            if (!identify(String.valueOf(buf.readUnsignedInt()))) {
+            if (!identify(String.valueOf(buf.readUnsignedInt()), channel)) {
                 return null;
             }
 
@@ -83,7 +83,7 @@ protected Object decode(
                 // Create new position
                 Position position = new Position();
                 position.setDeviceId(getDeviceId());
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 
                 position.set(Event.KEY_EVENT, buf.readUnsignedByte());
                 buf.readUnsignedByte(); // length

File: src/org/traccar/protocol/OsmAndProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@
 
 public class OsmAndProtocolDecoder extends BaseProtocolDecoder {
     
-    public OsmAndProtocolDecoder(String protocol) {
+    public OsmAndProtocolDecoder(OsmAndProtocol protocol) {
         super(protocol);
     }
     
@@ -58,11 +58,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         // Identification
         String id = params.get(params.containsKey("id") ? "id" : "deviceid").get(0);
-        if (!identify(id)) {
+        if (!identify(id, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@
 
 public class PiligrimProtocolDecoder extends BaseProtocolDecoder {
     
-    public PiligrimProtocolDecoder(String protocol) {
+    public PiligrimProtocolDecoder(PiligrimProtocol protocol) {
         super(protocol);
     }
 
@@ -83,7 +83,7 @@ protected Object decode(
             
             // Identification
             QueryStringDecoder decoder = new QueryStringDecoder(request.getUri());
-            if (!identify(decoder.getParameters().get("imei").get(0))) {
+            if (!identify(decoder.getParameters().get("imei").get(0), channel)) {
                 return null;
             }
 
@@ -99,7 +99,7 @@ protected Object decode(
                 if (type == MSG_GPS || type == MSG_GPS_SENSORS) {
                     
                     Position position = new Position();
-                    position.setProtocol(getProtocol());
+                    position.setProtocol(getProtocolName());
                     position.setDeviceId(getDeviceId());
                     
                     // Time

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public class ProgressProtocolDecoder extends BaseProtocolDecoder {
     private long lastIndex;
     private long newIndex;
 
-    public ProgressProtocolDecoder(String protocol) {
+    public ProgressProtocolDecoder(ProgressProtocol protocol) {
         super(protocol);
     }
 
@@ -81,7 +81,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
             buf.skipBytes(length);
             length = buf.readUnsignedShort();
             String imei = buf.readBytes(length).toString(Charset.defaultCharset());
-            identify(imei);
+            identify(imei, channel);
         }
 
         // Position
@@ -95,7 +95,7 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
 
             for (int j = 0; j < recordCount; j++) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 // Message index

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Pt502ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Pt502ProtocolDecoder(String protocol) {
+    public Pt502ProtocolDecoder(Pt502Protocol protocol) {
         super(protocol);
     }
 
@@ -71,12 +71,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/RitiProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class RitiProtocolDecoder extends BaseProtocolDecoder {
 
-    public RitiProtocolDecoder(String protocol) {
+    public RitiProtocolDecoder(RitiProtocol protocol) {
         super(protocol);
     }
 
@@ -58,12 +58,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         buf.skipBytes(2); // header
 
         // Get device id
-        if (!identify(String.valueOf(buf.readUnsignedShort()))) {
+        if (!identify(String.valueOf(buf.readUnsignedShort()), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class RuptelaProtocolDecoder extends BaseProtocolDecoder {
     
-    public RuptelaProtocolDecoder(String protocol) {
+    public RuptelaProtocolDecoder(RuptelaProtocol protocol) {
         super(protocol);
     }
 
@@ -47,7 +47,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
         // Identify device
         String imei = String.format("%015d", buf.readLong());
-        if (!identify(imei)) {
+        if (!identify(imei, channel)) {
             return null;
         }
 
@@ -61,7 +61,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
             for (int i = 0; i < count; i++) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 // Time

File: src/org/traccar/protocol/SkypatrolProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class SkypatrolProtocolDecoder extends BaseProtocolDecoder {
 
-    public SkypatrolProtocolDecoder(String protocol) {
+    public SkypatrolProtocolDecoder(SkypatrolProtocol protocol) {
         super(protocol);
     }
 
@@ -71,7 +71,7 @@ protected Object decode(
 
             // Create new position
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             // Status code
             if (BitUtil.check(mask, 1)) {
@@ -90,7 +90,7 @@ protected Object decode(
                 Log.warning("No device id field");
                 return null;
             }
-            if (!identify(id)) {
+            if (!identify(id, channel)) {
                 return null;
             }
             position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Stl060ProtocolDecoder.java
Patch:
@@ -27,7 +27,7 @@
 
 public class Stl060ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Stl060ProtocolDecoder(String protocol) {
+    public Stl060ProtocolDecoder(Stl060Protocol protocol) {
         super(protocol);
     }
 
@@ -82,12 +82,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Device identification
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class SuntechProtocolDecoder extends BaseProtocolDecoder {
 
-    public SuntechProtocolDecoder(String protocol) {
+    public SuntechProtocolDecoder(SuntechProtocol protocol) {
         super(protocol);
     }
 
@@ -64,11 +64,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         int index = 1;
 
         // Identifier
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TelikProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TelikProtocolDecoder extends BaseProtocolDecoder {
 
-    public TelikProtocolDecoder(String protocol) {
+    public TelikProtocolDecoder(TelikProtocol protocol) {
         super(protocol);
     }
 
@@ -62,12 +62,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -31,15 +31,15 @@
 
 public class TeltonikaProtocolDecoder extends BaseProtocolDecoder {
     
-    public TeltonikaProtocolDecoder(String protocol) {
+    public TeltonikaProtocolDecoder(TeltonikaProtocol protocol) {
         super(protocol);
     }
 
     private void parseIdentification(Channel channel, ChannelBuffer buf) {
 
         int length = buf.readUnsignedShort();
         String imei = buf.toString(buf.readerIndex(), length, Charset.defaultCharset());
-        boolean result =  identify(imei);
+        boolean result =  identify(imei, channel);
 
         if (channel != null) {
             ChannelBuffer response = ChannelBuffers.directBuffer(1);
@@ -68,7 +68,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
         
         for (int i = 0; i < count; i++) {
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             
             position.setDeviceId(getDeviceId());
             

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Tk103ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Tk103ProtocolDecoder(String protocol) {
+    public Tk103ProtocolDecoder(Tk103Protocol protocol) {
         super(protocol);
     }
 
@@ -83,11 +83,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class Tlt2hProtocolDecoder extends BaseProtocolDecoder {
 
-    public Tlt2hProtocolDecoder(String protocol) {
+    public Tlt2hProtocolDecoder(Tlt2hProtocol protocol) {
         super(protocol);
     }
 
@@ -72,7 +72,7 @@ protected Object decode(
         }
 
         // Get device identifier
-        if (!identify(parser.group(1))) {
+        if (!identify(parser.group(1), channel)) {
             return null;
         }
 
@@ -86,7 +86,7 @@ protected Object decode(
             parser = patternPosition.matcher(message);
             if (parser.matches()) {
                 Position position = new Position();
-                position.setProtocol(getProtocol());
+                position.setProtocol(getProtocolName());
                 position.setDeviceId(getDeviceId());
 
                 Integer index = 1;

File: src/org/traccar/protocol/TotemProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TotemProtocolDecoder extends BaseProtocolDecoder {
 
-    public TotemProtocolDecoder(String protocol) {
+    public TotemProtocolDecoder(TotemProtocol protocol) {
         super(protocol);
     }
 
@@ -159,12 +159,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Tr900ProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class Tr900ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Tr900ProtocolDecoder(String protocol) {
+    public Tr900ProtocolDecoder(Tr900Protocol protocol) {
         super(protocol);
     }
 
@@ -69,11 +69,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
 
         // Identification
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TrackboxProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class TrackboxProtocolDecoder extends BaseProtocolDecoder {
     
-    public TrackboxProtocolDecoder(String protocol) {
+    public TrackboxProtocolDecoder(TrackboxProtocol protocol) {
         super(protocol);
     }
 
@@ -61,7 +61,7 @@ protected Object decode(
 
         if (sentence.startsWith("a=connect")) {
             String id = sentence.substring(sentence.indexOf("i=") + 2);
-            if (identify(id)) {
+            if (identify(id, channel)) {
                 sendResponse(channel);
             }
         }
@@ -77,7 +77,7 @@ protected Object decode(
             // Create new position
             Position position = new Position();
             position.setDeviceId(getDeviceId());
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
 
             Integer index = 1;
 

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -35,7 +35,7 @@
 
 public class TramigoProtocolDecoder extends BaseProtocolDecoder {
 
-    public TramigoProtocolDecoder(String protocol) {
+    public TramigoProtocolDecoder(TramigoProtocol protocol) {
         super(protocol);
     }
 
@@ -61,12 +61,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         position.set(Event.KEY_INDEX, index);
         position.setValid(true);
 
         // Get device id
-        if (!identify(String.valueOf(id))) {
+        if (!identify(String.valueOf(id), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class TytanProtocolDecoder extends BaseProtocolDecoder {
 
-    public TytanProtocolDecoder(String protocol) {
+    public TytanProtocolDecoder(TytanProtocol protocol) {
         super(protocol);
     }
 
@@ -52,7 +52,7 @@ protected Object decode(
         }
         
         String id = String.valueOf(buf.readUnsignedInt());
-        if (!identify(id)) {
+        if (!identify(id, channel, remoteAddress)) {
             return null;
         }
 
@@ -61,7 +61,7 @@ protected Object decode(
         while (buf.readable()) {
             
             Position position = new Position();
-            position.setProtocol(getProtocol());
+            position.setProtocol(getProtocolName());
             position.setDeviceId(getDeviceId());
             
             int end = buf.readerIndex() + buf.readUnsignedByte();

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class UlbotechProtocolDecoder extends BaseProtocolDecoder {
 
-    public UlbotechProtocolDecoder(String protocol) {
+    public UlbotechProtocolDecoder(UlbotechProtocol protocol) {
         super(protocol);
     }
 
@@ -57,11 +57,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         // Get device id
         String imei = ChannelBufferTools.readHexString(buf, 16).substring(1);
-        if (!identify(imei)) {
+        if (!identify(imei, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/VisiontekProtocolDecoder.java
Patch:
@@ -28,7 +28,7 @@
 
 public class VisiontekProtocolDecoder extends BaseProtocolDecoder {
 
-    public VisiontekProtocolDecoder(String protocol) {
+    public VisiontekProtocolDecoder(VisiontekProtocol protocol) {
         super(protocol);
     }
 
@@ -70,14 +70,14 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Device identification
         String id = parser.group(index++);
         String imei = parser.group(index++);
-        if (!identify(id, false) && !identify(imei)) {
+        if (!identify(id, channel, null, false) && !identify(imei, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -32,7 +32,7 @@
 
 public class WialonProtocolDecoder extends BaseProtocolDecoder {
 
-    public WialonProtocolDecoder(String protocol) {
+    public WialonProtocolDecoder(WialonProtocol protocol) {
         super(protocol);
     }
 
@@ -77,7 +77,7 @@ private Position decodePosition(String substring) {
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         position.setDeviceId(getDeviceId());
 
         Integer index = 1;
@@ -174,7 +174,7 @@ protected Object decode(
         // Detect device ID
         if (sentence.startsWith("#L#")) {
             String imei = sentence.substring(3, sentence.indexOf(';'));
-            if (identify(imei)) {
+            if (identify(imei, channel)) {
                 sendResponse(channel, "#AL#", 1);
             }
         }

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class WondexProtocolDecoder extends BaseProtocolDecoder {
 
-    public WondexProtocolDecoder(String protocol) {
+    public WondexProtocolDecoder(WondexProtocol protocol) {
         super(protocol);
     }
 
@@ -66,11 +66,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         int index = 1;
 
         // Device identifier
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class Xexun2ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Xexun2ProtocolDecoder(String protocol) {
+    public Xexun2ProtocolDecoder(XexunProtocol protocol) {
         super(protocol);
     }
 
@@ -72,7 +72,7 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
@@ -127,7 +127,7 @@ protected Object decode(
         position.set(Event.KEY_ALARM, parser.group(index++));
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class XirgoProtocolDecoder extends BaseProtocolDecoder {
 
-    public XirgoProtocolDecoder(String protocol) {
+    public XirgoProtocolDecoder(XirgoProtocol protocol) {
         super(protocol);
     }
 
@@ -69,12 +69,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Get device by IMEI
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel, remoteAddress)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Xt013ProtocolDecoder.java
Patch:
@@ -30,7 +30,7 @@
 
 public class Xt013ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Xt013ProtocolDecoder(String protocol) {
+    public Xt013ProtocolDecoder(Xt013Protocol protocol) {
         super(protocol);
     }
 
@@ -71,12 +71,12 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
 
         Integer index = 1;
 
         // Identify device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/Xt7ProtocolDecoder.java
Patch:
@@ -31,7 +31,7 @@
 
 public class Xt7ProtocolDecoder extends BaseProtocolDecoder {
 
-    public Xt7ProtocolDecoder(String protocol) {
+    public Xt7ProtocolDecoder(Xt7Protocol protocol) {
         super(protocol);
     }
 
@@ -67,11 +67,11 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         
         // Get device by id
         String id = buf.readBytes(16).toString(Charset.defaultCharset()).trim();
-        if (!identify(id)) {
+        if (!identify(id, channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: src/org/traccar/protocol/YwtProtocolDecoder.java
Patch:
@@ -29,7 +29,7 @@
 
 public class YwtProtocolDecoder extends BaseProtocolDecoder {
 
-    public YwtProtocolDecoder(String protocol) {
+    public YwtProtocolDecoder(YwtProtocol protocol) {
         super(protocol);
     }
 
@@ -81,12 +81,12 @@ protected Object decode(
         
         // Create new position
         Position position = new Position();
-        position.setProtocol(getProtocol());
+        position.setProtocol(getProtocolName());
         Integer index = 1;
         String type = parser.group(index++);
 
         // Device
-        if (!identify(parser.group(index++))) {
+        if (!identify(parser.group(index++), channel)) {
             return null;
         }
         position.setDeviceId(getDeviceId());

File: test/org/traccar/protocol/ApelProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class ApelProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        ApelProtocolDecoder decoder = new ApelProtocolDecoder(null);
+        ApelProtocolDecoder decoder = new ApelProtocolDecoder(new ApelProtocol());
 
         /*byte[] buf1 = {0x40,0x4E,0x54,0x43,0x01,0x00,0x00,0x00,0x7B,0x00,0x00,0x00,0x13,0x00,0x44,0x34,0x2A,0x3E,0x53,0x3A,0x38,0x36,0x31,0x37,0x38,0x35,0x30,0x30,0x35,0x32,0x30,0x35,0x30,0x37,0x39};
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, buf1)));*/

File: test/org/traccar/protocol/AplicomProtocolDecoderTest.java
Patch:
@@ -10,8 +10,8 @@ public class AplicomProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(null);
-
+        AplicomProtocolDecoder decoder = new AplicomProtocolDecoder(new AplicomProtocol());
+        
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "44C20146B710C158DA002100B09F0700C054CA0EA254CA0E9C03BE0BF6015D7069070000142A600000000000000001"))));
 

File: test/org/traccar/protocol/Ardi01ProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class Ardi01ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Ardi01ProtocolDecoder decoder = new Ardi01ProtocolDecoder(null);
+        Ardi01ProtocolDecoder decoder = new Ardi01ProtocolDecoder(new Ardi01Protocol());
 
         verify(decoder.decode(null, null,
                 "013227003054776,20141010052719,24.4736042,56.8445807,110,289,40,7,5,78,-1"));

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class AtrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        AtrackProtocolDecoder decoder = new AtrackProtocolDecoder(null);
+        AtrackProtocolDecoder decoder = new AtrackProtocolDecoder(new AtrackProtocol());
 
         assertNull(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "fe0200014104d8f196820001"))));

File: test/org/traccar/protocol/AutoFon45ProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@
 public class AutoFon45ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
-        AutoFon45ProtocolDecoder decoder = new AutoFon45ProtocolDecoder(null);
+        AutoFon45ProtocolDecoder decoder = new AutoFon45ProtocolDecoder(new AutoFon45Protocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "41032125656985547543619173484002123481"))));

File: test/org/traccar/protocol/AutoFonProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class AutoFonProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        AutoFonProtocolDecoder decoder = new AutoFonProtocolDecoder(null);
+        AutoFonProtocolDecoder decoder = new AutoFonProtocolDecoder(new AutoFonProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "10556103592310314825728F"))));

File: test/org/traccar/protocol/Avl301ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Avl301ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Avl301ProtocolDecoder decoder = new Avl301ProtocolDecoder(null);
+        Avl301ProtocolDecoder decoder = new Avl301ProtocolDecoder(new Avl301Protocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "244c0f086058500087335500010d0a"))));

File: test/org/traccar/protocol/BceProtocolDecoderTest.java
Patch:
@@ -14,7 +14,7 @@ public class BceProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        BceProtocolDecoder decoder = new BceProtocolDecoder(null);
+        BceProtocolDecoder decoder = new BceProtocolDecoder(new BceProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "be76619c834601004200a0003fd769c568ffc3db0079161d420683a9414918b1150000000000d102660167040000000000009f06357f0000a401042ea415e10232000000000000000000000051"))));

File: test/org/traccar/protocol/BoxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class BoxProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        BoxProtocolDecoder decoder = new BoxProtocolDecoder(null);
+        BoxProtocolDecoder decoder = new BoxProtocolDecoder(new BoxProtocol());
         
         assertNull(decoder.decode(null, null,
                 "H,BT,358281002435893,081028142432,F5813D19,6D6E6DC2"));

File: test/org/traccar/protocol/CalAmpProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class CalAmpProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(null);
+        CalAmpProtocolDecoder decoder = new CalAmpProtocolDecoder(new CalAmpProtocol());
         
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "830545321041830101010300010000333862000023c301000000004532104183ffffff353816051610691f420040163953294fffffffffffffffff8996604211639032949f4f54413a317c303b302c317c343b302c34004f5441535441543a302c302c302c302c302c222200564255533a342c322e302e302c343533323130343138332c5630312e30332e30312e34302c5630312e30332e30312e33312c2c0056494e2d494e464f3a56494e3d31464d5a5537324539355a4137303032362c4445562d5245474e3d55532c535256522d5245474e3d555300")), null));

File: test/org/traccar/protocol/CarTrackProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class CarTrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CarTrackProtocolDecoder decoder = new CarTrackProtocolDecoder(null);
+        CarTrackProtocolDecoder decoder = new CarTrackProtocolDecoder(new CarTrackProtocol());
 
         verify(decoder.decode(null, null,
                 "$$2222234???????&A9955&B102904.000,A,2233.0655,N,11404.9440,E,0.00,,030109,,*17|6.3|&C0100000100&D000024?>&E10000000&Y00100020"));

File: test/org/traccar/protocol/CarscopProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class CarscopProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CarscopProtocolDecoder decoder = new CarscopProtocolDecoder(null);
+        CarscopProtocolDecoder decoder = new CarscopProtocolDecoder(new CarscopProtocol());
 
         verify(decoder.decode(null, null,
                 "*040331141830UB05123456789012345061825A2934.0133N10627.2544E000.0040331309.6200000000L000000"));

File: test/org/traccar/protocol/CastelProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class CastelProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CastelProtocolDecoder decoder = new CastelProtocolDecoder(null);
+        CastelProtocolDecoder decoder = new CastelProtocolDecoder(new CastelProtocol());
 
         assertNull(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "40401F00043130303131313235323939383700000000000000100303320D0A"))));

File: test/org/traccar/protocol/CellocatorProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class CellocatorProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        CellocatorProtocolDecoder decoder = new CellocatorProtocolDecoder(null);
+        CellocatorProtocolDecoder decoder = new CellocatorProtocolDecoder(new CellocatorProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "4D4347500006000000081A02021204000000210062300000006B00E100000000000000000000E5A100040206614EA303181A57034E1200000000000000001525071403D60749"))));

File: test/org/traccar/protocol/EasyTrackProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class EasyTrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EasyTrackProtocolDecoder decoder = new EasyTrackProtocolDecoder(null);
+        EasyTrackProtocolDecoder decoder = new EasyTrackProtocolDecoder(new EasyTrackProtocol());
 
         assertNull(decoder.decode(null, null, "*ET,135790246811221,GZ,0001,0005"));
 

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class EelinkProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EelinkProtocolDecoder decoder = new EelinkProtocolDecoder(null);
+        EelinkProtocolDecoder decoder = new EelinkProtocolDecoder(new EelinkProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "676701000b001b035418804661834901"))));

File: test/org/traccar/protocol/EnforaProtocolDecoderTest.java
Patch:
@@ -14,7 +14,7 @@ public class EnforaProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EnforaProtocolDecoder decoder = new EnforaProtocolDecoder(null);
+        EnforaProtocolDecoder decoder = new EnforaProtocolDecoder(new EnforaProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "000A08002020202020303131303730303030353730323637"))));

File: test/org/traccar/protocol/Ev603ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Ev603ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Ev603ProtocolDecoder decoder = new Ev603ProtocolDecoder(null);
+        Ev603ProtocolDecoder decoder = new Ev603ProtocolDecoder(new Ev603Protocol());
 
         assertNull(decoder.decode(null, null, "!1,123456789012345"));
 

File: test/org/traccar/protocol/FreedomProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class FreedomProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        FreedomProtocolDecoder decoder = new FreedomProtocolDecoder(null);
+        FreedomProtocolDecoder decoder = new FreedomProtocolDecoder(new FreedomProtocol());
 
         verify(decoder.decode(null, null,
                 "IMEI,353358011714362,2014/05/22, 20:49:32, N, Lat:4725.9624, E, Lon:01912.5483, Spd:5.05"));

File: test/org/traccar/protocol/GalileoProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class GalileoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GalileoProtocolDecoder decoder = new GalileoProtocolDecoder(null);
+        GalileoProtocolDecoder decoder = new GalileoProtocolDecoder(new GalileoProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "011380033836383230343030313534393038370432008590"))));

File: test/org/traccar/protocol/GatorProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class GatorProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GatorProtocolDecoder decoder = new GatorProtocolDecoder(null);
+        GatorProtocolDecoder decoder = new GatorProtocolDecoder(new GatorProtocol());
         
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "24248000260009632d141121072702059226180104367500000000c04700079c0c34000ad80b00ff000a0d"))));

File: test/org/traccar/protocol/Gl100ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Gl100ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gl100ProtocolDecoder decoder = new Gl100ProtocolDecoder(null);
+        Gl100ProtocolDecoder decoder = new Gl100ProtocolDecoder(new Gl100Protocol());
 
         assertNull(decoder.decode(null, null,
                 "AT+GTHBD=HeartBeat,359231030000010,20090101000000,11F0,0102120204"));

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -9,14 +9,14 @@ public class Gl200ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(null);
+        Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new Gl200Protocol());
 
         verify(decoder.decode(null, null, null,
                 "+RESP:GTSTT,1A0401,860599000508846,,41,0,0.0,84,107.5,-76.657998,39.497203,20150623160622,0310,0260,B435,3B81,,20150623160622,0F54$"));
 
         verify(decoder.decode(null, null, null,
                 "+RESP:GTFRI,1A0401,860599000508846,,0,0,1,1,134.8,154,278.7,-76.671089,39.778885,20150623154301,0310,0260,043F,7761,,99,20150623154314,0F24$"));
-        
+
         verify(decoder.decode(null, null, null,
                 "+RESP:GTFRI,1A0200,860599000165464,CRI001,0,0,1,2,,41,,-71.153137,42.301634,20150328020301,,,,,280.3,55,20150327220351,320C"));
         

File: test/org/traccar/protocol/GlobalSatProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class GlobalSatProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GlobalSatProtocolDecoder decoder = new GlobalSatProtocolDecoder(null);
+        GlobalSatProtocolDecoder decoder = new GlobalSatProtocolDecoder(new GlobalSatProtocol());
 
         assertNull(decoder.decode(null, null, "GSh,131826789036289,3,M,ea04*3d"));
 

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class GoSafeProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(null);
+        GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new GoSafeProtocol());
 
         assertNull(decoder.decode(null, null, null,
                 "*GS16,351535058709775"));

File: test/org/traccar/protocol/GotopProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class GotopProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GotopProtocolDecoder decoder = new GotopProtocolDecoder(null);
+        GotopProtocolDecoder decoder = new GotopProtocolDecoder(new GotopProtocol());
 
         assertNull(decoder.decode(null, null, ""));
         

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Gps103ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(null);
+        Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new Gps103Protocol());
 
         // Log on request
         assertNull(decoder.decode(null, null, null, "##,imei:359586015829802,A"));

File: test/org/traccar/protocol/GpsGateProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class GpsGateProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        GpsGateProtocolDecoder decoder = new GpsGateProtocolDecoder(null);
+        GpsGateProtocolDecoder decoder = new GpsGateProtocolDecoder(new GpsGateProtocol());
 
         assertNull(decoder.decode(null, null, "$FRLIN,,user1,8IVHF*7A"));
         

File: test/org/traccar/protocol/Gt02ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Gt02ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gt02ProtocolDecoder decoder = new Gt02ProtocolDecoder(null);
+        Gt02ProtocolDecoder decoder = new Gt02ProtocolDecoder(new Gt02Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "68682500000123456789012345000110010101010101026B3F3E026B3F3E000000000000000000010D0A"))));

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Gt06ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gt06ProtocolDecoder decoder = new Gt06ProtocolDecoder(null);
+        Gt06ProtocolDecoder decoder = new Gt06ProtocolDecoder(new Gt06Protocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "787811010123456789012345100B3201000171930D0A"))));

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class H02ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        H02ProtocolDecoder decoder = new H02ProtocolDecoder(null);
+        H02ProtocolDecoder decoder = new H02ProtocolDecoder(new H02Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "*HQ,1451316409,V1,030149,A,-23-29.0095,S,-46-51.5852,W,2.4,065,070315,FFFFFFFF#", Charset.defaultCharset())));

File: test/org/traccar/protocol/HaicomProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class HaicomProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        HaicomProtocolDecoder decoder = new HaicomProtocolDecoder(null);
+        HaicomProtocolDecoder decoder = new HaicomProtocolDecoder(new HaicomProtocol());
 
         verify(decoder.decode(null, null,
                 "$GPRS012497007097169,T100001,150618,230031,5402267400332464,0004,2014,000001,,,1,00#V040*"));

File: test/org/traccar/protocol/IntellitracProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class IntellitracProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        IntellitracProtocolDecoder decoder = new IntellitracProtocolDecoder(null);
+        IntellitracProtocolDecoder decoder = new IntellitracProtocolDecoder(new IntellitracProtocol());
 
         assertNull(decoder.decode(null, null, "$OK:TRACKING"));
 

File: test/org/traccar/protocol/Jt600ProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class Jt600ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Jt600ProtocolDecoder decoder = new Jt600ProtocolDecoder(null);
+        Jt600ProtocolDecoder decoder = new Jt600ProtocolDecoder(new Jt600Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "24311021600111001B16021105591022329862114046227B0598095080012327951435161F"))));

File: test/org/traccar/protocol/KhdProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class KhdProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        KhdProtocolDecoder decoder = new KhdProtocolDecoder(null);
+        KhdProtocolDecoder decoder = new KhdProtocolDecoder(new KhdProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "2929b1000605162935b80d"))));

File: test/org/traccar/protocol/LaipacProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class LaipacProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        LaipacProtocolDecoder decoder = new LaipacProtocolDecoder(null);
+        LaipacProtocolDecoder decoder = new LaipacProtocolDecoder(new LaipacProtocol());
 
         assertNull(decoder.decode(null, null, "$AVSYS,99999999,V1.50,SN0000103,32768*15"));
         

File: test/org/traccar/protocol/M2mProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class M2mProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        M2mProtocolDecoder decoder = new M2mProtocolDecoder(null);
+        M2mProtocolDecoder decoder = new M2mProtocolDecoder(new M2mProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "235A3C2A2624215C287D70212A21254C7C6421220B0B0B"))));

File: test/org/traccar/protocol/ManPowerProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class ManPowerProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        ManPowerProtocolDecoder decoder = new ManPowerProtocolDecoder(null);
+        ManPowerProtocolDecoder decoder = new ManPowerProtocolDecoder(new ManPowerProtocol());
 
         verify(decoder.decode(null, null,
                 "simei:352581250259539,,,tracker,51,24,1.73,130426023608,A,3201.5462,N,03452.2975,E,0.01,28B9,1DED,425,01,1x0x0*0x1*60x+2,en-us,"));

File: test/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class MegastekProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MegastekProtocolDecoder decoder = new MegastekProtocolDecoder(null);
+        MegastekProtocolDecoder decoder = new MegastekProtocolDecoder(new MegastekProtocol());
 
         verify(decoder.decode(null, null,
                 "STX,GerAL22,$GPRMC,174752.000,A,3637.060059,S,6416.2354,W,0.00,0.00,030812,,,A*55,F,,imei:861785000249353,05,180.6,Battery=100%,,1,722,310,0FA6,39D0;8F"));

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class MeiligaoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MeiligaoProtocolDecoder decoder = new MeiligaoProtocolDecoder(null);
+        MeiligaoProtocolDecoder decoder = new MeiligaoProtocolDecoder(new MeiligaoProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "24240000123456FFFFFFFF50008B9B0D0A"))));

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class MeitrackProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MeitrackProtocolDecoder decoder = new MeitrackProtocolDecoder(null);
+        MeitrackProtocolDecoder decoder = new MeitrackProtocolDecoder(new MeitrackProtocol());
         
         verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "$$G145,862106024274815,AAA,35,-1.287125,36.906061,150530054639,A,10,13,12,67,0.8,1621,38359791,42330881,639|2|FB2|2F3,0000,3|0|0|A58|432,,,1,0009,*26", Charset.defaultCharset())));

File: test/org/traccar/protocol/MiniFinderProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class MiniFinderProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MiniFinderProtocolDecoder decoder = new MiniFinderProtocolDecoder(null);
+        MiniFinderProtocolDecoder decoder = new MiniFinderProtocolDecoder(new MiniFinderProtocol());
 
         assertNull(decoder.decode(null, null, "!1,860719020212696"));
 

File: test/org/traccar/protocol/MtxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class MtxProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MtxProtocolDecoder decoder = new MtxProtocolDecoder(null);
+        MtxProtocolDecoder decoder = new MtxProtocolDecoder(new MtxProtocol());
 
         verify(decoder.decode(null, null,
                 "#MTX,353815011138124,20101226,195550,41.6296399,002.3611174,000,035,000000.00,X,X,1111,000,0,0"));

File: test/org/traccar/protocol/MxtProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class MxtProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MxtProtocolDecoder decoder = new MxtProtocolDecoder(null);
+        MxtProtocolDecoder decoder = new MxtProtocolDecoder(new MxtProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "01a631361e7a00082471418b052a2c46b587ffc01ae3fd000008800000000000003345422203000000f000f00000000000ea1e04"))));

File: test/org/traccar/protocol/NavigilProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class NavigilProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        NavigilProtocolDecoder decoder = new NavigilProtocolDecoder(null);
+        NavigilProtocolDecoder decoder = new NavigilProtocolDecoder(new NavigilProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "01004300040020000000f60203080200e7cd0f510c0000003b00000000000000"))));

File: test/org/traccar/protocol/NavisProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class NavisProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        NavisProtocolDecoder decoder = new NavisProtocolDecoder(null);
+        NavisProtocolDecoder decoder = new NavisProtocolDecoder(new NavisProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "404E5443010000007B000000130044342A3E533A383631373835303035323035303739"))));

File: test/org/traccar/protocol/NoranProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class NoranProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        NoranProtocolDecoder decoder = new NoranProtocolDecoder(null);
+        NoranProtocolDecoder decoder = new NoranProtocolDecoder(new NoranProtocol());
         
         verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "3400080001090000000000001D43A29BE842E62520424E523039423036363932000031322D30332D30352031313A34373A343300"))));

File: test/org/traccar/protocol/OrionProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class OrionProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        OrionProtocolDecoder decoder = new OrionProtocolDecoder(null);
+        OrionProtocolDecoder decoder = new OrionProtocolDecoder(new OrionProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "5057000137bf6236235a0331b5c6e402a3b5ecff5102980003000e0c1d172936080e0c1d172936b03b01000882050000008e080000000000008c0300940500000084030085030003067600900113150000000000000000000000000000000000000004a4c8"))));

File: test/org/traccar/protocol/OsmAndProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class OsmAndProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        OsmAndProtocolDecoder decoder = new OsmAndProtocolDecoder(null);
+        OsmAndProtocolDecoder decoder = new OsmAndProtocolDecoder(new OsmAndProtocol());
         
         verify(decoder.decode(null, null, new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.GET,
                 "/?lat=49.60688&lon=6.15788&timestamp=2014-06-04+09%3A10%3A11&altitude=384.7&speed=0.0&id=353861053849681")));

File: test/org/traccar/protocol/PiligrimProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public class PiligrimProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        PiligrimProtocolDecoder decoder = new PiligrimProtocolDecoder(null);
+        PiligrimProtocolDecoder decoder = new PiligrimProtocolDecoder(new PiligrimProtocol());
         
         HttpRequest msg1 = new DefaultHttpRequest(HttpVersion.HTTP_1_1, HttpMethod.POST, "/bingps?imei=868204005544720&csq=18&vout=00&vin=4050&dataid=00000000");
         msg1.setContent(ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(

File: test/org/traccar/protocol/ProgressProtocolDecoderTest.java
Patch:
@@ -15,7 +15,7 @@ public class ProgressProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        ProgressProtocolDecoder decoder = new ProgressProtocolDecoder(null);
+        ProgressProtocolDecoder decoder = new ProgressProtocolDecoder(new ProgressProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "020037000100000003003131310f003335343836383035313339303036320f00323530303136333832383531353535010000000100000000000000e6bb97b6"))));

File: test/org/traccar/protocol/Pt3000ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Pt3000ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Pt3000ProtocolDecoder decoder = new Pt3000ProtocolDecoder(null);
+        Pt3000ProtocolDecoder decoder = new Pt3000ProtocolDecoder(new Pt3000Protocol());
 
         verify(decoder.decode(null, null,
                 "%356939010012099,$GPRMC,124945.752,A,4436.6245,N,01054.4634,E,0.11,358.52,060408,,,A,+393334347445,N028d"));

File: test/org/traccar/protocol/Pt502ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Pt502ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Pt502ProtocolDecoder decoder = new Pt502ProtocolDecoder(null);
+        Pt502ProtocolDecoder decoder = new Pt502ProtocolDecoder(new Pt502Protocol());
 
         verify(decoder.decode(null, null,
                 "$POS,11023456,033731.000,A,0335.2617,N,09841.1587,E,0.00,88.12,210615,,,A/0000,0/1f8/388900//f33//"));

File: test/org/traccar/protocol/RitiProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class RitiProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        RitiProtocolDecoder decoder = new RitiProtocolDecoder(null);
+        RitiProtocolDecoder decoder = new RitiProtocolDecoder(new RitiProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "3b2864a3056300006d40000003000000000000000000000000244750524d432c3231313734332e3030302c412c313335372e333637352c4e2c31303033362e363939322c452c302e30302c2c3031303931342c2c2c412a37380d0a00000000000000000000000000000000040404"))));

File: test/org/traccar/protocol/RuptelaProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class RuptelaProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        RuptelaProtocolDecoder decoder = new RuptelaProtocolDecoder(null);
+        RuptelaProtocolDecoder decoder = new RuptelaProtocolDecoder(new RuptelaProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "00560003116e7438a7a50100015565cbb9000020fd21300f113f4600005f000600090d090805011b13cf00020003001c012029ad00041d31dd1e0ebd160000c50000047200000000d0000000004100016a2a960000a5a300c9ee"))));

File: test/org/traccar/protocol/SanavProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class SanavProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SanavProtocolDecoder decoder = new SanavProtocolDecoder(null);
+        SanavProtocolDecoder decoder = new SanavProtocolDecoder(new SanavProtocol());
         
         verify(decoder.decode(null, null,
                 "imei=352024028982787&rmc=$GPRMC,103048.000,A,4735.0399,N,01905.2895,E,0.00,0.00,171013,,*05,AUTO-4095mv"));

File: test/org/traccar/protocol/SkypatrolProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class SkypatrolProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SkypatrolProtocolDecoder decoder = new SkypatrolProtocolDecoder(null);
+        SkypatrolProtocolDecoder decoder = new SkypatrolProtocolDecoder(new SkypatrolProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "0005021004FFFFFFFF0000000D313134373735383300CB000000000E11070C010184D032FB3841370000000016072B000017050032000000000000024E0C071116072C105900050000000000050000000000050000000003100260B7363B6306C11A00B73637F206BF19B73637F106B50EB73638B106BB0BB7363B6106B80AB73637F306B709000000000000000000C"))));

File: test/org/traccar/protocol/Stl060ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Stl060ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Stl060ProtocolDecoder decoder = new Stl060ProtocolDecoder(null);
+        Stl060ProtocolDecoder decoder = new Stl060ProtocolDecoder(new Stl060Protocol());
 
         verify(decoder.decode(null, null,
                 "$1,357804048043099,D001,AP29AW0963,23/02/14,14:06:54,17248488N,078342226E,0.08,193.12,1,1,1,1,1,A"));

File: test/org/traccar/protocol/SuntechProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class SuntechProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SuntechProtocolDecoder decoder = new SuntechProtocolDecoder(null);
+        SuntechProtocolDecoder decoder = new SuntechProtocolDecoder(new SuntechProtocol());
         
         assertNull(decoder.decode(null, null, "SA200ALV;317652"));
 

File: test/org/traccar/protocol/SyrusProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class SyrusProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        SyrusProtocolDecoder decoder = new SyrusProtocolDecoder(null, false);
+        SyrusProtocolDecoder decoder = new SyrusProtocolDecoder(new SyrusProtocol(), false);
 
         verify(decoder.decode(null, null,
                 ">RGP230615010248-2682523-065236820000003007F4101;ID=0005;#0002;*2A<"));

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class T55ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        T55ProtocolDecoder decoder = new T55ProtocolDecoder(null);
+        T55ProtocolDecoder decoder = new T55ProtocolDecoder(new T55Protocol());
         
         assertNull(decoder.decode(null, null, "$GPFID,ID123456ABC"));
 

File: test/org/traccar/protocol/TelikProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TelikProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TelikProtocolDecoder decoder = new TelikProtocolDecoder(null);
+        TelikProtocolDecoder decoder = new TelikProtocolDecoder(new TelikProtocol());
 
         assertNull(decoder.decode(null, null,
                 "0026436729|232|01|003002030"));

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -12,7 +12,7 @@ public class TeltonikaProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TeltonikaProtocolDecoder decoder = new TeltonikaProtocolDecoder(null);
+        TeltonikaProtocolDecoder decoder = new TeltonikaProtocolDecoder(new TeltonikaProtocol());
 
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "000F313233343536373839303132333435"))));

File: test/org/traccar/protocol/Tk102ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Tk102ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tk102ProtocolDecoder decoder = new Tk102ProtocolDecoder(null);
+        Tk102ProtocolDecoder decoder = new Tk102ProtocolDecoder(new Tk102Protocol());
 
         assertNull(decoder.decode(null, null, ""));
 

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Tk103ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(null);
+        Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new Tk103Protocol());
 
         assertNull(decoder.decode(null, null, "(090411121854BP0000001234567890HSO"));
 

File: test/org/traccar/protocol/Tlt2hProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Tlt2hProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tlt2hProtocolDecoder decoder = new Tlt2hProtocolDecoder(null);
+        Tlt2hProtocolDecoder decoder = new Tlt2hProtocolDecoder(new Tlt2hProtocol());
 
         verify(decoder.decode(null, null,
                 "#357671030946351#V500#0000#AUTO#1\r\n" +

File: test/org/traccar/protocol/TopflytechProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TopflytechProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TopflytechProtocolDecoder decoder = new TopflytechProtocolDecoder(null);
+        TopflytechProtocolDecoder decoder = new TopflytechProtocolDecoder(new TopflytechProtocol());
 
         verify(decoder.decode(null, null,
                 "(880316890094910BP00XG00b600000000L00074b54S00000000R0C0F0014000100f0130531152205A0706.1395S11024.0965E000.0251.25"));

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TotemProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TotemProtocolDecoder decoder = new TotemProtocolDecoder(null);
+        TotemProtocolDecoder decoder = new TotemProtocolDecoder(new TotemProtocol());
         
         verify(decoder.decode(null, null,
                 "$$AE860990002922822|AA$GPRMC,051002.00,A,0439.26245,N,10108.94448,E,0.023,,140315,,,A*71|02.98|01.95|02.26|000000000000|20150314051003|13841157|105A3B1C|0000|0.0000|0005|5324"));

File: test/org/traccar/protocol/Tr20ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Tr20ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tr20ProtocolDecoder decoder = new Tr20ProtocolDecoder(null);
+        Tr20ProtocolDecoder decoder = new Tr20ProtocolDecoder(new Tr20Protocol());
 
         assertNull(decoder.decode(null, null, "%%TRACKPRO01,1"));
 

File: test/org/traccar/protocol/Tr900ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Tr900ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tr900ProtocolDecoder decoder = new Tr900ProtocolDecoder(null);
+        Tr900ProtocolDecoder decoder = new Tr900ProtocolDecoder(new Tr900Protocol());
 
         verify(decoder.decode(null, null, null,
                 ">00001001,4,1,150626,131252,W05830.2978,S3137.2783,,00,348,18,00,003-000,0,3,11111011*3b!"));

File: test/org/traccar/protocol/TrackboxProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TrackboxProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TrackboxProtocolDecoder decoder = new TrackboxProtocolDecoder(null);
+        TrackboxProtocolDecoder decoder = new TrackboxProtocolDecoder(new TrackboxProtocol());
 
         assertNull(decoder.decode(null, null, "a=connect&v=11&i=111111111111111"));
 

File: test/org/traccar/protocol/TramigoProtocolDecoderTest.java
Patch:
@@ -15,7 +15,7 @@ public class TramigoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TramigoProtocolDecoder decoder = new TramigoProtocolDecoder(null);
+        TramigoProtocolDecoder decoder = new TramigoProtocolDecoder(new TramigoProtocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "8000011bb0009e0001015b93032ef6f35994a9545472616d69676f3a204d6f76696e672c20302e3930206b6d205345206f66204372616e6562726f6f6b20466972652053746174696f6e2c2050656e726974682c205379646e65792c2041552c202d33332e37303732322c203135302e37313735392c2053452077697468207370656564203337206b6d2f682c2031393a3438204a616e20342020454f46"))));

File: test/org/traccar/protocol/TytanProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class TytanProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        TytanProtocolDecoder decoder = new TytanProtocolDecoder(null);
+        TytanProtocolDecoder decoder = new TytanProtocolDecoder(new TytanProtocol());
         
         verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "d5300000689d65556877fbd437a09d8ea89360005a23124e410201213704000907000009ffffffffffffffff0affffffffffffffff18ff63ff7f7fff65ff66ff67ff68ff69ff6b00ff6cffffffff6dff7fffffffff81ffffffff82ffff83ffffffffffffffff88ffff9600"))));

File: test/org/traccar/protocol/UlbotechProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class UlbotechProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(null);
+        UlbotechProtocolDecoder decoder = new UlbotechProtocolDecoder(new UlbotechProtocol());
         
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "f8010103545500500179009ccb4b62010e00144db906310d3f0000000000cb0304000000000404000a8123050603211860221006080000000100000000ef97f8"))));

File: test/org/traccar/protocol/V680ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class V680ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        V680ProtocolDecoder decoder = new V680ProtocolDecoder(null);
+        V680ProtocolDecoder decoder = new V680ProtocolDecoder(new V680Protocol());
         
         assertNull(decoder.decode(null, null,
                 "#353588102019155"));

File: test/org/traccar/protocol/VisiontekProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class VisiontekProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        VisiontekProtocolDecoder decoder = new VisiontekProtocolDecoder(null);
+        VisiontekProtocolDecoder decoder = new VisiontekProtocolDecoder(new VisiontekProtocol());
         
         //verify(decoder.decode(null, null,
         //        "$1,AP116,05,06,15,11,48,32,1725.0460N,07824.5289E,0617,07,0,030,2091,0,0,0,1,1,1,1,20,00.0000,00.3820,00.0000,VAJRA V1.00,A#"));

File: test/org/traccar/protocol/WialonProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class WialonProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        WialonProtocolDecoder decoder = new WialonProtocolDecoder(null);
+        WialonProtocolDecoder decoder = new WialonProtocolDecoder(new WialonProtocol());
 
         assertNull(decoder.decode(null, null, "#L#123456789012345;test"));
         

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class WondexProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        WondexProtocolDecoder decoder = new WondexProtocolDecoder(null);
+        WondexProtocolDecoder decoder = new WondexProtocolDecoder(new WondexProtocol());
         
         verify(decoder.decode(null, null,
                 "1044989601,20130323074605,0.000000,90.000000,0,000,0,0,2"));

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Xexun2ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(null);
+        Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(new XexunProtocol());
         
         assertNull(decoder.decode(null, null,
                 ",+48606717068,,L,, imei:012207005047292,,,F:4.28V,1,52,11565,247,01,000E,1FC5"));

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class XexunProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        XexunProtocolDecoder decoder = new XexunProtocolDecoder(null);
+        XexunProtocolDecoder decoder = new XexunProtocolDecoder(new XexunProtocol());
         
         verify(decoder.decode(null, null,
                 "GPRMC,043435.000,A,811.299200,S,11339.9500,E,0.93,29.52,160313,00,0000.0,A*65,F,,imei:359585014597923,"));

File: test/org/traccar/protocol/XirgoProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class XirgoProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        XirgoProtocolDecoder decoder = new XirgoProtocolDecoder(null);
+        XirgoProtocolDecoder decoder = new XirgoProtocolDecoder(new XirgoProtocol());
 
         verify(decoder.decode(null, null, null,
                 "$$357207059646786,4003,2015/05/19,15:54:56,-20.21422,-70.14927,37.5,1.8,0.0,11,0.8,12.9,31,297,1,0,0.0,0.0,0,1,1,1##"));

File: test/org/traccar/protocol/Xt013ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Xt013ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xt013ProtocolDecoder decoder = new Xt013ProtocolDecoder(null);
+        Xt013ProtocolDecoder decoder = new Xt013ProtocolDecoder(new Xt013Protocol());
         
         verify(decoder.decode(null, null,
                 "TK,862950021650364,150131090859,+53.267863,+5.767363,0,38,12,0,F,204,08,C94,336C,24,,4.09,1,,,,,,,,"));

File: test/org/traccar/protocol/Xt7ProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public class Xt7ProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xt7ProtocolDecoder decoder = new Xt7ProtocolDecoder(null);
+        Xt7ProtocolDecoder decoder = new Xt7ProtocolDecoder(new Xt7Protocol());
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "53545832303130313031383031202020202020026A244750524D432C3130313035332E3030302C412C323233322E373630372C4E2C31313430342E373636392C452C302E30302C2C3233313131302C2C2C412A37462C3436302C30302C323739352C304536412C31342C39342C313030302C303030302C39312C54696D65723B31440D0A"))));

File: test/org/traccar/protocol/YwtProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class YwtProtocolDecoderTest extends ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        YwtProtocolDecoder decoder = new YwtProtocolDecoder(null);
+        YwtProtocolDecoder decoder = new YwtProtocolDecoder(new YwtProtocol());
         
         assertNull(decoder.decode(null, null,
                 "%SN,0417061042:0,0,140117041203,404"));

File: src/org/traccar/database/DataManager.java
Patch:
@@ -227,7 +227,7 @@ public Collection<User> getUsers() throws SQLException {
     }
 
     public void addUser(User user) throws SQLException {
-        user.setId(QueryBuilder.create(dataSource, getQuery("database.insertUser"))
+        user.setId(QueryBuilder.create(dataSource, getQuery("database.insertUser"), true)
                 .setObject(user)
                 .executeUpdate());
         Context.getPermissionsManager().refresh();
@@ -269,7 +269,7 @@ public Collection<Device> getDevices(long userId) throws SQLException {
     }
     
     public void addDevice(Device device) throws SQLException {
-        device.setId(QueryBuilder.create(dataSource, getQuery("database.insertDevice"))
+        device.setId(QueryBuilder.create(dataSource, getQuery("database.insertDevice"), true)
                 .setObject(device)
                 .executeUpdate());
     }
@@ -306,7 +306,7 @@ public Collection<Position> getPositions(long userId, long deviceId, Date from,
     }
 
     public void addPosition(Position position) throws SQLException {
-        position.setId(QueryBuilder.create(dataSource, getQuery("database.insertPosition"))
+        position.setId(QueryBuilder.create(dataSource, getQuery("database.insertPosition"), true)
                 .setObject(position)
                 .setDate("time", position.getFixTime()) // tmp
                 .setLong("device_id", position.getDeviceId()) // tmp

File: src/org/traccar/Context.java
Patch:
@@ -91,7 +91,7 @@ public static void init(String[] arguments) throws Exception {
 
         dataManager = new DataManager(properties);
         dataCache = new DataCache();
-        if (Boolean.valueOf(properties.getProperty("web.new"))) {
+        if (!Boolean.valueOf(properties.getProperty("web.old"))) {
             permissionsManager = new PermissionsManager();
         }
 

File: src/org/traccar/database/DataManager.java
Patch:
@@ -139,7 +139,7 @@ private String getQuery(String key) {
 
     public void initDatabaseSchema() throws SQLException {
 
-        if (Boolean.valueOf(properties.getProperty("web.new"))) {
+        if (!Boolean.valueOf(properties.getProperty("web.old"))) {
 
             Connection connection = dataSource.getConnection();
             ResultSet result = connection.getMetaData().getTables(

File: src/org/traccar/http/WebServer.java
Patch:
@@ -46,7 +46,7 @@ public WebServer() {
             server = new Server(new InetSocketAddress(address, port));
         }
 
-        if (Boolean.valueOf(properties.getProperty("web.new"))) {
+        if (!Boolean.valueOf(properties.getProperty("web.old"))) {
 
             ServletContextHandler servletHandler = new ServletContextHandler(ServletContextHandler.SESSIONS);
             servletHandler.setContextPath("/api");

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -72,6 +72,9 @@ public void testDecode() throws Exception {
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
                 "2424007f3568960306760199553131303932342e3030302c412c343533342e323538352c4e2c30313933382e363531342c452c302e30302c2c3237303731342c2c2c412a37317c312e377c3130307c383030307c303737422c303030302c303030302c303030302c303030302c303030302c303030302c303030305dfc0d0a"))));
+        
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertHexString(
+                "2424007f2015603256ffff99553230303230392e30302c412c313734342e36393434382c4e2c30383331392e30353537302c452c31302e3236322c3234382e35352c3236303631352c2c2c442a35437c302e39397c33312e397c303830317c303030302c303030637c3030303933303131367c3030376165313035d5550d0a"))));
 
     }
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -1176,7 +1176,7 @@ private void initTr900Server(final String protocol) throws SQLException {
             serverList.add(new TrackerServer(new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new CharacterDelimiterFrameDecoder(1024, '!'));
+                    pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new Tr900ProtocolDecoder(protocol));

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -26,6 +26,7 @@
 
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.Context;
+import org.traccar.helper.UnitsConverter;
 import org.traccar.model.Event;
 import org.traccar.model.Position;
 
@@ -104,7 +105,7 @@ protected Object decode(
         // Speed
         String speed = parser.group(index++);
         if (speed != null) {
-            position.setSpeed(Double.valueOf(speed));
+            position.setSpeed(UnitsConverter.knotsFromKph(Double.valueOf(speed)));
         }
 
         // Course

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public class Gl200ProtocolDecoderTest extends ProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(null);
+
+        verify(decoder.decode(null, null, null,
+                "+RESP:GTFRI,1A0401,860599000508846,,0,0,1,1,134.8,154,278.7,-76.671089,39.778885,20150623154301,0310,0260,043F,7761,,99,20150623154314,0F24$"));
         
         verify(decoder.decode(null, null, null,
                 "+RESP:GTFRI,1A0200,860599000165464,CRI001,0,0,1,2,,41,,-71.153137,42.301634,20150328020301,,,,,280.3,55,20150327220351,320C"));

File: test/org/traccar/geocode/ReverseGeocoderTest.java
Patch:
@@ -11,7 +11,7 @@ public void testGoogle() {
         ReverseGeocoder reverseGeocoder = new GoogleReverseGeocoder();
 
         assertEquals(
-                "1700 Charleston Rd, Mountain View, CA, US",
+                "1600 Amphitheatre Pkwy, Mountain View, CA, US",
                 reverseGeocoder.getAddress(new AddressFormat(), 37.4217550, -122.0846330));
     }
 

File: src/org/traccar/Context.java
Patch:
@@ -90,7 +90,7 @@ public static void init(String[] arguments) throws Exception {
         }
 
         dataManager = new DataManager(properties);
-        dataCache = new DataCache(dataManager);
+        dataCache = new DataCache();
         if (Boolean.valueOf(properties.getProperty("web.new"))) {
             permissionsManager = new PermissionsManager();
         }
@@ -113,6 +113,7 @@ public static void init(String[] arguments) throws Exception {
         serverManager = new ServerManager();
 
         dataManager.initDatabaseSchema();
+        dataCache.init(dataManager);
         serverManager.init();
     }
 

File: src/org/traccar/database/DataCache.java
Patch:
@@ -23,17 +23,15 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
 import org.traccar.helper.Log;
-import org.traccar.model.Event;
 import org.traccar.model.Position;
 
 public class DataCache {
     
     private final Map<Long, Position> positions = new HashMap<Long, Position>();
     private final Map<Long, Set<DataCacheListener>> listeners = new HashMap<Long, Set<DataCacheListener>>();
     
-    public DataCache(DataManager dataManager) {
+    public void init(DataManager dataManager) {
         try {
             Collection<Position> positions = dataManager.getLatestPositions();
             for (Position position : positions) {

File: src/org/traccar/protocol/HaicomProtocolDecoder.java
Patch:
@@ -98,13 +98,13 @@ protected Object decode(
         // Latitude
         Double latitude = Double.valueOf(parser.group(index++));
         latitude += Double.valueOf(parser.group(index++)) / 60000;
-        if ((flags & 0x2) == 0) latitude = -latitude;
+        if ((flags & 0x4) == 0) latitude = -latitude;
         position.setLatitude(latitude);
 
         // Longitude
         Double longitude = Double.valueOf(parser.group(index++));
         longitude += Double.valueOf(parser.group(index++)) / 60000;
-        if ((flags & 0x4) == 0) longitude = -longitude;
+        if ((flags & 0x2) == 0) longitude = -longitude;
         position.setLongitude(longitude);
 
         // Speed

File: test/org/traccar/protocol/HaicomProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
 
         HaicomProtocolDecoder decoder = new HaicomProtocolDecoder(null);
 
+        verify(decoder.decode(null, null,
+                "$GPRS012497007097169,T100001,150618,230031,5402267400332464,0004,2014,000001,,,1,00#V040*"));
+
         verify(decoder.decode(null, null,
                 "$GPRS123456789012345,602S19A,100915,063515,7240649312041079,0019,3156,111000,10004,0000,11111,00LH#V037"));
         

File: src/org/traccar/protocol/Tr900ProtocolDecoder.java
Patch:
@@ -21,6 +21,7 @@
 import org.traccar.model.Event;
 import org.traccar.model.Position;
 
+import java.net.SocketAddress;
 import java.util.Calendar;
 import java.util.TimeZone;
 import java.util.regex.Matcher;
@@ -56,7 +57,7 @@ public Tr900ProtocolDecoder(String protocol) {
 
     @Override
     protected Object decode(
-            ChannelHandlerContext ctx, Channel channel, Object msg)
+            ChannelHandlerContext ctx, Channel channel, SocketAddress remoteAddress, Object msg)
             throws Exception {
 
         String sentence = (String) msg;

File: test/org/traccar/protocol/Tr900ProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public void testDecode() throws Exception {
 
         Tr900ProtocolDecoder decoder = new Tr900ProtocolDecoder(null);
 
-        verify(decoder.decode(null, null,
+        verify(decoder.decode(null, null, null,
                 ">12345678,1,1,070201,144111,W05829.2613,S3435.2313,,00,034,25,00,126-000,0,3,11111111*2d!"));
 
     }

File: test/org/traccar/helper/LogTest.java
Patch:
@@ -7,7 +7,7 @@ public class LogTest {
     
     @Test
     public void testLog() {
-        Assert.assertEquals("test - Exception (LogTest.java:10)", Log.exception(new Exception("test")));
+        Assert.assertEquals("test - Exception (LogTest.java:10 < ...)", Log.exception(new Exception("test")));
     }
 
 }

File: src/org/traccar/Context.java
Patch:
@@ -99,7 +99,7 @@ public static void init(String[] arguments) throws Exception {
             String type = properties.getProperty("geocoder.type");
             if (type != null && type.equals("nominatim")) {
                 reverseGeocoder = new NominatimReverseGeocoder(properties.getProperty("geocoder.url"));
-            } if (type != null && type.equals("gisgraphy")) {
+            } else if (type != null && type.equals("gisgraphy")) {
                 reverseGeocoder = new GisgraphyReverseGeocoder(properties.getProperty("geocoder.url"));
             } else {
                 reverseGeocoder = new GoogleReverseGeocoder();

File: src/org/traccar/database/DataManager.java
Patch:
@@ -168,7 +168,9 @@ private void createDatabaseSchema() throws SQLException {
         admin.setEmail("admin");
         admin.setPassword("admin");
         admin.setAdmin(true);
-        addUser(admin);
+        QueryBuilder.create(dataSource, properties.getProperty("database.insertUser"))
+                .setObject(admin)
+                .executeUpdate();
         
         Server server = new Server();
         server.setRegistration(true);

File: src/org/traccar/database/PermissionsManager.java
Patch:
@@ -75,7 +75,7 @@ public Collection<Long> allowedDevices(long userId) {
     }
     
     public void checkDevice(long userId, long deviceId) throws SecurityException {
-        if (getNotNull(userId).contains(deviceId)) {
+        if (!getNotNull(userId).contains(deviceId)) {
             throw new SecurityException("Device access denied");
         }
     }

File: src/org/traccar/http/ServerServlet.java
Patch:
@@ -40,8 +40,9 @@ private void get(HttpServletRequest req, HttpServletResponse resp) throws Except
     }
     
     private void update(HttpServletRequest req, HttpServletResponse resp) throws Exception {
-        Context.getDataManager().updateServer(JsonConverter.objectFromJson(
-                req.getReader(), new Server()));
+        Server server = JsonConverter.objectFromJson(req.getReader(), new Server());
+        Context.getPermissionsManager().checkAdmin(getUserId(req));
+        Context.getDataManager().updateServer(server);
         sendResponse(resp.getWriter(), true);
     }
 

File: src/org/traccar/helper/Log.java
Patch:
@@ -152,7 +152,7 @@ public static String exception(Throwable exception) {
                     if (stack[i].getClassName().startsWith("org.traccar")) {
                         s.append(" < ");
                         if (skip) {
-                            s.append(" ... < ");
+                            s.append("... < ");
                             skip = false;
                         }
                         s.append(stack[i].getFileName());

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -73,7 +73,6 @@ protected Object decode(
         } else if (type == MSG_LOGIN || type == MSG_GPS) {
             
             Position position = new Position();
-            position.setDeviceId(getDeviceId());
             position.setProtocol(getProtocol());
             
             if (!identify(id.toString(Charset.defaultCharset()).trim())) {
@@ -96,6 +95,8 @@ protected Object decode(
                 }
             
             }
+
+            position.setDeviceId(getDeviceId());
             
             if (type == MSG_GPS) {
                 buf.readUnsignedByte(); // historical

File: src/org/traccar/ServerManager.java
Patch:
@@ -1435,7 +1435,7 @@ private void initCastelServer(final String protocol) throws SQLException {
             TrackerServer server = new TrackerServer(new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -2, 0));
+                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -4, 0));
                     pipeline.addLast("objectDecoder", new CastelProtocolDecoder(protocol));
                 }
             };

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ protected Object decode(
             double lat = buf.readUnsignedInt() / 3600000.0;
             double lon = buf.readUnsignedInt() / 3600000.0;
             position.setSpeed(UnitsConverter.knotsFromKph(buf.readUnsignedShort()));
-            position.setCourse(buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort() % 360);
             
             int flags = buf.readUnsignedByte();
             position.setLatitude((flags & 0x01) == 0 ? -lat : lat);

File: test/org/traccar/protocol/CastelProtocolDecoderTest.java
Patch:
@@ -22,6 +22,9 @@ public void testDecode() throws Exception {
 
         verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "40405900043130303131313235323939383700000000000000400101C1F06952E7F069529C9111000000000069830000070000000400036401014C00030001190A0D0412041480D60488C57218000000009F01E803ED9A0D0A"))));
+        
+        verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
+                "40405900043335343034333035303834343134330000000000400100f61a7355c11b7355710000000b00000000000000000000000400000000240e0200020106060f100b2d5a78a7076ec0fb1d00008c065f010000ac220d0a"))));
 
     }
 

File: src/org/traccar/database/QueryBuilder.java
Patch:
@@ -277,7 +277,7 @@ public <T extends Factory> Collection<T> executeQuery(T prototype) throws SQLExc
                         // Check if column exists
                         boolean column = false;
                         for (int i = 1; i <= resultMetaData.getColumnCount(); i++) {
-                            if (name.equalsIgnoreCase(resultMetaData.getColumnName(i))) {
+                            if (name.equalsIgnoreCase(resultMetaData.getColumnLabel(i))) {
                                 column = true;
                                 break;
                             }

File: src/org/traccar/protocol/CastelProtocolDecoder.java
Patch:
@@ -80,7 +80,7 @@ protected Object decode(
                 return null;
             } else if (type == MSG_LOGIN) {
 
-                if (channel == null) {
+                if (channel != null) {
                     ChannelBuffer response = ChannelBuffers.directBuffer(ByteOrder.LITTLE_ENDIAN, 41);
                     response.writeByte(0x40); response.writeByte(0x40);
                     response.writeShort(response.capacity());

File: src/org/traccar/protocol/XirgoProtocolDecoder.java
Patch:
@@ -47,7 +47,7 @@ public XirgoProtocolDecoder(String protocol) {
             "(\\d+\\.?\\d*)," +                 // Speed
             "(\\d+\\.?\\d*)," +                 // Course
             "(\\d+)," +                         // Satellites
-            "(\\d+)," +                         // HDOP
+            "(\\d+\\.?\\d*)," +                 // HDOP
             "(\\d+\\.\\d+)," +                  // Battery
             "(\\d+)," +                         // GSM
             "(\\d+\\.?\\d*)," +                 // Odometer

File: src/org/traccar/protocol/Ardi01ProtocolDecoder.java
Patch:
@@ -100,7 +100,7 @@ protected Object decode(
         position.set(Event.KEY_BATTERY, parser.group(index++));
 
         // Output
-        position.set(Event.KEY_TEMPERATURE, parser.group(index++));
+        position.set(Event.PREFIX_TEMP + 1, parser.group(index++));
 
         return position;
     }

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -137,14 +137,14 @@ protected Object decode(
             position.set(Event.KEY_OUTPUT, buf.readUnsignedByte());
 
             // ADC
-            position.set("adc", buf.readUnsignedShort() * 0.001);
+            position.set(Event.PREFIX_ADC + 1, buf.readUnsignedShort() * 0.001);
 
             // Driver
             position.set("driver", readString(buf));
 
             // Temperature
-            position.set("temperature1", buf.readShort() * 0.1);
-            position.set("temperature2", buf.readShort() * 0.1);
+            position.set(Event.PREFIX_TEMP + 1, buf.readShort() * 0.1);
+            position.set(Event.PREFIX_TEMP + 2, buf.readShort() * 0.1);
 
             // Text Message
             position.set("message", readString(buf));

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -76,7 +76,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
 
             buf.skipBytes(2); // remaining time
 
-            position.set(Event.KEY_TEMPERATURE, buf.readByte());
+            position.set(Event.PREFIX_TEMP + 1, buf.readByte());
 
             buf.skipBytes(2); // timer (interval and units)
             buf.readByte(); // mode

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -69,7 +69,7 @@ private Position decodePosition(ChannelBuffer buf, boolean history) {
             }
         }
 
-        position.set(Event.KEY_TEMPERATURE, buf.readByte());
+        position.set(Event.PREFIX_TEMP + 1, buf.readByte());
         position.set(Event.KEY_GSM, buf.readUnsignedByte());
         buf.readUnsignedShort(); // mcc
         buf.readUnsignedShort(); // mnc

File: src/org/traccar/protocol/BceProtocolDecoder.java
Patch:
@@ -113,7 +113,7 @@ protected Object decode(
 
                     for (int i = 1; i <= 8; i++) {
                         if (checkBit(mask, i + 1)) {
-                            position.set("adc" + i, buf.readUnsignedShort());
+                            position.set(Event.PREFIX_ADC + i, buf.readUnsignedShort());
                         }
                     }
 

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -124,7 +124,7 @@ protected Object decode(
         position.setTime(time.getTime());
         
         // State
-        position.set("io", parser.group(index++));
+        position.set(Event.PREFIX_IO + 1, parser.group(index++));
 
         // Odometer
         String odometer = parser.group(index++);

File: src/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -247,9 +247,9 @@ protected Object decode(
             position.set("flags", parser.group(index++));
             position.set(Event.KEY_INPUT, parser.group(index++));
             position.set(Event.KEY_OUTPUT, parser.group(index++));
-            position.set("adc1", parser.group(index++));
-            position.set("adc2", parser.group(index++));
-            position.set("adc3", parser.group(index++));
+            position.set(Event.PREFIX_ADC + 1, parser.group(index++));
+            position.set(Event.PREFIX_ADC + 2, parser.group(index++));
+            position.set(Event.PREFIX_ADC + 3, parser.group(index++));
             position.set(Event.KEY_ALARM, parser.group(index++));
             
         }

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -256,7 +256,7 @@ protected Object decode(
         for (int i = 1; i <= 8; i++) {
             String adc = parser.group(index++);
             if (adc != null) {
-                position.set("adc" + i, Integer.parseInt(adc, 16));
+                position.set(Event.PREFIX_ADC + i, Integer.parseInt(adc, 16));
             }
         }
 

File: src/org/traccar/protocol/MtxProtocolDecoder.java
Patch:
@@ -103,8 +103,8 @@ protected Object decode(
         position.set(Event.KEY_ODOMETER, Double.valueOf(parser.group(index++)));
         position.set(Event.KEY_INPUT, parser.group(index++));
         position.set(Event.KEY_OUTPUT, parser.group(index++));
-        position.set("adc1", parser.group(index++));
-        position.set("adc2", parser.group(index++));
+        position.set(Event.PREFIX_ADC + 1, parser.group(index++));
+        position.set(Event.PREFIX_ADC + 2, parser.group(index++));
 
         return position;
     }

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -140,12 +140,12 @@ private ParseResult parsePosition(ChannelBuffer buf) {
 
         // Temperature
         if (isFormat(format, F10, F20, F30)) {
-            position.set(Event.KEY_TEMPERATURE, buf.readShort());
+            position.set(Event.PREFIX_TEMP + 1, buf.readShort());
         }
 
         if (isFormat(format, F10, F20, F50, F52)) {
-            position.set("adc1", buf.readUnsignedShort());
-            position.set("adc2", buf.readUnsignedShort());
+            position.set(Event.PREFIX_ADC + 1, buf.readUnsignedShort());
+            position.set(Event.PREFIX_ADC + 2, buf.readUnsignedShort());
         }
 
         if (isFormat(format, F20, F50, F51, F52)) {

File: src/org/traccar/protocol/NoranProtocolDecoder.java
Patch:
@@ -113,7 +113,7 @@ else if (type == MSG_UPLOAD_POSITION ||
             position.setDeviceId(getDeviceId());
 
             // IO status
-            position.set("io", buf.readUnsignedByte());
+            position.set(Event.PREFIX_IO + 1, buf.readUnsignedByte());
             
             // Fuel
             position.set(Event.KEY_FUEL, buf.readUnsignedByte());

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -175,9 +175,8 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
                 if ((extraFlags & 0x1) == 0x1) {
                     int count = buf.readUnsignedShort();
                     for (int i = 1; i <= count; i++) {
-                        position.set("adc" + i, buf.readUnsignedShort());
+                        position.set(Event.PREFIX_ADC + i, buf.readUnsignedShort());
                     }
-
                 }
 
                 // CAN adapter

File: src/org/traccar/protocol/Tr900ProtocolDecoder.java
Patch:
@@ -115,7 +115,7 @@ protected Object decode(
         // Other
         position.set(Event.KEY_GSM, parser.group(index++));
         position.set(Event.KEY_EVENT, Integer.valueOf(parser.group(index++)));
-        position.set("adc1", Integer.valueOf(parser.group(index++)));
+        position.set(Event.PREFIX_ADC + 1, Integer.valueOf(parser.group(index++)));
         position.set(Event.KEY_BATTERY, Integer.valueOf(parser.group(index++)));
         position.set(Event.KEY_INPUT, parser.group(index++));
         position.set(Event.KEY_STATUS, parser.group(index++));

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -108,7 +108,7 @@ protected Object decode(
                         break;
                     case 6:
                         buf.readUnsignedShort();
-                        position.set("adc", buf.readFloat());
+                        position.set(Event.PREFIX_ADC + 1, buf.readFloat());
                         break;
                     case 7:
                         position.set(Event.KEY_ALARM, buf.readUnsignedShort());
@@ -124,7 +124,7 @@ protected Object decode(
                         break;
                     case 24:
                         buf.readUnsignedByte();
-                        position.set(Event.KEY_TEMPERATURE, buf.readUnsignedByte());
+                        position.set(Event.PREFIX_TEMP + 1, buf.readUnsignedByte());
                         break;
                     case 25:
                         buf.readUnsignedByte();

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -133,15 +133,15 @@ private Position decodePosition(String substring) {
 
         // Other
         position.set(Event.KEY_HDOP, parser.group(index++));
-        position.set("inputs", parser.group(index++));
-        position.set("outputs", parser.group(index++));
+        position.set(Event.KEY_INPUT, parser.group(index++));
+        position.set(Event.KEY_OUTPUT, parser.group(index++));
 
         // ADC
         String adc = parser.group(index++);
         if (adc != null) {
             String[] values = adc.split(",");
             for (int i = 0; i < values.length; i++) {
-                position.set("adc" + (i + 1), values[i]);
+                position.set(Event.PREFIX_ADC + (i + 1), values[i]);
             }
         }
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -110,8 +110,8 @@ protected Object decode(
         position.set(Event.KEY_INPUT, parser.group(index++));
         
         // ADC
-        position.set("adc1", parser.group(index++));
-        position.set("adc2", parser.group(index++));
+        position.set(Event.PREFIX_ADC + 1, parser.group(index++));
+        position.set(Event.PREFIX_ADC + 2, parser.group(index++));
         
         // Output
         position.set(Event.KEY_OUTPUT, parser.group(index++));

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -198,7 +198,7 @@ else if (hasDeviceId() && (type == MSG_POINT || type == MSG_ALARM || type == MSG
                         hex.append(HEX_CHARS.charAt((b & 0x0F)));
                     }
 
-                    position.set("passenger", hex);
+                    position.set("passenger", hex.toString());
 
                     buf.skipBytes(size);
                 }

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -42,7 +42,7 @@ public Tk102ProtocolDecoder(String protocol) {
             "([EW])" +
             "(\\d{3}\\.\\d{3})" +          // Speed
             "(\\d{2})(\\d{2})(\\d{2})" +   // Date (DDMMYY)
-            "\\d+\\)");
+            "\\d+.*\\)\\]?");
 
     @Override
     protected Object decode(

File: test/org/traccar/protocol/Tk102ProtocolDecoderTest.java
Patch:
@@ -35,6 +35,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "[;00000000106(ONE200834A5952.8114N01046.0832E003.93212071305010000)"));
 
+        verify(decoder.decode(null, null,
+                "[\u00930000000000F(ITV153047A1534.0805N03233.0888E000.00029041500000400&Wsz-wl001&B0000)]"));
+
     }
 
 }

File: src/org/traccar/protocol/ApelProtocolDecoder.java
Patch:
@@ -208,7 +208,7 @@ else if (hasDeviceId() && (type == MSG_TYPE_CURRENT_GPS_DATA || type == MSG_TYPE
                 position.setCourse(buf.readShort() / 100.0);
 
                 // Altitude
-                position.setAltitude((double) buf.readShort());
+                position.setAltitude(buf.readShort());
 
                 if (subtype == MSG_TYPE_STATE_FULL_INFO_T104) {
 

File: src/org/traccar/protocol/AplicomProtocolDecoder.java
Patch:
@@ -222,7 +222,7 @@ protected Object decode(
         
         // Altitude
         if ((selector & 0x0800) != 0) {
-            position.setAltitude((double) buf.readShort());
+            position.setAltitude(buf.readShort());
         }
 
         position.setExtendedInfo(extendedInfo.toString());

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -119,7 +119,7 @@ protected Object decode(
             position.setLatitude(buf.readInt() * 0.000001);
 
             // Course
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort());
 
             // Report type
             extendedInfo.set("type", buf.readUnsignedByte());

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -108,8 +108,8 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
             // Location
             position.setLatitude(convertCoordinate(buf.readUnsignedByte(), buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
             position.setLongitude(convertCoordinate(buf.readUnsignedByte(), buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
-            position.setSpeed((double) buf.readUnsignedByte());
-            position.setCourse((double) (buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
+            position.setSpeed(buf.readUnsignedByte());
+            position.setCourse(buf.readUnsignedByte() << 8 | buf.readUnsignedByte());
 
             buf.readUnsignedByte(); // checksum
 

File: src/org/traccar/protocol/AutoFonProtocolDecoder.java
Patch:
@@ -97,8 +97,8 @@ private Position decodePosition(ChannelBuffer buf, boolean history) {
         // Location
         position.setLatitude(convertCoordinate(buf.readInt()));
         position.setLongitude(convertCoordinate(buf.readInt()));
-        position.setAltitude((double) buf.readShort());
-        position.setSpeed((double) buf.readUnsignedByte());
+        position.setAltitude(buf.readShort());
+        position.setSpeed(buf.readUnsignedByte());
         position.setCourse(buf.readUnsignedByte() * 2.0);
 
         extendedInfo.set("hdop", buf.readUnsignedShort());

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -113,7 +113,7 @@ protected Object decode(
 
             // Course and flags
             int union = buf.readUnsignedShort();
-            position.setCourse((double) (union & 0x03FF));
+            position.setCourse(union & 0x03FF);
             position.setValid((union & 0x1000) != 0);
             if ((union & 0x0400) != 0) latitude = -latitude;
             if ((union & 0x0800) != 0) longitude = -longitude;

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -174,7 +174,7 @@ protected Object decode(
                 position.setAltitude(buf.readInt() * 0.01);
                 position.setSpeed(buf.readUnsignedInt() * 0.0194384449); // cm/s
             }
-            position.setCourse((double) buf.readShort());
+            position.setCourse(buf.readShort());
             if (type == MSG_MINI_EVENT_REPORT) {
                 position.setSpeed(buf.readUnsignedByte() * 0.539957); // km/h
             }

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -110,7 +110,7 @@ else if (hasDeviceId() &&
             position.setLatitude(buf.readInt() / 1800000.0);
             position.setLongitude(buf.readInt() / 1800000.0);
             position.setSpeed(buf.readUnsignedByte() * 0.539957);
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort());
             
             // Cell
             extendedInfo.set("cell", ChannelBufferTools.readHexString(buf, 18));
@@ -170,10 +170,10 @@ else if (type == MSG_DATA) {
             double longitude = buf.readUnsignedInt() / (60.0 * 30000.0);
 
             // Speed
-            position.setSpeed((double) buf.readUnsignedByte());
+            position.setSpeed(buf.readUnsignedByte());
 
             // Course
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort());
 
             buf.skipBytes(3); // reserved
 

File: src/org/traccar/protocol/GalileoProtocolDecoder.java
Patch:
@@ -135,7 +135,7 @@ protected Object decode(
                     break;
                     
                 case TAG_ALTITUDE:
-                    position.setAltitude((double) buf.readShort());
+                    position.setAltitude(buf.readShort());
                     break;
                     
                 case TAG_STATUS:

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -95,7 +95,7 @@ protected Object decode(
             position.setLatitude(ChannelBufferTools.readCoordinate(buf));
             position.setLongitude(ChannelBufferTools.readCoordinate(buf));
             position.setSpeed(ChannelBufferTools.readHexInteger(buf, 4) * 0.539957);
-            position.setCourse((double) ChannelBufferTools.readHexInteger(buf, 4));
+            position.setCourse(ChannelBufferTools.readHexInteger(buf, 4));
 
             // Flags
             int flags = buf.readUnsignedByte();

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -107,10 +107,10 @@ else if (type == MSG_DATA) {
             double longitude = buf.readUnsignedInt() / (60.0 * 30000.0);
 
             // Speed
-            position.setSpeed((double) buf.readUnsignedByte());
+            position.setSpeed(buf.readUnsignedByte());
 
             // Course
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort());
 
             buf.skipBytes(3); // reserved
 

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -174,7 +174,7 @@ protected Object decode(
 
             // Course and flags
             int union = buf.readUnsignedShort();
-            position.setCourse((double) (union & 0x03FF));
+            position.setCourse(union & 0x03FF);
             position.setValid((union & 0x1000) != 0);
             if ((union & 0x0400) == 0) latitude = -latitude;
             if ((union & 0x0800) != 0) longitude = -longitude;

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -95,7 +95,7 @@ private Position decodeBinary(ChannelBuffer buf) {
         position.setLongitude(longitude);
 
         // Speed and course
-        position.setSpeed((double) ChannelBufferTools.readHexInteger(buf, 3));
+        position.setSpeed(ChannelBufferTools.readHexInteger(buf, 3));
         position.setCourse((buf.readUnsignedByte() & 0x0f) * 100.0 + ChannelBufferTools.readHexInteger(buf, 2));
         
         // Status

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -89,7 +89,7 @@ private Position decodeNormalMessage(ChannelBuffer buf) throws Exception {
         position.setLongitude(longitude);
 
         // Speed
-        position.setSpeed((double) ChannelBufferTools.readHexInteger(buf, 2));
+        position.setSpeed(ChannelBufferTools.readHexInteger(buf, 2));
 
         // Course
         position.setCourse(buf.readUnsignedByte() * 2.0);
@@ -104,7 +104,7 @@ private Position decodeNormalMessage(ChannelBuffer buf) throws Exception {
             buf.readByte(); // other flags and sensors
 
             // Altitude
-            position.setAltitude((double) buf.readUnsignedShort());
+            position.setAltitude(buf.readUnsignedShort());
 
             extendedInfo.set("cell", buf.readUnsignedShort());
             extendedInfo.set("lac", buf.readUnsignedShort());

File: src/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -99,7 +99,7 @@ protected Object decode(
             position.setLatitude(ChannelBufferTools.readCoordinate(buf));
             position.setLongitude(ChannelBufferTools.readCoordinate(buf));
             position.setSpeed(ChannelBufferTools.readHexInteger(buf, 4) * 0.539957);
-            position.setCourse((double) ChannelBufferTools.readHexInteger(buf, 4));
+            position.setCourse(ChannelBufferTools.readHexInteger(buf, 4));
 
             // Flags
             int flags = buf.readUnsignedByte();

File: src/org/traccar/protocol/M2mProtocolDecoder.java
Patch:
@@ -113,7 +113,7 @@ protected Object decode(
             
             position.setLatitude(latitude);
             position.setLongitude(longitude);
-            position.setSpeed((double) buf.readUnsignedByte());
+            position.setSpeed(buf.readUnsignedByte());
 
             // Satellites
             int satellites = buf.readUnsignedByte();

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -224,13 +224,13 @@ private List<Position> decodeBinaryMessage(Channel channel, ChannelBuffer buf) {
             position.setSpeed(buf.readUnsignedShort() * 0.539957);
 
             // Course
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setCourse(buf.readUnsignedShort());
 
             // HDOP
             extendedInfo.set("hdop", buf.readUnsignedShort() * 0.1);
 
             // Altitude
-            position.setAltitude((double) buf.readUnsignedShort());
+            position.setAltitude(buf.readUnsignedShort());
 
             // Other
             extendedInfo.set("milage", buf.readUnsignedInt());

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -172,8 +172,8 @@ private ParseResult parsePosition(ChannelBuffer buf) {
             // Location data
             position.setLatitude(buf.readFloat() / Math.PI * 180);
             position.setLongitude(buf.readFloat() / Math.PI * 180);
-            position.setSpeed((double) buf.readFloat());
-            position.setCourse((double) buf.readUnsignedShort());
+            position.setSpeed(buf.readFloat());
+            position.setCourse(buf.readUnsignedShort());
 
             // Milage
             extendedInfo.set("milage", buf.readFloat());

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -97,7 +97,7 @@ protected Object decode(
                 position.setLatitude(convertCoordinate(buf.readInt()));
                 position.setLongitude(convertCoordinate(buf.readInt()));
                 position.setAltitude(buf.readShort()/ 10.0);
-                position.setCourse((double) buf.readUnsignedShort());
+                position.setCourse(buf.readUnsignedShort());
                 position.setSpeed(buf.readUnsignedShort() * 0.0539957);
                 
                 // Date and time

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -141,7 +141,7 @@ protected Object decode(
                     position.setValid(satellites >= 3);
                     
                     // Speed
-                    position.setSpeed((double) buf.readUnsignedByte());
+                    position.setSpeed(buf.readUnsignedByte());
                     
                     // Course
                     double course = buf.readUnsignedByte() << 1;

File: src/org/traccar/protocol/SkypatrolProtocolDecoder.java
Patch:
@@ -169,7 +169,7 @@ protected Object decode(
 
             // Altitude
             if (checkBit(mask, 15)) {
-                position.setAltitude((double) buf.readMedium());
+                position.setAltitude(buf.readMedium());
             }
 
             // Satellites

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -104,7 +104,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
                 }
                 
                 if (checkBit(locationMask, 1)) {
-                    position.setAltitude((double) buf.readUnsignedShort());
+                    position.setAltitude(buf.readUnsignedShort());
                 }
                 
                 if (checkBit(locationMask, 2)) {
@@ -142,8 +142,8 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
 
                 position.setLongitude(buf.readInt() / 10000000.0);
                 position.setLatitude(buf.readInt() / 10000000.0);
-                position.setAltitude((double) buf.readShort());
-                position.setCourse((double) buf.readUnsignedShort());
+                position.setAltitude(buf.readShort());
+                position.setCourse(buf.readUnsignedShort());
 
                 int satellites = buf.readUnsignedByte();
                 extendedInfo.set("satellites", satellites);

File: src/org/traccar/protocol/TytanProtocolDecoder.java
Patch:
@@ -87,7 +87,7 @@ protected Object decode(
             // Course
             int course = (buf.readUnsignedByte() >> 5) * 45;
             course = (course + 180) % 360;
-            position.setCourse((double) course);
+            position.setCourse(course);
             
             // Speed
             int speed = buf.readUnsignedByte();

File: src/org/traccar/protocol/UlbotechProtocolDecoder.java
Patch:
@@ -85,7 +85,7 @@ protected Object decode(
                     position.setLatitude(buf.readInt() / 1000000.0);
                     position.setLongitude(buf.readInt() / 1000000.0);
                     position.setSpeed(buf.readUnsignedShort() * 0.539957);
-                    position.setCourse((double) buf.readUnsignedShort());
+                    position.setCourse(buf.readUnsignedShort());
                     extendedInfo.set("hdop", buf.readUnsignedShort());
                     break;
 

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -117,7 +117,6 @@ protected Object decode(
             position.setValid(true);
             position.setLongitude(buf.readInt() * 0.000001);
             position.setLatitude(buf.readInt() * 0.000001);
-            position.setAltitude(0.0);
 
             // Course
             position.setCourse((double) buf.readUnsignedShort());

File: src/org/traccar/protocol/AutoFon45ProtocolDecoder.java
Patch:
@@ -110,7 +110,6 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
             position.setLongitude(convertCoordinate(buf.readUnsignedByte(), buf.readUnsignedByte() << 16 | buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
             position.setSpeed((double) buf.readUnsignedByte());
             position.setCourse((double) (buf.readUnsignedByte() << 8 | buf.readUnsignedByte()));
-            position.setAltitude(0.0);
 
             buf.readUnsignedByte(); // checksum
 

File: src/org/traccar/protocol/Avl301ProtocolDecoder.java
Patch:
@@ -120,7 +120,6 @@ protected Object decode(
 
             position.setLatitude(latitude);
             position.setLongitude(longitude);
-            position.setAltitude(0.0);
 
             if ((union & 0x4000) != 0) {
                 extendedInfo.set("acc", (union & 0x8000) != 0);

File: src/org/traccar/protocol/BoxProtocolDecoder.java
Patch:
@@ -95,7 +95,6 @@ else if (sentence.startsWith("L,")) {
             position.setLongitude(Double.valueOf(parser.group(index++)));
             position.setSpeed(Double.valueOf(parser.group(index++)));
             position.setCourse(Double.valueOf(parser.group(index++)));
-            position.setAltitude(0.0);
             
             // Distance
             extendedInfo.set("milage", parser.group(index++));

File: src/org/traccar/protocol/CalAmpProtocolDecoder.java
Patch:
@@ -176,7 +176,6 @@ protected Object decode(
             }
             position.setCourse((double) buf.readShort());
             if (type == MSG_MINI_EVENT_REPORT) {
-                position.setAltitude(0.0);
                 position.setSpeed(buf.readUnsignedByte() * 0.539957); // km/h
             }
 

File: src/org/traccar/protocol/CarscopProtocolDecoder.java
Patch:
@@ -101,9 +101,6 @@ protected Object decode(
         if (parser.group(index++).compareTo("W") == 0) longitude = -longitude;
         position.setLongitude(longitude);
 
-        // Altitude
-        position.setAltitude(0.0);
-
         // Speed
         position.setSpeed(Double.valueOf(parser.group(index++)));
 

File: src/org/traccar/protocol/EasyTrackProtocolDecoder.java
Patch:
@@ -134,8 +134,6 @@ protected Object decode(
         String altitude = parser.group(index++);
         if (altitude != null) {
             position.setAltitude(Double.valueOf(altitude));
-        } else {
-            position.setAltitude(0.0);
         }
 
         position.setExtendedInfo(extendedInfo.toString());

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -111,7 +111,6 @@ else if (hasDeviceId() &&
             position.setLongitude(buf.readInt() / 1800000.0);
             position.setSpeed(buf.readUnsignedByte() * 0.539957);
             position.setCourse((double) buf.readUnsignedShort());
-            position.setAltitude(0.0);
             
             // Cell
             extendedInfo.set("cell", ChannelBufferTools.readHexString(buf, 18));
@@ -186,7 +185,6 @@ else if (type == MSG_DATA) {
 
             position.setLatitude(latitude);
             position.setLongitude(longitude);
-            position.setAltitude(0.0);
 
             position.setExtendedInfo(extendedInfo.toString());
             return position;

File: src/org/traccar/protocol/GatorProtocolDecoder.java
Patch:
@@ -96,7 +96,6 @@ protected Object decode(
             position.setLongitude(ChannelBufferTools.readCoordinate(buf));
             position.setSpeed(ChannelBufferTools.readHexInteger(buf, 4) * 0.539957);
             position.setCourse((double) ChannelBufferTools.readHexInteger(buf, 4));
-            position.setAltitude(0.0);
 
             // Flags
             int flags = buf.readUnsignedByte();

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -122,7 +122,6 @@ else if (type == MSG_DATA) {
 
             position.setLatitude(latitude);
             position.setLongitude(longitude);
-            position.setAltitude(0.0);
 
             position.setExtendedInfo(extendedInfo.toString());
             return position;

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -181,7 +181,6 @@ protected Object decode(
 
             position.setLatitude(latitude);
             position.setLongitude(longitude);
-            position.setAltitude(0.0);
             
             if ((union & 0x4000) != 0) {
                 extendedInfo.set("acc", (union & 0x8000) != 0);

File: src/org/traccar/protocol/HaicomProtocolDecoder.java
Patch:
@@ -115,9 +115,6 @@ protected Object decode(
 
         // Course
         position.setCourse(Double.valueOf(parser.group(index++)) / 10);
-
-        // Altitude
-        position.setAltitude(0.0);
         
         // Additional data
         extendedInfo.set("status", parser.group(index++));

File: src/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -100,7 +100,6 @@ protected Object decode(
             position.setLongitude(ChannelBufferTools.readCoordinate(buf));
             position.setSpeed(ChannelBufferTools.readHexInteger(buf, 4) * 0.539957);
             position.setCourse((double) ChannelBufferTools.readHexInteger(buf, 4));
-            position.setAltitude(0.0);
 
             // Flags
             int flags = buf.readUnsignedByte();

File: src/org/traccar/protocol/LaipacProtocolDecoder.java
Patch:
@@ -118,9 +118,6 @@ protected Object decode(
         time.set(Calendar.YEAR, 2000 + Integer.valueOf(parser.group(index++)));
         position.setTime(time.getTime());
 
-        // Altitude
-        position.setAltitude(0.0);
-
         // Response
         String type = parser.group(index++);
         String checksum = parser.group(index++);

File: src/org/traccar/protocol/M2mProtocolDecoder.java
Patch:
@@ -114,8 +114,6 @@ protected Object decode(
             position.setLatitude(latitude);
             position.setLongitude(longitude);
             position.setSpeed((double) buf.readUnsignedByte());
-            position.setCourse(0.0);
-            position.setAltitude(0.0);
 
             // Satellites
             int satellites = buf.readUnsignedByte();

File: src/org/traccar/protocol/MtxProtocolDecoder.java
Patch:
@@ -101,7 +101,6 @@ protected Object decode(
         position.setLongitude(Double.valueOf(parser.group(index++)));
         position.setSpeed(Double.valueOf(parser.group(index++)));
         position.setCourse(Double.valueOf(parser.group(index++)));
-        position.setAltitude(0.0);
 
         // Other
         extendedInfo.set("milage", Double.valueOf(parser.group(index++)));

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -83,7 +83,6 @@ private ParseResult parsePosition(ChannelBuffer buf) {
         ExtendedInfoFormatter extendedInfo = new ExtendedInfoFormatter(getProtocol());
 
         position.setDeviceId(getDeviceId());
-        position.setAltitude(0.0);
 
         // Format type
         int format;

File: src/org/traccar/protocol/NoranProtocolDecoder.java
Patch:
@@ -95,7 +95,6 @@ else if (type == MSG_UPLOAD_POSITION ||
             position.setCourse((double) buf.readUnsignedShort());
             position.setLongitude((double) buf.readFloat());
             position.setLatitude((double) buf.readFloat());
-            position.setAltitude(0.0);
 
             // Time
             long timeValue = buf.readUnsignedInt();

File: src/org/traccar/protocol/PiligrimProtocolDecoder.java
Patch:
@@ -134,7 +134,6 @@ protected Object decode(
                     if ((flags & 0x02) != 0) longitude = -longitude;
                     position.setLatitude(latitude);
                     position.setLongitude(longitude);
-                    position.setAltitude(0.0);
                     
                     // Satellites
                     int satellites = buf.readUnsignedByte();

File: src/org/traccar/protocol/Stl060ProtocolDecoder.java
Patch:
@@ -104,9 +104,6 @@ protected Object decode(
         longitude += Double.valueOf(parser.group(index++) + parser.group(index++)) / 600000;
         if (parser.group(index++).compareTo("W") == 0) longitude = -longitude;
         position.setLongitude(longitude);
-        
-        // Altitude
-        position.setAltitude(0.0);
 
         // Speed
         position.setSpeed(Double.valueOf(parser.group(index++)));

File: src/org/traccar/protocol/SuntechProtocolDecoder.java
Patch:
@@ -103,9 +103,6 @@ protected Object decode(
         // Course
         position.setCourse(Double.valueOf(parser.group(index++)));
 
-        // Altitude
-        position.setAltitude(0.0);
-
         // Extended info
         position.setExtendedInfo(extendedInfo.toString());
 

File: src/org/traccar/protocol/SyrusProtocolDecoder.java
Patch:
@@ -155,9 +155,6 @@ protected Object decode(
         String longitude = parser.group(index) + '.' + parser.group(index + 1);
         index += 2;
         position.setLongitude(Double.valueOf(longitude));
-
-        // Altitude
-        position.setAltitude(0.0);
         
         // Speed and Course
         position.setSpeed(Double.valueOf(parser.group(index++)) * 0.868976);

File: src/org/traccar/protocol/TelikProtocolDecoder.java
Patch:
@@ -92,7 +92,6 @@ protected Object decode(
         // Location
         position.setLongitude(Double.valueOf(parser.group(index++)) / 10000);
         position.setLatitude(Double.valueOf(parser.group(index++)) / 10000);
-        position.setAltitude(0.0);
 
         // Validity
         position.setValid(parser.group(index++).compareTo("1") != 0);

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -122,9 +122,6 @@ protected Object decode(
         if (parser.group(index++).compareTo("W") == 0) longitude = -longitude;
         position.setLongitude(longitude);
 
-        // Altitude
-        position.setAltitude(0.0);
-
         // Speed
         position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);
 

File: src/org/traccar/protocol/TopflytechProtocolDecoder.java
Patch:
@@ -108,9 +108,6 @@ protected Object decode(
         // Course
         position.setCourse(Double.valueOf(parser.group(index++)));
 
-        // Altitude
-        position.setAltitude(0.0);
-
         position.setExtendedInfo(extendedInfo.toString());
         return position;
     }

File: src/org/traccar/protocol/Tr20ProtocolDecoder.java
Patch:
@@ -124,9 +124,6 @@ protected Object decode(
             // Course
             position.setCourse(Double.valueOf(parser.group(index++)));
 
-            // Altitude
-            position.setAltitude(0.0);
-
             // Extended info
             position.setExtendedInfo(extendedInfo.toString());
 

File: src/org/traccar/protocol/Tr900ProtocolDecoder.java
Patch:
@@ -109,9 +109,6 @@ protected Object decode(
         if (hemisphere.compareTo("S") == 0) latitude = -latitude;
         position.setLatitude(latitude);
 
-        // Altitude
-        position.setAltitude(0.0);
-
         // Speed
         position.setSpeed(Double.valueOf(parser.group(index++)));
 

File: src/org/traccar/protocol/VisiontekProtocolDecoder.java
Patch:
@@ -119,8 +119,6 @@ protected Object decode(
         String altitude = parser.group(index++);
         if (altitude != null) {
             position.setAltitude(Double.valueOf(altitude));
-        } else {
-            position.setAltitude(0.0);
         }
 
         // Additional data

File: src/org/traccar/protocol/YwtProtocolDecoder.java
Patch:
@@ -121,8 +121,6 @@ protected Object decode(
         String altitude = parser.group(index++);
         if (altitude != null) {
             position.setAltitude(Double.valueOf(altitude));
-        } else {
-            position.setAltitude(0.0);
         }
 
         // Speed

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -116,7 +116,9 @@ protected Object decode(
             // Timezone offset
             if (dataLength > 10) {
                 int extensionBits = buf.readUnsignedShort();
-                int offset = (extensionBits >> 4) * 36000;
+                int hours = (extensionBits >> 4) / 100;
+                int minutes = (extensionBits >> 4) % 100;
+                int offset = (hours * 60 + minutes) * 60;
                 if ((extensionBits & 0x8) != 0) {
                     offset = -offset;
                 }

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2015 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -38,7 +38,7 @@ public Gl200ProtocolDecoder(DataManager dataManager, String protocol, Properties
 
     private static final Pattern pattern = Pattern.compile(
             "(?:(?:\\+(?:RESP|BUFF):)|" +
-            "(?:\\x00\\x04,\\p{XDigit}{4},[01],))" +
+            "(?:\\x00?\\x04,\\p{XDigit}{4},[01],))" +
             "GT...," +
             "(?:[0-9a-fA-F]{6})?," +            // Protocol version
             "(\\d{15}),.*," +                   // IMEI

File: test/org/traccar/protocol/BceProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
 
         BceProtocolDecoder decoder = new BceProtocolDecoder(new TestDataManager(), null, null);
 
-        /*verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
                 "be76619c834601004200a0003fd769c568ffc3db0079161d420683a9414918b1150000000000d102660167040000000000009f06357f0000a401042ea415e10232000000000000000000000051"))));
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
@@ -32,7 +32,7 @@ public void testDecode() throws Exception {
                 "be76619c834601003302a5e8327764726bff432fc52a420e2c93410028afd2070000000080024a0005040000000000008e06547f0000a401043cf21f390e54328764726bff432fc52a420e2c93410028afd2070000000080024c0005040000000000008e064f7f0000a401043cf21f390e54329764726bff432fc52a420e2c93410028afd2070000000080024e0002040000000000008d064f7f0000a401043cf21f390e5432a764726bff432fc52a420e2c93410028afd2070000000080024e0004040000000000008e06587f0000a401043cf21f390e5432b764726bff432fc52a420e2c93410028afd207000000008002460005040000000000008e06557f0000a401043cf21f390e5432c764726bff432fc52a420e2c93410028afd2070000000080024e0004040000000000008e06347f0000a401043cf21f390e5432d764726bff432fc52a420e2c93410028afd2070000000080024e0002040000000000008e06547f0000a401043cf21f390e5432e764726bff432fc52a420e2c93410028afd207000000008002540002040000000000008e06477f0000a401043cf21f390e5432f764726bff432fc52a420e2c93410028afd207000000008002540004040000000000008d064f7f0000a401043cf21f390e54320765726bff432fc52a420e2c93410028afd207000000008002540004040000000000008e064d7f0000a401043cf21f390e54321765726bff432fc52a420e2c93410028afd207000000008002540004040000000000008e06467f0000a401043cf21f390e544200a0003f3743c96bffc3db0060c81c42d885ab41002aaf060000000000d102380167040000000000008a064f7f0000a4010412a46b330033000000000000000000000025"))));
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertHexString(
-                "ca07629c834601002702a58f3c278ff96a0bc000a0c00140bc3a42508bc541002a70a905000000009000c101a40103d904440e003000000000000000000000000000000000000001013c878ff96a0bc000a0c00140bc3a42508bc541002970a905000000009000c301a40103d904440e003000000000000000000000000000000000000001013cb7d2f96a0bc000a0c00124bc3a426b8fc5410428000404000000009000c401a40103d904440e003500000000000000000000000000000000000001013cc7d2f96a0bc000a0c00124bc3a426b8fc5410428000404000000009000c301a40103d904440e003500000000000000000000000000000000000001013cd7f2f96a0bc000a0c00114bc3a42a48fc5410029027e03000000009000c301a40103d904440e003000000000000000000000000000000000000001013c670dfa6a0bc000a0c001f1bb3a42418dc541002a484904000000009000c001a40103d904440e003a00000000000000000000000000000000000001013c770dfa6a0bc000a0c001f1bb3a42418dc5410028484904000000009000bf01a40103d904440e003a00000000000000000000000000000000000001013c470efa6a0bc000a0c001f1bb3a42418dc5410029484904000000009000bf01a40103d904440e003a00000000000000000000000000000000000001013c5711fa6a0bc000a0c001f1bb3a42418dc5410029484904000000009000c101a40103d904440e003000000000000000000000000000000000000001013f00a0003cc795866b0bc000a0c00144bc3a423a90c541003697cb03000000008000cf01a40103d9040d0f0030000000000000000000000000000000000000010100"))));*/
+                "ca07629c834601002702a58f3c278ff96a0bc000a0c00140bc3a42508bc541002a70a905000000009000c101a40103d904440e003000000000000000000000000000000000000001013c878ff96a0bc000a0c00140bc3a42508bc541002970a905000000009000c301a40103d904440e003000000000000000000000000000000000000001013cb7d2f96a0bc000a0c00124bc3a426b8fc5410428000404000000009000c401a40103d904440e003500000000000000000000000000000000000001013cc7d2f96a0bc000a0c00124bc3a426b8fc5410428000404000000009000c301a40103d904440e003500000000000000000000000000000000000001013cd7f2f96a0bc000a0c00114bc3a42a48fc5410029027e03000000009000c301a40103d904440e003000000000000000000000000000000000000001013c670dfa6a0bc000a0c001f1bb3a42418dc541002a484904000000009000c001a40103d904440e003a00000000000000000000000000000000000001013c770dfa6a0bc000a0c001f1bb3a42418dc5410028484904000000009000bf01a40103d904440e003a00000000000000000000000000000000000001013c470efa6a0bc000a0c001f1bb3a42418dc5410029484904000000009000bf01a40103d904440e003a00000000000000000000000000000000000001013c5711fa6a0bc000a0c001f1bb3a42418dc5410029484904000000009000c101a40103d904440e003000000000000000000000000000000000000001013f00a0003cc795866b0bc000a0c00144bc3a423a90c541003697cb03000000008000cf01a40103d9040d0f0030000000000000000000000000000000000000010100"))));
 
     }
 

File: src/org/traccar/protocol/GlobalSatProtocolDecoder.java
Patch:
@@ -170,7 +170,7 @@ private Position decodeOriginal(Channel channel, String sentence) {
                     position.setCourse(Double.valueOf(value));
                     break;
                 case 'N':
-                    extendedInfo.set("battery", Double.valueOf(value));
+                    extendedInfo.set("battery", value);
                     break;
                 default:
                     // Unsupported

File: test/org/traccar/protocol/GlobalSatProtocolDecoderTest.java
Patch:
@@ -19,14 +19,14 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "GSr,011412001878820,4,5,00,,1,250114,105316,E00610.2925,N4612.1824,0,0.02,0,1,0.0,64*51!"));
 
+        verify(decoder.decode(null, null,
+                "GSr,357938020310710,,4,04,,1,170315,060657,E00000.0000,N0000.0000,148,0.00,0,0,0.0,11991mV*6c!"));
+
         decoder.setFormat0("TSPRXAB27GHKLMnaicz*U!");
 
         verify(decoder.decode(null, null,
                 "GSr,1,135785412249986,01,I,EA02,3,230410,153318,E12129.2839,N2459.8570,0,1.17,212,8,1.0,12.3V*55"));
 
-        verify(decoder.decode(null, null,
-                "GSr,357938020310710,,4,04,,1,170315,060657,E00000.0000,N0000.0000,148,0.00,0,0,0.0,11991mV*6c!"));
-
         verify(decoder.decode(null, null,
                 "GSr,GTR-128,012896009148443,0040,5,0080,3,190813,185812,W11203.3661,N3330.2104,344,0.24,78,9,0.8,60%,0,0,12,\"310,410,0bdd,050d,02,21\",\"310,410,0bdd,0639,24,7\"*79"));
 

File: src/org/traccar/protocol/MeitrackFrameDecoder.java
Patch:
@@ -34,10 +34,10 @@ protected Object decode(
             return null;
         }
         
-        Integer index = ChannelBufferTools.find(buf, 0, buf.readableBytes(), ",");
+        Integer index = ChannelBufferTools.find(buf, buf.readerIndex(), buf.writerIndex(), ",");
         if (index != null)
         {
-            int length = index + Integer.valueOf(buf.toString(3, index - 3, Charset.defaultCharset()));
+            int length = index - buf.readerIndex() + Integer.valueOf(buf.toString(buf.readerIndex() + 3, index - buf.readerIndex() - 3, Charset.defaultCharset()));
             if (buf.readableBytes() >= length) {
                 return buf.readBytes(length);
             }

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -56,7 +56,7 @@ public MeitrackProtocolDecoder(DataManager dataManager, String protocol, Propert
             "([AV])," +                         // Validity
             "(\\d+)," +                         // Satellites
             "(\\d+)," +                         // GSM Signal
-            "(\\d+)," +                         // Speed
+            "(\\d+\\.?\\d*)," +                 // Speed
             "(\\d+)," +                         // Course
             "(\\d+\\.?\\d*)," +                 // HDOP
             "(-?\\d+)," +                       // Altitude
@@ -68,7 +68,7 @@ public MeitrackProtocolDecoder(DataManager dataManager, String protocol, Propert
             "(\\p{XDigit}+)?\\|" +              // ADC2
             "(\\p{XDigit}+)?\\|" +              // ADC3
             "(\\p{XDigit}+)\\|" +               // Battery
-            "(\\p{XDigit}+)," +                 // Power*/
+            "(\\p{XDigit}+)," +                 // Power
             ".*(\r\n)?");
 
     private Position decodeRegularMessage(Channel channel, ChannelBuffer buf) {

File: src/org/traccar/ServerManager.java
Patch:
@@ -789,7 +789,7 @@ private void initWialonServer(final String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
+                    pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(4 * 1024));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new WialonProtocolDecoder(dataManager, protocol, properties));

File: src/org/traccar/protocol/SyrusProtocolDecoder.java
Patch:
@@ -53,7 +53,7 @@ public SyrusProtocolDecoder(DataManager dataManager, String protocol, Properties
             "(\\d{3})" +                   // Course
             "\\d" +                        // Fix mode
             "(\\d)" +                      // Fix age
-            ".*");
+            ".*\r?\n?");
 
     private Date getTime(long week, long day, long seconds) {
         Calendar time = Calendar.getInstance(TimeZone.getTimeZone("UTC"));

File: src/org/traccar/helper/ChannelBufferTools.java
Patch:
@@ -30,13 +30,13 @@ public class ChannelBufferTools {
     public static Integer find(
             ChannelBuffer buf,
             Integer start,
-            Integer length,
+            Integer finish,
             String subString) {
 
         int index = start;
         boolean match;
 
-        for (; index < length; index++) {
+        for (; index < finish; index++) {
             match = true;
 
             for (int i = 0; i < subString.length(); i++) {

File: src/org/traccar/protocol/WondexFrameDecoder.java
Patch:
@@ -45,7 +45,7 @@ protected Object decode(
 
         } else {
 
-            Integer index = ChannelBufferTools.find(buf, buf.readerIndex(), buf.readableBytes(), "\r\n");
+            Integer index = ChannelBufferTools.find(buf, buf.readerIndex(), buf.writerIndex(), "\r\n");
             if (index != null) {
                 ChannelBuffer frame = buf.readBytes(index - buf.readerIndex());
                 buf.skipBytes(2);

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -50,14 +50,14 @@ public Xexun2ProtocolDecoder(DataManager dataManager, String protocol, Propertie
             "(\\d+\\.\\d+)," +                  // Speed
             "(\\d+\\.\\d+)?," +                 // Course
             "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
-            "[^,]*,[^,]*,.\\*..," +             // Checksum
+            "[^\\*]*\\*..,"       +             // Checksum
             "([FL])," +                         // Signal
             "(?:([^,]*),)?" +                   // Alarm
             ".*imei:" +
             "(\\d+)," +                         // IMEI
             "(\\d+)," +                         // Satellites
             "(-?\\d+\\.\\d+)?," +               // Altitude
-            "[FL]:(\\d+\\.\\d+)V," +            // Power
+            "[FL]:(\\d+\\.\\d+)V" +             // Power
             ".*" +
             "[\r\n]*");
 

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -48,6 +48,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "150216154418,5277,GNRMC,134418.000,A,5533.8973,N,03745.4398,E,0.00,308.85,160215,,,A*7A,F,, imei:864244028033115,10,169.8,F:4.28V,1,132,48269,250,99,6D0D,8572"));
 
+        verify(decoder.decode(null, null,
+                "150224173341,+66961544651,GPRMC,093341.000,A,1344.5716,N,10033.6648,E,0.00,0.00,240215,,,A*68,F,,imei:865328028306149,05,106.4,F:4.01V/ADC1=0.20V/ADC2=0.00V,0,159,955,520,01,5DE8,0399,6.21km"));
+
     }
 
 }

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -40,7 +40,7 @@ public Xexun2ProtocolDecoder(DataManager dataManager, String protocol, Propertie
             "[\r\n]*" +
             "(\\d+)," +                         // Serial
             "([^,]+)?," +                       // Number
-            "GPRMC," +
+            "G[PN]RMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity
             "(\\d{2})(\\d{2}\\.\\d+)," +        // Latitude (DDMM.MMMM)

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public XexunProtocolDecoder(DataManager dataManager, String protocol, Properties
     }
 
     private static final Pattern pattern = Pattern.compile(
-            "GPRMC," +
+            "G[PN]RMC," +
             "(\\d{2})(\\d{2})(\\d{2}).(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity
             "(\\d+)(\\d{2}\\.\\d+)," +          // Latitude (DDMM.MMMM)

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -45,6 +45,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "140602152533,TESCO_INFO,GPRMC,152533.000,A,5145.4275,N,00000.3448,E,0.00,0.00,020614,,,A*66,F,, imei:013227002781643,06,35.1,F:4.15V,1,135,38950,234,10,10B4,5235"));
 
+        verify(decoder.decode(null, null,
+                "150216154418,5277,GNRMC,134418.000,A,5533.8973,N,03745.4398,E,0.00,308.85,160215,,,A*7A,F,, imei:864244028033115,10,169.8,F:4.28V,1,132,48269,250,99,6D0D,8572"));
+
     }
 
 }

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -31,6 +31,9 @@ public void testDecode() throws Exception {
 
         verify(decoder.decode(null, null,
                 "GPRMC,220828.678,A,5206.1446,N,02038.2403,,0,0,160912,,,E*23,L,imei:358948012501019,"));
+
+        verify(decoder.decode(null, null,
+                "GNRMC,134418.000,A,5533.8973,N,03745.4398,E,0.00,308.85,160215,,,A*7A,F,, imei:864244028033115,"));
         
     }
 

File: test/org/traccar/protocol/GoSafeProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public void testDecode() throws Exception {
 
         GoSafeProtocolDecoder decoder = new GoSafeProtocolDecoder(new TestDataManager(), null, null);
 
+        assertNull(decoder.decode(null, null, null,
+                "*GS16,351535058709775"));
+
         verify(decoder.decode(null, null, null,
                 "*GS16,351535058709775,100356130215,,SYS:G79W;V1.06;V1.0.2,GPS:A;6;N24.802700;E46.616828;0;0;684;1.35,COT:60,ADC:4.31;0.10,DTT:20000;;0;0;0;1"));
 

File: src/org/traccar/protocol/TramigoProtocolDecoder.java
Patch:
@@ -142,7 +142,7 @@ protected Object decode(
             if (!matcher.find()) {
                 return null;
             }
-            DateFormat dateFormat = new SimpleDateFormat("HH:mm MMM d yyyy");
+            DateFormat dateFormat = new SimpleDateFormat("HH:mm MMM d yyyy", Locale.ENGLISH);
             position.setTime(dateFormat.parse(matcher.group(1) + " " + Calendar.getInstance().get(Calendar.YEAR)));
 
             position.setExtendedInfo(extendedInfo.toString());

File: src/org/traccar/protocol/Xt013ProtocolDecoder.java
Patch:
@@ -37,6 +37,7 @@ public Xt013ProtocolDecoder(DataManager dataManager, String protocol, Properties
     }
 
     private static final Pattern pattern = Pattern.compile(
+            "(?:HI,\\d+)?" +
             "TK," +
             "(\\d+)," +                         // IMEI
             "(\\d{2})(\\d{2})(\\d{2})" +        // Date (YYMMDD)

File: test/org/traccar/protocol/Xt013ProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "TK,862950021650364,150118113832,+53.267722,+5.767143,0,86,12,0,F,204,08,C94,336C,22,,4.21,1,,,,,,,,"));
+        
+        verify(decoder.decode(null, null,
+                "HI,862950021650364TK,862950021650364,150118113832,+53.267722,+5.767143,0,86,12,0,F,204,08,C94,336C,22,,4.21,1,,,,,,,,"));
 
     }
 

File: src/org/traccar/TrackerServer.java
Patch:
@@ -55,7 +55,7 @@ public TrackerServer(ServerManager serverManager, Bootstrap bootstrap, String pr
 
         address = serverManager.getProperties().getProperty(protocol + ".address");
         String portProperty = serverManager.getProperties().getProperty(protocol + ".port");
-        port = (portProperty != null) ? Integer.valueOf(portProperty) : 5000;
+        port = Integer.valueOf(portProperty);
 
         bootstrap.setPipelineFactory(new BasePipelineFactory(serverManager, this, protocol) {
             @Override

File: src/org/traccar/ServerManager.java
Patch:
@@ -324,7 +324,7 @@ private void initXexunServer(final String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    if (Boolean.valueOf(properties.containsKey(protocol + ".extended"))) {
+                    if (Boolean.valueOf(properties.getProperty(protocol + ".extended"))) {
                         pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024)); // tracker bug \n\r
                         pipeline.addLast("stringDecoder", new StringDecoder());
                         pipeline.addLast("objectDecoder", new Xexun2ProtocolDecoder(dataManager, protocol, properties));

File: src/org/traccar/protocol/TramigoFrameDecoder.java
Patch:
@@ -15,6 +15,7 @@
  */
 package org.traccar.protocol;
 
+import java.nio.ByteOrder;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
@@ -43,7 +44,7 @@ protected Object decode(
             int length = buf.readableBytes();
             byte bytes[] = new byte[length];
             buf.getBytes(buf.readerIndex(), bytes);
-            buf = ChannelBuffers.wrappedBuffer(bytes);
+            buf = ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, bytes);
         }
 
         return decode(ctx, channel, buf);

File: src/org/traccar/protocol/OrionProtocolDecoder.java
Patch:
@@ -53,7 +53,7 @@ private static void sendResponse(Channel channel, ChannelBuffer buf) {
     
     private static double convertCoordinate(int value) {
         double degrees = value / 1000000;
-        double minutes = (Math.abs(value) % 1000000) / 10000.0;
+        double minutes = (value % 1000000) / 10000.0;
         return degrees + minutes / 60;
     }
     

File: test/org/traccar/protocol/OrionProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
 
         OrionProtocolDecoder decoder = new OrionProtocolDecoder(new TestDataManager(), null, null);
 
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(
+                new int[] {0x50,0x57,0x00,0x01,0x37,0xbf,0x62,0x36,0x23,0x5a,0x03,0x31,0xb5,0xc6,0xe4,0x02,0xa3,0xb5,0xec,0xff,0x51,0x02,0x98,0x00,0x03,0x00,0x0e,0x0c,0x1d,0x17,0x29,0x36,0x08,0x0e,0x0c,0x1d,0x17,0x29,0x36,0xb0,0x3b,0x01,0x00,0x08,0x82,0x05,0x00,0x00,0x00,0x8e,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x03,0x00,0x94,0x05,0x00,0x00,0x00,0x84,0x03,0x00,0x85,0x03,0x00,0x03,0x06,0x76,0x00,0x90,0x01,0x13,0x15,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0xa4,0xc8}))));
+
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(
                 new int[] {0x50,0x57,0x00,0x41,0x07,0x36,0x7C,0x24,0x2B,0x44,0x09,0x01,0xAD,0xE9,0x7D,0x01,0x63,0x14,0x3B,0x07,0xB0,0x03,0x00,0x00,0x00,0x00,0x0D,0x04,0x19,0x17,0x38,0x2D,0x00,0x0B,0x01,0x01,0x00,0x05,0x11,0x00,0x00,0x00,0x00,0x06,0x82,0x05,0x00,0x00,0x00,0x8E,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x03,0x00,0x84,0x03,0x00,0x85,0x03,0x00,0x09,0x0A,0x00,0x00,0x00,0x00,0x48,0x01,0x00,0x00,0x00,0x8A,0xFC}))));
 

File: src/org/traccar/protocol/AtrackFrameDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2013 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -37,7 +37,7 @@ protected Object decode(
         // Keep alive message
         if (buf.readableBytes() >= KEEPALIVE_LENGTH &&
             buf.getUnsignedShort(buf.readerIndex()) == 0xfe02) {
-            channel.write(buf.readBytes(KEEPALIVE_LENGTH));
+            return buf.readBytes(KEEPALIVE_LENGTH);
         }
 
         return super.decode(ctx, channel, buf);

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -55,6 +55,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "123456789$GPRMC,155708.252,V,4610.1676,N,00606.4586,E,000.0,000.0,060214,,,N*76"));
+        
+        verify(decoder.decode(null, null,
+                "990000561287964,$GPRMC,213516.0,A,4337.216791,N,11611.995877,W,0.0,335.4,181214,,,A * 72"));
 
     }
 

File: src/org/traccar/protocol/CellocatorProtocolDecoder.java
Patch:
@@ -71,7 +71,7 @@ private void sendReply(Channel channel, long deviceId, byte packetNumber) {
         reply.writeInt(0); // authentication code
         reply.writeByte(0);
         reply.writeByte(packetNumber);
-        reply.writeZero(10);
+        reply.writeZero(11);
 
         byte checksum = 0;
         for (int i = 4; i < 27; i++) {

File: test/org/traccar/protocol/GatorProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public class GatorProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         GatorProtocolDecoder decoder = new GatorProtocolDecoder(new TestDataManager(), null, null);
+        
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
+                new int[] {0x24,0x24,0x80,0x00,0x26,0x00,0x09,0x63,0x2d,0x14,0x11,0x21,0x07,0x27,0x02,0x05,0x92,0x26,0x18,0x01,0x04,0x36,0x75,0x00,0x00,0x00,0x00,0xc0,0x47,0x00,0x07,0x9c,0x0c,0x34,0x00,0x0a,0xd8,0x0b,0x00,0xff,0x00,0x0a,0x0d}))));
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
                 new int[] {0x24,0x24,0x81,0x00,0x23,0x0C,0xA2,0x32,0x85,0x10,0x03,0x06,0x14,0x59,0x07,0x02,0x23,0x46,0x90,0x11,0x35,0x29,0x47,0x00,0x00,0x00,0x00,0xC0,0x40,0x01,0x01,0x2C,0x0E,0x11,0x00,0x00,0x00,0x21,0xCB,0x0D}))));

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ protected Object decode(
             
             try {
                 deviceId = getDataManager().getDeviceByImei(imei).getId();
-                buf.skipBytes(dataLength - 8);
+                buf.skipBytes(buf.readableBytes() - 6);
                 sendResponse(channel, type, buf.readUnsignedShort());
             } catch(Exception error) {
                 Log.warning("Unknown device - " + imei);

File: src/org/traccar/protocol/Pt502ProtocolDecoder.java
Patch:
@@ -58,7 +58,6 @@ protected Object decode(
         // Parse message
         Matcher parser = pattern.matcher(sentence);
         if (!parser.matches()) {
-            Log.info("Parsing error");
             return null;
         }
 

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -85,6 +85,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "+RESP:GTFRI,02010C,867844001274649,,0,0,1,1,0.0,0,122.5,7.684216,51.524512,20140106233722,0262,0007,79EE,1D22,,93,20140107003805,03C4$"));
         
+        verify(decoder.decode(null, null,
+                "+BUFF:GTFRI,210101,863286020016706,,,10,1,1,,,,49.903915,40.391669,20140818105815,,,,,,,,,,,210100,,,,,000C$"));
+        
     }
 
 }

File: src/org/traccar/helper/Log.java
Patch:
@@ -28,6 +28,7 @@
 import org.apache.log4j.LogManager;
 import org.apache.log4j.Logger;
 import org.apache.log4j.PatternLayout;
+import org.apache.log4j.varia.NullAppender;
 import org.jboss.netty.logging.AbstractInternalLogger;
 import org.jboss.netty.logging.InternalLogger;
 import org.jboss.netty.logging.InternalLoggerFactory;
@@ -46,6 +47,8 @@ public static void setupLogger(Properties properties) throws IOException {
                 layout, properties.getProperty("logger.file"), "'.'yyyyMMdd");
 
         LogManager.resetConfiguration();
+        LogManager.getRootLogger().addAppender(new NullAppender());
+        
         logger = Logger.getLogger(LOGGER_NAME);
         logger.addAppender(appender);
         logger.setLevel(Level.toLevel(properties.getProperty("logger.level"), Level.ALL));

File: src/org/traccar/ServerManager.java
Patch:
@@ -597,9 +597,7 @@ private void initMegastekServer(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    byte delimiter[] = { (byte) '\r', (byte) '\n' };
-                    pipeline.addLast("frameDecoder",
-                            new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
+                    pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new MegastekProtocolDecoder(ServerManager.this));

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -49,6 +49,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "$$B140,013777001293701,AAA,35,-7.266760,112.743550,140521095314,A,3,22,0,275,2.7,45,1984,8059,510|1|3504|EBFE,0000,0000|0000|0000|0914|0002,,*F9\r\n", Charset.defaultCharset())));
 
+        verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
+                "$$J163,123123123123123,AFF,0004,35,58.588926,16.180473,140928192856,A,10,27,0,161,1.2,19,1648894,435695,240|24|88B9|E435,0000,|||0A22|0000,00000001,,50,,,,,,,,,,,,,*70\r\n", Charset.defaultCharset())));
+
         int[] buf1 = {0x24,0x24,0x47,0x39,0x37,0x30,0x2c,0x33,0x36,0x39,0x38,0x30,0x30,0x30,0x31,0x33,0x34,0x36,0x30,0x36,0x37,0x34,0x2c,0x43,0x43,0x43,0x2c,0x02,0x01,0x34,0x00,0x5b,0x00,0x00,0x00,0x01,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xec,0x6f,0x59,0x1a,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xc9,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x01,0x00,0x03,0x00,0xa1,0x01,0xc2,0x04,0x00,0x00,0x00,0x00,0x01,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xee,0x6f,0x59,0x1a,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xca,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x01,0x00,0x03,0x00,0xa1,0x01,0xc2,0x04,0x00,0x00,0x00,0x00,0x01,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xef,0x6f,0x59,0x1a,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xcc,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x01,0x00,0x03,0x00,0xa1,0x01,0xc2,0x04,0x00,0x00,0x00,0x00,0x02,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xf7,0x6f,0x59,0x1a,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xd3,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa1,0x01,0xbf,0x04,0x00,0x00,0x00,0x00,0x0a,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xf7,0x6f,0x59,0x1a,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xd4,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x00,0x00,0x03,0x00,0xa1,0x01,0xbf,0x04,0x00,0x00,0x00,0x00,0x02,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xfb,0x6f,0x59,0x1a,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xd8,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa1,0x01,0x76,0x04,0x00,0x00,0x00,0x00,0x18,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xfc,0x6f,0x59,0x1a,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x00,0xed,0xb7,0x02,0x00,0xd9,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa1,0x01,0x76,0x04,0x00,0x00,0x00,0x00,0x19,0xb1,0xe2,0x04,0x03,0x23,0xb9,0xe0,0x00,0x0b,0x70,0x59,0x1a,0x01,0x05,0x15,0x06,0x00,0xbb,0x00,0x12,0x00,0x29,0x01,0xed,0xb7,0x02,0x00,0xe7,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x70,0x05,0x00,0x00,0x00,0x00,0x20,0x23,0xe3,0x04,0x03,0x1f,0xb9,0xe0,0x00,0x10,0x70,0x59,0x1a,0x01,0x06,0x15,0x07,0x00,0x27,0x01,0x0d,0x00,0x16,0x01,0xfc,0xb7,0x02,0x00,0xec,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x1f,0xe3,0x04,0x03,0x02,0xb9,0xe0,0x00,0x11,0x70,0x59,0x1a,0x01,0x06,0x15,0x09,0x00,0x19,0x01,0x0d,0x00,0x15,0x01,0xfe,0xb7,0x02,0x00,0xed,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x18,0xe3,0x04,0x03,0xdc,0xb8,0xe0,0x00,0x12,0x70,0x59,0x1a,0x01,0x06,0x15,0x0b,0x00,0x11,0x01,0x0d,0x00,0x15,0x01,0x00,0xb8,0x02,0x00,0xee,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x36,0xe3,0x04,0x03,0x45,0xb8,0xe0,0x00,0x15,0x70,0x59,0x1a,0x01,0x07,0x15,0x0b,0x00,0x2d,0x01,0x0b,0x00,0x13,0x01,0x0a,0xb8,0x02,0x00,0xf1,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x53,0xe3,0x04,0x03,0x26,0xb8,0xe0,0x00,0x16,0x70,0x59,0x1a,0x01,0x07,0x15,0x0d,0x00,0x41,0x01,0x0b,0x00,0x13,0x01,0x0e,0xb8,0x02,0x00,0xf2,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x70,0xe3,0x04,0x03,0x10,0xb8,0xe0,0x00,0x17,0x70,0x59,0x1a,0x01,0x07,0x15,0x0e,0x00,0x4f,0x01,0x0b,0x00,0x13,0x01,0x11,0xb8,0x02,0x00,0xf3,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x95,0xe3,0x04,0x03,0x06,0xb8,0xe0,0x00,0x18,0x70,0x59,0x1a,0x01,0x07,0x15,0x0d,0x00,0x5a,0x01,0x0b,0x00,0x14,0x01,0x15,0xb8,0x02,0x00,0xf4,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0xb3,0xe3,0x04,0x03,0x05,0xb8,0xe0,0x00,0x19,0x70,0x59,0x1a,0x01,0x07,0x15,0x0b,0x00,0x60,0x01,0x0b,0x00,0x14,0x01,0x18,0xb8,0x02,0x00,0xf5,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x83,0x05,0x00,0x00,0x00,0x00,0x20,0xcf,0xe3,0x04,0x03,0x08,0xb8,0xe0,0x00,0x1a,0x70,0x59,0x1a,0x01,0x07,0x15,0x0b,0x00,0x66,0x01,0x0b,0x00,0x14,0x01,0x1b,0xb8,0x02,0x00,0xf6,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x83,0x05,0x00,0x00,0x00,0x00,0x20,0xee,0xe3,0x04,0x03,0x0c,0xb8,0xe0,0x00,0x1b,0x70,0x59,0x1a,0x01,0x06,0x17,0x0b,0x00,0x04,0x00,0x0d,0x00,0x14,0x01,0x1e,0xb8,0x02,0x00,0xf7,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x83,0x05,0x00,0x00,0x00,0x00,0x2a,0x62,0x35,0x0d,0x0a};
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(buf1))));
         

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -39,7 +39,7 @@ public Gt06ProtocolDecoder(ServerManager serverManager) {
         
         if (serverManager != null) {
             Properties p = getServerManager().getProperties();
-            if (p.contains("gt06.timezone")) {
+            if (p.containsKey("gt06.timezone")) {
                 timeZone.setRawOffset(
                         Integer.valueOf(p.getProperty("gt06.timezone")) * 1000);
             }
@@ -130,7 +130,7 @@ protected Object decode(
             
         }
 
-        else if (deviceId != null && (
+        else if (/*deviceId != null && */(
                  type == MSG_GPS ||
                  type == MSG_GPS_LBS ||
                  type == MSG_GPS_LBS_STATUS ||

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -175,8 +175,8 @@ else if (sentence.startsWith("#B#")) {
                 }
             }
 
+            sendResponse(channel, "#AB#", messages.length);
             if (!positions.isEmpty()) {
-                sendResponse(channel, "#AB#", messages.length);
                 return positions;
             }
         }

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -81,7 +81,7 @@ protected Object decode(
         }
 
         // Validity
-        position.setValid(Integer.valueOf(parser.group(index++)) == 0);
+        position.setValid(Integer.valueOf(parser.group(index++)) < 20);
 
         // Position info
         position.setSpeed(Double.valueOf(parser.group(index++)));

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -30,6 +30,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "GPRMC,014623.000,A,4710.8260,N,1948.1220,E,0.11,105.40,111212,00,0000.0,A*49,F,,imei:357713002048962,"));
 
+        verify(decoder.decode(null, null,
+                "GPRMC,220828.678,A,5206.1446,N,02038.2403,,0,0,160912,,,E*23,L,imei:358948012501019,"));
+        
     }
 
 }

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -63,7 +63,7 @@ public MeiligaoProtocolDecoder(ServerManager serverManager) {
     private static final int MSG_HEARTBEAT = 0x0001;
     private static final int MSG_SERVER = 0x0002;
     private static final int MSG_LOGIN = 0x5000;
-    private static final int MSG_LOGIN_RESPONSE = 0x5000;
+    private static final int MSG_LOGIN_RESPONSE = 0x4000;
     
     private static final int MSG_POSITION = 0x9955;
     private static final int MSG_POSITION_LOGGED = 0x9016;

File: src/org/traccar/model/DatabaseDataManager.java
Patch:
@@ -212,7 +212,7 @@ public void updateLatestPosition(Position position, Long positionId ) throws SQL
             String query = queryUpdateLatestPositionTemplate;
             query = query.replace("_database_", this.getDeviceById(position.getDeviceId()).getDatabase());
             if (query != null) {
-                queryAddPosition = new NamedParameterStatement(globalConnection, query);
+                queryUpdateLatestPosition = new NamedParameterStatement(globalConnection, query);
             }
         }
 

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -47,7 +47,7 @@ public Tk103ProtocolDecoder(ServerManager serverManager) {
             "(\\d{2})(\\d{2})(\\d{2}),?" + // Time (HHMMSS)
             "(\\d+\\.?\\d+),?" +           // Course
             "([0-9a-fA-F]{8})?,?" +        // State
-            "(?:L([0-9a-fA-F]+))?");       // Milage
+            "(?:L([0-9a-fA-F]+))?\\)?");   // Milage
 
     @Override
     protected Object decode(

File: test/org/traccar/protocol/OrionProtocolDecoderTest.java
Patch:
@@ -16,7 +16,7 @@ public void testDecode() throws Exception {
         OrionProtocolDecoder decoder = new OrionProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
-        /*verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(
                 new int[] {0x50,0x57,0x00,0x41,0x07,0x36,0x7C,0x24,0x2B,0x44,0x09,0x01,0xAD,0xE9,0x7D,0x01,0x63,0x14,0x3B,0x07,0xB0,0x03,0x00,0x00,0x00,0x00,0x0D,0x04,0x19,0x17,0x38,0x2D,0x00,0x0B,0x01,0x01,0x00,0x05,0x11,0x00,0x00,0x00,0x00,0x06,0x82,0x05,0x00,0x00,0x00,0x8E,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x8C,0x03,0x00,0x84,0x03,0x00,0x85,0x03,0x00,0x09,0x0A,0x00,0x00,0x00,0x00,0x48,0x01,0x00,0x00,0x00,0x8A,0xFC}))));
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(
@@ -27,7 +27,7 @@ public void testDecode() throws Exception {
 
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(
                 new int[] {0x50,0x57,0x00,0x41,0x2a,0xc8,0x62,0x36,0x35,0x40,0x09,0x11,0x4d,0x20,0xe4,0x02,0x21,0x0f,0x1f,0x00,0xd2,0x04,0x00,0x00,0x00,0x00,0x0e,0x06,0x11,0x0d,0x34,0x14,0x00,0x0b,0x01,0x01,0x00,0x12,0x28,0x00,0x00,0x00,0x00,0x06,0x82,0x05,0x00,0x00,0x00,0x8e,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x03,0x00,0x84,0x03,0x00,0x85,0x03,0x00,0x03,0x06,0x7b,0x00,0x68,0x01,0x00,0x09,0x30}))));
-*/
+
     }
 
 }

File: src/org/traccar/protocol/Gt06FrameDecoder.java
Patch:
@@ -36,9 +36,9 @@ protected Object decode(
         int length = 2 + 2; // head and tail
         
         if (buf.getByte(buf.readerIndex()) == 0x78) {
-            length += 1 + buf.getByte(buf.readerIndex() + 2);
+            length += 1 + buf.getUnsignedByte(buf.readerIndex() + 2);
         } else {
-            length += 2 + buf.getShort(buf.readerIndex() + 2);
+            length += 2 + buf.getUnsignedShort(buf.readerIndex() + 2);
         }
         
         // Check length and return buffer

File: src/org/traccar/protocol/KhdProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ private String readSerialNumber(ChannelBuffer buf) {
         int b3 = buf.readUnsignedByte(); if (b3 > 0x80) b3 -= 0x80;
         int b4 = buf.readUnsignedByte();
         String serialNumber = String.format("%02d%02d%02d%02d", b1, b2, b3, b4);
-        return String.valueOf(Integer.valueOf(serialNumber));
+        return String.valueOf(Long.valueOf(serialNumber));
     }
 
     private static final int MSG_LOGIN = 0xB1;

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -39,7 +39,7 @@ public void testDecode() throws Exception {
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
                 new int[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x0c,0x01,0x06,0x00,0x00,0x00,0x25,0x23,0x46,0x4d,0x32,0x3d,0x32,0x36,0x32,0x30,0x33,0x32,0x37,0x36,0x31,0x37,0x32,0x31,0x33,0x39,0x36,0x2c,0x32,0x36,0x32,0x30,0x33,0x2c,0x30,0x37,0x2e,0x30,0x32,0x2e,0x30,0x35,0x0d,0x0a,0x01,0x00,0x00,0x9a,0x2e}))));
         
-        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
+        assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
                 new int[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0a,0x0c,0x02,0x06,0x00,0x00,0x00,0x02,0x0d,0x0a,0x02,0x00,0x00,0x6f,0x4e}))));
         
     }

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -36,7 +36,7 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
                 new int[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2b,0x08,0x01,0x00,0x00,0x01,0x40,0xd4,0xe3,0xec,0x6e,0x00,0x0c,0xc6,0x61,0xd0,0x16,0x74,0xa5,0xe0,0xff,0xfc,0x00,0x00,0x09,0x00,0x00,0x00,0x04,0x02,0x01,0x00,0xf0,0x00,0x02,0x42,0x32,0x23,0x18,0x00,0x00,0x00,0x00,0x01,0x00,0x00,0x7a,0x04}))));
         
-        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
+        assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
                 new int[] {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x2d,0x0c,0x01,0x06,0x00,0x00,0x00,0x25,0x23,0x46,0x4d,0x32,0x3d,0x32,0x36,0x32,0x30,0x33,0x32,0x37,0x36,0x31,0x37,0x32,0x31,0x33,0x39,0x36,0x2c,0x32,0x36,0x32,0x30,0x33,0x2c,0x30,0x37,0x2e,0x30,0x32,0x2e,0x30,0x35,0x0d,0x0a,0x01,0x00,0x00,0x9a,0x2e}))));
         
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(

File: test/org/traccar/protocol/Pt502ProtocolDecoderTest.java
Patch:
@@ -29,6 +29,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "$POS,353451000164,082405.000,A,1254.8501,N,10051.6752,E,0.00,237.99,160513,,,A/0000,0/0/55000//a71/"));
+        
+        verify(decoder.decode(null, null,
+                "\u00bf\u00fb\u0059\u006c\u0000$POS,012896008586486,154215.000,A,0118.0143,S,03646.9144,E,0.00,83.29,180714,,,A/0000,0/0/29200//644/"));
 
 
     }

File: src/org/traccar/protocol/GpsGateProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public GpsGateProtocolDecoder(ServerManager serverManager) {
      */
     private static final Pattern pattern = Pattern.compile(
             "\\$GPRMC," +
-            "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time (HHMMSS.SSS)
+            "(\\d{2})(\\d{2})(\\d{2})\\.?(\\d+)?," + // Time (HHMMSS.SSS)
             "([AV])," +                    // Validity
             "(\\d{2})(\\d{2}\\.\\d+)," +   // Latitude (DDMM.MMMM)
             "([NS])," +

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -36,7 +36,7 @@ public Xexun2ProtocolDecoder(ServerManager serverManager) {
     static private Pattern pattern = Pattern.compile(
             "[\r\n]*" +
             "(\\d+)," +                         // Serial
-            "(\\+?\\d+)?," +                    // Number
+            "([^,]+)?," +                       // Number
             "GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -38,6 +38,9 @@ public void testDecode() throws Exception {
 
         verify(decoder.decode(null, null,
                 "130725134142,,GPRMC,134142.591,A,3845.6283,N,00909.8876,W,2.08,287.33,250713,,,A*71,F,, imei:013227000526784,03,-50.7,L:3.69V,0,128,65337,268,03,177A,119F"));
+        
+        verify(decoder.decode(null, null,
+                "140602152533,TESCO_INFO,GPRMC,152533.000,A,5145.4275,N,00000.3448,E,0.00,0.00,020614,,,A*66,F,, imei:013227002781643,06,35.1,F:4.15V,1,135,38950,234,10,10B4,5235"));
 
     }
 

File: src/org/traccar/protocol/V680ProtocolDecoder.java
Patch:
@@ -60,7 +60,8 @@ protected Object decode(
             throws Exception {
 
         String sentence = (String) msg;
-        
+        sentence = sentence.trim();
+       
         // Detect device ID
         if (sentence.length() == 16) {
             String imei = sentence.substring(1, sentence.length());

File: src/org/traccar/protocol/V680ProtocolDecoder.java
Patch:
@@ -60,7 +60,8 @@ protected Object decode(
             throws Exception {
 
         String sentence = (String) msg;
-        
+        sentence = sentence.trim();
+       
         // Detect device ID
         if (sentence.length() == 16) {
             String imei = sentence.substring(1, sentence.length());

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -42,15 +42,15 @@ public WondexProtocolDecoder(ServerManager serverManager) {
             "(-?\\d+\\.\\d+)," +           // Latitude
             "(\\d+)," +                    // Speed
             "(\\d+)," +                    // Course
-            "(-?\\d+)," +                  // Altitude
+            "(-?\\d+\\.?\\d*)," +          // Altitude
             "(\\d+)," +                    // Satellites
             "(\\d+),?" +                   // Event
             "(?:(\\d+\\.\\d+)V,)?" +       // Battery
             "(\\d+\\.\\d+)?,?" +           // Milage
             "(\\d+)?,?" +                  // Input
             "(\\d+\\.\\d+)?,?" +           // ADC1
             "(\\d+\\.\\d+)?,?" +           // ADC2
-            "(\\d+)?");                    // Output
+            "(\\d+)?.*");                  // Output
 
     @Override
     protected Object decode(

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -29,6 +29,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "3997324533,20140326074908,28.797603,47.041635,0,48,0,6,2,3.90V,0"));
+        
+        verify(decoder.decode(null, null,
+                "2000000001,20140529213210,-63.179111,9.781493,0,0,54.0,8,2,0.0,0,0.01,0.01,0,0,0,0"));
 
     }
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -41,7 +41,7 @@ public Gps103ProtocolDecoder(ServerManager serverManager) {
             "(\\d{2}):?(\\d{2})(?:\\d{2})?," +  // Local Time
             "[^,]*," +
             "[FL]," +                           // F - full / L - low
-            "(\\d{2})(\\d{2})(\\d{2})\\.(\\d{3})," + // Time UTC (HHMMSS.SSS)
+            "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time UTC (HHMMSS.SSS)
             "([AV])," +                         // Validity
             "(\\d+)(\\d{2}\\.\\d+)," +          // Latitude (DDMM.MMMM)
             "([NS])," +

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -104,6 +104,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "imei:313009071131684,tracker,1403211928,,F,112817.000,A,0610.1133,N,00116.5840,E,0.00,,,0,0,0.0,0.0,"));
+        
+        verify(decoder.decode(null, null,
+                "imei:866989771979791,tracker,140527055653,,F,215653.00,A,5050.33113,N,00336.98783,E,0.066,0"));
 
     }
 

File: src/org/traccar/protocol/EelinkProtocolDecoder.java
Patch:
@@ -111,7 +111,7 @@ else if (type == MSG_GPS ||
             // Location
             position.setTime(new Date(buf.readUnsignedInt() * 1000));
             position.setLatitude(buf.readInt() / 1800000.0);
-            position.setLatitude(buf.readInt() / 1800000.0);
+            position.setLongitude(buf.readInt() / 1800000.0);
             position.setSpeed(buf.readUnsignedByte() * 0.539957);
             position.setCourse((double) buf.readUnsignedShort());
             position.setAltitude(0.0);
@@ -130,6 +130,7 @@ else if (type == MSG_GPS ||
                 extendedInfo.set("status", buf.readUnsignedByte());
             }
             
+            position.setExtendedInfo(extendedInfo.toString());
             return position;
         }
 

File: test/org/traccar/protocol/EelinkProtocolDecoderTest.java
Patch:
@@ -24,6 +24,9 @@ public void testDecode() throws Exception {
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
                 new int[] {0x67,0x67,0x07,0x00,0x88,0x00,0x10,0x50,0xE2,0x28,0x14,0x00,0xFF,0xFF,0xFF,0xFF,0x02,0x33,0x44,0x55,0x66,0x03,0x33,0x44,0x55,0x66,0x04,0x33,0x44,0x55,0x66,0x05,0xAA,0x00,0x00,0x00,0x07,0x33,0x44,0x55,0x66,0x0A,0x33,0x44,0x55,0x66,0x0B,0x33,0x44,0x55,0x66,0x0C,0x4E,0x20,0x00,0x00,0x0D,0xAA,0x00,0x00,0x00,0x0E,0x33,0x44,0x55,0x66,0x0F,0x33,0x44,0x55,0x66,0x10,0xAA,0xAA,0x00,0x00,0x11,0x33,0x44,0x55,0x66,0x1C,0x33,0x44,0x55,0x66,0x1F,0x33,0x44,0x55,0x66,0x21,0x33,0x44,0x55,0x66,0x42,0x33,0x44,0x55,0x66,0x46,0x33,0x44,0x55,0x66,0x4D,0x33,0x44,0x55,0x66,0x5C,0x33,0x44,0x55,0x66,0x5E,0x33,0x44,0x55,0x66,0x88,0x00,0x00,0x00,0x00,0x89,0x00,0x00,0x00,0x00,0x8A,0x00,0x00,0x00,0x00,0x8B,0x00,0x00,0x00,0x00}))));
         
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
+                new int[] {0x67,0x67,0x02,0x00,0x1b,0x03,0xc5,0x53,0x80,0x86,0xdf,0x01,0x90,0xc1,0x79,0x0b,0x34,0x82,0xdf,0x0f,0x01,0x57,0x02,0x08,0x00,0x01,0x3b,0xeb,0x00,0x34,0x24,0x01}))));
+        
     }
 
 }

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -117,7 +117,7 @@ private static void sendResponse(
     private String getMeiligaoServer(Channel channel) {
         
         if (getServerManager() != null &&
-            getServerManager().getProperties().contains("meiligao.server")) {
+            getServerManager().getProperties().containsKey("meiligao.server")) {
             return getServerManager().getProperties().getProperty("meiligao.server");
         } else {
             InetSocketAddress address = (InetSocketAddress) channel.getLocalAddress();

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -141,16 +141,16 @@ protected Object decode(
             case MSG_LOGIN:
                 response = ChannelBuffers.wrappedBuffer(new byte[] {0x01});
                 sendResponse(channel, id, MSG_LOGIN_RESPONSE, response);
-                break;
+                return null;
             case MSG_HEARTBEAT:
                 response = ChannelBuffers.wrappedBuffer(new byte[] {0x01});
                 sendResponse(channel, id, MSG_HEARTBEAT, response);
-                break;
+                return null;
             case MSG_SERVER:
                 response = ChannelBuffers.copiedBuffer(
                         getMeiligaoServer(channel), Charset.defaultCharset());
                 sendResponse(channel, id, MSG_SERVER, response);
-                break;
+                return null;
             case MSG_POSITION:
             case MSG_POSITION_LOGGED:
             case MSG_ALARM:

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -59,6 +59,9 @@ public void testDecode() throws Exception {
         
         int[] buf15 = {0x24,0x24,0x00,0x50,0x35,0x78,0x42,0x51,0xff,0xff,0xff,0x99,0x55,0x30,0x30,0x30,0x30,0x33,0x36,0x2e,0x39,0x38,0x31,0x2c,0x56,0x2c,0x30,0x39,0x33,0x31,0x2e,0x33,0x34,0x37,0x31,0x2c,0x4e,0x2c,0x30,0x36,0x39,0x31,0x31,0x2e,0x38,0x34,0x31,0x32,0x2c,0x57,0x2c,0x2c,0x2c,0x32,0x38,0x30,0x31,0x31,0x34,0x2c,0x2c,0x2c,0x4e,0x2a,0x36,0x35,0x7c,0x7c,0x31,0x36,0x38,0x7c,0x32,0x30,0x30,0x30,0x5e,0x42,0x0d,0x0a};
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf15))));
+
+        //assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(
+        //        new int[] {0x24,0x24,0x00,0x11,0x30,0x06,0x00,0x00,0x00,0x46,0x09,0x00,0x02,0x84,0x9a,0x0d,0x0a}))));
         
     }
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -524,6 +524,7 @@ private void initMeitrackServer(String protocol) throws SQLException {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
                     pipeline.addLast("frameDecoder", new MeitrackFrameDecoder());
+                    pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new MeitrackProtocolDecoder(ServerManager.this));
                 }
             };

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -65,7 +65,7 @@ public MeitrackProtocolDecoder(ServerManager serverManager) {
             "(\\p{XDigit}+)?\\|" +              // ADC3
             "(\\p{XDigit}+)\\|" +               // Battery
             "(\\p{XDigit}+)," +                 // Power
-            ".*"); // TODO: parse other stuff
+            ".*(\r\n)?");
 
     private Position decodeRegularMessage(ChannelBuffer buf) {
 

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -46,6 +46,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "$$E150,013777001165479,AAA,35,10.296601,123.872115,140501161505,A,4,22,1,170,1.4,77,39097,393563,515|3|A0CC|ED96,0000,0008|0003|0000|09D5|0000,,,1,0009*1E", Charset.defaultCharset())));
 
+        verify(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
+                "$$B140,013777001293701,AAA,35,-7.266760,112.743550,140521095314,A,3,22,0,275,2.7,45,1984,8059,510|1|3504|EBFE,0000,0000|0000|0000|0914|0002,,*F9\r\n", Charset.defaultCharset())));
+
         int[] buf1 = {0x24,0x24,0x47,0x39,0x37,0x30,0x2c,0x33,0x36,0x39,0x38,0x30,0x30,0x30,0x31,0x33,0x34,0x36,0x30,0x36,0x37,0x34,0x2c,0x43,0x43,0x43,0x2c,0x02,0x01,0x34,0x00,0x5b,0x00,0x00,0x00,0x01,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xec,0x6f,0x59,0x1a,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xc9,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x01,0x00,0x03,0x00,0xa1,0x01,0xc2,0x04,0x00,0x00,0x00,0x00,0x01,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xee,0x6f,0x59,0x1a,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xca,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x01,0x00,0x03,0x00,0xa1,0x01,0xc2,0x04,0x00,0x00,0x00,0x00,0x01,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xef,0x6f,0x59,0x1a,0x00,0x00,0x13,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xcc,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x01,0x00,0x03,0x00,0xa1,0x01,0xc2,0x04,0x00,0x00,0x00,0x00,0x02,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xf7,0x6f,0x59,0x1a,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xd3,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa1,0x01,0xbf,0x04,0x00,0x00,0x00,0x00,0x0a,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xf7,0x6f,0x59,0x1a,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xd4,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x00,0x00,0x03,0x00,0xa1,0x01,0xbf,0x04,0x00,0x00,0x00,0x00,0x02,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xfb,0x6f,0x59,0x1a,0x00,0x00,0x16,0x00,0x00,0x00,0x00,0x0c,0x00,0x18,0x01,0xed,0xb7,0x02,0x00,0xd8,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa1,0x01,0x76,0x04,0x00,0x00,0x00,0x00,0x18,0x0c,0xe3,0x04,0x03,0x5d,0xb9,0xe0,0x00,0xfc,0x6f,0x59,0x1a,0x00,0x00,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x8c,0x00,0xed,0xb7,0x02,0x00,0xd9,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa1,0x01,0x76,0x04,0x00,0x00,0x00,0x00,0x19,0xb1,0xe2,0x04,0x03,0x23,0xb9,0xe0,0x00,0x0b,0x70,0x59,0x1a,0x01,0x05,0x15,0x06,0x00,0xbb,0x00,0x12,0x00,0x29,0x01,0xed,0xb7,0x02,0x00,0xe7,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x70,0x05,0x00,0x00,0x00,0x00,0x20,0x23,0xe3,0x04,0x03,0x1f,0xb9,0xe0,0x00,0x10,0x70,0x59,0x1a,0x01,0x06,0x15,0x07,0x00,0x27,0x01,0x0d,0x00,0x16,0x01,0xfc,0xb7,0x02,0x00,0xec,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x1f,0xe3,0x04,0x03,0x02,0xb9,0xe0,0x00,0x11,0x70,0x59,0x1a,0x01,0x06,0x15,0x09,0x00,0x19,0x01,0x0d,0x00,0x15,0x01,0xfe,0xb7,0x02,0x00,0xed,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x18,0xe3,0x04,0x03,0xdc,0xb8,0xe0,0x00,0x12,0x70,0x59,0x1a,0x01,0x06,0x15,0x0b,0x00,0x11,0x01,0x0d,0x00,0x15,0x01,0x00,0xb8,0x02,0x00,0xee,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x36,0xe3,0x04,0x03,0x45,0xb8,0xe0,0x00,0x15,0x70,0x59,0x1a,0x01,0x07,0x15,0x0b,0x00,0x2d,0x01,0x0b,0x00,0x13,0x01,0x0a,0xb8,0x02,0x00,0xf1,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x53,0xe3,0x04,0x03,0x26,0xb8,0xe0,0x00,0x16,0x70,0x59,0x1a,0x01,0x07,0x15,0x0d,0x00,0x41,0x01,0x0b,0x00,0x13,0x01,0x0e,0xb8,0x02,0x00,0xf2,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x70,0xe3,0x04,0x03,0x10,0xb8,0xe0,0x00,0x17,0x70,0x59,0x1a,0x01,0x07,0x15,0x0e,0x00,0x4f,0x01,0x0b,0x00,0x13,0x01,0x11,0xb8,0x02,0x00,0xf3,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0x95,0xe3,0x04,0x03,0x06,0xb8,0xe0,0x00,0x18,0x70,0x59,0x1a,0x01,0x07,0x15,0x0d,0x00,0x5a,0x01,0x0b,0x00,0x14,0x01,0x15,0xb8,0x02,0x00,0xf4,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x80,0x05,0x00,0x00,0x00,0x00,0x20,0xb3,0xe3,0x04,0x03,0x05,0xb8,0xe0,0x00,0x19,0x70,0x59,0x1a,0x01,0x07,0x15,0x0b,0x00,0x60,0x01,0x0b,0x00,0x14,0x01,0x18,0xb8,0x02,0x00,0xf5,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x83,0x05,0x00,0x00,0x00,0x00,0x20,0xcf,0xe3,0x04,0x03,0x08,0xb8,0xe0,0x00,0x1a,0x70,0x59,0x1a,0x01,0x07,0x15,0x0b,0x00,0x66,0x01,0x0b,0x00,0x14,0x01,0x1b,0xb8,0x02,0x00,0xf6,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x83,0x05,0x00,0x00,0x00,0x00,0x20,0xee,0xe3,0x04,0x03,0x0c,0xb8,0xe0,0x00,0x1b,0x70,0x59,0x1a,0x01,0x06,0x17,0x0b,0x00,0x04,0x00,0x0d,0x00,0x14,0x01,0x1e,0xb8,0x02,0x00,0xf7,0x6d,0x01,0x00,0xe6,0x00,0x01,0x00,0x48,0x38,0x57,0x65,0x02,0x00,0x03,0x00,0xa2,0x01,0x83,0x05,0x00,0x00,0x00,0x00,0x2a,0x62,0x35,0x0d,0x0a};
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(buf1))));
         

File: src/org/traccar/protocol/WialonProtocolDecoder.java
Patch:
@@ -123,7 +123,7 @@ else if ((sentence.startsWith("#SD#") || sentence.startsWith("#D#")) && deviceId
             position.setLongitude(longitude);
 
             // Speed
-            position.setSpeed(Double.valueOf(parser.group(index++)));
+            position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);
 
             // Course
             position.setCourse(Double.valueOf(parser.group(index++)));

File: src/org/traccar/protocol/CarTrackProtocolDecoder.java
Patch:
@@ -110,7 +110,7 @@ protected Object decode(
 
         // Speed
         String speed = parser.group(index++);
-        if(speed != null){
+        if (speed != null) {
             position.setSpeed(Double.valueOf(speed));
         } else {
             position.setSpeed(0.0);

File: test/org/traccar/protocol/SyrusProtocolDecoderTest.java
Patch:
@@ -25,7 +25,7 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 ">REV131756153215+3359479-0075299001031332;VO=10568798;IO=310;SV=10;BL=4190;CV09=0;AD=0;AL=+47;ID=356612021059680"));
         
-        verify(decoder.decode(null, null,
+        assertNotNull(decoder.decode(null, null,
                 ">RPV02138+4555512-0735478000000032;ID=1005;*76<"));
 
     }

File: src/org/traccar/ServerManager.java
Patch:
@@ -559,7 +559,7 @@ private void initGt06Server(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(256, 2, 1, 2, 0));
+                    pipeline.addLast("frameDecoder", new Gt06FrameDecoder());
                     pipeline.addLast("objectDecoder", new Gt06ProtocolDecoder(ServerManager.this));
                 }
             });

File: test/org/traccar/protocol/SyrusProtocolDecoderTest.java
Patch:
@@ -1,5 +1,6 @@
 package org.traccar.protocol;
 
+import static org.junit.Assert.assertNotNull;
 import org.traccar.helper.TestDataManager;
 import static org.traccar.helper.DecoderVerifier.verify;
 import org.junit.Test;
@@ -12,7 +13,7 @@ public void testDecode() throws Exception {
         SyrusProtocolDecoder decoder = new SyrusProtocolDecoder(null, false);
         decoder.setDataManager(new TestDataManager());
 
-        verify(decoder.decode(null, null,
+        assertNotNull(decoder.decode(null, null,
                 ">RPV00000+3739438-1220384601512612;ID=1234;*7F"));
 
         verify(decoder.decode(null, null,

File: src/org/traccar/protocol/SyrusProtocolDecoder.java
Patch:
@@ -77,6 +77,8 @@ private Date getTime(long seconds) {
         
         if (diff > 12 * 60 * 60 * 1000) {
             millis += 24 * 60 * 60 * 1000;
+        } else if (diff < -12 * 60 * 60 * 1000) {
+            millis -= 24 * 60 * 60 * 1000;
         }
 
         return new Date(millis);

File: src/org/traccar/protocol/SyrusProtocolDecoder.java
Patch:
@@ -118,6 +118,8 @@ protected Object decode(
             if (sendResponse && channel != null) {
                 channel.write(id);
             }
+        } else {
+            return null;
         }
 
         // Parse message

File: test/org/traccar/protocol/NoranProtocolDecoderTest.java
Patch:
@@ -17,10 +17,10 @@ public void testDecode() throws Exception {
         decoder.setDataManager(new TestDataManager());
 
         int[] buf1 = {0x0f,0x00,0x00,0x00,0x4e,0x52,0x30,0x39,0x46,0x30,0x34,0x31,0x35,0x35,0x00};
-        assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(buf1))));
+        assertNull(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(buf1))));
         
         int[] buf2 = {0x22,0x00,0x08,0x00,0x01,0x0c,0x00,0x8a,0x00,0x7e,0x9d,0xaa,0x42,0x31,0x7b,0xdd,0x41,0xa7,0xf3,0xe2,0x38,0x4e,0x52,0x30,0x39,0x46,0x30,0x34,0x31,0x35,0x35,0x00,0x00,0x00};
-        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(buf2))));
+        verify(decoder.decode(null, null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, ChannelBufferTools.convertArray(buf2))));
 
     }
 

File: src/org/traccar/geocode/GoogleReverseGeocoder.java
Patch:
@@ -16,6 +16,7 @@
 package org.traccar.geocode;
 
 import java.io.BufferedReader;
+import java.io.IOException;
 import java.io.InputStreamReader;
 import java.net.URL;
 import java.net.URLConnection;
@@ -49,7 +50,7 @@ public String getAddress(double latitude, double longitude) {
 
             reader.close();
 
-        } catch(Exception error) {
+        } catch(IOException error) {
             Log.warning(error);
         }
 

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -61,6 +61,7 @@ private String readImei(ChannelBuffer buf) {
     private static final int MSG_LBS_EXTEND = 0x18;
     private static final int MSG_LBS_STATUS = 0x19;
     private static final int MSG_GPS_PHONE = 0x1A;
+    private static final int MSG_GPS_LBS_EXTEND = 0x1E;
 
     private static void sendResponse(Channel channel, int type, int index) {
         if (channel != null) {
@@ -116,7 +117,8 @@ protected Object decode(
         else if (type == MSG_GPS ||
                  type == MSG_GPS_LBS ||
                  type == MSG_GPS_LBS_STATUS ||
-                 type == MSG_GPS_PHONE) {
+                 type == MSG_GPS_PHONE ||
+                 type == MSG_GPS_LBS_EXTEND) {
 
             // Create new position
             Position position = new Position();

File: test/org/traccar/protocol/Gt06ProtocolDecoderTest.java
Patch:
@@ -45,6 +45,9 @@ public void testDecode() throws Exception {
         int[] buf10 = {0x78,0x78,0x19,0x10,0x0e,0x01,0x09,0x03,0x23,0x0e,0xc8,0x03,0xae,0x32,0xa6,0x06,0x53,0xcd,0xed,0x00,0x18,0x00,0x00,0x02,0x00,0x72,0xfe,0xb7,0x0d,0x0a};
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf10))));
 
+        int[] buf11 = {0x78,0x78,0x47,0x1e,0x0e,0x03,0x11,0x0b,0x05,0x11,0xc5,0x01,0xc6,0x64,0xfd,0x07,0x4d,0xb7,0x3f,0x02,0x18,0xa6,0x02,0xe0,0x03,0x43,0x3a,0x00,0x2f,0xed,0x40,0x43,0x3a,0x00,0x56,0xe1,0x4e,0x43,0x3a,0x00,0x56,0x10,0x4e,0x43,0x3a,0x00,0x56,0xfd,0x53,0x43,0x3a,0x00,0x2e,0xed,0x55,0x43,0x3a,0x00,0x7e,0x4b,0x57,0x43,0x3a,0x00,0x2e,0xe2,0x5a,0xff,0x00,0x02,0x01,0x20,0xf6,0x72,0x0d,0x0a};
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf11))));
+
     }
 
 }

File: test/org/traccar/protocol/Stl060ProtocolDecoderTest.java
Patch:
@@ -13,7 +13,7 @@ public void testDecode() throws Exception {
         decoder.setDataManager(new TestDataManager());
 
         verify(decoder.decode(null, null,
-                "$1,357804047969310,D001,AP29AW0963,01/01/13,13:24:47,1723.9582N,07834.0945E,00100,010,0,0,0,0,0,A,"));
+                "$1,357804048043099,D001,AP29AW0963,23/02/14,14:06:54,17248488N,078342226E,0.08,193.12,1,1,1,1,1,A"));
 
     }
 

File: src/org/traccar/protocol/IntellitracProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2013 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -41,7 +41,7 @@ public IntellitracProtocolDecoder(ServerManager serverManager) {
             "(-?\\d+\\.\\d+)," +           // Latitude
             "(\\d+\\.?\\d*)," +            // Speed
             "(\\d+\\.?\\d*)," +            // Course
-            "(\\d+\\.?\\d*)," +            // Altitude
+            "(-?\\d+\\.?\\d*)," +          // Altitude
             "(\\d+)," +                    // Satellites
             "(\\d+)," +                    // Report Identifier
             "(\\d+)," +                    // Input

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -48,8 +48,8 @@ public MeitrackProtocolDecoder(ServerManager serverManager) {
             "(\\d+)," +                         // GSM Signal
             "(\\d+)," +                         // Speed
             "(\\d+)," +                         // Course
-            "(\\d+\\.?\\d*)," +                   // HDOP
-            "(\\d+)," +                         // Altitude
+            "(\\d+\\.?\\d*)," +                 // HDOP
+            "(-?\\d+)," +                       // Altitude
             "(\\d+)," +                         // Milage
             ".*"); // TODO: parse other stuff
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2013 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -33,7 +33,7 @@ public WondexProtocolDecoder(ServerManager serverManager) {
         super(serverManager);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "[^\\d]*" +                    // Header
             "(\\d+)," +                    // Device Identifier
             "(\\d{4})(\\d{2})(\\d{2})" +   // Date (YYYYMMDD)
@@ -42,7 +42,7 @@ public WondexProtocolDecoder(ServerManager serverManager) {
             "(-?\\d+\\.\\d+)," +           // Latitude
             "(\\d+)," +                    // Speed
             "(\\d+)," +                    // Course
-            "(\\d+)," +                    // Altitude
+            "(-?\\d+)," +                  // Altitude
             "(\\d+)," +                    // Satellites
             "(\\d+),?" +                   // Event
             "(\\d+\\.\\d+)?,?" +           // Milage

File: test/org/traccar/protocol/IntellitracProtocolDecoderTest.java
Patch:
@@ -18,6 +18,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "1010000002,20030217132813,121.646060,25.061725,20,157,133,7,0,11,15,0.096,0.000"));
 
+        verify(decoder.decode(null, null,
+                "1010000002,20030217132813,121.646060,25.061725,20,157,-133,7,0,11,15,0.096,0.000"));
+
         verify(decoder.decode(null, null,
                 "1001070919,20130405084206,37.903730,48.011377,0,0,235,10,2,2,0,20.211,0.153"));
         

File: test/org/traccar/protocol/MeitrackProtocolDecoderTest.java
Patch:
@@ -14,6 +14,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "$$X138,862170010187175,AAA,35,-29.960365,-51.655455,130507201625,A,8,9,0,107,0.9,7,169322,126582,724|6|0547|132B,0000,0009|000A||0278|0000,*BE"));
+        
+        verify(decoder.decode(null, null,
+                "$$X138,862170010187175,AAA,35,-29.960365,-51.655455,130507201625,A,8,9,0,107,0.9,-7,169322,126582,724|6|0547|132B,0000,0009|000A||0278|0000,*BE"));
 
         verify(decoder.decode(null, null,
                 "$$]138,012896000475498,AAA,35,-6.138255,106.910545,121205074600,A,5,18,0,0,0,49,3800,24826,510|10|0081|4F4F,0000,0011|0012|0010|0963|0000,,*94"));

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -24,6 +24,9 @@ public void testDecode() throws Exception {
         verify(decoder.decode(null, null,
                 "1044989601,20130322172647,13.572583,52.401070,22,204,49,0,2"));
 
+        verify(decoder.decode(null, null,
+                "1044989601,20130322172647,13.572583,52.401070,22,204,-49,0,2"));
+
     }
 
 }

File: test/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -17,6 +17,9 @@ public void testDecode() throws Exception {
 
         verify(decoder.decode(null, null,
                 "STX,GerAL22,$GPRMC,000051.000,A,3637.079590,S,6416.2148,W,1.72,332.98,010109,,,A*52,L,,imei:861785000249353,03,275.3,Battery=68%,,1,722,07,0515,1413;41"));
+        
+        verify(decoder.decode(null, null,
+                "STX,,$GPRMC,001339.000,A,4710.85395,N,02733.58209,E,1.65,238.00,010109,,,A*67,L,Help,imei:013227009737796,0/8,137.1,Battery=100%,,0,226,01,2B9B,BBBF;8D"));
 
         verify(decoder.decode(null, null,
                 "STX,102110830074542,$GPRMC,114229.000,A,2238.2024,N,11401.9619,E,0.00,0.00,310811,,,A*64,F,LowBattery,imei:012207005553885,03,113.1,Battery=24%,,1,460,01,2531,647E;57"));

File: src/org/traccar/protocol/RuptelaProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2013 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -45,7 +45,7 @@ protected Object decode(ChannelHandlerContext ctx, Channel channel, Object msg)
         buf.readUnsignedShort(); // data length
 
         // Identify device
-        String imei = String.valueOf(buf.readLong());
+        String imei = String.format("%015d", buf.readLong());
         long deviceId;
         try {
             deviceId = getDataManager().getDeviceByImei(imei).getId();

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -108,7 +108,7 @@ protected Object decode(
         extendedInfo.set("gsm", parser.group(index++));
 
         // Speed
-        position.setSpeed(Double.valueOf(parser.group(index++)));
+        position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);
 
         // Course
         position.setCourse(Double.valueOf(parser.group(index++)));

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -78,7 +78,7 @@ public T55ProtocolDecoder(ServerManager serverManager) {
             "(\\d+\\.\\d+)," +             // Speed
             "(\\d+\\.\\d+)," +             // Course
             "(-?\\d+\\.\\d+)," +           // Altitude
-            "(\\d+\\.\\d+)," +             // Battery
+            "(\\d+\\.?\\d*)," +            // Battery
             ".+");
     
     @Override

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -37,6 +37,9 @@ public void testDecode() throws Exception {
         
         verify(decoder.decode(null, null,
                 "$TRCCR,20140101001122.333,V,60.0,-100.0,1.1,2.2,3.3,4.4,*00"));
+        
+        verify(decoder.decode(null, null,
+                "$TRCCR,20140111000000.000,A,60.000000,60.000000,0.00,0.00,0.00,50,*3a"));
 
     }
 

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2012 - 2013 Anton Tananaev (anton.tananaev@gmail.com)
+ * Copyright 2012 - 2014 Anton Tananaev (anton.tananaev@gmail.com)
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -40,7 +40,7 @@ private static double readCoordinate(ChannelBuffer buf, boolean lon) {
         
         int degrees = ChannelBufferTools.readHexInteger(buf, 2);
         if (lon) {
-            degrees = degrees * 10 + (buf.getByte(buf.readerIndex()) >> 4);
+            degrees = degrees * 10 + (buf.getUnsignedByte(buf.readerIndex()) >> 4);
         }
         
         double result = 0;
@@ -154,7 +154,7 @@ private Position decodeText(String sentence) {
         time.set(Calendar.SECOND, Integer.valueOf(parser.group(index++)));
 
         // Validity
-        position.setValid(parser.group(index++).compareTo("A") == 0 ? true : false);
+        position.setValid(parser.group(index++).compareTo("A") == 0);
 
         // Latitude
         Double latitude = Double.valueOf(parser.group(index++));

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -82,6 +82,9 @@ public void testDecode() throws Exception {
         int[] buf3 = {0x24,0x10,0x30,0x73,0x10,0x01,0x05,0x03,0x16,0x22,0x09,0x02,0x22,0x12,0x87,0x45,0x00,0x11,0x34,0x66,0x57,0x4C,0x01,0x40,0x28,0xff,0xff,0xfb,0xff,0xff,0x00,0x00};
         verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf3))));
         
+        int[] buf4 = {0x24,0x41,0x09,0x00,0x13,0x45,0x08,0x31,0x25,0x04,0x01,0x14,0x50,0x47,0x88,0x80,0x00,0x00,0x85,0x54,0x65,0x0e,0x00,0x00,0x00,0xff,0xff,0xf9,0xff,0xff,0x00,0x10,0x06,0x00,0x00,0x00,0x00,0x01,0x06,0x02,0x02,0x99,0x10,0x9c,0x01};
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf4))));
+        
     }
 
 }

File: src/org/traccar/helper/DriverDelegate.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class DriverDelegate implements Driver {
     
-    private Driver driver;
+    private final Driver driver;
     
     public DriverDelegate(Driver driver) {
         this.driver = driver;
@@ -64,9 +64,8 @@ public boolean jdbcCompliant() {
         return driver.jdbcCompliant();
     }
 
-    @Override
     public Logger getParentLogger() throws SQLFeatureNotSupportedException {
-        return driver.getParentLogger();
+        throw new SQLFeatureNotSupportedException();
     }
     
 }

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -53,6 +53,9 @@ public void testDecode() throws Exception {
 
         int[] buf12 = {0x67,0x62,0x20,0x10,0x05,0x35,0x62,0xaa,0x00,0x00,0x01,0x00,0x01,0xae,0x4f,0x00,0x00,0x00,0x07,0x80,0x00,0x00,0x00,0x30,0x39,0x35,0x31,0x35,0x36,0x2e,0x30,0x30,0x30,0x2c,0x41,0x2c,0x32,0x36,0x32,0x33,0x2e,0x38,0x39,0x36,0x36,0x2c,0x4e,0x2c,0x30,0x35,0x30,0x30,0x35,0x2e,0x30,0x36,0x38,0x30,0x2c,0x45,0x2c,0x32,0x34,0x2e,0x35,0x2c,0x32,0x34,0x31,0x2e,0x30,0x2c,0x32,0x32,0x31,0x30,0x31,0x33,0x59,0x9c,0x0d,0x0a};
         assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf12))));
+
+        int[] buf13 = {0x10,0x07,0xff,0xff,0xff,0xff,0xff,0x99,0x55,0x31,0x36,0x32,0x33,0x30,0x39,0x2e,0x30,0x35,0x34,0x2c,0x56,0x2c,0x30,0x39,0x33,0x31,0x2e,0x39,0x31,0x36,0x33,0x2c,0x4e,0x2c,0x30,0x36,0x39,0x31,0x31,0x2e,0x38,0x32,0x33,0x33,0x2c,0x57,0x2c,0x2c,0x2c,0x32,0x35,0x31,0x31,0x31,0x33,0x2c,0x2c,0x2c,0x4e,0x2a,0x36,0x43,0x7c,0x7c,0x31,0x35,0x38,0x7c,0x30,0x30,0x30,0x30,0x9c,0xc6,0x0d,0x0a};
+        verify(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf13))));
         
     }
 

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -34,7 +34,7 @@ public XexunProtocolDecoder(ServerManager serverManager) {
         super(serverManager);
     }
 
-    static private Pattern pattern = Pattern.compile(
+    private static final Pattern pattern = Pattern.compile(
             "GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2}).(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity
@@ -45,7 +45,7 @@ public XexunProtocolDecoder(ServerManager serverManager) {
             "(\\d+\\.\\d+)," +                  // Speed
             "(\\d+\\.\\d+)?," +                 // Course
             "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
-            ".*imei:" +
+            ".*\r?\n?.*imei:" +
             "(\\d+),");                         // IMEI
 
     @Override

File: src/org/traccar/protocol/H02FrameDecoder.java
Patch:
@@ -36,7 +36,9 @@ protected Object decode(
 
         while (!marker.equals("*") && !marker.equals("$") && buf.readableBytes() > 0) {
             buf.skipBytes(1);
-            marker = buf.toString(buf.readerIndex(), 1, Charset.defaultCharset());
+            if (buf.readableBytes() > 0) {
+                marker = buf.toString(buf.readerIndex(), 1, Charset.defaultCharset());
+            }
         }
         
         if (marker.equals("*")) {

File: src/org/traccar/protocol/TotemFrameDecoder.java
Patch:
@@ -40,7 +40,7 @@ protected Object decode(
         }
 
         // Read message
-        int length = Integer.parseInt(buf.toString(2, 2, Charset.defaultCharset()), 16);
+        int length = Integer.parseInt(buf.toString(buf.readerIndex() + 2, 2, Charset.defaultCharset()), 16);
         if (length <= buf.readableBytes()) {
             return buf.readBytes(length);
         }

File: src/org/traccar/protocol/TotemFrameDecoder.java
Patch:
@@ -41,7 +41,7 @@ protected Object decode(
 
         // Read message
         int length = Integer.parseInt(buf.toString(2, 2, Charset.defaultCharset()), 16);
-        if (length >= buf.readableBytes()) {
+        if (length <= buf.readableBytes()) {
             return buf.readBytes(length);
         }
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -1024,7 +1024,9 @@ private void initSanavServer(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
+                    byte delimiter[] = { (byte) '*' };
+                    pipeline.addLast("frameDecoder",
+                            new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("objectDecoder", new SanavProtocolDecoder(ServerManager.this));
                 }

File: src/org/traccar/protocol/AtrackFrameDecoder.java
Patch:
@@ -25,7 +25,7 @@ public class AtrackFrameDecoder extends LengthFieldBasedFrameDecoder {
     private static final int KEEPALIVE_LENGTH = 12;
     
     public AtrackFrameDecoder() {
-        super(1024, 4, 2, 6, 0);
+        super(1024, 4, 2);
     }
     
     @Override

File: src/org/traccar/protocol/AtrackProtocolDecoder.java
Patch:
@@ -69,6 +69,7 @@ protected Object decode(
             position.setDeviceId(getDataManager().getDeviceByImei(id).getId());
         } catch(Exception error) {
             Log.warning("Unknown device - " + id);
+            return null;
         }
 
         // Date and time

File: src/org/traccar/protocol/AtrackFrameDecoder.java
Patch:
@@ -35,7 +35,7 @@ protected Object decode(
             ChannelBuffer buf) throws Exception {
         
         // Keep alive message
-        if (buf.readableBytes() >= KEEPALIVE_LENGTH ||
+        if (buf.readableBytes() >= KEEPALIVE_LENGTH &&
             buf.getUnsignedShort(buf.readerIndex()) == 0xfe02) {
             channel.write(buf.readBytes(KEEPALIVE_LENGTH));
         }

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -17,6 +17,9 @@ public void testDecode() throws Exception {
         //int[] buf1 = {0xfe,0x02,0x00,0x01,0x41,0x04,0xd8,0xf1,0x96,0x82,0x00,0x01};
         //assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
 
+        int[] buf2 = {0x40,0x50,0x99,0x3f,0x00,0x5c,0x00,0x02,0x00,0x01,0x41,0x04,0xd8,0xf1,0x96,0x82,0x52,0x56,0x66,0xc2,0x52,0x56,0x8c,0x3c,0x52,0x56,0x8c,0x63,0xff,0xc8,0x33,0x84,0x02,0x69,0x88,0x85,0x00,0x00,0x02,0x00,0x00,0x09,0xcf,0x03,0xde,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xd0,0x07,0xd0,0x00,0x52,0x56,0x66,0xc2,0x52,0x56,0x8c,0x5a,0x52,0x56,0x8c,0x63,0xff,0xc8,0x33,0x84,0x02,0x69,0x88,0x85,0x00,0x00,0x02,0x00,0x00,0x09,0xcf,0x03,0xde,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xd0,0x07,0xd0,0x00};
+        assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf2))));
+        
     }
 
 }

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -14,8 +14,8 @@ public void testDecode() throws Exception {
         AtrackProtocolDecoder decoder = new AtrackProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
-        int[] buf1 = {0xfe,0x02,0x00,0x01,0x41,0x04,0xd8,0xf1,0x96,0x82,0x00,0x01};
-        assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
+        //int[] buf1 = {0xfe,0x02,0x00,0x01,0x41,0x04,0xd8,0xf1,0x96,0x82,0x00,0x01};
+        //assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
 
     }
 

File: test/org/traccar/protocol/AtrackProtocolDecoderTest.java
Patch:
@@ -15,7 +15,7 @@ public void testDecode() throws Exception {
         decoder.setDataManager(new TestDataManager());
 
         int[] buf1 = {0xfe,0x02,0x00,0x01,0x41,0x04,0xd8,0xf1,0x96,0x82,0x00,0x01};
-        assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
+        assertNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ChannelBufferTools.convertArray(buf1))));
 
     }
 

File: src/org/traccar/protocol/MegastekProtocolDecoder.java
Patch:
@@ -203,7 +203,7 @@ protected Object decode(
                 try {
                     position.setDeviceId(getDataManager().getDeviceByImei(id).getId());
                 } catch(Exception secondError) {
-                    Log.warning("Unknown device - " + imei + "(id - " + id + ")");
+                    Log.warning("Unknown device - " + imei + " (id - " + id + ")");
                     return null;
                 }
             }

File: src/org/traccar/protocol/GlobalSatProtocolDecoder.java
Patch:
@@ -187,7 +187,7 @@ private Position decodeOriginal(Channel channel, String sentence) {
             "(\\d{2})(\\d{2}\\.\\d+)," +   // Latitude (DDMM.MMMM)
             "(\\d+\\.?\\d*)," +            // Altitude
             "(\\d+\\.?\\d*)," +            // Speed
-            "(\\d+)," +                    // Course
+            "(\\d+\\.?\\d*)," +            // Course
             "(\\d+)," +                    // Satellites
             "(\\d+\\.?\\d*)");             // HDOP
     

File: src/org/traccar/http/WebServer.java
Patch:
@@ -55,7 +55,7 @@ private void initDataSource(Properties properties) {
                 
                 if (clazz != null) {
                     DataSource ds = (DataSource) clazz.newInstance();
-                    clazz.getMethod("setUrl", String.class).invoke(ds, properties.getProperty("database.url"));
+                    clazz.getMethod("setURL", String.class).invoke(ds, properties.getProperty("database.url"));
                     clazz.getMethod("setUser", String.class).invoke(ds, properties.getProperty("database.user"));
                     clazz.getMethod("setPassword", String.class).invoke(ds, properties.getProperty("database.password"));
 

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -20,6 +20,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "*HQ,3800008786,V1,062507,V,3048.2437,N,03058.5617,E,000.00,000,250413,FFFFFBFF#", Charset.defaultCharset())));
+        
+        assertNotNull(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
+                "*HQ,4300256455,V1,111817,A,1935.5128,N,04656.3243,E,0.00,100,170913,FFE7FBFF#", Charset.defaultCharset())));
 
         assertNotNull(decoder.decode(null, null, ChannelBuffers.copiedBuffer(
                 "*HQ,123456789012345,V1,155850,A,5214.5346,N,2117.4683,E,0.00,270.90,131012,ffffffff,000000,000000,000000,000000#", Charset.defaultCharset())));

File: src/org/traccar/protocol/TotemFrameDecoder.java
Patch:
@@ -40,7 +40,7 @@ protected Object decode(
         }
 
         // Read message
-        int length = Integer.parseInt(buf.toString(2, 2, Charset.defaultCharset()), 16) + 1;
+        int length = Integer.parseInt(buf.toString(2, 2, Charset.defaultCharset()), 16);
         if (length >= buf.readableBytes()) {
             return buf.readBytes(length);
         }

File: src/org/traccar/protocol/WondexFrameDecoder.java
Patch:
@@ -23,7 +23,7 @@
 
 public class WondexFrameDecoder extends FrameDecoder {
     
-    private static final int KEEP_ALIVE_LENGTH = 6;
+    private static final int KEEP_ALIVE_LENGTH = 8;
 
     @Override
     protected Object decode(

File: test/org/traccar/protocol/MegastekProtocolDecoderTest.java
Patch:
@@ -26,6 +26,9 @@ public void testDecode() throws Exception {
         assertNotNull(decoder.decode(null, null,
                 "STX123456            $GPRMC,063709.000,A,2238.1998,N,11401.9670,E,0.00,,250313,,,A*7F,460,01,2531,647E,11,87,1000,001001,0000,0.00,0.02,0.00,Timer;4A"));
 
+        assertNotNull(decoder.decode(null, null,
+                "STX260475            $GPRMC,104032.001,A,4022.1119,N,01811.4081,E,000.0,000.0,060913,,,A*67,222,01,815A,D455,11,99,0000,0001,0,Timer;"));
+        
     }
 
 }

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -137,7 +137,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
 
                 position.setLongitude(buf.readInt() / 10000000.0);
                 position.setLatitude(buf.readInt() / 10000000.0);
-                position.setAltitude((double) buf.readUnsignedShort());
+                position.setAltitude((double) buf.readShort());
                 position.setCourse((double) buf.readUnsignedShort());
 
                 int satellites = buf.readUnsignedByte();

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -64,8 +64,7 @@ private Position decodeBinary(ChannelBuffer buf) {
         buf.readByte(); // marker
 
         // Identification
-        String id = String.valueOf(
-                (buf.readUnsignedInt() << 8) + buf.readUnsignedByte());
+        String id = ChannelBufferTools.readHexString(buf, 10);
         try {
             position.setDeviceId(getDataManager().getDeviceByImei(id).getId());
         } catch(Exception error) {

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -20,6 +20,9 @@ public void testDecode() throws Exception {
 
         // No GPS signal
         assertNull(decoder.decode(null, null, "imei:359586015829802,tracker,000000000,13554900601,L,;"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "imei:869039001186913,tracker,1308282156,0,F,215630.000,A,5602.11015,N,9246.30767,E,1.4,,175.9,"));
 
         assertNotNull(decoder.decode(null, null,
                 "imei:359710040656622,tracker,13/02/27 23:40,,F,125952.000,A,3450.9430,S,13828.6753,E,0.00,0"));

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
         assertNull(decoder.decode(null, null,
                 "$$BB862170017856731|AA$GPRMC,000000.00,V,0000.0000,N,00000.0000,E,000.0,000.0,000000,,,A*73|00.0|00.0|00.0|000000001000|20000000000000|13790000|00000000|00000000|00000000|0.0000|0007|8C23"));
 
+        assertNotNull(decoder.decode(null, null,
+                "$$B8862170017856731|AA$GPRMC,171849.00,A,3644.9893,N,01012.9927,E,0.049,51,200813,,,A*73|1.59|0.97|1.25|100000001000|20130820171849|13690000|00000000|019BD508|00000000|0.0000|0026|1B2C"));
+
         assertNotNull(decoder.decode(null, null,
                 "$$B2359772032984289|AA$GPRMC,104446.000,A,5011.3944,N,01439.6637,E,0.00,,290212,,,A*7D|01.8|00.9|01.5|000000100000|20120229104446|14151221|00050000|046D085E|0000|0.0000|1170|29A7"));
 

File: test/org/traccar/protocol/TotemProtocolDecoderTest.java
Patch:
@@ -1,6 +1,7 @@
 package org.traccar.protocol;
 
 import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 import org.junit.Test;
 
 public class TotemProtocolDecoderTest {
@@ -11,7 +12,7 @@ public void testDecode() throws Exception {
         TotemProtocolDecoder decoder = new TotemProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
-        assertNotNull(decoder.decode(null, null,
+        assertNull(decoder.decode(null, null,
                 "$$BB862170017856731|AA$GPRMC,000000.00,V,0000.0000,N,00000.0000,E,000.0,000.0,000000,,,A*73|00.0|00.0|00.0|000000001000|20000000000000|13790000|00000000|00000000|00000000|0.0000|0007|8C23"));
 
         assertNotNull(decoder.decode(null, null,

File: src/org/traccar/protocol/GlobalSatProtocolDecoder.java
Patch:
@@ -121,13 +121,13 @@ private Position decodeOriginal(Channel channel, String sentence) {
                     break;
                 case '1':
                     double longitude = Double.valueOf(value.substring(1));
-                    if (value.charAt(0) == 'E') longitude = -longitude;
+                    if (value.charAt(0) == 'W') longitude = -longitude;
                     position.setLongitude(longitude);
                     break;
                 case '2':
                     longitude = Double.valueOf(value.substring(4)) / 60;
                     longitude += Integer.valueOf(value.substring(1, 4));
-                    if (value.charAt(0) == 'E') longitude = -longitude;
+                    if (value.charAt(0) == 'W') longitude = -longitude;
                     position.setLongitude(longitude);
                     break;
                 case '3':

File: test/org/traccar/protocol/GlobalSatProtocolDecoderTest.java
Patch:
@@ -18,6 +18,9 @@ public void testDecode() throws Exception {
         assertNotNull(decoder.decode(null, null,
                 "GSr,1,135785412249986,01,I,EA02,3,230410,153318,E12129.2839,N2459.8570,0,1.17,212,8,1.0,12.3V*55"));
         
+        assertNotNull(decoder.decode(null, null,
+                "GSr,GTR-128,012896009148443,0040,5,0080,3,190813,185812,W11203.3661,N3330.2104,344,0.24,78,9,0.8,60%,0,0,12,\"310,410,0bdd,050d,02,21\",\"310,410,0bdd,0639,24,7\"*79"));
+        
         assertNotNull(decoder.decode(null, null,
                 "$355632004245866,1,1,040202,093633,E12129.2252,N2459.8891,00161,0.0100,147,07,2.4"));
 

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -70,9 +70,8 @@ public void log(ChannelEvent e) {
 
                 // Append hex message
                 if (event.getMessage() instanceof ChannelBuffer) {
-                    msg.append(" - (HEX: ");
+                    msg.append(" - HEX: ");
                     msg.append(ChannelBuffers.hexDump((ChannelBuffer) event.getMessage()));
-                    msg.append(")");
                 }
 
                 Log.debug(msg.toString());

File: src/org/traccar/protocol/Tr20ProtocolDecoder.java
Patch:
@@ -114,9 +114,9 @@ protected Object decode(
             // Longitude
             hemisphere = 1;
             if (parser.group(index++).compareTo("W") == 0) hemisphere = -1;
-            Double lonlitude = Double.valueOf(parser.group(index++));
-            lonlitude += Double.valueOf(parser.group(index++)) / 60;
-            position.setLongitude(lonlitude * hemisphere);
+            Double longitude = Double.valueOf(parser.group(index++));
+            longitude += Double.valueOf(parser.group(index++)) / 60;
+            position.setLongitude(longitude * hemisphere);
 
             // Speed
             position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);

File: src/org/traccar/protocol/YwtProtocolDecoder.java
Patch:
@@ -92,9 +92,9 @@ protected Object decode(
 
         // Longitude
         String hemisphere = parser.group(index++);
-        Double lonlitude = Double.valueOf(parser.group(index++));
-        if (hemisphere.compareTo("W") == 0) lonlitude = -lonlitude;
-        position.setLongitude(lonlitude);
+        Double longitude = Double.valueOf(parser.group(index++));
+        if (hemisphere.compareTo("W") == 0) longitude = -longitude;
+        position.setLongitude(longitude);
 
         // Latitude
         hemisphere = parser.group(index++);

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -83,7 +83,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
             if (codec == CODEC_GH3000) {
 
                 long time = buf.readUnsignedInt() & 0x3fffffff;
-                time += 1199145600; // 2008-01-01 00:00:00
+                time += 1167609600; // 2007-01-01 00:00:00
                 position.setTime(new Date(time * 1000));
                 
                 globalMask = buf.readUnsignedByte();

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -27,6 +27,9 @@ public void testDecode() throws Exception {
         
         byte[] buf5 = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0xc7,0x07,0x04,0x41,(byte)0xbf,(byte)0x9d,(byte)0xb0,0x0f,(byte)0xff,0x42,0x5a,(byte)0xdb,(byte)0xd7,0x41,(byte)0xca,0x6e,0x1e,0x00,(byte)0x9e,0x12,0x05,0x07,0x00,0x01,0x03,0x0b,0x16,0x00,0x00,0x60,0x1a,0x02,0x01,0x5e,0x02,0x00,0x03,0x14,0x00,0x66,0x15,0x00,0x0a,0x16,0x00,0x67,0x01,0x05,0x00,0x00,0x0c,(byte)0xe4,0x41,(byte)0xbf,(byte)0x9d,(byte)0x92,0x0f,(byte)0xff,0x42,0x5a,(byte)0xdb,(byte)0xb1,0x41,(byte)0xca,0x6f,(byte)0xc9,0x00,(byte)0xa2,(byte)0xb2,0x18,0x07,0x00,0x01,0x03,0x0b,0x16,0x00,0x00,0x60,0x1a,0x02,0x01,0x5e,0x02,0x00,0x03,0x14,0x00,0x66,0x15,0x00,0x0a,0x16,0x00,0x67,0x01,0x05,0x00,0x00,0x0c,(byte)0xc6,0x41,(byte)0xbf,(byte)0x9d,0x74,0x0f,(byte)0xff,0x42,0x5a,(byte)0xdb,(byte)0xee,0x41,(byte)0xca,0x73,(byte)0x92,0x00,(byte)0xb6,(byte)0xc9,0x1e,0x07,0x00,0x01,0x03,0x0b,0x1f,0x00,0x00,0x60,0x1a,0x02,0x01,0x5f,0x02,0x00,0x03,0x14,0x00,0x66,0x15,0x00,0x0a,0x16,0x00,0x66,0x01,0x05,0x00,0x00,0x0c,(byte)0xa8,0x41,(byte)0xbf,(byte)0x9c,(byte)0xfc,0x0f,(byte)0xff,0x42,0x5a,(byte)0xdb,(byte)0xa0,0x41,(byte)0xca,0x70,(byte)0xc1,0x00,(byte)0xb9,0x38,0x13,0x07,0x00,0x01,0x03,0x0b,0x1f,0x00,0x00,0x60,0x1a,0x02,0x01,0x5f,0x02,0x00,0x03,0x14,0x00,0x23,0x15,0x00,0x0a,0x16,0x00,0x25,0x01,0x05,0x00,0x00,0x0c,0x30,0x04,0x00,0x00,0x00};
         assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(buf5)));
+
+        byte[] buf6 = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x31,0x07,0x02,0x4c,0x61,0x41,0x0b,0x01,0x3f,0x42,0x31,(byte)0xc2,(byte)0xc1,0x41,(byte)0xd0,(byte)0xbe,(byte)0xb9,0x00,0x3d,0x00,0x00,0x05,0x00,0x64,(byte)0x83,(byte)0xff,0x4c,0x61,0x40,(byte)0xeb,0x01,0x3f,0x42,0x31,(byte)0xc2,(byte)0xc1,0x41,(byte)0xd0,(byte)0xbe,(byte)0xb9,0x00,0x3d,0x00,0x00,0x05,0x00,0x64,(byte)0x83,(byte)0xff,0x02,0x00,0x00,0x41,(byte)0xdf};
+        assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(buf6)));
         
     }
 

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -33,8 +33,6 @@ public Tk103ProtocolDecoder(ServerManager serverManager) {
         super(serverManager);
     }
 
-    //(008600410203 BP05 000008600410203 130721 A4152.5790N01239.2770E000.0 145238 173.8 70100000A L 000000D8
-    
     static private Pattern pattern = Pattern.compile(
             "(\\d{12})" +                // Device ID
             ".{4}" +                     // Command
@@ -47,7 +45,7 @@ public Tk103ProtocolDecoder(ServerManager serverManager) {
             "([EW])" +
             "(\\d+\\.\\d)" +             // Speed
             "(\\d{2})(\\d{2})(\\d{2})" + // Time (HHMMSS)
-            "(\\d+\\.\\d+)" +            // Course
+            "(\\d+\\.?\\d+)" +           // Course
             "([0-9a-fA-F]{8})" +         // State
             "L([0-9a-fA-F]+)");          // Milage
 

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -31,6 +31,9 @@ public void testDecode() throws Exception {
         
         assertNotNull(decoder.decode(null, null,
                 "(008600410203BP05000008600410203130721A4152.5790N01239.2770E000.0145238173.870100000AL0000000"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "(013012345678BR00130515A4843.9703N01907.6211E000.019232800000000000000L00009239"));
 
     }
 

File: src/org/traccar/BasePipelineFactory.java
Patch:
@@ -75,10 +75,10 @@ public void log(ChannelEvent e) {
                     msg.append(")");
                 }
 
-                Log.fine(msg.toString());
+                Log.debug(msg.toString());
             } else if (e instanceof ExceptionEvent) {
                 ExceptionEvent event = (ExceptionEvent) e;
-                Log.warning(event.getCause().toString());
+                Log.warning(event.getCause());
             }
         }
 

File: src/org/traccar/geocode/GoogleReverseGeocoder.java
Patch:
@@ -55,7 +55,7 @@ public String getAddress(double latitude, double longitude) {
             reader.close();
 
         } catch(Exception error) {
-            Log.warning(error.getMessage());
+            Log.warning(error);
         }
 
         return null;

File: src/org/traccar/helper/NamedParameterStatement.java
Patch:
@@ -132,7 +132,7 @@ public void prepare(int autoGeneratedKeys) throws SQLException {
             try {
                 reset(true);
             } catch (SQLException secondError) {
-                Log.warning("Exception during query preparation: " + secondError.getMessage());
+                Log.warning(secondError);
                 throw secondError;
             }
         }

File: src/org/traccar/http/WebServer.java
Patch:
@@ -61,7 +61,7 @@ private void initDataSource(Properties properties) {
             context.bind("java:/DefaultDS", ds);
 
         } catch (Exception error) {
-            Log.warning(error.getMessage());
+            Log.warning(error);
         }
     }
 
@@ -86,15 +86,15 @@ public void start() {
         try {
             server.start();
         } catch (Exception error) {
-            Log.warning(error.getMessage());
+            Log.warning(error);
         }
     }
 
     public void stop() {
         try {
             server.stop();
         } catch (Exception error) {
-            Log.warning(error.getMessage());
+            Log.warning(error);
         }
     }
 

File: src/org/traccar/protocol/St210ProtocolDecoder.java
Patch:
@@ -615,10 +615,10 @@ public Object decode(ChannelHandlerContext ctx, Channel channel, Object msg) {
 
         try{
             position = decodeMsg(sentence);
-            Log.info("MESSAGE DECODED WITH SUCCESS!");
+            Log.info("Message decoded with success");
         }
         catch(Exception e){
-            Log.severe("ERROR WHILE DECODING MESSAGE: " + e.getMessage());
+            Log.warning(e);
         }
 
         return position;

File: src/org/traccar/protocol/V680ProtocolDecoder.java
Patch:
@@ -38,7 +38,7 @@ public V680ProtocolDecoder(ServerManager serverManager) {
     static private Pattern pattern = Pattern.compile(
             "(?:#(\\d+)#" +                // IMEI
             "([^#]*)#)?" +                 // User
-            "([01])#" +                    // Fix
+            "(\\d+)#" +                    // Fix
             "([^#]+)#" +                   // Password
             "[^#]+#" +
             "(\\d+)#" +                    // Packet number
@@ -101,7 +101,7 @@ protected Object decode(
             extendedInfo.set("user", parser.group(index++));
 
             // Validity
-            position.setValid(parser.group(index++).compareTo("1") == 0 ? true : false);
+            position.setValid(Integer.valueOf(parser.group(index++)) > 0 ? true : false);
 
             // Password
             extendedInfo.set("password", parser.group(index++));

File: test/org/traccar/protocol/V680ProtocolDecoderTest.java
Patch:
@@ -41,6 +41,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null,
                 "#352897045085282##0#0000#AUT#1#72400510730208,00d36307,10734fc4#4647.8922,W,2339.1956,S,2.60,63.74#200413#094310.000##"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "#352165050199210##13#0000#AUT#1#72400605471305,054712fd,054712ff#05144.0008,W,3005.5011,S,0.11,201.46#260713#172647.000##"));
 
     }
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -910,7 +910,9 @@ private void initPt3000Server(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LineBasedFrameDecoder(1024));
+                    byte delimiter[] = { (byte) 'd' }; // probably wrong
+                    pipeline.addLast("frameDecoder",
+                            new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new Pt3000ProtocolDecoder(ServerManager.this));

File: test/org/traccar/protocol/Pt3000ProtocolDecoderTest.java
Patch:
@@ -1,7 +1,6 @@
 package org.traccar.protocol;
 
 import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
 import org.junit.Test;
 
 public class Pt3000ProtocolDecoderTest {
@@ -12,11 +11,11 @@ public void testDecode() throws Exception {
         Pt3000ProtocolDecoder decoder = new Pt3000ProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
-        /*assertNotNull(decoder.decode(null, null,
+        assertNotNull(decoder.decode(null, null,
                 "%356939010012099,$GPRMC,124945.752,A,4436.6245,N,01054.4634,E,0.11,358.52,060408,,,A,+393334347445,N028d"));
 
         assertNotNull(decoder.decode(null, null,
-                "%356939010014433,$GPRMC,172821.000,A,4019.5147,N,00919.1160,E,0.00,,010613,,,A,+393998525043,N098d"));*/
+                "%356939010014433,$GPRMC,172821.000,A,4019.5147,N,00919.1160,E,0.00,,010613,,,A,+393998525043,N098d"));
 
     }
 

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -33,10 +33,11 @@ public Xexun2ProtocolDecoder(ServerManager serverManager) {
         super(serverManager);
     }
 
+    //130725134142,,GPRMC,134142.591,A,3845.6283,N,00909.8876,W,2.08,287.33,250713,,,A*71,F,, imei:013227000526784,03,-50.7,L:3.69V,0,128,65337,268,03,177A,119F
     static private Pattern pattern = Pattern.compile(
             "[\r\n]*" +
             "(\\d+)," +                         // Serial
-            "(\\+?\\d+)," +                     // Number
+            "(\\+?\\d+)?," +                    // Number
             "GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity

File: src/org/traccar/protocol/Tr20ProtocolDecoder.java
Patch:
@@ -119,7 +119,7 @@ protected Object decode(
             position.setLongitude(lonlitude * hemisphere);
 
             // Speed
-            position.setSpeed(Double.valueOf(parser.group(index++)));
+            position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);
 
             // Course
             position.setCourse(Double.valueOf(parser.group(index++)));

File: src/org/traccar/protocol/Tk103ProtocolDecoder.java
Patch:
@@ -33,6 +33,8 @@ public Tk103ProtocolDecoder(ServerManager serverManager) {
         super(serverManager);
     }
 
+    //(008600410203 BP05 000008600410203 130721 A4152.5790N01239.2770E000.0 145238 173.8 70100000A L 000000D8
+    
     static private Pattern pattern = Pattern.compile(
             "(\\d{12})" +                // Device ID
             ".{4}" +                     // Command
@@ -46,7 +48,7 @@ public Tk103ProtocolDecoder(ServerManager serverManager) {
             "(\\d+\\.\\d)" +             // Speed
             "(\\d{2})(\\d{2})(\\d{2})" + // Time (HHMMSS)
             "(\\d+\\.\\d+)" +            // Course
-            "(\\d{8})" +                 // State
+            "([0-9a-fA-F]{8})" +         // State
             "L([0-9a-fA-F]+)");          // Milage
 
     @Override

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -28,6 +28,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null,
                 "\n\n\n(088045133878BR00130228A5124.5526N00117.7152W000.0233614352.2200000000L01B0CF1C"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "(008600410203BP05000008600410203130721A4152.5790N01239.2770E000.0145238173.870100000AL0000000"));
 
     }
 

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -107,7 +107,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
                 }
                 
                 if (checkBit(locationMask, 3)) {
-                    position.setSpeed((double) buf.readUnsignedByte());
+                    position.setSpeed(buf.readUnsignedByte() * 0.539957);
                 }
                 
                 if (checkBit(locationMask, 4)) {

File: src/org/traccar/protocol/CellocatorFrameDecoder.java
Patch:
@@ -61,7 +61,7 @@ protected Object decode(
 
         // Read packet
         if (length > 0 && available >= length) {
-            return buf.readBytes(length + 2);
+            return buf.readBytes(length);
         }
         
         return null;

File: test/org/traccar/protocol/CellocatorProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
 
         byte[] buf1 = {0x4D,0x43,0x47,0x50,0x00,0x06,0x00,0x00,0x00,0x08,0x1A,0x02,0x02,0x12,0x04,0x00,0x00,0x00,0x21,0x00,0x62,0x30,0x00,0x00,0x00,0x6B,0x00,(byte)0xE1,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0xE5,(byte)0xA1,0x00,0x04,0x02,0x06,0x61,0x4E,(byte)0xA3,0x03,0x18,0x1A,0x57,0x03,0x4E,0x12,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x15,0x25,0x07,0x14,0x03,(byte)0xD6,0x07,0x49};
         assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, buf1)));
+        
+        byte[] buf2 = {0x4d,0x43,0x47,0x50,0x00,0x01,0x01,0x00,0x00,0x08,0x01,0x1f,0x04,0x18,0x04,0x00,0x00,0x00,0x20,0x01,0x00,0x00,0x00,0x00,0x00,0x5e,0x75,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x54,(byte)0x85,0x00,0x04,0x02,0x04,(byte)0xda,0x4d,(byte)0xa3,0x03,0x67,0x19,0x57,0x03,(byte)0xe8,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x14,0x15,0x10,0x07,(byte)0xdd,0x07,(byte)0xf7};
+        assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(ByteOrder.LITTLE_ENDIAN, buf2)));
 
     }
 

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -44,6 +44,9 @@ public void testDecode() throws Exception {
 
         byte[] buf10 = {0x00,(byte)0x91,(byte)0x80,0x03,0x69,0x76,0x41,(byte)0x99,0x55,0x30,0x38,0x35,0x31,0x33,0x30,0x2e,0x30,0x30,0x30,0x2c,0x41,0x2c,0x33,0x30,0x35,0x33,0x2e,0x31,0x36,0x34,0x35,0x2c,0x4e,0x2c,0x30,0x37,0x35,0x35,0x35,0x2e,0x37,0x34,0x37,0x36,0x2c,0x45,0x2c,0x30,0x2e,0x30,0x30,0x2c,0x32,0x37,0x2c,0x31,0x36,0x30,0x34,0x31,0x33,0x2c,0x2c,0x2a,0x33,0x46,0x7c,0x30,0x2e,0x38,0x7c,0x32,0x34,0x35,0x7c,0x32,0x30,0x30,0x30,0x7c,0x30,0x33,0x46,0x37,0x2c,0x30,0x30,0x30,0x30,0x2c,0x30,0x30,0x30,0x30,0x2c,0x30,0x30,0x31,0x42,0x2c,0x30,0x30,0x30,0x30,0x2c,0x30,0x30,0x30,0x30,0x2c,0x30,0x30,0x30,0x30,0x2c,0x30,0x30,0x30,0x30,0x7c,0x30,0x31,0x39,0x34,0x30,0x30,0x30,0x32,0x30,0x31,0x43,0x43,0x36,0x32,0x37,0x43,0x7c,0x31,0x41,0x7c,0x30,0x31,0x31,0x36,0x30,0x38,0x34,0x39,(byte)0xe6,(byte)0xa7,0x0d,0x0a};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf10, 0, buf10.length)));
+        
+        byte[] buf11 = {0x26,0x01,0x61,0x00,(byte)0x90,0x1f,(byte)0xff,(byte)0x99,0x55,0x31,0x36,0x35,0x38,0x35,0x33,0x2c,0x41,0x2c,0x34,0x31,0x30,0x39,0x2e,0x36,0x30,0x32,0x31,0x32,0x2c,0x4e,0x2c,0x38,0x33,0x38,0x2e,0x35,0x39,0x31,0x31,0x39,0x2c,0x57,0x2c,0x33,0x2e,0x38,0x38,0x33,0x2c,0x31,0x32,0x2e,0x30,0x30,0x2c,0x30,0x34,0x30,0x37,0x31,0x33,0x2c,0x2c,0x2a,0x34,0x46,0x7c,0x32,0x2e,0x35,0x7c,0x31,0x31,0x30,0x7c,0x00,0x06,0x00,0x00,0x7c,0x00,0x00,0x01,0x0f,0x7c,0x30,0x32,0x42,0x30,0x2c,0x30,0x42,0x33,0x36,(byte)0x97,0x74,0x0d,0x0a};
+        assertNotNull(decoder.decode(null, null, factory.getBuffer(buf11, 0, buf11.length)));
 
     }
 

File: test/org/traccar/protocol/V680ProtocolDecoderTest.java
Patch:
@@ -35,6 +35,9 @@ public void testDecode() throws Exception {
         
         assertNotNull(decoder.decode(null, null,
                 "#356823031236214##0#0000#AUT#1#V#01904.5491,E,6941.0085,N,000.09,248#170513#160140"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "#353588550032869##1#0000#AUT#01#72400401cd01a5#00000.0000,E,0000.0000,N,0.00,#000000#000000.000"));
 
     }
 

File: src/org/traccar/protocol/St210ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ private enum ST210FIELDS {
                 DATE("(\\d+);","GPS date (yyyymmdd) Year + Month + Day"),
                 TIME("(\\d{2}:\\d{2}:\\d{2});","GPS time (hh:mm:ss) Hour : Minute : Second"),
                 CELL("(\\w+);","Location Code ID (3 digits hex) + Serving Cell BSIC(2 digits decimal)"),
-                LAT("(-\\d{2}.\\d+);", "Latitude (+/-xx.xxxxxx)"),
-                LON("(-\\d{3}.\\d+);", "Longitude (+/-xxx.xxxxxx)"),
+                LAT("([-\\+]\\d{2}.\\d+);", "Latitude (+/-xx.xxxxxx)"),
+                LON("([-\\+]\\d{3}.\\d+);", "Longitude (+/-xxx.xxxxxx)"),
                 SPD("(\\d{3}.\\d{3});","Speed in km/h - This value returns to 0 when it is over than 200,000Km"),
                 CRS("(\\d{3}.\\d{2});", "Course over ground in degree"),
                 SATT("(\\d+);", "Number of satellites"),

File: src/org/traccar/protocol/Gt06ProtocolDecoder.java
Patch:
@@ -134,7 +134,7 @@ else if (type == MSG_GPS ||
             double longitude = buf.readUnsignedInt() / (60.0 * 30000.0);
 
             // Speed
-            position.setSpeed((double) buf.readUnsignedByte());
+            position.setSpeed(buf.readUnsignedByte() * 0.539957);
 
             // Course and flags
             int union = buf.readUnsignedShort();

File: src/org/traccar/protocol/Tlt2hProtocolDecoder.java
Patch:
@@ -40,9 +40,9 @@ public Tlt2hProtocolDecoder(ServerManager serverManager) {
             "\\$GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d+)," + // Time (HHMMSS.SSS)
             "([AV])," +                    // Validity
-            "(\\d{2})(\\d{2}\\.\\d+)," +   // Latitude (DDMM.MMMM)
+            "(\\d+)(\\d{2}\\.\\d+)," +     // Latitude (DDMM.MMMM)
             "([NS])," +
-            "(\\d{3})(\\d{2}\\.\\d+)," +   // Longitude (DDDMM.MMMM)
+            "(\\d+)(\\d{2}\\.\\d+)," +     // Longitude (DDDMM.MMMM)
             "([EW])," +
             "(\\d+\\.\\d{2})?," +          // Speed
             "(\\d+\\.\\d{2})?," +          // Course

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -83,7 +83,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
 
             position.setValid(satellites != 0);
             
-            position.setSpeed((double) buf.readUnsignedShort());
+            position.setSpeed(buf.readUnsignedShort() * 0.539957);
 
             extendedInfo.set("event", buf.readUnsignedByte());
             

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -73,8 +73,8 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
 
             extendedInfo.set("priority", buf.readUnsignedByte());
 
-            position.setLongitude(buf.readUnsignedInt() / 10000000.0);
-            position.setLatitude(buf.readUnsignedInt() / 10000000.0);
+            position.setLongitude(buf.readInt() / 10000000.0);
+            position.setLatitude(buf.readInt() / 10000000.0);
             position.setAltitude((double) buf.readUnsignedShort());
             position.setCourse((double) buf.readUnsignedShort());
             

File: test/org/traccar/protocol/TeltonikaProtocolDecoderTest.java
Patch:
@@ -18,6 +18,9 @@ public void testDecode() throws Exception {
         
         byte[] buf2 = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte)0xA7,0x08,0x04,0x00,0x00,0x01,0x13,(byte)0xfc,0x20,(byte)0x8d,(byte)0xff,0x00,0x0f,0x14,(byte)0xf6,0x50,0x20,(byte)0x9c,(byte)0xca,(byte)0x80,0x00,0x6f,0x00,(byte)0xd6,0x04,0x00,0x04,0x00,0x04,0x03,0x01,0x01,0x15,0x03,0x16,0x03,0x00,0x01,0x46,0x00,0x00,0x01,0x5d,0x00,0x00,0x00,0x01,0x13,(byte)0xfc,0x17,0x61,0x0b,0x00,0x0f,0x14,(byte)0xff,(byte)0xe0,0x20,(byte)0x9c,(byte)0xc5,(byte)0x80,0x00,0x6e,0x00,(byte)0xc0,0x05,0x00,0x01,0x00,0x04,0x03,0x01,0x01,0x15,0x03,0x16,0x01,0x00,0x01,0x46,0x00,0x00,0x01,0x5e,0x00,0x00,0x00,0x01,0x13,(byte)0xfc,0x28,0x49,0x45,0x00,0x0f,0x15,0x0f,0x00,0x20,(byte)0x9c,(byte)0xd2,0x00,0x00,(byte)0x95,0x01,0x08,0x04,0x00,0x00,0x00,0x04,0x03,0x01,0x01,0x15,0x00,0x16,0x03,0x00,0x01,0x46,0x00,0x00,0x01,0x5d,0x00,0x00,0x00,0x01,0x13,(byte)0xfc,0x26,0x7c,0x5b,0x00,0x0f,0x15,0x0a,0x50,0x20,(byte)0x9c,(byte)0xcc,(byte)0xc0,0x00,(byte)0x93,0x00,0x68,0x04,0x00,0x00,0x00,0x04,0x03,0x01,0x01,0x15,0x00,0x16,0x03,0x00,0x01,0x46,0x00,0x00,0x01,0x5b,0x00,0x04,0x00,0x00};
         assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(buf2)));
+        
+        byte[] buf3 = {0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x47,0x08,0x06,0x00,0x00,0x01,0x3e,0x5a,0x60,(byte)0xa4,(byte)0xcb,0x00,0x3f,(byte)0xa7,(byte)0xb7,(byte)0x80,(byte)0xfc,0x42,0x45,0x18,0x00,0x42,0x00,0x00,0x0a,0x00,0x00,0x00,0x09,0x05,0x01,0x01,0x02,0x00,(byte)0xb3,0x00,(byte)0xb4,0x00,(byte)0xf0,0x00,0x03,0x42,0x68,(byte)0xa7,0x46,0x01,0x18,0x18,0x00,0x00,0x01,(byte)0xc7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x3e,0x5d,(byte)0xc8,(byte)0xba,0x28,0x00,0x3f,(byte)0xa7,(byte)0xc0,(byte)0x80,(byte)0xfc,0x42,0x46,0x04,0x00,0x01,0x00,0x00,0x05,0x00,0x00,0x00,0x09,0x05,0x01,0x01,0x02,0x00,(byte)0xb3,0x00,(byte)0xb4,0x00,(byte)0xf0,0x01,0x03,0x42,0x68,(byte)0xb4,0x46,0x00,(byte)0xef,0x18,0x00,0x00,0x01,(byte)0xc7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x3e,0x5d,(byte)0xc9,0x04,0x55,0x00,0x3f,(byte)0xa7,(byte)0xb6,0x40,(byte)0xfc,0x42,0x43,(byte)0x88,0x00,0x3a,0x00,0x00,0x07,0x00,0x00,(byte)0xf0,0x09,0x05,0x01,0x01,0x02,0x00,(byte)0xb3,0x00,(byte)0xb4,0x00,(byte)0xf0,0x00,0x03,0x42,0x68,(byte)0xdc,0x46,0x00,(byte)0xf7,0x18,0x00,0x00,0x01,(byte)0xc7,0x00,0x00,0x00,0x1d,0x00,0x00,0x00,0x01,0x3e,0x5d,(byte)0xc9,(byte)0xd3,0x68,0x00,0x3f,(byte)0xa7,(byte)0xb8,0x00,(byte)0xfc,0x42,0x44,0x30,0x00,0x49,0x00,0x00,0x04,0x00,0x00,0x00,0x09,0x05,0x01,0x01,0x02,0x00,(byte)0xb3,0x00,(byte)0xb4,0x00,(byte)0xf0,0x01,0x03,0x42,0x67,(byte)0xde,0x46,0x01,0x07,0x18,0x00,0x00,0x01,(byte)0xc7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x3e,0x5d,(byte)0xca,0x31,0x1d,0x00,0x3f,(byte)0xa7,(byte)0xb6,(byte)0x80,(byte)0xfc,0x42,0x43,(byte)0xcc,0x00,0x42,0x00,0x00,0x07,0x00,0x00,(byte)0xf0,0x09,0x05,0x01,0x01,0x02,0x00,(byte)0xb3,0x00,(byte)0xb4,0x00,(byte)0xf0,0x00,0x03,0x42,0x68,0x53,0x46,0x01,0x0b,0x18,0x00,0x00,0x01,(byte)0xc7,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x3e,0x5d,(byte)0xcf,(byte)0xaf,(byte)0xe9,0x00,0x3f,(byte)0xa7,(byte)0xb6,0x00,(byte)0xfc,0x42,0x42,(byte)0xf0,0x00,0x3d,0x00,0x00,0x08,0x00,0x00,0x00,0x09,0x05,0x01,0x01,0x02,0x00,(byte)0xb3,0x00,(byte)0xb4,0x00,(byte)0xf0,0x00,0x03,0x42,0x68,0x52,0x46,0x01,0x19,0x18,0x00,0x00,0x01,(byte)0xc7,0x00,0x00,0x00,0x00,0x00,0x06,0x00,0x00,0x02,0x75};
+        assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(buf3)));
 
     }
 

File: src/org/traccar/protocol/MeitrackProtocolDecoder.java
Patch:
@@ -48,7 +48,7 @@ public MeitrackProtocolDecoder(ServerManager serverManager) {
             "(\\d+)," +                         // GSM Signal
             "(\\d+)," +                         // Speed
             "(\\d+)," +                         // Course
-            "(\\d+)," +                         // HDOP
+            "(\\d+.?\\d*)," +                   // HDOP
             "(\\d+)," +                         // Altitude
             "(\\d+)," +                         // Milage
             ".*"); // TODO: parse other stuff

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -24,6 +24,7 @@
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.ServerManager;
 import org.traccar.helper.Log;
+import org.traccar.model.ExtendedInfoFormatter;
 import org.traccar.model.Position;
 
 public class H02ProtocolDecoder extends BaseProtocolDecoder {
@@ -64,7 +65,7 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        StringBuilder extendedInfo = new StringBuilder("<protocol>h02</protocol>");
+        ExtendedInfoFormatter extendedInfo = new ExtendedInfoFormatter("h02");
 
         Integer index = 1;
 

File: src/org/traccar/protocol/St210ProtocolDecoder.java
Patch:
@@ -12,6 +12,7 @@
 import org.traccar.ServerManager;
 import org.traccar.helper.Log;
 import org.traccar.model.DataManager;
+import org.traccar.model.ExtendedInfoFormatter;
 import org.traccar.model.Position;
 
 public class St210ProtocolDecoder extends BaseProtocolDecoder {
@@ -645,7 +646,7 @@ public Position decodeMsg(String msg) throws Exception {
         Position position = new Position();
 
         position.setAltitude(0D);
-        position.setExtendedInfo("");
+        position.setExtendedInfo(new ExtendedInfoFormatter("st210").toString());
         position.setValid(true);
 
         Integer index = 0;

File: src/org/traccar/protocol/SyrusProtocolDecoder.java
Patch:
@@ -25,6 +25,7 @@
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.ServerManager;
 import org.traccar.helper.Log;
+import org.traccar.model.ExtendedInfoFormatter;
 import org.traccar.model.Position;
 
 public class SyrusProtocolDecoder extends BaseProtocolDecoder {
@@ -127,7 +128,7 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        StringBuilder extendedInfo = new StringBuilder("<protocol>syrus</protocol>");
+        ExtendedInfoFormatter extendedInfo = new ExtendedInfoFormatter("syrus");
         position.setDeviceId(deviceId);
 
         Integer index = 1;

File: src/org/traccar/protocol/Tk102ProtocolDecoder.java
Patch:
@@ -24,6 +24,7 @@
 import org.traccar.BaseProtocolDecoder;
 import org.traccar.ServerManager;
 import org.traccar.helper.Log;
+import org.traccar.model.ExtendedInfoFormatter;
 import org.traccar.model.Position;
 
 public class Tk102ProtocolDecoder extends BaseProtocolDecoder {
@@ -74,7 +75,7 @@ else if (sentence.startsWith("[=") && deviceId != null) {
 
             // Create new position
             Position position = new Position();
-            StringBuilder extendedInfo = new StringBuilder("<protocol>tk102</protocol>");
+            ExtendedInfoFormatter extendedInfo = new ExtendedInfoFormatter("tk102");
             position.setDeviceId(deviceId);
 
             Integer index = 1;

File: test/org/traccar/protocol/IntellitracProtocolDecoderTest.java
Patch:
@@ -43,6 +43,9 @@ public void testDecode() throws Exception {
         
         assertNotNull(decoder.decode(null, null,
                 "1010000001,20030105092129,121.651598,25.052325,0,0,33,0,1,0,0"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "1010000001,20030105092129,-121.651598,-25.052325,0,0,33,0,1,0,0"));
 
     }
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -791,9 +791,7 @@ private void initIntellitracServer(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    byte delimiter[] = { (byte) '\r', (byte) '\n' };
-                    pipeline.addLast("frameDecoder",
-                            new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
+                    pipeline.addLast("frameDecoder", new IntellitracFrameDecoder(1024));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new IntellitracProtocolDecoder(ServerManager.this));

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -92,7 +92,7 @@ protected Object decode(
         // Position data
         position.setLongitude(Double.valueOf(parser.group(index++)));
         position.setLatitude(Double.valueOf(parser.group(index++)));
-        position.setSpeed(Double.valueOf(parser.group(index++)));
+        position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);
         position.setCourse(Double.valueOf(parser.group(index++)));
         position.setAltitude(Double.valueOf(parser.group(index++)));
 

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -66,7 +66,7 @@ protected Object decode(
 
         // Create new position
         Position position = new Position();
-        StringBuilder extendedInfo = new StringBuilder("<protocol>vt300</protocol>");
+        StringBuilder extendedInfo = new StringBuilder("<protocol>wondex</protocol>");
         int index = 1;
 
         // Device identifier

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -39,6 +39,9 @@ public void testDecode() throws Exception {
         byte[] buf8 = {0x59,0x77,0x20,0x37,0x44,0x05,(byte)0x84,(byte)0x99,0x55,0x30,0x32,0x30,0x31,0x31,0x37,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x34,0x31,0x31,0x37,0x2E,0x39,0x32,0x31,0x32,0x2C,0x4E,0x2C,0x30,0x38,0x31,0x33,0x30,0x2E,0x32,0x30,0x39,0x36,0x2C,0x57,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x33,0x30,0x33,0x2E,0x38,0x35,0x2C,0x32,0x36,0x30,0x32,0x31,0x33,0x7C,0x31,0x2E,0x36,0x7C,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x30,0x30,0x30,0x30,0x71,(byte)0xCD,0x0D,0x0A};
         decoder.decode(null, null, factory.getBuffer(buf8, 0, buf8.length));
 
+        byte[] buf9 = {0x35,0x11,0x11,0x11,0x11,0x11,0x11,(byte)0x99,0x55,0x31,0x33,0x34,0x37,0x34,0x33,0x2e,0x30,0x30,0x33,0x2c,0x41,0x2c,0x30,0x36,0x34,0x38,0x2e,0x39,0x38,0x36,0x36,0x2c,0x53,0x2c,0x31,0x30,0x37,0x30,0x37,0x2e,0x35,0x37,0x39,0x35,0x2c,0x45,0x2c,0x30,0x30,0x30,0x2e,0x30,0x2c,0x30,0x30,0x30,0x2e,0x30,0x2c,0x32,0x36,0x30,0x33,0x31,0x33,(byte)0xf3,0x15,0x0d,0x0a};
+        assertNotNull(decoder.decode(null, null, factory.getBuffer(buf9, 0, buf9.length)));
+
     }
 
 }

File: src/org/traccar/ServerManager.java
Patch:
@@ -482,7 +482,7 @@ private void initV680Server(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    byte delimiter[] = { (byte) '#', (byte) '#' };
+                    byte delimiter[] = { (byte) '#', (byte) '#', (byte) '#' };
                     pipeline.addLast("frameDecoder",
                             new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
                     pipeline.addLast("stringDecoder", new StringDecoder());

File: test/org/traccar/protocol/SyrusProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
         SyrusProtocolDecoder decoder = new SyrusProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
+        assertNotNull(decoder.decode(null, null,
+                ">RPV15714+3739438-1220384601512612;ID=1234;*7F"));
+
         assertNotNull(decoder.decode(null, null,
                 "\r\n>REV691615354941+3570173+1397742703203212;ID=Test"));
 

File: src/org/traccar/helper/NamedParameterStatement.java
Patch:
@@ -132,7 +132,7 @@ public void prepare(int autoGeneratedKeys) throws SQLException {
             try {
                 reset(true);
             } catch (SQLException secondError) {
-                Log.info("Exception during query preparation");
+                Log.warning("Exception during query preparation: " + secondError.getMessage());
                 throw secondError;
             }
         }

File: src/org/traccar/protocol/WondexProtocolDecoder.java
Patch:
@@ -36,7 +36,7 @@ public WondexProtocolDecoder(ServerManager serverManager) {
      * Regular expressions pattern
      */
     static private Pattern pattern = Pattern.compile(
-            ".*" +                         // Header
+            "[^\\d]*" +                    // Header
             "(\\d+)," +                    // Device Identifier
             "(\\d{4})(\\d{2})(\\d{2})" +   // Date (YYYYMMDD)
             "(\\d{2})(\\d{2})(\\d{2})," +  // Time (HHMMSS)

File: test/org/traccar/protocol/WondexProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         WondexProtocolDecoder decoder = new WondexProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
+        
+        assertNotNull(decoder.decode(null, null,
+                "1044989601,20130323074605,0.000000,90.000000,0,000,0,0,2"));
 
         assertNotNull(decoder.decode(null, null,
                 "210000001,20070313170040,121.123456,12.654321,0,233,0,9,2,0.0,0,0.00,0.00,0"));

File: src/org/traccar/ServerManager.java
Patch:
@@ -137,7 +137,7 @@ public void init(String[] arguments)
         initMta6CanServer("mta6can");
         initTlt2hServer("tlt2h");
         initSyrusServer("syrus");
-        initVt300Server("vt300");
+        initWondexServer("wondex");
         initCellocatorServer("cellocator");
         initGalileoServer("galileo");
 
@@ -703,7 +703,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
         }
     }
 
-    private void initVt300Server(String protocol) throws SQLException {
+    private void initWondexServer(String protocol) throws SQLException {
         if (isProtocolEnabled(properties, protocol)) {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
@@ -713,7 +713,7 @@ protected void addSpecificHandlers(ChannelPipeline pipeline) {
                             new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
-                    pipeline.addLast("objectDecoder", new Vt300ProtocolDecoder(ServerManager.this));
+                    pipeline.addLast("objectDecoder", new WondexProtocolDecoder(ServerManager.this));
                 }
             });
         }

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -10,6 +10,9 @@ public void testDecode() throws Exception {
 
         XexunProtocolDecoder decoder = new XexunProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
+        
+        assertNotNull(decoder.decode(null, null,
+                "GPRMC,043435.000,A,811.299200,S,11339.9500,E,0.93,29.52,160313,00,0000.0,A*65,F,,imei:359585014597923,"));
 
         assertNotNull(decoder.decode(null, null,
                 "GPRMC,150120.000,A,3346.4463,S,15057.3083,E,0.0,117.4,010911,,,A*76,F,imei:351525010943661,"));

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null,
                 "$GPRMC,115528.000,A,6000.5432,N,03020.4948,E,,,091111,,*06"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "$GPRMC,064411.000,A,3717.240078,N,00603.046984,W,0.000,1,010313,,,A*6C"));
 
     }
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -126,7 +126,7 @@ protected Object decode(
         int deltaMinutes = (localHours - utcHours) * 60 + localMinutes - utcMinutes;
         if (deltaMinutes <= -12 * 60) {
             deltaMinutes += 24 * 60;
-        } else if (deltaMinutes > 12) {
+        } else if (deltaMinutes > 12 * 60) {
             deltaMinutes -= 24 * 60;
         }
         time.add(Calendar.MINUTE, -deltaMinutes);

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -82,6 +82,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null,
                 "imei:863070010423167,tracker,1211060621,,F,062152.000,A,2220.6914,N,11407.5506,E,15.85,347.84,"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "imei:863070012698733,tracker,1303092334,,F,193427.000,A,5139.0369,N,03907.2791,E,0.00,,"));
     }
 
 }

File: src/org/traccar/ServerManager.java
Patch:
@@ -675,7 +675,7 @@ private void initTlt2hServer(String protocol) throws SQLException {
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
                     byte delimiter[] = { (byte) '#', (byte) '#' };
                     pipeline.addLast("frameDecoder",
-                            new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
+                            new DelimiterBasedFrameDecoder(32 * 1024, ChannelBuffers.wrappedBuffer(delimiter)));
                     pipeline.addLast("stringDecoder", new StringDecoder());
                     pipeline.addLast("stringEncoder", new StringEncoder());
                     pipeline.addLast("objectDecoder", new Tlt2hProtocolDecoder(ServerManager.this));

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -154,7 +154,7 @@ protected Object decode(
         position.setAltitude(0.0);
 
         // Speed
-        position.setSpeed(Double.valueOf(parser.group(index++)) * 0.539957);
+        position.setSpeed(Double.valueOf(parser.group(index++)));
 
         // Course
         String course = parser.group(index++);

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -11,6 +11,9 @@ public void testDecode() throws Exception {
         Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
+        assertNotNull(decoder.decode(null, null,
+                "130302125349,+79604870506,GPRMC,085349.000,A,4503.2392,N,03858.5660,E,6.95,154.65,020313,,,A*6C,F,, imei:012207007744243,03,-1.5,F:4.15V,1,139,28048,250,01,278A,5072"));
+
         assertNotNull(decoder.decode(null, null,
                 "111111120009,+436763737552,GPRMC,120009.590,A,4639.6774,N,01418.5737,E,0.00,0.00,111111,,,A*68,F,, imei:359853000144328,04,481.2,F:4.15V,0,139,2689,232,03,2725,0576"));
 

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -49,8 +49,8 @@ public MeiligaoProtocolDecoder(ServerManager serverManager) {
             "([EW])," +
             "(\\d+.\\d+)," +                    // Speed
             "(\\d+\\.?\\d*)?," +                // Course
-            "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
-            "[^\\|]+\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
+            "(\\d{2})(\\d{2})(\\d{2})" +       // Date (DDMMYY)
+            "[^\\|]*\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
             "(\\d+\\.?\\d*)\\|" +               // Altitude
             "([0-9a-fA-F]+)?" +                 // State
             "(?:\\|([0-9a-fA-F]+),([0-9a-fA-F]+))?" + // ADC

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -35,6 +35,9 @@ public void testDecode() throws Exception {
 
         byte[] buf7 = {0x12,0x34,0x56,0x78,(byte)0x9F,(byte)0xFF,(byte)0xFF,(byte)0x99,0x55,0x30,0x32,0x30,0x36,0x30,0x30,0x2E,0x39,0x33,0x30,0x2C,0x41,0x2C,0x32,0x33,0x30,0x39,0x2E,0x32,0x30,0x35,0x31,0x2C,0x4E,0x2C,0x31,0x31,0x33,0x31,0x38,0x2E,0x38,0x34,0x34,0x39,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x30,0x39,0x30,0x37,0x31,0x30,0x2C,0x2C,0x2C,0x41,0x2A,0x36,0x41,0x7C,0x32,0x2E,0x36,0x7C,0x39,0x36,0x2E,0x37,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x33,0x46,0x46,0x46,0x7C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,(byte)0xC4,0x52,0x0D,0x0A};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf7, 0, buf7.length)));
+        
+        byte[] buf8 = {0x59,0x77,0x20,0x37,0x44,0x05,(byte)0x84,(byte)0x99,0x55,0x30,0x32,0x30,0x31,0x31,0x37,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x34,0x31,0x31,0x37,0x2E,0x39,0x32,0x31,0x32,0x2C,0x4E,0x2C,0x30,0x38,0x31,0x33,0x30,0x2E,0x32,0x30,0x39,0x36,0x2C,0x57,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x33,0x30,0x33,0x2E,0x38,0x35,0x2C,0x32,0x36,0x30,0x32,0x31,0x33,0x7C,0x31,0x2E,0x36,0x7C,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x30,0x30,0x30,0x30,0x71,(byte)0xCD,0x0D,0x0A};
+        decoder.decode(null, null, factory.getBuffer(buf8, 0, buf8.length));
 
     }
 

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -49,8 +49,8 @@ public MeiligaoProtocolDecoder(ServerManager serverManager) {
             "([EW])," +
             "(\\d+.\\d+)," +                    // Speed
             "(\\d+\\.?\\d*)?," +                // Course
-            "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
-            "[^\\|]+\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
+            "(\\d{2})(\\d{2})(\\d{2})" +       // Date (DDMMYY)
+            "[^\\|]*\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
             "(\\d+\\.?\\d*)\\|" +               // Altitude
             "([0-9a-fA-F]+)?" +                 // State
             "(?:\\|([0-9a-fA-F]+),([0-9a-fA-F]+))?" + // ADC

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -35,6 +35,9 @@ public void testDecode() throws Exception {
 
         byte[] buf7 = {0x12,0x34,0x56,0x78,(byte)0x9F,(byte)0xFF,(byte)0xFF,(byte)0x99,0x55,0x30,0x32,0x30,0x36,0x30,0x30,0x2E,0x39,0x33,0x30,0x2C,0x41,0x2C,0x32,0x33,0x30,0x39,0x2E,0x32,0x30,0x35,0x31,0x2C,0x4E,0x2C,0x31,0x31,0x33,0x31,0x38,0x2E,0x38,0x34,0x34,0x39,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x30,0x39,0x30,0x37,0x31,0x30,0x2C,0x2C,0x2C,0x41,0x2A,0x36,0x41,0x7C,0x32,0x2E,0x36,0x7C,0x39,0x36,0x2E,0x37,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x33,0x46,0x46,0x46,0x7C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,(byte)0xC4,0x52,0x0D,0x0A};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf7, 0, buf7.length)));
+        
+        byte[] buf8 = {0x59,0x77,0x20,0x37,0x44,0x05,(byte)0x84,(byte)0x99,0x55,0x30,0x32,0x30,0x31,0x31,0x37,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x34,0x31,0x31,0x37,0x2E,0x39,0x32,0x31,0x32,0x2C,0x4E,0x2C,0x30,0x38,0x31,0x33,0x30,0x2E,0x32,0x30,0x39,0x36,0x2C,0x57,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x33,0x30,0x33,0x2E,0x38,0x35,0x2C,0x32,0x36,0x30,0x32,0x31,0x33,0x7C,0x31,0x2E,0x36,0x7C,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x30,0x30,0x30,0x30,0x71,(byte)0xCD,0x0D,0x0A};
+        decoder.decode(null, null, factory.getBuffer(buf8, 0, buf8.length));
 
     }
 

File: test/org/traccar/protocol/GpsGateProtocolDecoderTest.java
Patch:
@@ -13,6 +13,8 @@ public void testDecode() throws Exception {
         decoder.setDataManager(new TestDataManager());
 
         assertNull(decoder.decode(null, null, "$FRLIN,,user1,8IVHF*7A"));
+        
+        assertNull(decoder.decode(null, null, "$FRLIN,,354503026292842,VGZTHKT*0C"));
 
         assertNull(decoder.decode(null, null, "$FRLIN,IMEI,1234123412341234,*7B"));
 

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -96,12 +96,12 @@ protected Object decode(
 
         // Get device by IMEI
         String imei = parser.group(index++);
-        try {
+        /*try {
             position.setDeviceId(getDataManager().getDeviceByImei(imei).getId());
         } catch(Exception error) {
             Log.warning("Unknown device - " + imei);
             return null;
-        }
+        }*/
 
         // Alarm message
         extendedInfo.append("<alarm>");
@@ -134,7 +134,7 @@ protected Object decode(
         } else if (deltaMinutes > 12) {
             deltaMinutes -= 24 * 60;
         }
-        time.add(Calendar.MINUTE, deltaMinutes);
+        time.add(Calendar.MINUTE, -deltaMinutes);
         position.setTime(time.getTime());
 
         // Validity

File: src/org/traccar/protocol/TeltonikaFrameDecoder.java
Patch:
@@ -22,7 +22,7 @@
 
 public class TeltonikaFrameDecoder extends FrameDecoder {
 
-    private static final int MESSAGE_MINIMUM_LENGTH = 10;
+    private static final int MESSAGE_MINIMUM_LENGTH = 12;
     
     @Override
     protected Object decode(
@@ -43,8 +43,8 @@ protected Object decode(
             }
         } else {
             int dataLength = buf.getInt(buf.readerIndex() + 4);
-            if (buf.readableBytes() >= (dataLength + 10)) {
-                return buf.readBytes(dataLength + 10);
+            if (buf.readableBytes() >= (dataLength + 12)) {
+                return buf.readBytes(dataLength + 12);
             }
         }
         

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -15,6 +15,9 @@ public void testDecode() throws Exception {
         assertNotNull(decoder.decode(null, null,
                 "*HQ,123456789012345,V1,155850,A,5214.5346,N,2117.4683,E,0.00,270.90,131012,ffffffff,000000,000000,000000,000000"));
 
+        assertNotNull(decoder.decode(null, null,
+                "*HQ,354188045498669,V1,195200,A,701.8915,S,3450.3399,W,0.00,205.70,050213,ffffffff,000243,000000,000000"));
+
     }
 
 }

File: src/org/traccar/protocol/NavigilFrameDecoder.java
Patch:
@@ -47,8 +47,9 @@ protected Object decode(
         if (buf.readableBytes() >= length) {
             if (hasPreamble) {
                 buf.readUnsignedInt();
+                length -= 4;
             }
-            return buf.readBytes(length - 4);
+            return buf.readBytes(length);
         }
 
         return null;

File: src/org/traccar/protocol/TeltonikaProtocolDecoder.java
Patch:
@@ -67,6 +67,7 @@ private List<Position> parseLocation(Channel channel, ChannelBuffer buf) {
             Position position = new Position();
             StringBuilder extendedInfo = new StringBuilder("<protocol>teltonika</protocol>");
             
+            position.setDeviceId(deviceId);
             position.setTime(new Date(buf.readLong()));
             
             extendedInfo.append("<priority>");

File: test/org/traccar/geocode/GoogleReverseGeocoderTest.java
Patch:
@@ -11,7 +11,7 @@ public void testGetAddress() {
         ReverseGeocoder reverseGeocoder = new GoogleReverseGeocoder();
         
         assertEquals(
-                "Novotsentral'naya ulitsa, 45, Saint Petersburg, Russia",
+                "ulitsa Morskiye dubki, 2, Lisy Nos, Saint Petersburg, Russia, 197755",
                 reverseGeocoder.getAddress(60.0, 30.0));
 
     }

File: src/org/traccar/ServerManager.java
Patch:
@@ -369,7 +369,7 @@ private void initMeiligaoServer(String protocol) throws SQLException {
             serverList.add(new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, -4, 4));
+                    pipeline.addLast("frameDecoder", new MeiligaoFrameDecoder());
                     pipeline.addLast("objectDecoder", new MeiligaoProtocolDecoder(ServerManager.this));
                 }
             });

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -150,6 +150,7 @@ else if (deviceId != 0 && (type == MSG_POINT || type == MSG_ALARM || type == MSG
                         extendedInfo.append("<alarm>true</alarm>");
                     }
                     if (buf.readUnsignedShort() > buf.readableBytes()) {
+                        lastIndex += 1;
                         break; // workaround for device bug
                     }
                     lastIndex = buf.readUnsignedInt();

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -149,7 +149,9 @@ else if (deviceId != 0 && (type == MSG_POINT || type == MSG_ALARM || type == MSG
                     if (subtype == MSG_ALARM) {
                         extendedInfo.append("<alarm>true</alarm>");
                     }
-                    buf.readUnsignedShort(); // length
+                    if (buf.readUnsignedShort() > buf.readableBytes()) {
+                        break; // workaround for device bug
+                    }
                     lastIndex = buf.readUnsignedInt();
                     position.setId(lastIndex);
                 } else {

File: test/org/traccar/protocol/Avl08ProtocolDecoderTest.java
Patch:
@@ -12,6 +12,9 @@ public void testDecode() throws Exception {
         Avl08ProtocolDecoder decoder = new Avl08ProtocolDecoder(null);
         decoder.setDataManager(new TestDataManager());
 
+        assertNotNull(decoder.decode(null, null,
+                "$$B0456123|61$GPRMC,114725.00,A,1258.68276,N,07730.60237,E,0.410,,080113,,,A*79|1.44|0.66|1.27|000000000000|20130108114425|03600000|00000000|053C2BFE|0000|0.3325|0063|2005"));
+
         assertNull(decoder.decode(null, null,
                 "$$AE359772033395899|AA000000000000000000000000000000000000000000000000000000000000|00.0|00.0|00.0|000000000000|20090215000153|13601435|00000000|00000000|0000|0.0000|0007|2DAA"));
 

File: src/org/traccar/ServerManager.java
Patch:
@@ -411,7 +411,7 @@ private void initProgressServer(String protocol) throws SQLException {
             TrackerServer server = new TrackerServer(this, new ServerBootstrap(), protocol) {
                 @Override
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, 0, 0));
+                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 2, 4, 0));
                     pipeline.addLast("objectDecoder", new ProgressProtocolDecoder(ServerManager.this));
                 }
             };

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -65,7 +65,7 @@ public ProgressProtocolDecoder(ServerManager serverManager) {
     /**
      * Hack to load last index from database
      */
-    /*private void loadLastIndex() {
+    private void loadLastIndex() {
         try {
             Properties p = getServerManager().getProperties();
             AdvancedConnection connection = new AdvancedConnection(
@@ -79,7 +79,7 @@ public ProgressProtocolDecoder(ServerManager serverManager) {
             }
         } catch(Exception error) {
         }
-    }*/
+    }
 
     /**
      * Request archive messages
@@ -127,7 +127,7 @@ protected Object decode(
         }
 
         // Position
-        else if (/*deviceId != 0 &&*/ (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
+        else if (deviceId != 0 && (type == MSG_POINT || type == MSG_ALARM || type == MSG_LOGMSG)) {
             List<Position> positions = new LinkedList<Position>();
 
             int recordCount = 1;

File: src/org/traccar/BaseProtocolDecoder.java
Patch:
@@ -47,6 +47,7 @@ public BaseProtocolDecoder() {
 
     public BaseProtocolDecoder(ServerManager serverManager) {
         this.serverManager = serverManager;
+        dataManager = serverManager.getDataManager();
     }
 
 }

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -62,6 +62,7 @@ public T55ProtocolDecoder(ServerManager serverManager) {
     /**
      * Decode message
      */
+    @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, Object msg)
             throws Exception {

File: src/org/traccar/protocol/T55ProtocolDecoder.java
Patch:
@@ -70,7 +70,7 @@ protected Object decode(
 
         // Detect device ID
         if (sentence.contains("$PGID")) {
-            String imei = sentence.substring(6, 6 + 15);
+            String imei = sentence.substring(6, sentence.length() - 3);
             try {
                 deviceId = getDataManager().getDeviceByImei(imei).getId();
             } catch(Exception error) {

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -61,6 +61,7 @@ public Gps103ProtocolDecoder(DataManager dataManager) {
     /**
      * Decode message
      */
+    @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, Object msg)
             throws Exception {
@@ -143,7 +144,7 @@ protected Object decode(
 
         // Speed
         position.setSpeed(Double.valueOf(parser.group(index++)));
-        
+
         // Course
         String course = parser.group(index++);
         if (course != null) {

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -46,6 +46,7 @@ public MeiligaoProtocolDecoder(DataManager dataManager) {
     /**
      * Regular expressions pattern
      */
+    //"020600.930,A,2309.2051,N,11318.8449,E,0.00,0.00,090710,,,A*6A|2.6|96.7|0000|0000,3FFF|000000000"
     //"155422.000,V,2230.7623,N,11403.4218,E,0.00,0,060211,,*1A|0.0|26|0000|0000,0000|0000000000000000|63|00000000"
     static private Pattern pattern = Pattern.compile(
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d{3})," + // Time (HHMMSS.SSS)
@@ -58,7 +59,7 @@ public MeiligaoProtocolDecoder(DataManager dataManager) {
             "(\\d+\\.?\\d*)?," +                // Course
             "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
             "[^\\|]+\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
-            "(\\d+)\\|" +                       // Altitude
+            "(\\d+\\.?\\d*)\\|" +               // Altitude
             "([0-9a-fA-F]+)" +                  // State
             ".*"); // TODO: parse ADC
 
@@ -88,6 +89,7 @@ private String getId(ChannelBuffer buf) {
     /**
      * Decode message
      */
+    @Override
     protected Object decode(
             ChannelHandlerContext ctx, Channel channel, Object msg)
             throws Exception {

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -31,6 +31,9 @@ public void testDecode() throws Exception {
         
         byte[] buf6 = {(byte)0x86,0x21,0x70,0x01,0x42,0x45,(byte)0x8F,(byte)0x99,(byte)0x99,0x50,0x31,0x39,0x32,0x39,0x35,0x38,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x33,0x36,0x32,0x37,0x2E,0x31,0x36,0x39,0x39,0x2C,0x4E,0x2C,0x30,0x31,0x30,0x34,0x33,0x2E,0x35,0x36,0x32,0x37,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x32,0x33,0x39,0x2C,0x30,0x39,0x31,0x32,0x31,0x32,0x2C,0x2C,0x2A,0x30,0x46,0x7C,0x31,0x2E,0x30,0x7C,0x37,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x31,0x41,0x39,0x2C,0x30,0x31,0x39,0x37,0x7C,0x30,0x32,0x35,0x44,0x30,0x30,0x30,0x32,0x30,0x30,0x35,0x41,0x38,0x36,0x39,0x46,0x7C,0x31,0x32,0x7C,0x30,0x30,0x30,0x33,0x33,0x42,0x42,0x33,(byte)0xE2,0x48,0x0D,0x0A};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf6, 0, buf6.length)));
+        
+        byte[] buf7 = {0x12,0x34,0x56,0x78,(byte)0x9F,(byte)0xFF,(byte)0xFF,(byte)0x99,0x55,0x30,0x32,0x30,0x36,0x30,0x30,0x2E,0x39,0x33,0x30,0x2C,0x41,0x2C,0x32,0x33,0x30,0x39,0x2E,0x32,0x30,0x35,0x31,0x2C,0x4E,0x2C,0x31,0x31,0x33,0x31,0x38,0x2E,0x38,0x34,0x34,0x39,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x30,0x39,0x30,0x37,0x31,0x30,0x2C,0x2C,0x2C,0x41,0x2A,0x36,0x41,0x7C,0x32,0x2E,0x36,0x7C,0x39,0x36,0x2E,0x37,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x33,0x46,0x46,0x46,0x7C,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,(byte)0xC4,0x52,0x0D,0x0A};
+        assertNotNull(decoder.decode(null, null, factory.getBuffer(buf7, 0, buf7.length)));
 
     }
 

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -44,7 +44,7 @@ public Xexun2ProtocolDecoder(DataManager dataManager) {
     static private Pattern pattern = Pattern.compile(
             "[\r\n]*" +
             "(\\d+)," +                         // Serial
-            "(\\+\\d+)," +                      // Number
+            "(\\+?\\d+)," +                      // Number
             "GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d{3})," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity
@@ -62,7 +62,7 @@ public Xexun2ProtocolDecoder(DataManager dataManager) {
             "(\\d+)," +                         // IMEI
             "(\\d+)," +                         // Satellites
             "(\\d+\\.\\d+)," +                  // Altitude
-            "F:(\\d+\\.\\d+)V," +               // Power
+            "[FL]:(\\d+\\.\\d+)V," +               // Power
             ".*" +
             "[\r\n]*");
 

File: src/org/traccar/protocol/Xexun2ProtocolDecoder.java
Patch:
@@ -44,7 +44,7 @@ public Xexun2ProtocolDecoder(DataManager dataManager) {
     static private Pattern pattern = Pattern.compile(
             "[\r\n]*" +
             "(\\d+)," +                         // Serial
-            "(\\+\\d+)," +                      // Number
+            "(\\+?\\d+)," +                      // Number
             "GPRMC," +
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d{3})," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -19,6 +19,8 @@ public void testDecode() throws Exception {
         assertNotNull(decoder.decode(null, null,
                 "111111120009,+436763737552,GPRMC,120600.000,A,6000.0000,N,13000.0000,E,0.00,0.00,010112,,,A*68,F,help me!, imei:123456789012345,04,481.2,L:3.5V,0,139,2689,232,03,2725,0576"));
 
+        assertNotNull(decoder.decode(null, null,
+                "111111120009,436763737552,GPRMC,120600.000,A,6000.0000,N,13000.0000,E,0.00,0.00,010112,,,A*68,F,help me!, imei:123456789012345,04,481.2,L:3.5V,0,139,2689,232,03,2725,0576"));
     }
 
 }

File: src/org/traccar/protocol/Gt02ProtocolDecoder.java
Patch:
@@ -17,8 +17,6 @@
 
 import java.util.Calendar;
 import java.util.TimeZone;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
 import org.jboss.netty.buffer.ChannelBuffer;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.channel.Channel;
@@ -116,7 +114,7 @@ else if (type == MSG_DATA) {
             // Speed
             position.setSpeed((double) buf.readUnsignedByte());
             
-            // Speed
+            // Course
             position.setCourse((double) buf.readUnsignedShort());
             
             buf.skipBytes(3); // reserved

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -106,9 +106,7 @@ protected Object decode(
             sendBuf.writeBytes(array);
             sendBuf.writeShort(0x4000);
             sendBuf.writeByte(0x01);
-            array = new byte[sendBuf.readableBytes()];
-            sendBuf.getBytes(0, array);
-            sendBuf.writeShort(Crc.crc16X25Ccitt(array));
+            sendBuf.writeShort(Crc.crc16X25Ccitt(sendBuf.toByteBuffer()));
             sendBuf.writeByte('\r');
             sendBuf.writeByte('\n');
             if (channel != null) {

File: src/org/traccar/Server.java
Patch:
@@ -829,8 +829,8 @@ private void initGt02Server(Properties properties) throws SQLException {
 
             server.setPipelineFactory(new GenericPipelineFactory(server, dataManager, isLoggerEnabled(), resetDelay, geocoder) {
                 protected void addSpecificHandlers(ChannelPipeline pipeline) {
-                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(4 * 1024, 12, 2, 2, 0));
-                    pipeline.addLast("objectDecoder", new NavisProtocolDecoder(getDataManager()));
+                    pipeline.addLast("frameDecoder", new LengthFieldBasedFrameDecoder(1024, 2, 1, 2, 0));
+                    pipeline.addLast("objectDecoder", new Gt02ProtocolDecoder(getDataManager()));
                 }
             });
 

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -48,7 +48,7 @@ public XexunProtocolDecoder(DataManager dataManager) {
             "([AV])," +                         // Validity
             "([\\d]{2})([\\d]{2}.[\\d]{4})," +  // Latitude (DDMM.MMMM)
             "([NS])," +
-            "([\\d]{3})([\\d]{2}.[\\d]{4})," +  // Longitude (DDDMM.MMMM)
+            "([\\d]{2,3})([\\d]{2}.[\\d]{4})," + // Longitude (DDDMM.MMMM)
             "([EW])," +
             "([\\d]+.[\\d]+)," +                // Speed
             "([\\d]+.[\\d]+)?," +               // Course

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -21,6 +21,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null,
                 "GPRMC,080303.000,A,5546.7313,N,03738.6005,E,0.56,160.13,100311,,,A*6A,L,imei:354778030461167,"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "GPRMC,014623.000,A,4710.8260,N,1948.1220,E,0.11,105.40,111212,00,0000.0,A*49,F,,imei:357713002048962,"));
 
     }
 

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -46,6 +46,7 @@ public MeiligaoProtocolDecoder(DataManager dataManager) {
     /**
      * Regular expressions pattern
      */
+    //"155422.000,V,2230.7623,N,11403.4218,E,0.00,0,060211,,*1A|0.0|26|0000|0000,0000|0000000000000000|63|00000000"
     static private Pattern pattern = Pattern.compile(
             "(\\d{2})(\\d{2})(\\d{2})\\.(\\d{3})," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity
@@ -54,7 +55,7 @@ public MeiligaoProtocolDecoder(DataManager dataManager) {
             "(\\d{3})(\\d{2}\\.\\d{4})," +      // Longitude (DDDMM.MMMM)
             "([EW])," +
             "(\\d+.\\d+)," +                    // Speed
-            "(\\d+\\.?\\d+)?," +                // Course
+            "(\\d+\\.?\\d*)?," +                // Course
             "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
             "[^\\|]+\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
             "(\\d+)\\|" +                       // Altitude

File: src/org/traccar/protocol/NavisProtocolDecoder.java
Patch:
@@ -277,12 +277,11 @@ private Object processArray(Channel channel, ChannelBuffer buf) {
     private Object processHandshake(Channel channel, ChannelBuffer buf) {
         buf.readByte(); // semicolon symbol
         imei = buf.toString(Charset.defaultCharset());
-
         try {
             databaseDeviceId = getDataManager().getDeviceByImei(imei).getId();
             sendReply(channel, ChannelBuffers.copiedBuffer(ByteOrder.LITTLE_ENDIAN, "*<S", charset));
         } catch(Exception error) {
-            Log.warning(error.toString());
+            Log.warning("Unknown device - " + imei);
         }
         return null;
     }

File: src/org/traccar/GenericPipelineFactory.java
Patch:
@@ -81,7 +81,7 @@ public void log(ChannelEvent e) {
                 Log.fine(msg);
             } else if (e instanceof ExceptionEvent) {
                 ExceptionEvent event = (ExceptionEvent) e;
-                Log.warning(event.getCause().getMessage());
+                Log.warning(event.getCause().toString());
             }
             // TODO: handle other events
         }

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -22,6 +22,7 @@
 import org.jboss.netty.channel.Channel;
 import org.jboss.netty.channel.ChannelHandlerContext;
 import org.traccar.GenericProtocolDecoder;
+import org.traccar.helper.Log;
 import org.traccar.model.DataManager;
 import org.traccar.model.Position;
 
@@ -81,6 +82,7 @@ protected Object decode(
         // Parse message
         Matcher parser = pattern.matcher(sentence);
         if (!parser.matches()) {
+            Log.info("Parsing error");
             return null;
         }
 

File: src/org/traccar/model/DatabaseDataManager.java
Patch:
@@ -171,8 +171,9 @@ public synchronized void removeDevice(Device device) throws SQLException {
     public Device getDeviceByImei(String imei) throws SQLException {
 
         if ((devices == null) || (Calendar.getInstance().getTimeInMillis() - devicesLastUpdate.getTimeInMillis() > devicesRefreshDelay)) {
+            List<Device> list = getDevices();
             devices = new HashMap<String, Device>();
-            for (Device device: getDevices()) {
+            for (Device device: list) {
                 devices.put(device.getImei(), device);
             }
             devicesLastUpdate = Calendar.getInstance();

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -57,6 +57,9 @@ public void testDecode() throws Exception {
         // Over speed alarm
         assertNotNull(decoder.decode(null, null,
                 "imei:359586015829802,speed,0809231429,13554900601,F,062947.294,A,2234.4026,N,11354.3277,E,0.00,"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "imei:863070010423167,tracker,1211051840,,F,104000.000,A,2220.6483,N,11407.6377,,0,0,"));
 
     }
 

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -57,7 +57,7 @@ public MeiligaoProtocolDecoder(DataManager dataManager) {
             "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
             "[^\\|]+\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
             "(\\d+)\\|" +                       // Altitude
-            "([0-9a-fA-F]+)\\|" +               // State
+            "([0-9a-fA-F]+)" +                  // State
             ".*"); // TODO: parse ADC
 
     /**

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -23,6 +23,9 @@ public void testDecode() throws Exception {
         byte[] buf3 = {0x33,0x58,0x01,(byte)0x97,0x03,0x58,0x1F,(byte)0x99,0x55,0x31,0x33,0x34,0x33,0x35,0x31,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x30,0x39,0x32,0x35,0x2E,0x35,0x30,0x32,0x35,0x2C,0x4E,0x2C,0x30,0x36,0x39,0x31,0x34,0x2E,0x38,0x31,0x30,0x37,0x2C,0x57,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x32,0x33,0x2C,0x33,0x30,0x31,0x30,0x31,0x32,0x2C,0x2C,0x2A,0x32,0x43,0x7C,0x30,0x2E,0x38,0x7C,0x31,0x38,0x36,0x7C,0x32,0x30,0x30,0x30,0x7C,0x30,0x31,0x32,0x36,0x2C,0x30,0x30,0x46,0x46,0x7C,0x30,0x32,0x44,0x45,0x30,0x30,0x30,0x32,0x44,0x38,0x43,0x44,0x42,0x34,0x31,0x35,0x7C,0x30,0x36,0x7C,0x30,0x30,0x46,0x44,0x36,0x42,0x37,0x39,(byte)0x95,(byte)0x82,0x0D,0x0A};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf3, 0, buf3.length)));
 
+        byte[] buf4 = {0x16,(byte)0x91,0x00,0x04,(byte)0x84,0x12,0x4F,(byte)0x99,0x55,0x31,0x34,0x30,0x36,0x30,0x33,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x30,0x39,0x33,0x34,0x2E,0x32,0x35,0x35,0x34,0x2C,0x4E,0x2C,0x30,0x36,0x39,0x31,0x33,0x2E,0x30,0x39,0x36,0x36,0x2C,0x57,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x2C,0x33,0x30,0x31,0x30,0x31,0x32,0x2C,0x2C,0x2A,0x30,0x32,0x7C,0x30,0x2E,0x38,0x7C,0x32,0x30,0x37,0x7C,0x30,0x30,0x30,0x30,(byte)0xFA,0x42,0x0D,0x0A};
+        assertNotNull(decoder.decode(null, null, factory.getBuffer(buf4, 0, buf4.length)));
+        
     }
 
 }

File: src/org/traccar/TrackerServer.java
Patch:
@@ -87,7 +87,6 @@ public void start() {
     public void stop() {
         ChannelGroupFuture future = getChannelGroup().close();
         future.awaitUninterruptibly();
-        getFactory().releaseExternalResources();
     }
 
 }

File: src/org/traccar/protocol/Avl08ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ public class Avl08ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public Avl08ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public Avl08ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/EnforaProtocolDecoder.java
Patch:
@@ -37,8 +37,8 @@ public class EnforaProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public EnforaProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public EnforaProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/Ev603ProtocolDecoder.java
Patch:
@@ -39,8 +39,8 @@ public class Ev603ProtocolDecoder extends GenericProtocolDecoder{
     /**
      * Initialize
      */
-    public Ev603ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public Ev603ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
     
     /**

File: src/org/traccar/protocol/Gl100ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ public class Gl100ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public Gl100ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public Gl100ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ public class Gl200ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public Gl200ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public Gl200ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ public class Gps103ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public Gps103ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public Gps103ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/H02ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ public class H02ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public H02ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public H02ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -36,8 +36,8 @@ public class Jt600ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public Jt600ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public Jt600ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/MeiligaoProtocolDecoder.java
Patch:
@@ -38,8 +38,8 @@ public class MeiligaoProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public MeiligaoProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public MeiligaoProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**
@@ -55,7 +55,7 @@ public MeiligaoProtocolDecoder(DataManager dataManager, Integer resetDelay) {
             "(\\d+.\\d+)," +                    // Speed
             "(\\d+\\.?\\d+)?," +                // Course
             "(\\d{2})(\\d{2})(\\d{2})," +       // Date (DDMMYY)
-            "[^\\|]+\\|(\\d+.\\d)\\|" +         // Dilution of precision
+            "[^\\|]+\\|(\\d+\\.\\d)\\|" +       // Dilution of precision
             "(\\d+)\\|" +                       // Altitude
             "([0-9a-fA-F]+)\\|" +               // State
             ".*"); // TODO: parse ADC

File: src/org/traccar/protocol/ProgressProtocolDecoder.java
Patch:
@@ -39,8 +39,8 @@ public class ProgressProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public ProgressProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public ProgressProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /*

File: src/org/traccar/protocol/V680ProtocolDecoder.java
Patch:
@@ -33,8 +33,8 @@ public class V680ProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public V680ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public V680ProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: src/org/traccar/protocol/XexunProtocolDecoder.java
Patch:
@@ -34,8 +34,8 @@ public class XexunProtocolDecoder extends GenericProtocolDecoder {
     /**
      * Initialize
      */
-    public XexunProtocolDecoder(DataManager dataManager, Integer resetDelay) {
-        super(dataManager, resetDelay);
+    public XexunProtocolDecoder(DataManager dataManager) {
+        super(dataManager);
     }
 
     /**

File: test/org/traccar/protocol/Avl08ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Avl08ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        Avl08ProtocolDecoder decoder = new Avl08ProtocolDecoder(new TestDataManager(), 0);
+        Avl08ProtocolDecoder decoder = new Avl08ProtocolDecoder(new TestDataManager());
 
         assertNull(decoder.decode(null, null,
                 "$$AE359772033395899|AA000000000000000000000000000000000000000000000000000000000000|00.0|00.0|00.0|000000000000|20090215000153|13601435|00000000|00000000|0000|0.0000|0007|2DAA"));

File: test/org/traccar/protocol/EnforaProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class EnforaProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        EnforaProtocolDecoder decoder = new EnforaProtocolDecoder(new TestDataManager(), 0);
+        EnforaProtocolDecoder decoder = new EnforaProtocolDecoder(new TestDataManager());
         ChannelBufferFactory factory = new HeapChannelBufferFactory();
 
         byte[] buf1 = {0x00,0x0A,0x08,0x00,0x20,0x20,0x20,0x20,0x20,0x30,0x31,0x31,0x30,0x37,0x30,0x30,0x30,0x30,0x35,0x37,0x30,0x32,0x36,0x37};

File: test/org/traccar/protocol/Ev603ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Ev603ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        Ev603ProtocolDecoder decoder = new Ev603ProtocolDecoder(new TestDataManager(), 0);
+        Ev603ProtocolDecoder decoder = new Ev603ProtocolDecoder(new TestDataManager());
         
         assertNull(decoder.decode(null, null, "!5,17,V"));
 

File: test/org/traccar/protocol/Gl100ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Gl100ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        Gl100ProtocolDecoder decoder = new Gl100ProtocolDecoder(new TestDataManager(), 0);
+        Gl100ProtocolDecoder decoder = new Gl100ProtocolDecoder(new TestDataManager());
         
         assertNotNull(decoder.decode(null, null,
                 "+RESP:GTSOS,359231030000010,0,0,0,1,4.3,92,70.0,1,121.354335,31.222073,20090101000000,0460,0000,18d8,6141,00,11F0,0102120204"));

File: test/org/traccar/protocol/Gl200ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Gl200ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new TestDataManager(), 0);
+        Gl200ProtocolDecoder decoder = new Gl200ProtocolDecoder(new TestDataManager());
 
         assertNotNull(decoder.decode(null, null,
                 "+RESP:GTFRI,020102,000035988863964,,0,0,1,1,4.3,92,70.0,121.354335,31.222073,20090214013254,0460,0000,18d8,6141,00,,20090214093254,11F0"));

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Gps103ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new TestDataManager(), 0);
+        Gps103ProtocolDecoder decoder = new Gps103ProtocolDecoder(new TestDataManager());
 
         // Log on request
         //assertNull(decoder.decode(null, null, "##,imei:359586015829802,A"));

File: test/org/traccar/protocol/H02ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class H02ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        H02ProtocolDecoder decoder = new H02ProtocolDecoder(new TestDataManager(), 0);
+        H02ProtocolDecoder decoder = new H02ProtocolDecoder(new TestDataManager());
         
         assertNotNull(decoder.decode(null, null,
                 "*HQ,123456789012345,V1,155850,A,5214.5346,N,2117.4683,E,0.00,270.90,131012,ffffffff,000000,000000,000000,000000"));

File: test/org/traccar/protocol/Jt600ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@ public class Jt600ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        Jt600ProtocolDecoder decoder = new Jt600ProtocolDecoder(new TestDataManager(), 0);
+        Jt600ProtocolDecoder decoder = new Jt600ProtocolDecoder(new TestDataManager());
         
         byte[] buf1 = {0x24,0x31,0x10,0x21,0x60,0x01,0x11,0x00,0x1B,0x16,0x02,0x11,0x05,0x59,0x10,0x22,0x32,(byte)0x98,0x62,0x11,0x40,0x46,0x22,0x7B,0x05,(byte)0x98,0x09,0x50,(byte)0x80,0x01,0x23,0x27,(byte)0x95,0x14,0x35,0x16,0x1F};
         assertNotNull(decoder.decode(null, null, ChannelBuffers.wrappedBuffer(buf1)));

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class MeiligaoProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        MeiligaoProtocolDecoder decoder = new MeiligaoProtocolDecoder(new TestDataManager(), 0);
+        MeiligaoProtocolDecoder decoder = new MeiligaoProtocolDecoder(new TestDataManager());
         ChannelBufferFactory factory = new HeapChannelBufferFactory();
 
         byte[] buf1 = {0x12,0x34,0x56,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,0x50,0x00,(byte)0x8B,(byte)0x9B,0x0D,0x0A};

File: test/org/traccar/protocol/ST210ProtocolDecoderTest.java
Patch:
@@ -11,7 +11,7 @@ public class ST210ProtocolDecoderTest {
     public void testDecode() throws Exception {
 
         ST210ProtocolDecoder decoder = new ST210ProtocolDecoder(
-                new TestDataManager(), 0);
+                new TestDataManager());
 
         //Status
         assertNotNull(decoder

File: test/org/traccar/protocol/T55ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class T55ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        T55ProtocolDecoder decoder = new T55ProtocolDecoder(new TestDataManager(), 0);
+        T55ProtocolDecoder decoder = new T55ProtocolDecoder(new TestDataManager());
         
         assertNull(decoder.decode(null, null, "$PGID,359853000144328*0F"));
 

File: test/org/traccar/protocol/Tk103ProtocolDecoderTest.java
Patch:
@@ -9,7 +9,7 @@ public class Tk103ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new TestDataManager(), 0);
+        Tk103ProtocolDecoder decoder = new Tk103ProtocolDecoder(new TestDataManager());
 
         assertNull(decoder.decode(null, null, "(090411121854BP0000001234567890HSO"));
 

File: test/org/traccar/protocol/V680ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class V680ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        V680ProtocolDecoder decoder = new V680ProtocolDecoder(new TestDataManager(), 0);
+        V680ProtocolDecoder decoder = new V680ProtocolDecoder(new TestDataManager());
         
         assertNotNull(decoder.decode(null, null,
                 "#356823033219838#1000#0#1478#AUT#1#66830FFB#03855.6628,E,4716.6821,N,001.41,259#130812#143905"));

File: test/org/traccar/protocol/Xexun2ProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class Xexun2ProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
 
-        Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(new TestDataManager(), 0);
+        Xexun2ProtocolDecoder decoder = new Xexun2ProtocolDecoder(new TestDataManager());
 
         assertNotNull(decoder.decode(null, null,
                 "111111120009,+436763737552,GPRMC,120009.590,A,4639.6774,N,01418.5737,E,0.00,0.00,111111,,,A*68,F,, imei:359853000144328,04,481.2,F:4.15V,0,139,2689,232,03,2725,0576"));

File: test/org/traccar/protocol/XexunProtocolDecoderTest.java
Patch:
@@ -8,7 +8,7 @@ public class XexunProtocolDecoderTest {
     @Test
     public void testDecode() throws Exception {
         
-        XexunProtocolDecoder decoder = new XexunProtocolDecoder(new TestDataManager(), 0);
+        XexunProtocolDecoder decoder = new XexunProtocolDecoder(new TestDataManager());
 
         assertNotNull(decoder.decode(null, null,
                 "GPRMC,150120.000,A,3346.4463,S,15057.3083,E,0.0,117.4,010911,,,A*76,F,imei:351525010943661,"));

File: test/org/traccar/protocol/MeiligaoProtocolDecoderTest.java
Patch:
@@ -19,6 +19,9 @@ public void testDecode() throws Exception {
 
         byte[] buf2 = {0x12,0x34,0x56,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0x99,0x55,0x30,0x33,0x35,0x36,0x34,0x34,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x32,0x32,0x33,0x32,0x2E,0x36,0x30,0x38,0x33,0x2C,0x4E,0x2C,0x31,0x31,0x34,0x30,0x34,0x2E,0x38,0x31,0x33,0x37,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x2C,0x30,0x31,0x30,0x38,0x30,0x39,0x2C,0x2C,0x2A,0x31,0x43,0x7C,0x31,0x31,0x2E,0x35,0x7C,0x31,0x39,0x34,0x7C,0x30,0x30,0x30,0x30,0x7C,0x30,0x30,0x30,0x30,0x2C,0x30,0x30,0x30,0x30,0x69,0x62,0x0D,0x0A};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf2, 0, buf2.length)));
+        
+        byte[] buf3 = {0x33,0x58,0x01,(byte)0x97,0x03,0x58,0x1F,(byte)0x99,0x55,0x31,0x33,0x34,0x33,0x35,0x31,0x2E,0x30,0x30,0x30,0x2C,0x41,0x2C,0x30,0x39,0x32,0x35,0x2E,0x35,0x30,0x32,0x35,0x2C,0x4E,0x2C,0x30,0x36,0x39,0x31,0x34,0x2E,0x38,0x31,0x30,0x37,0x2C,0x57,0x2C,0x30,0x2E,0x30,0x30,0x2C,0x32,0x33,0x2C,0x33,0x30,0x31,0x30,0x31,0x32,0x2C,0x2C,0x2A,0x32,0x43,0x7C,0x30,0x2E,0x38,0x7C,0x31,0x38,0x36,0x7C,0x32,0x30,0x30,0x30,0x7C,0x30,0x31,0x32,0x36,0x2C,0x30,0x30,0x46,0x46,0x7C,0x30,0x32,0x44,0x45,0x30,0x30,0x30,0x32,0x44,0x38,0x43,0x44,0x42,0x34,0x31,0x35,0x7C,0x30,0x36,0x7C,0x30,0x30,0x46,0x44,0x36,0x42,0x37,0x39,(byte)0x95,(byte)0x82,0x0D,0x0A};
+        assertNotNull(decoder.decode(null, null, factory.getBuffer(buf3, 0, buf3.length)));
 
     }
 

File: src/org/traccar/protocol/Ev603ProtocolDecoder.java
Patch:
@@ -46,10 +46,10 @@ public Ev603ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
             "!A," +                              // Start Character
             "([\\d]{2})\\/([\\d]{2})\\/([\\d]{2})," +   // Date dd/mm/YY
             "([\\d]{2}):([\\d]{2}):([\\d]{2})," +       // Time hh:mm:ss
-            "(-?[\\d]{2})([\\d]{2}.[\\d]{4})," +  // Latitude (DDMM.MMMM)
-            "(-?[\\d]{3})([\\d]{2}.[\\d]{4})," +  // Longitude (DDDMM.MMMM)
+            "(-?[\\d]+\\.[\\d]+)," +  // Latitude (DDMM.MMMM)
+            "(-?[\\d]+\\.[\\d]+)," +  // Longitude (DDDMM.MMMM)
             "([\\d]+.[\\d]{2})," +              // Speed
-            "([\\d]{2-3}+.[\\d]{1-3})," +       // degrees
+            "([\\d]+|[\\d]+\\.[\\d]+)," +       // degrees
             ".*");
     
     static private Pattern deviceImei = Pattern.compile("([\\d]+);");

File: src/org/traccar/protocol/Ev603ProtocolDecoder.java
Patch:
@@ -46,10 +46,10 @@ public Ev603ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
             "!A," +                              // Start Character
             "([\\d]{2})\\/([\\d]{2})\\/([\\d]{2})," +   // Date dd/mm/YY
             "([\\d]{2}):([\\d]{2}):([\\d]{2})," +       // Time hh:mm:ss
-            "(-?[\\d]{2})([\\d]{2}.[\\d]{4})," +  // Latitude (DDMM.MMMM)
-            "(-?[\\d]{3})([\\d]{2}.[\\d]{4})," +  // Longitude (DDDMM.MMMM)
+            "(-?[\\d]+\\.[\\d]+)," +  // Latitude (DDMM.MMMM)
+            "(-?[\\d]+\\.[\\d]+)," +  // Longitude (DDDMM.MMMM)
             "([\\d]+.[\\d]{2})," +              // Speed
-            "([\\d]{2-3}+.[\\d]{1-3})," +       // degrees
+            "([\\d]+|[\\d]+\\.[\\d]+)," +       // degrees
             ".*");
     
     static private Pattern deviceImei = Pattern.compile("([\\d]+);");

File: src/org/traccar/TrackerEventHandler.java
Patch:
@@ -63,6 +63,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {
             try {
                 dataManager.addPosition(position);
             } catch (Exception error) {
+                Log.info("Exception during query execution");
                 Log.warning(error.getMessage());
             }
         }

File: src/org/traccar/protocol/Jt600ProtocolDecoder.java
Patch:
@@ -50,8 +50,8 @@ private Position decodeNormalMessage(ChannelBuffer buf) throws Exception {
         buf.readByte(); // header
         
         // Get device by identifier
-        int id = ChannelBufferTools.readHexInteger(buf, 10);
-        position.setDeviceId(getDataManager().getDeviceByImei(String.valueOf(id)).getId());
+        String id = Long.valueOf(ChannelBufferTools.readHexString(buf, 10)).toString();
+        position.setDeviceId(getDataManager().getDeviceByImei(id).getId());
         
         buf.readByte(); // protocol version + data type
         

File: test/org/traccar/protocol/Jt600ProtocolDecoderTest.java
Patch:
@@ -5,7 +5,7 @@
 import static org.junit.Assert.assertNotNull;
 import org.junit.Test;
 
-public class Jt600ProtocolDecoderTest1 {
+public class Jt600ProtocolDecoderTest {
 
     @Test
     public void testDecode() throws Exception {

File: test/org/traccar/geocode/GoogleReverseGeocoderTest.java
Patch:
@@ -9,9 +9,9 @@ public class GoogleReverseGeocoderTest {
     public void testGetAddress() {
 
         ReverseGeocoder reverseGeocoder = new GoogleReverseGeocoder();
-
+        
         assertEquals(
-                "Novotsentral'naya ulitsa, Saint Petersburg, Russia",
+                "Novotsentral'naya ulitsa, 45, Saint Petersburg, Russia",
                 reverseGeocoder.getAddress(60.0, 30.0));
 
     }

File: src/org/traccar/model/DatabaseDataManager.java
Patch:
@@ -15,8 +15,7 @@
  */
 package org.traccar.model;
 
-import java.sql.ResultSet;
-import java.sql.SQLException;
+import java.sql.*;
 import java.util.*;
 import org.traccar.helper.AdvancedConnection;
 import org.traccar.helper.Log;
@@ -130,7 +129,7 @@ public synchronized List<Device> getDevices() throws SQLException {
 
     public synchronized void addDevice(Device device) throws SQLException {
 
-        queryAddDevice.prepare();
+        queryAddDevice.prepare(Statement.RETURN_GENERATED_KEYS);
         queryAddDevice.setString("imei", device.getImei());
         queryAddDevice.executeUpdate();
 

File: src/org/traccar/protocol/ST210ProtocolDecoder.java
Patch:
@@ -614,7 +614,7 @@ public Object decode(ChannelHandlerContext ctx, Channel channel, Object msg) {
         	Log.info("MESSAGE DECODED WITH SUCCESS!");
         }
         catch(Exception e){
-        	Log.info("ERROR WHILE DECODING MESSAGE: " + e.getMessage());
+        	Log.severe("ERROR WHILE DECODING MESSAGE: " + e.getMessage());
         }
         
         return position;

File: src/org/traccar/Server.java
Patch:
@@ -174,7 +174,7 @@ public String format(LogRecord record) {
     }
 
     private void initGeocoder(Properties properties) throws IOException {
-        if (Boolean.parseBoolean("geocoder.enable")) {
+        if (Boolean.parseBoolean(properties.getProperty("geocoder.enable"))) {
             geocoder = new GoogleReverseGeocoder();
         }
     }

File: src/org/traccar/TrackerEventHandler.java
Patch:
@@ -55,7 +55,8 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {
                         ", longitude: " + position.getLongitude() +
                         ", altitude: " + position.getAltitude() +
                         ", speed: " + position.getSpeed() +
-                        ", course: " + position.getCourse());
+                        ", course: " + position.getCourse() +
+                        ", power: " + position.getPower());
             }
 
             // Write position to database

File: test/org/traccar/protocol/ST210ProtocolDecoderTest.java
Patch:
@@ -10,7 +10,7 @@
 import org.junit.Test;
 import org.traccar.Server;
 import org.traccar.helper.Log;
-import org.traccar.server.SocketCliente;
+//import org.traccar.server.SocketCliente;
 
 public class ST210ProtocolDecoderTest {
 

File: src/org/traccar/GenericPipelineFactory.java
Patch:
@@ -59,7 +59,7 @@ protected class StandardLoggingHandler extends LoggingHandler {
 
         @Override
         public void log(ChannelEvent e) {
-        	 server.mandaMSG();
+        	
             if (e instanceof MessageEvent) {
                 MessageEvent event = (MessageEvent) e;
                 String msg = "[" + ((InetSocketAddress) e.getChannel().getLocalAddress()).getPort() + " - ";

File: src/org/traccar/protocol/Gps103ProtocolDecoder.java
Patch:
@@ -45,7 +45,7 @@ public Gps103ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
             "([\\d]+)," +                       // IMEI
             "[^,]+," +
             "(\\d{2})(\\d{2})(\\d{2})[\\d]+," + // Date
-            "[+]?[\\d]*," +
+            "[^,]*," +
             "[FL]," +                           // F - full / L - low
             "([\\d]{2})([\\d]{2})([\\d]{2}).([\\d]{3})," + // Time (HHMMSS.SSS)
             "([AV])," +                         // Validity

File: test/org/traccar/protocol/Gps103ProtocolDecoderTest.java
Patch:
@@ -23,6 +23,9 @@ public void testDecode() throws Exception {
 
         assertNotNull(decoder.decode(null, null,
                 "imei:359587010124900,tracker,0809231929,13554900601,F,112909.397,A,2234.4669,N,11354.3287,E,0.11,321.53,"));
+        
+        assertNotNull(decoder.decode(null, null,
+                "imei:353451049926460,tracker,1208042043,123456 99008026,F,124336.000,A,3509.8668,N,03322.7636,E,0.00,,"));
 
     }
 

File: src/org/traccar/protocol/Gl200ProtocolDecoder.java
Patch:
@@ -42,7 +42,7 @@ public Gl200ProtocolDecoder(DataManager dataManager, Integer resetDelay) {
      */
     static private Pattern pattern = Pattern.compile(
             "\\+RESP:GT...," +
-            "\\d{6}," +                         // Protocol version
+            "[0-9a-fA-F]{6}," +                 // Protocol version
             "(\\d{15})," +                      // IMEI
             "[^,]*," +                          // Device name
             "(?:(?:\\d," +                      // Report ID / Geo mode

File: src/org/traccar/protocol/EnforaProtocolDecoder.java
Patch:
@@ -54,7 +54,7 @@ public EnforaProtocolDecoder(DataManager dataManager, Integer resetDelay) {
             "(\\d+.\\d)?," +             // Speed
             "(\\d+.\\d)?," +             // Course
             "(\\d{2})(\\d{2})(\\d{2})," + // Date (DDMMYY)
-            ".*[\r\n]*");
+            ".*[\r\n\u0000]*");
 
     public static final int IMEI_LENGTH = 15;
 

File: test/org/traccar/protocol/EnforaProtocolDecoderTest.java
Patch:
@@ -22,6 +22,9 @@ public void testDecode() throws Exception {
 
         byte[] buf3 = {0x00,0x71,0x00,0x04,0x02,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x30,0x31,0x32,0x33,0x34,0x35,0x20,0x31,0x33,0x20,0x24,0x47,0x50,0x52,0x4D,0x43,0x2C,0x32,0x32,0x33,0x31,0x35,0x32,0x2E,0x30,0x30,0x2C,0x41,0x2C,0x33,0x35,0x30,0x39,0x2E,0x38,0x36,0x30,0x35,0x39,0x34,0x2C,0x4E,0x2C,0x30,0x33,0x33,0x32,0x32,0x2E,0x37,0x34,0x33,0x38,0x38,0x37,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x2C,0x30,0x2E,0x30,0x2C,0x30,0x32,0x30,0x36,0x31,0x32,0x2C,0x2C,0x2C,0x41,0x2A,0x35,0x32,0x0D,0x0A};
         assertNotNull(decoder.decode(null, null, factory.getBuffer(buf3, 0, buf3.length)));
+
+        byte[] buf4 = {0x00,0x76,0x00,0x04,0x02,0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x38,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x30,0x31,0x31,0x38,0x39,0x32,0x30,0x30,0x30,0x36,0x30,0x38,0x31,0x38,0x39,0x20,0x31,0x33,0x20,0x24,0x47,0x50,0x52,0x4D,0x43,0x2C,0x31,0x37,0x31,0x38,0x34,0x31,0x2E,0x30,0x30,0x2C,0x41,0x2C,0x33,0x35,0x30,0x39,0x2E,0x38,0x35,0x32,0x34,0x31,0x30,0x2C,0x4E,0x2C,0x30,0x33,0x33,0x32,0x32,0x2E,0x37,0x35,0x39,0x31,0x31,0x33,0x2C,0x45,0x2C,0x30,0x2E,0x30,0x2C,0x30,0x2E,0x30,0x2C,0x31,0x37,0x30,0x37,0x31,0x32,0x2C,0x33,0x2E,0x34,0x2C,0x57,0x2C,0x41,0x2A,0x32,0x35,0x0D,0x0A,0x00};
+        assertNotNull(decoder.decode(null, null, factory.getBuffer(buf4, 0, buf4.length)));
     }
 
 }

File: src/org/traccar/GenericProtocolDecoder.java
Patch:
@@ -37,7 +37,7 @@ public abstract class GenericProtocolDecoder extends OneToOneDecoder {
     public final void setDataManager(DataManager dataManager) {
         this.dataManager = dataManager;
     }
-    
+
     /**
      * Return data manager
      */
@@ -70,7 +70,7 @@ public GenericProtocolDecoder(DataManager dataManager, Integer resetDelay) {
         setDataManager(dataManager);
         setResetDelay(resetDelay);
     }
-    
+
     /**
      * Disconnect channel
      */

File: src/org/traccar/model/DatabaseDataManager.java
Patch:
@@ -229,6 +229,7 @@ public synchronized void addPosition(Position position) throws SQLException {
         queryAddPosition.setDouble("speed", position.getSpeed());
         queryAddPosition.setDouble("course", position.getCourse());
         queryAddPosition.setDouble("power", position.getPower());
+        queryAddPosition.setString("address", position.getAddress());
         queryAddPosition.setString("extended_info", position.getExtendedInfo());
 
         queryAddPosition.executeUpdate();

File: src/Main.java
Patch:
@@ -1,4 +1,5 @@
 import org.traccar.Server;
+import org.traccar.helper.Log;
 
 public class Main {
 
@@ -7,14 +8,14 @@ public static void main(String[] args) throws Exception {
         final Server service = new Server();
         service.init(args);
 
-        System.out.println("starting server...");
+        Log.info("starting server...");
         service.start();
 
         // Shutdown server properly
         Runtime.getRuntime().addShutdownHook(new Thread() {
             @Override
             public void run() {
-                System.out.println("shutting down server...");
+                Log.info("shutting down server...");
                 service.stop();
             }
         });

File: src/org/traccar/model/DatabaseDataManager.java
Patch:
@@ -19,6 +19,7 @@
 import java.sql.SQLException;
 import java.util.*;
 import org.traccar.helper.AdvancedConnection;
+import org.traccar.helper.Log;
 import org.traccar.helper.NamedParameterStatement;
 
 /**
@@ -95,7 +96,7 @@ private void initDatabase(Properties properties)
             initializeQuery.prepare();
             initializeQuery.executeUpdate();
         } catch (Exception error) {
-            System.out.println(error.getMessage());
+            Log.warning(error.getMessage());
         }
     }
 

File: src/net/sourceforge/opentracking/Server.java
Patch:
@@ -33,6 +33,7 @@
 import java.util.logging.LogRecord;
 import net.sourceforge.opentracking.helper.NamedParameterStatement;
 import org.jboss.netty.handler.codec.string.StringDecoder;
+import org.jboss.netty.handler.codec.string.StringEncoder;
 import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;
 import org.jboss.netty.buffer.ChannelBuffers;
 import org.jboss.netty.handler.logging.LoggingHandler;
@@ -241,6 +242,7 @@ public void initGps103Server(Properties properties) throws SQLException {
             server.getPipeline().addLast("frameDecoder",
                     new DelimiterBasedFrameDecoder(1024, ChannelBuffers.wrappedBuffer(delimiter)));
             server.getPipeline().addLast("stringDecoder", new StringDecoder());
+            server.getPipeline().addLast("stringEncoder", new StringEncoder());
             server.getPipeline().addLast("objectDecoder", new Gps103ProtocolDecoder(this));
 
             server.getPipeline().addLast("handler", new TrackerEventHandler(this));

