File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -61,8 +61,8 @@ public class Socket extends Emitter {
     private Map<String, String> auth;
     private Map<Integer, Ack> acks = new HashMap<>();
     private Queue<On.Handle> subs;
-    private final Queue<List<Object>> receiveBuffer = new LinkedList<>();
-    private final Queue<Packet<JSONArray>> sendBuffer = new LinkedList<>();
+    private final Queue<List<Object>> receiveBuffer = new ConcurrentLinkedQueue<>();
+    private final Queue<Packet<JSONArray>> sendBuffer = new ConcurrentLinkedQueue<>();
 
     private ConcurrentLinkedQueue<Listener> onAnyIncomingListeners = new ConcurrentLinkedQueue<>();
     private ConcurrentLinkedQueue<Listener> onAnyOutgoingListeners = new ConcurrentLinkedQueue<>();

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -334,6 +334,7 @@ private void onpacket(Packet<?> packet) {
                 break;
 
             case Parser.CONNECT_ERROR:
+                this.destroy();
                 super.emit(EVENT_CONNECT_ERROR, packet.data);
                 break;
         }

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -91,7 +91,9 @@ public void call(Object... args) {
             add(On.on(io, Manager.EVENT_ERROR, new Listener() {
                 @Override
                 public void call(Object... args) {
-                    Socket.super.emit(EVENT_CONNECT_ERROR, args[0]);
+                    if (!Socket.this.connected) {
+                        Socket.super.emit(EVENT_CONNECT_ERROR, args[0]);
+                    }
                 }
             }));
             add(On.on(io, Manager.EVENT_CLOSE, new Listener() {

File: src/test/java/io/socket/parser/ParserTest.java
Patch:
@@ -63,5 +63,8 @@ public void decodeInError() throws JSONException {
         Helpers.testDecodeError(Parser.EVENT + "2sd");
         // event with invalid json data
         Helpers.testDecodeError(Parser.EVENT + "2[\"a\",1,{asdf}]");
+        Helpers.testDecodeError(Parser.EVENT + "2{}");
+        Helpers.testDecodeError(Parser.EVENT + "2[]");
+        Helpers.testDecodeError(Parser.EVENT + "2[null]");
     }
 }

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -367,8 +367,8 @@ private void onack(Packet<JSONArray> packet) {
     private void onconnect(String id) {
         this.connected = true;
         this.id = id;
-        super.emit(EVENT_CONNECT);
         this.emitBuffered();
+        super.emit(EVENT_CONNECT);
     }
 
     private void emitBuffered() {

File: src/main/java/io/socket/client/Ack.java
Patch:
@@ -5,7 +5,7 @@
  */
 public interface Ack {
 
-    public void call(Object... args);
+    void call(Object... args);
 
 }
 

File: src/main/java/io/socket/client/IO.java
Patch:
@@ -16,7 +16,7 @@ public class IO {
 
     private static final Logger logger = Logger.getLogger(IO.class.getName());
 
-    private static final ConcurrentHashMap<String, Manager> managers = new ConcurrentHashMap<String, Manager>();
+    private static final ConcurrentHashMap<String, Manager> managers = new ConcurrentHashMap<>();
 
     /**
      * Protocol version.

File: src/main/java/io/socket/client/On.java
Patch:
@@ -16,8 +16,8 @@ public void destroy() {
         };
     }
 
-    public static interface Handle {
+    public interface Handle {
 
-        public void destroy();
+        void destroy();
     }
 }

File: src/main/java/io/socket/parser/Binary.java
Patch:
@@ -20,7 +20,7 @@ public class Binary {
 
     @SuppressWarnings("unchecked")
     public static DeconstructedPacket deconstructPacket(Packet packet) {
-        List<byte[]> buffers = new ArrayList<byte[]>();
+        List<byte[]> buffers = new ArrayList<>();
 
         packet.data = _deconstructPacket(packet.data, buffers);
         packet.attachments = buffers.size();

File: src/main/java/io/socket/parser/IOParser.java
Patch:
@@ -122,7 +122,7 @@ private static Packet decodeString(String str) {
             int i = 0;
             int length = str.length();
 
-            Packet<Object> p = new Packet<Object>(Character.getNumericValue(str.charAt(0)));
+            Packet<Object> p = new Packet<>(Character.getNumericValue(str.charAt(0)));
 
             if (p.type < 0 || p.type > types.length - 1) {
                 throw new DecodingException("unknown packet type " + p.type);
@@ -214,7 +214,7 @@ public void onDecoded (Callback callback) {
 
         BinaryReconstructor(Packet packet) {
             this.reconPack = packet;
-            this.buffers = new ArrayList<byte[]>();
+            this.buffers = new ArrayList<>();
         }
 
         public Packet takeBinaryData(byte[] binData) {
@@ -230,7 +230,7 @@ public Packet takeBinaryData(byte[] binData) {
 
         public void finishReconstruction () {
             this.reconPack = null;
-            this.buffers = new ArrayList<byte[]>();
+            this.buffers = new ArrayList<>();
         }
     }
 }

File: src/test/java/io/socket/client/Connection.java
Patch:
@@ -108,7 +108,7 @@ IO.Options createOptions() {
     }
 
     String[] createEnv() {
-        Map<String, String> env = new HashMap<String, String>(System.getenv());
+        Map<String, String> env = new HashMap<>(System.getenv());
         env.put("DEBUG", "socket.io:*");
         env.put("PORT", String.valueOf(PORT));
         String[] _env = new String[env.size()];

File: src/test/java/io/socket/client/SSLConnectionTest.java
Patch:
@@ -89,7 +89,7 @@ public void tearDown() {
 
     @Test(timeout = TIMEOUT)
     public void connect() throws Exception {
-        final BlockingQueue<Object> values = new LinkedBlockingQueue<Object>();
+        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
         IO.Options opts = createOptions();
         opts.callFactory = sOkHttpClient;
         opts.webSocketFactory = sOkHttpClient;
@@ -113,7 +113,7 @@ public void call(Object... args) {
 
     @Test(timeout = TIMEOUT)
     public void defaultSSLContext() throws Exception {
-        final BlockingQueue<Object> values = new LinkedBlockingQueue<Object>();
+        final BlockingQueue<Object> values = new LinkedBlockingQueue<>();
         IO.setDefaultOkHttpWebSocketFactory(sOkHttpClient);
         IO.setDefaultOkHttpCallFactory(sOkHttpClient);
         socket = client();

File: src/test/java/io/socket/parser/ParserTest.java
Patch:
@@ -27,20 +27,20 @@ public void encodeDisconnection() {
 
     @Test
     public void encodeEvent() throws JSONException {
-        Packet<JSONArray> packet1 = new Packet<JSONArray>(Parser.EVENT);
+        Packet<JSONArray> packet1 = new Packet<>(Parser.EVENT);
         packet1.data = new JSONArray("[\"a\", 1, {}]");
         packet1.nsp = "/";
         Helpers.test(packet1);
 
-        Packet<JSONArray> packet2 = new Packet<JSONArray>(Parser.EVENT);
+        Packet<JSONArray> packet2 = new Packet<>(Parser.EVENT);
         packet2.data = new JSONArray("[\"a\", 1, {}]");
         packet2.nsp = "/test";
         Helpers.test(packet2);
     }
 
     @Test
     public void encodeAck() throws JSONException {
-        Packet<JSONArray> packet = new Packet<JSONArray>(Parser.ACK);
+        Packet<JSONArray> packet = new Packet<>(Parser.ACK);
         packet.data = new JSONArray("[\"a\", 1, {}]");
         packet.id = 123;
         packet.nsp = "/";

File: src/test/java/io/socket/util/Optional.java
Patch:
@@ -12,11 +12,11 @@ public static <T> Optional<T> of(T value) {
         if (value == null) {
             throw new NullPointerException();
         }
-        return new Optional<T>(value);
+        return new Optional<>(value);
     }
 
     public static <T> Optional<T> ofNullable(T value) {
-        return new Optional<T>(value);
+        return new Optional<>(value);
     }
 
     public static Optional<Void> empty() {

File: src/test/java/io/socket/client/SocketTest.java
Patch:
@@ -16,7 +16,7 @@
 
 import static org.hamcrest.CoreMatchers.is;
 import static org.hamcrest.CoreMatchers.not;
-import static org.hamcrest.Matchers.greaterThan;
+import static org.hamcrest.Matchers.greaterThanOrEqualTo;
 import static org.junit.Assert.assertThat;
 
 @RunWith(JUnit4.class)
@@ -144,7 +144,7 @@ public void call(Object... args) {
 
         @SuppressWarnings("unchecked")
         long ms = (long)values.take();
-        assertThat(ms, greaterThan((long)0));
+        assertThat(ms, greaterThanOrEqualTo(0L));
 
         socket.disconnect();
     }

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -136,7 +136,7 @@ public Socket open() {
         EventThread.exec(new Runnable() {
             @Override
             public void run() {
-                if (Socket.this.connected) return;
+                if (Socket.this.connected || Socket.this.io.isReconnecting()) return;
 
                 Socket.this.subEvents();
                 Socket.this.io.open(); // ensure open

File: src/test/java/io/socket/client/SSLConnectionTest.java
Patch:
@@ -66,7 +66,7 @@ private static void prepareOkHttpClient() throws GeneralSecurityException, IOExc
         TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
         tmf.init(ks);
 
-        SSLContext sslContext = SSLContext.getInstance("TLSv1");
+        SSLContext sslContext = SSLContext.getInstance("TLS");
         sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);
 
         sOkHttpClient = new OkHttpClient.Builder()

File: src/test/java/io/socket/client/Connection.java
Patch:
@@ -82,7 +82,7 @@ Socket client() throws URISyntaxException {
     }
 
     Socket client(String path) throws URISyntaxException {
-        return IO.socket(path, createOptions());
+        return client(path, createOptions());
     }
 
     Socket client(IO.Options opts) throws URISyntaxException {

File: src/test/java/io/socket/parser/ParserTest.java
Patch:
@@ -9,7 +9,7 @@
 @RunWith(JUnit4.class)
 public class ParserTest {
 
-    private static Parser.Encoder encoder = new Parser.Encoder();
+    private static Parser.Encoder encoder = new IOParser.Encoder();
 
     @Test
     public void encodeConnection() {

File: src/main/java/io/socket/parser/Packet.java
Patch:
@@ -8,6 +8,7 @@ public class Packet<T> {
     public String nsp;
     public T data;
     public int attachments;
+    public String query;
 
     public Packet() {}
 

File: src/test/java/io/socket/client/ExecutionTest.java
Patch:
@@ -17,7 +17,7 @@ public class ExecutionTest extends Connection {
 
     private static final Logger logger = Logger.getLogger(ExecutionTest.class.getName());
 
-    final static int TIMEOUT = 60 * 1000;
+    final static int TIMEOUT = 100 * 1000;
 
     @Test(timeout = TIMEOUT)
     public void execConnection() throws InterruptedException, IOException {

File: src/main/java/io/socket/client/Manager.java
Patch:
@@ -416,7 +416,7 @@ public void call(Object... objects) {
 
     /*package*/ void destroy(Socket socket) {
         this.connected.remove(socket);
-        if (this.connected.size() > 0) return;
+        if (!this.connected.isEmpty()) return;
 
         this.close();
     }
@@ -447,7 +447,7 @@ public void call(Object[] encodedPackets) {
     }
 
     private void processPacketQueue() {
-        if (this.packetBuffer.size() > 0 && !this.encoding) {
+        if (!this.packetBuffer.isEmpty() && !this.encoding) {
             Packet pack = this.packetBuffer.remove(0);
             this.packet(pack);
         }

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -325,7 +325,7 @@ private void onevent(Packet<JSONArray> packet) {
         }
 
         if (this.connected) {
-            if (args.size() == 0) return;
+            if (args.isEmpty()) return;
             String event = args.remove(0).toString();
             super.emit(event, args.toArray());
         } else {

File: src/main/java/io/socket/backo/Backoff.java
Patch:
@@ -8,8 +8,8 @@ public class Backoff {
     private long ms = 100;
     private long max = 10000;
     private int factor = 2;
-    private double jitter = 0.0;
-    private int attempts = 0;
+    private double jitter;
+    private int attempts;
 
     public Backoff() {}
 

File: src/main/java/io/socket/client/Manager.java
Patch:
@@ -72,7 +72,7 @@ public class Manager extends Emitter {
     /*package*/ static SSLContext defaultSSLContext;
     /*package*/ static HostnameVerifier defaultHostnameVerifier;
 
-    /*package*/ ReadyState readyState = null;
+    /*package*/ ReadyState readyState;
 
     private boolean _reconnection;
     private boolean skipReconnect;

File: src/main/java/io/socket/client/Manager.java
Patch:
@@ -180,7 +180,7 @@ public Manager reconnectionAttempts(int v) {
         return this;
     }
 
-    public long reconnectionDelay() {
+    public final long reconnectionDelay() {
         return this._reconnectionDelay;
     }
 
@@ -192,7 +192,7 @@ public Manager reconnectionDelay(long v) {
         return this;
     }
 
-    public double randomizationFactor() {
+    public final double randomizationFactor() {
         return this._randomizationFactor;
     }
 
@@ -204,7 +204,7 @@ public Manager randomizationFactor(double v) {
         return this;
     }
 
-    public long reconnectionDelayMax() {
+    public final long reconnectionDelayMax() {
         return this._reconnectionDelayMax;
     }
 

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -468,7 +468,7 @@ private static Object[] toArray(JSONArray array) {
                 logger.log(Level.WARNING, "An error occured while retrieving data from JSONArray", e);
                 v = null;
             }
-            data[i] = v == JSONObject.NULL ? null : v;
+            data[i] = JSONObject.NULL.equals(v) ? null : v;
         }
         return data;
     }

File: src/main/java/io/socket/client/Socket.java
Patch:
@@ -10,6 +10,7 @@
 import org.json.JSONObject;
 
 import java.util.*;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 /**
@@ -464,6 +465,7 @@ private static Object[] toArray(JSONArray array) {
             try {
                 v = array.get(i);
             } catch (JSONException e) {
+                logger.log(Level.WARNING, "An error occured while retrieving data from JSONArray", e);
                 v = null;
             }
             data[i] = v == JSONObject.NULL ? null : v;

File: src/main/java/io/socket/parser/Parser.java
Patch:
@@ -7,6 +7,7 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 
 public class Parser {
@@ -227,6 +228,7 @@ private static Packet decodeString(String str) {
                     str.charAt(++i);
                     p.data = new JSONTokener(str.substring(i)).nextValue();
                 } catch (JSONException e) {
+                    logger.log(Level.WARNING, "An error occured while retrieving data from JSONTokener", e);
                     return error();
                 }
             }

File: src/main/java/io/socket/parser/Binary.java
Patch:
@@ -15,6 +15,7 @@ public class Binary {
     private static final String KEY_NUM = "num";
 
 
+    @SuppressWarnings("unchecked")
     public static DeconstructedPacket deconstructPacket(Packet packet) {
         List<byte[]> buffers = new ArrayList<byte[]>();
 
@@ -69,6 +70,7 @@ private static Object _deconstructPacket(Object data, List<byte[]> buffers) {
         return data;
     }
 
+    @SuppressWarnings("unchecked")
     public static Packet reconstructPacket(Packet packet, byte[][] buffers) {
         packet.data = _reconstructPacket(packet.data, buffers);
         packet.attachments = -1;

File: src/main/java/io/socket/parser/Parser.java
Patch:
@@ -170,7 +170,7 @@ public void add(byte[] obj) {
         }
 
         private static Packet decodeString(String str) {
-            Packet p = new Packet();
+            Packet<Object> p = new Packet<Object>();
             int i = 0;
             int length = str.length();
 

File: src/test/java/io/socket/parser/Helpers.java
Patch:
@@ -46,6 +46,7 @@ public void call(Object... args) {
         decoder.add(errorMessage);
     }
 
+    @SuppressWarnings("unchecked")
     public static void testBin(final Packet obj) {
         final Object originalData = obj.data;
         encoder.encode(obj, new Parser.Encoder.Callback() {

File: src/main/java/io/socket/client/Manager.java
Patch:
@@ -463,6 +463,7 @@ private void cleanup() {
             this.cleanup();
         }
         this.skipReconnect = true;
+        this.reconnecting = false;
         this.backoff.reset();
         this.readyState = ReadyState.CLOSED;
         if (this.engine != null) {

File: src/main/java/com/github/nkzawa/socketio/client/IO.java
Patch:
@@ -51,7 +51,6 @@ public static Socket socket(URI uri) {
      * @param uri uri to connect.
      * @param opts options for socket.
      * @return {@link Socket} instance.
-     * @throws URISyntaxException
      */
     public static Socket socket(URI uri, Options opts) {
         if (opts == null) {

File: src/main/java/com/github/nkzawa/socketio/client/Manager.java
Patch:
@@ -248,7 +248,7 @@ public Manager open(final OpenCallback fn) {
             @Override
             public void run() {
                 logger.fine(String.format("readyState %s", Manager.this.readyState));
-                if (Manager.this.readyState == ReadyState.OPEN) return;
+                if (Manager.this.readyState == ReadyState.OPEN || Manager.this.readyState == ReadyState.OPENING) return;
 
                 logger.fine(String.format("opening %s", Manager.this.uri));
                 Manager.this.engine = new Engine(Manager.this.uri, Manager.this.opts);

File: src/main/java/com/github/nkzawa/socketio/client/Manager.java
Patch:
@@ -382,7 +382,8 @@ public void call(Object... objects) {
 
     /*package*/ void destroy(Socket socket) {
         --this.connected;
-        if (this.connected == 0) {
+        if (this.connected <= 0) {
+            this.connected = 0;
             this.close();
         }
     }

File: src/main/java/com/github/nkzawa/socketio/client/Manager.java
Patch:
@@ -369,7 +369,8 @@ public void call(Object... objects) {
 
     /*package*/ void destroy(Socket socket) {
         --this.connected;
-        if (this.connected == 0) {
+        if (this.connected <= 0) {
+            this.connected = 0;
             this.close();
         }
     }

File: src/test/java/com/github/nkzawa/socketio/client/ConnectionTest.java
Patch:
@@ -197,7 +197,7 @@ public void call(Object... args) {
     public void reconnectByDefault() throws URISyntaxException, InterruptedException {
         final CountDownLatch latch = new CountDownLatch(1);
         socket = client();
-        socket.io.on(Manager.EVENT_RECONNECT, new Emitter.Listener() {
+        socket.io().on(Manager.EVENT_RECONNECT, new Emitter.Listener() {
             @Override
             public void call(Object... objects) {
                 socket.close();
@@ -208,7 +208,7 @@ public void call(Object... objects) {
         new Timer().schedule(new TimerTask() {
             @Override
             public void run() {
-                socket.io.engine.close();
+                socket.io().engine.close();
             }
         }, 500);
         latch.await();
@@ -229,7 +229,7 @@ public void call(Object... objects) {
         new Timer().schedule(new TimerTask() {
             @Override
             public void run() {
-                socket.io.engine.close();
+                socket.io().engine.close();
             }
         }, 500);
         latch.await();

File: src/main/java/com/github/nkzawa/socketio/client/Url.java
Patch:
@@ -21,7 +21,7 @@ public static URL parse(URI uri) throws MalformedURLException {
         }
 
         String path = uri.getPath();
-        if (path == null || path.isEmpty()) {
+        if (path == null || path.length() == 0) {
             uri = uri.resolve("/");
         }
 

File: src/main/java/com/github/nkzawa/socketio/parser/Parser.java
Patch:
@@ -97,7 +97,7 @@ private String encodeAsString(Packet obj) {
                 str.append("-");
             }
 
-            if (obj.nsp != null && !obj.nsp.isEmpty() && !"/".equals(obj.nsp)) {
+            if (obj.nsp != null && obj.nsp.length() != 0 && !"/".equals(obj.nsp)) {
                 nsp = true;
                 str.append(obj.nsp);
             }

File: src/test/java/com/github/nkzawa/hasbinarydata/HasBinaryDataTest.java
Patch:
@@ -13,7 +13,7 @@
 public class HasBinaryDataTest {
 
     @Test
-    public void arrayContainsByteArray() {
+    public void arrayContainsByteArray() throws Exception {
         JSONArray arr = new JSONArray("[1, null, 2]");
         arr.put(1, "asdfasdf".getBytes(Charset.forName("UTF-8")));
         assertTrue(HasBinaryData.hasBinary(arr));

File: src/test/java/com/github/nkzawa/socketio/client/ServerConnectionTest.java
Patch:
@@ -72,7 +72,7 @@ public void call(Object... objects) {
     }
 
     @Test(timeout = TIMEOUT)
-    public void event() throws URISyntaxException, InterruptedException {
+    public void event() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
         final JSONObject obj = new JSONObject();
@@ -102,7 +102,7 @@ public void call(Object... args) {
     }
 
     @Test(timeout = TIMEOUT)
-    public void ack() throws URISyntaxException, InterruptedException {
+    public void ack() throws Exception {
         final Semaphore semaphore = new Semaphore(0);
 
         final JSONObject obj = new JSONObject();

File: src/test/java/com/github/nkzawa/socketio/parser/ParserTest.java
Patch:
@@ -1,6 +1,7 @@
 package com.github.nkzawa.socketio.parser;
 
 import org.json.JSONArray;
+import org.json.JSONException;
 import org.junit.Test;
 import org.junit.runner.RunWith;
 import org.junit.runners.JUnit4;
@@ -26,7 +27,7 @@ public void encodeDisconnection() {
     }
 
     @Test
-    public void encodeEvent() {
+    public void encodeEvent() throws JSONException {
         Packet<JSONArray> packet1 = new Packet<JSONArray>(Parser.EVENT);
         packet1.data = new JSONArray("[\"a\", 1, {}]");
         packet1.nsp = "/";
@@ -39,7 +40,7 @@ public void encodeEvent() {
     }
 
     @Test
-    public void encodeAck() {
+    public void encodeAck() throws JSONException {
         Packet<JSONArray> packet = new Packet<JSONArray>(Parser.ACK);
         packet.data = new JSONArray("[\"a\", 1, {}]");
         packet.id = 123;

File: src/main/java/com/github/nkzawa/hasbinarydata/HasBinaryData.java
Patch:
@@ -24,7 +24,7 @@ private static boolean recursiveCheckForBinary(Object obj) {
             JSONArray _obj = (JSONArray)obj;
             int length = _obj.length();
             for (int i = 0; i < length; i++) {
-                if (recursiveCheckForBinary(_obj.get(i))) {
+                if (recursiveCheckForBinary(_obj.isNull(i) ? null : _obj.get(i))) {
                     return true;
                 }
             }

File: src/main/java/com/github/nkzawa/socketio/client/IO.java
Patch:
@@ -80,7 +80,7 @@ public static class Options extends com.github.nkzawa.engineio.client.Socket.Opt
          */
         public boolean multiplex = true;
 
-        public boolean reconnection;
+        public boolean reconnection = true;
         public int reconnectionAttempts;
         public long reconnectionDelay;
         public long reconnectionDelayMax;

File: src/main/java/com/github/nkzawa/socketio/client/Manager.java
Patch:
@@ -321,7 +321,7 @@ private void close() {
     private void onclose() {
         this.cleanup();
         this.readyState = ReadyState.CLOSED;
-        if (!this.skipReconnect) {
+        if (this._reconnection && !this.skipReconnect) {
             this.reconnect();
         }
     }

File: src/main/java/com/github/nkzawa/socketio/client/Socket.java
Patch:
@@ -159,7 +159,9 @@ public Emitter emit(final String event, final Object[] args, final Ack ack) {
             public void run() {
                 List<Object> _args = new ArrayList<Object>() {{
                     add(event);
-                    addAll(Arrays.asList(args));
+                    if (args != null) {
+                        addAll(Arrays.asList(args));
+                    }
                 }};
                 Packet packet = new Packet(Parser.EVENT, toJsonArray(_args));
 

File: src/main/java/com/github/nkzawa/socketio/parser/Parser.java
Patch:
@@ -11,7 +11,7 @@
 
 public class Parser {
 
-    private static final Logger logger = Logger.getLogger("socket.io-parser");
+    private static final Logger logger = Logger.getLogger(Parser.class.getName());
 
     private static final Gson gson = new Gson();
     private static final JsonParser parser = new JsonParser();
@@ -56,7 +56,7 @@ public static String encode(Packet obj) {
             str.append(gson.toJson(obj.data));
         }
 
-        logger.info(String.format("encoded %s as %s", obj, str));
+        logger.fine(String.format("encoded %s as %s", obj, str));
         return str.toString();
     }
 
@@ -121,7 +121,7 @@ public static Packet decode(String str) {
             return error();
         }
 
-        logger.info(String.format("decoded %s as %s", str, p));
+        logger.fine(String.format("decoded %s as %s", str, p));
         return p;
     }
 

File: src/test/java/com/github/nkzawa/socketio/client/ServerConnectionTest.java
Patch:
@@ -21,7 +21,7 @@
 import static org.junit.Assert.assertThat;
 
 @RunWith(JUnit4.class)
-public class IOTest {
+public class ServerConnectionTest {
 
     final static int TIMEOUT = 3000;
     final static int PORT = 3000;

