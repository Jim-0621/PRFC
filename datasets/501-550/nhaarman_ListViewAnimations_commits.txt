File: lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java
Patch:
@@ -41,7 +41,7 @@ public StickyListHeadersListView getListView() {
     @Nullable
     @Override
     public View getChildAt(final int index) {
-        return mListView.getChildAt(index);
+        return mListView.getListChildAt(index);
     }
 
     @Override

File: lib-core-slh/src/main/java/com/nhaarman/listviewanimations/util/StickyListHeadersListViewWrapper.java
Patch:
@@ -41,7 +41,7 @@ public StickyListHeadersListView getListView() {
     @Nullable
     @Override
     public View getChildAt(final int index) {
-        return mListView.getChildAt(index);
+        return mListView.getListChildAt(index);
     }
 
     @Override

File: lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/MotionEventUtils.java
Patch:
@@ -69,7 +69,7 @@ public static List<MotionEvent> createMotionEvents(final AbsListView absListView
         int[] listViewCoords = new int[2];
         absListView.getLocationOnScreen(listViewCoords);
 
-        View view = absListView.getChildAt(position);
+        View view = absListView.getChildAt(position - absListView.getFirstVisiblePosition());
         int y = (int) (ViewHelper.getY(view) + view.getHeight() / 2) + listViewCoords[1];
 
         List<MotionEvent> results = new ArrayList<>();
@@ -100,6 +100,7 @@ private static void dispatchMotionEvents(final Activity activity, final View vie
     private static class DispatchTouchEventRunnable implements Runnable {
 
         private final MotionEvent mEvent;
+
         private final View mView;
 
         private DispatchTouchEventRunnable(final MotionEvent event, final View view) {

File: lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoAdapter.java
Patch:
@@ -33,7 +33,7 @@ public abstract class SwipeUndoAdapter extends BaseAdapterDecorator {
     /**
      * The {@link SwipeUndoTouchListener} that is set to the {@link android.widget.AbsListView}.
      */
-    @NonNull
+    @Nullable
     private SwipeUndoTouchListener mSwipeUndoTouchListener;
 
     /**

File: lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListener.java
Patch:
@@ -203,6 +203,8 @@ public void undo(@NonNull final View view) {
         animatorSet.playTogether(undoAlphaAnimator, primaryAlphaAnimator, primaryXAnimator);
         animatorSet.addListener(new UndoAnimatorListener(undoView));
         animatorSet.start();
+
+        mCallback.onUndo(view, position);
     }
 
     @Override

File: example/src/main/java/com/haarman/listviewanimations/MainActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: example/src/main/java/com/haarman/listviewanimations/MyListActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: example/src/main/java/com/haarman/listviewanimations/appearance/AppearanceExamplesActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,7 +23,6 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AbsListView;
 import android.widget.BaseAdapter;
 import android.widget.SpinnerAdapter;
 import android.widget.TextView;

File: example/src/main/java/com/haarman/listviewanimations/googlecards/GoogleCardsActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: example/src/main/java/com/haarman/listviewanimations/itemmanipulation/AnimateAdditionActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: example/src/main/java/com/haarman/listviewanimations/itemmanipulation/ItemManipulationsExamplesActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: example/src/main/java/com/haarman/listviewanimations/itemmanipulation/SwipeDismissActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -21,7 +21,6 @@
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
-import android.widget.AbsListView;
 import android.widget.TextView;
 import android.widget.Toast;
 

File: example/src/main/java/com/haarman/listviewanimations/itemmanipulation/expandablelistitems/ExpandableListItemActivity.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/ArrayAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/BaseAdapterDecorator.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/AnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/ResourceAnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/SingleAnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/simple/ScaleInAnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/simple/SwingBottomInAnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/simple/SwingLeftInAnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/swinginadapters/simple/SwingRightInAnimationAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-core/src/main/java/com/nhaarman/listviewanimations/util/AdapterViewUtil.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/animateaddition/AnimateAdditionAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/OnDismissCallback.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeDismissAdapter.java
Patch:
@@ -1,5 +1,5 @@
 /*
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeDismissTouchListenerTest.java
Patch:
@@ -3,6 +3,8 @@
 import android.test.ActivityInstrumentationTestCase2;
 import android.widget.AbsListView;
 
+import com.nhaarman.listviewanimations.util.AbsListViewWrapper;
+
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
@@ -46,7 +48,7 @@ public void setUp() throws Exception {
         mActivity = getActivity();
         mAbsListView = mActivity.getAbsListView();
 
-        mSwipeTouchListener = new SwipeDismissTouchListener(mAbsListView, mOnDismissCallback);
+        mSwipeTouchListener = new SwipeDismissTouchListener(new AbsListViewWrapper(mAbsListView), mOnDismissCallback);
         mAbsListView.setOnTouchListener(mSwipeTouchListener);
 
         getInstrumentation().waitForIdleSync();

File: lib-manipulation/src/androidTest/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/undo/SwipeUndoTouchListenerTest.java
Patch:
@@ -5,6 +5,7 @@
 import android.widget.AbsListView;
 
 import com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.SwipeTouchListenerTestActivity;
+import com.nhaarman.listviewanimations.util.AbsListViewWrapper;
 
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
@@ -51,7 +52,7 @@ public void setUp() throws Exception {
         mActivity = getActivity();
         mAbsListView = mActivity.getAbsListView();
 
-        View.OnTouchListener swipeUndoTouchListener = new SwipeUndoTouchListener(mAbsListView, mUndoCallback);
+        View.OnTouchListener swipeUndoTouchListener = new SwipeUndoTouchListener(new AbsListViewWrapper(mAbsListView), mUndoCallback);
         mAbsListView.setOnTouchListener(swipeUndoTouchListener);
 
         getInstrumentation().waitForIdleSync();

File: lib-manipulation/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/AnimateAdditionAdapter.java
Patch:
@@ -51,7 +51,6 @@
  * Extend this class and override {@link com.nhaarman.listviewanimations.itemmanipulation.AnimateAdditionAdapter#getAdditionalAnimators(android.view.View,
  * android.view.ViewGroup)} to provide extra {@link com.nineoldandroids.animation.Animator}s.
  */
-@SuppressWarnings("unchecked")
 public class AnimateAdditionAdapter<T> extends BaseAdapterDecorator {
 
     private static final long DEFAULT_SCROLLDOWN_ANIMATION_MS = 300;
@@ -267,7 +266,7 @@ public View getView(final int position, @Nullable final View convertView, @NonNu
 
         if (mInsertQueue.getActiveIndexes().contains(position)) {
             int widthMeasureSpec = View.MeasureSpec.makeMeasureSpec(ViewGroup.LayoutParams.MATCH_PARENT, View.MeasureSpec.AT_MOST);
-            int heightMeasureSpec = View.MeasureSpec.makeMeasureSpec(ViewGroup.LayoutParams.WRAP_CONTENT, View.MeasureSpec.AT_MOST);
+            int heightMeasureSpec = View.MeasureSpec.makeMeasureSpec(ViewGroup.LayoutParams.WRAP_CONTENT, View.MeasureSpec.UNSPECIFIED);
             view.measure(widthMeasureSpec, heightMeasureSpec);
 
             int originalHeight = view.getMeasuredHeight();

File: example/src/main/java/com/haarman/listviewanimations/itemmanipulationexamples/ExpandableListItemActivity.java
Patch:
@@ -83,7 +83,7 @@ public View getTitleView(final int position, final View convertView, final ViewG
             if (tv == null) {
                 tv = new TextView(mContext);
             }
-            tv.setText(mContext.getString(R.string.expandorcollapsecard, getItem(position)));
+            tv.setText(mContext.getString(R.string.expandorcollapsecard, (int) getItem(position)));
             return tv;
         }
 

File: library/src/main/java/com/nhaarman/listviewanimations/ArrayAdapter.java
Patch:
@@ -246,8 +246,8 @@ public boolean retainAll(final Collection<?> objects) {
      *        in this adapter.
      */
     public void sort(Comparator<? super T> comparator) {
-    	Collections.sort(mItems, comparator);
-    	notifyDataSetChanged();
+        Collections.sort(mItems, comparator);
+        notifyDataSetChanged();
     }
 
     @Override

File: library/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeDismissAdapter.java
Patch:
@@ -28,7 +28,7 @@
  */
 public class SwipeDismissAdapter extends BaseAdapterDecorator {
 
-    private OnDismissCallback mOnDismissCallback;
+    private final OnDismissCallback mOnDismissCallback;
     private SwipeDismissTouchListener mDismissTouchListener;
 
     /**

File: library/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeTouchListener.java
Patch:
@@ -1,19 +1,19 @@
 /*
- * Copyright 2012 Roman Nurik
- * Copyright 2013 Niek Haarman
+ * Copyright 2014 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
- *     http://www.apache.org/licenses/LICENSE-2.0
+ * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
+/* Originally based on Roman Nurik's SwipeDismissListViewTouchListener (https://gist.github.com/romannurik/2980593). */
 package com.nhaarman.listviewanimations.itemmanipulation.swipedismiss;
 
 import android.graphics.Rect;

File: library/src/main/java/com/nhaarman/listviewanimations/util/AdapterViewUtil.java
Patch:
@@ -13,7 +13,6 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-
 package com.nhaarman.listviewanimations.util;
 
 import android.view.View;

File: library/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeOnScrollListener.java
Patch:
@@ -25,6 +25,7 @@
  * An {@link android.widget.AbsListView.OnScrollListener} that is used in conjunction with {@link com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.SwipeDismissAdapter}. Override this class to
  * provide a custom implementation of the OnScrollListener. Do not forget to call super on the overridden methods!
  */
+@Deprecated
 public class SwipeOnScrollListener implements AbsListView.OnScrollListener {
 
     private SwipeDismissListViewTouchListener mTouchListener;

File: library/src/main/java/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeOnScrollListener.java
Patch:
@@ -25,6 +25,7 @@
  * An {@link android.widget.AbsListView.OnScrollListener} that is used in conjunction with {@link com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.SwipeDismissAdapter}. Override this class to
  * provide a custom implementation of the OnScrollListener. Do not forget to call super on the overridden methods!
  */
+@Deprecated
 public class SwipeOnScrollListener implements AbsListView.OnScrollListener {
 
     private SwipeDismissListViewTouchListener mTouchListener;

File: library/src/com/nhaarman/listviewanimations/widget/DynamicListView.java
Patch:
@@ -483,7 +483,7 @@ private void handleCellSwitch() {
                 return;
             }
 
-            if (getPositionForView(switchView) < getHeaderViewsCount()) {
+            if (getPositionForView(switchView) < getHeaderViewsCount() || getPositionForView(switchView) >= (getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount())) {
                 return;
             }
             swapElements(originalItem, getPositionForView(switchView));

File: library/src/com/nhaarman/listviewanimations/widget/DynamicListView.java
Patch:
@@ -191,7 +191,7 @@ private void makeCellMobile() {
         int position = pointToPosition(mDownX, mDownY);
         int itemNum = position - getFirstVisiblePosition();
         View selectedView = getChildAt(itemNum);
-        if (selectedView == null || position < getHeaderViewsCount() || position >= getAdapter().getCount() - getHeaderViewsCount()) {
+        if (selectedView == null || position < getHeaderViewsCount() || position >= getAdapter().getCount() - getHeaderViewsCount() - getFooterViewsCount()) {
             return;
         }
 

File: library/src/com/nhaarman/listviewanimations/widget/DynamicListView.java
Patch:
@@ -191,7 +191,7 @@ private void makeCellMobile() {
         int position = pointToPosition(mDownX, mDownY);
         int itemNum = position - getFirstVisiblePosition();
         View selectedView = getChildAt(itemNum);
-        if (selectedView == null || position < getHeaderViewsCount()  || position >= getAdapter().getCount() - getHeaderViewsCount()) {
+        if (selectedView == null || position < getHeaderViewsCount() || position >= getAdapter().getCount() - getHeaderViewsCount()) {
             return;
         }
 
@@ -593,7 +593,7 @@ public void onAnimationEnd(Animator animation) {
                     setEnabled(true);
                     invalidate();
                     if (mOnItemMovedListener != null) {
-                        mOnItemMovedListener.onItemMoved(mLastMovedToIndex);
+                        mOnItemMovedListener.onItemMoved(mLastMovedToIndex - getHeaderViewsCount());
                     }
                 }
             });

File: example/src/com/haarman/listviewanimations/itemmanipulationexamples/AnimateDismissActivity.java
Patch:
@@ -51,7 +51,7 @@ protected void onCreate(final Bundle savedInstanceState) {
 
         ListView listView = (ListView) findViewById(R.id.activity_animateremoval_listview);
         mAdapter = new MyListAdapter(MyListActivity.getItems());
-        final AnimateDismissAdapter<String> animateDismissAdapter = new AnimateDismissAdapter<String>(mAdapter, new MyOnDismissCallback());
+        final AnimateDismissAdapter animateDismissAdapter = new AnimateDismissAdapter(mAdapter, new MyOnDismissCallback());
         animateDismissAdapter.setAbsListView(listView);
         listView.setAdapter(animateDismissAdapter);
 

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/ExpandableListItemAdapter.java
Patch:
@@ -483,7 +483,7 @@ public static void animateExpanding(final View view, final AbsListView listView)
 
             View parent = (View) view.getParent();
             final int widthSpec = View.MeasureSpec.makeMeasureSpec(parent.getMeasuredWidth() - parent.getPaddingLeft() - parent.getPaddingRight(), View.MeasureSpec.AT_MOST);
-            final int heightSpec = View.MeasureSpec.makeMeasureSpec(LayoutParams.WRAP_CONTENT, View.MeasureSpec.AT_MOST);
+            final int heightSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
             view.measure(widthSpec, heightSpec);
 
             ValueAnimator animator = createHeightAnimator(view, 0, view.getMeasuredHeight());

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/ExpandableListItemAdapter.java
Patch:
@@ -481,8 +481,9 @@ public void onAnimationEnd(final Animator animator) {
         public static void animateExpanding(final View view, final AbsListView listView) {
             view.setVisibility(View.VISIBLE);
 
-            final int widthSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
-            final int heightSpec = View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED);
+            View parent = (View) view.getParent();
+            final int widthSpec = View.MeasureSpec.makeMeasureSpec(parent.getMeasuredWidth() - parent.getPaddingLeft() - parent.getPaddingRight(), View.MeasureSpec.AT_MOST);
+            final int heightSpec = View.MeasureSpec.makeMeasureSpec(LayoutParams.WRAP_CONTENT, View.MeasureSpec.AT_MOST);
             view.measure(widthSpec, heightSpec);
 
             ValueAnimator animator = createHeightAnimator(view, 0, view.getMeasuredHeight());

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/AnimateAdditionAdapter.java
Patch:
@@ -27,7 +27,7 @@
 import com.nineoldandroids.animation.ValueAnimator;
 
 /**
- * An adapter for inserting rows into the {@link android.widget.AbsListView} with an animation. The root {@link BaseAdapter} should implement {@link Insertable},
+ * An EXPERIMENTAL adapter for inserting rows into the {@link android.widget.AbsListView} with an animation. The root {@link BaseAdapter} should implement {@link Insertable},
  * otherwise an {@link java.lang.IllegalArgumentException} is thrown.
  * </p>
  * Usage:
@@ -41,8 +41,6 @@ public class AnimateAdditionAdapter<T> extends BaseAdapterDecorator {
 
     /**
      * An interface for inserting items at a certain index.
-     *
-     * @param <T>
      */
     public interface Insertable<T> {
 

File: library/src/com/nhaarman/listviewanimations/widget/DynamicListView.java
Patch:
@@ -781,7 +781,7 @@ public interface Swappable {
 
         /**
          * Swaps the item on the first adapter position with the item on the second adapter position.
-         * Be sure to call {@link android.widget.BaseAdapter#notifyDataSetChanged()} if appropriate.
+         * Be sure to call {@link android.widget.BaseAdapter#notifyDataSetChanged()} if appropriate when implementing this method.
          *
          * @param positionOne First adapter position.
          * @param positionTwo Second adapter position.

File: library/src/com/nhaarman/listviewanimations/swinginadapters/AnimationAdapter.java
Patch:
@@ -144,7 +144,7 @@ private void cancelExistingAnimation(int position, View convertView) {
     }
 
     private void animateViewIfNecessary(int position, View view, ViewGroup parent) {
-        boolean isMeasuringGridViewItem = parent.getHeight() == 0;
+        boolean isMeasuringGridViewItem = getAbsListView() instanceof GridView && parent.getHeight() == 0;
 
         if (position > mLastAnimatedPosition && mShouldAnimate && !isMeasuringGridViewItem) {
             animateView(position, parent, view);

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/AnimateDismissAdapter.java
Patch:
@@ -21,6 +21,7 @@
 import android.widget.ListView;
 
 import com.nhaarman.listviewanimations.BaseAdapterDecorator;
+import com.nhaarman.listviewanimations.util.AdapterViewUtil;
 import com.nineoldandroids.animation.Animator;
 import com.nineoldandroids.animation.AnimatorListenerAdapter;
 import com.nineoldandroids.animation.AnimatorSet;
@@ -119,7 +120,7 @@ private List<View> getVisibleViewsForPositions(Collection<Integer> positions) {
         List<View> views = new ArrayList<View>();
         for (int i = 0; i < getAbsListView().getChildCount(); i++) {
             View child = getAbsListView().getChildAt(i);
-            if (positions.contains(getAbsListView().getPositionForView(child))) {
+            if (positions.contains(AdapterViewUtil.getPositionForView(getAbsListView(), child))) {
                 views.add(child);
             }
         }

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeDismissListViewTouchListener.java
Patch:
@@ -29,6 +29,7 @@
 import android.widget.ListView;
 
 import com.nhaarman.listviewanimations.itemmanipulation.OnDismissCallback;
+import com.nhaarman.listviewanimations.util.AdapterViewUtil;
 import com.nineoldandroids.animation.Animator;
 import com.nineoldandroids.animation.AnimatorListenerAdapter;
 import com.nineoldandroids.animation.ValueAnimator;
@@ -185,7 +186,7 @@ private boolean handleDownEvent(MotionEvent motionEvent) {
         if (downView != null) {
             mDownX = motionEvent.getRawX();
             mDownY = motionEvent.getRawY();
-            int downPosition = mListView.getPositionForView(downView);
+            int downPosition = AdapterViewUtil.getPositionForView(mListView, downView);
 
             mCurrentDismissData = createPendingDismissData(downPosition, downView);
 

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/SwipeOnTouchListener.java
Patch:
@@ -12,7 +12,7 @@
  */
 public interface SwipeOnTouchListener extends View.OnTouchListener {
     /**
-     * @return True if the user is currently swiping a list-item horizontally.
+     * @return true if the user is currently swiping a list-item horizontally.
      */
     public boolean isSwiping();
 }

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/swipedismiss/contextualundo/ContextualUndoListViewTouchListener.java
Patch:
@@ -30,6 +30,7 @@
 import android.widget.ListView;
 
 import com.nhaarman.listviewanimations.itemmanipulation.swipedismiss.SwipeOnTouchListener;
+import com.nhaarman.listviewanimations.util.AdapterViewUtil;
 import com.nineoldandroids.animation.Animator;
 import com.nineoldandroids.animation.AnimatorListenerAdapter;
 
@@ -166,7 +167,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                     }
 
                     mDownY = motionEvent.getRawY();
-                    mDownPosition = mListView.getPositionForView(mDownView);
+                    mDownPosition = AdapterViewUtil.getPositionForView(mListView, mDownView);
 
                     if (mTouchChildTouched) {
                         mVelocityTracker = VelocityTracker.obtain();

File: library/src/com/nhaarman/listviewanimations/ListViewSetter.java
Patch:
@@ -4,5 +4,5 @@
 
 public interface ListViewSetter {
 
-	void setAbsListView(AbsListView listView);
+    void setAbsListView(AbsListView listView);
 }

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/AnimateAdditionAdapter.java
Patch:
@@ -31,7 +31,8 @@
  * otherwise an {@link java.lang.IllegalArgumentException} is thrown.
  * </p>
  * Usage:
- * Wrap a new instance of this class around a {@link android.widget.BaseAdapter}. Call {@link com.nhaarman.listviewanimations.itemmanipulation.AnimateAdditionAdapter#insert(int, Object)} to animate the addition of an item.
+ * Wrap a new instance of this class around a {@link android.widget.BaseAdapter}.
+ * Call {@link com.nhaarman.listviewanimations.itemmanipulation.AnimateAdditionAdapter#insert(int, Object)} to animate the addition of an item.
  * </p>
  * Extend this class and override {@link com.nhaarman.listviewanimations.itemmanipulation.AnimateAdditionAdapter#getAdditionalAnimators(android.view.View,
  * android.view.ViewGroup)} to provide extra {@link com.nineoldandroids.animation.Animator}s.

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/ExpandCollapseListener.java
Patch:
@@ -1,5 +1,6 @@
 package com.nhaarman.listviewanimations.itemmanipulation;
 
+// TODO integrate in ExpandableListItemAdapter
 public interface ExpandCollapseListener {
 
     public void onItemExpanded(int position);

File: library/src/com/nhaarman/listviewanimations/itemmanipulation/ExpandableListItemAdapter.java
Patch:
@@ -284,7 +284,7 @@ public void expand(int position) {
     /**
      * Collapse the view at given position. Will do nothing if the view is already collapsed.
      *
-     * @param position the position to expand.
+     * @param position the position to collapse.
      */
     public void collapse(int position) {
         long itemId = getItemId(position);
@@ -296,7 +296,7 @@ public void collapse(int position) {
     }
 
     /**
-     * Toggle the view at given position.
+     * Toggle the {@link View} at given position, ignores header or footer Views.
      *
      * @param position the position of the view to toggle.
      */
@@ -307,7 +307,7 @@ public void toggle(int position) {
         boolean found = false;
         for (int i = 0; i < mAbsListView.getChildCount() && !found; i++) {
             View childView = mAbsListView.getChildAt(i);
-            if (mAbsListView.getPositionForView(childView) == position) {
+            if (mAbsListView.getPositionForView(childView) == position && childView.getTag() instanceof ViewHolder) {
                 found = true;
                 toggle(((ViewHolder) childView.getTag()).contentParent);
             }

File: example/src/com/haarman/listviewanimations/GridViewActivity.java
Patch:
@@ -15,6 +15,8 @@
 import android.view.ViewGroup;
 import android.widget.GridView;
 import android.widget.ImageView;
+
+import com.nhaarman.listviewanimations.ArrayAdapter;
 import com.nhaarman.listviewanimations.swinginadapters.prepared.SwingBottomInAnimationAdapter;
 
 public class GridViewActivity extends ActionBarActivity {

File: example/src/com/haarman/listviewanimations/MainActivity.java
Patch:
@@ -39,8 +39,8 @@
 import android.widget.Toast;
 
 import com.android.vending.billing.IInAppBillingService;
-import com.nhaarman.listviewanimations.appearanceexamples.AppearanceExamplesActivity;
-import com.nhaarman.listviewanimations.itemmanipulationexamples.ItemManipulationsExamplesActivity;
+import com.haarman.listviewanimations.appearanceexamples.AppearanceExamplesActivity;
+import com.haarman.listviewanimations.itemmanipulationexamples.ItemManipulationsExamplesActivity;
 
 public class MainActivity extends Activity {
 

File: example/src/com/haarman/listviewanimations/MyListActivity.java
Patch:
@@ -25,6 +25,8 @@
 import android.widget.ListView;
 import android.widget.TextView;
 
+import com.nhaarman.listviewanimations.ArrayAdapter;
+
 public class MyListActivity extends BaseActivity {
 
 	private ListView mListView;

File: example/src/com/haarman/listviewanimations/itemmanipulationexamples/DragAndDropActivity.java
Patch:
@@ -19,8 +19,8 @@
 import android.widget.Toast;
 
 import com.nhaarman.listviewanimations.ArrayAdapter;
-import com.nhaarman.listviewanimations.MyListActivity;
-import com.nhaarman.listviewanimations.R;
+import com.haarman.listviewanimations.MyListActivity;
+import com.haarman.listviewanimations.R;
 import com.nhaarman.listviewanimations.swinginadapters.prepared.AlphaInAnimationAdapter;
 import com.nhaarman.listviewanimations.view.DynamicListView;
 

File: example/src/com/haarman/listviewanimations/itemmanipulationexamples/ExpandableListItemActivity.java
Patch:
@@ -28,8 +28,8 @@
 import android.widget.TextView;
 import android.widget.Toast;
 
-import com.nhaarman.listviewanimations.MyListActivity;
-import com.nhaarman.listviewanimations.R;
+import com.haarman.listviewanimations.MyListActivity;
+import com.haarman.listviewanimations.R;
 import com.nhaarman.listviewanimations.itemmanipulation.ExpandableListItemAdapter;
 import com.nhaarman.listviewanimations.swinginadapters.prepared.AlphaInAnimationAdapter;
 

File: example/src/com/haarman/listviewanimations/itemmanipulationexamples/ItemManipulationsExamplesActivity.java
Patch:
@@ -22,7 +22,7 @@
 import android.support.v7.app.ActionBarActivity;
 import android.view.MenuItem;
 import android.view.View;
-import com.nhaarman.listviewanimations.R;
+import com.haarman.listviewanimations.R;
 
 public class ItemManipulationsExamplesActivity extends ActionBarActivity {
 

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoListViewTouchListener.java
Patch:
@@ -69,7 +69,7 @@ public class ContextualUndoListViewTouchListener implements SwipeOnTouchListener
 
 	public interface Callback {
 
-		void onViewSwiped(View dismissView, int dismissPosition);
+		void onViewSwiped(long dismissViewItemId, int dismissPosition);
 
 		void onListScrolled();
 	}
@@ -203,13 +203,13 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
 			}
 			if (dismiss) {
 				// dismiss
-				final View downView = mDownView; // mDownView gets none'd
+                final long itemId = ((ContextualUndoView)mDownView).getItemId();
 				// before animation ends
 				final int downPosition = mDownPosition;
 				animate(mDownView).translationX(dismissRight ? mViewWidth : -mViewWidth).alpha(0).setDuration(mAnimationTime).setListener(new AnimatorListenerAdapter() {
 					@Override
 					public void onAnimationEnd(Animator animation) {
-						mCallback.onViewSwiped(downView, downPosition);
+						mCallback.onViewSwiped(itemId, downPosition);
 					}
 				});
 			} else {

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoView.java
Patch:
@@ -76,12 +76,12 @@ public boolean isContentDisplayed() {
 
 	public void displayUndo() {
 		updateCountDownTimer("");
-		mContentView.setVisibility(View.GONE);
+		mContentView.setVisibility(View.INVISIBLE);
 		mUndoView.setVisibility(View.VISIBLE);
 	}
 
 	public void displayContentView() {
 		mContentView.setVisibility(View.VISIBLE);
-		mUndoView.setVisibility(View.GONE);
+		mUndoView.setVisibility(View.INVISIBLE);
 	}
 }
\ No newline at end of file

File: library/src/com/haarman/listviewanimations/swinginadapters/AnimationAdapter.java
Patch:
@@ -214,7 +214,6 @@ private long calculateAnimationDelay() {
 		} else {
 			long delaySinceStart = (mLastAnimatedPosition - mFirstAnimatedPosition + 1) * getAnimationDelayMillis();
 			delay = mAnimationStartMillis + getInitialDelayMillis() + delaySinceStart - System.currentTimeMillis();
-			delay -= mLastAnimatedPosition > 0 ? getAnimationDelayMillis() : 0;
 		}
 
 		return Math.max(0, delay);

File: example/src/com/haarman/listviewanimations/GridViewActivity.java
Patch:
@@ -27,6 +27,7 @@ protected void onCreate(Bundle savedInstanceState) {
 		GridView gridView = (GridView) findViewById(R.id.activity_gridview_gv);
 		AlphaInAnimationAdapter alphaInAnimationAdapter = new AlphaInAnimationAdapter(new MyAdapter(this, getItems()));
 		alphaInAnimationAdapter.setAbsListView(gridView);
+		alphaInAnimationAdapter.setInitialDelayMillis(300);
 		gridView.setAdapter(alphaInAnimationAdapter);
 
 		getSupportActionBar().setDisplayHomeAsUpEnabled(true);

File: library/src/com/haarman/listviewanimations/itemmanipulation/ExpandableListItemAdapter.java
Patch:
@@ -103,7 +103,7 @@ public View getView(int position, View convertView, ViewGroup parent) {
 		}
 
 		View titleView = getTitleView(position, viewHolder.titleView, viewHolder.titleParent);
-		if (!titleView.equals(viewHolder.titleView)) {
+		if (titleView != viewHolder.titleView) {
 			viewHolder.titleParent.removeAllViews();
 			viewHolder.titleParent.addView(titleView);
 
@@ -116,11 +116,11 @@ public View getView(int position, View convertView, ViewGroup parent) {
 		viewHolder.titleView = titleView;
 
 		View contentView = getContentView(position, viewHolder.contentView, viewHolder.contentParent);
-		if (!contentView.equals(viewHolder.contentView)) {
+		if (contentView != viewHolder.contentView) {
 			viewHolder.contentParent.removeAllViews();
 			viewHolder.contentParent.addView(contentView);
 		}
-		viewHolder.titleView = titleView;
+		viewHolder.contentParent = contentParent;
 
 		viewHolder.contentParent.setVisibility(mVisibleIds.contains(getItemId(position)) ? View.VISIBLE : View.GONE);
 		viewHolder.contentParent.setTag(getItemId(position));

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoListViewTouchListener.java
Patch:
@@ -157,10 +157,11 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
 			float velocityY = Math.abs(mVelocityTracker.getYVelocity());
 			boolean dismiss = false;
 			boolean dismissRight = false;
-			if (Math.abs(deltaX) > mViewWidth / 2) {
+			final float absDeltaX = Math.abs(deltaX);
+			if (absDeltaX > mViewWidth / 2) {
 				dismiss = true;
 				dismissRight = deltaX > 0;
-			} else if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX) {
+			} else if (mMinFlingVelocity <= velocityX && velocityX <= mMaxFlingVelocity && velocityY < velocityX && absDeltaX > mSlop) {
 				dismiss = true;
 				dismissRight = mVelocityTracker.getXVelocity() > 0;
 			}

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java
Patch:
@@ -137,7 +137,7 @@ public final View getView(int position, View convertView, ViewGroup parent) {
 			contextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));
 		}
 
-		View contentView = super.getView(position, contextualUndoView.getContentView(), parent);
+		View contentView = super.getView(position, contextualUndoView.getContentView(), contextualUndoView);
 		contextualUndoView.updateContentView(contentView);
 
 		long itemId = getItemId(position);

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java
Patch:
@@ -137,7 +137,7 @@ public final View getView(int position, View convertView, ViewGroup parent) {
 			contextualUndoView.findViewById(mUndoActionId).setOnClickListener(new UndoListener(contextualUndoView));
 		}
 
-		View contentView = super.getView(position, contextualUndoView.getContentView(), parent);
+		View contentView = super.getView(position, contextualUndoView.getContentView(), contextualUndoView);
 		contextualUndoView.updateContentView(contentView);
 
 		long itemId = getItemId(position);

File: library/src/com/haarman/listviewanimations/ArrayAdapter.java
Patch:
@@ -69,6 +69,7 @@ public long getItemId(int position) {
 	/**
 	 * Appends the specified element to the end of the list.
 	 */
+	// @ requires item != null;
 	public void add(T item) {
 		mItems.add(item);
 		notifyDataSetChanged();

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoListViewTouchListener.java
Patch:
@@ -204,6 +204,7 @@ public void onAnimationEnd(Animator animation) {
 				MotionEvent cancelEvent = MotionEvent.obtain(motionEvent);
 				cancelEvent.setAction(MotionEvent.ACTION_CANCEL | (motionEvent.getActionIndex() << MotionEvent.ACTION_POINTER_INDEX_SHIFT));
 				mListView.onTouchEvent(cancelEvent);
+				cancelEvent.recycle();
 			}
 
 			if (mSwiping) {

File: library/src/com/haarman/listviewanimations/view/Swappable.java
Patch:
@@ -10,7 +10,7 @@
  *
  * @author Anton Spaans on 9/11/13.
  */
-public interface Swapable {
+public interface Swappable {
 	
 	/**
 	 * Swaps the item on the first adapter position with the item on the second adapter position.

File: library/src/com/haarman/listviewanimations/itemmanipulation/SwipeDismissAdapter.java
Patch:
@@ -38,7 +38,7 @@ public SwipeDismissAdapter(BaseAdapter baseAdapter, OnDismissCallback callback)
 	public void setAbsListView(AbsListView listView) {
 		super.setAbsListView(listView);
 		mSwipeDismissListViewTouchListener = new SwipeDismissListViewTouchListener(listView, mCallback);
-
+		listView.setOnTouchListener(mSwipeDismissListViewTouchListener);
 	}
 
 	@Override

File: example/src/com/haarman/listviewanimations/itemmanipulationexamples/ExpandableListItemActivity.java
Patch:
@@ -58,7 +58,7 @@ private static class MyExpandableListItemAdapter extends ExpandableListItemAdapt
 		 * items == null.
 		 */
 		private MyExpandableListItemAdapter(Context context, List<Integer> items) {
-			super(context, R.layout.activity_expandablelistitem_card, R.id.activity_expandablelistitem_card_parent, R.id.activity_expandablelistitem_card_content, items);
+			super(context, R.layout.activity_expandablelistitem_card, R.id.activity_expandablelistitem_card_title, R.id.activity_expandablelistitem_card_content, items);
 			mContext = context;
 
 			final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java
Patch:
@@ -184,7 +184,9 @@ public void onViewSwiped(View dismissView, int dismissPosition) {
 	private void startAutoDeleteTimer() {
 		mHandler.removeCallbacks(mCountDownRunnable);
 
-		mCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(mAutoDeleteDelayMillis));
+		if (mCountDownFormatter != null) {
+			mCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(mAutoDeleteDelayMillis));
+		}
 
 		mDismissStartMillis = System.currentTimeMillis();
 		mHandler.postDelayed(mCountDownRunnable, Math.min(1000, mAutoDeleteDelayMillis));

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java
Patch:
@@ -143,7 +143,9 @@ public final View getView(int position, View convertView, ViewGroup parent) {
 			contextualUndoView.displayUndo();
 			mCurrentRemovedView = contextualUndoView;
 			long millisLeft = mAutoDeleteDelayMillis - (System.currentTimeMillis() - mDismissStartMillis);
-			mCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(millisLeft));
+			if (mCountDownFormatter != null) {
+				mCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(millisLeft));
+			}
 		} else {
 			contextualUndoView.displayContentView();
 		}

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java
Patch:
@@ -143,7 +143,9 @@ public final View getView(int position, View convertView, ViewGroup parent) {
 			contextualUndoView.displayUndo();
 			mCurrentRemovedView = contextualUndoView;
 			long millisLeft = mAutoDeleteDelayMillis - (System.currentTimeMillis() - mDismissStartMillis);
-			mCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(millisLeft));
+			if (mCountDownFormatter != null) {
+				mCurrentRemovedView.updateCountDownTimer(mCountDownFormatter.getCountDownString(millisLeft));
+			}
 		} else {
 			contextualUndoView.displayContentView();
 		}

File: library/src/com/haarman/listviewanimations/swinginadapters/AnimationAdapter.java
Patch:
@@ -41,7 +41,7 @@ public abstract class AnimationAdapter extends BaseAdapterDecorator {
 	private long mAnimationStartMillis;
 	private int mLastAnimatedPosition;
 	private boolean mHasParentAnimationAdapter;
-	private boolean mShouldAnimate;
+	private boolean mShouldAnimate = true;
 
 	public AnimationAdapter(BaseAdapter baseAdapter) {
 		super(baseAdapter);

File: library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoListViewTouchListener.java
Patch:
@@ -124,7 +124,7 @@ public boolean onTouch(View view, MotionEvent motionEvent) {
                     }
                 }
 
-                if (mDownView != null) {
+                if (mDownView != null && mDownView instanceof ContextualUndoView) {
                     mDownX = motionEvent.getRawX();
                     mDownPosition = mListView.getPositionForView(mDownView);
 
@@ -213,6 +213,6 @@ public void onAnimationEnd(Animator animation) {
                 break;
             }
         }
-        return false;
+    	return false;
     }
 }
\ No newline at end of file

File: library/src/com/haarman/listviewanimations/swinginadapters/AnimationAdapter.java
Patch:
@@ -15,6 +15,7 @@
  */
 package com.haarman.listviewanimations.swinginadapters;
 
+import android.os.Build;
 import android.util.SparseArray;
 import android.view.View;
 import android.view.ViewGroup;
@@ -163,7 +164,7 @@ private long calculateAnimationDelay() {
         if (numberOfItems + 1 < mLastAnimatedPosition) {
             delay = getAnimationDelayMillis();
 
-            if (getAbsListView() instanceof GridView) {
+            if (getAbsListView() instanceof GridView && Build.VERSION.SDK_INT >= 11) {
                 delay += getAnimationDelayMillis() * ((mLastAnimatedPosition + 1) % ((GridView) getAbsListView()).getNumColumns());
             }
         } else {

File: library/src/com/haarman/listviewanimations/BaseAdapterDecorator.java
Patch:
@@ -20,7 +20,6 @@
 import android.view.ViewGroup;
 import android.widget.AbsListView;
 import android.widget.BaseAdapter;
-import android.widget.ListView;
 
 /**
  * A decorator class that enables decoration of an instance of the BaseAdapter
@@ -40,7 +39,6 @@ public BaseAdapterDecorator(BaseAdapter baseAdapter) {
 	}
 
     @Deprecated
-    @SuppressWarnings("Deprecated")
     /**
      * @deprecated use setAbsListView(AbsListView) instead.
      */

File: library/src/com/haarman/listviewanimations/itemmanipulation/ExpandableListItemAdapter.java
Patch:
@@ -174,7 +174,7 @@ public void onClick(View view) {
 
             if (isVisible) {
                 animateCollapsing();
-                mVisibleIds.remove((Long) mContentParent.getTag());
+                mVisibleIds.remove(mContentParent.getTag());
             } else {
                 animateExpanding();
                 mVisibleIds.add((Long) mContentParent.getTag());

File: library/src/com/haarman/listviewanimations/itemmanipulation/SwipeDismissAdapter.java
Patch:
@@ -17,7 +17,6 @@
 
 import android.widget.AbsListView;
 import android.widget.BaseAdapter;
-import android.widget.ListView;
 
 import com.haarman.listviewanimations.BaseAdapterDecorator;
 

File: library/src/com/haarman/listviewanimations/itemmanipulation/SwipeDismissListViewTouchListener.java
Patch:
@@ -2,6 +2,7 @@
 
 /*
  * Copyright 2012 Roman Nurik
+ * Copyright 2013 Niek Haarman
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.

File: library/src/com/haarman/listviewanimations/swinginadapters/AnimationAdapter.java
Patch:
@@ -27,8 +27,8 @@
 import com.nineoldandroids.animation.ObjectAnimator;
 
 /**
- * An ArrayAdapter class which applies multiple Animators at once to views when
- * they are first shown. The Animators applied are to be specified in
+ * A BaseAdapterDecorator class which applies multiple Animators at once to views when
+ * they are first shown. The Animators applied include the animations specified in
  * getAnimators(ViewGroup, View), plus an alpha transition.
  */
 public abstract class AnimationAdapter extends BaseAdapterDecorator {

File: library/src/com/haarman/listviewanimations/itemmanipulation/SwipeDismissListViewTouchListener.java
Patch:
@@ -293,7 +293,7 @@ public void onAnimationEnd(Animator animation) {
 						ViewHelper.setAlpha(pendingDismiss.view, 1f);
 						ViewHelper.setTranslationX(pendingDismiss.view, 0);
 						lp = pendingDismiss.view.getLayoutParams();
-						lp.height = originalHeight;
+						lp.height = 0;
 						pendingDismiss.view.setLayoutParams(lp);
 					}
 

File: library/src/com/haarman/listviewanimations/swinginadapters/ResourceAnimationAdapter.java
Patch:
@@ -34,7 +34,7 @@ public ResourceAnimationAdapter(BaseAdapter baseAdapter, Context context) {
 	}
 
 	@Override
-	protected Animator[] getAnimators(ViewGroup parent, View view) {
+	public Animator[] getAnimators(ViewGroup parent, View view) {
 		return new Animator[] { AnimatorInflater.loadAnimator(getContext(), getAnimationResourceId()) };
 	}
 

File: library/src/com/haarman/listviewanimations/swinginadapters/SingleAnimationAdapter.java
Patch:
@@ -33,7 +33,7 @@ public SingleAnimationAdapter(BaseAdapter baseAdapter, Context context) {
 	}
 
 	@Override
-	protected Animator[] getAnimators(ViewGroup parent, View view) {
+	public Animator[] getAnimators(ViewGroup parent, View view) {
 		Animator animator = getAnimator(parent, view);
 		return new Animator[] { animator };
 	}

File: library/src/com/haarman/listviewanimations/swinginadapters/ResourceAnimationAdapter.java
Patch:
@@ -39,8 +39,8 @@ public ResourceAnimationAdapter(Context context, ArrayList<T> items) {
 	}
 
 	@Override
-	protected Animator getAnimator(ViewGroup parent, View view) {
-		return AnimatorInflater.loadAnimator(getContext(), getAnimationResourceId());
+	protected Animator[] getAnimators(ViewGroup parent, View view) {
+		return new Animator[] { AnimatorInflater.loadAnimator(getContext(), getAnimationResourceId()) };
 	}
 
 	/**

File: library/src/com/haarman/listviewanimations/SwingBottomInAnimationAdapter.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.nineoldandroids.animation.PropertyValuesHolder;
 
-public abstract class SwingBottomInAnimationAdapter<T> extends AnimationAdapter<T> {
+public abstract class SwingBottomInAnimationAdapter<T> extends PropertyValuesAnimationAdapter<T> {
 
 	public SwingBottomInAnimationAdapter(Context context) {
 		super(context);

File: library/src/com/haarman/listviewanimations/SwingLeftInAnimationAdapter.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.nineoldandroids.animation.PropertyValuesHolder;
 
-public abstract class SwingLeftInAnimationAdapter<T> extends AnimationAdapter<T> {
+public abstract class SwingLeftInAnimationAdapter<T> extends PropertyValuesAnimationAdapter<T> {
 
 	public SwingLeftInAnimationAdapter(Context context) {
 		super(context);

File: library/src/com/haarman/listviewanimations/SwingRightInAnimationAdapter.java
Patch:
@@ -22,7 +22,7 @@
 
 import com.nineoldandroids.animation.PropertyValuesHolder;
 
-public abstract class SwingRightInAnimationAdapter<T> extends AnimationAdapter<T> {
+public abstract class SwingRightInAnimationAdapter<T> extends PropertyValuesAnimationAdapter<T> {
 
 	public SwingRightInAnimationAdapter(Context context) {
 		super(context);

